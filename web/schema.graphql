schema {
  query: Query
}

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(forceGenerate: Boolean, model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Area implements Node {
  code: String!
  createdAt: Time!
  customers: [Customer!]
  id: ID!
  name: String!
  tenders: [Tender!]
  updatedAt: Time!
}

"""A connection to a list of items."""
type AreaConnection {
  """A list of edges."""
  edges: [AreaEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type AreaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Area
}

"""
AreaWhereInput is used for filtering Area objects.
Input was generated by ent.
"""
input AreaWhereInput {
  and: [AreaWhereInput!]
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """customers edge predicates"""
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """tenders edge predicates"""
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: AreaWhereInput
  or: [AreaWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
CreateAreaInput is used for create Area object.
Input was generated by ent.
"""
input CreateAreaInput {
  code: String!
  createdAt: Time
  customerIDs: [ID!]
  name: String!
  tenderIDs: [ID!]
  updatedAt: Time
}

"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  areaID: ID!
  contactPerson: String
  contactPersonEmail: String
  contactPersonPhone: String
  contactPersonPosition: String
  createdAt: Time
  industry: Int!
  name: String!
  ownerType: Int
  status: Int
  tenderIDs: [ID!]
  updatedAt: Time
}

"""
CreateOpportunityInput is used for create Opportunity object.
Input was generated by ent.
"""
input CreateOpportunityInput {
  createdAt: Time
  registrationNumber: String!
  updatedAt: Time
}

"""
CreateTenderInput is used for create Tender object.
Input was generated by ent.
"""
input CreateTenderInput {
  areaID: ID!
  attachements: [String!]
  code: String!
  competitivePartnershipRating: Int
  createdAt: Time
  creditAndPaymentRating: Int
  customerID: ID!
  customerRelationshipRating: Int
  estimatedAmount: Float
  estimatedProjectEndDate: Time
  estimatedProjectStartDate: Time
  findDate: Time!
  geoLocation: String
  images: [String!]
  name: String!
  prepareToBid: Boolean
  projectCode: String
  projectDefinition: String
  projectType: String
  remark: String
  sizeAndValueRating: Int
  status: Int
  tenderDate: Time
  timeLimitRating: Int
  updatedAt: Time
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  name: String!
  updatedAt: Time
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Customer implements Node {
  area: Area!
  areaID: ID!
  contactPerson: String
  contactPersonEmail: String
  contactPersonPhone: String
  contactPersonPosition: String
  createdAt: Time!
  id: ID!
  industry: Int!
  name: String!
  ownerType: Int
  status: Int
  tenders: [Tender!]
  updatedAt: Time!
}

"""A connection to a list of items."""
type CustomerConnection {
  """A list of edges."""
  edges: [CustomerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CustomerEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Customer
}

"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  and: [CustomerWhereInput!]
  """area_id field predicates"""
  areaID: ID
  areaIDGT: ID
  areaIDGTE: ID
  areaIDIn: [ID!]
  areaIDLT: ID
  areaIDLTE: ID
  areaIDNEQ: ID
  areaIDNotIn: [ID!]
  """contact_person field predicates"""
  contactPerson: String
  contactPersonContains: String
  contactPersonContainsFold: String
  """contact_person_email field predicates"""
  contactPersonEmail: String
  contactPersonEmailContains: String
  contactPersonEmailContainsFold: String
  contactPersonEmailEqualFold: String
  contactPersonEmailGT: String
  contactPersonEmailGTE: String
  contactPersonEmailHasPrefix: String
  contactPersonEmailHasSuffix: String
  contactPersonEmailIn: [String!]
  contactPersonEmailIsNil: Boolean
  contactPersonEmailLT: String
  contactPersonEmailLTE: String
  contactPersonEmailNEQ: String
  contactPersonEmailNotIn: [String!]
  contactPersonEmailNotNil: Boolean
  contactPersonEqualFold: String
  contactPersonGT: String
  contactPersonGTE: String
  contactPersonHasPrefix: String
  contactPersonHasSuffix: String
  contactPersonIn: [String!]
  contactPersonIsNil: Boolean
  contactPersonLT: String
  contactPersonLTE: String
  contactPersonNEQ: String
  contactPersonNotIn: [String!]
  contactPersonNotNil: Boolean
  """contact_person_phone field predicates"""
  contactPersonPhone: String
  contactPersonPhoneContains: String
  contactPersonPhoneContainsFold: String
  contactPersonPhoneEqualFold: String
  contactPersonPhoneGT: String
  contactPersonPhoneGTE: String
  contactPersonPhoneHasPrefix: String
  contactPersonPhoneHasSuffix: String
  contactPersonPhoneIn: [String!]
  contactPersonPhoneIsNil: Boolean
  contactPersonPhoneLT: String
  contactPersonPhoneLTE: String
  contactPersonPhoneNEQ: String
  contactPersonPhoneNotIn: [String!]
  contactPersonPhoneNotNil: Boolean
  """contact_person_position field predicates"""
  contactPersonPosition: String
  contactPersonPositionContains: String
  contactPersonPositionContainsFold: String
  contactPersonPositionEqualFold: String
  contactPersonPositionGT: String
  contactPersonPositionGTE: String
  contactPersonPositionHasPrefix: String
  contactPersonPositionHasSuffix: String
  contactPersonPositionIn: [String!]
  contactPersonPositionIsNil: Boolean
  contactPersonPositionLT: String
  contactPersonPositionLTE: String
  contactPersonPositionNEQ: String
  contactPersonPositionNotIn: [String!]
  contactPersonPositionNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """area edge predicates"""
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """tenders edge predicates"""
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """industry field predicates"""
  industry: Int
  industryGT: Int
  industryGTE: Int
  industryIn: [Int!]
  industryLT: Int
  industryLTE: Int
  industryNEQ: Int
  industryNotIn: [Int!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: CustomerWhereInput
  or: [CustomerWhereInput!]
  """owner_type field predicates"""
  ownerType: Int
  ownerTypeGT: Int
  ownerTypeGTE: Int
  ownerTypeIn: [Int!]
  ownerTypeIsNil: Boolean
  ownerTypeLT: Int
  ownerTypeLTE: Int
  ownerTypeNEQ: Int
  ownerTypeNotIn: [Int!]
  ownerTypeNotNil: Boolean
  """status field predicates"""
  status: Int
  statusGT: Int
  statusGTE: Int
  statusIn: [Int!]
  statusIsNil: Boolean
  statusLT: Int
  statusLTE: Int
  statusNEQ: Int
  statusNotIn: [Int!]
  statusNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "cscd-bds/store/ent.Noder") {
  """The id of the object."""
  id: ID!
}

type Opportunity implements Node {
  createdAt: Time!
  id: ID!
  registrationNumber: String!
  updatedAt: Time!
}

"""A connection to a list of items."""
type OpportunityConnection {
  """A list of edges."""
  edges: [OpportunityEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OpportunityEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Opportunity
}

"""
OpportunityWhereInput is used for filtering Opportunity objects.
Input was generated by ent.
"""
input OpportunityWhereInput {
  and: [OpportunityWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OpportunityWhereInput
  or: [OpportunityWhereInput!]
  """registration_number field predicates"""
  registrationNumber: String
  registrationNumberContains: String
  registrationNumberContainsFold: String
  registrationNumberEqualFold: String
  registrationNumberGT: String
  registrationNumberGTE: String
  registrationNumberHasPrefix: String
  registrationNumberHasSuffix: String
  registrationNumberIn: [String!]
  registrationNumberLT: String
  registrationNumberLTE: String
  registrationNumberNEQ: String
  registrationNumberNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Query {
  areas(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Areas returned from the connection."""
    where: AreaWhereInput
  ): AreaConnection!
  customers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Customers returned from the connection."""
    where: CustomerWhereInput
  ): CustomerConnection!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  opportunities(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Opportunities returned from the connection."""
    where: OpportunityWhereInput
  ): OpportunityConnection!
  tenders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Tenders returned from the connection."""
    where: TenderWhereInput
  ): TenderConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}

type Tender implements Node {
  area: Area!
  areaID: ID!
  attachements: [String!]
  code: String!
  competitivePartnershipRating: Int
  createdAt: Time!
  creditAndPaymentRating: Int
  customer: Customer!
  customerID: ID!
  customerRelationshipRating: Int
  estimatedAmount: Float
  estimatedProjectEndDate: Time
  estimatedProjectStartDate: Time
  findDate: Time!
  geoLocation: String
  id: ID!
  images: [String!]
  name: String!
  prepareToBid: Boolean!
  projectCode: String
  projectDefinition: String
  projectType: String
  remark: String
  sizeAndValueRating: Int
  status: Int!
  tenderDate: Time
  timeLimitRating: Int
  updatedAt: Time!
}

"""A connection to a list of items."""
type TenderConnection {
  """A list of edges."""
  edges: [TenderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TenderEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Tender
}

"""
TenderWhereInput is used for filtering Tender objects.
Input was generated by ent.
"""
input TenderWhereInput {
  and: [TenderWhereInput!]
  """area_id field predicates"""
  areaID: ID
  areaIDGT: ID
  areaIDGTE: ID
  areaIDIn: [ID!]
  areaIDLT: ID
  areaIDLTE: ID
  areaIDNEQ: ID
  areaIDNotIn: [ID!]
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  """competitive_partnership_rating field predicates"""
  competitivePartnershipRating: Int
  competitivePartnershipRatingGT: Int
  competitivePartnershipRatingGTE: Int
  competitivePartnershipRatingIn: [Int!]
  competitivePartnershipRatingIsNil: Boolean
  competitivePartnershipRatingLT: Int
  competitivePartnershipRatingLTE: Int
  competitivePartnershipRatingNEQ: Int
  competitivePartnershipRatingNotIn: [Int!]
  competitivePartnershipRatingNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """credit_and_payment_rating field predicates"""
  creditAndPaymentRating: Int
  creditAndPaymentRatingGT: Int
  creditAndPaymentRatingGTE: Int
  creditAndPaymentRatingIn: [Int!]
  creditAndPaymentRatingIsNil: Boolean
  creditAndPaymentRatingLT: Int
  creditAndPaymentRatingLTE: Int
  creditAndPaymentRatingNEQ: Int
  creditAndPaymentRatingNotIn: [Int!]
  creditAndPaymentRatingNotNil: Boolean
  """customer_id field predicates"""
  customerID: ID
  customerIDGT: ID
  customerIDGTE: ID
  customerIDIn: [ID!]
  customerIDLT: ID
  customerIDLTE: ID
  customerIDNEQ: ID
  customerIDNotIn: [ID!]
  """customer_relationship_rating field predicates"""
  customerRelationshipRating: Int
  customerRelationshipRatingGT: Int
  customerRelationshipRatingGTE: Int
  customerRelationshipRatingIn: [Int!]
  customerRelationshipRatingIsNil: Boolean
  customerRelationshipRatingLT: Int
  customerRelationshipRatingLTE: Int
  customerRelationshipRatingNEQ: Int
  customerRelationshipRatingNotIn: [Int!]
  customerRelationshipRatingNotNil: Boolean
  """estimated_amount field predicates"""
  estimatedAmount: Float
  estimatedAmountGT: Float
  estimatedAmountGTE: Float
  estimatedAmountIn: [Float!]
  estimatedAmountIsNil: Boolean
  estimatedAmountLT: Float
  estimatedAmountLTE: Float
  estimatedAmountNEQ: Float
  estimatedAmountNotIn: [Float!]
  estimatedAmountNotNil: Boolean
  """estimated_project_end_date field predicates"""
  estimatedProjectEndDate: Time
  estimatedProjectEndDateGT: Time
  estimatedProjectEndDateGTE: Time
  estimatedProjectEndDateIn: [Time!]
  estimatedProjectEndDateIsNil: Boolean
  estimatedProjectEndDateLT: Time
  estimatedProjectEndDateLTE: Time
  estimatedProjectEndDateNEQ: Time
  estimatedProjectEndDateNotIn: [Time!]
  estimatedProjectEndDateNotNil: Boolean
  """estimated_project_start_date field predicates"""
  estimatedProjectStartDate: Time
  estimatedProjectStartDateGT: Time
  estimatedProjectStartDateGTE: Time
  estimatedProjectStartDateIn: [Time!]
  estimatedProjectStartDateIsNil: Boolean
  estimatedProjectStartDateLT: Time
  estimatedProjectStartDateLTE: Time
  estimatedProjectStartDateNEQ: Time
  estimatedProjectStartDateNotIn: [Time!]
  estimatedProjectStartDateNotNil: Boolean
  """find_date field predicates"""
  findDate: Time
  findDateGT: Time
  findDateGTE: Time
  findDateIn: [Time!]
  findDateLT: Time
  findDateLTE: Time
  findDateNEQ: Time
  findDateNotIn: [Time!]
  """geo_location field predicates"""
  geoLocation: String
  geoLocationContains: String
  geoLocationContainsFold: String
  geoLocationEqualFold: String
  geoLocationGT: String
  geoLocationGTE: String
  geoLocationHasPrefix: String
  geoLocationHasSuffix: String
  geoLocationIn: [String!]
  geoLocationIsNil: Boolean
  geoLocationLT: String
  geoLocationLTE: String
  geoLocationNEQ: String
  geoLocationNotIn: [String!]
  geoLocationNotNil: Boolean
  """area edge predicates"""
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """customer edge predicates"""
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TenderWhereInput
  or: [TenderWhereInput!]
  """prepare_to_bid field predicates"""
  prepareToBid: Boolean
  prepareToBidNEQ: Boolean
  """project_code field predicates"""
  projectCode: String
  projectCodeContains: String
  projectCodeContainsFold: String
  projectCodeEqualFold: String
  projectCodeGT: String
  projectCodeGTE: String
  projectCodeHasPrefix: String
  projectCodeHasSuffix: String
  projectCodeIn: [String!]
  projectCodeIsNil: Boolean
  projectCodeLT: String
  projectCodeLTE: String
  projectCodeNEQ: String
  projectCodeNotIn: [String!]
  projectCodeNotNil: Boolean
  """project_definition field predicates"""
  projectDefinition: String
  projectDefinitionContains: String
  projectDefinitionContainsFold: String
  projectDefinitionEqualFold: String
  projectDefinitionGT: String
  projectDefinitionGTE: String
  projectDefinitionHasPrefix: String
  projectDefinitionHasSuffix: String
  projectDefinitionIn: [String!]
  projectDefinitionIsNil: Boolean
  projectDefinitionLT: String
  projectDefinitionLTE: String
  projectDefinitionNEQ: String
  projectDefinitionNotIn: [String!]
  projectDefinitionNotNil: Boolean
  """project_type field predicates"""
  projectType: String
  projectTypeContains: String
  projectTypeContainsFold: String
  projectTypeEqualFold: String
  projectTypeGT: String
  projectTypeGTE: String
  projectTypeHasPrefix: String
  projectTypeHasSuffix: String
  projectTypeIn: [String!]
  projectTypeIsNil: Boolean
  projectTypeLT: String
  projectTypeLTE: String
  projectTypeNEQ: String
  projectTypeNotIn: [String!]
  projectTypeNotNil: Boolean
  """remark field predicates"""
  remark: String
  remarkContains: String
  remarkContainsFold: String
  remarkEqualFold: String
  remarkGT: String
  remarkGTE: String
  remarkHasPrefix: String
  remarkHasSuffix: String
  remarkIn: [String!]
  remarkIsNil: Boolean
  remarkLT: String
  remarkLTE: String
  remarkNEQ: String
  remarkNotIn: [String!]
  remarkNotNil: Boolean
  """size_and_value_rating field predicates"""
  sizeAndValueRating: Int
  sizeAndValueRatingGT: Int
  sizeAndValueRatingGTE: Int
  sizeAndValueRatingIn: [Int!]
  sizeAndValueRatingIsNil: Boolean
  sizeAndValueRatingLT: Int
  sizeAndValueRatingLTE: Int
  sizeAndValueRatingNEQ: Int
  sizeAndValueRatingNotIn: [Int!]
  sizeAndValueRatingNotNil: Boolean
  """status field predicates"""
  status: Int
  statusGT: Int
  statusGTE: Int
  statusIn: [Int!]
  statusLT: Int
  statusLTE: Int
  statusNEQ: Int
  statusNotIn: [Int!]
  """tender_date field predicates"""
  tenderDate: Time
  tenderDateGT: Time
  tenderDateGTE: Time
  tenderDateIn: [Time!]
  tenderDateIsNil: Boolean
  tenderDateLT: Time
  tenderDateLTE: Time
  tenderDateNEQ: Time
  tenderDateNotIn: [Time!]
  tenderDateNotNil: Boolean
  """time_limit_rating field predicates"""
  timeLimitRating: Int
  timeLimitRatingGT: Int
  timeLimitRatingGTE: Int
  timeLimitRatingIn: [Int!]
  timeLimitRatingIsNil: Boolean
  timeLimitRatingLT: Int
  timeLimitRatingLTE: Int
  timeLimitRatingNEQ: Int
  timeLimitRatingNotIn: [Int!]
  timeLimitRatingNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

scalar Time

"""
UpdateAreaInput is used for update Area object.
Input was generated by ent.
"""
input UpdateAreaInput {
  addCustomerIDs: [ID!]
  addTenderIDs: [ID!]
  clearCustomers: Boolean
  clearTenders: Boolean
  code: String
  name: String
  removeCustomerIDs: [ID!]
  removeTenderIDs: [ID!]
  updatedAt: Time
}

"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  addTenderIDs: [ID!]
  areaID: ID
  clearContactPerson: Boolean
  clearContactPersonEmail: Boolean
  clearContactPersonPhone: Boolean
  clearContactPersonPosition: Boolean
  clearOwnerType: Boolean
  clearStatus: Boolean
  clearTenders: Boolean
  contactPerson: String
  contactPersonEmail: String
  contactPersonPhone: String
  contactPersonPosition: String
  industry: Int
  name: String
  ownerType: Int
  removeTenderIDs: [ID!]
  status: Int
  updatedAt: Time
}

"""
UpdateOpportunityInput is used for update Opportunity object.
Input was generated by ent.
"""
input UpdateOpportunityInput {
  registrationNumber: String
  updatedAt: Time
}

"""
UpdateTenderInput is used for update Tender object.
Input was generated by ent.
"""
input UpdateTenderInput {
  appendAttachements: [String!]
  appendImages: [String!]
  areaID: ID
  attachements: [String!]
  clearAttachements: Boolean
  clearCompetitivePartnershipRating: Boolean
  clearCreditAndPaymentRating: Boolean
  clearCustomerRelationshipRating: Boolean
  clearEstimatedAmount: Boolean
  clearEstimatedProjectEndDate: Boolean
  clearEstimatedProjectStartDate: Boolean
  clearGeoLocation: Boolean
  clearImages: Boolean
  clearProjectCode: Boolean
  clearProjectDefinition: Boolean
  clearProjectType: Boolean
  clearRemark: Boolean
  clearSizeAndValueRating: Boolean
  clearTenderDate: Boolean
  clearTimeLimitRating: Boolean
  code: String
  competitivePartnershipRating: Int
  creditAndPaymentRating: Int
  customerID: ID
  customerRelationshipRating: Int
  estimatedAmount: Float
  estimatedProjectEndDate: Time
  estimatedProjectStartDate: Time
  findDate: Time
  geoLocation: String
  images: [String!]
  name: String
  prepareToBid: Boolean
  projectCode: String
  projectDefinition: String
  projectType: String
  remark: String
  sizeAndValueRating: Int
  status: Int
  tenderDate: Time
  timeLimitRating: Int
  updatedAt: Time
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  updatedAt: Time
}

type User implements Node {
  createdAt: Time!
  id: ID!
  name: String!
  updatedAt: Time!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  and: [UserWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: UserWhereInput
  or: [UserWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}