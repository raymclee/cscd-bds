/* eslint-disable */
import { DocumentTypeDecoration } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  Time: { input: any; output: any; }
};

export type Area = Node & {
  __typename?: 'Area';
  center?: Maybe<GeoJson>;
  code: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  customers: CustomerConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provinces: ProvinceConnection;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
  users: UserConnection;
};


export type AreaCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type AreaProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};


export type AreaTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};


export type AreaUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

/** A connection to a list of items. */
export type AreaConnection = {
  __typename?: 'AreaConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AreaEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type AreaEdge = {
  __typename?: 'AreaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Area>;
};

/** Ordering options for Area connections */
export type AreaOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Areas. */
  field: AreaOrderField;
};

/** Properties by which Area connections can be ordered. */
export enum AreaOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * AreaWhereInput is used for filtering Area objects.
 * Input was generated by ent.
 */
export type AreaWhereInput = {
  and?: InputMaybe<Array<AreaWhereInput>>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customers edge predicates */
  hasCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomersWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** provinces edge predicates */
  hasProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvincesWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** users edge predicates */
  hasUsers?: InputMaybe<Scalars['Boolean']['input']>;
  hasUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<AreaWhereInput>;
  or?: InputMaybe<Array<AreaWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type City = Node & {
  __typename?: 'City';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  createdAt: Scalars['Time']['output'];
  districts: DistrictConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provCode: Scalars['Int']['output'];
  province: Province;
  provinceID: Scalars['ID']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type CityDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type CityTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type CityConnection = {
  __typename?: 'CityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CityEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CityEdge = {
  __typename?: 'CityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<City>;
};

/** Ordering options for City connections */
export type CityOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Cities. */
  field: CityOrderField;
};

/** Properties by which City connections can be ordered. */
export enum CityOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * CityWhereInput is used for filtering City objects.
 * Input was generated by ent.
 */
export type CityWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<CityWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** districts edge predicates */
  hasDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictsWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CityWhereInput>;
  or?: InputMaybe<Array<CityWhereInput>>;
  /** prov_code field predicates */
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provCodeGT?: InputMaybe<Scalars['Int']['input']>;
  provCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  provCodeLT?: InputMaybe<Scalars['Int']['input']>;
  provCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  provCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Competitor = Node & {
  __typename?: 'Competitor';
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  shortName: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
  wonTenders: TenderConnection;
};


export type CompetitorWonTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type CompetitorConnection = {
  __typename?: 'CompetitorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CompetitorEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CompetitorEdge = {
  __typename?: 'CompetitorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Competitor>;
};

/** Ordering options for Competitor connections */
export type CompetitorOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Competitors. */
  field: CompetitorOrderField;
};

/** Properties by which Competitor connections can be ordered. */
export enum CompetitorOrderField {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME'
}

/**
 * CompetitorWhereInput is used for filtering Competitor objects.
 * Input was generated by ent.
 */
export type CompetitorWhereInput = {
  and?: InputMaybe<Array<CompetitorWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** won_tenders edge predicates */
  hasWonTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasWonTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CompetitorWhereInput>;
  or?: InputMaybe<Array<CompetitorWhereInput>>;
  /** short_name field predicates */
  shortName?: InputMaybe<Scalars['String']['input']>;
  shortNameContains?: InputMaybe<Scalars['String']['input']>;
  shortNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  shortNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  shortNameGT?: InputMaybe<Scalars['String']['input']>;
  shortNameGTE?: InputMaybe<Scalars['String']['input']>;
  shortNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  shortNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  shortNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  shortNameLT?: InputMaybe<Scalars['String']['input']>;
  shortNameLTE?: InputMaybe<Scalars['String']['input']>;
  shortNameNEQ?: InputMaybe<Scalars['String']['input']>;
  shortNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Country = Node & {
  __typename?: 'Country';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provinces: ProvinceConnection;
  updatedAt: Scalars['Time']['output'];
};


export type CountryProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};

/** A connection to a list of items. */
export type CountryConnection = {
  __typename?: 'CountryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CountryEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CountryEdge = {
  __typename?: 'CountryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Country>;
};

/** Ordering options for Country connections */
export type CountryOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Countries. */
  field: CountryOrderField;
};

/** Properties by which Country connections can be ordered. */
export enum CountryOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * CountryWhereInput is used for filtering Country objects.
 * Input was generated by ent.
 */
export type CountryWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<CountryWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** provinces edge predicates */
  hasProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvincesWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CountryWhereInput>;
  or?: InputMaybe<Array<CountryWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * CreateAreaInput is used for create Area object.
 * Input was generated by ent.
 */
export type CreateAreaInput = {
  code: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  provinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  userIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateCityInput is used for create City object.
 * Input was generated by ent.
 */
export type CreateCityInput = {
  adcode: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  provCode: Scalars['Int']['input'];
  provinceID: Scalars['ID']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateCompetitorInput is used for create Competitor object.
 * Input was generated by ent.
 */
export type CreateCompetitorInput = {
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  name: Scalars['String']['input'];
  shortName: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  wonTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateCountryInput is used for create Country object.
 * Input was generated by ent.
 */
export type CreateCountryInput = {
  adcode: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  name: Scalars['String']['input'];
  provinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateCustomerInput is used for create Customer object.
 * Input was generated by ent.
 */
export type CreateCustomerInput = {
  areaID: Scalars['ID']['input'];
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  industry?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  salesID?: InputMaybe<Scalars['ID']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateDistrictInput is used for create District object.
 * Input was generated by ent.
 */
export type CreateDistrictInput = {
  adcode: Scalars['Int']['input'];
  cityCode: Scalars['Int']['input'];
  cityID?: InputMaybe<Scalars['ID']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  name: Scalars['String']['input'];
  plotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  provCode: Scalars['Int']['input'];
  provinceID: Scalars['ID']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreatePlotInput is used for create Plot object.
 * Input was generated by ent.
 */
export type CreatePlotInput = {
  colorHex: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtID: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateProvinceInput is used for create Province object.
 * Input was generated by ent.
 */
export type CreateProvinceInput = {
  adcode: Scalars['Int']['input'];
  areaID?: InputMaybe<Scalars['ID']['input']>;
  cityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  countryID: Scalars['ID']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateTenderInput is used for create Tender object.
 * Input was generated by ent.
 */
export type CreateTenderInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  /** 則師，只限港澳 */
  architect?: InputMaybe<Scalars['String']['input']>;
  areaID: Scalars['ID']['input'];
  attachements?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  code: Scalars['String']['input'];
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitorID?: InputMaybe<Scalars['ID']['input']>;
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  /** 施工面積，只限港澳 */
  constructionArea?: InputMaybe<Scalars['String']['input']>;
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractor?: InputMaybe<Scalars['String']['input']>;
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  currentProgress?: InputMaybe<Scalars['String']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  designUnit?: InputMaybe<Scalars['String']['input']>;
  /** 業主，只限港澳 */
  developer?: InputMaybe<Scalars['String']['input']>;
  discoveryDate: Scalars['Time']['input'];
  districtID?: InputMaybe<Scalars['ID']['input']>;
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  finderID?: InputMaybe<Scalars['ID']['input']>;
  followingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<Array<Scalars['String']['input']>>;
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  /** 最後一次投標金額，只限港澳 */
  lastTenderAmount?: InputMaybe<Scalars['Float']['input']>;
  levelInvolved?: InputMaybe<Scalars['Int']['input']>;
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectType?: InputMaybe<Scalars['String']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  remark?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  /** 交標日期，只限港澳 */
  tenderClosingDate?: InputMaybe<Scalars['Time']['input']>;
  /** 投標編號，只限港澳 */
  tenderCode?: InputMaybe<Scalars['String']['input']>;
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  /** 得標金額，只限港澳 */
  tenderWinAmount?: InputMaybe<Scalars['Float']['input']>;
  tenderWinCompany?: InputMaybe<Scalars['String']['input']>;
  /** 得標日期，只限港澳 */
  tenderWinDate?: InputMaybe<Scalars['Time']['input']>;
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  areaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  avatarURL?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hasEditAccess?: InputMaybe<Scalars['Boolean']['input']>;
  hasMapAccess?: InputMaybe<Scalars['Boolean']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isCeo?: InputMaybe<Scalars['Boolean']['input']>;
  isSuperAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  openID: Scalars['String']['input'];
  projectIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  teamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateVisitRecordInput is used for create VisitRecord object.
 * Input was generated by ent.
 */
export type CreateVisitRecordInput = {
  commContent: Scalars['String']['input'];
  commPeople: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerID: Scalars['ID']['input'];
  date: Scalars['Time']['input'];
  followupbyIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  nextStep?: InputMaybe<Scalars['String']['input']>;
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitType?: InputMaybe<Scalars['Int']['input']>;
};

export type Customer = Node & {
  __typename?: 'Customer';
  area: Area;
  areaID: Scalars['ID']['output'];
  contactPerson?: Maybe<Scalars['String']['output']>;
  contactPersonEmail?: Maybe<Scalars['String']['output']>;
  contactPersonPhone?: Maybe<Scalars['String']['output']>;
  contactPersonPosition?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  createdBy?: Maybe<User>;
  createdByID?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  industry?: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  ownerType?: Maybe<Scalars['Int']['output']>;
  sales?: Maybe<User>;
  salesID?: Maybe<Scalars['ID']['output']>;
  size?: Maybe<Scalars['Int']['output']>;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
  visitRecords: VisitRecordConnection;
};


export type CustomerTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};


export type CustomerVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CustomerEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Customer>;
};

/** Ordering options for Customer connections */
export type CustomerOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Customers. */
  field: CustomerOrderField;
};

/** Properties by which Customer connections can be ordered. */
export enum CustomerOrderField {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  OwnerType = 'OWNER_TYPE'
}

/**
 * CustomerWhereInput is used for filtering Customer objects.
 * Input was generated by ent.
 */
export type CustomerWhereInput = {
  and?: InputMaybe<Array<CustomerWhereInput>>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** contact_person field predicates */
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonContainsFold?: InputMaybe<Scalars['String']['input']>;
  /** contact_person_email field predicates */
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonEmailIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonEmailLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonEmailNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contact_person_phone field predicates */
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPhoneIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonPhoneLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPhoneNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contact_person_position field predicates */
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPositionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonPositionLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPositionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** created_by_id field predicates */
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContains?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  createdByIDLT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDLTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** created_by edge predicates */
  hasCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedByWith?: InputMaybe<Array<UserWhereInput>>;
  /** sales edge predicates */
  hasSales?: InputMaybe<Scalars['Boolean']['input']>;
  hasSalesWith?: InputMaybe<Array<UserWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** industry field predicates */
  industry?: InputMaybe<Scalars['Int']['input']>;
  industryGT?: InputMaybe<Scalars['Int']['input']>;
  industryGTE?: InputMaybe<Scalars['Int']['input']>;
  industryIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  industryIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  industryLT?: InputMaybe<Scalars['Int']['input']>;
  industryLTE?: InputMaybe<Scalars['Int']['input']>;
  industryNEQ?: InputMaybe<Scalars['Int']['input']>;
  industryNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  industryNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CustomerWhereInput>;
  or?: InputMaybe<Array<CustomerWhereInput>>;
  /** owner_type field predicates */
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeGT?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeGTE?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerTypeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerTypeLT?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeLTE?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeNEQ?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerTypeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** sales_id field predicates */
  salesID?: InputMaybe<Scalars['ID']['input']>;
  salesIDContains?: InputMaybe<Scalars['ID']['input']>;
  salesIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  salesIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  salesIDGT?: InputMaybe<Scalars['ID']['input']>;
  salesIDGTE?: InputMaybe<Scalars['ID']['input']>;
  salesIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  salesIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  salesIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  salesIDLT?: InputMaybe<Scalars['ID']['input']>;
  salesIDLTE?: InputMaybe<Scalars['ID']['input']>;
  salesIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  salesIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size field predicates */
  size?: InputMaybe<Scalars['Int']['input']>;
  sizeGT?: InputMaybe<Scalars['Int']['input']>;
  sizeGTE?: InputMaybe<Scalars['Int']['input']>;
  sizeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeLT?: InputMaybe<Scalars['Int']['input']>;
  sizeLTE?: InputMaybe<Scalars['Int']['input']>;
  sizeNEQ?: InputMaybe<Scalars['Int']['input']>;
  sizeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type District = Node & {
  __typename?: 'District';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  city?: Maybe<City>;
  cityCode: Scalars['Int']['output'];
  cityID?: Maybe<Scalars['ID']['output']>;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  plots: PlotConnection;
  provCode: Scalars['Int']['output'];
  province: Province;
  provinceID: Scalars['ID']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type DistrictPlotsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlotOrder>;
  where?: InputMaybe<PlotWhereInput>;
};


export type DistrictTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type DistrictConnection = {
  __typename?: 'DistrictConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DistrictEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type DistrictEdge = {
  __typename?: 'DistrictEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<District>;
};

/** Ordering options for District connections */
export type DistrictOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Districts. */
  field: DistrictOrderField;
};

/** Properties by which District connections can be ordered. */
export enum DistrictOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * DistrictWhereInput is used for filtering District objects.
 * Input was generated by ent.
 */
export type DistrictWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<DistrictWhereInput>>;
  /** city_code field predicates */
  cityCode?: InputMaybe<Scalars['Int']['input']>;
  cityCodeGT?: InputMaybe<Scalars['Int']['input']>;
  cityCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  cityCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  cityCodeLT?: InputMaybe<Scalars['Int']['input']>;
  cityCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  cityCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  cityCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** city_id field predicates */
  cityID?: InputMaybe<Scalars['ID']['input']>;
  cityIDContains?: InputMaybe<Scalars['ID']['input']>;
  cityIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDGT?: InputMaybe<Scalars['ID']['input']>;
  cityIDGTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  cityIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cityIDLT?: InputMaybe<Scalars['ID']['input']>;
  cityIDLTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  cityIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** city edge predicates */
  hasCity?: InputMaybe<Scalars['Boolean']['input']>;
  hasCityWith?: InputMaybe<Array<CityWhereInput>>;
  /** plots edge predicates */
  hasPlots?: InputMaybe<Scalars['Boolean']['input']>;
  hasPlotsWith?: InputMaybe<Array<PlotWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<DistrictWhereInput>;
  or?: InputMaybe<Array<DistrictWhereInput>>;
  /** prov_code field predicates */
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provCodeGT?: InputMaybe<Scalars['Int']['input']>;
  provCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  provCodeLT?: InputMaybe<Scalars['Int']['input']>;
  provCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  provCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type FeishuUser = {
  __typename?: 'FeishuUser';
  avatarUrl: Scalars['String']['output'];
  email: Scalars['String']['output'];
  name: Scalars['String']['output'];
  openId: Scalars['String']['output'];
};

export type GeoJson = {
  __typename?: 'GeoJson';
  coordinates: Array<Scalars['Float']['output']>;
  type: Scalars['String']['output'];
};

export type Location = {
  __typename?: 'Location';
  address: Scalars['String']['output'];
  city?: Maybe<City>;
  district: District;
  id: Scalars['ID']['output'];
  lat: Scalars['Float']['output'];
  lng: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  province: Province;
};

export type Mutation = {
  __typename?: 'Mutation';
  createArea: AreaConnection;
  createCompetitor: Competitor;
  createCustomer: CustomerConnection;
  createPlot: PlotConnection;
  createTender: TenderConnection;
  createUser: UserConnection;
  createVisitRecord: VisitRecordConnection;
  deleteCompetitor: Competitor;
  deleteCustomer: Customer;
  deletePlot: Plot;
  deleteTender: Tender;
  deleteUser: User;
  deleteVisitRecord: VisitRecord;
  updateArea: Area;
  updateCompetitor: Competitor;
  updateCustomer: Customer;
  updatePlot: Plot;
  updateProject: Project;
  updateTender: Tender;
  updateUser: User;
  updateVisitRecord: VisitRecord;
};


export type MutationCreateAreaArgs = {
  input: CreateAreaInput;
};


export type MutationCreateCompetitorArgs = {
  input: CreateCompetitorInput;
};


export type MutationCreateCustomerArgs = {
  input: CreateCustomerInput;
};


export type MutationCreatePlotArgs = {
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  input: CreatePlotInput;
};


export type MutationCreateTenderArgs = {
  attachmentFileNames: Array<Scalars['String']['input']>;
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  geoCoordinate?: InputMaybe<Array<Scalars['Float']['input']>>;
  imageFileNames: Array<Scalars['String']['input']>;
  input: CreateTenderInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationCreateVisitRecordArgs = {
  input: CreateVisitRecordInput;
};


export type MutationDeleteCompetitorArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCustomerArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeletePlotArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTenderArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteVisitRecordArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateAreaArgs = {
  id: Scalars['ID']['input'];
  input: UpdateAreaInput;
};


export type MutationUpdateCompetitorArgs = {
  id: Scalars['ID']['input'];
  input: UpdateCompetitorInput;
};


export type MutationUpdateCustomerArgs = {
  id: Scalars['ID']['input'];
  input: UpdateCustomerInput;
};


export type MutationUpdatePlotArgs = {
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  id: Scalars['ID']['input'];
  input: UpdatePlotInput;
};


export type MutationUpdateProjectArgs = {
  id: Scalars['ID']['input'];
  input: UpdateProjectInput;
};


export type MutationUpdateTenderArgs = {
  attachmentFileNames?: InputMaybe<Array<Scalars['String']['input']>>;
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  geoCoordinate?: InputMaybe<Array<Scalars['Float']['input']>>;
  id: Scalars['ID']['input'];
  imageFileNames?: InputMaybe<Array<Scalars['String']['input']>>;
  input: UpdateTenderInput;
  removeAttachmentFileNames?: InputMaybe<Array<Scalars['String']['input']>>;
  removeImageFileNames?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
};


export type MutationUpdateVisitRecordArgs = {
  id: Scalars['ID']['input'];
  input: UpdateVisitRecordInput;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

export type Operation = Node & {
  __typename?: 'Operation';
  /** 成交额累计 */
  cjeLj?: Maybe<Scalars['Float']['output']>;
  /** 成交额预算 */
  cjeYs?: Maybe<Scalars['Float']['output']>;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['Time']['output'];
  /** 现金流累计 */
  xjlLj?: Maybe<Scalars['Float']['output']>;
  /** 现金流预算 */
  xjlYs?: Maybe<Scalars['Float']['output']>;
  /** 项目管理费 */
  xmglf?: Maybe<Scalars['Float']['output']>;
  /** 项目设计费 */
  xmsjf?: Maybe<Scalars['Float']['output']>;
  /** 营业额累计 */
  yyeLj?: Maybe<Scalars['Float']['output']>;
  /** 营业额预算 */
  yyeYs?: Maybe<Scalars['Float']['output']>;
};

/** A connection to a list of items. */
export type OperationConnection = {
  __typename?: 'OperationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OperationEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type OperationEdge = {
  __typename?: 'OperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Operation>;
};

/** Ordering options for Operation connections */
export type OperationOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Operations. */
  field: OperationOrderField;
};

/** Properties by which Operation connections can be ordered. */
export enum OperationOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * OperationWhereInput is used for filtering Operation objects.
 * Input was generated by ent.
 */
export type OperationWhereInput = {
  and?: InputMaybe<Array<OperationWhereInput>>;
  /** cje_lj field predicates */
  cjeLj?: InputMaybe<Scalars['Float']['input']>;
  cjeLjGT?: InputMaybe<Scalars['Float']['input']>;
  cjeLjGTE?: InputMaybe<Scalars['Float']['input']>;
  cjeLjIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeLjIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cjeLjLT?: InputMaybe<Scalars['Float']['input']>;
  cjeLjLTE?: InputMaybe<Scalars['Float']['input']>;
  cjeLjNEQ?: InputMaybe<Scalars['Float']['input']>;
  cjeLjNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeLjNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** cje_ys field predicates */
  cjeYs?: InputMaybe<Scalars['Float']['input']>;
  cjeYsGT?: InputMaybe<Scalars['Float']['input']>;
  cjeYsGTE?: InputMaybe<Scalars['Float']['input']>;
  cjeYsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeYsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cjeYsLT?: InputMaybe<Scalars['Float']['input']>;
  cjeYsLTE?: InputMaybe<Scalars['Float']['input']>;
  cjeYsNEQ?: InputMaybe<Scalars['Float']['input']>;
  cjeYsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeYsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<OperationWhereInput>;
  or?: InputMaybe<Array<OperationWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** xjl_lj field predicates */
  xjlLj?: InputMaybe<Scalars['Float']['input']>;
  xjlLjGT?: InputMaybe<Scalars['Float']['input']>;
  xjlLjGTE?: InputMaybe<Scalars['Float']['input']>;
  xjlLjIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlLjIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xjlLjLT?: InputMaybe<Scalars['Float']['input']>;
  xjlLjLTE?: InputMaybe<Scalars['Float']['input']>;
  xjlLjNEQ?: InputMaybe<Scalars['Float']['input']>;
  xjlLjNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlLjNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xjl_ys field predicates */
  xjlYs?: InputMaybe<Scalars['Float']['input']>;
  xjlYsGT?: InputMaybe<Scalars['Float']['input']>;
  xjlYsGTE?: InputMaybe<Scalars['Float']['input']>;
  xjlYsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlYsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xjlYsLT?: InputMaybe<Scalars['Float']['input']>;
  xjlYsLTE?: InputMaybe<Scalars['Float']['input']>;
  xjlYsNEQ?: InputMaybe<Scalars['Float']['input']>;
  xjlYsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlYsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmglf field predicates */
  xmglf?: InputMaybe<Scalars['Float']['input']>;
  xmglfGT?: InputMaybe<Scalars['Float']['input']>;
  xmglfGTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmglfLT?: InputMaybe<Scalars['Float']['input']>;
  xmglfLTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfNEQ?: InputMaybe<Scalars['Float']['input']>;
  xmglfNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmsjf field predicates */
  xmsjf?: InputMaybe<Scalars['Float']['input']>;
  xmsjfGT?: InputMaybe<Scalars['Float']['input']>;
  xmsjfGTE?: InputMaybe<Scalars['Float']['input']>;
  xmsjfIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmsjfIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmsjfLT?: InputMaybe<Scalars['Float']['input']>;
  xmsjfLTE?: InputMaybe<Scalars['Float']['input']>;
  xmsjfNEQ?: InputMaybe<Scalars['Float']['input']>;
  xmsjfNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmsjfNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** yye_lj field predicates */
  yyeLj?: InputMaybe<Scalars['Float']['input']>;
  yyeLjGT?: InputMaybe<Scalars['Float']['input']>;
  yyeLjGTE?: InputMaybe<Scalars['Float']['input']>;
  yyeLjIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeLjIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  yyeLjLT?: InputMaybe<Scalars['Float']['input']>;
  yyeLjLTE?: InputMaybe<Scalars['Float']['input']>;
  yyeLjNEQ?: InputMaybe<Scalars['Float']['input']>;
  yyeLjNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeLjNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** yye_ys field predicates */
  yyeYs?: InputMaybe<Scalars['Float']['input']>;
  yyeYsGT?: InputMaybe<Scalars['Float']['input']>;
  yyeYsGTE?: InputMaybe<Scalars['Float']['input']>;
  yyeYsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeYsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  yyeYsLT?: InputMaybe<Scalars['Float']['input']>;
  yyeYsLTE?: InputMaybe<Scalars['Float']['input']>;
  yyeYsNEQ?: InputMaybe<Scalars['Float']['input']>;
  yyeYsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeYsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

export type Poi = {
  __typename?: 'POI';
  address: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  location: Location;
  name: Scalars['String']['output'];
};

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Plot = Node & {
  __typename?: 'Plot';
  colorHex: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  district: District;
  districtID: Scalars['ID']['output'];
  geoBounds?: Maybe<Array<Array<Scalars['Float']['output']>>>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type PlotConnection = {
  __typename?: 'PlotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlotEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PlotEdge = {
  __typename?: 'PlotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Plot>;
};

/** Ordering options for Plot connections */
export type PlotOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Plots. */
  field: PlotOrderField;
};

/** Properties by which Plot connections can be ordered. */
export enum PlotOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * PlotWhereInput is used for filtering Plot objects.
 * Input was generated by ent.
 */
export type PlotWhereInput = {
  and?: InputMaybe<Array<PlotWhereInput>>;
  /** color_hex field predicates */
  colorHex?: InputMaybe<Scalars['String']['input']>;
  colorHexContains?: InputMaybe<Scalars['String']['input']>;
  colorHexContainsFold?: InputMaybe<Scalars['String']['input']>;
  colorHexEqualFold?: InputMaybe<Scalars['String']['input']>;
  colorHexGT?: InputMaybe<Scalars['String']['input']>;
  colorHexGTE?: InputMaybe<Scalars['String']['input']>;
  colorHexHasPrefix?: InputMaybe<Scalars['String']['input']>;
  colorHexHasSuffix?: InputMaybe<Scalars['String']['input']>;
  colorHexIn?: InputMaybe<Array<Scalars['String']['input']>>;
  colorHexLT?: InputMaybe<Scalars['String']['input']>;
  colorHexLTE?: InputMaybe<Scalars['String']['input']>;
  colorHexNEQ?: InputMaybe<Scalars['String']['input']>;
  colorHexNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** district_id field predicates */
  districtID?: InputMaybe<Scalars['ID']['input']>;
  districtIDContains?: InputMaybe<Scalars['ID']['input']>;
  districtIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDGT?: InputMaybe<Scalars['ID']['input']>;
  districtIDGTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  districtIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  districtIDLT?: InputMaybe<Scalars['ID']['input']>;
  districtIDLTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  districtIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** district edge predicates */
  hasDistrict?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<PlotWhereInput>;
  or?: InputMaybe<Array<PlotWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Project = Node & {
  __typename?: 'Project';
  /** 累计非法定扣款 */
  accumulatedNonStatutoryDeductions?: Maybe<Scalars['Float']['output']>;
  /** 本期非法定扣款 */
  accumulatedNonStatutoryDeductionsPeriod?: Maybe<Scalars['Float']['output']>;
  /** 累计法定扣款 */
  accumulatedStatutoryDeductions?: Maybe<Scalars['Float']['output']>;
  /** 本期法定扣款 */
  accumulatedStatutoryDeductionsPeriod?: Maybe<Scalars['Float']['output']>;
  /** 鋁型材預算百分比 */
  aluminumBudgetPercentage?: Maybe<Scalars['Float']['output']>;
  /** 鋁板預算百分比 */
  aluminumPlateBudgetPercentage?: Maybe<Scalars['Float']['output']>;
  /** 工程規模 */
  areas?: Maybe<Scalars['String']['output']>;
  /** 散件已完成數量 */
  bulkMaterialsCompletedQuantity?: Maybe<Scalars['Float']['output']>;
  /** 散件總訂貨數量 */
  bulkMaterialsTotalOrderQuantity?: Maybe<Scalars['Float']['output']>;
  /** 散件未完成數量 */
  bulkMaterialsUncompletedQuantity?: Maybe<Scalars['Float']['output']>;
  /** 成交额 */
  cje?: Maybe<Scalars['Float']['output']>;
  code: Scalars['String']['output'];
  /** 中標形式 */
  conType?: Maybe<Scalars['String']['output']>;
  /** 幕墻顧問 */
  consultant?: Maybe<Scalars['String']['output']>;
  /** 总包申请总额 */
  contractorApplyAmount?: Maybe<Scalars['Float']['output']>;
  /** 总包申请数量 */
  contractorApplyCount?: Maybe<Scalars['Int']['output']>;
  /** 总包批复总额 */
  contractorApproveAmount?: Maybe<Scalars['Float']['output']>;
  /** 总包批复数量 */
  contractorApproveCount?: Maybe<Scalars['Int']['output']>;
  createdAt: Scalars['Time']['output'];
  /** 设计定额重量 */
  designRatedWeight?: Maybe<Scalars['Float']['output']>;
  /** BD圖紙完成數量 */
  diagramBdFinishCount?: Maybe<Scalars['Int']['output']>;
  /** BD圖紙總數 */
  diagramBdTotalCount?: Maybe<Scalars['Int']['output']>;
  /** C版批圖率分母 */
  diagramCApprovalRatioDenominator?: Maybe<Scalars['Int']['output']>;
  /** C版批圖率分子 */
  diagramCApprovalRatioNumerator?: Maybe<Scalars['Int']['output']>;
  /** 施工圖紙完成數量 */
  diagramConstructionFinishCount?: Maybe<Scalars['Int']['output']>;
  /** 施工圖紙總數 */
  diagramConstructionTotalCount?: Maybe<Scalars['Int']['output']>;
  /** 加工圖完成數量 */
  diagramProcessingFinishCount?: Maybe<Scalars['Int']['output']>;
  /** 加工圖總數 */
  diagramProcessingTotalCount?: Maybe<Scalars['Int']['output']>;
  /** 有效合同金额 */
  effectiveContractAmount?: Maybe<Scalars['Float']['output']>;
  /** 竣工日期 */
  endDate?: Maybe<Scalars['Time']['output']>;
  /** 封頂日期 */
  fsDate?: Maybe<Scalars['Time']['output']>;
  /** 玻璃預算百分比 */
  glassBudgetPercentage?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  /** 安装进度 */
  installProgress?: Maybe<Scalars['Float']['output']>;
  /** 鐵型材預算百分比 */
  ironBudgetPercentage?: Maybe<Scalars['Float']['output']>;
  /** 是否完成 */
  isFinished: Scalars['Boolean']['output'];
  /** 項目物料庫存重量 */
  itemStockWeight?: Maybe<Scalars['Float']['output']>;
  /** 建築師 */
  jzs?: Maybe<Scalars['String']['output']>;
  /** 地盤經理 */
  manager?: Maybe<Scalars['String']['output']>;
  /** 物料損失金額 */
  materialLoss?: Maybe<Scalars['Float']['output']>;
  /** 總承包商 */
  mcn?: Maybe<Scalars['String']['output']>;
  /** 里程碑完成月份 */
  milestoneDoneMonth?: Maybe<Scalars['Int']['output']>;
  /** 里程碑完成年份 */
  milestoneDoneYear?: Maybe<Scalars['Int']['output']>;
  /** 里程碑計劃月份 */
  milestonePlanMonth?: Maybe<Scalars['Int']['output']>;
  /** 里程碑計劃年份 */
  milestonePlanYear?: Maybe<Scalars['Int']['output']>;
  /** 維修保養期 */
  mntyr?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** 開始安裝日期 */
  opDate?: Maybe<Scalars['Time']['output']>;
  /** 客戶 */
  owner?: Maybe<Scalars['String']['output']>;
  /** 业主申请总额 */
  ownerApplyAmount?: Maybe<Scalars['Float']['output']>;
  /** 业主申请数量 */
  ownerApplyCount?: Maybe<Scalars['Int']['output']>;
  /** 业主批复总额 */
  ownerApproveAmount?: Maybe<Scalars['Float']['output']>;
  /** 业主批复数量 */
  ownerApproveCount?: Maybe<Scalars['Int']['output']>;
  /** 卡板庫存數量 */
  palletsInStock?: Maybe<Scalars['Float']['output']>;
  /** 散件庫存數量 */
  partsInStock?: Maybe<Scalars['Float']['output']>;
  /** 計劃超期數量 */
  planOverdueCount?: Maybe<Scalars['Int']['output']>;
  /** 當月計劃超期數量 */
  planOverdueMonthCount?: Maybe<Scalars['Int']['output']>;
  /** 計劃總數 */
  planTotalCount?: Maybe<Scalars['Int']['output']>;
  /** 生产管理面积 */
  pmArea?: Maybe<Scalars['Float']['output']>;
  /** 生产管理當月實際生產 */
  pmMonthActual?: Maybe<Scalars['Float']['output']>;
  /** 生产管理當月累計生產 */
  pmMonthTarget?: Maybe<Scalars['Float']['output']>;
  /** 生产管理累計生產 */
  pmTotal?: Maybe<Scalars['Float']['output']>;
  /** 生产管理當年實際生產 */
  pmYearActual?: Maybe<Scalars['Float']['output']>;
  /** 生产管理當年累計生產 */
  pmYearTarget?: Maybe<Scalars['Float']['output']>;
  /** 生产管理昨日生產 */
  pmYesterday?: Maybe<Scalars['Float']['output']>;
  /** 加工图成型重量 */
  processingWeight?: Maybe<Scalars['Float']['output']>;
  projectStaffs: ProjectStaffConnection;
  /** 質量排名 */
  qualityRanking?: Maybe<Scalars['Float']['output']>;
  /** 質量得分 */
  qualityScore?: Maybe<Scalars['Float']['output']>;
  /** 開工日期 */
  startDate?: Maybe<Scalars['Time']['output']>;
  /** 合約总额 */
  totalContractAmount?: Maybe<Scalars['Float']['output']>;
  /** 單元件安裝數量 */
  unitComponentInstallation?: Maybe<Scalars['Float']['output']>;
  /** 單元件生產數量 */
  unitComponentProduction?: Maybe<Scalars['Float']['output']>;
  /** 單元件總數 */
  unitComponentTotal?: Maybe<Scalars['Float']['output']>;
  /** 單元件庫存累計 */
  unitInventoryTotal?: Maybe<Scalars['Float']['output']>;
  updatedAt: Scalars['Time']['output'];
  users: UserConnection;
  /** 分判VA申请总额 */
  vaApplyAmount?: Maybe<Scalars['Float']['output']>;
  /** 分判VA批复总额 */
  vaApproveAmount?: Maybe<Scalars['Float']['output']>;
  vos?: Maybe<Array<ProjectVo>>;
  /** 现金流 */
  xjl?: Maybe<Scalars['Float']['output']>;
  /** 项目负责人 */
  xmfzr?: Maybe<Scalars['String']['output']>;
  /** 项目管理费累计 */
  xmglfLj?: Maybe<Scalars['Float']['output']>;
  /** 项目管理费预算 */
  xmglfYs?: Maybe<Scalars['Float']['output']>;
  /** 项目设计费 */
  xmsjf?: Maybe<Scalars['Float']['output']>;
  /** 营业额 */
  yye?: Maybe<Scalars['Float']['output']>;
};


export type ProjectProjectStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectStaffOrder>>;
  where?: InputMaybe<ProjectStaffWhereInput>;
};


export type ProjectUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

/** A connection to a list of items. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Project>;
};

/** Ordering options for Project connections */
export type ProjectOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Projects. */
  field: ProjectOrderField;
};

/** Properties by which Project connections can be ordered. */
export enum ProjectOrderField {
  Code = 'CODE',
  CreatedAt = 'CREATED_AT',
  Name = 'NAME'
}

export type ProjectStaff = Node & {
  __typename?: 'ProjectStaff';
  createdAt: Scalars['Time']['output'];
  /** Code-YYYY-MM */
  cym: Scalars['String']['output'];
  /** 設計人數 */
  design?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  /** 安裝人數 */
  installation?: Maybe<Scalars['Float']['output']>;
  /** 管理人數 */
  management?: Maybe<Scalars['Float']['output']>;
  project: Project;
  projectID: Scalars['ID']['output'];
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type ProjectStaffConnection = {
  __typename?: 'ProjectStaffConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectStaffEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ProjectStaffEdge = {
  __typename?: 'ProjectStaffEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectStaff>;
};

/** Ordering options for ProjectStaff connections */
export type ProjectStaffOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ProjectStaffs. */
  field: ProjectStaffOrderField;
};

/** Properties by which ProjectStaff connections can be ordered. */
export enum ProjectStaffOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * ProjectStaffWhereInput is used for filtering ProjectStaff objects.
 * Input was generated by ent.
 */
export type ProjectStaffWhereInput = {
  and?: InputMaybe<Array<ProjectStaffWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** cym field predicates */
  cym?: InputMaybe<Scalars['String']['input']>;
  cymContains?: InputMaybe<Scalars['String']['input']>;
  cymContainsFold?: InputMaybe<Scalars['String']['input']>;
  cymEqualFold?: InputMaybe<Scalars['String']['input']>;
  cymGT?: InputMaybe<Scalars['String']['input']>;
  cymGTE?: InputMaybe<Scalars['String']['input']>;
  cymHasPrefix?: InputMaybe<Scalars['String']['input']>;
  cymHasSuffix?: InputMaybe<Scalars['String']['input']>;
  cymIn?: InputMaybe<Array<Scalars['String']['input']>>;
  cymLT?: InputMaybe<Scalars['String']['input']>;
  cymLTE?: InputMaybe<Scalars['String']['input']>;
  cymNEQ?: InputMaybe<Scalars['String']['input']>;
  cymNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** design field predicates */
  design?: InputMaybe<Scalars['Float']['input']>;
  designGT?: InputMaybe<Scalars['Float']['input']>;
  designGTE?: InputMaybe<Scalars['Float']['input']>;
  designIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  designIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  designLT?: InputMaybe<Scalars['Float']['input']>;
  designLTE?: InputMaybe<Scalars['Float']['input']>;
  designNEQ?: InputMaybe<Scalars['Float']['input']>;
  designNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  designNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project edge predicates */
  hasProject?: InputMaybe<Scalars['Boolean']['input']>;
  hasProjectWith?: InputMaybe<Array<ProjectWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** installation field predicates */
  installation?: InputMaybe<Scalars['Float']['input']>;
  installationGT?: InputMaybe<Scalars['Float']['input']>;
  installationGTE?: InputMaybe<Scalars['Float']['input']>;
  installationIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  installationIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  installationLT?: InputMaybe<Scalars['Float']['input']>;
  installationLTE?: InputMaybe<Scalars['Float']['input']>;
  installationNEQ?: InputMaybe<Scalars['Float']['input']>;
  installationNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  installationNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** management field predicates */
  management?: InputMaybe<Scalars['Float']['input']>;
  managementGT?: InputMaybe<Scalars['Float']['input']>;
  managementGTE?: InputMaybe<Scalars['Float']['input']>;
  managementIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  managementIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  managementLT?: InputMaybe<Scalars['Float']['input']>;
  managementLTE?: InputMaybe<Scalars['Float']['input']>;
  managementNEQ?: InputMaybe<Scalars['Float']['input']>;
  managementNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  managementNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ProjectStaffWhereInput>;
  or?: InputMaybe<Array<ProjectStaffWhereInput>>;
  /** project_id field predicates */
  projectID?: InputMaybe<Scalars['ID']['input']>;
  projectIDContains?: InputMaybe<Scalars['ID']['input']>;
  projectIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  projectIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  projectIDGT?: InputMaybe<Scalars['ID']['input']>;
  projectIDGTE?: InputMaybe<Scalars['ID']['input']>;
  projectIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  projectIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  projectIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  projectIDLT?: InputMaybe<Scalars['ID']['input']>;
  projectIDLTE?: InputMaybe<Scalars['ID']['input']>;
  projectIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  projectIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type ProjectVo = Node & {
  __typename?: 'ProjectVO';
  /** 申请总额 */
  applyAmount?: Maybe<Scalars['Float']['output']>;
  /** 批复总额 */
  approveAmount?: Maybe<Scalars['Float']['output']>;
  /** 安装进度 */
  azjd?: Maybe<Scalars['Float']['output']>;
  /** 变更类型 */
  changeType: Scalars['Int']['output'];
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  /** 是否已批复 */
  isApproved: Scalars['Boolean']['output'];
  project: Project;
  projectID: Scalars['ID']['output'];
  updatedAt: Scalars['Time']['output'];
  /** 有效合约总额 */
  yxhyze?: Maybe<Scalars['Float']['output']>;
};

/** Ordering options for ProjectVO connections */
export type ProjectVoOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ProjectVOs. */
  field: ProjectVoOrderField;
};

/** Properties by which ProjectVO connections can be ordered. */
export enum ProjectVoOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * ProjectVOWhereInput is used for filtering ProjectVO objects.
 * Input was generated by ent.
 */
export type ProjectVoWhereInput = {
  and?: InputMaybe<Array<ProjectVoWhereInput>>;
  /** apply_amount field predicates */
  applyAmount?: InputMaybe<Scalars['Float']['input']>;
  applyAmountGT?: InputMaybe<Scalars['Float']['input']>;
  applyAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  applyAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  applyAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  applyAmountLT?: InputMaybe<Scalars['Float']['input']>;
  applyAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  applyAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  applyAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  applyAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** approve_amount field predicates */
  approveAmount?: InputMaybe<Scalars['Float']['input']>;
  approveAmountGT?: InputMaybe<Scalars['Float']['input']>;
  approveAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  approveAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  approveAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  approveAmountLT?: InputMaybe<Scalars['Float']['input']>;
  approveAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  approveAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  approveAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  approveAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** azjd field predicates */
  azjd?: InputMaybe<Scalars['Float']['input']>;
  azjdGT?: InputMaybe<Scalars['Float']['input']>;
  azjdGTE?: InputMaybe<Scalars['Float']['input']>;
  azjdIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  azjdIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  azjdLT?: InputMaybe<Scalars['Float']['input']>;
  azjdLTE?: InputMaybe<Scalars['Float']['input']>;
  azjdNEQ?: InputMaybe<Scalars['Float']['input']>;
  azjdNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  azjdNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** change_type field predicates */
  changeType?: InputMaybe<Scalars['Int']['input']>;
  changeTypeGT?: InputMaybe<Scalars['Int']['input']>;
  changeTypeGTE?: InputMaybe<Scalars['Int']['input']>;
  changeTypeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  changeTypeLT?: InputMaybe<Scalars['Int']['input']>;
  changeTypeLTE?: InputMaybe<Scalars['Int']['input']>;
  changeTypeNEQ?: InputMaybe<Scalars['Int']['input']>;
  changeTypeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** project edge predicates */
  hasProject?: InputMaybe<Scalars['Boolean']['input']>;
  hasProjectWith?: InputMaybe<Array<ProjectWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_approved field predicates */
  isApproved?: InputMaybe<Scalars['Boolean']['input']>;
  isApprovedNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ProjectVoWhereInput>;
  or?: InputMaybe<Array<ProjectVoWhereInput>>;
  /** project_id field predicates */
  projectID?: InputMaybe<Scalars['ID']['input']>;
  projectIDContains?: InputMaybe<Scalars['ID']['input']>;
  projectIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  projectIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  projectIDGT?: InputMaybe<Scalars['ID']['input']>;
  projectIDGTE?: InputMaybe<Scalars['ID']['input']>;
  projectIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  projectIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  projectIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  projectIDLT?: InputMaybe<Scalars['ID']['input']>;
  projectIDLTE?: InputMaybe<Scalars['ID']['input']>;
  projectIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  projectIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** yxhyze field predicates */
  yxhyze?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeGT?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeGTE?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yxhyzeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  yxhyzeLT?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeLTE?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeNEQ?: InputMaybe<Scalars['Float']['input']>;
  yxhyzeNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yxhyzeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * ProjectWhereInput is used for filtering Project objects.
 * Input was generated by ent.
 */
export type ProjectWhereInput = {
  /** accumulated_non_statutory_deductions field predicates */
  accumulatedNonStatutoryDeductions?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsGT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsGTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedNonStatutoryDeductionsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  accumulatedNonStatutoryDeductionsLT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsLTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsNEQ?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedNonStatutoryDeductionsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** accumulated_non_statutory_deductions_period field predicates */
  accumulatedNonStatutoryDeductionsPeriod?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodGT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodGTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedNonStatutoryDeductionsPeriodIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  accumulatedNonStatutoryDeductionsPeriodLT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodLTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodNEQ?: InputMaybe<Scalars['Float']['input']>;
  accumulatedNonStatutoryDeductionsPeriodNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedNonStatutoryDeductionsPeriodNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** accumulated_statutory_deductions field predicates */
  accumulatedStatutoryDeductions?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsGT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsGTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedStatutoryDeductionsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  accumulatedStatutoryDeductionsLT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsLTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsNEQ?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedStatutoryDeductionsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** accumulated_statutory_deductions_period field predicates */
  accumulatedStatutoryDeductionsPeriod?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodGT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodGTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedStatutoryDeductionsPeriodIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  accumulatedStatutoryDeductionsPeriodLT?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodLTE?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodNEQ?: InputMaybe<Scalars['Float']['input']>;
  accumulatedStatutoryDeductionsPeriodNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  accumulatedStatutoryDeductionsPeriodNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** aluminum_budget_percentage field predicates */
  aluminumBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageGT?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageGTE?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  aluminumBudgetPercentageIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  aluminumBudgetPercentageLT?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageLTE?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageNEQ?: InputMaybe<Scalars['Float']['input']>;
  aluminumBudgetPercentageNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  aluminumBudgetPercentageNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** aluminum_plate_budget_percentage field predicates */
  aluminumPlateBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageGT?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageGTE?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  aluminumPlateBudgetPercentageIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  aluminumPlateBudgetPercentageLT?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageLTE?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageNEQ?: InputMaybe<Scalars['Float']['input']>;
  aluminumPlateBudgetPercentageNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  aluminumPlateBudgetPercentageNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<ProjectWhereInput>>;
  /** areas field predicates */
  areas?: InputMaybe<Scalars['String']['input']>;
  areasContains?: InputMaybe<Scalars['String']['input']>;
  areasContainsFold?: InputMaybe<Scalars['String']['input']>;
  areasEqualFold?: InputMaybe<Scalars['String']['input']>;
  areasGT?: InputMaybe<Scalars['String']['input']>;
  areasGTE?: InputMaybe<Scalars['String']['input']>;
  areasHasPrefix?: InputMaybe<Scalars['String']['input']>;
  areasHasSuffix?: InputMaybe<Scalars['String']['input']>;
  areasIn?: InputMaybe<Array<Scalars['String']['input']>>;
  areasIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  areasLT?: InputMaybe<Scalars['String']['input']>;
  areasLTE?: InputMaybe<Scalars['String']['input']>;
  areasNEQ?: InputMaybe<Scalars['String']['input']>;
  areasNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  areasNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** bulk_materials_completed_quantity field predicates */
  bulkMaterialsCompletedQuantity?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityGT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityGTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsCompletedQuantityIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  bulkMaterialsCompletedQuantityLT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityLTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityNEQ?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsCompletedQuantityNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsCompletedQuantityNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** bulk_materials_total_order_quantity field predicates */
  bulkMaterialsTotalOrderQuantity?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityGT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityGTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsTotalOrderQuantityIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  bulkMaterialsTotalOrderQuantityLT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityLTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityNEQ?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsTotalOrderQuantityNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsTotalOrderQuantityNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** bulk_materials_uncompleted_quantity field predicates */
  bulkMaterialsUncompletedQuantity?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityGT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityGTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsUncompletedQuantityIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  bulkMaterialsUncompletedQuantityLT?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityLTE?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityNEQ?: InputMaybe<Scalars['Float']['input']>;
  bulkMaterialsUncompletedQuantityNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  bulkMaterialsUncompletedQuantityNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** cje field predicates */
  cje?: InputMaybe<Scalars['Float']['input']>;
  cjeGT?: InputMaybe<Scalars['Float']['input']>;
  cjeGTE?: InputMaybe<Scalars['Float']['input']>;
  cjeIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cjeLT?: InputMaybe<Scalars['Float']['input']>;
  cjeLTE?: InputMaybe<Scalars['Float']['input']>;
  cjeNEQ?: InputMaybe<Scalars['Float']['input']>;
  cjeNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  cjeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** con_type field predicates */
  conType?: InputMaybe<Scalars['String']['input']>;
  conTypeContains?: InputMaybe<Scalars['String']['input']>;
  conTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  conTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  conTypeGT?: InputMaybe<Scalars['String']['input']>;
  conTypeGTE?: InputMaybe<Scalars['String']['input']>;
  conTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  conTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  conTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  conTypeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  conTypeLT?: InputMaybe<Scalars['String']['input']>;
  conTypeLTE?: InputMaybe<Scalars['String']['input']>;
  conTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  conTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  conTypeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** consultant field predicates */
  consultant?: InputMaybe<Scalars['String']['input']>;
  consultantContains?: InputMaybe<Scalars['String']['input']>;
  consultantContainsFold?: InputMaybe<Scalars['String']['input']>;
  consultantEqualFold?: InputMaybe<Scalars['String']['input']>;
  consultantGT?: InputMaybe<Scalars['String']['input']>;
  consultantGTE?: InputMaybe<Scalars['String']['input']>;
  consultantHasPrefix?: InputMaybe<Scalars['String']['input']>;
  consultantHasSuffix?: InputMaybe<Scalars['String']['input']>;
  consultantIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultantIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  consultantLT?: InputMaybe<Scalars['String']['input']>;
  consultantLTE?: InputMaybe<Scalars['String']['input']>;
  consultantNEQ?: InputMaybe<Scalars['String']['input']>;
  consultantNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultantNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor_apply_amount field predicates */
  contractorApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountGT?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  contractorApplyAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorApplyAmountLT?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  contractorApplyAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  contractorApplyAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor_apply_count field predicates */
  contractorApplyCount?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountGT?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountGTE?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  contractorApplyCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorApplyCountLT?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountLTE?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  contractorApplyCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  contractorApplyCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor_approve_amount field predicates */
  contractorApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountGT?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  contractorApproveAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorApproveAmountLT?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  contractorApproveAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  contractorApproveAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor_approve_count field predicates */
  contractorApproveCount?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountGT?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountGTE?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  contractorApproveCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorApproveCountLT?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountLTE?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  contractorApproveCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  contractorApproveCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** design_rated_weight field predicates */
  designRatedWeight?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightGT?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightGTE?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  designRatedWeightIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  designRatedWeightLT?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightLTE?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightNEQ?: InputMaybe<Scalars['Float']['input']>;
  designRatedWeightNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  designRatedWeightNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_bd_finish_count field predicates */
  diagramBdFinishCount?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramBdFinishCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramBdFinishCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramBdFinishCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramBdFinishCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_bd_total_count field predicates */
  diagramBdTotalCount?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramBdTotalCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramBdTotalCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramBdTotalCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramBdTotalCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_c_approval_ratio_denominator field predicates */
  diagramCApprovalRatioDenominator?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorGT?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramCApprovalRatioDenominatorIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramCApprovalRatioDenominatorLT?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioDenominatorNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramCApprovalRatioDenominatorNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_c_approval_ratio_numerator field predicates */
  diagramCApprovalRatioNumerator?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorGT?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramCApprovalRatioNumeratorIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramCApprovalRatioNumeratorLT?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramCApprovalRatioNumeratorNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramCApprovalRatioNumeratorNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_construction_finish_count field predicates */
  diagramConstructionFinishCount?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramConstructionFinishCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramConstructionFinishCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionFinishCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramConstructionFinishCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_construction_total_count field predicates */
  diagramConstructionTotalCount?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramConstructionTotalCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramConstructionTotalCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramConstructionTotalCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramConstructionTotalCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_processing_finish_count field predicates */
  diagramProcessingFinishCount?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramProcessingFinishCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramProcessingFinishCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingFinishCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramProcessingFinishCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** diagram_processing_total_count field predicates */
  diagramProcessingTotalCount?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountGT?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountGTE?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramProcessingTotalCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  diagramProcessingTotalCountLT?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountLTE?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  diagramProcessingTotalCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  diagramProcessingTotalCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** effective_contract_amount field predicates */
  effectiveContractAmount?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountGT?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  effectiveContractAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  effectiveContractAmountLT?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  effectiveContractAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  effectiveContractAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** end_date field predicates */
  endDate?: InputMaybe<Scalars['Time']['input']>;
  endDateGT?: InputMaybe<Scalars['Time']['input']>;
  endDateGTE?: InputMaybe<Scalars['Time']['input']>;
  endDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  endDateLT?: InputMaybe<Scalars['Time']['input']>;
  endDateLTE?: InputMaybe<Scalars['Time']['input']>;
  endDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  endDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** fs_date field predicates */
  fsDate?: InputMaybe<Scalars['Time']['input']>;
  fsDateGT?: InputMaybe<Scalars['Time']['input']>;
  fsDateGTE?: InputMaybe<Scalars['Time']['input']>;
  fsDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  fsDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  fsDateLT?: InputMaybe<Scalars['Time']['input']>;
  fsDateLTE?: InputMaybe<Scalars['Time']['input']>;
  fsDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  fsDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  fsDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** glass_budget_percentage field predicates */
  glassBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageGT?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageGTE?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  glassBudgetPercentageIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  glassBudgetPercentageLT?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageLTE?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageNEQ?: InputMaybe<Scalars['Float']['input']>;
  glassBudgetPercentageNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  glassBudgetPercentageNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_staffs edge predicates */
  hasProjectStaffs?: InputMaybe<Scalars['Boolean']['input']>;
  hasProjectStaffsWith?: InputMaybe<Array<ProjectStaffWhereInput>>;
  /** users edge predicates */
  hasUsers?: InputMaybe<Scalars['Boolean']['input']>;
  hasUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** vos edge predicates */
  hasVos?: InputMaybe<Scalars['Boolean']['input']>;
  hasVosWith?: InputMaybe<Array<ProjectVoWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** install_progress field predicates */
  installProgress?: InputMaybe<Scalars['Float']['input']>;
  installProgressGT?: InputMaybe<Scalars['Float']['input']>;
  installProgressGTE?: InputMaybe<Scalars['Float']['input']>;
  installProgressIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  installProgressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  installProgressLT?: InputMaybe<Scalars['Float']['input']>;
  installProgressLTE?: InputMaybe<Scalars['Float']['input']>;
  installProgressNEQ?: InputMaybe<Scalars['Float']['input']>;
  installProgressNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  installProgressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** iron_budget_percentage field predicates */
  ironBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageGT?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageGTE?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ironBudgetPercentageIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ironBudgetPercentageLT?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageLTE?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageNEQ?: InputMaybe<Scalars['Float']['input']>;
  ironBudgetPercentageNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ironBudgetPercentageNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** is_finished field predicates */
  isFinished?: InputMaybe<Scalars['Boolean']['input']>;
  isFinishedNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** item_stock_weight field predicates */
  itemStockWeight?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightGT?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightGTE?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  itemStockWeightIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  itemStockWeightLT?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightLTE?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightNEQ?: InputMaybe<Scalars['Float']['input']>;
  itemStockWeightNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  itemStockWeightNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** jzs field predicates */
  jzs?: InputMaybe<Scalars['String']['input']>;
  jzsContains?: InputMaybe<Scalars['String']['input']>;
  jzsContainsFold?: InputMaybe<Scalars['String']['input']>;
  jzsEqualFold?: InputMaybe<Scalars['String']['input']>;
  jzsGT?: InputMaybe<Scalars['String']['input']>;
  jzsGTE?: InputMaybe<Scalars['String']['input']>;
  jzsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  jzsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  jzsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  jzsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  jzsLT?: InputMaybe<Scalars['String']['input']>;
  jzsLTE?: InputMaybe<Scalars['String']['input']>;
  jzsNEQ?: InputMaybe<Scalars['String']['input']>;
  jzsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  jzsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** manager field predicates */
  manager?: InputMaybe<Scalars['String']['input']>;
  managerContains?: InputMaybe<Scalars['String']['input']>;
  managerContainsFold?: InputMaybe<Scalars['String']['input']>;
  managerEqualFold?: InputMaybe<Scalars['String']['input']>;
  managerGT?: InputMaybe<Scalars['String']['input']>;
  managerGTE?: InputMaybe<Scalars['String']['input']>;
  managerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  managerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  managerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  managerLT?: InputMaybe<Scalars['String']['input']>;
  managerLTE?: InputMaybe<Scalars['String']['input']>;
  managerNEQ?: InputMaybe<Scalars['String']['input']>;
  managerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** material_loss field predicates */
  materialLoss?: InputMaybe<Scalars['Float']['input']>;
  materialLossGT?: InputMaybe<Scalars['Float']['input']>;
  materialLossGTE?: InputMaybe<Scalars['Float']['input']>;
  materialLossIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  materialLossIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  materialLossLT?: InputMaybe<Scalars['Float']['input']>;
  materialLossLTE?: InputMaybe<Scalars['Float']['input']>;
  materialLossNEQ?: InputMaybe<Scalars['Float']['input']>;
  materialLossNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  materialLossNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** mcn field predicates */
  mcn?: InputMaybe<Scalars['String']['input']>;
  mcnContains?: InputMaybe<Scalars['String']['input']>;
  mcnContainsFold?: InputMaybe<Scalars['String']['input']>;
  mcnEqualFold?: InputMaybe<Scalars['String']['input']>;
  mcnGT?: InputMaybe<Scalars['String']['input']>;
  mcnGTE?: InputMaybe<Scalars['String']['input']>;
  mcnHasPrefix?: InputMaybe<Scalars['String']['input']>;
  mcnHasSuffix?: InputMaybe<Scalars['String']['input']>;
  mcnIn?: InputMaybe<Array<Scalars['String']['input']>>;
  mcnIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  mcnLT?: InputMaybe<Scalars['String']['input']>;
  mcnLTE?: InputMaybe<Scalars['String']['input']>;
  mcnNEQ?: InputMaybe<Scalars['String']['input']>;
  mcnNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  mcnNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** milestone_done_month field predicates */
  milestoneDoneMonth?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthGT?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthGTE?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestoneDoneMonthIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  milestoneDoneMonthLT?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthLTE?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthNEQ?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneMonthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestoneDoneMonthNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** milestone_done_year field predicates */
  milestoneDoneYear?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearGT?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearGTE?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestoneDoneYearIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  milestoneDoneYearLT?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearLTE?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearNEQ?: InputMaybe<Scalars['Int']['input']>;
  milestoneDoneYearNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestoneDoneYearNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** milestone_plan_month field predicates */
  milestonePlanMonth?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthGT?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthGTE?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestonePlanMonthIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  milestonePlanMonthLT?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthLTE?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthNEQ?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanMonthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestonePlanMonthNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** milestone_plan_year field predicates */
  milestonePlanYear?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearGT?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearGTE?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestonePlanYearIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  milestonePlanYearLT?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearLTE?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearNEQ?: InputMaybe<Scalars['Int']['input']>;
  milestonePlanYearNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  milestonePlanYearNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** mntyr field predicates */
  mntyr?: InputMaybe<Scalars['String']['input']>;
  mntyrContains?: InputMaybe<Scalars['String']['input']>;
  mntyrContainsFold?: InputMaybe<Scalars['String']['input']>;
  mntyrEqualFold?: InputMaybe<Scalars['String']['input']>;
  mntyrGT?: InputMaybe<Scalars['String']['input']>;
  mntyrGTE?: InputMaybe<Scalars['String']['input']>;
  mntyrHasPrefix?: InputMaybe<Scalars['String']['input']>;
  mntyrHasSuffix?: InputMaybe<Scalars['String']['input']>;
  mntyrIn?: InputMaybe<Array<Scalars['String']['input']>>;
  mntyrIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  mntyrLT?: InputMaybe<Scalars['String']['input']>;
  mntyrLTE?: InputMaybe<Scalars['String']['input']>;
  mntyrNEQ?: InputMaybe<Scalars['String']['input']>;
  mntyrNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  mntyrNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ProjectWhereInput>;
  /** op_date field predicates */
  opDate?: InputMaybe<Scalars['Time']['input']>;
  opDateGT?: InputMaybe<Scalars['Time']['input']>;
  opDateGTE?: InputMaybe<Scalars['Time']['input']>;
  opDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  opDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  opDateLT?: InputMaybe<Scalars['Time']['input']>;
  opDateLTE?: InputMaybe<Scalars['Time']['input']>;
  opDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  opDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  opDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<ProjectWhereInput>>;
  /** owner field predicates */
  owner?: InputMaybe<Scalars['String']['input']>;
  /** owner_apply_amount field predicates */
  ownerApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountGT?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ownerApplyAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerApplyAmountLT?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  ownerApplyAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ownerApplyAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** owner_apply_count field predicates */
  ownerApplyCount?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountGT?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountGTE?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerApplyCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerApplyCountLT?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountLTE?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  ownerApplyCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerApplyCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** owner_approve_amount field predicates */
  ownerApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountGT?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ownerApproveAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerApproveAmountLT?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  ownerApproveAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  ownerApproveAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** owner_approve_count field predicates */
  ownerApproveCount?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountGT?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountGTE?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerApproveCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerApproveCountLT?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountLTE?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  ownerApproveCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerApproveCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerContains?: InputMaybe<Scalars['String']['input']>;
  ownerContainsFold?: InputMaybe<Scalars['String']['input']>;
  ownerEqualFold?: InputMaybe<Scalars['String']['input']>;
  ownerGT?: InputMaybe<Scalars['String']['input']>;
  ownerGTE?: InputMaybe<Scalars['String']['input']>;
  ownerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  ownerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  ownerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerLT?: InputMaybe<Scalars['String']['input']>;
  ownerLTE?: InputMaybe<Scalars['String']['input']>;
  ownerNEQ?: InputMaybe<Scalars['String']['input']>;
  ownerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pallets_in_stock field predicates */
  palletsInStock?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockGT?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockGTE?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  palletsInStockIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  palletsInStockLT?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockLTE?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockNEQ?: InputMaybe<Scalars['Float']['input']>;
  palletsInStockNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  palletsInStockNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** parts_in_stock field predicates */
  partsInStock?: InputMaybe<Scalars['Float']['input']>;
  partsInStockGT?: InputMaybe<Scalars['Float']['input']>;
  partsInStockGTE?: InputMaybe<Scalars['Float']['input']>;
  partsInStockIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  partsInStockIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  partsInStockLT?: InputMaybe<Scalars['Float']['input']>;
  partsInStockLTE?: InputMaybe<Scalars['Float']['input']>;
  partsInStockNEQ?: InputMaybe<Scalars['Float']['input']>;
  partsInStockNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  partsInStockNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** plan_overdue_count field predicates */
  planOverdueCount?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountGT?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountGTE?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planOverdueCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  planOverdueCountLT?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountLTE?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  planOverdueCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planOverdueCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** plan_overdue_month_count field predicates */
  planOverdueMonthCount?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountGT?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountGTE?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planOverdueMonthCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  planOverdueMonthCountLT?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountLTE?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  planOverdueMonthCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planOverdueMonthCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** plan_total_count field predicates */
  planTotalCount?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountGT?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountGTE?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planTotalCountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  planTotalCountLT?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountLTE?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountNEQ?: InputMaybe<Scalars['Int']['input']>;
  planTotalCountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  planTotalCountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_area field predicates */
  pmArea?: InputMaybe<Scalars['Float']['input']>;
  pmAreaGT?: InputMaybe<Scalars['Float']['input']>;
  pmAreaGTE?: InputMaybe<Scalars['Float']['input']>;
  pmAreaIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmAreaIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmAreaLT?: InputMaybe<Scalars['Float']['input']>;
  pmAreaLTE?: InputMaybe<Scalars['Float']['input']>;
  pmAreaNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmAreaNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmAreaNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_month_actual field predicates */
  pmMonthActual?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualGT?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualGTE?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmMonthActualIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmMonthActualLT?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualLTE?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmMonthActualNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmMonthActualNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_month_target field predicates */
  pmMonthTarget?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetGT?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetGTE?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmMonthTargetIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmMonthTargetLT?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetLTE?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmMonthTargetNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmMonthTargetNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_total field predicates */
  pmTotal?: InputMaybe<Scalars['Float']['input']>;
  pmTotalGT?: InputMaybe<Scalars['Float']['input']>;
  pmTotalGTE?: InputMaybe<Scalars['Float']['input']>;
  pmTotalIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmTotalIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmTotalLT?: InputMaybe<Scalars['Float']['input']>;
  pmTotalLTE?: InputMaybe<Scalars['Float']['input']>;
  pmTotalNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmTotalNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmTotalNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_year_actual field predicates */
  pmYearActual?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualGT?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualGTE?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYearActualIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmYearActualLT?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualLTE?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmYearActualNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYearActualNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_year_target field predicates */
  pmYearTarget?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetGT?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetGTE?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYearTargetIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmYearTargetLT?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetLTE?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmYearTargetNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYearTargetNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** pm_yesterday field predicates */
  pmYesterday?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayGT?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayGTE?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYesterdayIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  pmYesterdayLT?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayLTE?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayNEQ?: InputMaybe<Scalars['Float']['input']>;
  pmYesterdayNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  pmYesterdayNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** processing_weight field predicates */
  processingWeight?: InputMaybe<Scalars['Float']['input']>;
  processingWeightGT?: InputMaybe<Scalars['Float']['input']>;
  processingWeightGTE?: InputMaybe<Scalars['Float']['input']>;
  processingWeightIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  processingWeightIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  processingWeightLT?: InputMaybe<Scalars['Float']['input']>;
  processingWeightLTE?: InputMaybe<Scalars['Float']['input']>;
  processingWeightNEQ?: InputMaybe<Scalars['Float']['input']>;
  processingWeightNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  processingWeightNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** quality_ranking field predicates */
  qualityRanking?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingGT?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingGTE?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  qualityRankingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  qualityRankingLT?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingLTE?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingNEQ?: InputMaybe<Scalars['Float']['input']>;
  qualityRankingNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  qualityRankingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** quality_score field predicates */
  qualityScore?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreGT?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreGTE?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  qualityScoreIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  qualityScoreLT?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreLTE?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreNEQ?: InputMaybe<Scalars['Float']['input']>;
  qualityScoreNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  qualityScoreNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** start_date field predicates */
  startDate?: InputMaybe<Scalars['Time']['input']>;
  startDateGT?: InputMaybe<Scalars['Time']['input']>;
  startDateGTE?: InputMaybe<Scalars['Time']['input']>;
  startDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  startDateLT?: InputMaybe<Scalars['Time']['input']>;
  startDateLTE?: InputMaybe<Scalars['Time']['input']>;
  startDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  startDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** total_contract_amount field predicates */
  totalContractAmount?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountGT?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  totalContractAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  totalContractAmountLT?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  totalContractAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  totalContractAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** unit_component_installation field predicates */
  unitComponentInstallation?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationGT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationGTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentInstallationIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  unitComponentInstallationLT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationLTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationNEQ?: InputMaybe<Scalars['Float']['input']>;
  unitComponentInstallationNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentInstallationNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** unit_component_production field predicates */
  unitComponentProduction?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionGT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionGTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentProductionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  unitComponentProductionLT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionLTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionNEQ?: InputMaybe<Scalars['Float']['input']>;
  unitComponentProductionNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentProductionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** unit_component_total field predicates */
  unitComponentTotal?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalGT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalGTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentTotalIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  unitComponentTotalLT?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalLTE?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalNEQ?: InputMaybe<Scalars['Float']['input']>;
  unitComponentTotalNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitComponentTotalNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** unit_inventory_total field predicates */
  unitInventoryTotal?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalGT?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalGTE?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitInventoryTotalIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  unitInventoryTotalLT?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalLTE?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalNEQ?: InputMaybe<Scalars['Float']['input']>;
  unitInventoryTotalNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  unitInventoryTotalNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** va_apply_amount field predicates */
  vaApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountGT?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  vaApplyAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  vaApplyAmountLT?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  vaApplyAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  vaApplyAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** va_approve_amount field predicates */
  vaApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountGT?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  vaApproveAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  vaApproveAmountLT?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  vaApproveAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  vaApproveAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xjl field predicates */
  xjl?: InputMaybe<Scalars['Float']['input']>;
  xjlGT?: InputMaybe<Scalars['Float']['input']>;
  xjlGTE?: InputMaybe<Scalars['Float']['input']>;
  xjlIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xjlLT?: InputMaybe<Scalars['Float']['input']>;
  xjlLTE?: InputMaybe<Scalars['Float']['input']>;
  xjlNEQ?: InputMaybe<Scalars['Float']['input']>;
  xjlNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xjlNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmfzr field predicates */
  xmfzr?: InputMaybe<Scalars['String']['input']>;
  xmfzrContains?: InputMaybe<Scalars['String']['input']>;
  xmfzrContainsFold?: InputMaybe<Scalars['String']['input']>;
  xmfzrEqualFold?: InputMaybe<Scalars['String']['input']>;
  xmfzrGT?: InputMaybe<Scalars['String']['input']>;
  xmfzrGTE?: InputMaybe<Scalars['String']['input']>;
  xmfzrHasPrefix?: InputMaybe<Scalars['String']['input']>;
  xmfzrHasSuffix?: InputMaybe<Scalars['String']['input']>;
  xmfzrIn?: InputMaybe<Array<Scalars['String']['input']>>;
  xmfzrIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmfzrLT?: InputMaybe<Scalars['String']['input']>;
  xmfzrLTE?: InputMaybe<Scalars['String']['input']>;
  xmfzrNEQ?: InputMaybe<Scalars['String']['input']>;
  xmfzrNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  xmfzrNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmglf_lj field predicates */
  xmglfLj?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjGT?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjGTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfLjIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmglfLjLT?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjLTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjNEQ?: InputMaybe<Scalars['Float']['input']>;
  xmglfLjNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfLjNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmglf_ys field predicates */
  xmglfYs?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsGT?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsGTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfYsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmglfYsLT?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsLTE?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsNEQ?: InputMaybe<Scalars['Float']['input']>;
  xmglfYsNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmglfYsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** xmsjf field predicates */
  xmsjf?: InputMaybe<Scalars['Float']['input']>;
  xmsjfGT?: InputMaybe<Scalars['Float']['input']>;
  xmsjfGTE?: InputMaybe<Scalars['Float']['input']>;
  xmsjfIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmsjfIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  xmsjfLT?: InputMaybe<Scalars['Float']['input']>;
  xmsjfLTE?: InputMaybe<Scalars['Float']['input']>;
  xmsjfNEQ?: InputMaybe<Scalars['Float']['input']>;
  xmsjfNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  xmsjfNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** yye field predicates */
  yye?: InputMaybe<Scalars['Float']['input']>;
  yyeGT?: InputMaybe<Scalars['Float']['input']>;
  yyeGTE?: InputMaybe<Scalars['Float']['input']>;
  yyeIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  yyeLT?: InputMaybe<Scalars['Float']['input']>;
  yyeLTE?: InputMaybe<Scalars['Float']['input']>;
  yyeNEQ?: InputMaybe<Scalars['Float']['input']>;
  yyeNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  yyeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Province = Node & {
  __typename?: 'Province';
  adcode: Scalars['Int']['output'];
  area?: Maybe<Area>;
  areaID?: Maybe<Scalars['ID']['output']>;
  center?: Maybe<GeoJson>;
  cities: CityConnection;
  country: Country;
  countryID: Scalars['ID']['output'];
  createdAt: Scalars['Time']['output'];
  districts: DistrictConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type ProvinceCitiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CityOrder>;
  where?: InputMaybe<CityWhereInput>;
};


export type ProvinceDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type ProvinceTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type ProvinceConnection = {
  __typename?: 'ProvinceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProvinceEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ProvinceEdge = {
  __typename?: 'ProvinceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Province>;
};

/** Ordering options for Province connections */
export type ProvinceOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Provinces. */
  field: ProvinceOrderField;
};

/** Properties by which Province connections can be ordered. */
export enum ProvinceOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * ProvinceWhereInput is used for filtering Province objects.
 * Input was generated by ent.
 */
export type ProvinceWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<ProvinceWhereInput>>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** country_id field predicates */
  countryID?: InputMaybe<Scalars['ID']['input']>;
  countryIDContains?: InputMaybe<Scalars['ID']['input']>;
  countryIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  countryIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  countryIDGT?: InputMaybe<Scalars['ID']['input']>;
  countryIDGTE?: InputMaybe<Scalars['ID']['input']>;
  countryIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  countryIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  countryIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  countryIDLT?: InputMaybe<Scalars['ID']['input']>;
  countryIDLTE?: InputMaybe<Scalars['ID']['input']>;
  countryIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  countryIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** cities edge predicates */
  hasCities?: InputMaybe<Scalars['Boolean']['input']>;
  hasCitiesWith?: InputMaybe<Array<CityWhereInput>>;
  /** country edge predicates */
  hasCountry?: InputMaybe<Scalars['Boolean']['input']>;
  hasCountryWith?: InputMaybe<Array<CountryWhereInput>>;
  /** districts edge predicates */
  hasDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictsWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<ProvinceWhereInput>;
  or?: InputMaybe<Array<ProvinceWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Query = {
  __typename?: 'Query';
  amapRegeo: Array<Location>;
  areas: AreaConnection;
  biToken: Scalars['String']['output'];
  cities: CityConnection;
  competitors: CompetitorConnection;
  countries: CountryConnection;
  customers: CustomerConnection;
  districts: DistrictConnection;
  inputtips: Array<Location>;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  operations: OperationConnection;
  plots: PlotConnection;
  projectStaffs: ProjectStaffConnection;
  projects: ProjectConnection;
  provinces: ProvinceConnection;
  searchFeishuUser: Array<FeishuUser>;
  searchLocation: Array<Location>;
  session: Session;
  tenders: TenderConnection;
  topCompetitors: Array<TopCompetitor>;
  users: UserConnection;
  visitRecords: VisitRecordConnection;
};


export type QueryAmapRegeoArgs = {
  lat: Scalars['Float']['input'];
  lng: Scalars['Float']['input'];
};


export type QueryAreasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AreaOrder>;
  where?: InputMaybe<AreaWhereInput>;
};


export type QueryCitiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CityOrder>;
  where?: InputMaybe<CityWhereInput>;
};


export type QueryCompetitorsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CompetitorOrder>>;
  where?: InputMaybe<CompetitorWhereInput>;
};


export type QueryCountriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CountryOrder>;
  where?: InputMaybe<CountryWhereInput>;
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type QueryDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type QueryInputtipsArgs = {
  keyword: Scalars['String']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryOperationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<OperationOrder>;
  where?: InputMaybe<OperationWhereInput>;
};


export type QueryPlotsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlotOrder>;
  where?: InputMaybe<PlotWhereInput>;
};


export type QueryProjectStaffsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectStaffOrder>>;
  where?: InputMaybe<ProjectStaffWhereInput>;
};


export type QueryProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrder>>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};


export type QuerySearchFeishuUserArgs = {
  keyword: Scalars['String']['input'];
};


export type QuerySearchLocationArgs = {
  keyword: Scalars['String']['input'];
};


export type QueryTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};


export type QueryTopCompetitorsArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

export type Session = {
  __typename?: 'Session';
  avatarUrl: Scalars['String']['output'];
  email: Scalars['String']['output'];
  hasEditAccess: Scalars['Boolean']['output'];
  hasMapAccess: Scalars['Boolean']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isCeo: Scalars['Boolean']['output'];
  isSuperAdmin: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  userId: Scalars['String']['output'];
  username: Scalars['String']['output'];
};

export type Tender = Node & {
  __typename?: 'Tender';
  address?: Maybe<Scalars['String']['output']>;
  /** 則師，只限港澳 */
  architect?: Maybe<Scalars['String']['output']>;
  area: Area;
  areaID: Scalars['ID']['output'];
  attachements?: Maybe<Array<Scalars['String']['output']>>;
  biddingDate?: Maybe<Scalars['Time']['output']>;
  biddingInstructions?: Maybe<Scalars['String']['output']>;
  city?: Maybe<City>;
  cityID?: Maybe<Scalars['ID']['output']>;
  code: Scalars['String']['output'];
  competitivePartnershipRating?: Maybe<Scalars['Int']['output']>;
  competitivePartnershipRatingOverview?: Maybe<Scalars['String']['output']>;
  competitor?: Maybe<Competitor>;
  competitorID?: Maybe<Scalars['ID']['output']>;
  competitorSituations?: Maybe<Scalars['String']['output']>;
  /** 施工面積，只限港澳 */
  constructionArea?: Maybe<Scalars['String']['output']>;
  consultingFirm?: Maybe<Scalars['String']['output']>;
  contractForm?: Maybe<Scalars['String']['output']>;
  contractor?: Maybe<Scalars['String']['output']>;
  costEngineer?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  createdBy?: Maybe<User>;
  createdByID?: Maybe<Scalars['ID']['output']>;
  creditAndPaymentRating?: Maybe<Scalars['Int']['output']>;
  creditAndPaymentRatingOverview?: Maybe<Scalars['String']['output']>;
  currentProgress?: Maybe<Scalars['String']['output']>;
  customer?: Maybe<Customer>;
  customerID?: Maybe<Scalars['ID']['output']>;
  customerRelationshipRating?: Maybe<Scalars['Int']['output']>;
  customerRelationshipRatingOverview?: Maybe<Scalars['String']['output']>;
  designUnit?: Maybe<Scalars['String']['output']>;
  /** 業主，只限港澳 */
  developer?: Maybe<Scalars['String']['output']>;
  discoveryDate: Scalars['Time']['output'];
  district?: Maybe<District>;
  districtID?: Maybe<Scalars['ID']['output']>;
  estimatedAmount?: Maybe<Scalars['Float']['output']>;
  estimatedProjectEndDate?: Maybe<Scalars['Time']['output']>;
  estimatedProjectStartDate?: Maybe<Scalars['Time']['output']>;
  facadeConsultant?: Maybe<Scalars['String']['output']>;
  finder?: Maybe<User>;
  finderID?: Maybe<Scalars['ID']['output']>;
  followingSales?: Maybe<Array<User>>;
  fullAddress?: Maybe<Scalars['String']['output']>;
  geoBounds?: Maybe<Array<Maybe<Array<Maybe<Scalars['Float']['output']>>>>>;
  geoCoordinate?: Maybe<GeoJson>;
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Scalars['String']['output']>>;
  keyProject: Scalars['Boolean']['output'];
  /** 最後一次投標金額，只限港澳 */
  lastTenderAmount?: Maybe<Scalars['Float']['output']>;
  levelInvolved?: Maybe<Scalars['Int']['output']>;
  managementCompany?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  ownerSituations?: Maybe<Scalars['String']['output']>;
  prepareToBid: Scalars['Boolean']['output'];
  projectCode?: Maybe<Scalars['String']['output']>;
  projectDefinition?: Maybe<Scalars['String']['output']>;
  projectType?: Maybe<Scalars['String']['output']>;
  province?: Maybe<Province>;
  provinceID?: Maybe<Scalars['ID']['output']>;
  remark?: Maybe<Scalars['String']['output']>;
  sizeAndValueRating?: Maybe<Scalars['Int']['output']>;
  sizeAndValueRatingOverview?: Maybe<Scalars['String']['output']>;
  status: Scalars['Int']['output'];
  /** 交標日期，只限港澳 */
  tenderClosingDate?: Maybe<Scalars['Time']['output']>;
  /** 投標編號，只限港澳 */
  tenderCode?: Maybe<Scalars['String']['output']>;
  tenderDate?: Maybe<Scalars['Time']['output']>;
  tenderForm?: Maybe<Scalars['String']['output']>;
  tenderSituations?: Maybe<Scalars['String']['output']>;
  /** 得標金額，只限港澳 */
  tenderWinAmount?: Maybe<Scalars['Float']['output']>;
  tenderWinCompany?: Maybe<Scalars['String']['output']>;
  /** 得標日期，只限港澳 */
  tenderWinDate?: Maybe<Scalars['Time']['output']>;
  tenderingAgency?: Maybe<Scalars['String']['output']>;
  timeLimitRating?: Maybe<Scalars['Int']['output']>;
  timeLimitRatingOverview?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Time']['output'];
  visitRecords: VisitRecordConnection;
};


export type TenderVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type TenderConnection = {
  __typename?: 'TenderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TenderEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type TenderEdge = {
  __typename?: 'TenderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Tender>;
};

/** Ordering options for Tender connections */
export type TenderOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Tenders. */
  field: TenderOrderField;
};

/** Properties by which Tender connections can be ordered. */
export enum TenderOrderField {
  ClosingDate = 'CLOSING_DATE',
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  TenderDate = 'TENDER_DATE'
}

/**
 * TenderWhereInput is used for filtering Tender objects.
 * Input was generated by ent.
 */
export type TenderWhereInput = {
  /** address field predicates */
  address?: InputMaybe<Scalars['String']['input']>;
  addressContains?: InputMaybe<Scalars['String']['input']>;
  addressContainsFold?: InputMaybe<Scalars['String']['input']>;
  addressEqualFold?: InputMaybe<Scalars['String']['input']>;
  addressGT?: InputMaybe<Scalars['String']['input']>;
  addressGTE?: InputMaybe<Scalars['String']['input']>;
  addressHasPrefix?: InputMaybe<Scalars['String']['input']>;
  addressHasSuffix?: InputMaybe<Scalars['String']['input']>;
  addressIn?: InputMaybe<Array<Scalars['String']['input']>>;
  addressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  addressLT?: InputMaybe<Scalars['String']['input']>;
  addressLTE?: InputMaybe<Scalars['String']['input']>;
  addressNEQ?: InputMaybe<Scalars['String']['input']>;
  addressNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  addressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<TenderWhereInput>>;
  /** architect field predicates */
  architect?: InputMaybe<Scalars['String']['input']>;
  architectContains?: InputMaybe<Scalars['String']['input']>;
  architectContainsFold?: InputMaybe<Scalars['String']['input']>;
  architectEqualFold?: InputMaybe<Scalars['String']['input']>;
  architectGT?: InputMaybe<Scalars['String']['input']>;
  architectGTE?: InputMaybe<Scalars['String']['input']>;
  architectHasPrefix?: InputMaybe<Scalars['String']['input']>;
  architectHasSuffix?: InputMaybe<Scalars['String']['input']>;
  architectIn?: InputMaybe<Array<Scalars['String']['input']>>;
  architectIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  architectLT?: InputMaybe<Scalars['String']['input']>;
  architectLTE?: InputMaybe<Scalars['String']['input']>;
  architectNEQ?: InputMaybe<Scalars['String']['input']>;
  architectNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  architectNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** bidding_date field predicates */
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingDateGT?: InputMaybe<Scalars['Time']['input']>;
  biddingDateGTE?: InputMaybe<Scalars['Time']['input']>;
  biddingDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  biddingDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  biddingDateLT?: InputMaybe<Scalars['Time']['input']>;
  biddingDateLTE?: InputMaybe<Scalars['Time']['input']>;
  biddingDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  biddingDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  biddingDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** bidding_instructions field predicates */
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsContains?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsContainsFold?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsEqualFold?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsGT?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsGTE?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingInstructionsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  biddingInstructionsLT?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsLTE?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsNEQ?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingInstructionsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** city_id field predicates */
  cityID?: InputMaybe<Scalars['ID']['input']>;
  cityIDContains?: InputMaybe<Scalars['ID']['input']>;
  cityIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDGT?: InputMaybe<Scalars['ID']['input']>;
  cityIDGTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  cityIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cityIDLT?: InputMaybe<Scalars['ID']['input']>;
  cityIDLTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  cityIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** competitive_partnership_rating field predicates */
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingGT?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  competitivePartnershipRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitivePartnershipRatingLT?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  competitivePartnershipRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** competitive_partnership_rating_overview field predicates */
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitivePartnershipRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitivePartnershipRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitivePartnershipRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** competitor_id field predicates */
  competitorID?: InputMaybe<Scalars['ID']['input']>;
  competitorIDContains?: InputMaybe<Scalars['ID']['input']>;
  competitorIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  competitorIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  competitorIDGT?: InputMaybe<Scalars['ID']['input']>;
  competitorIDGTE?: InputMaybe<Scalars['ID']['input']>;
  competitorIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  competitorIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  competitorIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  competitorIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitorIDLT?: InputMaybe<Scalars['ID']['input']>;
  competitorIDLTE?: InputMaybe<Scalars['ID']['input']>;
  competitorIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  competitorIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  competitorIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** competitor_situations field predicates */
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsContains?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsGT?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitorSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitorSituationsLT?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitorSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** construction_area field predicates */
  constructionArea?: InputMaybe<Scalars['String']['input']>;
  constructionAreaContains?: InputMaybe<Scalars['String']['input']>;
  constructionAreaContainsFold?: InputMaybe<Scalars['String']['input']>;
  constructionAreaEqualFold?: InputMaybe<Scalars['String']['input']>;
  constructionAreaGT?: InputMaybe<Scalars['String']['input']>;
  constructionAreaGTE?: InputMaybe<Scalars['String']['input']>;
  constructionAreaHasPrefix?: InputMaybe<Scalars['String']['input']>;
  constructionAreaHasSuffix?: InputMaybe<Scalars['String']['input']>;
  constructionAreaIn?: InputMaybe<Array<Scalars['String']['input']>>;
  constructionAreaIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  constructionAreaLT?: InputMaybe<Scalars['String']['input']>;
  constructionAreaLTE?: InputMaybe<Scalars['String']['input']>;
  constructionAreaNEQ?: InputMaybe<Scalars['String']['input']>;
  constructionAreaNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  constructionAreaNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** consulting_firm field predicates */
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  consultingFirmContains?: InputMaybe<Scalars['String']['input']>;
  consultingFirmContainsFold?: InputMaybe<Scalars['String']['input']>;
  consultingFirmEqualFold?: InputMaybe<Scalars['String']['input']>;
  consultingFirmGT?: InputMaybe<Scalars['String']['input']>;
  consultingFirmGTE?: InputMaybe<Scalars['String']['input']>;
  consultingFirmHasPrefix?: InputMaybe<Scalars['String']['input']>;
  consultingFirmHasSuffix?: InputMaybe<Scalars['String']['input']>;
  consultingFirmIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultingFirmIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  consultingFirmLT?: InputMaybe<Scalars['String']['input']>;
  consultingFirmLTE?: InputMaybe<Scalars['String']['input']>;
  consultingFirmNEQ?: InputMaybe<Scalars['String']['input']>;
  consultingFirmNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultingFirmNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contract_form field predicates */
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractFormContains?: InputMaybe<Scalars['String']['input']>;
  contractFormContainsFold?: InputMaybe<Scalars['String']['input']>;
  contractFormEqualFold?: InputMaybe<Scalars['String']['input']>;
  contractFormGT?: InputMaybe<Scalars['String']['input']>;
  contractFormGTE?: InputMaybe<Scalars['String']['input']>;
  contractFormHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contractFormHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contractFormIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractFormIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractFormLT?: InputMaybe<Scalars['String']['input']>;
  contractFormLTE?: InputMaybe<Scalars['String']['input']>;
  contractFormNEQ?: InputMaybe<Scalars['String']['input']>;
  contractFormNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractFormNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor field predicates */
  contractor?: InputMaybe<Scalars['String']['input']>;
  contractorContains?: InputMaybe<Scalars['String']['input']>;
  contractorContainsFold?: InputMaybe<Scalars['String']['input']>;
  contractorEqualFold?: InputMaybe<Scalars['String']['input']>;
  contractorGT?: InputMaybe<Scalars['String']['input']>;
  contractorGTE?: InputMaybe<Scalars['String']['input']>;
  contractorHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contractorHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contractorIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractorIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorLT?: InputMaybe<Scalars['String']['input']>;
  contractorLTE?: InputMaybe<Scalars['String']['input']>;
  contractorNEQ?: InputMaybe<Scalars['String']['input']>;
  contractorNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractorNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** cost_engineer field predicates */
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  costEngineerContains?: InputMaybe<Scalars['String']['input']>;
  costEngineerContainsFold?: InputMaybe<Scalars['String']['input']>;
  costEngineerEqualFold?: InputMaybe<Scalars['String']['input']>;
  costEngineerGT?: InputMaybe<Scalars['String']['input']>;
  costEngineerGTE?: InputMaybe<Scalars['String']['input']>;
  costEngineerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  costEngineerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  costEngineerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  costEngineerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  costEngineerLT?: InputMaybe<Scalars['String']['input']>;
  costEngineerLTE?: InputMaybe<Scalars['String']['input']>;
  costEngineerNEQ?: InputMaybe<Scalars['String']['input']>;
  costEngineerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  costEngineerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** created_by_id field predicates */
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContains?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  createdByIDLT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDLTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** credit_and_payment_rating field predicates */
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingGT?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  creditAndPaymentRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  creditAndPaymentRatingLT?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  creditAndPaymentRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** credit_and_payment_rating_overview field predicates */
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  creditAndPaymentRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  creditAndPaymentRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  creditAndPaymentRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** current_progress field predicates */
  currentProgress?: InputMaybe<Scalars['String']['input']>;
  currentProgressContains?: InputMaybe<Scalars['String']['input']>;
  currentProgressContainsFold?: InputMaybe<Scalars['String']['input']>;
  currentProgressEqualFold?: InputMaybe<Scalars['String']['input']>;
  currentProgressGT?: InputMaybe<Scalars['String']['input']>;
  currentProgressGTE?: InputMaybe<Scalars['String']['input']>;
  currentProgressHasPrefix?: InputMaybe<Scalars['String']['input']>;
  currentProgressHasSuffix?: InputMaybe<Scalars['String']['input']>;
  currentProgressIn?: InputMaybe<Array<Scalars['String']['input']>>;
  currentProgressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  currentProgressLT?: InputMaybe<Scalars['String']['input']>;
  currentProgressLTE?: InputMaybe<Scalars['String']['input']>;
  currentProgressNEQ?: InputMaybe<Scalars['String']['input']>;
  currentProgressNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  currentProgressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** customer_id field predicates */
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerIDContains?: InputMaybe<Scalars['ID']['input']>;
  customerIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDGT?: InputMaybe<Scalars['ID']['input']>;
  customerIDGTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  customerIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerIDLT?: InputMaybe<Scalars['ID']['input']>;
  customerIDLTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  customerIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** customer_relationship_rating field predicates */
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingGT?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  customerRelationshipRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerRelationshipRatingLT?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  customerRelationshipRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** customer_relationship_rating_overview field predicates */
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  customerRelationshipRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerRelationshipRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  customerRelationshipRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** design_unit field predicates */
  designUnit?: InputMaybe<Scalars['String']['input']>;
  designUnitContains?: InputMaybe<Scalars['String']['input']>;
  designUnitContainsFold?: InputMaybe<Scalars['String']['input']>;
  designUnitEqualFold?: InputMaybe<Scalars['String']['input']>;
  designUnitGT?: InputMaybe<Scalars['String']['input']>;
  designUnitGTE?: InputMaybe<Scalars['String']['input']>;
  designUnitHasPrefix?: InputMaybe<Scalars['String']['input']>;
  designUnitHasSuffix?: InputMaybe<Scalars['String']['input']>;
  designUnitIn?: InputMaybe<Array<Scalars['String']['input']>>;
  designUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  designUnitLT?: InputMaybe<Scalars['String']['input']>;
  designUnitLTE?: InputMaybe<Scalars['String']['input']>;
  designUnitNEQ?: InputMaybe<Scalars['String']['input']>;
  designUnitNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  designUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** developer field predicates */
  developer?: InputMaybe<Scalars['String']['input']>;
  developerContains?: InputMaybe<Scalars['String']['input']>;
  developerContainsFold?: InputMaybe<Scalars['String']['input']>;
  developerEqualFold?: InputMaybe<Scalars['String']['input']>;
  developerGT?: InputMaybe<Scalars['String']['input']>;
  developerGTE?: InputMaybe<Scalars['String']['input']>;
  developerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  developerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  developerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  developerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  developerLT?: InputMaybe<Scalars['String']['input']>;
  developerLTE?: InputMaybe<Scalars['String']['input']>;
  developerNEQ?: InputMaybe<Scalars['String']['input']>;
  developerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  developerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** discovery_date field predicates */
  discoveryDate?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateGT?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateGTE?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  discoveryDateLT?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateLTE?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** district_id field predicates */
  districtID?: InputMaybe<Scalars['ID']['input']>;
  districtIDContains?: InputMaybe<Scalars['ID']['input']>;
  districtIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDGT?: InputMaybe<Scalars['ID']['input']>;
  districtIDGTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  districtIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  districtIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  districtIDLT?: InputMaybe<Scalars['ID']['input']>;
  districtIDLTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  districtIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  districtIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_amount field predicates */
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountGT?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  estimatedAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedAmountLT?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  estimatedAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_project_end_date field predicates */
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateGT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateGTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectEndDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedProjectEndDateLT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateLTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectEndDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_project_start_date field predicates */
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateGT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateGTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectStartDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedProjectStartDateLT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateLTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectStartDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** facade_consultant field predicates */
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantContains?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantContainsFold?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantEqualFold?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantGT?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantGTE?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantHasPrefix?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantHasSuffix?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantIn?: InputMaybe<Array<Scalars['String']['input']>>;
  facadeConsultantIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  facadeConsultantLT?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantLTE?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantNEQ?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  facadeConsultantNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** finder_id field predicates */
  finderID?: InputMaybe<Scalars['ID']['input']>;
  finderIDContains?: InputMaybe<Scalars['ID']['input']>;
  finderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  finderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  finderIDGT?: InputMaybe<Scalars['ID']['input']>;
  finderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  finderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  finderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  finderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  finderIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  finderIDLT?: InputMaybe<Scalars['ID']['input']>;
  finderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  finderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  finderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  finderIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** full_address field predicates */
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  fullAddressContains?: InputMaybe<Scalars['String']['input']>;
  fullAddressContainsFold?: InputMaybe<Scalars['String']['input']>;
  fullAddressEqualFold?: InputMaybe<Scalars['String']['input']>;
  fullAddressGT?: InputMaybe<Scalars['String']['input']>;
  fullAddressGTE?: InputMaybe<Scalars['String']['input']>;
  fullAddressHasPrefix?: InputMaybe<Scalars['String']['input']>;
  fullAddressHasSuffix?: InputMaybe<Scalars['String']['input']>;
  fullAddressIn?: InputMaybe<Array<Scalars['String']['input']>>;
  fullAddressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  fullAddressLT?: InputMaybe<Scalars['String']['input']>;
  fullAddressLTE?: InputMaybe<Scalars['String']['input']>;
  fullAddressNEQ?: InputMaybe<Scalars['String']['input']>;
  fullAddressNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  fullAddressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** city edge predicates */
  hasCity?: InputMaybe<Scalars['Boolean']['input']>;
  hasCityWith?: InputMaybe<Array<CityWhereInput>>;
  /** competitor edge predicates */
  hasCompetitor?: InputMaybe<Scalars['Boolean']['input']>;
  hasCompetitorWith?: InputMaybe<Array<CompetitorWhereInput>>;
  /** created_by edge predicates */
  hasCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedByWith?: InputMaybe<Array<UserWhereInput>>;
  /** customer edge predicates */
  hasCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomerWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** district edge predicates */
  hasDistrict?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** finder edge predicates */
  hasFinder?: InputMaybe<Scalars['Boolean']['input']>;
  hasFinderWith?: InputMaybe<Array<UserWhereInput>>;
  /** following_sales edge predicates */
  hasFollowingSales?: InputMaybe<Scalars['Boolean']['input']>;
  hasFollowingSalesWith?: InputMaybe<Array<UserWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** key_project field predicates */
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  keyProjectNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** last_tender_amount field predicates */
  lastTenderAmount?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountGT?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  lastTenderAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  lastTenderAmountLT?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  lastTenderAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  lastTenderAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** level_involved field predicates */
  levelInvolved?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedGT?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedGTE?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  levelInvolvedIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  levelInvolvedLT?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedLTE?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedNEQ?: InputMaybe<Scalars['Int']['input']>;
  levelInvolvedNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  levelInvolvedNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** management_company field predicates */
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  managementCompanyContains?: InputMaybe<Scalars['String']['input']>;
  managementCompanyContainsFold?: InputMaybe<Scalars['String']['input']>;
  managementCompanyEqualFold?: InputMaybe<Scalars['String']['input']>;
  managementCompanyGT?: InputMaybe<Scalars['String']['input']>;
  managementCompanyGTE?: InputMaybe<Scalars['String']['input']>;
  managementCompanyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  managementCompanyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  managementCompanyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managementCompanyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  managementCompanyLT?: InputMaybe<Scalars['String']['input']>;
  managementCompanyLTE?: InputMaybe<Scalars['String']['input']>;
  managementCompanyNEQ?: InputMaybe<Scalars['String']['input']>;
  managementCompanyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managementCompanyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<TenderWhereInput>;
  or?: InputMaybe<Array<TenderWhereInput>>;
  /** owner_situations field predicates */
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsContains?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsGT?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerSituationsLT?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** prepare_to_bid field predicates */
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  prepareToBidNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_code field predicates */
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectCodeContains?: InputMaybe<Scalars['String']['input']>;
  projectCodeContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectCodeEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectCodeGT?: InputMaybe<Scalars['String']['input']>;
  projectCodeGTE?: InputMaybe<Scalars['String']['input']>;
  projectCodeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectCodeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectCodeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectCodeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectCodeLT?: InputMaybe<Scalars['String']['input']>;
  projectCodeLTE?: InputMaybe<Scalars['String']['input']>;
  projectCodeNEQ?: InputMaybe<Scalars['String']['input']>;
  projectCodeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectCodeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_definition field predicates */
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionContains?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionGT?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionGTE?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectDefinitionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectDefinitionLT?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionLTE?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionNEQ?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectDefinitionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_type field predicates */
  projectType?: InputMaybe<Scalars['String']['input']>;
  projectTypeContains?: InputMaybe<Scalars['String']['input']>;
  projectTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectTypeGT?: InputMaybe<Scalars['String']['input']>;
  projectTypeGTE?: InputMaybe<Scalars['String']['input']>;
  projectTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectTypeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectTypeLT?: InputMaybe<Scalars['String']['input']>;
  projectTypeLTE?: InputMaybe<Scalars['String']['input']>;
  projectTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  projectTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectTypeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** remark field predicates */
  remark?: InputMaybe<Scalars['String']['input']>;
  remarkContains?: InputMaybe<Scalars['String']['input']>;
  remarkContainsFold?: InputMaybe<Scalars['String']['input']>;
  remarkEqualFold?: InputMaybe<Scalars['String']['input']>;
  remarkGT?: InputMaybe<Scalars['String']['input']>;
  remarkGTE?: InputMaybe<Scalars['String']['input']>;
  remarkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  remarkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  remarkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  remarkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  remarkLT?: InputMaybe<Scalars['String']['input']>;
  remarkLTE?: InputMaybe<Scalars['String']['input']>;
  remarkNEQ?: InputMaybe<Scalars['String']['input']>;
  remarkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  remarkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size_and_value_rating field predicates */
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingGT?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeAndValueRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeAndValueRatingLT?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeAndValueRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size_and_value_rating_overview field predicates */
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  sizeAndValueRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeAndValueRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  sizeAndValueRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** status field predicates */
  status?: InputMaybe<Scalars['Int']['input']>;
  statusGT?: InputMaybe<Scalars['Int']['input']>;
  statusGTE?: InputMaybe<Scalars['Int']['input']>;
  statusIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  statusLT?: InputMaybe<Scalars['Int']['input']>;
  statusLTE?: InputMaybe<Scalars['Int']['input']>;
  statusNEQ?: InputMaybe<Scalars['Int']['input']>;
  statusNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** tender_closing_date field predicates */
  tenderClosingDate?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateGT?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateGTE?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderClosingDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderClosingDateLT?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateLTE?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  tenderClosingDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderClosingDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_code field predicates */
  tenderCode?: InputMaybe<Scalars['String']['input']>;
  tenderCodeContains?: InputMaybe<Scalars['String']['input']>;
  tenderCodeContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderCodeEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderCodeGT?: InputMaybe<Scalars['String']['input']>;
  tenderCodeGTE?: InputMaybe<Scalars['String']['input']>;
  tenderCodeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderCodeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderCodeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderCodeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderCodeLT?: InputMaybe<Scalars['String']['input']>;
  tenderCodeLTE?: InputMaybe<Scalars['String']['input']>;
  tenderCodeNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderCodeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderCodeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_date field predicates */
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderDateGT?: InputMaybe<Scalars['Time']['input']>;
  tenderDateGTE?: InputMaybe<Scalars['Time']['input']>;
  tenderDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderDateLT?: InputMaybe<Scalars['Time']['input']>;
  tenderDateLTE?: InputMaybe<Scalars['Time']['input']>;
  tenderDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  tenderDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_form field predicates */
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderFormContains?: InputMaybe<Scalars['String']['input']>;
  tenderFormContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderFormEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderFormGT?: InputMaybe<Scalars['String']['input']>;
  tenderFormGTE?: InputMaybe<Scalars['String']['input']>;
  tenderFormHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderFormHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderFormIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderFormIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderFormLT?: InputMaybe<Scalars['String']['input']>;
  tenderFormLTE?: InputMaybe<Scalars['String']['input']>;
  tenderFormNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderFormNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderFormNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_situations field predicates */
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsContains?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsGT?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderSituationsLT?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_win_amount field predicates */
  tenderWinAmount?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountGT?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  tenderWinAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderWinAmountLT?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  tenderWinAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  tenderWinAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_win_company field predicates */
  tenderWinCompany?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyContains?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyGT?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyGTE?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderWinCompanyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderWinCompanyLT?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyLTE?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderWinCompanyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderWinCompanyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_win_date field predicates */
  tenderWinDate?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateGT?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateGTE?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderWinDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderWinDateLT?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateLTE?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  tenderWinDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderWinDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tendering_agency field predicates */
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyContains?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyGT?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyGTE?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderingAgencyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderingAgencyLT?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyLTE?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderingAgencyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** time_limit_rating field predicates */
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingGT?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  timeLimitRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  timeLimitRatingLT?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  timeLimitRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** time_limit_rating_overview field predicates */
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  timeLimitRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  timeLimitRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  timeLimitRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type TopCompetitor = {
  __typename?: 'TopCompetitor';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  shortName: Scalars['String']['output'];
  wonTendersCount: Scalars['Int']['output'];
};

/**
 * UpdateAreaInput is used for update Area object.
 * Input was generated by ent.
 */
export type UpdateAreaInput = {
  addCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addUserIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  clearProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  clearUsers?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeUserIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCityInput is used for update City object.
 * Input was generated by ent.
 */
export type UpdateCityInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  removeDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCompetitorInput is used for update Competitor object.
 * Input was generated by ent.
 */
export type UpdateCompetitorInput = {
  addWonTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearWonTenders?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeWonTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  shortName?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCountryInput is used for update Country object.
 * Input was generated by ent.
 */
export type UpdateCountryInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCustomerInput is used for update Customer object.
 * Input was generated by ent.
 */
export type UpdateCustomerInput = {
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  clearContactPerson?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonEmail?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonPhone?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonPosition?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  clearIndustry?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerType?: InputMaybe<Scalars['Boolean']['input']>;
  clearSales?: InputMaybe<Scalars['Boolean']['input']>;
  clearSize?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  industry?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesID?: InputMaybe<Scalars['ID']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateDistrictInput is used for update District object.
 * Input was generated by ent.
 */
export type UpdateDistrictInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addPlotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityCode?: InputMaybe<Scalars['Int']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  clearCity?: InputMaybe<Scalars['Boolean']['input']>;
  clearPlots?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  removePlotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdatePlotInput is used for update Plot object.
 * Input was generated by ent.
 */
export type UpdatePlotInput = {
  colorHex?: InputMaybe<Scalars['String']['input']>;
  districtID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateProjectInput is used for update Project object.
 * Input was generated by ent.
 */
export type UpdateProjectInput = {
  /** 累计非法定扣款 */
  accumulatedNonStatutoryDeductions?: InputMaybe<Scalars['Float']['input']>;
  /** 本期非法定扣款 */
  accumulatedNonStatutoryDeductionsPeriod?: InputMaybe<Scalars['Float']['input']>;
  /** 累计法定扣款 */
  accumulatedStatutoryDeductions?: InputMaybe<Scalars['Float']['input']>;
  /** 本期法定扣款 */
  accumulatedStatutoryDeductionsPeriod?: InputMaybe<Scalars['Float']['input']>;
  addProjectStaffIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addUserIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVoIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** 鋁型材預算百分比 */
  aluminumBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  /** 鋁板預算百分比 */
  aluminumPlateBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  /** 工程規模 */
  areas?: InputMaybe<Scalars['String']['input']>;
  /** 散件已完成數量 */
  bulkMaterialsCompletedQuantity?: InputMaybe<Scalars['Float']['input']>;
  /** 散件總訂貨數量 */
  bulkMaterialsTotalOrderQuantity?: InputMaybe<Scalars['Float']['input']>;
  /** 散件未完成數量 */
  bulkMaterialsUncompletedQuantity?: InputMaybe<Scalars['Float']['input']>;
  /** 成交额 */
  cje?: InputMaybe<Scalars['Float']['input']>;
  clearAccumulatedNonStatutoryDeductions?: InputMaybe<Scalars['Boolean']['input']>;
  clearAccumulatedNonStatutoryDeductionsPeriod?: InputMaybe<Scalars['Boolean']['input']>;
  clearAccumulatedStatutoryDeductions?: InputMaybe<Scalars['Boolean']['input']>;
  clearAccumulatedStatutoryDeductionsPeriod?: InputMaybe<Scalars['Boolean']['input']>;
  clearAluminumBudgetPercentage?: InputMaybe<Scalars['Boolean']['input']>;
  clearAluminumPlateBudgetPercentage?: InputMaybe<Scalars['Boolean']['input']>;
  clearAreas?: InputMaybe<Scalars['Boolean']['input']>;
  clearBulkMaterialsCompletedQuantity?: InputMaybe<Scalars['Boolean']['input']>;
  clearBulkMaterialsTotalOrderQuantity?: InputMaybe<Scalars['Boolean']['input']>;
  clearBulkMaterialsUncompletedQuantity?: InputMaybe<Scalars['Boolean']['input']>;
  clearCje?: InputMaybe<Scalars['Boolean']['input']>;
  clearConType?: InputMaybe<Scalars['Boolean']['input']>;
  clearConsultant?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractorApplyAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractorApplyCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractorApproveAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractorApproveCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDesignRatedWeight?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramBdFinishCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramBdTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramCApprovalRatioDenominator?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramCApprovalRatioNumerator?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramConstructionFinishCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramConstructionTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramProcessingFinishCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearDiagramProcessingTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearEffectiveContractAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearEndDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearFsDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearGlassBudgetPercentage?: InputMaybe<Scalars['Boolean']['input']>;
  clearInstallProgress?: InputMaybe<Scalars['Boolean']['input']>;
  clearIronBudgetPercentage?: InputMaybe<Scalars['Boolean']['input']>;
  clearItemStockWeight?: InputMaybe<Scalars['Boolean']['input']>;
  clearJzs?: InputMaybe<Scalars['Boolean']['input']>;
  clearManager?: InputMaybe<Scalars['Boolean']['input']>;
  clearMaterialLoss?: InputMaybe<Scalars['Boolean']['input']>;
  clearMcn?: InputMaybe<Scalars['Boolean']['input']>;
  clearMilestoneDoneMonth?: InputMaybe<Scalars['Boolean']['input']>;
  clearMilestoneDoneYear?: InputMaybe<Scalars['Boolean']['input']>;
  clearMilestonePlanMonth?: InputMaybe<Scalars['Boolean']['input']>;
  clearMilestonePlanYear?: InputMaybe<Scalars['Boolean']['input']>;
  clearMntyr?: InputMaybe<Scalars['Boolean']['input']>;
  clearName?: InputMaybe<Scalars['Boolean']['input']>;
  clearOpDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwner?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerApplyAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerApplyCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerApproveAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerApproveCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearPalletsInStock?: InputMaybe<Scalars['Boolean']['input']>;
  clearPartsInStock?: InputMaybe<Scalars['Boolean']['input']>;
  clearPlanOverdueCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearPlanOverdueMonthCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearPlanTotalCount?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmArea?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmMonthActual?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmMonthTarget?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmTotal?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmYearActual?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmYearTarget?: InputMaybe<Scalars['Boolean']['input']>;
  clearPmYesterday?: InputMaybe<Scalars['Boolean']['input']>;
  clearProcessingWeight?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectStaffs?: InputMaybe<Scalars['Boolean']['input']>;
  clearQualityRanking?: InputMaybe<Scalars['Boolean']['input']>;
  clearQualityScore?: InputMaybe<Scalars['Boolean']['input']>;
  clearStartDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearTotalContractAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearUnitComponentInstallation?: InputMaybe<Scalars['Boolean']['input']>;
  clearUnitComponentProduction?: InputMaybe<Scalars['Boolean']['input']>;
  clearUnitComponentTotal?: InputMaybe<Scalars['Boolean']['input']>;
  clearUnitInventoryTotal?: InputMaybe<Scalars['Boolean']['input']>;
  clearUsers?: InputMaybe<Scalars['Boolean']['input']>;
  clearVaApplyAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearVaApproveAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearVos?: InputMaybe<Scalars['Boolean']['input']>;
  clearXjl?: InputMaybe<Scalars['Boolean']['input']>;
  clearXmfzr?: InputMaybe<Scalars['Boolean']['input']>;
  clearXmglfLj?: InputMaybe<Scalars['Boolean']['input']>;
  clearXmglfYs?: InputMaybe<Scalars['Boolean']['input']>;
  clearXmsjf?: InputMaybe<Scalars['Boolean']['input']>;
  clearYye?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  /** 中標形式 */
  conType?: InputMaybe<Scalars['String']['input']>;
  /** 幕墻顧問 */
  consultant?: InputMaybe<Scalars['String']['input']>;
  /** 总包申请总额 */
  contractorApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 总包申请数量 */
  contractorApplyCount?: InputMaybe<Scalars['Int']['input']>;
  /** 总包批复总额 */
  contractorApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 总包批复数量 */
  contractorApproveCount?: InputMaybe<Scalars['Int']['input']>;
  /** 设计定额重量 */
  designRatedWeight?: InputMaybe<Scalars['Float']['input']>;
  /** BD圖紙完成數量 */
  diagramBdFinishCount?: InputMaybe<Scalars['Int']['input']>;
  /** BD圖紙總數 */
  diagramBdTotalCount?: InputMaybe<Scalars['Int']['input']>;
  /** C版批圖率分母 */
  diagramCApprovalRatioDenominator?: InputMaybe<Scalars['Int']['input']>;
  /** C版批圖率分子 */
  diagramCApprovalRatioNumerator?: InputMaybe<Scalars['Int']['input']>;
  /** 施工圖紙完成數量 */
  diagramConstructionFinishCount?: InputMaybe<Scalars['Int']['input']>;
  /** 施工圖紙總數 */
  diagramConstructionTotalCount?: InputMaybe<Scalars['Int']['input']>;
  /** 加工圖完成數量 */
  diagramProcessingFinishCount?: InputMaybe<Scalars['Int']['input']>;
  /** 加工圖總數 */
  diagramProcessingTotalCount?: InputMaybe<Scalars['Int']['input']>;
  /** 有效合同金额 */
  effectiveContractAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 竣工日期 */
  endDate?: InputMaybe<Scalars['Time']['input']>;
  /** 封頂日期 */
  fsDate?: InputMaybe<Scalars['Time']['input']>;
  /** 玻璃預算百分比 */
  glassBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  /** 安装进度 */
  installProgress?: InputMaybe<Scalars['Float']['input']>;
  /** 鐵型材預算百分比 */
  ironBudgetPercentage?: InputMaybe<Scalars['Float']['input']>;
  /** 是否完成 */
  isFinished?: InputMaybe<Scalars['Boolean']['input']>;
  /** 項目物料庫存重量 */
  itemStockWeight?: InputMaybe<Scalars['Float']['input']>;
  /** 建築師 */
  jzs?: InputMaybe<Scalars['String']['input']>;
  /** 地盤經理 */
  manager?: InputMaybe<Scalars['String']['input']>;
  /** 物料損失金額 */
  materialLoss?: InputMaybe<Scalars['Float']['input']>;
  /** 總承包商 */
  mcn?: InputMaybe<Scalars['String']['input']>;
  /** 里程碑完成月份 */
  milestoneDoneMonth?: InputMaybe<Scalars['Int']['input']>;
  /** 里程碑完成年份 */
  milestoneDoneYear?: InputMaybe<Scalars['Int']['input']>;
  /** 里程碑計劃月份 */
  milestonePlanMonth?: InputMaybe<Scalars['Int']['input']>;
  /** 里程碑計劃年份 */
  milestonePlanYear?: InputMaybe<Scalars['Int']['input']>;
  /** 維修保養期 */
  mntyr?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** 開始安裝日期 */
  opDate?: InputMaybe<Scalars['Time']['input']>;
  /** 客戶 */
  owner?: InputMaybe<Scalars['String']['input']>;
  /** 业主申请总额 */
  ownerApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 业主申请数量 */
  ownerApplyCount?: InputMaybe<Scalars['Int']['input']>;
  /** 业主批复总额 */
  ownerApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 业主批复数量 */
  ownerApproveCount?: InputMaybe<Scalars['Int']['input']>;
  /** 卡板庫存數量 */
  palletsInStock?: InputMaybe<Scalars['Float']['input']>;
  /** 散件庫存數量 */
  partsInStock?: InputMaybe<Scalars['Float']['input']>;
  /** 計劃超期數量 */
  planOverdueCount?: InputMaybe<Scalars['Int']['input']>;
  /** 當月計劃超期數量 */
  planOverdueMonthCount?: InputMaybe<Scalars['Int']['input']>;
  /** 計劃總數 */
  planTotalCount?: InputMaybe<Scalars['Int']['input']>;
  /** 生产管理面积 */
  pmArea?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理當月實際生產 */
  pmMonthActual?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理當月累計生產 */
  pmMonthTarget?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理累計生產 */
  pmTotal?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理當年實際生產 */
  pmYearActual?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理當年累計生產 */
  pmYearTarget?: InputMaybe<Scalars['Float']['input']>;
  /** 生产管理昨日生產 */
  pmYesterday?: InputMaybe<Scalars['Float']['input']>;
  /** 加工图成型重量 */
  processingWeight?: InputMaybe<Scalars['Float']['input']>;
  /** 質量排名 */
  qualityRanking?: InputMaybe<Scalars['Float']['input']>;
  /** 質量得分 */
  qualityScore?: InputMaybe<Scalars['Float']['input']>;
  removeProjectStaffIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeUserIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVoIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** 開工日期 */
  startDate?: InputMaybe<Scalars['Time']['input']>;
  /** 合約总额 */
  totalContractAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 單元件安裝數量 */
  unitComponentInstallation?: InputMaybe<Scalars['Float']['input']>;
  /** 單元件生產數量 */
  unitComponentProduction?: InputMaybe<Scalars['Float']['input']>;
  /** 單元件總數 */
  unitComponentTotal?: InputMaybe<Scalars['Float']['input']>;
  /** 單元件庫存累計 */
  unitInventoryTotal?: InputMaybe<Scalars['Float']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  /** 分判VA申请总额 */
  vaApplyAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 分判VA批复总额 */
  vaApproveAmount?: InputMaybe<Scalars['Float']['input']>;
  /** 现金流 */
  xjl?: InputMaybe<Scalars['Float']['input']>;
  /** 项目负责人 */
  xmfzr?: InputMaybe<Scalars['String']['input']>;
  /** 项目管理费累计 */
  xmglfLj?: InputMaybe<Scalars['Float']['input']>;
  /** 项目管理费预算 */
  xmglfYs?: InputMaybe<Scalars['Float']['input']>;
  /** 项目设计费 */
  xmsjf?: InputMaybe<Scalars['Float']['input']>;
  /** 营业额 */
  yye?: InputMaybe<Scalars['Float']['input']>;
};

/**
 * UpdateProvinceInput is used for update Province object.
 * Input was generated by ent.
 */
export type UpdateProvinceInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addCityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  clearArea?: InputMaybe<Scalars['Boolean']['input']>;
  clearCities?: InputMaybe<Scalars['Boolean']['input']>;
  clearDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  countryID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeCityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateTenderInput is used for update Tender object.
 * Input was generated by ent.
 */
export type UpdateTenderInput = {
  addFollowingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['String']['input']>;
  appendAttachements?: InputMaybe<Array<Scalars['String']['input']>>;
  appendImages?: InputMaybe<Array<Scalars['String']['input']>>;
  /** 則師，只限港澳 */
  architect?: InputMaybe<Scalars['String']['input']>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  attachements?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  clearAddress?: InputMaybe<Scalars['Boolean']['input']>;
  clearArchitect?: InputMaybe<Scalars['Boolean']['input']>;
  clearAttachements?: InputMaybe<Scalars['Boolean']['input']>;
  clearBiddingDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearBiddingInstructions?: InputMaybe<Scalars['Boolean']['input']>;
  clearCity?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitivePartnershipRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitivePartnershipRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitor?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitorSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearConstructionArea?: InputMaybe<Scalars['Boolean']['input']>;
  clearConsultingFirm?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractForm?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractor?: InputMaybe<Scalars['Boolean']['input']>;
  clearCostEngineer?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreditAndPaymentRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreditAndPaymentRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearCurrentProgress?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomerRelationshipRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomerRelationshipRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearDesignUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearDeveloper?: InputMaybe<Scalars['Boolean']['input']>;
  clearDistrict?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedProjectEndDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedProjectStartDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearFacadeConsultant?: InputMaybe<Scalars['Boolean']['input']>;
  clearFinder?: InputMaybe<Scalars['Boolean']['input']>;
  clearFollowingSales?: InputMaybe<Scalars['Boolean']['input']>;
  clearFullAddress?: InputMaybe<Scalars['Boolean']['input']>;
  clearImages?: InputMaybe<Scalars['Boolean']['input']>;
  clearLastTenderAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearLevelInvolved?: InputMaybe<Scalars['Boolean']['input']>;
  clearManagementCompany?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectCode?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectDefinition?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectType?: InputMaybe<Scalars['Boolean']['input']>;
  clearProvince?: InputMaybe<Scalars['Boolean']['input']>;
  clearRemark?: InputMaybe<Scalars['Boolean']['input']>;
  clearSizeAndValueRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearSizeAndValueRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderClosingDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderCode?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderForm?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderWinAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderWinCompany?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderWinDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderingAgency?: InputMaybe<Scalars['Boolean']['input']>;
  clearTimeLimitRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearTimeLimitRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitorID?: InputMaybe<Scalars['ID']['input']>;
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  /** 施工面積，只限港澳 */
  constructionArea?: InputMaybe<Scalars['String']['input']>;
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractor?: InputMaybe<Scalars['String']['input']>;
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  currentProgress?: InputMaybe<Scalars['String']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  designUnit?: InputMaybe<Scalars['String']['input']>;
  /** 業主，只限港澳 */
  developer?: InputMaybe<Scalars['String']['input']>;
  discoveryDate?: InputMaybe<Scalars['Time']['input']>;
  districtID?: InputMaybe<Scalars['ID']['input']>;
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  finderID?: InputMaybe<Scalars['ID']['input']>;
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<Array<Scalars['String']['input']>>;
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  /** 最後一次投標金額，只限港澳 */
  lastTenderAmount?: InputMaybe<Scalars['Float']['input']>;
  levelInvolved?: InputMaybe<Scalars['Int']['input']>;
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectType?: InputMaybe<Scalars['String']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  remark?: InputMaybe<Scalars['String']['input']>;
  removeFollowingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  /** 交標日期，只限港澳 */
  tenderClosingDate?: InputMaybe<Scalars['Time']['input']>;
  /** 投標編號，只限港澳 */
  tenderCode?: InputMaybe<Scalars['String']['input']>;
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  /** 得標金額，只限港澳 */
  tenderWinAmount?: InputMaybe<Scalars['Float']['input']>;
  tenderWinCompany?: InputMaybe<Scalars['String']['input']>;
  /** 得標日期，只限港澳 */
  tenderWinDate?: InputMaybe<Scalars['Time']['input']>;
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  addAreaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addProjectIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTeamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  avatarURL?: InputMaybe<Scalars['String']['input']>;
  clearAreas?: InputMaybe<Scalars['Boolean']['input']>;
  clearAvatarURL?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  clearEmail?: InputMaybe<Scalars['Boolean']['input']>;
  clearLeader?: InputMaybe<Scalars['Boolean']['input']>;
  clearName?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjects?: InputMaybe<Scalars['Boolean']['input']>;
  clearTeamMembers?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  clearUsername?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hasEditAccess?: InputMaybe<Scalars['Boolean']['input']>;
  hasMapAccess?: InputMaybe<Scalars['Boolean']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isCeo?: InputMaybe<Scalars['Boolean']['input']>;
  isSuperAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  openID?: InputMaybe<Scalars['String']['input']>;
  removeAreaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeProjectIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTeamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateVisitRecordInput is used for update VisitRecord object.
 * Input was generated by ent.
 */
export type UpdateVisitRecordInput = {
  addFollowUpByIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearFollowUpBys?: InputMaybe<Scalars['Boolean']['input']>;
  clearNextStep?: InputMaybe<Scalars['Boolean']['input']>;
  clearTender?: InputMaybe<Scalars['Boolean']['input']>;
  commContent?: InputMaybe<Scalars['String']['input']>;
  commPeople?: InputMaybe<Scalars['String']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  date?: InputMaybe<Scalars['Time']['input']>;
  nextStep?: InputMaybe<Scalars['String']['input']>;
  removeFollowUpByIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitType?: InputMaybe<Scalars['Int']['input']>;
};

export type User = Node & {
  __typename?: 'User';
  areas: AreaConnection;
  avatarURL?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  customers: CustomerConnection;
  disabled: Scalars['Boolean']['output'];
  email?: Maybe<Scalars['String']['output']>;
  hasEditAccess: Scalars['Boolean']['output'];
  hasMapAccess: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isCeo: Scalars['Boolean']['output'];
  isSuperAdmin: Scalars['Boolean']['output'];
  leader?: Maybe<User>;
  leaderID?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  openID: Scalars['String']['output'];
  projects: ProjectConnection;
  teamMembers?: Maybe<Array<User>>;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
  username?: Maybe<Scalars['String']['output']>;
  visitRecords: VisitRecordConnection;
};


export type UserAreasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AreaOrder>;
  where?: InputMaybe<AreaWhereInput>;
};


export type UserCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type UserProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrder>>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type UserTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TenderOrder>>;
  where?: InputMaybe<TenderWhereInput>;
};


export type UserVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Users. */
  field: UserOrderField;
};

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** avatar_url field predicates */
  avatarURL?: InputMaybe<Scalars['String']['input']>;
  avatarURLContains?: InputMaybe<Scalars['String']['input']>;
  avatarURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  avatarURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  avatarURLGT?: InputMaybe<Scalars['String']['input']>;
  avatarURLGTE?: InputMaybe<Scalars['String']['input']>;
  avatarURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  avatarURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  avatarURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarURLIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  avatarURLLT?: InputMaybe<Scalars['String']['input']>;
  avatarURLLTE?: InputMaybe<Scalars['String']['input']>;
  avatarURLNEQ?: InputMaybe<Scalars['String']['input']>;
  avatarURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarURLNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** disabled field predicates */
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  disabledNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']['input']>;
  emailContains?: InputMaybe<Scalars['String']['input']>;
  emailContainsFold?: InputMaybe<Scalars['String']['input']>;
  emailEqualFold?: InputMaybe<Scalars['String']['input']>;
  emailGT?: InputMaybe<Scalars['String']['input']>;
  emailGTE?: InputMaybe<Scalars['String']['input']>;
  emailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  emailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  emailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  emailLT?: InputMaybe<Scalars['String']['input']>;
  emailLTE?: InputMaybe<Scalars['String']['input']>;
  emailNEQ?: InputMaybe<Scalars['String']['input']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** areas edge predicates */
  hasAreas?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreasWith?: InputMaybe<Array<AreaWhereInput>>;
  /** customers edge predicates */
  hasCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomersWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** has_edit_access field predicates */
  hasEditAccess?: InputMaybe<Scalars['Boolean']['input']>;
  hasEditAccessNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** leader edge predicates */
  hasLeader?: InputMaybe<Scalars['Boolean']['input']>;
  hasLeaderWith?: InputMaybe<Array<UserWhereInput>>;
  /** has_map_access field predicates */
  hasMapAccess?: InputMaybe<Scalars['Boolean']['input']>;
  hasMapAccessNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']['input']>;
  hasProjectsWith?: InputMaybe<Array<ProjectWhereInput>>;
  /** team_members edge predicates */
  hasTeamMembers?: InputMaybe<Scalars['Boolean']['input']>;
  hasTeamMembersWith?: InputMaybe<Array<UserWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_admin field predicates */
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isAdminNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** is_ceo field predicates */
  isCeo?: InputMaybe<Scalars['Boolean']['input']>;
  isCeoNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** is_super_admin field predicates */
  isSuperAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isSuperAdminNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** leader_id field predicates */
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  leaderIDContains?: InputMaybe<Scalars['ID']['input']>;
  leaderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  leaderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  leaderIDGT?: InputMaybe<Scalars['ID']['input']>;
  leaderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  leaderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  leaderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  leaderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  leaderIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  leaderIDLT?: InputMaybe<Scalars['ID']['input']>;
  leaderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  leaderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  leaderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  leaderIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<UserWhereInput>;
  /** open_id field predicates */
  openID?: InputMaybe<Scalars['String']['input']>;
  openIDContains?: InputMaybe<Scalars['String']['input']>;
  openIDContainsFold?: InputMaybe<Scalars['String']['input']>;
  openIDEqualFold?: InputMaybe<Scalars['String']['input']>;
  openIDGT?: InputMaybe<Scalars['String']['input']>;
  openIDGTE?: InputMaybe<Scalars['String']['input']>;
  openIDHasPrefix?: InputMaybe<Scalars['String']['input']>;
  openIDHasSuffix?: InputMaybe<Scalars['String']['input']>;
  openIDIn?: InputMaybe<Array<Scalars['String']['input']>>;
  openIDLT?: InputMaybe<Scalars['String']['input']>;
  openIDLTE?: InputMaybe<Scalars['String']['input']>;
  openIDNEQ?: InputMaybe<Scalars['String']['input']>;
  openIDNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** username field predicates */
  username?: InputMaybe<Scalars['String']['input']>;
  usernameContains?: InputMaybe<Scalars['String']['input']>;
  usernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  usernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  usernameGT?: InputMaybe<Scalars['String']['input']>;
  usernameGTE?: InputMaybe<Scalars['String']['input']>;
  usernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  usernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  usernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  usernameLT?: InputMaybe<Scalars['String']['input']>;
  usernameLTE?: InputMaybe<Scalars['String']['input']>;
  usernameNEQ?: InputMaybe<Scalars['String']['input']>;
  usernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export type VisitRecord = Node & {
  __typename?: 'VisitRecord';
  commContent: Scalars['String']['output'];
  commPeople: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  customer: Customer;
  customerID: Scalars['ID']['output'];
  date: Scalars['Time']['output'];
  followupbys: UserConnection;
  id: Scalars['ID']['output'];
  nextStep?: Maybe<Scalars['String']['output']>;
  tender?: Maybe<Tender>;
  tenderID?: Maybe<Scalars['ID']['output']>;
  updatedAt: Scalars['Time']['output'];
  visitType: Scalars['Int']['output'];
};


export type VisitRecordFollowupbysArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

/** A connection to a list of items. */
export type VisitRecordConnection = {
  __typename?: 'VisitRecordConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<VisitRecordEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type VisitRecordEdge = {
  __typename?: 'VisitRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<VisitRecord>;
};

/** Ordering options for VisitRecord connections */
export type VisitRecordOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order VisitRecords. */
  field: VisitRecordOrderField;
};

/** Properties by which VisitRecord connections can be ordered. */
export enum VisitRecordOrderField {
  CreatedAt = 'CREATED_AT',
  Date = 'DATE'
}

/**
 * VisitRecordWhereInput is used for filtering VisitRecord objects.
 * Input was generated by ent.
 */
export type VisitRecordWhereInput = {
  and?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** comm_content field predicates */
  commContent?: InputMaybe<Scalars['String']['input']>;
  commContentContains?: InputMaybe<Scalars['String']['input']>;
  commContentContainsFold?: InputMaybe<Scalars['String']['input']>;
  commContentEqualFold?: InputMaybe<Scalars['String']['input']>;
  commContentGT?: InputMaybe<Scalars['String']['input']>;
  commContentGTE?: InputMaybe<Scalars['String']['input']>;
  commContentHasPrefix?: InputMaybe<Scalars['String']['input']>;
  commContentHasSuffix?: InputMaybe<Scalars['String']['input']>;
  commContentIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commContentLT?: InputMaybe<Scalars['String']['input']>;
  commContentLTE?: InputMaybe<Scalars['String']['input']>;
  commContentNEQ?: InputMaybe<Scalars['String']['input']>;
  commContentNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** comm_people field predicates */
  commPeople?: InputMaybe<Scalars['String']['input']>;
  commPeopleContains?: InputMaybe<Scalars['String']['input']>;
  commPeopleContainsFold?: InputMaybe<Scalars['String']['input']>;
  commPeopleEqualFold?: InputMaybe<Scalars['String']['input']>;
  commPeopleGT?: InputMaybe<Scalars['String']['input']>;
  commPeopleGTE?: InputMaybe<Scalars['String']['input']>;
  commPeopleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  commPeopleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  commPeopleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commPeopleLT?: InputMaybe<Scalars['String']['input']>;
  commPeopleLTE?: InputMaybe<Scalars['String']['input']>;
  commPeopleNEQ?: InputMaybe<Scalars['String']['input']>;
  commPeopleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customer_id field predicates */
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerIDContains?: InputMaybe<Scalars['ID']['input']>;
  customerIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDGT?: InputMaybe<Scalars['ID']['input']>;
  customerIDGTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  customerIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDLT?: InputMaybe<Scalars['ID']['input']>;
  customerIDLTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  customerIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** date field predicates */
  date?: InputMaybe<Scalars['Time']['input']>;
  dateGT?: InputMaybe<Scalars['Time']['input']>;
  dateGTE?: InputMaybe<Scalars['Time']['input']>;
  dateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  dateLT?: InputMaybe<Scalars['Time']['input']>;
  dateLTE?: InputMaybe<Scalars['Time']['input']>;
  dateNEQ?: InputMaybe<Scalars['Time']['input']>;
  dateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customer edge predicates */
  hasCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomerWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** followUpBys edge predicates */
  hasFollowUpBys?: InputMaybe<Scalars['Boolean']['input']>;
  hasFollowUpBysWith?: InputMaybe<Array<UserWhereInput>>;
  /** tender edge predicates */
  hasTender?: InputMaybe<Scalars['Boolean']['input']>;
  hasTenderWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** next_step field predicates */
  nextStep?: InputMaybe<Scalars['String']['input']>;
  nextStepContains?: InputMaybe<Scalars['String']['input']>;
  nextStepContainsFold?: InputMaybe<Scalars['String']['input']>;
  nextStepEqualFold?: InputMaybe<Scalars['String']['input']>;
  nextStepGT?: InputMaybe<Scalars['String']['input']>;
  nextStepGTE?: InputMaybe<Scalars['String']['input']>;
  nextStepHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nextStepHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nextStepIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nextStepIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  nextStepLT?: InputMaybe<Scalars['String']['input']>;
  nextStepLTE?: InputMaybe<Scalars['String']['input']>;
  nextStepNEQ?: InputMaybe<Scalars['String']['input']>;
  nextStepNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nextStepNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<VisitRecordWhereInput>;
  or?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** tender_id field predicates */
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  tenderIDContains?: InputMaybe<Scalars['ID']['input']>;
  tenderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  tenderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  tenderIDGT?: InputMaybe<Scalars['ID']['input']>;
  tenderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  tenderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  tenderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  tenderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderIDLT?: InputMaybe<Scalars['ID']['input']>;
  tenderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  tenderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  tenderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** visit_type field predicates */
  visitType?: InputMaybe<Scalars['Int']['input']>;
  visitTypeGT?: InputMaybe<Scalars['Int']['input']>;
  visitTypeGTE?: InputMaybe<Scalars['Int']['input']>;
  visitTypeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  visitTypeLT?: InputMaybe<Scalars['Int']['input']>;
  visitTypeLTE?: InputMaybe<Scalars['Int']['input']>;
  visitTypeNEQ?: InputMaybe<Scalars['Int']['input']>;
  visitTypeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type UseCreatePlotMutationMutationVariables = Exact<{
  input: CreatePlotInput;
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']> | Scalars['Float']['input']> | Array<Scalars['Float']['input']> | Scalars['Float']['input']>;
  connections: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type UseCreatePlotMutationMutation = { __typename?: 'Mutation', createPlot: { __typename?: 'PlotConnection', edges?: Array<{ __typename?: 'PlotEdge', node?: { __typename?: 'Plot', id: string, name: string, geoBounds?: Array<Array<number>> | null, colorHex: string } | null } | null> | null } };

export type UseCreateUserMutationMutationVariables = Exact<{
  input: CreateUserInput;
  connections: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type UseCreateUserMutationMutation = { __typename?: 'Mutation', createUser: { __typename?: 'UserConnection', edges?: Array<{ __typename?: 'UserEdge', node?: { __typename?: 'User', id: string, name?: string | null, email?: string | null, username?: string | null, openID: string, avatarURL?: string | null, disabled: boolean, isAdmin: boolean, hasMapAccess: boolean, hasEditAccess: boolean, areas: { __typename?: 'AreaConnection', edges?: Array<{ __typename?: 'AreaEdge', node?: { __typename?: 'Area', id: string, name: string } | null } | null> | null }, projects: { __typename?: 'ProjectConnection', edges?: Array<{ __typename?: 'ProjectEdge', node?: { __typename?: 'Project', id: string, code: string } | null } | null> | null } } | null } | null> | null } };

export type UseDeleteUserMutationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  connections: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type UseDeleteUserMutationMutation = { __typename?: 'Mutation', deleteUser: { __typename?: 'User', id: string } };

export type UseUpdateCompetitorMutationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: UpdateCompetitorInput;
}>;


export type UseUpdateCompetitorMutationMutation = { __typename?: 'Mutation', updateCompetitor: { __typename?: 'Competitor', id: string, shortName: string, name: string } };

export type UseUpdateProjectMutationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: UpdateProjectInput;
}>;


export type UseUpdateProjectMutationMutation = { __typename?: 'Mutation', updateProject: { __typename?: 'Project', fsDate?: any | null, opDate?: any | null } };

export type UseUpdateUserMutationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
}>;


export type UseUpdateUserMutationMutation = { __typename?: 'Mutation', updateUser: { __typename?: 'User', id: string, name?: string | null, email?: string | null, username?: string | null, openID: string, avatarURL?: string | null, disabled: boolean, isSuperAdmin: boolean, isAdmin: boolean, isCeo: boolean, hasMapAccess: boolean, hasEditAccess: boolean, areas: { __typename?: 'AreaConnection', edges?: Array<{ __typename?: 'AreaEdge', node?: { __typename?: 'Area', id: string, name: string } | null } | null> | null }, projects: { __typename?: 'ProjectConnection', edges?: Array<{ __typename?: 'ProjectEdge', node?: { __typename?: 'Project', id: string, code: string } | null } | null> | null } } };

export class TypedDocumentString<TResult, TVariables>
  extends String
  implements DocumentTypeDecoration<TResult, TVariables>
{
  __apiType?: DocumentTypeDecoration<TResult, TVariables>['__apiType'];

  constructor(private value: string, public __meta__?: Record<string, any> | undefined) {
    super(value);
  }

  toString(): string & DocumentTypeDecoration<TResult, TVariables> {
    return this.value;
  }
}

export const UseCreatePlotMutationDocument = new TypedDocumentString(`
    mutation useCreatePlotMutation($input: CreatePlotInput!, $geoBounds: [[Float!]!], $connections: [ID!]!) {
  createPlot(input: $input, geoBounds: $geoBounds) {
    edges @prependNode(connections: $connections, edgeTypeName: "PlotEdge") {
      node {
        id
        name
        geoBounds
        colorHex
      }
    }
  }
}
    `) as unknown as TypedDocumentString<UseCreatePlotMutationMutation, UseCreatePlotMutationMutationVariables>;
export const UseCreateUserMutationDocument = new TypedDocumentString(`
    mutation useCreateUserMutation($input: CreateUserInput!, $connections: [ID!]!) {
  createUser(input: $input) {
    edges @appendEdge(connections: $connections) {
      node {
        id
        name
        email
        username
        openID
        avatarURL
        disabled
        areas {
          edges {
            node {
              id
              name
            }
          }
        }
        projects {
          edges {
            node {
              id
              code
            }
          }
        }
        isAdmin
        hasMapAccess
        hasEditAccess
      }
    }
  }
}
    `) as unknown as TypedDocumentString<UseCreateUserMutationMutation, UseCreateUserMutationMutationVariables>;
export const UseDeleteUserMutationDocument = new TypedDocumentString(`
    mutation useDeleteUserMutation($id: ID!, $connections: [ID!]!) {
  deleteUser(id: $id) {
    id @deleteEdge(connections: $connections)
  }
}
    `) as unknown as TypedDocumentString<UseDeleteUserMutationMutation, UseDeleteUserMutationMutationVariables>;
export const UseUpdateCompetitorMutationDocument = new TypedDocumentString(`
    mutation useUpdateCompetitorMutation($id: ID!, $input: UpdateCompetitorInput!) {
  updateCompetitor(id: $id, input: $input) {
    id
    shortName
    name
  }
}
    `) as unknown as TypedDocumentString<UseUpdateCompetitorMutationMutation, UseUpdateCompetitorMutationMutationVariables>;
export const UseUpdateProjectMutationDocument = new TypedDocumentString(`
    mutation useUpdateProjectMutation($id: ID!, $input: UpdateProjectInput!) {
  updateProject(id: $id, input: $input) {
    fsDate
    opDate
  }
}
    `) as unknown as TypedDocumentString<UseUpdateProjectMutationMutation, UseUpdateProjectMutationMutationVariables>;
export const UseUpdateUserMutationDocument = new TypedDocumentString(`
    mutation useUpdateUserMutation($id: ID!, $input: UpdateUserInput!) {
  updateUser(id: $id, input: $input) {
    id
    name
    email
    username
    openID
    avatarURL
    disabled
    areas {
      edges {
        node {
          id
          name
        }
      }
    }
    projects(where: {isFinishedNEQ: true}, orderBy: {field: CODE}) {
      edges {
        node {
          id
          code
        }
      }
    }
    isSuperAdmin
    isAdmin
    isCeo
    hasMapAccess
    hasEditAccess
  }
}
    `) as unknown as TypedDocumentString<UseUpdateUserMutationMutation, UseUpdateUserMutationMutationVariables>;