/* eslint-disable */
import { DocumentTypeDecoration } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  Time: { input: any; output: any; }
};

export type Area = Node & {
  __typename?: 'Area';
  center?: Maybe<GeoJson>;
  code: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  customers: CustomerConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provinces: ProvinceConnection;
  sales: UserConnection;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type AreaCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type AreaProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};


export type AreaSalesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};


export type AreaTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type AreaConnection = {
  __typename?: 'AreaConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AreaEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type AreaEdge = {
  __typename?: 'AreaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Area>;
};

/** Ordering options for Area connections */
export type AreaOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Areas. */
  field: AreaOrderField;
};

/** Properties by which Area connections can be ordered. */
export enum AreaOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * AreaWhereInput is used for filtering Area objects.
 * Input was generated by ent.
 */
export type AreaWhereInput = {
  and?: InputMaybe<Array<AreaWhereInput>>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customers edge predicates */
  hasCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomersWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** provinces edge predicates */
  hasProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvincesWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** sales edge predicates */
  hasSales?: InputMaybe<Scalars['Boolean']['input']>;
  hasSalesWith?: InputMaybe<Array<UserWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<AreaWhereInput>;
  or?: InputMaybe<Array<AreaWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type City = Node & {
  __typename?: 'City';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  createdAt: Scalars['Time']['output'];
  districts: DistrictConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provCode: Scalars['Int']['output'];
  province: Province;
  provinceID: Scalars['ID']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type CityDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type CityTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type CityConnection = {
  __typename?: 'CityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CityEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CityEdge = {
  __typename?: 'CityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<City>;
};

/** Ordering options for City connections */
export type CityOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Cities. */
  field: CityOrderField;
};

/** Properties by which City connections can be ordered. */
export enum CityOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * CityWhereInput is used for filtering City objects.
 * Input was generated by ent.
 */
export type CityWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<CityWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** districts edge predicates */
  hasDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictsWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CityWhereInput>;
  or?: InputMaybe<Array<CityWhereInput>>;
  /** prov_code field predicates */
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provCodeGT?: InputMaybe<Scalars['Int']['input']>;
  provCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  provCodeLT?: InputMaybe<Scalars['Int']['input']>;
  provCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  provCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Country = Node & {
  __typename?: 'Country';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  provinces: ProvinceConnection;
  updatedAt: Scalars['Time']['output'];
};


export type CountryProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};

/** A connection to a list of items. */
export type CountryConnection = {
  __typename?: 'CountryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CountryEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CountryEdge = {
  __typename?: 'CountryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Country>;
};

/** Ordering options for Country connections */
export type CountryOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Countries. */
  field: CountryOrderField;
};

/** Properties by which Country connections can be ordered. */
export enum CountryOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * CountryWhereInput is used for filtering Country objects.
 * Input was generated by ent.
 */
export type CountryWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<CountryWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** provinces edge predicates */
  hasProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvincesWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CountryWhereInput>;
  or?: InputMaybe<Array<CountryWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * CreateAreaInput is used for create Area object.
 * Input was generated by ent.
 */
export type CreateAreaInput = {
  code: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  provinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  saleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateCityInput is used for create City object.
 * Input was generated by ent.
 */
export type CreateCityInput = {
  adcode: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  provCode: Scalars['Int']['input'];
  provinceID: Scalars['ID']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateCountryInput is used for create Country object.
 * Input was generated by ent.
 */
export type CreateCountryInput = {
  adcode: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  name: Scalars['String']['input'];
  provinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateCustomerInput is used for create Customer object.
 * Input was generated by ent.
 */
export type CreateCustomerInput = {
  areaID: Scalars['ID']['input'];
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdByID: Scalars['ID']['input'];
  industry: Scalars['Int']['input'];
  name: Scalars['String']['input'];
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  salesID?: InputMaybe<Scalars['ID']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateDistrictInput is used for create District object.
 * Input was generated by ent.
 */
export type CreateDistrictInput = {
  adcode: Scalars['Int']['input'];
  cityCode: Scalars['Int']['input'];
  cityID?: InputMaybe<Scalars['ID']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  name: Scalars['String']['input'];
  plotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  provCode: Scalars['Int']['input'];
  provinceID: Scalars['ID']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreatePlotInput is used for create Plot object.
 * Input was generated by ent.
 */
export type CreatePlotInput = {
  colorHex: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtID: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateProvinceInput is used for create Province object.
 * Input was generated by ent.
 */
export type CreateProvinceInput = {
  adcode: Scalars['Int']['input'];
  areaID?: InputMaybe<Scalars['ID']['input']>;
  cityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  countryID: Scalars['ID']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  districtIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateTenderInput is used for create Tender object.
 * Input was generated by ent.
 */
export type CreateTenderInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  areaID: Scalars['ID']['input'];
  attachements?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  code: Scalars['String']['input'];
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractor?: InputMaybe<Scalars['String']['input']>;
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdByID: Scalars['ID']['input'];
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  customerID: Scalars['ID']['input'];
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  designUnit?: InputMaybe<Scalars['String']['input']>;
  discoveryDate: Scalars['Time']['input'];
  districtID: Scalars['ID']['input'];
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  finderID: Scalars['ID']['input'];
  followingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<Array<Scalars['String']['input']>>;
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectType?: InputMaybe<Scalars['String']['input']>;
  provinceID: Scalars['ID']['input'];
  remark?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  areaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  avatarURL: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  email: Scalars['String']['input'];
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isLeader?: InputMaybe<Scalars['Boolean']['input']>;
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  openID: Scalars['String']['input'];
  teamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  username: Scalars['String']['input'];
  visitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateVisitRecordInput is used for create VisitRecord object.
 * Input was generated by ent.
 */
export type CreateVisitRecordInput = {
  commContent: Scalars['String']['input'];
  commPeople: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  date: Scalars['Time']['input'];
  followupbyIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  nextStep?: InputMaybe<Scalars['String']['input']>;
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitType?: InputMaybe<Scalars['Int']['input']>;
};

export type Customer = Node & {
  __typename?: 'Customer';
  area: Area;
  areaID: Scalars['ID']['output'];
  contactPerson?: Maybe<Scalars['String']['output']>;
  contactPersonEmail?: Maybe<Scalars['String']['output']>;
  contactPersonPhone?: Maybe<Scalars['String']['output']>;
  contactPersonPosition?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  createdBy: User;
  createdByID: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  industry: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  ownerType?: Maybe<Scalars['Int']['output']>;
  sales?: Maybe<User>;
  salesID?: Maybe<Scalars['ID']['output']>;
  size?: Maybe<Scalars['Int']['output']>;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
  visitRecords: VisitRecordConnection;
};


export type CustomerTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};


export type CustomerVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CustomerEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Customer>;
};

/** Ordering options for Customer connections */
export type CustomerOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Customers. */
  field: CustomerOrderField;
};

/** Properties by which Customer connections can be ordered. */
export enum CustomerOrderField {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME',
  OwnerType = 'OWNER_TYPE'
}

/**
 * CustomerWhereInput is used for filtering Customer objects.
 * Input was generated by ent.
 */
export type CustomerWhereInput = {
  and?: InputMaybe<Array<CustomerWhereInput>>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** contact_person field predicates */
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonContainsFold?: InputMaybe<Scalars['String']['input']>;
  /** contact_person_email field predicates */
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonEmailIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonEmailLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonEmailNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contact_person_phone field predicates */
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPhoneIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonPhoneLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhoneNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPhoneNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contact_person_position field predicates */
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionContains?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionContainsFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionEqualFold?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionGT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionGTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPositionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contactPersonPositionLT?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionLTE?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionNEQ?: InputMaybe<Scalars['String']['input']>;
  contactPersonPositionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contactPersonPositionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** created_by_id field predicates */
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContains?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDLT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDLTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** created_by edge predicates */
  hasCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedByWith?: InputMaybe<Array<UserWhereInput>>;
  /** sales edge predicates */
  hasSales?: InputMaybe<Scalars['Boolean']['input']>;
  hasSalesWith?: InputMaybe<Array<UserWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** industry field predicates */
  industry?: InputMaybe<Scalars['Int']['input']>;
  industryGT?: InputMaybe<Scalars['Int']['input']>;
  industryGTE?: InputMaybe<Scalars['Int']['input']>;
  industryIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  industryLT?: InputMaybe<Scalars['Int']['input']>;
  industryLTE?: InputMaybe<Scalars['Int']['input']>;
  industryNEQ?: InputMaybe<Scalars['Int']['input']>;
  industryNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CustomerWhereInput>;
  or?: InputMaybe<Array<CustomerWhereInput>>;
  /** owner_type field predicates */
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeGT?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeGTE?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerTypeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerTypeLT?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeLTE?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeNEQ?: InputMaybe<Scalars['Int']['input']>;
  ownerTypeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  ownerTypeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** sales_id field predicates */
  salesID?: InputMaybe<Scalars['ID']['input']>;
  salesIDContains?: InputMaybe<Scalars['ID']['input']>;
  salesIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  salesIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  salesIDGT?: InputMaybe<Scalars['ID']['input']>;
  salesIDGTE?: InputMaybe<Scalars['ID']['input']>;
  salesIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  salesIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  salesIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  salesIDLT?: InputMaybe<Scalars['ID']['input']>;
  salesIDLTE?: InputMaybe<Scalars['ID']['input']>;
  salesIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  salesIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size field predicates */
  size?: InputMaybe<Scalars['Int']['input']>;
  sizeGT?: InputMaybe<Scalars['Int']['input']>;
  sizeGTE?: InputMaybe<Scalars['Int']['input']>;
  sizeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeLT?: InputMaybe<Scalars['Int']['input']>;
  sizeLTE?: InputMaybe<Scalars['Int']['input']>;
  sizeNEQ?: InputMaybe<Scalars['Int']['input']>;
  sizeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type District = Node & {
  __typename?: 'District';
  adcode: Scalars['Int']['output'];
  center?: Maybe<GeoJson>;
  city?: Maybe<City>;
  cityCode: Scalars['Int']['output'];
  cityID?: Maybe<Scalars['ID']['output']>;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  plots: PlotConnection;
  provCode: Scalars['Int']['output'];
  province: Province;
  provinceID: Scalars['ID']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type DistrictPlotsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlotOrder>;
  where?: InputMaybe<PlotWhereInput>;
};


export type DistrictTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type DistrictConnection = {
  __typename?: 'DistrictConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DistrictEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type DistrictEdge = {
  __typename?: 'DistrictEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<District>;
};

/** Ordering options for District connections */
export type DistrictOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Districts. */
  field: DistrictOrderField;
};

/** Properties by which District connections can be ordered. */
export enum DistrictOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * DistrictWhereInput is used for filtering District objects.
 * Input was generated by ent.
 */
export type DistrictWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<DistrictWhereInput>>;
  /** city_code field predicates */
  cityCode?: InputMaybe<Scalars['Int']['input']>;
  cityCodeGT?: InputMaybe<Scalars['Int']['input']>;
  cityCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  cityCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  cityCodeLT?: InputMaybe<Scalars['Int']['input']>;
  cityCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  cityCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  cityCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** city_id field predicates */
  cityID?: InputMaybe<Scalars['ID']['input']>;
  cityIDContains?: InputMaybe<Scalars['ID']['input']>;
  cityIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDGT?: InputMaybe<Scalars['ID']['input']>;
  cityIDGTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  cityIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cityIDLT?: InputMaybe<Scalars['ID']['input']>;
  cityIDLTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  cityIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** city edge predicates */
  hasCity?: InputMaybe<Scalars['Boolean']['input']>;
  hasCityWith?: InputMaybe<Array<CityWhereInput>>;
  /** plots edge predicates */
  hasPlots?: InputMaybe<Scalars['Boolean']['input']>;
  hasPlotsWith?: InputMaybe<Array<PlotWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<DistrictWhereInput>;
  or?: InputMaybe<Array<DistrictWhereInput>>;
  /** prov_code field predicates */
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provCodeGT?: InputMaybe<Scalars['Int']['input']>;
  provCodeGTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  provCodeLT?: InputMaybe<Scalars['Int']['input']>;
  provCodeLTE?: InputMaybe<Scalars['Int']['input']>;
  provCodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  provCodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type GeoJson = {
  __typename?: 'GeoJson';
  coordinates: Array<Scalars['Float']['output']>;
  type: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createArea: AreaConnection;
  createPlot: PlotConnection;
  createTender: TenderConnection;
  createUser: UserConnection;
  deletePlot: Plot;
  deleteTender: Tender;
  updateArea: Area;
  updatePlot: Plot;
  updateTender: Tender;
  updateUser: User;
};


export type MutationCreateAreaArgs = {
  input: CreateAreaInput;
};


export type MutationCreatePlotArgs = {
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  input: CreatePlotInput;
};


export type MutationCreateTenderArgs = {
  attachmentFileNames: Array<Scalars['String']['input']>;
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  imageFileNames: Array<Scalars['String']['input']>;
  input: CreateTenderInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeletePlotArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTenderArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateAreaArgs = {
  id: Scalars['ID']['input'];
  input: UpdateAreaInput;
};


export type MutationUpdatePlotArgs = {
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  id: Scalars['ID']['input'];
  input: UpdatePlotInput;
};


export type MutationUpdateTenderArgs = {
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']>>>;
  id: Scalars['ID']['input'];
  input: UpdateTenderInput;
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Plot = Node & {
  __typename?: 'Plot';
  colorHex: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  district: District;
  districtID: Scalars['ID']['output'];
  geoBounds?: Maybe<Array<Array<Scalars['Float']['output']>>>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type PlotConnection = {
  __typename?: 'PlotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlotEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PlotEdge = {
  __typename?: 'PlotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Plot>;
};

/** Ordering options for Plot connections */
export type PlotOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Plots. */
  field: PlotOrderField;
};

/** Properties by which Plot connections can be ordered. */
export enum PlotOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * PlotWhereInput is used for filtering Plot objects.
 * Input was generated by ent.
 */
export type PlotWhereInput = {
  and?: InputMaybe<Array<PlotWhereInput>>;
  /** color_hex field predicates */
  colorHex?: InputMaybe<Scalars['String']['input']>;
  colorHexContains?: InputMaybe<Scalars['String']['input']>;
  colorHexContainsFold?: InputMaybe<Scalars['String']['input']>;
  colorHexEqualFold?: InputMaybe<Scalars['String']['input']>;
  colorHexGT?: InputMaybe<Scalars['String']['input']>;
  colorHexGTE?: InputMaybe<Scalars['String']['input']>;
  colorHexHasPrefix?: InputMaybe<Scalars['String']['input']>;
  colorHexHasSuffix?: InputMaybe<Scalars['String']['input']>;
  colorHexIn?: InputMaybe<Array<Scalars['String']['input']>>;
  colorHexLT?: InputMaybe<Scalars['String']['input']>;
  colorHexLTE?: InputMaybe<Scalars['String']['input']>;
  colorHexNEQ?: InputMaybe<Scalars['String']['input']>;
  colorHexNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** district_id field predicates */
  districtID?: InputMaybe<Scalars['ID']['input']>;
  districtIDContains?: InputMaybe<Scalars['ID']['input']>;
  districtIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDGT?: InputMaybe<Scalars['ID']['input']>;
  districtIDGTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  districtIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  districtIDLT?: InputMaybe<Scalars['ID']['input']>;
  districtIDLTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  districtIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** district edge predicates */
  hasDistrict?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<PlotWhereInput>;
  or?: InputMaybe<Array<PlotWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Province = Node & {
  __typename?: 'Province';
  adcode: Scalars['Int']['output'];
  area?: Maybe<Area>;
  areaID?: Maybe<Scalars['ID']['output']>;
  center?: Maybe<GeoJson>;
  cities: CityConnection;
  country: Country;
  countryID: Scalars['ID']['output'];
  createdAt: Scalars['Time']['output'];
  districts: DistrictConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
};


export type ProvinceCitiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CityOrder>;
  where?: InputMaybe<CityWhereInput>;
};


export type ProvinceDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type ProvinceTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};

/** A connection to a list of items. */
export type ProvinceConnection = {
  __typename?: 'ProvinceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProvinceEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ProvinceEdge = {
  __typename?: 'ProvinceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Province>;
};

/** Ordering options for Province connections */
export type ProvinceOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Provinces. */
  field: ProvinceOrderField;
};

/** Properties by which Province connections can be ordered. */
export enum ProvinceOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * ProvinceWhereInput is used for filtering Province objects.
 * Input was generated by ent.
 */
export type ProvinceWhereInput = {
  /** adcode field predicates */
  adcode?: InputMaybe<Scalars['Int']['input']>;
  adcodeGT?: InputMaybe<Scalars['Int']['input']>;
  adcodeGTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  adcodeLT?: InputMaybe<Scalars['Int']['input']>;
  adcodeLTE?: InputMaybe<Scalars['Int']['input']>;
  adcodeNEQ?: InputMaybe<Scalars['Int']['input']>;
  adcodeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<ProvinceWhereInput>>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** country_id field predicates */
  countryID?: InputMaybe<Scalars['ID']['input']>;
  countryIDContains?: InputMaybe<Scalars['ID']['input']>;
  countryIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  countryIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  countryIDGT?: InputMaybe<Scalars['ID']['input']>;
  countryIDGTE?: InputMaybe<Scalars['ID']['input']>;
  countryIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  countryIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  countryIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  countryIDLT?: InputMaybe<Scalars['ID']['input']>;
  countryIDLTE?: InputMaybe<Scalars['ID']['input']>;
  countryIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  countryIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** cities edge predicates */
  hasCities?: InputMaybe<Scalars['Boolean']['input']>;
  hasCitiesWith?: InputMaybe<Array<CityWhereInput>>;
  /** country edge predicates */
  hasCountry?: InputMaybe<Scalars['Boolean']['input']>;
  hasCountryWith?: InputMaybe<Array<CountryWhereInput>>;
  /** districts edge predicates */
  hasDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictsWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<ProvinceWhereInput>;
  or?: InputMaybe<Array<ProvinceWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Query = {
  __typename?: 'Query';
  areas: AreaConnection;
  cities: CityConnection;
  countries: CountryConnection;
  customers: CustomerConnection;
  districts: DistrictConnection;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  plots: PlotConnection;
  provinces: ProvinceConnection;
  session: Session;
  tenders: TenderConnection;
  users: UserConnection;
  visitRecords: VisitRecordConnection;
};


export type QueryAreasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AreaOrder>;
  where?: InputMaybe<AreaWhereInput>;
};


export type QueryCitiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CityOrder>;
  where?: InputMaybe<CityWhereInput>;
};


export type QueryCountriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<CountryOrder>;
  where?: InputMaybe<CountryWhereInput>;
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type QueryDistrictsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<DistrictOrder>;
  where?: InputMaybe<DistrictWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryPlotsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PlotOrder>;
  where?: InputMaybe<PlotWhereInput>;
};


export type QueryProvincesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProvinceOrder>;
  where?: InputMaybe<ProvinceWhereInput>;
};


export type QueryTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

export type Session = {
  __typename?: 'Session';
  avatarUrl: Scalars['String']['output'];
  email: Scalars['String']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isLeader: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  userId: Scalars['String']['output'];
  username: Scalars['String']['output'];
};

export type Tender = Node & {
  __typename?: 'Tender';
  address?: Maybe<Scalars['String']['output']>;
  area: Area;
  areaID: Scalars['ID']['output'];
  attachements?: Maybe<Array<Scalars['String']['output']>>;
  biddingDate?: Maybe<Scalars['Time']['output']>;
  biddingInstructions?: Maybe<Scalars['String']['output']>;
  city?: Maybe<City>;
  cityID?: Maybe<Scalars['ID']['output']>;
  code: Scalars['String']['output'];
  competitivePartnershipRating?: Maybe<Scalars['Int']['output']>;
  competitivePartnershipRatingOverview?: Maybe<Scalars['String']['output']>;
  competitorSituations?: Maybe<Scalars['String']['output']>;
  consultingFirm?: Maybe<Scalars['String']['output']>;
  contractForm?: Maybe<Scalars['String']['output']>;
  contractor?: Maybe<Scalars['String']['output']>;
  costEngineer?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  createdBy: User;
  createdByID: Scalars['ID']['output'];
  creditAndPaymentRating?: Maybe<Scalars['Int']['output']>;
  creditAndPaymentRatingOverview?: Maybe<Scalars['String']['output']>;
  customer: Customer;
  customerID: Scalars['ID']['output'];
  customerRelationshipRating?: Maybe<Scalars['Int']['output']>;
  customerRelationshipRatingOverview?: Maybe<Scalars['String']['output']>;
  designUnit?: Maybe<Scalars['String']['output']>;
  discoveryDate: Scalars['Time']['output'];
  district: District;
  districtID: Scalars['ID']['output'];
  estimatedAmount?: Maybe<Scalars['Float']['output']>;
  estimatedProjectEndDate?: Maybe<Scalars['Time']['output']>;
  estimatedProjectStartDate?: Maybe<Scalars['Time']['output']>;
  facadeConsultant?: Maybe<Scalars['String']['output']>;
  finder: User;
  finderID: Scalars['ID']['output'];
  followingSales?: Maybe<Array<User>>;
  fullAddress?: Maybe<Scalars['String']['output']>;
  geoBounds?: Maybe<Array<Maybe<Array<Maybe<Scalars['Float']['output']>>>>>;
  geoCoordinate?: Maybe<GeoJson>;
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Scalars['String']['output']>>;
  keyProject: Scalars['Boolean']['output'];
  managementCompany?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  ownerSituations?: Maybe<Scalars['String']['output']>;
  prepareToBid: Scalars['Boolean']['output'];
  projectCode?: Maybe<Scalars['String']['output']>;
  projectDefinition?: Maybe<Scalars['String']['output']>;
  projectType?: Maybe<Scalars['String']['output']>;
  province: Province;
  provinceID: Scalars['ID']['output'];
  remark?: Maybe<Scalars['String']['output']>;
  sizeAndValueRating?: Maybe<Scalars['Int']['output']>;
  sizeAndValueRatingOverview?: Maybe<Scalars['String']['output']>;
  status: Scalars['Int']['output'];
  tenderDate?: Maybe<Scalars['Time']['output']>;
  tenderForm?: Maybe<Scalars['String']['output']>;
  tenderSituations?: Maybe<Scalars['String']['output']>;
  tenderingAgency?: Maybe<Scalars['String']['output']>;
  timeLimitRating?: Maybe<Scalars['Int']['output']>;
  timeLimitRatingOverview?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Time']['output'];
  visitRecords: VisitRecordConnection;
};


export type TenderVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type TenderConnection = {
  __typename?: 'TenderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TenderEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type TenderEdge = {
  __typename?: 'TenderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Tender>;
};

/** Ordering options for Tender connections */
export type TenderOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Tenders. */
  field: TenderOrderField;
};

/** Properties by which Tender connections can be ordered. */
export enum TenderOrderField {
  CreatedAt = 'CREATED_AT',
  Name = 'NAME'
}

/**
 * TenderWhereInput is used for filtering Tender objects.
 * Input was generated by ent.
 */
export type TenderWhereInput = {
  /** address field predicates */
  address?: InputMaybe<Scalars['String']['input']>;
  addressContains?: InputMaybe<Scalars['String']['input']>;
  addressContainsFold?: InputMaybe<Scalars['String']['input']>;
  addressEqualFold?: InputMaybe<Scalars['String']['input']>;
  addressGT?: InputMaybe<Scalars['String']['input']>;
  addressGTE?: InputMaybe<Scalars['String']['input']>;
  addressHasPrefix?: InputMaybe<Scalars['String']['input']>;
  addressHasSuffix?: InputMaybe<Scalars['String']['input']>;
  addressIn?: InputMaybe<Array<Scalars['String']['input']>>;
  addressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  addressLT?: InputMaybe<Scalars['String']['input']>;
  addressLTE?: InputMaybe<Scalars['String']['input']>;
  addressNEQ?: InputMaybe<Scalars['String']['input']>;
  addressNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  addressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<TenderWhereInput>>;
  /** area_id field predicates */
  areaID?: InputMaybe<Scalars['ID']['input']>;
  areaIDContains?: InputMaybe<Scalars['ID']['input']>;
  areaIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  areaIDGT?: InputMaybe<Scalars['ID']['input']>;
  areaIDGTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  areaIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  areaIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaIDLT?: InputMaybe<Scalars['ID']['input']>;
  areaIDLTE?: InputMaybe<Scalars['ID']['input']>;
  areaIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  areaIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** bidding_date field predicates */
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingDateGT?: InputMaybe<Scalars['Time']['input']>;
  biddingDateGTE?: InputMaybe<Scalars['Time']['input']>;
  biddingDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  biddingDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  biddingDateLT?: InputMaybe<Scalars['Time']['input']>;
  biddingDateLTE?: InputMaybe<Scalars['Time']['input']>;
  biddingDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  biddingDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  biddingDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** bidding_instructions field predicates */
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsContains?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsContainsFold?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsEqualFold?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsGT?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsGTE?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingInstructionsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  biddingInstructionsLT?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsLTE?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsNEQ?: InputMaybe<Scalars['String']['input']>;
  biddingInstructionsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingInstructionsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** city_id field predicates */
  cityID?: InputMaybe<Scalars['ID']['input']>;
  cityIDContains?: InputMaybe<Scalars['ID']['input']>;
  cityIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  cityIDGT?: InputMaybe<Scalars['ID']['input']>;
  cityIDGTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  cityIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  cityIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  cityIDLT?: InputMaybe<Scalars['ID']['input']>;
  cityIDLTE?: InputMaybe<Scalars['ID']['input']>;
  cityIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  cityIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** competitive_partnership_rating field predicates */
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingGT?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  competitivePartnershipRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitivePartnershipRatingLT?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  competitivePartnershipRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** competitive_partnership_rating_overview field predicates */
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitivePartnershipRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitivePartnershipRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitivePartnershipRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** competitor_situations field predicates */
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsContains?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsGT?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitorSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  competitorSituationsLT?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  competitorSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  competitorSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** consulting_firm field predicates */
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  consultingFirmContains?: InputMaybe<Scalars['String']['input']>;
  consultingFirmContainsFold?: InputMaybe<Scalars['String']['input']>;
  consultingFirmEqualFold?: InputMaybe<Scalars['String']['input']>;
  consultingFirmGT?: InputMaybe<Scalars['String']['input']>;
  consultingFirmGTE?: InputMaybe<Scalars['String']['input']>;
  consultingFirmHasPrefix?: InputMaybe<Scalars['String']['input']>;
  consultingFirmHasSuffix?: InputMaybe<Scalars['String']['input']>;
  consultingFirmIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultingFirmIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  consultingFirmLT?: InputMaybe<Scalars['String']['input']>;
  consultingFirmLTE?: InputMaybe<Scalars['String']['input']>;
  consultingFirmNEQ?: InputMaybe<Scalars['String']['input']>;
  consultingFirmNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  consultingFirmNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contract_form field predicates */
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractFormContains?: InputMaybe<Scalars['String']['input']>;
  contractFormContainsFold?: InputMaybe<Scalars['String']['input']>;
  contractFormEqualFold?: InputMaybe<Scalars['String']['input']>;
  contractFormGT?: InputMaybe<Scalars['String']['input']>;
  contractFormGTE?: InputMaybe<Scalars['String']['input']>;
  contractFormHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contractFormHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contractFormIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractFormIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractFormLT?: InputMaybe<Scalars['String']['input']>;
  contractFormLTE?: InputMaybe<Scalars['String']['input']>;
  contractFormNEQ?: InputMaybe<Scalars['String']['input']>;
  contractFormNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractFormNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** contractor field predicates */
  contractor?: InputMaybe<Scalars['String']['input']>;
  contractorContains?: InputMaybe<Scalars['String']['input']>;
  contractorContainsFold?: InputMaybe<Scalars['String']['input']>;
  contractorEqualFold?: InputMaybe<Scalars['String']['input']>;
  contractorGT?: InputMaybe<Scalars['String']['input']>;
  contractorGTE?: InputMaybe<Scalars['String']['input']>;
  contractorHasPrefix?: InputMaybe<Scalars['String']['input']>;
  contractorHasSuffix?: InputMaybe<Scalars['String']['input']>;
  contractorIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractorIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  contractorLT?: InputMaybe<Scalars['String']['input']>;
  contractorLTE?: InputMaybe<Scalars['String']['input']>;
  contractorNEQ?: InputMaybe<Scalars['String']['input']>;
  contractorNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  contractorNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** cost_engineer field predicates */
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  costEngineerContains?: InputMaybe<Scalars['String']['input']>;
  costEngineerContainsFold?: InputMaybe<Scalars['String']['input']>;
  costEngineerEqualFold?: InputMaybe<Scalars['String']['input']>;
  costEngineerGT?: InputMaybe<Scalars['String']['input']>;
  costEngineerGTE?: InputMaybe<Scalars['String']['input']>;
  costEngineerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  costEngineerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  costEngineerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  costEngineerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  costEngineerLT?: InputMaybe<Scalars['String']['input']>;
  costEngineerLTE?: InputMaybe<Scalars['String']['input']>;
  costEngineerNEQ?: InputMaybe<Scalars['String']['input']>;
  costEngineerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  costEngineerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** created_by_id field predicates */
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContains?: InputMaybe<Scalars['ID']['input']>;
  createdByIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDGTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  createdByIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  createdByIDLT?: InputMaybe<Scalars['ID']['input']>;
  createdByIDLTE?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  createdByIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** credit_and_payment_rating field predicates */
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingGT?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  creditAndPaymentRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  creditAndPaymentRatingLT?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  creditAndPaymentRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** credit_and_payment_rating_overview field predicates */
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  creditAndPaymentRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  creditAndPaymentRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  creditAndPaymentRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  creditAndPaymentRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** customer_id field predicates */
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerIDContains?: InputMaybe<Scalars['ID']['input']>;
  customerIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDGT?: InputMaybe<Scalars['ID']['input']>;
  customerIDGTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  customerIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDLT?: InputMaybe<Scalars['ID']['input']>;
  customerIDLTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  customerIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** customer_relationship_rating field predicates */
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingGT?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  customerRelationshipRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerRelationshipRatingLT?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  customerRelationshipRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** customer_relationship_rating_overview field predicates */
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  customerRelationshipRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerRelationshipRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  customerRelationshipRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  customerRelationshipRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** design_unit field predicates */
  designUnit?: InputMaybe<Scalars['String']['input']>;
  designUnitContains?: InputMaybe<Scalars['String']['input']>;
  designUnitContainsFold?: InputMaybe<Scalars['String']['input']>;
  designUnitEqualFold?: InputMaybe<Scalars['String']['input']>;
  designUnitGT?: InputMaybe<Scalars['String']['input']>;
  designUnitGTE?: InputMaybe<Scalars['String']['input']>;
  designUnitHasPrefix?: InputMaybe<Scalars['String']['input']>;
  designUnitHasSuffix?: InputMaybe<Scalars['String']['input']>;
  designUnitIn?: InputMaybe<Array<Scalars['String']['input']>>;
  designUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  designUnitLT?: InputMaybe<Scalars['String']['input']>;
  designUnitLTE?: InputMaybe<Scalars['String']['input']>;
  designUnitNEQ?: InputMaybe<Scalars['String']['input']>;
  designUnitNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  designUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** discovery_date field predicates */
  discoveryDate?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateGT?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateGTE?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  discoveryDateLT?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateLTE?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  discoveryDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** district_id field predicates */
  districtID?: InputMaybe<Scalars['ID']['input']>;
  districtIDContains?: InputMaybe<Scalars['ID']['input']>;
  districtIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  districtIDGT?: InputMaybe<Scalars['ID']['input']>;
  districtIDGTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  districtIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  districtIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  districtIDLT?: InputMaybe<Scalars['ID']['input']>;
  districtIDLTE?: InputMaybe<Scalars['ID']['input']>;
  districtIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  districtIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** estimated_amount field predicates */
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountGT?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountGTE?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  estimatedAmountIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedAmountLT?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountLTE?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountNEQ?: InputMaybe<Scalars['Float']['input']>;
  estimatedAmountNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  estimatedAmountNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_project_end_date field predicates */
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateGT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateGTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectEndDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedProjectEndDateLT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateLTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectEndDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectEndDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_project_start_date field predicates */
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateGT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateGTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectStartDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedProjectStartDateLT?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateLTE?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  estimatedProjectStartDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** facade_consultant field predicates */
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantContains?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantContainsFold?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantEqualFold?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantGT?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantGTE?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantHasPrefix?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantHasSuffix?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantIn?: InputMaybe<Array<Scalars['String']['input']>>;
  facadeConsultantIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  facadeConsultantLT?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantLTE?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantNEQ?: InputMaybe<Scalars['String']['input']>;
  facadeConsultantNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  facadeConsultantNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** finder_id field predicates */
  finderID?: InputMaybe<Scalars['ID']['input']>;
  finderIDContains?: InputMaybe<Scalars['ID']['input']>;
  finderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  finderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  finderIDGT?: InputMaybe<Scalars['ID']['input']>;
  finderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  finderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  finderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  finderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  finderIDLT?: InputMaybe<Scalars['ID']['input']>;
  finderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  finderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  finderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** full_address field predicates */
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  fullAddressContains?: InputMaybe<Scalars['String']['input']>;
  fullAddressContainsFold?: InputMaybe<Scalars['String']['input']>;
  fullAddressEqualFold?: InputMaybe<Scalars['String']['input']>;
  fullAddressGT?: InputMaybe<Scalars['String']['input']>;
  fullAddressGTE?: InputMaybe<Scalars['String']['input']>;
  fullAddressHasPrefix?: InputMaybe<Scalars['String']['input']>;
  fullAddressHasSuffix?: InputMaybe<Scalars['String']['input']>;
  fullAddressIn?: InputMaybe<Array<Scalars['String']['input']>>;
  fullAddressIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  fullAddressLT?: InputMaybe<Scalars['String']['input']>;
  fullAddressLTE?: InputMaybe<Scalars['String']['input']>;
  fullAddressNEQ?: InputMaybe<Scalars['String']['input']>;
  fullAddressNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  fullAddressNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** area edge predicates */
  hasArea?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreaWith?: InputMaybe<Array<AreaWhereInput>>;
  /** city edge predicates */
  hasCity?: InputMaybe<Scalars['Boolean']['input']>;
  hasCityWith?: InputMaybe<Array<CityWhereInput>>;
  /** created_by edge predicates */
  hasCreatedBy?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedByWith?: InputMaybe<Array<UserWhereInput>>;
  /** customer edge predicates */
  hasCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomerWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** district edge predicates */
  hasDistrict?: InputMaybe<Scalars['Boolean']['input']>;
  hasDistrictWith?: InputMaybe<Array<DistrictWhereInput>>;
  /** finder edge predicates */
  hasFinder?: InputMaybe<Scalars['Boolean']['input']>;
  hasFinderWith?: InputMaybe<Array<UserWhereInput>>;
  /** following_sales edge predicates */
  hasFollowingSales?: InputMaybe<Scalars['Boolean']['input']>;
  hasFollowingSalesWith?: InputMaybe<Array<UserWhereInput>>;
  /** province edge predicates */
  hasProvince?: InputMaybe<Scalars['Boolean']['input']>;
  hasProvinceWith?: InputMaybe<Array<ProvinceWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** key_project field predicates */
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  keyProjectNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** management_company field predicates */
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  managementCompanyContains?: InputMaybe<Scalars['String']['input']>;
  managementCompanyContainsFold?: InputMaybe<Scalars['String']['input']>;
  managementCompanyEqualFold?: InputMaybe<Scalars['String']['input']>;
  managementCompanyGT?: InputMaybe<Scalars['String']['input']>;
  managementCompanyGTE?: InputMaybe<Scalars['String']['input']>;
  managementCompanyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  managementCompanyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  managementCompanyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managementCompanyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  managementCompanyLT?: InputMaybe<Scalars['String']['input']>;
  managementCompanyLTE?: InputMaybe<Scalars['String']['input']>;
  managementCompanyNEQ?: InputMaybe<Scalars['String']['input']>;
  managementCompanyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  managementCompanyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<TenderWhereInput>;
  or?: InputMaybe<Array<TenderWhereInput>>;
  /** owner_situations field predicates */
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsContains?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsGT?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  ownerSituationsLT?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  ownerSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  ownerSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** prepare_to_bid field predicates */
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  prepareToBidNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_code field predicates */
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectCodeContains?: InputMaybe<Scalars['String']['input']>;
  projectCodeContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectCodeEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectCodeGT?: InputMaybe<Scalars['String']['input']>;
  projectCodeGTE?: InputMaybe<Scalars['String']['input']>;
  projectCodeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectCodeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectCodeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectCodeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectCodeLT?: InputMaybe<Scalars['String']['input']>;
  projectCodeLTE?: InputMaybe<Scalars['String']['input']>;
  projectCodeNEQ?: InputMaybe<Scalars['String']['input']>;
  projectCodeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectCodeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_definition field predicates */
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionContains?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionGT?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionGTE?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectDefinitionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectDefinitionLT?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionLTE?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionNEQ?: InputMaybe<Scalars['String']['input']>;
  projectDefinitionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectDefinitionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** project_type field predicates */
  projectType?: InputMaybe<Scalars['String']['input']>;
  projectTypeContains?: InputMaybe<Scalars['String']['input']>;
  projectTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  projectTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  projectTypeGT?: InputMaybe<Scalars['String']['input']>;
  projectTypeGTE?: InputMaybe<Scalars['String']['input']>;
  projectTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  projectTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  projectTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectTypeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  projectTypeLT?: InputMaybe<Scalars['String']['input']>;
  projectTypeLTE?: InputMaybe<Scalars['String']['input']>;
  projectTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  projectTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  projectTypeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** province_id field predicates */
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContains?: InputMaybe<Scalars['ID']['input']>;
  provinceIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDGTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  provinceIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  provinceIDLT?: InputMaybe<Scalars['ID']['input']>;
  provinceIDLTE?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  provinceIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** remark field predicates */
  remark?: InputMaybe<Scalars['String']['input']>;
  remarkContains?: InputMaybe<Scalars['String']['input']>;
  remarkContainsFold?: InputMaybe<Scalars['String']['input']>;
  remarkEqualFold?: InputMaybe<Scalars['String']['input']>;
  remarkGT?: InputMaybe<Scalars['String']['input']>;
  remarkGTE?: InputMaybe<Scalars['String']['input']>;
  remarkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  remarkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  remarkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  remarkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  remarkLT?: InputMaybe<Scalars['String']['input']>;
  remarkLTE?: InputMaybe<Scalars['String']['input']>;
  remarkNEQ?: InputMaybe<Scalars['String']['input']>;
  remarkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  remarkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size_and_value_rating field predicates */
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingGT?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeAndValueRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeAndValueRatingLT?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeAndValueRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size_and_value_rating_overview field predicates */
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  sizeAndValueRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeAndValueRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  sizeAndValueRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  sizeAndValueRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** status field predicates */
  status?: InputMaybe<Scalars['Int']['input']>;
  statusGT?: InputMaybe<Scalars['Int']['input']>;
  statusGTE?: InputMaybe<Scalars['Int']['input']>;
  statusIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  statusLT?: InputMaybe<Scalars['Int']['input']>;
  statusLTE?: InputMaybe<Scalars['Int']['input']>;
  statusNEQ?: InputMaybe<Scalars['Int']['input']>;
  statusNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** tender_date field predicates */
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderDateGT?: InputMaybe<Scalars['Time']['input']>;
  tenderDateGTE?: InputMaybe<Scalars['Time']['input']>;
  tenderDateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderDateIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderDateLT?: InputMaybe<Scalars['Time']['input']>;
  tenderDateLTE?: InputMaybe<Scalars['Time']['input']>;
  tenderDateNEQ?: InputMaybe<Scalars['Time']['input']>;
  tenderDateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  tenderDateNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_form field predicates */
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderFormContains?: InputMaybe<Scalars['String']['input']>;
  tenderFormContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderFormEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderFormGT?: InputMaybe<Scalars['String']['input']>;
  tenderFormGTE?: InputMaybe<Scalars['String']['input']>;
  tenderFormHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderFormHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderFormIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderFormIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderFormLT?: InputMaybe<Scalars['String']['input']>;
  tenderFormLTE?: InputMaybe<Scalars['String']['input']>;
  tenderFormNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderFormNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderFormNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tender_situations field predicates */
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsContains?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsGT?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsGTE?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderSituationsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderSituationsLT?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsLTE?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderSituationsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderSituationsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tendering_agency field predicates */
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyContains?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyContainsFold?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyEqualFold?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyGT?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyGTE?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderingAgencyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderingAgencyLT?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyLTE?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyNEQ?: InputMaybe<Scalars['String']['input']>;
  tenderingAgencyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  tenderingAgencyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** time_limit_rating field predicates */
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingGT?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingGTE?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  timeLimitRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  timeLimitRatingLT?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingLTE?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingNEQ?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  timeLimitRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** time_limit_rating_overview field predicates */
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewContains?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewContainsFold?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewEqualFold?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewGT?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewGTE?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewHasPrefix?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewHasSuffix?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewIn?: InputMaybe<Array<Scalars['String']['input']>>;
  timeLimitRatingOverviewIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  timeLimitRatingOverviewLT?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewLTE?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewNEQ?: InputMaybe<Scalars['String']['input']>;
  timeLimitRatingOverviewNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  timeLimitRatingOverviewNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * UpdateAreaInput is used for update Area object.
 * Input was generated by ent.
 */
export type UpdateAreaInput = {
  addCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  clearProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  clearSales?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCityInput is used for update City object.
 * Input was generated by ent.
 */
export type UpdateCityInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  removeDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCountryInput is used for update Country object.
 * Input was generated by ent.
 */
export type UpdateCountryInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearProvinces?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeProvinceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateCustomerInput is used for update Customer object.
 * Input was generated by ent.
 */
export type UpdateCustomerInput = {
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  clearContactPerson?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonEmail?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonPhone?: InputMaybe<Scalars['Boolean']['input']>;
  clearContactPersonPosition?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerType?: InputMaybe<Scalars['Boolean']['input']>;
  clearSales?: InputMaybe<Scalars['Boolean']['input']>;
  clearSize?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  contactPerson?: InputMaybe<Scalars['String']['input']>;
  contactPersonEmail?: InputMaybe<Scalars['String']['input']>;
  contactPersonPhone?: InputMaybe<Scalars['String']['input']>;
  contactPersonPosition?: InputMaybe<Scalars['String']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  industry?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerType?: InputMaybe<Scalars['Int']['input']>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  salesID?: InputMaybe<Scalars['ID']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateDistrictInput is used for update District object.
 * Input was generated by ent.
 */
export type UpdateDistrictInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addPlotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  cityCode?: InputMaybe<Scalars['Int']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  clearCity?: InputMaybe<Scalars['Boolean']['input']>;
  clearPlots?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  provCode?: InputMaybe<Scalars['Int']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  removePlotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdatePlotInput is used for update Plot object.
 * Input was generated by ent.
 */
export type UpdatePlotInput = {
  colorHex?: InputMaybe<Scalars['String']['input']>;
  districtID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateProvinceInput is used for update Province object.
 * Input was generated by ent.
 */
export type UpdateProvinceInput = {
  adcode?: InputMaybe<Scalars['Int']['input']>;
  addCityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  clearArea?: InputMaybe<Scalars['Boolean']['input']>;
  clearCities?: InputMaybe<Scalars['Boolean']['input']>;
  clearDistricts?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  countryID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeCityIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeDistrictIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateTenderInput is used for update Tender object.
 * Input was generated by ent.
 */
export type UpdateTenderInput = {
  addFollowingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  address?: InputMaybe<Scalars['String']['input']>;
  appendAttachements?: InputMaybe<Array<Scalars['String']['input']>>;
  appendImages?: InputMaybe<Array<Scalars['String']['input']>>;
  areaID?: InputMaybe<Scalars['ID']['input']>;
  attachements?: InputMaybe<Array<Scalars['String']['input']>>;
  biddingDate?: InputMaybe<Scalars['Time']['input']>;
  biddingInstructions?: InputMaybe<Scalars['String']['input']>;
  cityID?: InputMaybe<Scalars['ID']['input']>;
  clearAddress?: InputMaybe<Scalars['Boolean']['input']>;
  clearAttachements?: InputMaybe<Scalars['Boolean']['input']>;
  clearBiddingDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearBiddingInstructions?: InputMaybe<Scalars['Boolean']['input']>;
  clearCity?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitivePartnershipRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitivePartnershipRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearCompetitorSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearConsultingFirm?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractForm?: InputMaybe<Scalars['Boolean']['input']>;
  clearContractor?: InputMaybe<Scalars['Boolean']['input']>;
  clearCostEngineer?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreditAndPaymentRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCreditAndPaymentRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomerRelationshipRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomerRelationshipRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearDesignUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedAmount?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedProjectEndDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedProjectStartDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearFacadeConsultant?: InputMaybe<Scalars['Boolean']['input']>;
  clearFollowingSales?: InputMaybe<Scalars['Boolean']['input']>;
  clearFullAddress?: InputMaybe<Scalars['Boolean']['input']>;
  clearImages?: InputMaybe<Scalars['Boolean']['input']>;
  clearManagementCompany?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwnerSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectCode?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectDefinition?: InputMaybe<Scalars['Boolean']['input']>;
  clearProjectType?: InputMaybe<Scalars['Boolean']['input']>;
  clearRemark?: InputMaybe<Scalars['Boolean']['input']>;
  clearSizeAndValueRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearSizeAndValueRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderDate?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderForm?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderSituations?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenderingAgency?: InputMaybe<Scalars['Boolean']['input']>;
  clearTimeLimitRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearTimeLimitRatingOverview?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  competitivePartnershipRating?: InputMaybe<Scalars['Int']['input']>;
  competitivePartnershipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  competitorSituations?: InputMaybe<Scalars['String']['input']>;
  consultingFirm?: InputMaybe<Scalars['String']['input']>;
  contractForm?: InputMaybe<Scalars['String']['input']>;
  contractor?: InputMaybe<Scalars['String']['input']>;
  costEngineer?: InputMaybe<Scalars['String']['input']>;
  createdByID?: InputMaybe<Scalars['ID']['input']>;
  creditAndPaymentRating?: InputMaybe<Scalars['Int']['input']>;
  creditAndPaymentRatingOverview?: InputMaybe<Scalars['String']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerRelationshipRating?: InputMaybe<Scalars['Int']['input']>;
  customerRelationshipRatingOverview?: InputMaybe<Scalars['String']['input']>;
  designUnit?: InputMaybe<Scalars['String']['input']>;
  discoveryDate?: InputMaybe<Scalars['Time']['input']>;
  districtID?: InputMaybe<Scalars['ID']['input']>;
  estimatedAmount?: InputMaybe<Scalars['Float']['input']>;
  estimatedProjectEndDate?: InputMaybe<Scalars['Time']['input']>;
  estimatedProjectStartDate?: InputMaybe<Scalars['Time']['input']>;
  facadeConsultant?: InputMaybe<Scalars['String']['input']>;
  finderID?: InputMaybe<Scalars['ID']['input']>;
  fullAddress?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<Array<Scalars['String']['input']>>;
  keyProject?: InputMaybe<Scalars['Boolean']['input']>;
  managementCompany?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerSituations?: InputMaybe<Scalars['String']['input']>;
  prepareToBid?: InputMaybe<Scalars['Boolean']['input']>;
  projectCode?: InputMaybe<Scalars['String']['input']>;
  projectDefinition?: InputMaybe<Scalars['String']['input']>;
  projectType?: InputMaybe<Scalars['String']['input']>;
  provinceID?: InputMaybe<Scalars['ID']['input']>;
  remark?: InputMaybe<Scalars['String']['input']>;
  removeFollowingSaleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  sizeAndValueRating?: InputMaybe<Scalars['Int']['input']>;
  sizeAndValueRatingOverview?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  tenderDate?: InputMaybe<Scalars['Time']['input']>;
  tenderForm?: InputMaybe<Scalars['String']['input']>;
  tenderSituations?: InputMaybe<Scalars['String']['input']>;
  tenderingAgency?: InputMaybe<Scalars['String']['input']>;
  timeLimitRating?: InputMaybe<Scalars['Int']['input']>;
  timeLimitRatingOverview?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  addAreaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTeamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  avatarURL?: InputMaybe<Scalars['String']['input']>;
  clearAreas?: InputMaybe<Scalars['Boolean']['input']>;
  clearCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  clearLeader?: InputMaybe<Scalars['Boolean']['input']>;
  clearTeamMembers?: InputMaybe<Scalars['Boolean']['input']>;
  clearTenders?: InputMaybe<Scalars['Boolean']['input']>;
  clearVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isLeader?: InputMaybe<Scalars['Boolean']['input']>;
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  openID?: InputMaybe<Scalars['String']['input']>;
  removeAreaIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeCustomerIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTeamMemberIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTenderIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeVisitRecordIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateVisitRecordInput is used for update VisitRecord object.
 * Input was generated by ent.
 */
export type UpdateVisitRecordInput = {
  addFollowUpByIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  clearFollowUpBys?: InputMaybe<Scalars['Boolean']['input']>;
  clearNextStep?: InputMaybe<Scalars['Boolean']['input']>;
  clearTender?: InputMaybe<Scalars['Boolean']['input']>;
  commContent?: InputMaybe<Scalars['String']['input']>;
  commPeople?: InputMaybe<Scalars['String']['input']>;
  customerID?: InputMaybe<Scalars['ID']['input']>;
  date?: InputMaybe<Scalars['Time']['input']>;
  nextStep?: InputMaybe<Scalars['String']['input']>;
  removeFollowUpByIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  visitType?: InputMaybe<Scalars['Int']['input']>;
};

export type User = Node & {
  __typename?: 'User';
  areas: AreaConnection;
  avatarURL: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  customers: CustomerConnection;
  disabled: Scalars['Boolean']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isAdmin: Scalars['Boolean']['output'];
  isLeader: Scalars['Boolean']['output'];
  leader?: Maybe<User>;
  leaderID?: Maybe<Scalars['ID']['output']>;
  name: Scalars['String']['output'];
  openID: Scalars['String']['output'];
  teamMembers?: Maybe<Array<User>>;
  tenders: TenderConnection;
  updatedAt: Scalars['Time']['output'];
  username: Scalars['String']['output'];
  visitRecords: VisitRecordConnection;
};


export type UserAreasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<AreaOrder>;
  where?: InputMaybe<AreaWhereInput>;
};


export type UserCustomersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomerOrder>>;
  where?: InputMaybe<CustomerWhereInput>;
};


export type UserTendersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<TenderOrder>;
  where?: InputMaybe<TenderWhereInput>;
};


export type UserVisitRecordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<VisitRecordOrder>;
  where?: InputMaybe<VisitRecordWhereInput>;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Users. */
  field: UserOrderField;
};

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  CreatedAt = 'CREATED_AT'
}

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** avatar_url field predicates */
  avatarURL?: InputMaybe<Scalars['String']['input']>;
  avatarURLContains?: InputMaybe<Scalars['String']['input']>;
  avatarURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  avatarURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  avatarURLGT?: InputMaybe<Scalars['String']['input']>;
  avatarURLGTE?: InputMaybe<Scalars['String']['input']>;
  avatarURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  avatarURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  avatarURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarURLLT?: InputMaybe<Scalars['String']['input']>;
  avatarURLLTE?: InputMaybe<Scalars['String']['input']>;
  avatarURLNEQ?: InputMaybe<Scalars['String']['input']>;
  avatarURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** disabled field predicates */
  disabled?: InputMaybe<Scalars['Boolean']['input']>;
  disabledNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']['input']>;
  emailContains?: InputMaybe<Scalars['String']['input']>;
  emailContainsFold?: InputMaybe<Scalars['String']['input']>;
  emailEqualFold?: InputMaybe<Scalars['String']['input']>;
  emailGT?: InputMaybe<Scalars['String']['input']>;
  emailGTE?: InputMaybe<Scalars['String']['input']>;
  emailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  emailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  emailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailLT?: InputMaybe<Scalars['String']['input']>;
  emailLTE?: InputMaybe<Scalars['String']['input']>;
  emailNEQ?: InputMaybe<Scalars['String']['input']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** areas edge predicates */
  hasAreas?: InputMaybe<Scalars['Boolean']['input']>;
  hasAreasWith?: InputMaybe<Array<AreaWhereInput>>;
  /** customers edge predicates */
  hasCustomers?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomersWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** leader edge predicates */
  hasLeader?: InputMaybe<Scalars['Boolean']['input']>;
  hasLeaderWith?: InputMaybe<Array<UserWhereInput>>;
  /** team_members edge predicates */
  hasTeamMembers?: InputMaybe<Scalars['Boolean']['input']>;
  hasTeamMembersWith?: InputMaybe<Array<UserWhereInput>>;
  /** tenders edge predicates */
  hasTenders?: InputMaybe<Scalars['Boolean']['input']>;
  hasTendersWith?: InputMaybe<Array<TenderWhereInput>>;
  /** visit_records edge predicates */
  hasVisitRecords?: InputMaybe<Scalars['Boolean']['input']>;
  hasVisitRecordsWith?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_admin field predicates */
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isAdminNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** is_leader field predicates */
  isLeader?: InputMaybe<Scalars['Boolean']['input']>;
  isLeaderNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** leader_id field predicates */
  leaderID?: InputMaybe<Scalars['ID']['input']>;
  leaderIDContains?: InputMaybe<Scalars['ID']['input']>;
  leaderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  leaderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  leaderIDGT?: InputMaybe<Scalars['ID']['input']>;
  leaderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  leaderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  leaderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  leaderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  leaderIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  leaderIDLT?: InputMaybe<Scalars['ID']['input']>;
  leaderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  leaderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  leaderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  leaderIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<UserWhereInput>;
  /** open_id field predicates */
  openID?: InputMaybe<Scalars['String']['input']>;
  openIDContains?: InputMaybe<Scalars['String']['input']>;
  openIDContainsFold?: InputMaybe<Scalars['String']['input']>;
  openIDEqualFold?: InputMaybe<Scalars['String']['input']>;
  openIDGT?: InputMaybe<Scalars['String']['input']>;
  openIDGTE?: InputMaybe<Scalars['String']['input']>;
  openIDHasPrefix?: InputMaybe<Scalars['String']['input']>;
  openIDHasSuffix?: InputMaybe<Scalars['String']['input']>;
  openIDIn?: InputMaybe<Array<Scalars['String']['input']>>;
  openIDLT?: InputMaybe<Scalars['String']['input']>;
  openIDLTE?: InputMaybe<Scalars['String']['input']>;
  openIDNEQ?: InputMaybe<Scalars['String']['input']>;
  openIDNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** username field predicates */
  username?: InputMaybe<Scalars['String']['input']>;
  usernameContains?: InputMaybe<Scalars['String']['input']>;
  usernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  usernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  usernameGT?: InputMaybe<Scalars['String']['input']>;
  usernameGTE?: InputMaybe<Scalars['String']['input']>;
  usernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  usernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  usernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameLT?: InputMaybe<Scalars['String']['input']>;
  usernameLTE?: InputMaybe<Scalars['String']['input']>;
  usernameNEQ?: InputMaybe<Scalars['String']['input']>;
  usernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type VisitRecord = Node & {
  __typename?: 'VisitRecord';
  commContent: Scalars['String']['output'];
  commPeople: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  customer?: Maybe<Customer>;
  customerID?: Maybe<Scalars['ID']['output']>;
  date: Scalars['Time']['output'];
  followupbys: UserConnection;
  id: Scalars['ID']['output'];
  nextStep?: Maybe<Scalars['String']['output']>;
  tender?: Maybe<Tender>;
  tenderID?: Maybe<Scalars['ID']['output']>;
  updatedAt: Scalars['Time']['output'];
  visitType: Scalars['Int']['output'];
};


export type VisitRecordFollowupbysArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

/** A connection to a list of items. */
export type VisitRecordConnection = {
  __typename?: 'VisitRecordConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<VisitRecordEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type VisitRecordEdge = {
  __typename?: 'VisitRecordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<VisitRecord>;
};

/** Ordering options for VisitRecord connections */
export type VisitRecordOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order VisitRecords. */
  field: VisitRecordOrderField;
};

/** Properties by which VisitRecord connections can be ordered. */
export enum VisitRecordOrderField {
  CreatedAt = 'CREATED_AT',
  Date = 'DATE'
}

/**
 * VisitRecordWhereInput is used for filtering VisitRecord objects.
 * Input was generated by ent.
 */
export type VisitRecordWhereInput = {
  and?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** comm_content field predicates */
  commContent?: InputMaybe<Scalars['String']['input']>;
  commContentContains?: InputMaybe<Scalars['String']['input']>;
  commContentContainsFold?: InputMaybe<Scalars['String']['input']>;
  commContentEqualFold?: InputMaybe<Scalars['String']['input']>;
  commContentGT?: InputMaybe<Scalars['String']['input']>;
  commContentGTE?: InputMaybe<Scalars['String']['input']>;
  commContentHasPrefix?: InputMaybe<Scalars['String']['input']>;
  commContentHasSuffix?: InputMaybe<Scalars['String']['input']>;
  commContentIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commContentLT?: InputMaybe<Scalars['String']['input']>;
  commContentLTE?: InputMaybe<Scalars['String']['input']>;
  commContentNEQ?: InputMaybe<Scalars['String']['input']>;
  commContentNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** comm_people field predicates */
  commPeople?: InputMaybe<Scalars['String']['input']>;
  commPeopleContains?: InputMaybe<Scalars['String']['input']>;
  commPeopleContainsFold?: InputMaybe<Scalars['String']['input']>;
  commPeopleEqualFold?: InputMaybe<Scalars['String']['input']>;
  commPeopleGT?: InputMaybe<Scalars['String']['input']>;
  commPeopleGTE?: InputMaybe<Scalars['String']['input']>;
  commPeopleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  commPeopleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  commPeopleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commPeopleLT?: InputMaybe<Scalars['String']['input']>;
  commPeopleLTE?: InputMaybe<Scalars['String']['input']>;
  commPeopleNEQ?: InputMaybe<Scalars['String']['input']>;
  commPeopleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customer_id field predicates */
  customerID?: InputMaybe<Scalars['ID']['input']>;
  customerIDContains?: InputMaybe<Scalars['ID']['input']>;
  customerIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  customerIDGT?: InputMaybe<Scalars['ID']['input']>;
  customerIDGTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  customerIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  customerIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  customerIDLT?: InputMaybe<Scalars['ID']['input']>;
  customerIDLTE?: InputMaybe<Scalars['ID']['input']>;
  customerIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  customerIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  customerIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** date field predicates */
  date?: InputMaybe<Scalars['Time']['input']>;
  dateGT?: InputMaybe<Scalars['Time']['input']>;
  dateGTE?: InputMaybe<Scalars['Time']['input']>;
  dateIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  dateLT?: InputMaybe<Scalars['Time']['input']>;
  dateLTE?: InputMaybe<Scalars['Time']['input']>;
  dateNEQ?: InputMaybe<Scalars['Time']['input']>;
  dateNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** customer edge predicates */
  hasCustomer?: InputMaybe<Scalars['Boolean']['input']>;
  hasCustomerWith?: InputMaybe<Array<CustomerWhereInput>>;
  /** followUpBys edge predicates */
  hasFollowUpBys?: InputMaybe<Scalars['Boolean']['input']>;
  hasFollowUpBysWith?: InputMaybe<Array<UserWhereInput>>;
  /** tender edge predicates */
  hasTender?: InputMaybe<Scalars['Boolean']['input']>;
  hasTenderWith?: InputMaybe<Array<TenderWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** next_step field predicates */
  nextStep?: InputMaybe<Scalars['String']['input']>;
  nextStepContains?: InputMaybe<Scalars['String']['input']>;
  nextStepContainsFold?: InputMaybe<Scalars['String']['input']>;
  nextStepEqualFold?: InputMaybe<Scalars['String']['input']>;
  nextStepGT?: InputMaybe<Scalars['String']['input']>;
  nextStepGTE?: InputMaybe<Scalars['String']['input']>;
  nextStepHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nextStepHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nextStepIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nextStepIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  nextStepLT?: InputMaybe<Scalars['String']['input']>;
  nextStepLTE?: InputMaybe<Scalars['String']['input']>;
  nextStepNEQ?: InputMaybe<Scalars['String']['input']>;
  nextStepNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nextStepNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<VisitRecordWhereInput>;
  or?: InputMaybe<Array<VisitRecordWhereInput>>;
  /** tender_id field predicates */
  tenderID?: InputMaybe<Scalars['ID']['input']>;
  tenderIDContains?: InputMaybe<Scalars['ID']['input']>;
  tenderIDContainsFold?: InputMaybe<Scalars['ID']['input']>;
  tenderIDEqualFold?: InputMaybe<Scalars['ID']['input']>;
  tenderIDGT?: InputMaybe<Scalars['ID']['input']>;
  tenderIDGTE?: InputMaybe<Scalars['ID']['input']>;
  tenderIDHasPrefix?: InputMaybe<Scalars['ID']['input']>;
  tenderIDHasSuffix?: InputMaybe<Scalars['ID']['input']>;
  tenderIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  tenderIDLT?: InputMaybe<Scalars['ID']['input']>;
  tenderIDLTE?: InputMaybe<Scalars['ID']['input']>;
  tenderIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  tenderIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tenderIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** visit_type field predicates */
  visitType?: InputMaybe<Scalars['Int']['input']>;
  visitTypeGT?: InputMaybe<Scalars['Int']['input']>;
  visitTypeGTE?: InputMaybe<Scalars['Int']['input']>;
  visitTypeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  visitTypeLT?: InputMaybe<Scalars['Int']['input']>;
  visitTypeLTE?: InputMaybe<Scalars['Int']['input']>;
  visitTypeNEQ?: InputMaybe<Scalars['Int']['input']>;
  visitTypeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type UseCreatePlotMutationMutationVariables = Exact<{
  input: CreatePlotInput;
  geoBounds?: InputMaybe<Array<Array<Scalars['Float']['input']> | Scalars['Float']['input']> | Array<Scalars['Float']['input']> | Scalars['Float']['input']>;
  connections: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type UseCreatePlotMutationMutation = { __typename?: 'Mutation', createPlot: { __typename?: 'PlotConnection', edges?: Array<{ __typename?: 'PlotEdge', node?: { __typename?: 'Plot', id: string, name: string, geoBounds?: Array<Array<number>> | null, colorHex: string } | null } | null> | null } };

export type UseCreateUserMutationMutationVariables = Exact<{
  input: CreateUserInput;
  connections: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type UseCreateUserMutationMutation = { __typename?: 'Mutation', createUser: { __typename?: 'UserConnection', edges?: Array<{ __typename?: 'UserEdge', node?: { __typename?: 'User', id: string, name: string, isAdmin: boolean, isLeader: boolean, areas: { __typename?: 'AreaConnection', edges?: Array<{ __typename?: 'AreaEdge', node?: { __typename?: 'Area', name: string } | null } | null> | null } } | null } | null> | null } };

export type UseDeleteTenderMutationMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UseDeleteTenderMutationMutation = { __typename?: 'Mutation', deleteTender: { __typename?: 'Tender', id: string } };

export class TypedDocumentString<TResult, TVariables>
  extends String
  implements DocumentTypeDecoration<TResult, TVariables>
{
  __apiType?: DocumentTypeDecoration<TResult, TVariables>['__apiType'];

  constructor(private value: string, public __meta__?: Record<string, any> | undefined) {
    super(value);
  }

  toString(): string & DocumentTypeDecoration<TResult, TVariables> {
    return this.value;
  }
}

export const UseCreatePlotMutationDocument = new TypedDocumentString(`
    mutation useCreatePlotMutation($input: CreatePlotInput!, $geoBounds: [[Float!]!], $connections: [ID!]!) {
  createPlot(input: $input, geoBounds: $geoBounds) {
    edges @prependNode(connections: $connections, edgeTypeName: "PlotEdge") {
      node {
        id
        name
        geoBounds
        colorHex
      }
    }
  }
}
    `) as unknown as TypedDocumentString<UseCreatePlotMutationMutation, UseCreatePlotMutationMutationVariables>;
export const UseCreateUserMutationDocument = new TypedDocumentString(`
    mutation useCreateUserMutation($input: CreateUserInput!, $connections: [ID!]!) {
  createUser(input: $input) {
    edges @appendNode(connections: $connections, edgeTypeName: "UserEdge") {
      node {
        id
        name
        areas {
          edges {
            node {
              name
            }
          }
        }
        isAdmin
        isLeader
      }
    }
  }
}
    `) as unknown as TypedDocumentString<UseCreateUserMutationMutation, UseCreateUserMutationMutationVariables>;
export const UseDeleteTenderMutationDocument = new TypedDocumentString(`
    mutation useDeleteTenderMutation($id: ID!) {
  deleteTender(id: $id) {
    id
  }
}
    `) as unknown as TypedDocumentString<UseDeleteTenderMutationMutation, UseDeleteTenderMutationMutationVariables>;