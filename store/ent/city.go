// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// City is the model entity for the City schema.
type City struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Adcode holds the value of the "adcode" field.
	Adcode int `json:"adcode,omitempty"`
	// ProvCode holds the value of the "prov_code" field.
	ProvCode int `json:"prov_code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Center holds the value of the "center" field.
	Center *geo.GeoJson `json:"center,omitempty"`
	// ProvinceID holds the value of the "province_id" field.
	ProvinceID xid.ID `json:"province_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CityQuery when eager-loading is set.
	Edges        CityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CityEdges holds the relations/edges for other nodes in the graph.
type CityEdges struct {
	// Districts holds the value of the districts edge.
	Districts []*District `json:"districts,omitempty"`
	// Province holds the value of the province edge.
	Province *Province `json:"province,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedDistricts map[string][]*District
}

// DistrictsOrErr returns the Districts value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) DistrictsOrErr() ([]*District, error) {
	if e.loadedTypes[0] {
		return e.Districts, nil
	}
	return nil, &NotLoadedError{edge: "districts"}
}

// ProvinceOrErr returns the Province value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CityEdges) ProvinceOrErr() (*Province, error) {
	if e.Province != nil {
		return e.Province, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: province.Label}
	}
	return nil, &NotLoadedError{edge: "province"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*City) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case city.FieldCenter:
			values[i] = new(geo.GeoJson)
		case city.FieldAdcode, city.FieldProvCode:
			values[i] = new(sql.NullInt64)
		case city.FieldName:
			values[i] = new(sql.NullString)
		case city.FieldCreatedAt, city.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case city.FieldID, city.FieldProvinceID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the City fields.
func (c *City) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case city.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case city.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case city.FieldAdcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field adcode", values[i])
			} else if value.Valid {
				c.Adcode = int(value.Int64)
			}
		case city.FieldProvCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prov_code", values[i])
			} else if value.Valid {
				c.ProvCode = int(value.Int64)
			}
		case city.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case city.FieldCenter:
			if value, ok := values[i].(*geo.GeoJson); !ok {
				return fmt.Errorf("unexpected type %T for field center", values[i])
			} else if value != nil {
				c.Center = value
			}
		case city.FieldProvinceID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field province_id", values[i])
			} else if value != nil {
				c.ProvinceID = *value
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the City.
// This includes values selected through modifiers, order, etc.
func (c *City) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryDistricts queries the "districts" edge of the City entity.
func (c *City) QueryDistricts() *DistrictQuery {
	return NewCityClient(c.config).QueryDistricts(c)
}

// QueryProvince queries the "province" edge of the City entity.
func (c *City) QueryProvince() *ProvinceQuery {
	return NewCityClient(c.config).QueryProvince(c)
}

// Update returns a builder for updating this City.
// Note that you need to call City.Unwrap() before calling this method if this City
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *City) Update() *CityUpdateOne {
	return NewCityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the City entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *City) Unwrap() *City {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: City is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *City) String() string {
	var builder strings.Builder
	builder.WriteString("City(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("adcode=")
	builder.WriteString(fmt.Sprintf("%v", c.Adcode))
	builder.WriteString(", ")
	builder.WriteString("prov_code=")
	builder.WriteString(fmt.Sprintf("%v", c.ProvCode))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("center=")
	builder.WriteString(fmt.Sprintf("%v", c.Center))
	builder.WriteString(", ")
	builder.WriteString("province_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ProvinceID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDistricts returns the Districts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *City) NamedDistricts(name string) ([]*District, error) {
	if c.Edges.namedDistricts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDistricts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *City) appendNamedDistricts(name string, edges ...*District) {
	if c.Edges.namedDistricts == nil {
		c.Edges.namedDistricts = make(map[string][]*District)
	}
	if len(edges) == 0 {
		c.Edges.namedDistricts[name] = []*District{}
	} else {
		c.Edges.namedDistricts[name] = append(c.Edges.namedDistricts[name], edges...)
	}
}

// Cities is a parsable slice of City.
type Cities []*City
