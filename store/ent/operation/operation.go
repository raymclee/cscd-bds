// Code generated by ent, DO NOT EDIT.

package operation

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the operation type in the database.
	Label = "operation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCjeYs holds the string denoting the cje_ys field in the database.
	FieldCjeYs = "cje_ys"
	// FieldCjeLj holds the string denoting the cje_lj field in the database.
	FieldCjeLj = "cje_lj"
	// FieldYyeYs holds the string denoting the yye_ys field in the database.
	FieldYyeYs = "yye_ys"
	// FieldYyeLj holds the string denoting the yye_lj field in the database.
	FieldYyeLj = "yye_lj"
	// FieldXjlYs holds the string denoting the xjl_ys field in the database.
	FieldXjlYs = "xjl_ys"
	// FieldXjlLj holds the string denoting the xjl_lj field in the database.
	FieldXjlLj = "xjl_lj"
	// FieldXmglf holds the string denoting the xmglf field in the database.
	FieldXmglf = "xmglf"
	// FieldXmsjf holds the string denoting the xmsjf field in the database.
	FieldXmsjf = "xmsjf"
	// Table holds the table name of the operation in the database.
	Table = "operations"
)

// Columns holds all SQL columns for operation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCjeYs,
	FieldCjeLj,
	FieldYyeYs,
	FieldYyeLj,
	FieldXjlYs,
	FieldXjlLj,
	FieldXmglf,
	FieldXmsjf,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Operation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCjeYs orders the results by the cje_ys field.
func ByCjeYs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCjeYs, opts...).ToFunc()
}

// ByCjeLj orders the results by the cje_lj field.
func ByCjeLj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCjeLj, opts...).ToFunc()
}

// ByYyeYs orders the results by the yye_ys field.
func ByYyeYs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYyeYs, opts...).ToFunc()
}

// ByYyeLj orders the results by the yye_lj field.
func ByYyeLj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYyeLj, opts...).ToFunc()
}

// ByXjlYs orders the results by the xjl_ys field.
func ByXjlYs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXjlYs, opts...).ToFunc()
}

// ByXjlLj orders the results by the xjl_lj field.
func ByXjlLj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXjlLj, opts...).ToFunc()
}

// ByXmglf orders the results by the xmglf field.
func ByXmglf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmglf, opts...).ToFunc()
}

// ByXmsjf orders the results by the xmsjf field.
func ByXmsjf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmsjf, opts...).ToFunc()
}
