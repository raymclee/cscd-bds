// Code generated by ent, DO NOT EDIT.

package visitrecord

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// VisitType applies equality check predicate on the "visit_type" field. It's identical to VisitTypeEQ.
func VisitType(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldVisitType, v))
}

// CommPeople applies equality check predicate on the "comm_people" field. It's identical to CommPeopleEQ.
func CommPeople(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCommPeople, v))
}

// CommContent applies equality check predicate on the "comm_content" field. It's identical to CommContentEQ.
func CommContent(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCommContent, v))
}

// NextStep applies equality check predicate on the "next_step" field. It's identical to NextStepEQ.
func NextStep(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldNextStep, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldDate, v))
}

// TenderID applies equality check predicate on the "tender_id" field. It's identical to TenderIDEQ.
func TenderID(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldTenderID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCustomerID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// VisitTypeEQ applies the EQ predicate on the "visit_type" field.
func VisitTypeEQ(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldVisitType, v))
}

// VisitTypeNEQ applies the NEQ predicate on the "visit_type" field.
func VisitTypeNEQ(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldVisitType, v))
}

// VisitTypeIn applies the In predicate on the "visit_type" field.
func VisitTypeIn(vs ...int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldVisitType, vs...))
}

// VisitTypeNotIn applies the NotIn predicate on the "visit_type" field.
func VisitTypeNotIn(vs ...int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldVisitType, vs...))
}

// VisitTypeGT applies the GT predicate on the "visit_type" field.
func VisitTypeGT(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldVisitType, v))
}

// VisitTypeGTE applies the GTE predicate on the "visit_type" field.
func VisitTypeGTE(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldVisitType, v))
}

// VisitTypeLT applies the LT predicate on the "visit_type" field.
func VisitTypeLT(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldVisitType, v))
}

// VisitTypeLTE applies the LTE predicate on the "visit_type" field.
func VisitTypeLTE(v int) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldVisitType, v))
}

// CommPeopleEQ applies the EQ predicate on the "comm_people" field.
func CommPeopleEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCommPeople, v))
}

// CommPeopleNEQ applies the NEQ predicate on the "comm_people" field.
func CommPeopleNEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldCommPeople, v))
}

// CommPeopleIn applies the In predicate on the "comm_people" field.
func CommPeopleIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldCommPeople, vs...))
}

// CommPeopleNotIn applies the NotIn predicate on the "comm_people" field.
func CommPeopleNotIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldCommPeople, vs...))
}

// CommPeopleGT applies the GT predicate on the "comm_people" field.
func CommPeopleGT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldCommPeople, v))
}

// CommPeopleGTE applies the GTE predicate on the "comm_people" field.
func CommPeopleGTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldCommPeople, v))
}

// CommPeopleLT applies the LT predicate on the "comm_people" field.
func CommPeopleLT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldCommPeople, v))
}

// CommPeopleLTE applies the LTE predicate on the "comm_people" field.
func CommPeopleLTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldCommPeople, v))
}

// CommPeopleContains applies the Contains predicate on the "comm_people" field.
func CommPeopleContains(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContains(FieldCommPeople, v))
}

// CommPeopleHasPrefix applies the HasPrefix predicate on the "comm_people" field.
func CommPeopleHasPrefix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasPrefix(FieldCommPeople, v))
}

// CommPeopleHasSuffix applies the HasSuffix predicate on the "comm_people" field.
func CommPeopleHasSuffix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasSuffix(FieldCommPeople, v))
}

// CommPeopleEqualFold applies the EqualFold predicate on the "comm_people" field.
func CommPeopleEqualFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEqualFold(FieldCommPeople, v))
}

// CommPeopleContainsFold applies the ContainsFold predicate on the "comm_people" field.
func CommPeopleContainsFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContainsFold(FieldCommPeople, v))
}

// CommContentEQ applies the EQ predicate on the "comm_content" field.
func CommContentEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCommContent, v))
}

// CommContentNEQ applies the NEQ predicate on the "comm_content" field.
func CommContentNEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldCommContent, v))
}

// CommContentIn applies the In predicate on the "comm_content" field.
func CommContentIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldCommContent, vs...))
}

// CommContentNotIn applies the NotIn predicate on the "comm_content" field.
func CommContentNotIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldCommContent, vs...))
}

// CommContentGT applies the GT predicate on the "comm_content" field.
func CommContentGT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldCommContent, v))
}

// CommContentGTE applies the GTE predicate on the "comm_content" field.
func CommContentGTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldCommContent, v))
}

// CommContentLT applies the LT predicate on the "comm_content" field.
func CommContentLT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldCommContent, v))
}

// CommContentLTE applies the LTE predicate on the "comm_content" field.
func CommContentLTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldCommContent, v))
}

// CommContentContains applies the Contains predicate on the "comm_content" field.
func CommContentContains(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContains(FieldCommContent, v))
}

// CommContentHasPrefix applies the HasPrefix predicate on the "comm_content" field.
func CommContentHasPrefix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasPrefix(FieldCommContent, v))
}

// CommContentHasSuffix applies the HasSuffix predicate on the "comm_content" field.
func CommContentHasSuffix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasSuffix(FieldCommContent, v))
}

// CommContentEqualFold applies the EqualFold predicate on the "comm_content" field.
func CommContentEqualFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEqualFold(FieldCommContent, v))
}

// CommContentContainsFold applies the ContainsFold predicate on the "comm_content" field.
func CommContentContainsFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContainsFold(FieldCommContent, v))
}

// NextStepEQ applies the EQ predicate on the "next_step" field.
func NextStepEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldNextStep, v))
}

// NextStepNEQ applies the NEQ predicate on the "next_step" field.
func NextStepNEQ(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldNextStep, v))
}

// NextStepIn applies the In predicate on the "next_step" field.
func NextStepIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldNextStep, vs...))
}

// NextStepNotIn applies the NotIn predicate on the "next_step" field.
func NextStepNotIn(vs ...string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldNextStep, vs...))
}

// NextStepGT applies the GT predicate on the "next_step" field.
func NextStepGT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldNextStep, v))
}

// NextStepGTE applies the GTE predicate on the "next_step" field.
func NextStepGTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldNextStep, v))
}

// NextStepLT applies the LT predicate on the "next_step" field.
func NextStepLT(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldNextStep, v))
}

// NextStepLTE applies the LTE predicate on the "next_step" field.
func NextStepLTE(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldNextStep, v))
}

// NextStepContains applies the Contains predicate on the "next_step" field.
func NextStepContains(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContains(FieldNextStep, v))
}

// NextStepHasPrefix applies the HasPrefix predicate on the "next_step" field.
func NextStepHasPrefix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasPrefix(FieldNextStep, v))
}

// NextStepHasSuffix applies the HasSuffix predicate on the "next_step" field.
func NextStepHasSuffix(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldHasSuffix(FieldNextStep, v))
}

// NextStepIsNil applies the IsNil predicate on the "next_step" field.
func NextStepIsNil() predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIsNull(FieldNextStep))
}

// NextStepNotNil applies the NotNil predicate on the "next_step" field.
func NextStepNotNil() predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotNull(FieldNextStep))
}

// NextStepEqualFold applies the EqualFold predicate on the "next_step" field.
func NextStepEqualFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEqualFold(FieldNextStep, v))
}

// NextStepContainsFold applies the ContainsFold predicate on the "next_step" field.
func NextStepContainsFold(v string) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldContainsFold(FieldNextStep, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldDate, v))
}

// TenderIDEQ applies the EQ predicate on the "tender_id" field.
func TenderIDEQ(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldTenderID, v))
}

// TenderIDNEQ applies the NEQ predicate on the "tender_id" field.
func TenderIDNEQ(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldTenderID, v))
}

// TenderIDIn applies the In predicate on the "tender_id" field.
func TenderIDIn(vs ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldTenderID, vs...))
}

// TenderIDNotIn applies the NotIn predicate on the "tender_id" field.
func TenderIDNotIn(vs ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldTenderID, vs...))
}

// TenderIDGT applies the GT predicate on the "tender_id" field.
func TenderIDGT(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldTenderID, v))
}

// TenderIDGTE applies the GTE predicate on the "tender_id" field.
func TenderIDGTE(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldTenderID, v))
}

// TenderIDLT applies the LT predicate on the "tender_id" field.
func TenderIDLT(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldTenderID, v))
}

// TenderIDLTE applies the LTE predicate on the "tender_id" field.
func TenderIDLTE(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldTenderID, v))
}

// TenderIDContains applies the Contains predicate on the "tender_id" field.
func TenderIDContains(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldContains(FieldTenderID, vc))
}

// TenderIDHasPrefix applies the HasPrefix predicate on the "tender_id" field.
func TenderIDHasPrefix(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldHasPrefix(FieldTenderID, vc))
}

// TenderIDHasSuffix applies the HasSuffix predicate on the "tender_id" field.
func TenderIDHasSuffix(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldHasSuffix(FieldTenderID, vc))
}

// TenderIDIsNil applies the IsNil predicate on the "tender_id" field.
func TenderIDIsNil() predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIsNull(FieldTenderID))
}

// TenderIDNotNil applies the NotNil predicate on the "tender_id" field.
func TenderIDNotNil() predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotNull(FieldTenderID))
}

// TenderIDEqualFold applies the EqualFold predicate on the "tender_id" field.
func TenderIDEqualFold(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldEqualFold(FieldTenderID, vc))
}

// TenderIDContainsFold applies the ContainsFold predicate on the "tender_id" field.
func TenderIDContainsFold(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldContainsFold(FieldTenderID, vc))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v xid.ID) predicate.VisitRecord {
	return predicate.VisitRecord(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldContains(FieldCustomerID, vc))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldHasPrefix(FieldCustomerID, vc))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldHasSuffix(FieldCustomerID, vc))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldEqualFold(FieldCustomerID, vc))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v xid.ID) predicate.VisitRecord {
	vc := string(v)
	return predicate.VisitRecord(sql.FieldContainsFold(FieldCustomerID, vc))
}

// HasTender applies the HasEdge predicate on the "tender" edge.
func HasTender() predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenderTable, TenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenderWith applies the HasEdge predicate on the "tender" edge with a given conditions (other predicates).
func HasTenderWith(preds ...predicate.Tender) predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := newTenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowUpBys applies the HasEdge predicate on the "followUpBys" edge.
func HasFollowUpBys() predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FollowUpBysTable, FollowUpBysPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowUpBysWith applies the HasEdge predicate on the "followUpBys" edge with a given conditions (other predicates).
func HasFollowUpBysWith(preds ...predicate.User) predicate.VisitRecord {
	return predicate.VisitRecord(func(s *sql.Selector) {
		step := newFollowUpBysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VisitRecord) predicate.VisitRecord {
	return predicate.VisitRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VisitRecord) predicate.VisitRecord {
	return predicate.VisitRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VisitRecord) predicate.VisitRecord {
	return predicate.VisitRecord(sql.NotPredicates(p))
}
