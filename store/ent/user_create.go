// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetOpenID sets the "open_id" field.
func (uc *UserCreate) SetOpenID(s string) *UserCreate {
	uc.mutation.SetOpenID(s)
	return uc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableOpenID(s *string) *UserCreate {
	if s != nil {
		uc.SetOpenID(*s)
	}
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *UserCreate) SetAvatarURL(s string) *UserCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarURL(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatarURL(*s)
	}
	return uc
}

// SetDisabled sets the "disabled" field.
func (uc *UserCreate) SetDisabled(b bool) *UserCreate {
	uc.mutation.SetDisabled(b)
	return uc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableDisabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetDisabled(*b)
	}
	return uc
}

// SetIsSales sets the "is_sales" field.
func (uc *UserCreate) SetIsSales(b bool) *UserCreate {
	uc.mutation.SetIsSales(b)
	return uc
}

// SetNillableIsSales sets the "is_sales" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsSales(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsSales(*b)
	}
	return uc
}

// SetIsAdmin sets the "is_admin" field.
func (uc *UserCreate) SetIsAdmin(b bool) *UserCreate {
	uc.mutation.SetIsAdmin(b)
	return uc
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsAdmin(*b)
	}
	return uc
}

// SetIsLeader sets the "is_leader" field.
func (uc *UserCreate) SetIsLeader(b bool) *UserCreate {
	uc.mutation.SetIsLeader(b)
	return uc
}

// SetNillableIsLeader sets the "is_leader" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsLeader(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsLeader(*b)
	}
	return uc
}

// SetIsSuperAdmin sets the "is_super_admin" field.
func (uc *UserCreate) SetIsSuperAdmin(b bool) *UserCreate {
	uc.mutation.SetIsSuperAdmin(b)
	return uc
}

// SetNillableIsSuperAdmin sets the "is_super_admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsSuperAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsSuperAdmin(*b)
	}
	return uc
}

// SetHasMapAccess sets the "has_map_access" field.
func (uc *UserCreate) SetHasMapAccess(b bool) *UserCreate {
	uc.mutation.SetHasMapAccess(b)
	return uc
}

// SetNillableHasMapAccess sets the "has_map_access" field if the given value is not nil.
func (uc *UserCreate) SetNillableHasMapAccess(b *bool) *UserCreate {
	if b != nil {
		uc.SetHasMapAccess(*b)
	}
	return uc
}

// SetHasEditAccess sets the "has_edit_access" field.
func (uc *UserCreate) SetHasEditAccess(b bool) *UserCreate {
	uc.mutation.SetHasEditAccess(b)
	return uc
}

// SetNillableHasEditAccess sets the "has_edit_access" field if the given value is not nil.
func (uc *UserCreate) SetNillableHasEditAccess(b *bool) *UserCreate {
	if b != nil {
		uc.SetHasEditAccess(*b)
	}
	return uc
}

// SetLeaderID sets the "leader_id" field.
func (uc *UserCreate) SetLeaderID(x xid.ID) *UserCreate {
	uc.mutation.SetLeaderID(x)
	return uc
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableLeaderID(x *xid.ID) *UserCreate {
	if x != nil {
		uc.SetLeaderID(*x)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(x xid.ID) *UserCreate {
	uc.mutation.SetID(x)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(x *xid.ID) *UserCreate {
	if x != nil {
		uc.SetID(*x)
	}
	return uc
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (uc *UserCreate) AddAreaIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddAreaIDs(ids...)
	return uc
}

// AddAreas adds the "areas" edges to the Area entity.
func (uc *UserCreate) AddAreas(a ...*Area) *UserCreate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAreaIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (uc *UserCreate) AddCustomerIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddCustomerIDs(ids...)
	return uc
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (uc *UserCreate) AddCustomers(c ...*Customer) *UserCreate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCustomerIDs(ids...)
}

// SetLeader sets the "leader" edge to the User entity.
func (uc *UserCreate) SetLeader(u *User) *UserCreate {
	return uc.SetLeaderID(u.ID)
}

// AddTeamMemberIDs adds the "team_members" edge to the User entity by IDs.
func (uc *UserCreate) AddTeamMemberIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddTeamMemberIDs(ids...)
	return uc
}

// AddTeamMembers adds the "team_members" edges to the User entity.
func (uc *UserCreate) AddTeamMembers(u ...*User) *UserCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddTeamMemberIDs(ids...)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (uc *UserCreate) AddTenderIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddTenderIDs(ids...)
	return uc
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (uc *UserCreate) AddTenders(t ...*Tender) *UserCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddTenderIDs(ids...)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (uc *UserCreate) AddVisitRecordIDs(ids ...xid.ID) *UserCreate {
	uc.mutation.AddVisitRecordIDs(ids...)
	return uc
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (uc *UserCreate) AddVisitRecords(v ...*VisitRecord) *UserCreate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uc.AddVisitRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Disabled(); !ok {
		v := user.DefaultDisabled
		uc.mutation.SetDisabled(v)
	}
	if _, ok := uc.mutation.IsSales(); !ok {
		v := user.DefaultIsSales
		uc.mutation.SetIsSales(v)
	}
	if _, ok := uc.mutation.IsAdmin(); !ok {
		v := user.DefaultIsAdmin
		uc.mutation.SetIsAdmin(v)
	}
	if _, ok := uc.mutation.IsLeader(); !ok {
		v := user.DefaultIsLeader
		uc.mutation.SetIsLeader(v)
	}
	if _, ok := uc.mutation.IsSuperAdmin(); !ok {
		v := user.DefaultIsSuperAdmin
		uc.mutation.SetIsSuperAdmin(v)
	}
	if _, ok := uc.mutation.HasMapAccess(); !ok {
		v := user.DefaultHasMapAccess
		uc.mutation.SetHasMapAccess(v)
	}
	if _, ok := uc.mutation.HasEditAccess(); !ok {
		v := user.DefaultHasEditAccess
		uc.mutation.SetHasEditAccess(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "User.disabled"`)}
	}
	if _, ok := uc.mutation.IsSales(); !ok {
		return &ValidationError{Name: "is_sales", err: errors.New(`ent: missing required field "User.is_sales"`)}
	}
	if _, ok := uc.mutation.IsAdmin(); !ok {
		return &ValidationError{Name: "is_admin", err: errors.New(`ent: missing required field "User.is_admin"`)}
	}
	if _, ok := uc.mutation.IsLeader(); !ok {
		return &ValidationError{Name: "is_leader", err: errors.New(`ent: missing required field "User.is_leader"`)}
	}
	if _, ok := uc.mutation.IsSuperAdmin(); !ok {
		return &ValidationError{Name: "is_super_admin", err: errors.New(`ent: missing required field "User.is_super_admin"`)}
	}
	if _, ok := uc.mutation.HasMapAccess(); !ok {
		return &ValidationError{Name: "has_map_access", err: errors.New(`ent: missing required field "User.has_map_access"`)}
	}
	if _, ok := uc.mutation.HasEditAccess(); !ok {
		return &ValidationError{Name: "has_edit_access", err: errors.New(`ent: missing required field "User.has_edit_access"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
		_node.OpenID = &value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = &value
	}
	if value, ok := uc.mutation.Disabled(); ok {
		_spec.SetField(user.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := uc.mutation.IsSales(); ok {
		_spec.SetField(user.FieldIsSales, field.TypeBool, value)
		_node.IsSales = value
	}
	if value, ok := uc.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
		_node.IsAdmin = value
	}
	if value, ok := uc.mutation.IsLeader(); ok {
		_spec.SetField(user.FieldIsLeader, field.TypeBool, value)
		_node.IsLeader = value
	}
	if value, ok := uc.mutation.IsSuperAdmin(); ok {
		_spec.SetField(user.FieldIsSuperAdmin, field.TypeBool, value)
		_node.IsSuperAdmin = value
	}
	if value, ok := uc.mutation.HasMapAccess(); ok {
		_spec.SetField(user.FieldHasMapAccess, field.TypeBool, value)
		_node.HasMapAccess = value
	}
	if value, ok := uc.mutation.HasEditAccess(); ok {
		_spec.SetField(user.FieldHasEditAccess, field.TypeBool, value)
		_node.HasEditAccess = value
	}
	if nodes := uc.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LeaderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TeamMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsert) SetOpenID(v string) *UserUpsert {
	u.Set(user.FieldOpenID, v)
	return u
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateOpenID() *UserUpsert {
	u.SetExcluded(user.FieldOpenID)
	return u
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsert) ClearOpenID() *UserUpsert {
	u.SetNull(user.FieldOpenID)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsert) SetAvatarURL(v string) *UserUpsert {
	u.Set(user.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarURL() *UserUpsert {
	u.SetExcluded(user.FieldAvatarURL)
	return u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserUpsert) ClearAvatarURL() *UserUpsert {
	u.SetNull(user.FieldAvatarURL)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *UserUpsert) SetDisabled(v bool) *UserUpsert {
	u.Set(user.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *UserUpsert) UpdateDisabled() *UserUpsert {
	u.SetExcluded(user.FieldDisabled)
	return u
}

// SetIsSales sets the "is_sales" field.
func (u *UserUpsert) SetIsSales(v bool) *UserUpsert {
	u.Set(user.FieldIsSales, v)
	return u
}

// UpdateIsSales sets the "is_sales" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsSales() *UserUpsert {
	u.SetExcluded(user.FieldIsSales)
	return u
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsert) SetIsAdmin(v bool) *UserUpsert {
	u.Set(user.FieldIsAdmin, v)
	return u
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsAdmin() *UserUpsert {
	u.SetExcluded(user.FieldIsAdmin)
	return u
}

// SetIsLeader sets the "is_leader" field.
func (u *UserUpsert) SetIsLeader(v bool) *UserUpsert {
	u.Set(user.FieldIsLeader, v)
	return u
}

// UpdateIsLeader sets the "is_leader" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsLeader() *UserUpsert {
	u.SetExcluded(user.FieldIsLeader)
	return u
}

// SetIsSuperAdmin sets the "is_super_admin" field.
func (u *UserUpsert) SetIsSuperAdmin(v bool) *UserUpsert {
	u.Set(user.FieldIsSuperAdmin, v)
	return u
}

// UpdateIsSuperAdmin sets the "is_super_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsSuperAdmin() *UserUpsert {
	u.SetExcluded(user.FieldIsSuperAdmin)
	return u
}

// SetHasMapAccess sets the "has_map_access" field.
func (u *UserUpsert) SetHasMapAccess(v bool) *UserUpsert {
	u.Set(user.FieldHasMapAccess, v)
	return u
}

// UpdateHasMapAccess sets the "has_map_access" field to the value that was provided on create.
func (u *UserUpsert) UpdateHasMapAccess() *UserUpsert {
	u.SetExcluded(user.FieldHasMapAccess)
	return u
}

// SetHasEditAccess sets the "has_edit_access" field.
func (u *UserUpsert) SetHasEditAccess(v bool) *UserUpsert {
	u.Set(user.FieldHasEditAccess, v)
	return u
}

// UpdateHasEditAccess sets the "has_edit_access" field to the value that was provided on create.
func (u *UserUpsert) UpdateHasEditAccess() *UserUpsert {
	u.SetExcluded(user.FieldHasEditAccess)
	return u
}

// SetLeaderID sets the "leader_id" field.
func (u *UserUpsert) SetLeaderID(v xid.ID) *UserUpsert {
	u.Set(user.FieldLeaderID, v)
	return u
}

// UpdateLeaderID sets the "leader_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateLeaderID() *UserUpsert {
	u.SetExcluded(user.FieldLeaderID)
	return u
}

// ClearLeaderID clears the value of the "leader_id" field.
func (u *UserUpsert) ClearLeaderID() *UserUpsert {
	u.SetNull(user.FieldLeaderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsertOne) SetOpenID(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateOpenID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsertOne) ClearOpenID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearOpenID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertOne) SetAvatarURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserUpsertOne) ClearAvatarURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarURL()
	})
}

// SetDisabled sets the "disabled" field.
func (u *UserUpsertOne) SetDisabled(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDisabled() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisabled()
	})
}

// SetIsSales sets the "is_sales" field.
func (u *UserUpsertOne) SetIsSales(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsSales(v)
	})
}

// UpdateIsSales sets the "is_sales" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsSales() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsSales()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsertOne) SetIsAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAdmin()
	})
}

// SetIsLeader sets the "is_leader" field.
func (u *UserUpsertOne) SetIsLeader(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsLeader(v)
	})
}

// UpdateIsLeader sets the "is_leader" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsLeader() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsLeader()
	})
}

// SetIsSuperAdmin sets the "is_super_admin" field.
func (u *UserUpsertOne) SetIsSuperAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsSuperAdmin(v)
	})
}

// UpdateIsSuperAdmin sets the "is_super_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsSuperAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsSuperAdmin()
	})
}

// SetHasMapAccess sets the "has_map_access" field.
func (u *UserUpsertOne) SetHasMapAccess(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHasMapAccess(v)
	})
}

// UpdateHasMapAccess sets the "has_map_access" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHasMapAccess() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHasMapAccess()
	})
}

// SetHasEditAccess sets the "has_edit_access" field.
func (u *UserUpsertOne) SetHasEditAccess(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHasEditAccess(v)
	})
}

// UpdateHasEditAccess sets the "has_edit_access" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHasEditAccess() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHasEditAccess()
	})
}

// SetLeaderID sets the "leader_id" field.
func (u *UserUpsertOne) SetLeaderID(v xid.ID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLeaderID(v)
	})
}

// UpdateLeaderID sets the "leader_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLeaderID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLeaderID()
	})
}

// ClearLeaderID clears the value of the "leader_id" field.
func (u *UserUpsertOne) ClearLeaderID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLeaderID()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetOpenID sets the "open_id" field.
func (u *UserUpsertBulk) SetOpenID(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateOpenID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *UserUpsertBulk) ClearOpenID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearOpenID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertBulk) SetAvatarURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *UserUpsertBulk) ClearAvatarURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarURL()
	})
}

// SetDisabled sets the "disabled" field.
func (u *UserUpsertBulk) SetDisabled(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDisabled() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisabled()
	})
}

// SetIsSales sets the "is_sales" field.
func (u *UserUpsertBulk) SetIsSales(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsSales(v)
	})
}

// UpdateIsSales sets the "is_sales" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsSales() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsSales()
	})
}

// SetIsAdmin sets the "is_admin" field.
func (u *UserUpsertBulk) SetIsAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAdmin(v)
	})
}

// UpdateIsAdmin sets the "is_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAdmin()
	})
}

// SetIsLeader sets the "is_leader" field.
func (u *UserUpsertBulk) SetIsLeader(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsLeader(v)
	})
}

// UpdateIsLeader sets the "is_leader" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsLeader() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsLeader()
	})
}

// SetIsSuperAdmin sets the "is_super_admin" field.
func (u *UserUpsertBulk) SetIsSuperAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsSuperAdmin(v)
	})
}

// UpdateIsSuperAdmin sets the "is_super_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsSuperAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsSuperAdmin()
	})
}

// SetHasMapAccess sets the "has_map_access" field.
func (u *UserUpsertBulk) SetHasMapAccess(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHasMapAccess(v)
	})
}

// UpdateHasMapAccess sets the "has_map_access" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHasMapAccess() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHasMapAccess()
	})
}

// SetHasEditAccess sets the "has_edit_access" field.
func (u *UserUpsertBulk) SetHasEditAccess(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHasEditAccess(v)
	})
}

// UpdateHasEditAccess sets the "has_edit_access" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHasEditAccess() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHasEditAccess()
	})
}

// SetLeaderID sets the "leader_id" field.
func (u *UserUpsertBulk) SetLeaderID(v xid.ID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLeaderID(v)
	})
}

// UpdateLeaderID sets the "leader_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLeaderID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLeaderID()
	})
}

// ClearLeaderID clears the value of the "leader_id" field.
func (u *UserUpsertBulk) ClearLeaderID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLeaderID()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
