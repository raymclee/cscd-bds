// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Country is the model entity for the Country schema.
type Country struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Adcode holds the value of the "adcode" field.
	Adcode int `json:"adcode,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Center holds the value of the "center" field.
	Center *geo.GeoJson `json:"center,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CountryQuery when eager-loading is set.
	Edges        CountryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CountryEdges holds the relations/edges for other nodes in the graph.
type CountryEdges struct {
	// Provinces holds the value of the provinces edge.
	Provinces []*Province `json:"provinces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProvinces map[string][]*Province
}

// ProvincesOrErr returns the Provinces value or an error if the edge
// was not loaded in eager-loading.
func (e CountryEdges) ProvincesOrErr() ([]*Province, error) {
	if e.loadedTypes[0] {
		return e.Provinces, nil
	}
	return nil, &NotLoadedError{edge: "provinces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Country) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case country.FieldCenter:
			values[i] = new(geo.GeoJson)
		case country.FieldAdcode:
			values[i] = new(sql.NullInt64)
		case country.FieldName:
			values[i] = new(sql.NullString)
		case country.FieldCreatedAt, country.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case country.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Country fields.
func (c *Country) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case country.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case country.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case country.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case country.FieldAdcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field adcode", values[i])
			} else if value.Valid {
				c.Adcode = int(value.Int64)
			}
		case country.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case country.FieldCenter:
			if value, ok := values[i].(*geo.GeoJson); !ok {
				return fmt.Errorf("unexpected type %T for field center", values[i])
			} else if value != nil {
				c.Center = value
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Country.
// This includes values selected through modifiers, order, etc.
func (c *Country) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryProvinces queries the "provinces" edge of the Country entity.
func (c *Country) QueryProvinces() *ProvinceQuery {
	return NewCountryClient(c.config).QueryProvinces(c)
}

// Update returns a builder for updating this Country.
// Note that you need to call Country.Unwrap() before calling this method if this Country
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Country) Update() *CountryUpdateOne {
	return NewCountryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Country entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Country) Unwrap() *Country {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Country is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Country) String() string {
	var builder strings.Builder
	builder.WriteString("Country(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("adcode=")
	builder.WriteString(fmt.Sprintf("%v", c.Adcode))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("center=")
	builder.WriteString(fmt.Sprintf("%v", c.Center))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProvinces returns the Provinces named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Country) NamedProvinces(name string) ([]*Province, error) {
	if c.Edges.namedProvinces == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedProvinces[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Country) appendNamedProvinces(name string, edges ...*Province) {
	if c.Edges.namedProvinces == nil {
		c.Edges.namedProvinces = make(map[string][]*Province)
	}
	if len(edges) == 0 {
		c.Edges.namedProvinces[name] = []*Province{}
	} else {
		c.Edges.namedProvinces[name] = append(c.Edges.namedProvinces[name], edges...)
	}
}

// Countries is a parsable slice of Country.
type Countries []*Country
