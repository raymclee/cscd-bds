// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlotCreate is the builder for creating a Plot entity.
type PlotCreate struct {
	config
	mutation *PlotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlotCreate) SetCreatedAt(t time.Time) *PlotCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlotCreate) SetNillableCreatedAt(t *time.Time) *PlotCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlotCreate) SetUpdatedAt(t time.Time) *PlotCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlotCreate) SetNillableUpdatedAt(t *time.Time) *PlotCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlotCreate) SetName(s string) *PlotCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetColorHex sets the "color_hex" field.
func (pc *PlotCreate) SetColorHex(s string) *PlotCreate {
	pc.mutation.SetColorHex(s)
	return pc
}

// SetGeoBounds sets the "geo_bounds" field.
func (pc *PlotCreate) SetGeoBounds(f [][]float64) *PlotCreate {
	pc.mutation.SetGeoBounds(f)
	return pc
}

// SetDistrictID sets the "district_id" field.
func (pc *PlotCreate) SetDistrictID(x xid.ID) *PlotCreate {
	pc.mutation.SetDistrictID(x)
	return pc
}

// SetID sets the "id" field.
func (pc *PlotCreate) SetID(x xid.ID) *PlotCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlotCreate) SetNillableID(x *xid.ID) *PlotCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// SetDistrict sets the "district" edge to the District entity.
func (pc *PlotCreate) SetDistrict(d *District) *PlotCreate {
	return pc.SetDistrictID(d.ID)
}

// Mutation returns the PlotMutation object of the builder.
func (pc *PlotCreate) Mutation() *PlotMutation {
	return pc.mutation
}

// Save creates the Plot in the database.
func (pc *PlotCreate) Save(ctx context.Context) (*Plot, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlotCreate) SaveX(ctx context.Context) *Plot {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlotCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlotCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlotCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plot.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := plot.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := plot.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlotCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plot.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Plot.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plot.name"`)}
	}
	if _, ok := pc.mutation.ColorHex(); !ok {
		return &ValidationError{Name: "color_hex", err: errors.New(`ent: missing required field "Plot.color_hex"`)}
	}
	if _, ok := pc.mutation.DistrictID(); !ok {
		return &ValidationError{Name: "district_id", err: errors.New(`ent: missing required field "Plot.district_id"`)}
	}
	if len(pc.mutation.DistrictIDs()) == 0 {
		return &ValidationError{Name: "district", err: errors.New(`ent: missing required edge "Plot.district"`)}
	}
	return nil
}

func (pc *PlotCreate) sqlSave(ctx context.Context) (*Plot, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlotCreate) createSpec() (*Plot, *sqlgraph.CreateSpec) {
	var (
		_node = &Plot{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plot.Table, sqlgraph.NewFieldSpec(plot.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plot.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plot.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.ColorHex(); ok {
		_spec.SetField(plot.FieldColorHex, field.TypeString, value)
		_node.ColorHex = value
	}
	if value, ok := pc.mutation.GeoBounds(); ok {
		_spec.SetField(plot.FieldGeoBounds, field.TypeJSON, value)
		_node.GeoBounds = value
	}
	if nodes := pc.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DistrictID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plot.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlotUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PlotCreate) OnConflict(opts ...sql.ConflictOption) *PlotUpsertOne {
	pc.conflict = opts
	return &PlotUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlotCreate) OnConflictColumns(columns ...string) *PlotUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlotUpsertOne{
		create: pc,
	}
}

type (
	// PlotUpsertOne is the builder for "upsert"-ing
	//  one Plot node.
	PlotUpsertOne struct {
		create *PlotCreate
	}

	// PlotUpsert is the "OnConflict" setter.
	PlotUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlotUpsert) SetUpdatedAt(v time.Time) *PlotUpsert {
	u.Set(plot.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlotUpsert) UpdateUpdatedAt() *PlotUpsert {
	u.SetExcluded(plot.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *PlotUpsert) SetName(v string) *PlotUpsert {
	u.Set(plot.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlotUpsert) UpdateName() *PlotUpsert {
	u.SetExcluded(plot.FieldName)
	return u
}

// SetColorHex sets the "color_hex" field.
func (u *PlotUpsert) SetColorHex(v string) *PlotUpsert {
	u.Set(plot.FieldColorHex, v)
	return u
}

// UpdateColorHex sets the "color_hex" field to the value that was provided on create.
func (u *PlotUpsert) UpdateColorHex() *PlotUpsert {
	u.SetExcluded(plot.FieldColorHex)
	return u
}

// SetGeoBounds sets the "geo_bounds" field.
func (u *PlotUpsert) SetGeoBounds(v [][]float64) *PlotUpsert {
	u.Set(plot.FieldGeoBounds, v)
	return u
}

// UpdateGeoBounds sets the "geo_bounds" field to the value that was provided on create.
func (u *PlotUpsert) UpdateGeoBounds() *PlotUpsert {
	u.SetExcluded(plot.FieldGeoBounds)
	return u
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (u *PlotUpsert) ClearGeoBounds() *PlotUpsert {
	u.SetNull(plot.FieldGeoBounds)
	return u
}

// SetDistrictID sets the "district_id" field.
func (u *PlotUpsert) SetDistrictID(v xid.ID) *PlotUpsert {
	u.Set(plot.FieldDistrictID, v)
	return u
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *PlotUpsert) UpdateDistrictID() *PlotUpsert {
	u.SetExcluded(plot.FieldDistrictID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Plot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlotUpsertOne) UpdateNewValues() *PlotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(plot.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(plot.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plot.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlotUpsertOne) Ignore() *PlotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlotUpsertOne) DoNothing() *PlotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlotCreate.OnConflict
// documentation for more info.
func (u *PlotUpsertOne) Update(set func(*PlotUpsert)) *PlotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlotUpsertOne) SetUpdatedAt(v time.Time) *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlotUpsertOne) UpdateUpdatedAt() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PlotUpsertOne) SetName(v string) *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlotUpsertOne) UpdateName() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateName()
	})
}

// SetColorHex sets the "color_hex" field.
func (u *PlotUpsertOne) SetColorHex(v string) *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.SetColorHex(v)
	})
}

// UpdateColorHex sets the "color_hex" field to the value that was provided on create.
func (u *PlotUpsertOne) UpdateColorHex() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateColorHex()
	})
}

// SetGeoBounds sets the "geo_bounds" field.
func (u *PlotUpsertOne) SetGeoBounds(v [][]float64) *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.SetGeoBounds(v)
	})
}

// UpdateGeoBounds sets the "geo_bounds" field to the value that was provided on create.
func (u *PlotUpsertOne) UpdateGeoBounds() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateGeoBounds()
	})
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (u *PlotUpsertOne) ClearGeoBounds() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.ClearGeoBounds()
	})
}

// SetDistrictID sets the "district_id" field.
func (u *PlotUpsertOne) SetDistrictID(v xid.ID) *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.SetDistrictID(v)
	})
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *PlotUpsertOne) UpdateDistrictID() *PlotUpsertOne {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateDistrictID()
	})
}

// Exec executes the query.
func (u *PlotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlotUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlotUpsertOne.ID is not supported by MySQL driver. Use PlotUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlotUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlotCreateBulk is the builder for creating many Plot entities in bulk.
type PlotCreateBulk struct {
	config
	err      error
	builders []*PlotCreate
	conflict []sql.ConflictOption
}

// Save creates the Plot entities in the database.
func (pcb *PlotCreateBulk) Save(ctx context.Context) ([]*Plot, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plot, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlotCreateBulk) SaveX(ctx context.Context) []*Plot {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlotCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlotCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlotUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlotCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlotUpsertBulk {
	pcb.conflict = opts
	return &PlotUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlotCreateBulk) OnConflictColumns(columns ...string) *PlotUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlotUpsertBulk{
		create: pcb,
	}
}

// PlotUpsertBulk is the builder for "upsert"-ing
// a bulk of Plot nodes.
type PlotUpsertBulk struct {
	create *PlotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Plot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plot.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlotUpsertBulk) UpdateNewValues() *PlotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(plot.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(plot.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlotUpsertBulk) Ignore() *PlotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlotUpsertBulk) DoNothing() *PlotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlotCreateBulk.OnConflict
// documentation for more info.
func (u *PlotUpsertBulk) Update(set func(*PlotUpsert)) *PlotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlotUpsertBulk) SetUpdatedAt(v time.Time) *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlotUpsertBulk) UpdateUpdatedAt() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PlotUpsertBulk) SetName(v string) *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlotUpsertBulk) UpdateName() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateName()
	})
}

// SetColorHex sets the "color_hex" field.
func (u *PlotUpsertBulk) SetColorHex(v string) *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.SetColorHex(v)
	})
}

// UpdateColorHex sets the "color_hex" field to the value that was provided on create.
func (u *PlotUpsertBulk) UpdateColorHex() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateColorHex()
	})
}

// SetGeoBounds sets the "geo_bounds" field.
func (u *PlotUpsertBulk) SetGeoBounds(v [][]float64) *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.SetGeoBounds(v)
	})
}

// UpdateGeoBounds sets the "geo_bounds" field to the value that was provided on create.
func (u *PlotUpsertBulk) UpdateGeoBounds() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateGeoBounds()
	})
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (u *PlotUpsertBulk) ClearGeoBounds() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.ClearGeoBounds()
	})
}

// SetDistrictID sets the "district_id" field.
func (u *PlotUpsertBulk) SetDistrictID(v xid.ID) *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.SetDistrictID(v)
	})
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *PlotUpsertBulk) UpdateDistrictID() *PlotUpsertBulk {
	return u.Update(func(s *PlotUpsert) {
		s.UpdateDistrictID()
	})
}

// Exec executes the query.
func (u *PlotUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
