// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[xid.ID]
	PageInfo       = entgql.PageInfo[xid.ID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AreaEdge is the edge representation of Area.
type AreaEdge struct {
	Node   *Area  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AreaConnection is the connection containing edges to Area.
type AreaConnection struct {
	Edges      []*AreaEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *AreaConnection) build(nodes []*Area, pager *areaPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Area
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Area {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Area {
			return nodes[i]
		}
	}
	c.Edges = make([]*AreaEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AreaEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AreaPaginateOption enables pagination customization.
type AreaPaginateOption func(*areaPager) error

// WithAreaOrder configures pagination ordering.
func WithAreaOrder(order *AreaOrder) AreaPaginateOption {
	if order == nil {
		order = DefaultAreaOrder
	}
	o := *order
	return func(pager *areaPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAreaOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAreaFilter configures pagination filter.
func WithAreaFilter(filter func(*AreaQuery) (*AreaQuery, error)) AreaPaginateOption {
	return func(pager *areaPager) error {
		if filter == nil {
			return errors.New("AreaQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type areaPager struct {
	reverse bool
	order   *AreaOrder
	filter  func(*AreaQuery) (*AreaQuery, error)
}

func newAreaPager(opts []AreaPaginateOption, reverse bool) (*areaPager, error) {
	pager := &areaPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAreaOrder
	}
	return pager, nil
}

func (p *areaPager) applyFilter(query *AreaQuery) (*AreaQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *areaPager) toCursor(a *Area) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *areaPager) applyCursors(query *AreaQuery, after, before *Cursor) (*AreaQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAreaOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *areaPager) applyOrder(query *AreaQuery) *AreaQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAreaOrder.Field {
		query = query.Order(DefaultAreaOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *areaPager) orderExpr(query *AreaQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAreaOrder.Field {
			b.Comma().Ident(DefaultAreaOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Area.
func (a *AreaQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AreaPaginateOption,
) (*AreaConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAreaPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AreaConnection{Edges: []*AreaEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AreaOrderField defines the ordering field of Area.
type AreaOrderField struct {
	// Value extracts the ordering value from the given Area.
	Value    func(*Area) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) area.OrderOption
	toCursor func(*Area) Cursor
}

// AreaOrder defines the ordering of Area.
type AreaOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *AreaOrderField `json:"field"`
}

// DefaultAreaOrder is the default ordering of Area.
var DefaultAreaOrder = &AreaOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AreaOrderField{
		Value: func(a *Area) (ent.Value, error) {
			return a.ID, nil
		},
		column: area.FieldID,
		toTerm: area.ByID,
		toCursor: func(a *Area) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Area into AreaEdge.
func (a *Area) ToEdge(order *AreaOrder) *AreaEdge {
	if order == nil {
		order = DefaultAreaOrder
	}
	return &AreaEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CityEdge is the edge representation of City.
type CityEdge struct {
	Node   *City  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CityConnection is the connection containing edges to City.
type CityConnection struct {
	Edges      []*CityEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CityConnection) build(nodes []*City, pager *cityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *City
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *City {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *City {
			return nodes[i]
		}
	}
	c.Edges = make([]*CityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CityPaginateOption enables pagination customization.
type CityPaginateOption func(*cityPager) error

// WithCityOrder configures pagination ordering.
func WithCityOrder(order *CityOrder) CityPaginateOption {
	if order == nil {
		order = DefaultCityOrder
	}
	o := *order
	return func(pager *cityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCityFilter configures pagination filter.
func WithCityFilter(filter func(*CityQuery) (*CityQuery, error)) CityPaginateOption {
	return func(pager *cityPager) error {
		if filter == nil {
			return errors.New("CityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cityPager struct {
	reverse bool
	order   *CityOrder
	filter  func(*CityQuery) (*CityQuery, error)
}

func newCityPager(opts []CityPaginateOption, reverse bool) (*cityPager, error) {
	pager := &cityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCityOrder
	}
	return pager, nil
}

func (p *cityPager) applyFilter(query *CityQuery) (*CityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cityPager) toCursor(c *City) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cityPager) applyCursors(query *CityQuery, after, before *Cursor) (*CityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cityPager) applyOrder(query *CityQuery) *CityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCityOrder.Field {
		query = query.Order(DefaultCityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *cityPager) orderExpr(query *CityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCityOrder.Field {
			b.Comma().Ident(DefaultCityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to City.
func (c *CityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CityPaginateOption,
) (*CityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CityConnection{Edges: []*CityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CityOrderField defines the ordering field of City.
type CityOrderField struct {
	// Value extracts the ordering value from the given City.
	Value    func(*City) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) city.OrderOption
	toCursor func(*City) Cursor
}

// CityOrder defines the ordering of City.
type CityOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CityOrderField `json:"field"`
}

// DefaultCityOrder is the default ordering of City.
var DefaultCityOrder = &CityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CityOrderField{
		Value: func(c *City) (ent.Value, error) {
			return c.ID, nil
		},
		column: city.FieldID,
		toTerm: city.ByID,
		toCursor: func(c *City) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts City into CityEdge.
func (c *City) ToEdge(order *CityOrder) *CityEdge {
	if order == nil {
		order = DefaultCityOrder
	}
	return &CityEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CountryEdge is the edge representation of Country.
type CountryEdge struct {
	Node   *Country `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CountryConnection is the connection containing edges to Country.
type CountryConnection struct {
	Edges      []*CountryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CountryConnection) build(nodes []*Country, pager *countryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Country
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Country {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Country {
			return nodes[i]
		}
	}
	c.Edges = make([]*CountryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CountryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CountryPaginateOption enables pagination customization.
type CountryPaginateOption func(*countryPager) error

// WithCountryOrder configures pagination ordering.
func WithCountryOrder(order *CountryOrder) CountryPaginateOption {
	if order == nil {
		order = DefaultCountryOrder
	}
	o := *order
	return func(pager *countryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCountryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCountryFilter configures pagination filter.
func WithCountryFilter(filter func(*CountryQuery) (*CountryQuery, error)) CountryPaginateOption {
	return func(pager *countryPager) error {
		if filter == nil {
			return errors.New("CountryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type countryPager struct {
	reverse bool
	order   *CountryOrder
	filter  func(*CountryQuery) (*CountryQuery, error)
}

func newCountryPager(opts []CountryPaginateOption, reverse bool) (*countryPager, error) {
	pager := &countryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCountryOrder
	}
	return pager, nil
}

func (p *countryPager) applyFilter(query *CountryQuery) (*CountryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *countryPager) toCursor(c *Country) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *countryPager) applyCursors(query *CountryQuery, after, before *Cursor) (*CountryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCountryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *countryPager) applyOrder(query *CountryQuery) *CountryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCountryOrder.Field {
		query = query.Order(DefaultCountryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *countryPager) orderExpr(query *CountryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCountryOrder.Field {
			b.Comma().Ident(DefaultCountryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Country.
func (c *CountryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CountryPaginateOption,
) (*CountryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCountryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CountryConnection{Edges: []*CountryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CountryOrderField defines the ordering field of Country.
type CountryOrderField struct {
	// Value extracts the ordering value from the given Country.
	Value    func(*Country) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) country.OrderOption
	toCursor func(*Country) Cursor
}

// CountryOrder defines the ordering of Country.
type CountryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CountryOrderField `json:"field"`
}

// DefaultCountryOrder is the default ordering of Country.
var DefaultCountryOrder = &CountryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CountryOrderField{
		Value: func(c *Country) (ent.Value, error) {
			return c.ID, nil
		},
		column: country.FieldID,
		toTerm: country.ByID,
		toCursor: func(c *Country) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Country into CountryEdge.
func (c *Country) ToEdge(order *CountryOrder) *CountryEdge {
	if order == nil {
		order = DefaultCountryOrder
	}
	return &CountryEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CustomerEdge is the edge representation of Customer.
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CustomerConnection is the connection containing edges to Customer.
type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CustomerConnection) build(nodes []*Customer, pager *customerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Customer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Customer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Customer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerPaginateOption enables pagination customization.
type CustomerPaginateOption func(*customerPager) error

// WithCustomerOrder configures pagination ordering.
func WithCustomerOrder(order *CustomerOrder) CustomerPaginateOption {
	if order == nil {
		order = DefaultCustomerOrder
	}
	o := *order
	return func(pager *customerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCustomerFilter configures pagination filter.
func WithCustomerFilter(filter func(*CustomerQuery) (*CustomerQuery, error)) CustomerPaginateOption {
	return func(pager *customerPager) error {
		if filter == nil {
			return errors.New("CustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerPager struct {
	reverse bool
	order   *CustomerOrder
	filter  func(*CustomerQuery) (*CustomerQuery, error)
}

func newCustomerPager(opts []CustomerPaginateOption, reverse bool) (*customerPager, error) {
	pager := &customerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCustomerOrder
	}
	return pager, nil
}

func (p *customerPager) applyFilter(query *CustomerQuery) (*CustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerPager) toCursor(c *Customer) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *customerPager) applyCursors(query *CustomerQuery, after, before *Cursor) (*CustomerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCustomerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *customerPager) applyOrder(query *CustomerQuery) *CustomerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCustomerOrder.Field {
		query = query.Order(DefaultCustomerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *customerPager) orderExpr(query *CustomerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCustomerOrder.Field {
			b.Comma().Ident(DefaultCustomerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Customer.
func (c *CustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerPaginateOption,
) (*CustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CustomerConnection{Edges: []*CustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CustomerOrderFieldName orders Customer by name.
	CustomerOrderFieldName = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.Name, nil
		},
		column: customer.FieldName,
		toTerm: customer.ByName,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
	// CustomerOrderFieldOwnerType orders Customer by owner_type.
	CustomerOrderFieldOwnerType = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.OwnerType, nil
		},
		column: customer.FieldOwnerType,
		toTerm: customer.ByOwnerType,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.OwnerType,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CustomerOrderField) String() string {
	var str string
	switch f.column {
	case CustomerOrderFieldName.column:
		str = "NAME"
	case CustomerOrderFieldOwnerType.column:
		str = "OWNER_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CustomerOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *CustomerOrderFieldName
	case "OWNER_TYPE":
		*f = *CustomerOrderFieldOwnerType
	default:
		return fmt.Errorf("%s is not a valid CustomerOrderField", str)
	}
	return nil
}

// CustomerOrderField defines the ordering field of Customer.
type CustomerOrderField struct {
	// Value extracts the ordering value from the given Customer.
	Value    func(*Customer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) customer.OrderOption
	toCursor func(*Customer) Cursor
}

// CustomerOrder defines the ordering of Customer.
type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field"`
}

// DefaultCustomerOrder is the default ordering of Customer.
var DefaultCustomerOrder = &CustomerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.ID, nil
		},
		column: customer.FieldID,
		toTerm: customer.ByID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Customer into CustomerEdge.
func (c *Customer) ToEdge(order *CustomerOrder) *CustomerEdge {
	if order == nil {
		order = DefaultCustomerOrder
	}
	return &CustomerEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DistrictEdge is the edge representation of District.
type DistrictEdge struct {
	Node   *District `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// DistrictConnection is the connection containing edges to District.
type DistrictConnection struct {
	Edges      []*DistrictEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *DistrictConnection) build(nodes []*District, pager *districtPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *District
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *District {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *District {
			return nodes[i]
		}
	}
	c.Edges = make([]*DistrictEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DistrictEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DistrictPaginateOption enables pagination customization.
type DistrictPaginateOption func(*districtPager) error

// WithDistrictOrder configures pagination ordering.
func WithDistrictOrder(order *DistrictOrder) DistrictPaginateOption {
	if order == nil {
		order = DefaultDistrictOrder
	}
	o := *order
	return func(pager *districtPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDistrictOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDistrictFilter configures pagination filter.
func WithDistrictFilter(filter func(*DistrictQuery) (*DistrictQuery, error)) DistrictPaginateOption {
	return func(pager *districtPager) error {
		if filter == nil {
			return errors.New("DistrictQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type districtPager struct {
	reverse bool
	order   *DistrictOrder
	filter  func(*DistrictQuery) (*DistrictQuery, error)
}

func newDistrictPager(opts []DistrictPaginateOption, reverse bool) (*districtPager, error) {
	pager := &districtPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDistrictOrder
	}
	return pager, nil
}

func (p *districtPager) applyFilter(query *DistrictQuery) (*DistrictQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *districtPager) toCursor(d *District) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *districtPager) applyCursors(query *DistrictQuery, after, before *Cursor) (*DistrictQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDistrictOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *districtPager) applyOrder(query *DistrictQuery) *DistrictQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDistrictOrder.Field {
		query = query.Order(DefaultDistrictOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *districtPager) orderExpr(query *DistrictQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDistrictOrder.Field {
			b.Comma().Ident(DefaultDistrictOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to District.
func (d *DistrictQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DistrictPaginateOption,
) (*DistrictConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDistrictPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DistrictConnection{Edges: []*DistrictEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := d.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DistrictOrderField defines the ordering field of District.
type DistrictOrderField struct {
	// Value extracts the ordering value from the given District.
	Value    func(*District) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) district.OrderOption
	toCursor func(*District) Cursor
}

// DistrictOrder defines the ordering of District.
type DistrictOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *DistrictOrderField `json:"field"`
}

// DefaultDistrictOrder is the default ordering of District.
var DefaultDistrictOrder = &DistrictOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DistrictOrderField{
		Value: func(d *District) (ent.Value, error) {
			return d.ID, nil
		},
		column: district.FieldID,
		toTerm: district.ByID,
		toCursor: func(d *District) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts District into DistrictEdge.
func (d *District) ToEdge(order *DistrictOrder) *DistrictEdge {
	if order == nil {
		order = DefaultDistrictOrder
	}
	return &DistrictEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// PlotEdge is the edge representation of Plot.
type PlotEdge struct {
	Node   *Plot  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PlotConnection is the connection containing edges to Plot.
type PlotConnection struct {
	Edges      []*PlotEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PlotConnection) build(nodes []*Plot, pager *plotPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Plot
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Plot {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Plot {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlotEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlotEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlotPaginateOption enables pagination customization.
type PlotPaginateOption func(*plotPager) error

// WithPlotOrder configures pagination ordering.
func WithPlotOrder(order *PlotOrder) PlotPaginateOption {
	if order == nil {
		order = DefaultPlotOrder
	}
	o := *order
	return func(pager *plotPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlotOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlotFilter configures pagination filter.
func WithPlotFilter(filter func(*PlotQuery) (*PlotQuery, error)) PlotPaginateOption {
	return func(pager *plotPager) error {
		if filter == nil {
			return errors.New("PlotQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type plotPager struct {
	reverse bool
	order   *PlotOrder
	filter  func(*PlotQuery) (*PlotQuery, error)
}

func newPlotPager(opts []PlotPaginateOption, reverse bool) (*plotPager, error) {
	pager := &plotPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlotOrder
	}
	return pager, nil
}

func (p *plotPager) applyFilter(query *PlotQuery) (*PlotQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *plotPager) toCursor(pl *Plot) Cursor {
	return p.order.Field.toCursor(pl)
}

func (p *plotPager) applyCursors(query *PlotQuery, after, before *Cursor) (*PlotQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlotOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *plotPager) applyOrder(query *PlotQuery) *PlotQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlotOrder.Field {
		query = query.Order(DefaultPlotOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *plotPager) orderExpr(query *PlotQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlotOrder.Field {
			b.Comma().Ident(DefaultPlotOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Plot.
func (pl *PlotQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlotPaginateOption,
) (*PlotConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlotPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pl, err = pager.applyFilter(pl); err != nil {
		return nil, err
	}
	conn := &PlotConnection{Edges: []*PlotEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pl.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pl, err = pager.applyCursors(pl, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pl.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pl = pager.applyOrder(pl)
	nodes, err := pl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlotOrderField defines the ordering field of Plot.
type PlotOrderField struct {
	// Value extracts the ordering value from the given Plot.
	Value    func(*Plot) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) plot.OrderOption
	toCursor func(*Plot) Cursor
}

// PlotOrder defines the ordering of Plot.
type PlotOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PlotOrderField `json:"field"`
}

// DefaultPlotOrder is the default ordering of Plot.
var DefaultPlotOrder = &PlotOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlotOrderField{
		Value: func(pl *Plot) (ent.Value, error) {
			return pl.ID, nil
		},
		column: plot.FieldID,
		toTerm: plot.ByID,
		toCursor: func(pl *Plot) Cursor {
			return Cursor{ID: pl.ID}
		},
	},
}

// ToEdge converts Plot into PlotEdge.
func (pl *Plot) ToEdge(order *PlotOrder) *PlotEdge {
	if order == nil {
		order = DefaultPlotOrder
	}
	return &PlotEdge{
		Node:   pl,
		Cursor: order.Field.toCursor(pl),
	}
}

// ProvinceEdge is the edge representation of Province.
type ProvinceEdge struct {
	Node   *Province `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ProvinceConnection is the connection containing edges to Province.
type ProvinceConnection struct {
	Edges      []*ProvinceEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ProvinceConnection) build(nodes []*Province, pager *provincePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Province
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Province {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Province {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProvinceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProvinceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProvincePaginateOption enables pagination customization.
type ProvincePaginateOption func(*provincePager) error

// WithProvinceOrder configures pagination ordering.
func WithProvinceOrder(order *ProvinceOrder) ProvincePaginateOption {
	if order == nil {
		order = DefaultProvinceOrder
	}
	o := *order
	return func(pager *provincePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProvinceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProvinceFilter configures pagination filter.
func WithProvinceFilter(filter func(*ProvinceQuery) (*ProvinceQuery, error)) ProvincePaginateOption {
	return func(pager *provincePager) error {
		if filter == nil {
			return errors.New("ProvinceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type provincePager struct {
	reverse bool
	order   *ProvinceOrder
	filter  func(*ProvinceQuery) (*ProvinceQuery, error)
}

func newProvincePager(opts []ProvincePaginateOption, reverse bool) (*provincePager, error) {
	pager := &provincePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProvinceOrder
	}
	return pager, nil
}

func (p *provincePager) applyFilter(query *ProvinceQuery) (*ProvinceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *provincePager) toCursor(pr *Province) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *provincePager) applyCursors(query *ProvinceQuery, after, before *Cursor) (*ProvinceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProvinceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *provincePager) applyOrder(query *ProvinceQuery) *ProvinceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProvinceOrder.Field {
		query = query.Order(DefaultProvinceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *provincePager) orderExpr(query *ProvinceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProvinceOrder.Field {
			b.Comma().Ident(DefaultProvinceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Province.
func (pr *ProvinceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProvincePaginateOption,
) (*ProvinceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProvincePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProvinceConnection{Edges: []*ProvinceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProvinceOrderField defines the ordering field of Province.
type ProvinceOrderField struct {
	// Value extracts the ordering value from the given Province.
	Value    func(*Province) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) province.OrderOption
	toCursor func(*Province) Cursor
}

// ProvinceOrder defines the ordering of Province.
type ProvinceOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ProvinceOrderField `json:"field"`
}

// DefaultProvinceOrder is the default ordering of Province.
var DefaultProvinceOrder = &ProvinceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProvinceOrderField{
		Value: func(pr *Province) (ent.Value, error) {
			return pr.ID, nil
		},
		column: province.FieldID,
		toTerm: province.ByID,
		toCursor: func(pr *Province) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Province into ProvinceEdge.
func (pr *Province) ToEdge(order *ProvinceOrder) *ProvinceEdge {
	if order == nil {
		order = DefaultProvinceOrder
	}
	return &ProvinceEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// TenderEdge is the edge representation of Tender.
type TenderEdge struct {
	Node   *Tender `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TenderConnection is the connection containing edges to Tender.
type TenderConnection struct {
	Edges      []*TenderEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TenderConnection) build(nodes []*Tender, pager *tenderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tender
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tender {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tender {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenderPaginateOption enables pagination customization.
type TenderPaginateOption func(*tenderPager) error

// WithTenderOrder configures pagination ordering.
func WithTenderOrder(order *TenderOrder) TenderPaginateOption {
	if order == nil {
		order = DefaultTenderOrder
	}
	o := *order
	return func(pager *tenderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTenderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTenderFilter configures pagination filter.
func WithTenderFilter(filter func(*TenderQuery) (*TenderQuery, error)) TenderPaginateOption {
	return func(pager *tenderPager) error {
		if filter == nil {
			return errors.New("TenderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenderPager struct {
	reverse bool
	order   *TenderOrder
	filter  func(*TenderQuery) (*TenderQuery, error)
}

func newTenderPager(opts []TenderPaginateOption, reverse bool) (*tenderPager, error) {
	pager := &tenderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTenderOrder
	}
	return pager, nil
}

func (p *tenderPager) applyFilter(query *TenderQuery) (*TenderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenderPager) toCursor(t *Tender) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tenderPager) applyCursors(query *TenderQuery, after, before *Cursor) (*TenderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTenderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenderPager) applyOrder(query *TenderQuery) *TenderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTenderOrder.Field {
		query = query.Order(DefaultTenderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tenderPager) orderExpr(query *TenderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTenderOrder.Field {
			b.Comma().Ident(DefaultTenderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tender.
func (t *TenderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenderPaginateOption,
) (*TenderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TenderConnection{Edges: []*TenderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenderOrderFieldName orders Tender by name.
	TenderOrderFieldName = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.Name, nil
		},
		column: tender.FieldName,
		toTerm: tender.ByName,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenderOrderField) String() string {
	var str string
	switch f.column {
	case TenderOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenderOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *TenderOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid TenderOrderField", str)
	}
	return nil
}

// TenderOrderField defines the ordering field of Tender.
type TenderOrderField struct {
	// Value extracts the ordering value from the given Tender.
	Value    func(*Tender) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tender.OrderOption
	toCursor func(*Tender) Cursor
}

// TenderOrder defines the ordering of Tender.
type TenderOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TenderOrderField `json:"field"`
}

// DefaultTenderOrder is the default ordering of Tender.
var DefaultTenderOrder = &TenderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.ID, nil
		},
		column: tender.FieldID,
		toTerm: tender.ByID,
		toCursor: func(t *Tender) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tender into TenderEdge.
func (t *Tender) ToEdge(order *TenderOrder) *TenderEdge {
	if order == nil {
		order = DefaultTenderOrder
	}
	return &TenderEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// VisitRecordEdge is the edge representation of VisitRecord.
type VisitRecordEdge struct {
	Node   *VisitRecord `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// VisitRecordConnection is the connection containing edges to VisitRecord.
type VisitRecordConnection struct {
	Edges      []*VisitRecordEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *VisitRecordConnection) build(nodes []*VisitRecord, pager *visitrecordPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VisitRecord
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VisitRecord {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VisitRecord {
			return nodes[i]
		}
	}
	c.Edges = make([]*VisitRecordEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VisitRecordEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VisitRecordPaginateOption enables pagination customization.
type VisitRecordPaginateOption func(*visitrecordPager) error

// WithVisitRecordOrder configures pagination ordering.
func WithVisitRecordOrder(order *VisitRecordOrder) VisitRecordPaginateOption {
	if order == nil {
		order = DefaultVisitRecordOrder
	}
	o := *order
	return func(pager *visitrecordPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVisitRecordOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVisitRecordFilter configures pagination filter.
func WithVisitRecordFilter(filter func(*VisitRecordQuery) (*VisitRecordQuery, error)) VisitRecordPaginateOption {
	return func(pager *visitrecordPager) error {
		if filter == nil {
			return errors.New("VisitRecordQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type visitrecordPager struct {
	reverse bool
	order   *VisitRecordOrder
	filter  func(*VisitRecordQuery) (*VisitRecordQuery, error)
}

func newVisitRecordPager(opts []VisitRecordPaginateOption, reverse bool) (*visitrecordPager, error) {
	pager := &visitrecordPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVisitRecordOrder
	}
	return pager, nil
}

func (p *visitrecordPager) applyFilter(query *VisitRecordQuery) (*VisitRecordQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *visitrecordPager) toCursor(vr *VisitRecord) Cursor {
	return p.order.Field.toCursor(vr)
}

func (p *visitrecordPager) applyCursors(query *VisitRecordQuery, after, before *Cursor) (*VisitRecordQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVisitRecordOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *visitrecordPager) applyOrder(query *VisitRecordQuery) *VisitRecordQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVisitRecordOrder.Field {
		query = query.Order(DefaultVisitRecordOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *visitrecordPager) orderExpr(query *VisitRecordQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVisitRecordOrder.Field {
			b.Comma().Ident(DefaultVisitRecordOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VisitRecord.
func (vr *VisitRecordQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VisitRecordPaginateOption,
) (*VisitRecordConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVisitRecordPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vr, err = pager.applyFilter(vr); err != nil {
		return nil, err
	}
	conn := &VisitRecordConnection{Edges: []*VisitRecordEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vr, err = pager.applyCursors(vr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vr = pager.applyOrder(vr)
	nodes, err := vr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VisitRecordOrderField defines the ordering field of VisitRecord.
type VisitRecordOrderField struct {
	// Value extracts the ordering value from the given VisitRecord.
	Value    func(*VisitRecord) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) visitrecord.OrderOption
	toCursor func(*VisitRecord) Cursor
}

// VisitRecordOrder defines the ordering of VisitRecord.
type VisitRecordOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *VisitRecordOrderField `json:"field"`
}

// DefaultVisitRecordOrder is the default ordering of VisitRecord.
var DefaultVisitRecordOrder = &VisitRecordOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VisitRecordOrderField{
		Value: func(vr *VisitRecord) (ent.Value, error) {
			return vr.ID, nil
		},
		column: visitrecord.FieldID,
		toTerm: visitrecord.ByID,
		toCursor: func(vr *VisitRecord) Cursor {
			return Cursor{ID: vr.ID}
		},
	},
}

// ToEdge converts VisitRecord into VisitRecordEdge.
func (vr *VisitRecord) ToEdge(order *VisitRecordOrder) *VisitRecordEdge {
	if order == nil {
		order = DefaultVisitRecordOrder
	}
	return &VisitRecordEdge{
		Node:   vr,
		Cursor: order.Field.toCursor(vr),
	}
}
