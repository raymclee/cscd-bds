// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/potentialtender"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[xid.ID]
	PageInfo       = entgql.PageInfo[xid.ID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AreaEdge is the edge representation of Area.
type AreaEdge struct {
	Node   *Area  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AreaConnection is the connection containing edges to Area.
type AreaConnection struct {
	Edges      []*AreaEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *AreaConnection) build(nodes []*Area, pager *areaPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Area
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Area {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Area {
			return nodes[i]
		}
	}
	c.Edges = make([]*AreaEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AreaEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AreaPaginateOption enables pagination customization.
type AreaPaginateOption func(*areaPager) error

// WithAreaOrder configures pagination ordering.
func WithAreaOrder(order *AreaOrder) AreaPaginateOption {
	if order == nil {
		order = DefaultAreaOrder
	}
	o := *order
	return func(pager *areaPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAreaOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAreaFilter configures pagination filter.
func WithAreaFilter(filter func(*AreaQuery) (*AreaQuery, error)) AreaPaginateOption {
	return func(pager *areaPager) error {
		if filter == nil {
			return errors.New("AreaQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type areaPager struct {
	reverse bool
	order   *AreaOrder
	filter  func(*AreaQuery) (*AreaQuery, error)
}

func newAreaPager(opts []AreaPaginateOption, reverse bool) (*areaPager, error) {
	pager := &areaPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAreaOrder
	}
	return pager, nil
}

func (p *areaPager) applyFilter(query *AreaQuery) (*AreaQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *areaPager) toCursor(a *Area) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *areaPager) applyCursors(query *AreaQuery, after, before *Cursor) (*AreaQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAreaOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *areaPager) applyOrder(query *AreaQuery) *AreaQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAreaOrder.Field {
		query = query.Order(DefaultAreaOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *areaPager) orderExpr(query *AreaQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAreaOrder.Field {
			b.Comma().Ident(DefaultAreaOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Area.
func (a *AreaQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AreaPaginateOption,
) (*AreaConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAreaPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AreaConnection{Edges: []*AreaEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AreaOrderFieldCreatedAt orders Area by created_at.
	AreaOrderFieldCreatedAt = &AreaOrderField{
		Value: func(a *Area) (ent.Value, error) {
			return a.CreatedAt, nil
		},
		column: area.FieldCreatedAt,
		toTerm: area.ByCreatedAt,
		toCursor: func(a *Area) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AreaOrderField) String() string {
	var str string
	switch f.column {
	case AreaOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AreaOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AreaOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AreaOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AreaOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AreaOrderField", str)
	}
	return nil
}

// AreaOrderField defines the ordering field of Area.
type AreaOrderField struct {
	// Value extracts the ordering value from the given Area.
	Value    func(*Area) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) area.OrderOption
	toCursor func(*Area) Cursor
}

// AreaOrder defines the ordering of Area.
type AreaOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *AreaOrderField `json:"field"`
}

// DefaultAreaOrder is the default ordering of Area.
var DefaultAreaOrder = &AreaOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AreaOrderField{
		Value: func(a *Area) (ent.Value, error) {
			return a.ID, nil
		},
		column: area.FieldID,
		toTerm: area.ByID,
		toCursor: func(a *Area) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Area into AreaEdge.
func (a *Area) ToEdge(order *AreaOrder) *AreaEdge {
	if order == nil {
		order = DefaultAreaOrder
	}
	return &AreaEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CityEdge is the edge representation of City.
type CityEdge struct {
	Node   *City  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CityConnection is the connection containing edges to City.
type CityConnection struct {
	Edges      []*CityEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CityConnection) build(nodes []*City, pager *cityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *City
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *City {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *City {
			return nodes[i]
		}
	}
	c.Edges = make([]*CityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CityPaginateOption enables pagination customization.
type CityPaginateOption func(*cityPager) error

// WithCityOrder configures pagination ordering.
func WithCityOrder(order *CityOrder) CityPaginateOption {
	if order == nil {
		order = DefaultCityOrder
	}
	o := *order
	return func(pager *cityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCityFilter configures pagination filter.
func WithCityFilter(filter func(*CityQuery) (*CityQuery, error)) CityPaginateOption {
	return func(pager *cityPager) error {
		if filter == nil {
			return errors.New("CityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cityPager struct {
	reverse bool
	order   *CityOrder
	filter  func(*CityQuery) (*CityQuery, error)
}

func newCityPager(opts []CityPaginateOption, reverse bool) (*cityPager, error) {
	pager := &cityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCityOrder
	}
	return pager, nil
}

func (p *cityPager) applyFilter(query *CityQuery) (*CityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cityPager) toCursor(c *City) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cityPager) applyCursors(query *CityQuery, after, before *Cursor) (*CityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cityPager) applyOrder(query *CityQuery) *CityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCityOrder.Field {
		query = query.Order(DefaultCityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *cityPager) orderExpr(query *CityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCityOrder.Field {
			b.Comma().Ident(DefaultCityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to City.
func (c *CityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CityPaginateOption,
) (*CityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CityConnection{Edges: []*CityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CityOrderFieldCreatedAt orders City by created_at.
	CityOrderFieldCreatedAt = &CityOrderField{
		Value: func(c *City) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: city.FieldCreatedAt,
		toTerm: city.ByCreatedAt,
		toCursor: func(c *City) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CityOrderField) String() string {
	var str string
	switch f.column {
	case CityOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CityOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CityOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CityOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid CityOrderField", str)
	}
	return nil
}

// CityOrderField defines the ordering field of City.
type CityOrderField struct {
	// Value extracts the ordering value from the given City.
	Value    func(*City) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) city.OrderOption
	toCursor func(*City) Cursor
}

// CityOrder defines the ordering of City.
type CityOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CityOrderField `json:"field"`
}

// DefaultCityOrder is the default ordering of City.
var DefaultCityOrder = &CityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CityOrderField{
		Value: func(c *City) (ent.Value, error) {
			return c.ID, nil
		},
		column: city.FieldID,
		toTerm: city.ByID,
		toCursor: func(c *City) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts City into CityEdge.
func (c *City) ToEdge(order *CityOrder) *CityEdge {
	if order == nil {
		order = DefaultCityOrder
	}
	return &CityEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CompetitorEdge is the edge representation of Competitor.
type CompetitorEdge struct {
	Node   *Competitor `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// CompetitorConnection is the connection containing edges to Competitor.
type CompetitorConnection struct {
	Edges      []*CompetitorEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *CompetitorConnection) build(nodes []*Competitor, pager *competitorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Competitor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Competitor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Competitor {
			return nodes[i]
		}
	}
	c.Edges = make([]*CompetitorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CompetitorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CompetitorPaginateOption enables pagination customization.
type CompetitorPaginateOption func(*competitorPager) error

// WithCompetitorOrder configures pagination ordering.
func WithCompetitorOrder(order []*CompetitorOrder) CompetitorPaginateOption {
	return func(pager *competitorPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCompetitorFilter configures pagination filter.
func WithCompetitorFilter(filter func(*CompetitorQuery) (*CompetitorQuery, error)) CompetitorPaginateOption {
	return func(pager *competitorPager) error {
		if filter == nil {
			return errors.New("CompetitorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type competitorPager struct {
	reverse bool
	order   []*CompetitorOrder
	filter  func(*CompetitorQuery) (*CompetitorQuery, error)
}

func newCompetitorPager(opts []CompetitorPaginateOption, reverse bool) (*competitorPager, error) {
	pager := &competitorPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *competitorPager) applyFilter(query *CompetitorQuery) (*CompetitorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *competitorPager) toCursor(c *Competitor) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(c).Value)
	}
	return Cursor{ID: c.ID, Value: cs_}
}

func (p *competitorPager) applyCursors(query *CompetitorQuery, after, before *Cursor) (*CompetitorQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCompetitorOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *competitorPager) applyOrder(query *CompetitorQuery) *CompetitorQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCompetitorOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCompetitorOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *competitorPager) orderExpr(query *CompetitorQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCompetitorOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Competitor.
func (c *CompetitorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CompetitorPaginateOption,
) (*CompetitorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCompetitorPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CompetitorConnection{Edges: []*CompetitorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CompetitorOrderFieldCreatedAt orders Competitor by created_at.
	CompetitorOrderFieldCreatedAt = &CompetitorOrderField{
		Value: func(c *Competitor) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: competitor.FieldCreatedAt,
		toTerm: competitor.ByCreatedAt,
		toCursor: func(c *Competitor) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CompetitorOrderFieldName orders Competitor by name.
	CompetitorOrderFieldName = &CompetitorOrderField{
		Value: func(c *Competitor) (ent.Value, error) {
			return c.Name, nil
		},
		column: competitor.FieldName,
		toTerm: competitor.ByName,
		toCursor: func(c *Competitor) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CompetitorOrderField) String() string {
	var str string
	switch f.column {
	case CompetitorOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CompetitorOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CompetitorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CompetitorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CompetitorOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CompetitorOrderFieldCreatedAt
	case "NAME":
		*f = *CompetitorOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid CompetitorOrderField", str)
	}
	return nil
}

// CompetitorOrderField defines the ordering field of Competitor.
type CompetitorOrderField struct {
	// Value extracts the ordering value from the given Competitor.
	Value    func(*Competitor) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) competitor.OrderOption
	toCursor func(*Competitor) Cursor
}

// CompetitorOrder defines the ordering of Competitor.
type CompetitorOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *CompetitorOrderField `json:"field"`
}

// DefaultCompetitorOrder is the default ordering of Competitor.
var DefaultCompetitorOrder = &CompetitorOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CompetitorOrderField{
		Value: func(c *Competitor) (ent.Value, error) {
			return c.ID, nil
		},
		column: competitor.FieldID,
		toTerm: competitor.ByID,
		toCursor: func(c *Competitor) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Competitor into CompetitorEdge.
func (c *Competitor) ToEdge(order *CompetitorOrder) *CompetitorEdge {
	if order == nil {
		order = DefaultCompetitorOrder
	}
	return &CompetitorEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CountryEdge is the edge representation of Country.
type CountryEdge struct {
	Node   *Country `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CountryConnection is the connection containing edges to Country.
type CountryConnection struct {
	Edges      []*CountryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CountryConnection) build(nodes []*Country, pager *countryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Country
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Country {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Country {
			return nodes[i]
		}
	}
	c.Edges = make([]*CountryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CountryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CountryPaginateOption enables pagination customization.
type CountryPaginateOption func(*countryPager) error

// WithCountryOrder configures pagination ordering.
func WithCountryOrder(order *CountryOrder) CountryPaginateOption {
	if order == nil {
		order = DefaultCountryOrder
	}
	o := *order
	return func(pager *countryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCountryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCountryFilter configures pagination filter.
func WithCountryFilter(filter func(*CountryQuery) (*CountryQuery, error)) CountryPaginateOption {
	return func(pager *countryPager) error {
		if filter == nil {
			return errors.New("CountryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type countryPager struct {
	reverse bool
	order   *CountryOrder
	filter  func(*CountryQuery) (*CountryQuery, error)
}

func newCountryPager(opts []CountryPaginateOption, reverse bool) (*countryPager, error) {
	pager := &countryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCountryOrder
	}
	return pager, nil
}

func (p *countryPager) applyFilter(query *CountryQuery) (*CountryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *countryPager) toCursor(c *Country) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *countryPager) applyCursors(query *CountryQuery, after, before *Cursor) (*CountryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCountryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *countryPager) applyOrder(query *CountryQuery) *CountryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCountryOrder.Field {
		query = query.Order(DefaultCountryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *countryPager) orderExpr(query *CountryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCountryOrder.Field {
			b.Comma().Ident(DefaultCountryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Country.
func (c *CountryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CountryPaginateOption,
) (*CountryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCountryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CountryConnection{Edges: []*CountryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CountryOrderFieldCreatedAt orders Country by created_at.
	CountryOrderFieldCreatedAt = &CountryOrderField{
		Value: func(c *Country) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: country.FieldCreatedAt,
		toTerm: country.ByCreatedAt,
		toCursor: func(c *Country) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CountryOrderField) String() string {
	var str string
	switch f.column {
	case CountryOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CountryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CountryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CountryOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CountryOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid CountryOrderField", str)
	}
	return nil
}

// CountryOrderField defines the ordering field of Country.
type CountryOrderField struct {
	// Value extracts the ordering value from the given Country.
	Value    func(*Country) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) country.OrderOption
	toCursor func(*Country) Cursor
}

// CountryOrder defines the ordering of Country.
type CountryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CountryOrderField `json:"field"`
}

// DefaultCountryOrder is the default ordering of Country.
var DefaultCountryOrder = &CountryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CountryOrderField{
		Value: func(c *Country) (ent.Value, error) {
			return c.ID, nil
		},
		column: country.FieldID,
		toTerm: country.ByID,
		toCursor: func(c *Country) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Country into CountryEdge.
func (c *Country) ToEdge(order *CountryOrder) *CountryEdge {
	if order == nil {
		order = DefaultCountryOrder
	}
	return &CountryEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CustomerEdge is the edge representation of Customer.
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CustomerConnection is the connection containing edges to Customer.
type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CustomerConnection) build(nodes []*Customer, pager *customerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Customer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Customer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Customer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerPaginateOption enables pagination customization.
type CustomerPaginateOption func(*customerPager) error

// WithCustomerOrder configures pagination ordering.
func WithCustomerOrder(order []*CustomerOrder) CustomerPaginateOption {
	return func(pager *customerPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCustomerFilter configures pagination filter.
func WithCustomerFilter(filter func(*CustomerQuery) (*CustomerQuery, error)) CustomerPaginateOption {
	return func(pager *customerPager) error {
		if filter == nil {
			return errors.New("CustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerPager struct {
	reverse bool
	order   []*CustomerOrder
	filter  func(*CustomerQuery) (*CustomerQuery, error)
}

func newCustomerPager(opts []CustomerPaginateOption, reverse bool) (*customerPager, error) {
	pager := &customerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *customerPager) applyFilter(query *CustomerQuery) (*CustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerPager) toCursor(c *Customer) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(c).Value)
	}
	return Cursor{ID: c.ID, Value: cs_}
}

func (p *customerPager) applyCursors(query *CustomerQuery, after, before *Cursor) (*CustomerQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCustomerOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *customerPager) applyOrder(query *CustomerQuery) *CustomerQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCustomerOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCustomerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *customerPager) orderExpr(query *CustomerQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCustomerOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Customer.
func (c *CustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerPaginateOption,
) (*CustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CustomerConnection{Edges: []*CustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CustomerOrderFieldCreatedAt orders Customer by created_at.
	CustomerOrderFieldCreatedAt = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: customer.FieldCreatedAt,
		toTerm: customer.ByCreatedAt,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CustomerOrderFieldName orders Customer by name.
	CustomerOrderFieldName = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.Name, nil
		},
		column: customer.FieldName,
		toTerm: customer.ByName,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
	// CustomerOrderFieldApprovalStatus orders Customer by approval_status.
	CustomerOrderFieldApprovalStatus = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.ApprovalStatus, nil
		},
		column: customer.FieldApprovalStatus,
		toTerm: customer.ByApprovalStatus,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.ApprovalStatus,
			}
		},
	}
	// CustomerOrderFieldOwnerType orders Customer by owner_type.
	CustomerOrderFieldOwnerType = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.OwnerType, nil
		},
		column: customer.FieldOwnerType,
		toTerm: customer.ByOwnerType,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.OwnerType,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CustomerOrderField) String() string {
	var str string
	switch f.column {
	case CustomerOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CustomerOrderFieldName.column:
		str = "NAME"
	case CustomerOrderFieldApprovalStatus.column:
		str = "APPROVAL_STATUS"
	case CustomerOrderFieldOwnerType.column:
		str = "OWNER_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CustomerOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CustomerOrderFieldCreatedAt
	case "NAME":
		*f = *CustomerOrderFieldName
	case "APPROVAL_STATUS":
		*f = *CustomerOrderFieldApprovalStatus
	case "OWNER_TYPE":
		*f = *CustomerOrderFieldOwnerType
	default:
		return fmt.Errorf("%s is not a valid CustomerOrderField", str)
	}
	return nil
}

// CustomerOrderField defines the ordering field of Customer.
type CustomerOrderField struct {
	// Value extracts the ordering value from the given Customer.
	Value    func(*Customer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) customer.OrderOption
	toCursor func(*Customer) Cursor
}

// CustomerOrder defines the ordering of Customer.
type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field"`
}

// DefaultCustomerOrder is the default ordering of Customer.
var DefaultCustomerOrder = &CustomerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.ID, nil
		},
		column: customer.FieldID,
		toTerm: customer.ByID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Customer into CustomerEdge.
func (c *Customer) ToEdge(order *CustomerOrder) *CustomerEdge {
	if order == nil {
		order = DefaultCustomerOrder
	}
	return &CustomerEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CustomerProfileEdge is the edge representation of CustomerProfile.
type CustomerProfileEdge struct {
	Node   *CustomerProfile `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// CustomerProfileConnection is the connection containing edges to CustomerProfile.
type CustomerProfileConnection struct {
	Edges      []*CustomerProfileEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *CustomerProfileConnection) build(nodes []*CustomerProfile, pager *customerprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CustomerProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CustomerProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CustomerProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerProfilePaginateOption enables pagination customization.
type CustomerProfilePaginateOption func(*customerprofilePager) error

// WithCustomerProfileOrder configures pagination ordering.
func WithCustomerProfileOrder(order []*CustomerProfileOrder) CustomerProfilePaginateOption {
	return func(pager *customerprofilePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithCustomerProfileFilter configures pagination filter.
func WithCustomerProfileFilter(filter func(*CustomerProfileQuery) (*CustomerProfileQuery, error)) CustomerProfilePaginateOption {
	return func(pager *customerprofilePager) error {
		if filter == nil {
			return errors.New("CustomerProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerprofilePager struct {
	reverse bool
	order   []*CustomerProfileOrder
	filter  func(*CustomerProfileQuery) (*CustomerProfileQuery, error)
}

func newCustomerProfilePager(opts []CustomerProfilePaginateOption, reverse bool) (*customerprofilePager, error) {
	pager := &customerprofilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *customerprofilePager) applyFilter(query *CustomerProfileQuery) (*CustomerProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerprofilePager) toCursor(cp *CustomerProfile) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(cp).Value)
	}
	return Cursor{ID: cp.ID, Value: cs_}
}

func (p *customerprofilePager) applyCursors(query *CustomerProfileQuery, after, before *Cursor) (*CustomerProfileQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultCustomerProfileOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *customerprofilePager) applyOrder(query *CustomerProfileQuery) *CustomerProfileQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultCustomerProfileOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultCustomerProfileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *customerprofilePager) orderExpr(query *CustomerProfileQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultCustomerProfileOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to CustomerProfile.
func (cp *CustomerProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerProfilePaginateOption,
) (*CustomerProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerProfilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cp, err = pager.applyFilter(cp); err != nil {
		return nil, err
	}
	conn := &CustomerProfileConnection{Edges: []*CustomerProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cp, err = pager.applyCursors(cp, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cp.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cp = pager.applyOrder(cp)
	nodes, err := cp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CustomerProfileOrderFieldCreatedAt orders CustomerProfile by created_at.
	CustomerProfileOrderFieldCreatedAt = &CustomerProfileOrderField{
		Value: func(cp *CustomerProfile) (ent.Value, error) {
			return cp.CreatedAt, nil
		},
		column: customerprofile.FieldCreatedAt,
		toTerm: customerprofile.ByCreatedAt,
		toCursor: func(cp *CustomerProfile) Cursor {
			return Cursor{
				ID:    cp.ID,
				Value: cp.CreatedAt,
			}
		},
	}
	// CustomerProfileOrderFieldName orders CustomerProfile by name.
	CustomerProfileOrderFieldName = &CustomerProfileOrderField{
		Value: func(cp *CustomerProfile) (ent.Value, error) {
			return cp.Name, nil
		},
		column: customerprofile.FieldName,
		toTerm: customerprofile.ByName,
		toCursor: func(cp *CustomerProfile) Cursor {
			return Cursor{
				ID:    cp.ID,
				Value: cp.Name,
			}
		},
	}
	// CustomerProfileOrderFieldApprovalStatus orders CustomerProfile by approval_status.
	CustomerProfileOrderFieldApprovalStatus = &CustomerProfileOrderField{
		Value: func(cp *CustomerProfile) (ent.Value, error) {
			return cp.ApprovalStatus, nil
		},
		column: customerprofile.FieldApprovalStatus,
		toTerm: customerprofile.ByApprovalStatus,
		toCursor: func(cp *CustomerProfile) Cursor {
			return Cursor{
				ID:    cp.ID,
				Value: cp.ApprovalStatus,
			}
		},
	}
	// CustomerProfileOrderFieldOwnerType orders CustomerProfile by owner_type.
	CustomerProfileOrderFieldOwnerType = &CustomerProfileOrderField{
		Value: func(cp *CustomerProfile) (ent.Value, error) {
			return cp.OwnerType, nil
		},
		column: customerprofile.FieldOwnerType,
		toTerm: customerprofile.ByOwnerType,
		toCursor: func(cp *CustomerProfile) Cursor {
			return Cursor{
				ID:    cp.ID,
				Value: cp.OwnerType,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CustomerProfileOrderField) String() string {
	var str string
	switch f.column {
	case CustomerProfileOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case CustomerProfileOrderFieldName.column:
		str = "NAME"
	case CustomerProfileOrderFieldApprovalStatus.column:
		str = "APPROVAL_STATUS"
	case CustomerProfileOrderFieldOwnerType.column:
		str = "OWNER_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CustomerProfileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CustomerProfileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CustomerProfileOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CustomerProfileOrderFieldCreatedAt
	case "NAME":
		*f = *CustomerProfileOrderFieldName
	case "APPROVAL_STATUS":
		*f = *CustomerProfileOrderFieldApprovalStatus
	case "OWNER_TYPE":
		*f = *CustomerProfileOrderFieldOwnerType
	default:
		return fmt.Errorf("%s is not a valid CustomerProfileOrderField", str)
	}
	return nil
}

// CustomerProfileOrderField defines the ordering field of CustomerProfile.
type CustomerProfileOrderField struct {
	// Value extracts the ordering value from the given CustomerProfile.
	Value    func(*CustomerProfile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) customerprofile.OrderOption
	toCursor func(*CustomerProfile) Cursor
}

// CustomerProfileOrder defines the ordering of CustomerProfile.
type CustomerProfileOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *CustomerProfileOrderField `json:"field"`
}

// DefaultCustomerProfileOrder is the default ordering of CustomerProfile.
var DefaultCustomerProfileOrder = &CustomerProfileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CustomerProfileOrderField{
		Value: func(cp *CustomerProfile) (ent.Value, error) {
			return cp.ID, nil
		},
		column: customerprofile.FieldID,
		toTerm: customerprofile.ByID,
		toCursor: func(cp *CustomerProfile) Cursor {
			return Cursor{ID: cp.ID}
		},
	},
}

// ToEdge converts CustomerProfile into CustomerProfileEdge.
func (cp *CustomerProfile) ToEdge(order *CustomerProfileOrder) *CustomerProfileEdge {
	if order == nil {
		order = DefaultCustomerProfileOrder
	}
	return &CustomerProfileEdge{
		Node:   cp,
		Cursor: order.Field.toCursor(cp),
	}
}

// DistrictEdge is the edge representation of District.
type DistrictEdge struct {
	Node   *District `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// DistrictConnection is the connection containing edges to District.
type DistrictConnection struct {
	Edges      []*DistrictEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *DistrictConnection) build(nodes []*District, pager *districtPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *District
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *District {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *District {
			return nodes[i]
		}
	}
	c.Edges = make([]*DistrictEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DistrictEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DistrictPaginateOption enables pagination customization.
type DistrictPaginateOption func(*districtPager) error

// WithDistrictOrder configures pagination ordering.
func WithDistrictOrder(order *DistrictOrder) DistrictPaginateOption {
	if order == nil {
		order = DefaultDistrictOrder
	}
	o := *order
	return func(pager *districtPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDistrictOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDistrictFilter configures pagination filter.
func WithDistrictFilter(filter func(*DistrictQuery) (*DistrictQuery, error)) DistrictPaginateOption {
	return func(pager *districtPager) error {
		if filter == nil {
			return errors.New("DistrictQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type districtPager struct {
	reverse bool
	order   *DistrictOrder
	filter  func(*DistrictQuery) (*DistrictQuery, error)
}

func newDistrictPager(opts []DistrictPaginateOption, reverse bool) (*districtPager, error) {
	pager := &districtPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDistrictOrder
	}
	return pager, nil
}

func (p *districtPager) applyFilter(query *DistrictQuery) (*DistrictQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *districtPager) toCursor(d *District) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *districtPager) applyCursors(query *DistrictQuery, after, before *Cursor) (*DistrictQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDistrictOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *districtPager) applyOrder(query *DistrictQuery) *DistrictQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDistrictOrder.Field {
		query = query.Order(DefaultDistrictOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *districtPager) orderExpr(query *DistrictQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDistrictOrder.Field {
			b.Comma().Ident(DefaultDistrictOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to District.
func (d *DistrictQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DistrictPaginateOption,
) (*DistrictConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDistrictPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DistrictConnection{Edges: []*DistrictEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := d.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DistrictOrderFieldCreatedAt orders District by created_at.
	DistrictOrderFieldCreatedAt = &DistrictOrderField{
		Value: func(d *District) (ent.Value, error) {
			return d.CreatedAt, nil
		},
		column: district.FieldCreatedAt,
		toTerm: district.ByCreatedAt,
		toCursor: func(d *District) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DistrictOrderField) String() string {
	var str string
	switch f.column {
	case DistrictOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DistrictOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DistrictOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DistrictOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *DistrictOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid DistrictOrderField", str)
	}
	return nil
}

// DistrictOrderField defines the ordering field of District.
type DistrictOrderField struct {
	// Value extracts the ordering value from the given District.
	Value    func(*District) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) district.OrderOption
	toCursor func(*District) Cursor
}

// DistrictOrder defines the ordering of District.
type DistrictOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *DistrictOrderField `json:"field"`
}

// DefaultDistrictOrder is the default ordering of District.
var DefaultDistrictOrder = &DistrictOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DistrictOrderField{
		Value: func(d *District) (ent.Value, error) {
			return d.ID, nil
		},
		column: district.FieldID,
		toTerm: district.ByID,
		toCursor: func(d *District) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts District into DistrictEdge.
func (d *District) ToEdge(order *DistrictOrder) *DistrictEdge {
	if order == nil {
		order = DefaultDistrictOrder
	}
	return &DistrictEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// OperationEdge is the edge representation of Operation.
type OperationEdge struct {
	Node   *Operation `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// OperationConnection is the connection containing edges to Operation.
type OperationConnection struct {
	Edges      []*OperationEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *OperationConnection) build(nodes []*Operation, pager *operationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Operation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Operation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Operation {
			return nodes[i]
		}
	}
	c.Edges = make([]*OperationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OperationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OperationPaginateOption enables pagination customization.
type OperationPaginateOption func(*operationPager) error

// WithOperationOrder configures pagination ordering.
func WithOperationOrder(order *OperationOrder) OperationPaginateOption {
	if order == nil {
		order = DefaultOperationOrder
	}
	o := *order
	return func(pager *operationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOperationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOperationFilter configures pagination filter.
func WithOperationFilter(filter func(*OperationQuery) (*OperationQuery, error)) OperationPaginateOption {
	return func(pager *operationPager) error {
		if filter == nil {
			return errors.New("OperationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type operationPager struct {
	reverse bool
	order   *OperationOrder
	filter  func(*OperationQuery) (*OperationQuery, error)
}

func newOperationPager(opts []OperationPaginateOption, reverse bool) (*operationPager, error) {
	pager := &operationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOperationOrder
	}
	return pager, nil
}

func (p *operationPager) applyFilter(query *OperationQuery) (*OperationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *operationPager) toCursor(o *Operation) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *operationPager) applyCursors(query *OperationQuery, after, before *Cursor) (*OperationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOperationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *operationPager) applyOrder(query *OperationQuery) *OperationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOperationOrder.Field {
		query = query.Order(DefaultOperationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *operationPager) orderExpr(query *OperationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOperationOrder.Field {
			b.Comma().Ident(DefaultOperationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Operation.
func (o *OperationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OperationPaginateOption,
) (*OperationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOperationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OperationConnection{Edges: []*OperationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OperationOrderFieldCreatedAt orders Operation by created_at.
	OperationOrderFieldCreatedAt = &OperationOrderField{
		Value: func(o *Operation) (ent.Value, error) {
			return o.CreatedAt, nil
		},
		column: operation.FieldCreatedAt,
		toTerm: operation.ByCreatedAt,
		toCursor: func(o *Operation) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OperationOrderField) String() string {
	var str string
	switch f.column {
	case OperationOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OperationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OperationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OperationOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *OperationOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OperationOrderField", str)
	}
	return nil
}

// OperationOrderField defines the ordering field of Operation.
type OperationOrderField struct {
	// Value extracts the ordering value from the given Operation.
	Value    func(*Operation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) operation.OrderOption
	toCursor func(*Operation) Cursor
}

// OperationOrder defines the ordering of Operation.
type OperationOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *OperationOrderField `json:"field"`
}

// DefaultOperationOrder is the default ordering of Operation.
var DefaultOperationOrder = &OperationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OperationOrderField{
		Value: func(o *Operation) (ent.Value, error) {
			return o.ID, nil
		},
		column: operation.FieldID,
		toTerm: operation.ByID,
		toCursor: func(o *Operation) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Operation into OperationEdge.
func (o *Operation) ToEdge(order *OperationOrder) *OperationEdge {
	if order == nil {
		order = DefaultOperationOrder
	}
	return &OperationEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// PlotEdge is the edge representation of Plot.
type PlotEdge struct {
	Node   *Plot  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PlotConnection is the connection containing edges to Plot.
type PlotConnection struct {
	Edges      []*PlotEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PlotConnection) build(nodes []*Plot, pager *plotPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Plot
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Plot {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Plot {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlotEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlotEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlotPaginateOption enables pagination customization.
type PlotPaginateOption func(*plotPager) error

// WithPlotOrder configures pagination ordering.
func WithPlotOrder(order *PlotOrder) PlotPaginateOption {
	if order == nil {
		order = DefaultPlotOrder
	}
	o := *order
	return func(pager *plotPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlotOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlotFilter configures pagination filter.
func WithPlotFilter(filter func(*PlotQuery) (*PlotQuery, error)) PlotPaginateOption {
	return func(pager *plotPager) error {
		if filter == nil {
			return errors.New("PlotQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type plotPager struct {
	reverse bool
	order   *PlotOrder
	filter  func(*PlotQuery) (*PlotQuery, error)
}

func newPlotPager(opts []PlotPaginateOption, reverse bool) (*plotPager, error) {
	pager := &plotPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlotOrder
	}
	return pager, nil
}

func (p *plotPager) applyFilter(query *PlotQuery) (*PlotQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *plotPager) toCursor(pl *Plot) Cursor {
	return p.order.Field.toCursor(pl)
}

func (p *plotPager) applyCursors(query *PlotQuery, after, before *Cursor) (*PlotQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlotOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *plotPager) applyOrder(query *PlotQuery) *PlotQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlotOrder.Field {
		query = query.Order(DefaultPlotOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *plotPager) orderExpr(query *PlotQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlotOrder.Field {
			b.Comma().Ident(DefaultPlotOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Plot.
func (pl *PlotQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlotPaginateOption,
) (*PlotConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlotPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pl, err = pager.applyFilter(pl); err != nil {
		return nil, err
	}
	conn := &PlotConnection{Edges: []*PlotEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pl.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pl, err = pager.applyCursors(pl, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pl.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pl = pager.applyOrder(pl)
	nodes, err := pl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PlotOrderFieldCreatedAt orders Plot by created_at.
	PlotOrderFieldCreatedAt = &PlotOrderField{
		Value: func(pl *Plot) (ent.Value, error) {
			return pl.CreatedAt, nil
		},
		column: plot.FieldCreatedAt,
		toTerm: plot.ByCreatedAt,
		toCursor: func(pl *Plot) Cursor {
			return Cursor{
				ID:    pl.ID,
				Value: pl.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PlotOrderField) String() string {
	var str string
	switch f.column {
	case PlotOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PlotOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PlotOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PlotOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PlotOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PlotOrderField", str)
	}
	return nil
}

// PlotOrderField defines the ordering field of Plot.
type PlotOrderField struct {
	// Value extracts the ordering value from the given Plot.
	Value    func(*Plot) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) plot.OrderOption
	toCursor func(*Plot) Cursor
}

// PlotOrder defines the ordering of Plot.
type PlotOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PlotOrderField `json:"field"`
}

// DefaultPlotOrder is the default ordering of Plot.
var DefaultPlotOrder = &PlotOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlotOrderField{
		Value: func(pl *Plot) (ent.Value, error) {
			return pl.ID, nil
		},
		column: plot.FieldID,
		toTerm: plot.ByID,
		toCursor: func(pl *Plot) Cursor {
			return Cursor{ID: pl.ID}
		},
	},
}

// ToEdge converts Plot into PlotEdge.
func (pl *Plot) ToEdge(order *PlotOrder) *PlotEdge {
	if order == nil {
		order = DefaultPlotOrder
	}
	return &PlotEdge{
		Node:   pl,
		Cursor: order.Field.toCursor(pl),
	}
}

// PotentialTenderEdge is the edge representation of PotentialTender.
type PotentialTenderEdge struct {
	Node   *PotentialTender `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// PotentialTenderConnection is the connection containing edges to PotentialTender.
type PotentialTenderConnection struct {
	Edges      []*PotentialTenderEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *PotentialTenderConnection) build(nodes []*PotentialTender, pager *potentialtenderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PotentialTender
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PotentialTender {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PotentialTender {
			return nodes[i]
		}
	}
	c.Edges = make([]*PotentialTenderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PotentialTenderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PotentialTenderPaginateOption enables pagination customization.
type PotentialTenderPaginateOption func(*potentialtenderPager) error

// WithPotentialTenderOrder configures pagination ordering.
func WithPotentialTenderOrder(order []*PotentialTenderOrder) PotentialTenderPaginateOption {
	return func(pager *potentialtenderPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPotentialTenderFilter configures pagination filter.
func WithPotentialTenderFilter(filter func(*PotentialTenderQuery) (*PotentialTenderQuery, error)) PotentialTenderPaginateOption {
	return func(pager *potentialtenderPager) error {
		if filter == nil {
			return errors.New("PotentialTenderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type potentialtenderPager struct {
	reverse bool
	order   []*PotentialTenderOrder
	filter  func(*PotentialTenderQuery) (*PotentialTenderQuery, error)
}

func newPotentialTenderPager(opts []PotentialTenderPaginateOption, reverse bool) (*potentialtenderPager, error) {
	pager := &potentialtenderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *potentialtenderPager) applyFilter(query *PotentialTenderQuery) (*PotentialTenderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *potentialtenderPager) toCursor(pt *PotentialTender) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(pt).Value)
	}
	return Cursor{ID: pt.ID, Value: cs_}
}

func (p *potentialtenderPager) applyCursors(query *PotentialTenderQuery, after, before *Cursor) (*PotentialTenderQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPotentialTenderOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *potentialtenderPager) applyOrder(query *PotentialTenderQuery) *PotentialTenderQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPotentialTenderOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPotentialTenderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *potentialtenderPager) orderExpr(query *PotentialTenderQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPotentialTenderOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to PotentialTender.
func (pt *PotentialTenderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PotentialTenderPaginateOption,
) (*PotentialTenderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPotentialTenderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}
	conn := &PotentialTenderConnection{Edges: []*PotentialTenderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pt, err = pager.applyCursors(pt, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pt.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pt = pager.applyOrder(pt)
	nodes, err := pt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PotentialTenderOrderFieldCreatedAt orders PotentialTender by created_at.
	PotentialTenderOrderFieldCreatedAt = &PotentialTenderOrderField{
		Value: func(pt *PotentialTender) (ent.Value, error) {
			return pt.CreatedAt, nil
		},
		column: potentialtender.FieldCreatedAt,
		toTerm: potentialtender.ByCreatedAt,
		toCursor: func(pt *PotentialTender) Cursor {
			return Cursor{
				ID:    pt.ID,
				Value: pt.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PotentialTenderOrderField) String() string {
	var str string
	switch f.column {
	case PotentialTenderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PotentialTenderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PotentialTenderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PotentialTenderOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PotentialTenderOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PotentialTenderOrderField", str)
	}
	return nil
}

// PotentialTenderOrderField defines the ordering field of PotentialTender.
type PotentialTenderOrderField struct {
	// Value extracts the ordering value from the given PotentialTender.
	Value    func(*PotentialTender) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) potentialtender.OrderOption
	toCursor func(*PotentialTender) Cursor
}

// PotentialTenderOrder defines the ordering of PotentialTender.
type PotentialTenderOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *PotentialTenderOrderField `json:"field"`
}

// DefaultPotentialTenderOrder is the default ordering of PotentialTender.
var DefaultPotentialTenderOrder = &PotentialTenderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PotentialTenderOrderField{
		Value: func(pt *PotentialTender) (ent.Value, error) {
			return pt.ID, nil
		},
		column: potentialtender.FieldID,
		toTerm: potentialtender.ByID,
		toCursor: func(pt *PotentialTender) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts PotentialTender into PotentialTenderEdge.
func (pt *PotentialTender) ToEdge(order *PotentialTenderOrder) *PotentialTenderEdge {
	if order == nil {
		order = DefaultPotentialTenderOrder
	}
	return &PotentialTenderEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// ProjectEdge is the edge representation of Project.
type ProjectEdge struct {
	Node   *Project `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProjectConnection is the connection containing edges to Project.
type ProjectConnection struct {
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ProjectConnection) build(nodes []*Project, pager *projectPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Project
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Project {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Project {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProjectEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProjectEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProjectPaginateOption enables pagination customization.
type ProjectPaginateOption func(*projectPager) error

// WithProjectOrder configures pagination ordering.
func WithProjectOrder(order []*ProjectOrder) ProjectPaginateOption {
	return func(pager *projectPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithProjectFilter configures pagination filter.
func WithProjectFilter(filter func(*ProjectQuery) (*ProjectQuery, error)) ProjectPaginateOption {
	return func(pager *projectPager) error {
		if filter == nil {
			return errors.New("ProjectQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectPager struct {
	reverse bool
	order   []*ProjectOrder
	filter  func(*ProjectQuery) (*ProjectQuery, error)
}

func newProjectPager(opts []ProjectPaginateOption, reverse bool) (*projectPager, error) {
	pager := &projectPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *projectPager) applyFilter(query *ProjectQuery) (*ProjectQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectPager) toCursor(pr *Project) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(pr).Value)
	}
	return Cursor{ID: pr.ID, Value: cs_}
}

func (p *projectPager) applyCursors(query *ProjectQuery, after, before *Cursor) (*ProjectQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultProjectOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *projectPager) applyOrder(query *ProjectQuery) *ProjectQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultProjectOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultProjectOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *projectPager) orderExpr(query *ProjectQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultProjectOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Project.
func (pr *ProjectQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectPaginateOption,
) (*ProjectConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProjectConnection{Edges: []*ProjectEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ProjectOrderFieldCreatedAt orders Project by created_at.
	ProjectOrderFieldCreatedAt = &ProjectOrderField{
		Value: func(pr *Project) (ent.Value, error) {
			return pr.CreatedAt, nil
		},
		column: project.FieldCreatedAt,
		toTerm: project.ByCreatedAt,
		toCursor: func(pr *Project) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
	// ProjectOrderFieldCode orders Project by code.
	ProjectOrderFieldCode = &ProjectOrderField{
		Value: func(pr *Project) (ent.Value, error) {
			return pr.Code, nil
		},
		column: project.FieldCode,
		toTerm: project.ByCode,
		toCursor: func(pr *Project) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Code,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ProjectOrderField) String() string {
	var str string
	switch f.column {
	case ProjectOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ProjectOrderFieldCode.column:
		str = "CODE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ProjectOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ProjectOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ProjectOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ProjectOrderFieldCreatedAt
	case "CODE":
		*f = *ProjectOrderFieldCode
	default:
		return fmt.Errorf("%s is not a valid ProjectOrderField", str)
	}
	return nil
}

// ProjectOrderField defines the ordering field of Project.
type ProjectOrderField struct {
	// Value extracts the ordering value from the given Project.
	Value    func(*Project) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) project.OrderOption
	toCursor func(*Project) Cursor
}

// ProjectOrder defines the ordering of Project.
type ProjectOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProjectOrderField `json:"field"`
}

// DefaultProjectOrder is the default ordering of Project.
var DefaultProjectOrder = &ProjectOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProjectOrderField{
		Value: func(pr *Project) (ent.Value, error) {
			return pr.ID, nil
		},
		column: project.FieldID,
		toTerm: project.ByID,
		toCursor: func(pr *Project) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Project into ProjectEdge.
func (pr *Project) ToEdge(order *ProjectOrder) *ProjectEdge {
	if order == nil {
		order = DefaultProjectOrder
	}
	return &ProjectEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ProvinceEdge is the edge representation of Province.
type ProvinceEdge struct {
	Node   *Province `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ProvinceConnection is the connection containing edges to Province.
type ProvinceConnection struct {
	Edges      []*ProvinceEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ProvinceConnection) build(nodes []*Province, pager *provincePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Province
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Province {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Province {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProvinceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProvinceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProvincePaginateOption enables pagination customization.
type ProvincePaginateOption func(*provincePager) error

// WithProvinceOrder configures pagination ordering.
func WithProvinceOrder(order *ProvinceOrder) ProvincePaginateOption {
	if order == nil {
		order = DefaultProvinceOrder
	}
	o := *order
	return func(pager *provincePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProvinceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProvinceFilter configures pagination filter.
func WithProvinceFilter(filter func(*ProvinceQuery) (*ProvinceQuery, error)) ProvincePaginateOption {
	return func(pager *provincePager) error {
		if filter == nil {
			return errors.New("ProvinceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type provincePager struct {
	reverse bool
	order   *ProvinceOrder
	filter  func(*ProvinceQuery) (*ProvinceQuery, error)
}

func newProvincePager(opts []ProvincePaginateOption, reverse bool) (*provincePager, error) {
	pager := &provincePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProvinceOrder
	}
	return pager, nil
}

func (p *provincePager) applyFilter(query *ProvinceQuery) (*ProvinceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *provincePager) toCursor(pr *Province) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *provincePager) applyCursors(query *ProvinceQuery, after, before *Cursor) (*ProvinceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProvinceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *provincePager) applyOrder(query *ProvinceQuery) *ProvinceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProvinceOrder.Field {
		query = query.Order(DefaultProvinceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *provincePager) orderExpr(query *ProvinceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProvinceOrder.Field {
			b.Comma().Ident(DefaultProvinceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Province.
func (pr *ProvinceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProvincePaginateOption,
) (*ProvinceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProvincePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProvinceConnection{Edges: []*ProvinceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ProvinceOrderFieldCreatedAt orders Province by created_at.
	ProvinceOrderFieldCreatedAt = &ProvinceOrderField{
		Value: func(pr *Province) (ent.Value, error) {
			return pr.CreatedAt, nil
		},
		column: province.FieldCreatedAt,
		toTerm: province.ByCreatedAt,
		toCursor: func(pr *Province) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ProvinceOrderField) String() string {
	var str string
	switch f.column {
	case ProvinceOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ProvinceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ProvinceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ProvinceOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ProvinceOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ProvinceOrderField", str)
	}
	return nil
}

// ProvinceOrderField defines the ordering field of Province.
type ProvinceOrderField struct {
	// Value extracts the ordering value from the given Province.
	Value    func(*Province) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) province.OrderOption
	toCursor func(*Province) Cursor
}

// ProvinceOrder defines the ordering of Province.
type ProvinceOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ProvinceOrderField `json:"field"`
}

// DefaultProvinceOrder is the default ordering of Province.
var DefaultProvinceOrder = &ProvinceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProvinceOrderField{
		Value: func(pr *Province) (ent.Value, error) {
			return pr.ID, nil
		},
		column: province.FieldID,
		toTerm: province.ByID,
		toCursor: func(pr *Province) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Province into ProvinceEdge.
func (pr *Province) ToEdge(order *ProvinceOrder) *ProvinceEdge {
	if order == nil {
		order = DefaultProvinceOrder
	}
	return &ProvinceEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// TenderEdge is the edge representation of Tender.
type TenderEdge struct {
	Node   *Tender `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TenderConnection is the connection containing edges to Tender.
type TenderConnection struct {
	Edges      []*TenderEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TenderConnection) build(nodes []*Tender, pager *tenderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tender
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tender {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tender {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenderPaginateOption enables pagination customization.
type TenderPaginateOption func(*tenderPager) error

// WithTenderOrder configures pagination ordering.
func WithTenderOrder(order []*TenderOrder) TenderPaginateOption {
	return func(pager *tenderPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithTenderFilter configures pagination filter.
func WithTenderFilter(filter func(*TenderQuery) (*TenderQuery, error)) TenderPaginateOption {
	return func(pager *tenderPager) error {
		if filter == nil {
			return errors.New("TenderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenderPager struct {
	reverse bool
	order   []*TenderOrder
	filter  func(*TenderQuery) (*TenderQuery, error)
}

func newTenderPager(opts []TenderPaginateOption, reverse bool) (*tenderPager, error) {
	pager := &tenderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *tenderPager) applyFilter(query *TenderQuery) (*TenderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenderPager) toCursor(t *Tender) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(t).Value)
	}
	return Cursor{ID: t.ID, Value: cs_}
}

func (p *tenderPager) applyCursors(query *TenderQuery, after, before *Cursor) (*TenderQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultTenderOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenderPager) applyOrder(query *TenderQuery) *TenderQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultTenderOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultTenderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *tenderPager) orderExpr(query *TenderQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultTenderOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tender.
func (t *TenderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenderPaginateOption,
) (*TenderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TenderConnection{Edges: []*TenderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenderOrderFieldCreatedAt orders Tender by created_at.
	TenderOrderFieldCreatedAt = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: tender.FieldCreatedAt,
		toTerm: tender.ByCreatedAt,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TenderOrderFieldApprovalStatus orders Tender by approval_status.
	TenderOrderFieldApprovalStatus = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.ApprovalStatus, nil
		},
		column: tender.FieldApprovalStatus,
		toTerm: tender.ByApprovalStatus,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ApprovalStatus,
			}
		},
	}
	// TenderOrderFieldName orders Tender by name.
	TenderOrderFieldName = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.Name, nil
		},
		column: tender.FieldName,
		toTerm: tender.ByName,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
	// TenderOrderFieldTenderDate orders Tender by tender_date.
	TenderOrderFieldTenderDate = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.TenderDate, nil
		},
		column: tender.FieldTenderDate,
		toTerm: tender.ByTenderDate,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TenderDate,
			}
		},
	}
	// TenderOrderFieldTenderClosingDate orders Tender by tender_closing_date.
	TenderOrderFieldTenderClosingDate = &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.TenderClosingDate, nil
		},
		column: tender.FieldTenderClosingDate,
		toTerm: tender.ByTenderClosingDate,
		toCursor: func(t *Tender) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.TenderClosingDate,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenderOrderField) String() string {
	var str string
	switch f.column {
	case TenderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TenderOrderFieldApprovalStatus.column:
		str = "APPROVAL_STATUS"
	case TenderOrderFieldName.column:
		str = "NAME"
	case TenderOrderFieldTenderDate.column:
		str = "TENDER_DATE"
	case TenderOrderFieldTenderClosingDate.column:
		str = "CLOSING_DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenderOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TenderOrderFieldCreatedAt
	case "APPROVAL_STATUS":
		*f = *TenderOrderFieldApprovalStatus
	case "NAME":
		*f = *TenderOrderFieldName
	case "TENDER_DATE":
		*f = *TenderOrderFieldTenderDate
	case "CLOSING_DATE":
		*f = *TenderOrderFieldTenderClosingDate
	default:
		return fmt.Errorf("%s is not a valid TenderOrderField", str)
	}
	return nil
}

// TenderOrderField defines the ordering field of Tender.
type TenderOrderField struct {
	// Value extracts the ordering value from the given Tender.
	Value    func(*Tender) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tender.OrderOption
	toCursor func(*Tender) Cursor
}

// TenderOrder defines the ordering of Tender.
type TenderOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TenderOrderField `json:"field"`
}

// DefaultTenderOrder is the default ordering of Tender.
var DefaultTenderOrder = &TenderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenderOrderField{
		Value: func(t *Tender) (ent.Value, error) {
			return t.ID, nil
		},
		column: tender.FieldID,
		toTerm: tender.ByID,
		toCursor: func(t *Tender) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tender into TenderEdge.
func (t *Tender) ToEdge(order *TenderOrder) *TenderEdge {
	if order == nil {
		order = DefaultTenderOrder
	}
	return &TenderEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TenderCompetitorEdge is the edge representation of TenderCompetitor.
type TenderCompetitorEdge struct {
	Node   *TenderCompetitor `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// TenderCompetitorConnection is the connection containing edges to TenderCompetitor.
type TenderCompetitorConnection struct {
	Edges      []*TenderCompetitorEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *TenderCompetitorConnection) build(nodes []*TenderCompetitor, pager *tendercompetitorPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TenderCompetitor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TenderCompetitor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TenderCompetitor {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenderCompetitorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenderCompetitorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenderCompetitorPaginateOption enables pagination customization.
type TenderCompetitorPaginateOption func(*tendercompetitorPager) error

// WithTenderCompetitorOrder configures pagination ordering.
func WithTenderCompetitorOrder(order []*TenderCompetitorOrder) TenderCompetitorPaginateOption {
	return func(pager *tendercompetitorPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithTenderCompetitorFilter configures pagination filter.
func WithTenderCompetitorFilter(filter func(*TenderCompetitorQuery) (*TenderCompetitorQuery, error)) TenderCompetitorPaginateOption {
	return func(pager *tendercompetitorPager) error {
		if filter == nil {
			return errors.New("TenderCompetitorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tendercompetitorPager struct {
	reverse bool
	order   []*TenderCompetitorOrder
	filter  func(*TenderCompetitorQuery) (*TenderCompetitorQuery, error)
}

func newTenderCompetitorPager(opts []TenderCompetitorPaginateOption, reverse bool) (*tendercompetitorPager, error) {
	pager := &tendercompetitorPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *tendercompetitorPager) applyFilter(query *TenderCompetitorQuery) (*TenderCompetitorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tendercompetitorPager) toCursor(tc *TenderCompetitor) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(tc).Value)
	}
	return Cursor{ID: tc.ID, Value: cs_}
}

func (p *tendercompetitorPager) applyCursors(query *TenderCompetitorQuery, after, before *Cursor) (*TenderCompetitorQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultTenderCompetitorOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tendercompetitorPager) applyOrder(query *TenderCompetitorQuery) *TenderCompetitorQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultTenderCompetitorOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultTenderCompetitorOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *tendercompetitorPager) orderExpr(query *TenderCompetitorQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultTenderCompetitorOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to TenderCompetitor.
func (tc *TenderCompetitorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenderCompetitorPaginateOption,
) (*TenderCompetitorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenderCompetitorPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if tc, err = pager.applyFilter(tc); err != nil {
		return nil, err
	}
	conn := &TenderCompetitorConnection{Edges: []*TenderCompetitorEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := tc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if tc, err = pager.applyCursors(tc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		tc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	tc = pager.applyOrder(tc)
	nodes, err := tc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenderCompetitorOrderFieldCreatedAt orders TenderCompetitor by created_at.
	TenderCompetitorOrderFieldCreatedAt = &TenderCompetitorOrderField{
		Value: func(tc *TenderCompetitor) (ent.Value, error) {
			return tc.CreatedAt, nil
		},
		column: tendercompetitor.FieldCreatedAt,
		toTerm: tendercompetitor.ByCreatedAt,
		toCursor: func(tc *TenderCompetitor) Cursor {
			return Cursor{
				ID:    tc.ID,
				Value: tc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenderCompetitorOrderField) String() string {
	var str string
	switch f.column {
	case TenderCompetitorOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenderCompetitorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenderCompetitorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenderCompetitorOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TenderCompetitorOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid TenderCompetitorOrderField", str)
	}
	return nil
}

// TenderCompetitorOrderField defines the ordering field of TenderCompetitor.
type TenderCompetitorOrderField struct {
	// Value extracts the ordering value from the given TenderCompetitor.
	Value    func(*TenderCompetitor) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tendercompetitor.OrderOption
	toCursor func(*TenderCompetitor) Cursor
}

// TenderCompetitorOrder defines the ordering of TenderCompetitor.
type TenderCompetitorOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *TenderCompetitorOrderField `json:"field"`
}

// DefaultTenderCompetitorOrder is the default ordering of TenderCompetitor.
var DefaultTenderCompetitorOrder = &TenderCompetitorOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenderCompetitorOrderField{
		Value: func(tc *TenderCompetitor) (ent.Value, error) {
			return tc.ID, nil
		},
		column: tendercompetitor.FieldID,
		toTerm: tendercompetitor.ByID,
		toCursor: func(tc *TenderCompetitor) Cursor {
			return Cursor{ID: tc.ID}
		},
	},
}

// ToEdge converts TenderCompetitor into TenderCompetitorEdge.
func (tc *TenderCompetitor) ToEdge(order *TenderCompetitorOrder) *TenderCompetitorEdge {
	if order == nil {
		order = DefaultTenderCompetitorOrder
	}
	return &TenderCompetitorEdge{
		Node:   tc,
		Cursor: order.Field.toCursor(tc),
	}
}

// TenderProfileEdge is the edge representation of TenderProfile.
type TenderProfileEdge struct {
	Node   *TenderProfile `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// TenderProfileConnection is the connection containing edges to TenderProfile.
type TenderProfileConnection struct {
	Edges      []*TenderProfileEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *TenderProfileConnection) build(nodes []*TenderProfile, pager *tenderprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TenderProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TenderProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TenderProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenderProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenderProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenderProfilePaginateOption enables pagination customization.
type TenderProfilePaginateOption func(*tenderprofilePager) error

// WithTenderProfileOrder configures pagination ordering.
func WithTenderProfileOrder(order []*TenderProfileOrder) TenderProfilePaginateOption {
	return func(pager *tenderprofilePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithTenderProfileFilter configures pagination filter.
func WithTenderProfileFilter(filter func(*TenderProfileQuery) (*TenderProfileQuery, error)) TenderProfilePaginateOption {
	return func(pager *tenderprofilePager) error {
		if filter == nil {
			return errors.New("TenderProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenderprofilePager struct {
	reverse bool
	order   []*TenderProfileOrder
	filter  func(*TenderProfileQuery) (*TenderProfileQuery, error)
}

func newTenderProfilePager(opts []TenderProfilePaginateOption, reverse bool) (*tenderprofilePager, error) {
	pager := &tenderprofilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *tenderprofilePager) applyFilter(query *TenderProfileQuery) (*TenderProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenderprofilePager) toCursor(tp *TenderProfile) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(tp).Value)
	}
	return Cursor{ID: tp.ID, Value: cs_}
}

func (p *tenderprofilePager) applyCursors(query *TenderProfileQuery, after, before *Cursor) (*TenderProfileQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultTenderProfileOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenderprofilePager) applyOrder(query *TenderProfileQuery) *TenderProfileQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultTenderProfileOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultTenderProfileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *tenderprofilePager) orderExpr(query *TenderProfileQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultTenderProfileOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to TenderProfile.
func (tp *TenderProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenderProfilePaginateOption,
) (*TenderProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenderProfilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if tp, err = pager.applyFilter(tp); err != nil {
		return nil, err
	}
	conn := &TenderProfileConnection{Edges: []*TenderProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := tp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if tp, err = pager.applyCursors(tp, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		tp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tp.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	tp = pager.applyOrder(tp)
	nodes, err := tp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenderProfileOrderFieldCreatedAt orders TenderProfile by created_at.
	TenderProfileOrderFieldCreatedAt = &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.CreatedAt, nil
		},
		column: tenderprofile.FieldCreatedAt,
		toTerm: tenderprofile.ByCreatedAt,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.CreatedAt,
			}
		},
	}
	// TenderProfileOrderFieldApprovalStatus orders TenderProfile by approval_status.
	TenderProfileOrderFieldApprovalStatus = &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.ApprovalStatus, nil
		},
		column: tenderprofile.FieldApprovalStatus,
		toTerm: tenderprofile.ByApprovalStatus,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.ApprovalStatus,
			}
		},
	}
	// TenderProfileOrderFieldName orders TenderProfile by name.
	TenderProfileOrderFieldName = &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.Name, nil
		},
		column: tenderprofile.FieldName,
		toTerm: tenderprofile.ByName,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.Name,
			}
		},
	}
	// TenderProfileOrderFieldTenderDate orders TenderProfile by tender_date.
	TenderProfileOrderFieldTenderDate = &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.TenderDate, nil
		},
		column: tenderprofile.FieldTenderDate,
		toTerm: tenderprofile.ByTenderDate,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.TenderDate,
			}
		},
	}
	// TenderProfileOrderFieldTenderClosingDate orders TenderProfile by tender_closing_date.
	TenderProfileOrderFieldTenderClosingDate = &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.TenderClosingDate, nil
		},
		column: tenderprofile.FieldTenderClosingDate,
		toTerm: tenderprofile.ByTenderClosingDate,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{
				ID:    tp.ID,
				Value: tp.TenderClosingDate,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenderProfileOrderField) String() string {
	var str string
	switch f.column {
	case TenderProfileOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TenderProfileOrderFieldApprovalStatus.column:
		str = "APPROVAL_STATUS"
	case TenderProfileOrderFieldName.column:
		str = "NAME"
	case TenderProfileOrderFieldTenderDate.column:
		str = "TENDER_DATE"
	case TenderProfileOrderFieldTenderClosingDate.column:
		str = "CLOSING_DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenderProfileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenderProfileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenderProfileOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TenderProfileOrderFieldCreatedAt
	case "APPROVAL_STATUS":
		*f = *TenderProfileOrderFieldApprovalStatus
	case "NAME":
		*f = *TenderProfileOrderFieldName
	case "TENDER_DATE":
		*f = *TenderProfileOrderFieldTenderDate
	case "CLOSING_DATE":
		*f = *TenderProfileOrderFieldTenderClosingDate
	default:
		return fmt.Errorf("%s is not a valid TenderProfileOrderField", str)
	}
	return nil
}

// TenderProfileOrderField defines the ordering field of TenderProfile.
type TenderProfileOrderField struct {
	// Value extracts the ordering value from the given TenderProfile.
	Value    func(*TenderProfile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tenderprofile.OrderOption
	toCursor func(*TenderProfile) Cursor
}

// TenderProfileOrder defines the ordering of TenderProfile.
type TenderProfileOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *TenderProfileOrderField `json:"field"`
}

// DefaultTenderProfileOrder is the default ordering of TenderProfile.
var DefaultTenderProfileOrder = &TenderProfileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenderProfileOrderField{
		Value: func(tp *TenderProfile) (ent.Value, error) {
			return tp.ID, nil
		},
		column: tenderprofile.FieldID,
		toTerm: tenderprofile.ByID,
		toCursor: func(tp *TenderProfile) Cursor {
			return Cursor{ID: tp.ID}
		},
	},
}

// ToEdge converts TenderProfile into TenderProfileEdge.
func (tp *TenderProfile) ToEdge(order *TenderProfileOrder) *TenderProfileEdge {
	if order == nil {
		order = DefaultTenderProfileOrder
	}
	return &TenderProfileEdge{
		Node:   tp,
		Cursor: order.Field.toCursor(tp),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// VisitRecordEdge is the edge representation of VisitRecord.
type VisitRecordEdge struct {
	Node   *VisitRecord `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// VisitRecordConnection is the connection containing edges to VisitRecord.
type VisitRecordConnection struct {
	Edges      []*VisitRecordEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *VisitRecordConnection) build(nodes []*VisitRecord, pager *visitrecordPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VisitRecord
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VisitRecord {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VisitRecord {
			return nodes[i]
		}
	}
	c.Edges = make([]*VisitRecordEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VisitRecordEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VisitRecordPaginateOption enables pagination customization.
type VisitRecordPaginateOption func(*visitrecordPager) error

// WithVisitRecordOrder configures pagination ordering.
func WithVisitRecordOrder(order []*VisitRecordOrder) VisitRecordPaginateOption {
	return func(pager *visitrecordPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithVisitRecordFilter configures pagination filter.
func WithVisitRecordFilter(filter func(*VisitRecordQuery) (*VisitRecordQuery, error)) VisitRecordPaginateOption {
	return func(pager *visitrecordPager) error {
		if filter == nil {
			return errors.New("VisitRecordQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type visitrecordPager struct {
	reverse bool
	order   []*VisitRecordOrder
	filter  func(*VisitRecordQuery) (*VisitRecordQuery, error)
}

func newVisitRecordPager(opts []VisitRecordPaginateOption, reverse bool) (*visitrecordPager, error) {
	pager := &visitrecordPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *visitrecordPager) applyFilter(query *VisitRecordQuery) (*VisitRecordQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *visitrecordPager) toCursor(vr *VisitRecord) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(vr).Value)
	}
	return Cursor{ID: vr.ID, Value: cs_}
}

func (p *visitrecordPager) applyCursors(query *VisitRecordQuery, after, before *Cursor) (*VisitRecordQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultVisitRecordOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *visitrecordPager) applyOrder(query *VisitRecordQuery) *VisitRecordQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultVisitRecordOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultVisitRecordOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *visitrecordPager) orderExpr(query *VisitRecordQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultVisitRecordOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to VisitRecord.
func (vr *VisitRecordQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VisitRecordPaginateOption,
) (*VisitRecordConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVisitRecordPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vr, err = pager.applyFilter(vr); err != nil {
		return nil, err
	}
	conn := &VisitRecordConnection{Edges: []*VisitRecordEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vr, err = pager.applyCursors(vr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vr = pager.applyOrder(vr)
	nodes, err := vr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// VisitRecordOrderFieldCreatedAt orders VisitRecord by created_at.
	VisitRecordOrderFieldCreatedAt = &VisitRecordOrderField{
		Value: func(vr *VisitRecord) (ent.Value, error) {
			return vr.CreatedAt, nil
		},
		column: visitrecord.FieldCreatedAt,
		toTerm: visitrecord.ByCreatedAt,
		toCursor: func(vr *VisitRecord) Cursor {
			return Cursor{
				ID:    vr.ID,
				Value: vr.CreatedAt,
			}
		},
	}
	// VisitRecordOrderFieldDate orders VisitRecord by date.
	VisitRecordOrderFieldDate = &VisitRecordOrderField{
		Value: func(vr *VisitRecord) (ent.Value, error) {
			return vr.Date, nil
		},
		column: visitrecord.FieldDate,
		toTerm: visitrecord.ByDate,
		toCursor: func(vr *VisitRecord) Cursor {
			return Cursor{
				ID:    vr.ID,
				Value: vr.Date,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f VisitRecordOrderField) String() string {
	var str string
	switch f.column {
	case VisitRecordOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case VisitRecordOrderFieldDate.column:
		str = "DATE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f VisitRecordOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *VisitRecordOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("VisitRecordOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *VisitRecordOrderFieldCreatedAt
	case "DATE":
		*f = *VisitRecordOrderFieldDate
	default:
		return fmt.Errorf("%s is not a valid VisitRecordOrderField", str)
	}
	return nil
}

// VisitRecordOrderField defines the ordering field of VisitRecord.
type VisitRecordOrderField struct {
	// Value extracts the ordering value from the given VisitRecord.
	Value    func(*VisitRecord) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) visitrecord.OrderOption
	toCursor func(*VisitRecord) Cursor
}

// VisitRecordOrder defines the ordering of VisitRecord.
type VisitRecordOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *VisitRecordOrderField `json:"field"`
}

// DefaultVisitRecordOrder is the default ordering of VisitRecord.
var DefaultVisitRecordOrder = &VisitRecordOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VisitRecordOrderField{
		Value: func(vr *VisitRecord) (ent.Value, error) {
			return vr.ID, nil
		},
		column: visitrecord.FieldID,
		toTerm: visitrecord.ByID,
		toCursor: func(vr *VisitRecord) Cursor {
			return Cursor{ID: vr.ID}
		},
	},
}

// ToEdge converts VisitRecord into VisitRecordEdge.
func (vr *VisitRecord) ToEdge(order *VisitRecordOrder) *VisitRecordEdge {
	if order == nil {
		order = DefaultVisitRecordOrder
	}
	return &VisitRecordEdge{
		Node:   vr,
		Cursor: order.Field.toCursor(vr),
	}
}
