// Code generated by ent, DO NOT EDIT.

package district

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the district type in the database.
	Label = "district"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAdcode holds the string denoting the adcode field in the database.
	FieldAdcode = "adcode"
	// FieldProvCode holds the string denoting the prov_code field in the database.
	FieldProvCode = "prov_code"
	// FieldCityCode holds the string denoting the city_code field in the database.
	FieldCityCode = "city_code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCenter holds the string denoting the center field in the database.
	FieldCenter = "center"
	// FieldProvinceID holds the string denoting the province_id field in the database.
	FieldProvinceID = "province_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// EdgeProvince holds the string denoting the province edge name in mutations.
	EdgeProvince = "province"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeTenders holds the string denoting the tenders edge name in mutations.
	EdgeTenders = "tenders"
	// EdgePlots holds the string denoting the plots edge name in mutations.
	EdgePlots = "plots"
	// Table holds the table name of the district in the database.
	Table = "districts"
	// ProvinceTable is the table that holds the province relation/edge.
	ProvinceTable = "districts"
	// ProvinceInverseTable is the table name for the Province entity.
	// It exists in this package in order to avoid circular dependency with the "province" package.
	ProvinceInverseTable = "provinces"
	// ProvinceColumn is the table column denoting the province relation/edge.
	ProvinceColumn = "province_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "districts"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// TendersTable is the table that holds the tenders relation/edge.
	TendersTable = "tenders"
	// TendersInverseTable is the table name for the Tender entity.
	// It exists in this package in order to avoid circular dependency with the "tender" package.
	TendersInverseTable = "tenders"
	// TendersColumn is the table column denoting the tenders relation/edge.
	TendersColumn = "district_id"
	// PlotsTable is the table that holds the plots relation/edge.
	PlotsTable = "plots"
	// PlotsInverseTable is the table name for the Plot entity.
	// It exists in this package in order to avoid circular dependency with the "plot" package.
	PlotsInverseTable = "plots"
	// PlotsColumn is the table column denoting the plots relation/edge.
	PlotsColumn = "district_id"
)

// Columns holds all SQL columns for district fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAdcode,
	FieldProvCode,
	FieldCityCode,
	FieldName,
	FieldCenter,
	FieldProvinceID,
	FieldCityID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the District queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAdcode orders the results by the adcode field.
func ByAdcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdcode, opts...).ToFunc()
}

// ByProvCode orders the results by the prov_code field.
func ByProvCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvCode, opts...).ToFunc()
}

// ByCityCode orders the results by the city_code field.
func ByCityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCenter orders the results by the center field.
func ByCenter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenter, opts...).ToFunc()
}

// ByProvinceID orders the results by the province_id field.
func ByProvinceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvinceID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByProvinceField orders the results by province field.
func ByProvinceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvinceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByTendersCount orders the results by tenders count.
func ByTendersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTendersStep(), opts...)
	}
}

// ByTenders orders the results by tenders terms.
func ByTenders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTendersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlotsCount orders the results by plots count.
func ByPlotsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlotsStep(), opts...)
	}
}

// ByPlots orders the results by plots terms.
func ByPlots(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlotsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProvinceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvinceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProvinceTable, ProvinceColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
	)
}
func newTendersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TendersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
	)
}
func newPlotsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlotsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlotsTable, PlotsColumn),
	)
}
