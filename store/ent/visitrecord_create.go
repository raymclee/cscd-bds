// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitRecordCreate is the builder for creating a VisitRecord entity.
type VisitRecordCreate struct {
	config
	mutation *VisitRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vrc *VisitRecordCreate) SetCreatedAt(t time.Time) *VisitRecordCreate {
	vrc.mutation.SetCreatedAt(t)
	return vrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableCreatedAt(t *time.Time) *VisitRecordCreate {
	if t != nil {
		vrc.SetCreatedAt(*t)
	}
	return vrc
}

// SetUpdatedAt sets the "updated_at" field.
func (vrc *VisitRecordCreate) SetUpdatedAt(t time.Time) *VisitRecordCreate {
	vrc.mutation.SetUpdatedAt(t)
	return vrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableUpdatedAt(t *time.Time) *VisitRecordCreate {
	if t != nil {
		vrc.SetUpdatedAt(*t)
	}
	return vrc
}

// SetVisitType sets the "visit_type" field.
func (vrc *VisitRecordCreate) SetVisitType(i int) *VisitRecordCreate {
	vrc.mutation.SetVisitType(i)
	return vrc
}

// SetNillableVisitType sets the "visit_type" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableVisitType(i *int) *VisitRecordCreate {
	if i != nil {
		vrc.SetVisitType(*i)
	}
	return vrc
}

// SetCommPeople sets the "comm_people" field.
func (vrc *VisitRecordCreate) SetCommPeople(s string) *VisitRecordCreate {
	vrc.mutation.SetCommPeople(s)
	return vrc
}

// SetCommContent sets the "comm_content" field.
func (vrc *VisitRecordCreate) SetCommContent(s string) *VisitRecordCreate {
	vrc.mutation.SetCommContent(s)
	return vrc
}

// SetNextStep sets the "next_step" field.
func (vrc *VisitRecordCreate) SetNextStep(s string) *VisitRecordCreate {
	vrc.mutation.SetNextStep(s)
	return vrc
}

// SetNillableNextStep sets the "next_step" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableNextStep(s *string) *VisitRecordCreate {
	if s != nil {
		vrc.SetNextStep(*s)
	}
	return vrc
}

// SetDate sets the "date" field.
func (vrc *VisitRecordCreate) SetDate(t time.Time) *VisitRecordCreate {
	vrc.mutation.SetDate(t)
	return vrc
}

// SetTenderID sets the "tender_id" field.
func (vrc *VisitRecordCreate) SetTenderID(x xid.ID) *VisitRecordCreate {
	vrc.mutation.SetTenderID(x)
	return vrc
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableTenderID(x *xid.ID) *VisitRecordCreate {
	if x != nil {
		vrc.SetTenderID(*x)
	}
	return vrc
}

// SetCustomerID sets the "customer_id" field.
func (vrc *VisitRecordCreate) SetCustomerID(x xid.ID) *VisitRecordCreate {
	vrc.mutation.SetCustomerID(x)
	return vrc
}

// SetID sets the "id" field.
func (vrc *VisitRecordCreate) SetID(x xid.ID) *VisitRecordCreate {
	vrc.mutation.SetID(x)
	return vrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vrc *VisitRecordCreate) SetNillableID(x *xid.ID) *VisitRecordCreate {
	if x != nil {
		vrc.SetID(*x)
	}
	return vrc
}

// SetTender sets the "tender" edge to the Tender entity.
func (vrc *VisitRecordCreate) SetTender(t *Tender) *VisitRecordCreate {
	return vrc.SetTenderID(t.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (vrc *VisitRecordCreate) SetCustomer(c *Customer) *VisitRecordCreate {
	return vrc.SetCustomerID(c.ID)
}

// AddFollowUpByIDs adds the "followUpBys" edge to the User entity by IDs.
func (vrc *VisitRecordCreate) AddFollowUpByIDs(ids ...xid.ID) *VisitRecordCreate {
	vrc.mutation.AddFollowUpByIDs(ids...)
	return vrc
}

// AddFollowUpBys adds the "followUpBys" edges to the User entity.
func (vrc *VisitRecordCreate) AddFollowUpBys(u ...*User) *VisitRecordCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vrc.AddFollowUpByIDs(ids...)
}

// Mutation returns the VisitRecordMutation object of the builder.
func (vrc *VisitRecordCreate) Mutation() *VisitRecordMutation {
	return vrc.mutation
}

// Save creates the VisitRecord in the database.
func (vrc *VisitRecordCreate) Save(ctx context.Context) (*VisitRecord, error) {
	vrc.defaults()
	return withHooks(ctx, vrc.sqlSave, vrc.mutation, vrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VisitRecordCreate) SaveX(ctx context.Context) *VisitRecord {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrc *VisitRecordCreate) Exec(ctx context.Context) error {
	_, err := vrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrc *VisitRecordCreate) ExecX(ctx context.Context) {
	if err := vrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vrc *VisitRecordCreate) defaults() {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		v := visitrecord.DefaultCreatedAt()
		vrc.mutation.SetCreatedAt(v)
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		v := visitrecord.DefaultUpdatedAt()
		vrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vrc.mutation.VisitType(); !ok {
		v := visitrecord.DefaultVisitType
		vrc.mutation.SetVisitType(v)
	}
	if _, ok := vrc.mutation.ID(); !ok {
		v := visitrecord.DefaultID()
		vrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VisitRecordCreate) check() error {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VisitRecord.created_at"`)}
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VisitRecord.updated_at"`)}
	}
	if _, ok := vrc.mutation.VisitType(); !ok {
		return &ValidationError{Name: "visit_type", err: errors.New(`ent: missing required field "VisitRecord.visit_type"`)}
	}
	if _, ok := vrc.mutation.CommPeople(); !ok {
		return &ValidationError{Name: "comm_people", err: errors.New(`ent: missing required field "VisitRecord.comm_people"`)}
	}
	if v, ok := vrc.mutation.CommPeople(); ok {
		if err := visitrecord.CommPeopleValidator(v); err != nil {
			return &ValidationError{Name: "comm_people", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_people": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.CommContent(); !ok {
		return &ValidationError{Name: "comm_content", err: errors.New(`ent: missing required field "VisitRecord.comm_content"`)}
	}
	if v, ok := vrc.mutation.CommContent(); ok {
		if err := visitrecord.CommContentValidator(v); err != nil {
			return &ValidationError{Name: "comm_content", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_content": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "VisitRecord.date"`)}
	}
	if _, ok := vrc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "VisitRecord.customer_id"`)}
	}
	if len(vrc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "VisitRecord.customer"`)}
	}
	return nil
}

func (vrc *VisitRecordCreate) sqlSave(ctx context.Context) (*VisitRecord, error) {
	if err := vrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vrc.mutation.id = &_node.ID
	vrc.mutation.done = true
	return _node, nil
}

func (vrc *VisitRecordCreate) createSpec() (*VisitRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &VisitRecord{config: vrc.config}
		_spec = sqlgraph.NewCreateSpec(visitrecord.Table, sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString))
	)
	_spec.OnConflict = vrc.conflict
	if id, ok := vrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vrc.mutation.CreatedAt(); ok {
		_spec.SetField(visitrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vrc.mutation.UpdatedAt(); ok {
		_spec.SetField(visitrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vrc.mutation.VisitType(); ok {
		_spec.SetField(visitrecord.FieldVisitType, field.TypeInt, value)
		_node.VisitType = value
	}
	if value, ok := vrc.mutation.CommPeople(); ok {
		_spec.SetField(visitrecord.FieldCommPeople, field.TypeString, value)
		_node.CommPeople = value
	}
	if value, ok := vrc.mutation.CommContent(); ok {
		_spec.SetField(visitrecord.FieldCommContent, field.TypeString, value)
		_node.CommContent = value
	}
	if value, ok := vrc.mutation.NextStep(); ok {
		_spec.SetField(visitrecord.FieldNextStep, field.TypeString, value)
		_node.NextStep = &value
	}
	if value, ok := vrc.mutation.Date(); ok {
		_spec.SetField(visitrecord.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := vrc.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vrc.mutation.FollowUpBysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VisitRecord.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VisitRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrc *VisitRecordCreate) OnConflict(opts ...sql.ConflictOption) *VisitRecordUpsertOne {
	vrc.conflict = opts
	return &VisitRecordUpsertOne{
		create: vrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrc *VisitRecordCreate) OnConflictColumns(columns ...string) *VisitRecordUpsertOne {
	vrc.conflict = append(vrc.conflict, sql.ConflictColumns(columns...))
	return &VisitRecordUpsertOne{
		create: vrc,
	}
}

type (
	// VisitRecordUpsertOne is the builder for "upsert"-ing
	//  one VisitRecord node.
	VisitRecordUpsertOne struct {
		create *VisitRecordCreate
	}

	// VisitRecordUpsert is the "OnConflict" setter.
	VisitRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VisitRecordUpsert) SetUpdatedAt(v time.Time) *VisitRecordUpsert {
	u.Set(visitrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateUpdatedAt() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldUpdatedAt)
	return u
}

// SetVisitType sets the "visit_type" field.
func (u *VisitRecordUpsert) SetVisitType(v int) *VisitRecordUpsert {
	u.Set(visitrecord.FieldVisitType, v)
	return u
}

// UpdateVisitType sets the "visit_type" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateVisitType() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldVisitType)
	return u
}

// AddVisitType adds v to the "visit_type" field.
func (u *VisitRecordUpsert) AddVisitType(v int) *VisitRecordUpsert {
	u.Add(visitrecord.FieldVisitType, v)
	return u
}

// SetCommPeople sets the "comm_people" field.
func (u *VisitRecordUpsert) SetCommPeople(v string) *VisitRecordUpsert {
	u.Set(visitrecord.FieldCommPeople, v)
	return u
}

// UpdateCommPeople sets the "comm_people" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateCommPeople() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldCommPeople)
	return u
}

// SetCommContent sets the "comm_content" field.
func (u *VisitRecordUpsert) SetCommContent(v string) *VisitRecordUpsert {
	u.Set(visitrecord.FieldCommContent, v)
	return u
}

// UpdateCommContent sets the "comm_content" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateCommContent() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldCommContent)
	return u
}

// SetNextStep sets the "next_step" field.
func (u *VisitRecordUpsert) SetNextStep(v string) *VisitRecordUpsert {
	u.Set(visitrecord.FieldNextStep, v)
	return u
}

// UpdateNextStep sets the "next_step" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateNextStep() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldNextStep)
	return u
}

// ClearNextStep clears the value of the "next_step" field.
func (u *VisitRecordUpsert) ClearNextStep() *VisitRecordUpsert {
	u.SetNull(visitrecord.FieldNextStep)
	return u
}

// SetDate sets the "date" field.
func (u *VisitRecordUpsert) SetDate(v time.Time) *VisitRecordUpsert {
	u.Set(visitrecord.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateDate() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldDate)
	return u
}

// SetTenderID sets the "tender_id" field.
func (u *VisitRecordUpsert) SetTenderID(v xid.ID) *VisitRecordUpsert {
	u.Set(visitrecord.FieldTenderID, v)
	return u
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateTenderID() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldTenderID)
	return u
}

// ClearTenderID clears the value of the "tender_id" field.
func (u *VisitRecordUpsert) ClearTenderID() *VisitRecordUpsert {
	u.SetNull(visitrecord.FieldTenderID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *VisitRecordUpsert) SetCustomerID(v xid.ID) *VisitRecordUpsert {
	u.Set(visitrecord.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *VisitRecordUpsert) UpdateCustomerID() *VisitRecordUpsert {
	u.SetExcluded(visitrecord.FieldCustomerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(visitrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VisitRecordUpsertOne) UpdateNewValues() *VisitRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(visitrecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(visitrecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VisitRecordUpsertOne) Ignore() *VisitRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VisitRecordUpsertOne) DoNothing() *VisitRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VisitRecordCreate.OnConflict
// documentation for more info.
func (u *VisitRecordUpsertOne) Update(set func(*VisitRecordUpsert)) *VisitRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VisitRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VisitRecordUpsertOne) SetUpdatedAt(v time.Time) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateUpdatedAt() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetVisitType sets the "visit_type" field.
func (u *VisitRecordUpsertOne) SetVisitType(v int) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetVisitType(v)
	})
}

// AddVisitType adds v to the "visit_type" field.
func (u *VisitRecordUpsertOne) AddVisitType(v int) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.AddVisitType(v)
	})
}

// UpdateVisitType sets the "visit_type" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateVisitType() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateVisitType()
	})
}

// SetCommPeople sets the "comm_people" field.
func (u *VisitRecordUpsertOne) SetCommPeople(v string) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCommPeople(v)
	})
}

// UpdateCommPeople sets the "comm_people" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateCommPeople() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCommPeople()
	})
}

// SetCommContent sets the "comm_content" field.
func (u *VisitRecordUpsertOne) SetCommContent(v string) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCommContent(v)
	})
}

// UpdateCommContent sets the "comm_content" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateCommContent() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCommContent()
	})
}

// SetNextStep sets the "next_step" field.
func (u *VisitRecordUpsertOne) SetNextStep(v string) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetNextStep(v)
	})
}

// UpdateNextStep sets the "next_step" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateNextStep() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateNextStep()
	})
}

// ClearNextStep clears the value of the "next_step" field.
func (u *VisitRecordUpsertOne) ClearNextStep() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.ClearNextStep()
	})
}

// SetDate sets the "date" field.
func (u *VisitRecordUpsertOne) SetDate(v time.Time) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateDate() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateDate()
	})
}

// SetTenderID sets the "tender_id" field.
func (u *VisitRecordUpsertOne) SetTenderID(v xid.ID) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetTenderID(v)
	})
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateTenderID() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateTenderID()
	})
}

// ClearTenderID clears the value of the "tender_id" field.
func (u *VisitRecordUpsertOne) ClearTenderID() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.ClearTenderID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *VisitRecordUpsertOne) SetCustomerID(v xid.ID) *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *VisitRecordUpsertOne) UpdateCustomerID() *VisitRecordUpsertOne {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *VisitRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VisitRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VisitRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VisitRecordUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VisitRecordUpsertOne.ID is not supported by MySQL driver. Use VisitRecordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VisitRecordUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VisitRecordCreateBulk is the builder for creating many VisitRecord entities in bulk.
type VisitRecordCreateBulk struct {
	config
	err      error
	builders []*VisitRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the VisitRecord entities in the database.
func (vrcb *VisitRecordCreateBulk) Save(ctx context.Context) ([]*VisitRecord, error) {
	if vrcb.err != nil {
		return nil, vrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VisitRecord, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VisitRecordCreateBulk) SaveX(ctx context.Context) []*VisitRecord {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrcb *VisitRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := vrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrcb *VisitRecordCreateBulk) ExecX(ctx context.Context) {
	if err := vrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VisitRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VisitRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrcb *VisitRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *VisitRecordUpsertBulk {
	vrcb.conflict = opts
	return &VisitRecordUpsertBulk{
		create: vrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrcb *VisitRecordCreateBulk) OnConflictColumns(columns ...string) *VisitRecordUpsertBulk {
	vrcb.conflict = append(vrcb.conflict, sql.ConflictColumns(columns...))
	return &VisitRecordUpsertBulk{
		create: vrcb,
	}
}

// VisitRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of VisitRecord nodes.
type VisitRecordUpsertBulk struct {
	create *VisitRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(visitrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VisitRecordUpsertBulk) UpdateNewValues() *VisitRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(visitrecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(visitrecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VisitRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VisitRecordUpsertBulk) Ignore() *VisitRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VisitRecordUpsertBulk) DoNothing() *VisitRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VisitRecordCreateBulk.OnConflict
// documentation for more info.
func (u *VisitRecordUpsertBulk) Update(set func(*VisitRecordUpsert)) *VisitRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VisitRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VisitRecordUpsertBulk) SetUpdatedAt(v time.Time) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateUpdatedAt() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetVisitType sets the "visit_type" field.
func (u *VisitRecordUpsertBulk) SetVisitType(v int) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetVisitType(v)
	})
}

// AddVisitType adds v to the "visit_type" field.
func (u *VisitRecordUpsertBulk) AddVisitType(v int) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.AddVisitType(v)
	})
}

// UpdateVisitType sets the "visit_type" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateVisitType() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateVisitType()
	})
}

// SetCommPeople sets the "comm_people" field.
func (u *VisitRecordUpsertBulk) SetCommPeople(v string) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCommPeople(v)
	})
}

// UpdateCommPeople sets the "comm_people" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateCommPeople() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCommPeople()
	})
}

// SetCommContent sets the "comm_content" field.
func (u *VisitRecordUpsertBulk) SetCommContent(v string) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCommContent(v)
	})
}

// UpdateCommContent sets the "comm_content" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateCommContent() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCommContent()
	})
}

// SetNextStep sets the "next_step" field.
func (u *VisitRecordUpsertBulk) SetNextStep(v string) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetNextStep(v)
	})
}

// UpdateNextStep sets the "next_step" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateNextStep() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateNextStep()
	})
}

// ClearNextStep clears the value of the "next_step" field.
func (u *VisitRecordUpsertBulk) ClearNextStep() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.ClearNextStep()
	})
}

// SetDate sets the "date" field.
func (u *VisitRecordUpsertBulk) SetDate(v time.Time) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateDate() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateDate()
	})
}

// SetTenderID sets the "tender_id" field.
func (u *VisitRecordUpsertBulk) SetTenderID(v xid.ID) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetTenderID(v)
	})
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateTenderID() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateTenderID()
	})
}

// ClearTenderID clears the value of the "tender_id" field.
func (u *VisitRecordUpsertBulk) ClearTenderID() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.ClearTenderID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *VisitRecordUpsertBulk) SetCustomerID(v xid.ID) *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *VisitRecordUpsertBulk) UpdateCustomerID() *VisitRecordUpsertBulk {
	return u.Update(func(s *VisitRecordUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *VisitRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VisitRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VisitRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VisitRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
