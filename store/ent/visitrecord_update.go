// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitRecordUpdate is the builder for updating VisitRecord entities.
type VisitRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *VisitRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VisitRecordUpdate builder.
func (vru *VisitRecordUpdate) Where(ps ...predicate.VisitRecord) *VisitRecordUpdate {
	vru.mutation.Where(ps...)
	return vru
}

// SetUpdatedAt sets the "updated_at" field.
func (vru *VisitRecordUpdate) SetUpdatedAt(t time.Time) *VisitRecordUpdate {
	vru.mutation.SetUpdatedAt(t)
	return vru
}

// SetVisitType sets the "visit_type" field.
func (vru *VisitRecordUpdate) SetVisitType(i int) *VisitRecordUpdate {
	vru.mutation.ResetVisitType()
	vru.mutation.SetVisitType(i)
	return vru
}

// SetNillableVisitType sets the "visit_type" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableVisitType(i *int) *VisitRecordUpdate {
	if i != nil {
		vru.SetVisitType(*i)
	}
	return vru
}

// AddVisitType adds i to the "visit_type" field.
func (vru *VisitRecordUpdate) AddVisitType(i int) *VisitRecordUpdate {
	vru.mutation.AddVisitType(i)
	return vru
}

// SetCommPeople sets the "comm_people" field.
func (vru *VisitRecordUpdate) SetCommPeople(s string) *VisitRecordUpdate {
	vru.mutation.SetCommPeople(s)
	return vru
}

// SetNillableCommPeople sets the "comm_people" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableCommPeople(s *string) *VisitRecordUpdate {
	if s != nil {
		vru.SetCommPeople(*s)
	}
	return vru
}

// SetCommContent sets the "comm_content" field.
func (vru *VisitRecordUpdate) SetCommContent(s string) *VisitRecordUpdate {
	vru.mutation.SetCommContent(s)
	return vru
}

// SetNillableCommContent sets the "comm_content" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableCommContent(s *string) *VisitRecordUpdate {
	if s != nil {
		vru.SetCommContent(*s)
	}
	return vru
}

// SetNextStep sets the "next_step" field.
func (vru *VisitRecordUpdate) SetNextStep(s string) *VisitRecordUpdate {
	vru.mutation.SetNextStep(s)
	return vru
}

// SetNillableNextStep sets the "next_step" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableNextStep(s *string) *VisitRecordUpdate {
	if s != nil {
		vru.SetNextStep(*s)
	}
	return vru
}

// ClearNextStep clears the value of the "next_step" field.
func (vru *VisitRecordUpdate) ClearNextStep() *VisitRecordUpdate {
	vru.mutation.ClearNextStep()
	return vru
}

// SetDate sets the "date" field.
func (vru *VisitRecordUpdate) SetDate(t time.Time) *VisitRecordUpdate {
	vru.mutation.SetDate(t)
	return vru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableDate(t *time.Time) *VisitRecordUpdate {
	if t != nil {
		vru.SetDate(*t)
	}
	return vru
}

// SetTenderID sets the "tender_id" field.
func (vru *VisitRecordUpdate) SetTenderID(x xid.ID) *VisitRecordUpdate {
	vru.mutation.SetTenderID(x)
	return vru
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableTenderID(x *xid.ID) *VisitRecordUpdate {
	if x != nil {
		vru.SetTenderID(*x)
	}
	return vru
}

// ClearTenderID clears the value of the "tender_id" field.
func (vru *VisitRecordUpdate) ClearTenderID() *VisitRecordUpdate {
	vru.mutation.ClearTenderID()
	return vru
}

// SetCustomerID sets the "customer_id" field.
func (vru *VisitRecordUpdate) SetCustomerID(x xid.ID) *VisitRecordUpdate {
	vru.mutation.SetCustomerID(x)
	return vru
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (vru *VisitRecordUpdate) SetNillableCustomerID(x *xid.ID) *VisitRecordUpdate {
	if x != nil {
		vru.SetCustomerID(*x)
	}
	return vru
}

// SetTender sets the "tender" edge to the Tender entity.
func (vru *VisitRecordUpdate) SetTender(t *Tender) *VisitRecordUpdate {
	return vru.SetTenderID(t.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (vru *VisitRecordUpdate) SetCustomer(c *Customer) *VisitRecordUpdate {
	return vru.SetCustomerID(c.ID)
}

// AddFollowUpByIDs adds the "followUpBys" edge to the User entity by IDs.
func (vru *VisitRecordUpdate) AddFollowUpByIDs(ids ...xid.ID) *VisitRecordUpdate {
	vru.mutation.AddFollowUpByIDs(ids...)
	return vru
}

// AddFollowUpBys adds the "followUpBys" edges to the User entity.
func (vru *VisitRecordUpdate) AddFollowUpBys(u ...*User) *VisitRecordUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vru.AddFollowUpByIDs(ids...)
}

// Mutation returns the VisitRecordMutation object of the builder.
func (vru *VisitRecordUpdate) Mutation() *VisitRecordMutation {
	return vru.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (vru *VisitRecordUpdate) ClearTender() *VisitRecordUpdate {
	vru.mutation.ClearTender()
	return vru
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (vru *VisitRecordUpdate) ClearCustomer() *VisitRecordUpdate {
	vru.mutation.ClearCustomer()
	return vru
}

// ClearFollowUpBys clears all "followUpBys" edges to the User entity.
func (vru *VisitRecordUpdate) ClearFollowUpBys() *VisitRecordUpdate {
	vru.mutation.ClearFollowUpBys()
	return vru
}

// RemoveFollowUpByIDs removes the "followUpBys" edge to User entities by IDs.
func (vru *VisitRecordUpdate) RemoveFollowUpByIDs(ids ...xid.ID) *VisitRecordUpdate {
	vru.mutation.RemoveFollowUpByIDs(ids...)
	return vru
}

// RemoveFollowUpBys removes "followUpBys" edges to User entities.
func (vru *VisitRecordUpdate) RemoveFollowUpBys(u ...*User) *VisitRecordUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vru.RemoveFollowUpByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VisitRecordUpdate) Save(ctx context.Context) (int, error) {
	vru.defaults()
	return withHooks(ctx, vru.sqlSave, vru.mutation, vru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VisitRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VisitRecordUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VisitRecordUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vru *VisitRecordUpdate) defaults() {
	if _, ok := vru.mutation.UpdatedAt(); !ok {
		v := visitrecord.UpdateDefaultUpdatedAt()
		vru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vru *VisitRecordUpdate) check() error {
	if v, ok := vru.mutation.CommPeople(); ok {
		if err := visitrecord.CommPeopleValidator(v); err != nil {
			return &ValidationError{Name: "comm_people", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_people": %w`, err)}
		}
	}
	if v, ok := vru.mutation.CommContent(); ok {
		if err := visitrecord.CommContentValidator(v); err != nil {
			return &ValidationError{Name: "comm_content", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_content": %w`, err)}
		}
	}
	if vru.mutation.CustomerCleared() && len(vru.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VisitRecord.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vru *VisitRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitRecordUpdate {
	vru.modifiers = append(vru.modifiers, modifiers...)
	return vru
}

func (vru *VisitRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitrecord.Table, visitrecord.Columns, sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString))
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.UpdatedAt(); ok {
		_spec.SetField(visitrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vru.mutation.VisitType(); ok {
		_spec.SetField(visitrecord.FieldVisitType, field.TypeInt, value)
	}
	if value, ok := vru.mutation.AddedVisitType(); ok {
		_spec.AddField(visitrecord.FieldVisitType, field.TypeInt, value)
	}
	if value, ok := vru.mutation.CommPeople(); ok {
		_spec.SetField(visitrecord.FieldCommPeople, field.TypeString, value)
	}
	if value, ok := vru.mutation.CommContent(); ok {
		_spec.SetField(visitrecord.FieldCommContent, field.TypeString, value)
	}
	if value, ok := vru.mutation.NextStep(); ok {
		_spec.SetField(visitrecord.FieldNextStep, field.TypeString, value)
	}
	if vru.mutation.NextStepCleared() {
		_spec.ClearField(visitrecord.FieldNextStep, field.TypeString)
	}
	if value, ok := vru.mutation.Date(); ok {
		_spec.SetField(visitrecord.FieldDate, field.TypeTime, value)
	}
	if vru.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.FollowUpBysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.RemovedFollowUpBysIDs(); len(nodes) > 0 && !vru.mutation.FollowUpBysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.FollowUpBysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vru.mutation.done = true
	return n, nil
}

// VisitRecordUpdateOne is the builder for updating a single VisitRecord entity.
type VisitRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VisitRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vruo *VisitRecordUpdateOne) SetUpdatedAt(t time.Time) *VisitRecordUpdateOne {
	vruo.mutation.SetUpdatedAt(t)
	return vruo
}

// SetVisitType sets the "visit_type" field.
func (vruo *VisitRecordUpdateOne) SetVisitType(i int) *VisitRecordUpdateOne {
	vruo.mutation.ResetVisitType()
	vruo.mutation.SetVisitType(i)
	return vruo
}

// SetNillableVisitType sets the "visit_type" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableVisitType(i *int) *VisitRecordUpdateOne {
	if i != nil {
		vruo.SetVisitType(*i)
	}
	return vruo
}

// AddVisitType adds i to the "visit_type" field.
func (vruo *VisitRecordUpdateOne) AddVisitType(i int) *VisitRecordUpdateOne {
	vruo.mutation.AddVisitType(i)
	return vruo
}

// SetCommPeople sets the "comm_people" field.
func (vruo *VisitRecordUpdateOne) SetCommPeople(s string) *VisitRecordUpdateOne {
	vruo.mutation.SetCommPeople(s)
	return vruo
}

// SetNillableCommPeople sets the "comm_people" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableCommPeople(s *string) *VisitRecordUpdateOne {
	if s != nil {
		vruo.SetCommPeople(*s)
	}
	return vruo
}

// SetCommContent sets the "comm_content" field.
func (vruo *VisitRecordUpdateOne) SetCommContent(s string) *VisitRecordUpdateOne {
	vruo.mutation.SetCommContent(s)
	return vruo
}

// SetNillableCommContent sets the "comm_content" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableCommContent(s *string) *VisitRecordUpdateOne {
	if s != nil {
		vruo.SetCommContent(*s)
	}
	return vruo
}

// SetNextStep sets the "next_step" field.
func (vruo *VisitRecordUpdateOne) SetNextStep(s string) *VisitRecordUpdateOne {
	vruo.mutation.SetNextStep(s)
	return vruo
}

// SetNillableNextStep sets the "next_step" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableNextStep(s *string) *VisitRecordUpdateOne {
	if s != nil {
		vruo.SetNextStep(*s)
	}
	return vruo
}

// ClearNextStep clears the value of the "next_step" field.
func (vruo *VisitRecordUpdateOne) ClearNextStep() *VisitRecordUpdateOne {
	vruo.mutation.ClearNextStep()
	return vruo
}

// SetDate sets the "date" field.
func (vruo *VisitRecordUpdateOne) SetDate(t time.Time) *VisitRecordUpdateOne {
	vruo.mutation.SetDate(t)
	return vruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableDate(t *time.Time) *VisitRecordUpdateOne {
	if t != nil {
		vruo.SetDate(*t)
	}
	return vruo
}

// SetTenderID sets the "tender_id" field.
func (vruo *VisitRecordUpdateOne) SetTenderID(x xid.ID) *VisitRecordUpdateOne {
	vruo.mutation.SetTenderID(x)
	return vruo
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableTenderID(x *xid.ID) *VisitRecordUpdateOne {
	if x != nil {
		vruo.SetTenderID(*x)
	}
	return vruo
}

// ClearTenderID clears the value of the "tender_id" field.
func (vruo *VisitRecordUpdateOne) ClearTenderID() *VisitRecordUpdateOne {
	vruo.mutation.ClearTenderID()
	return vruo
}

// SetCustomerID sets the "customer_id" field.
func (vruo *VisitRecordUpdateOne) SetCustomerID(x xid.ID) *VisitRecordUpdateOne {
	vruo.mutation.SetCustomerID(x)
	return vruo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (vruo *VisitRecordUpdateOne) SetNillableCustomerID(x *xid.ID) *VisitRecordUpdateOne {
	if x != nil {
		vruo.SetCustomerID(*x)
	}
	return vruo
}

// SetTender sets the "tender" edge to the Tender entity.
func (vruo *VisitRecordUpdateOne) SetTender(t *Tender) *VisitRecordUpdateOne {
	return vruo.SetTenderID(t.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (vruo *VisitRecordUpdateOne) SetCustomer(c *Customer) *VisitRecordUpdateOne {
	return vruo.SetCustomerID(c.ID)
}

// AddFollowUpByIDs adds the "followUpBys" edge to the User entity by IDs.
func (vruo *VisitRecordUpdateOne) AddFollowUpByIDs(ids ...xid.ID) *VisitRecordUpdateOne {
	vruo.mutation.AddFollowUpByIDs(ids...)
	return vruo
}

// AddFollowUpBys adds the "followUpBys" edges to the User entity.
func (vruo *VisitRecordUpdateOne) AddFollowUpBys(u ...*User) *VisitRecordUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vruo.AddFollowUpByIDs(ids...)
}

// Mutation returns the VisitRecordMutation object of the builder.
func (vruo *VisitRecordUpdateOne) Mutation() *VisitRecordMutation {
	return vruo.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (vruo *VisitRecordUpdateOne) ClearTender() *VisitRecordUpdateOne {
	vruo.mutation.ClearTender()
	return vruo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (vruo *VisitRecordUpdateOne) ClearCustomer() *VisitRecordUpdateOne {
	vruo.mutation.ClearCustomer()
	return vruo
}

// ClearFollowUpBys clears all "followUpBys" edges to the User entity.
func (vruo *VisitRecordUpdateOne) ClearFollowUpBys() *VisitRecordUpdateOne {
	vruo.mutation.ClearFollowUpBys()
	return vruo
}

// RemoveFollowUpByIDs removes the "followUpBys" edge to User entities by IDs.
func (vruo *VisitRecordUpdateOne) RemoveFollowUpByIDs(ids ...xid.ID) *VisitRecordUpdateOne {
	vruo.mutation.RemoveFollowUpByIDs(ids...)
	return vruo
}

// RemoveFollowUpBys removes "followUpBys" edges to User entities.
func (vruo *VisitRecordUpdateOne) RemoveFollowUpBys(u ...*User) *VisitRecordUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vruo.RemoveFollowUpByIDs(ids...)
}

// Where appends a list predicates to the VisitRecordUpdate builder.
func (vruo *VisitRecordUpdateOne) Where(ps ...predicate.VisitRecord) *VisitRecordUpdateOne {
	vruo.mutation.Where(ps...)
	return vruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VisitRecordUpdateOne) Select(field string, fields ...string) *VisitRecordUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VisitRecord entity.
func (vruo *VisitRecordUpdateOne) Save(ctx context.Context) (*VisitRecord, error) {
	vruo.defaults()
	return withHooks(ctx, vruo.sqlSave, vruo.mutation, vruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VisitRecordUpdateOne) SaveX(ctx context.Context) *VisitRecord {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VisitRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VisitRecordUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vruo *VisitRecordUpdateOne) defaults() {
	if _, ok := vruo.mutation.UpdatedAt(); !ok {
		v := visitrecord.UpdateDefaultUpdatedAt()
		vruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vruo *VisitRecordUpdateOne) check() error {
	if v, ok := vruo.mutation.CommPeople(); ok {
		if err := visitrecord.CommPeopleValidator(v); err != nil {
			return &ValidationError{Name: "comm_people", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_people": %w`, err)}
		}
	}
	if v, ok := vruo.mutation.CommContent(); ok {
		if err := visitrecord.CommContentValidator(v); err != nil {
			return &ValidationError{Name: "comm_content", err: fmt.Errorf(`ent: validator failed for field "VisitRecord.comm_content": %w`, err)}
		}
	}
	if vruo.mutation.CustomerCleared() && len(vruo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VisitRecord.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vruo *VisitRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitRecordUpdateOne {
	vruo.modifiers = append(vruo.modifiers, modifiers...)
	return vruo
}

func (vruo *VisitRecordUpdateOne) sqlSave(ctx context.Context) (_node *VisitRecord, err error) {
	if err := vruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitrecord.Table, visitrecord.Columns, sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString))
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VisitRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitrecord.FieldID)
		for _, f := range fields {
			if !visitrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.UpdatedAt(); ok {
		_spec.SetField(visitrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vruo.mutation.VisitType(); ok {
		_spec.SetField(visitrecord.FieldVisitType, field.TypeInt, value)
	}
	if value, ok := vruo.mutation.AddedVisitType(); ok {
		_spec.AddField(visitrecord.FieldVisitType, field.TypeInt, value)
	}
	if value, ok := vruo.mutation.CommPeople(); ok {
		_spec.SetField(visitrecord.FieldCommPeople, field.TypeString, value)
	}
	if value, ok := vruo.mutation.CommContent(); ok {
		_spec.SetField(visitrecord.FieldCommContent, field.TypeString, value)
	}
	if value, ok := vruo.mutation.NextStep(); ok {
		_spec.SetField(visitrecord.FieldNextStep, field.TypeString, value)
	}
	if vruo.mutation.NextStepCleared() {
		_spec.ClearField(visitrecord.FieldNextStep, field.TypeString)
	}
	if value, ok := vruo.mutation.Date(); ok {
		_spec.SetField(visitrecord.FieldDate, field.TypeTime, value)
	}
	if vruo.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.FollowUpBysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.RemovedFollowUpBysIDs(); len(nodes) > 0 && !vruo.mutation.FollowUpBysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.FollowUpBysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vruo.modifiers...)
	_node = &VisitRecord{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vruo.mutation.done = true
	return _node, nil
}
