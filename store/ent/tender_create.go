// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/schema/zht"
	"cscd-bds/store/ent/tender"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderCreate is the builder for creating a Tender entity.
type TenderCreate struct {
	config
	mutation *TenderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TenderCreate) SetCreatedAt(t time.Time) *TenderCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCreatedAt(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TenderCreate) SetUpdatedAt(t time.Time) *TenderCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TenderCreate) SetNillableUpdatedAt(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCode sets the "code" field.
func (tc *TenderCreate) SetCode(s string) *TenderCreate {
	tc.mutation.SetCode(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TenderCreate) SetStatus(i int8) *TenderCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TenderCreate) SetNillableStatus(i *int8) *TenderCreate {
	if i != nil {
		tc.SetStatus(*i)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TenderCreate) SetName(s string) *TenderCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tc *TenderCreate) SetEstimatedAmount(f float64) *TenderCreate {
	tc.mutation.SetEstimatedAmount(f)
	return tc
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedAmount(f *float64) *TenderCreate {
	if f != nil {
		tc.SetEstimatedAmount(*f)
	}
	return tc
}

// SetTenderDate sets the "tender_date" field.
func (tc *TenderCreate) SetTenderDate(t time.Time) *TenderCreate {
	tc.mutation.SetTenderDate(t)
	return tc
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTenderDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetTenderDate(*t)
	}
	return tc
}

// SetFindDate sets the "find_date" field.
func (tc *TenderCreate) SetFindDate(t time.Time) *TenderCreate {
	tc.mutation.SetFindDate(t)
	return tc
}

// SetFinder sets the "finder" field.
func (tc *TenderCreate) SetFinder(z *zht.User) *TenderCreate {
	tc.mutation.SetFinder(z)
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TenderCreate) SetCreatedBy(z *zht.User) *TenderCreate {
	tc.mutation.SetCreatedBy(z)
	return tc
}

// SetFollowingPerson sets the "following_person" field.
func (tc *TenderCreate) SetFollowingPerson(z []zht.User) *TenderCreate {
	tc.mutation.SetFollowingPerson(z)
	return tc
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tc *TenderCreate) SetSizeAndValueRating(i int8) *TenderCreate {
	tc.mutation.SetSizeAndValueRating(i)
	return tc
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableSizeAndValueRating(i *int8) *TenderCreate {
	if i != nil {
		tc.SetSizeAndValueRating(*i)
	}
	return tc
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tc *TenderCreate) SetCreditAndPaymentRating(i int8) *TenderCreate {
	tc.mutation.SetCreditAndPaymentRating(i)
	return tc
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCreditAndPaymentRating(i *int8) *TenderCreate {
	if i != nil {
		tc.SetCreditAndPaymentRating(*i)
	}
	return tc
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tc *TenderCreate) SetTimeLimitRating(i int8) *TenderCreate {
	tc.mutation.SetTimeLimitRating(i)
	return tc
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTimeLimitRating(i *int8) *TenderCreate {
	if i != nil {
		tc.SetTimeLimitRating(*i)
	}
	return tc
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tc *TenderCreate) SetCustomerRelationshipRating(i int8) *TenderCreate {
	tc.mutation.SetCustomerRelationshipRating(i)
	return tc
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCustomerRelationshipRating(i *int8) *TenderCreate {
	if i != nil {
		tc.SetCustomerRelationshipRating(*i)
	}
	return tc
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tc *TenderCreate) SetCompetitivePartnershipRating(i int8) *TenderCreate {
	tc.mutation.SetCompetitivePartnershipRating(i)
	return tc
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCompetitivePartnershipRating(i *int8) *TenderCreate {
	if i != nil {
		tc.SetCompetitivePartnershipRating(*i)
	}
	return tc
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tc *TenderCreate) SetPrepareToBid(b bool) *TenderCreate {
	tc.mutation.SetPrepareToBid(b)
	return tc
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tc *TenderCreate) SetNillablePrepareToBid(b *bool) *TenderCreate {
	if b != nil {
		tc.SetPrepareToBid(*b)
	}
	return tc
}

// SetProjectCode sets the "project_code" field.
func (tc *TenderCreate) SetProjectCode(s string) *TenderCreate {
	tc.mutation.SetProjectCode(s)
	return tc
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectCode(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectCode(*s)
	}
	return tc
}

// SetProjectDefinition sets the "project_definition" field.
func (tc *TenderCreate) SetProjectDefinition(s string) *TenderCreate {
	tc.mutation.SetProjectDefinition(s)
	return tc
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectDefinition(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectDefinition(*s)
	}
	return tc
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tc *TenderCreate) SetEstimatedProjectStartDate(t time.Time) *TenderCreate {
	tc.mutation.SetEstimatedProjectStartDate(t)
	return tc
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetEstimatedProjectStartDate(*t)
	}
	return tc
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tc *TenderCreate) SetEstimatedProjectEndDate(t time.Time) *TenderCreate {
	tc.mutation.SetEstimatedProjectEndDate(t)
	return tc
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetEstimatedProjectEndDate(*t)
	}
	return tc
}

// SetProjectType sets the "project_type" field.
func (tc *TenderCreate) SetProjectType(s string) *TenderCreate {
	tc.mutation.SetProjectType(s)
	return tc
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectType(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectType(*s)
	}
	return tc
}

// SetAttachements sets the "attachements" field.
func (tc *TenderCreate) SetAttachements(s []string) *TenderCreate {
	tc.mutation.SetAttachements(s)
	return tc
}

// SetGeoLocation sets the "geo_location" field.
func (tc *TenderCreate) SetGeoLocation(s string) *TenderCreate {
	tc.mutation.SetGeoLocation(s)
	return tc
}

// SetNillableGeoLocation sets the "geo_location" field if the given value is not nil.
func (tc *TenderCreate) SetNillableGeoLocation(s *string) *TenderCreate {
	if s != nil {
		tc.SetGeoLocation(*s)
	}
	return tc
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tc *TenderCreate) SetGeoCoordinate(gj *geo.GeoJson) *TenderCreate {
	tc.mutation.SetGeoCoordinate(gj)
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TenderCreate) SetRemark(s string) *TenderCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TenderCreate) SetNillableRemark(s *string) *TenderCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetImages sets the "images" field.
func (tc *TenderCreate) SetImages(s []string) *TenderCreate {
	tc.mutation.SetImages(s)
	return tc
}

// SetAreaID sets the "area_id" field.
func (tc *TenderCreate) SetAreaID(x xid.ID) *TenderCreate {
	tc.mutation.SetAreaID(x)
	return tc
}

// SetCustomerID sets the "customer_id" field.
func (tc *TenderCreate) SetCustomerID(x xid.ID) *TenderCreate {
	tc.mutation.SetCustomerID(x)
	return tc
}

// SetID sets the "id" field.
func (tc *TenderCreate) SetID(x xid.ID) *TenderCreate {
	tc.mutation.SetID(x)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TenderCreate) SetNillableID(x *xid.ID) *TenderCreate {
	if x != nil {
		tc.SetID(*x)
	}
	return tc
}

// SetArea sets the "area" edge to the Area entity.
func (tc *TenderCreate) SetArea(a *Area) *TenderCreate {
	return tc.SetAreaID(a.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tc *TenderCreate) SetCustomer(c *Customer) *TenderCreate {
	return tc.SetCustomerID(c.ID)
}

// Mutation returns the TenderMutation object of the builder.
func (tc *TenderCreate) Mutation() *TenderMutation {
	return tc.mutation
}

// Save creates the Tender in the database.
func (tc *TenderCreate) Save(ctx context.Context) (*Tender, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenderCreate) SaveX(ctx context.Context) *Tender {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenderCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenderCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenderCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tender.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tender.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := tender.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.PrepareToBid(); !ok {
		v := tender.DefaultPrepareToBid
		tc.mutation.SetPrepareToBid(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tender.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenderCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tender.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tender.updated_at"`)}
	}
	if _, ok := tc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Tender.code"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Tender.status"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tender.name"`)}
	}
	if _, ok := tc.mutation.FindDate(); !ok {
		return &ValidationError{Name: "find_date", err: errors.New(`ent: missing required field "Tender.find_date"`)}
	}
	if _, ok := tc.mutation.Finder(); !ok {
		return &ValidationError{Name: "finder", err: errors.New(`ent: missing required field "Tender.finder"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Tender.created_by"`)}
	}
	if v, ok := tc.mutation.SizeAndValueRating(); ok {
		if err := tender.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CreditAndPaymentRating(); ok {
		if err := tender.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.TimeLimitRating(); ok {
		if err := tender.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CustomerRelationshipRating(); ok {
		if err := tender.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CompetitivePartnershipRating(); ok {
		if err := tender.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.competitive_partnership_rating": %w`, err)}
		}
	}
	if _, ok := tc.mutation.PrepareToBid(); !ok {
		return &ValidationError{Name: "prepare_to_bid", err: errors.New(`ent: missing required field "Tender.prepare_to_bid"`)}
	}
	if _, ok := tc.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area_id", err: errors.New(`ent: missing required field "Tender.area_id"`)}
	}
	if _, ok := tc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Tender.customer_id"`)}
	}
	if len(tc.mutation.AreaIDs()) == 0 {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required edge "Tender.area"`)}
	}
	if len(tc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Tender.customer"`)}
	}
	return nil
}

func (tc *TenderCreate) sqlSave(ctx context.Context) (*Tender, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenderCreate) createSpec() (*Tender, *sqlgraph.CreateSpec) {
	var (
		_node = &Tender{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tender.Table, sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tender.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tender.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Code(); ok {
		_spec.SetField(tender.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(tender.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tender.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.EstimatedAmount(); ok {
		_spec.SetField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
		_node.EstimatedAmount = value
	}
	if value, ok := tc.mutation.TenderDate(); ok {
		_spec.SetField(tender.FieldTenderDate, field.TypeTime, value)
		_node.TenderDate = value
	}
	if value, ok := tc.mutation.FindDate(); ok {
		_spec.SetField(tender.FieldFindDate, field.TypeTime, value)
		_node.FindDate = value
	}
	if value, ok := tc.mutation.Finder(); ok {
		_spec.SetField(tender.FieldFinder, field.TypeJSON, value)
		_node.Finder = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(tender.FieldCreatedBy, field.TypeJSON, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.FollowingPerson(); ok {
		_spec.SetField(tender.FieldFollowingPerson, field.TypeJSON, value)
		_node.FollowingPerson = value
	}
	if value, ok := tc.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tender.FieldSizeAndValueRating, field.TypeInt8, value)
		_node.SizeAndValueRating = value
	}
	if value, ok := tc.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRating, field.TypeInt8, value)
		_node.CreditAndPaymentRating = value
	}
	if value, ok := tc.mutation.TimeLimitRating(); ok {
		_spec.SetField(tender.FieldTimeLimitRating, field.TypeInt8, value)
		_node.TimeLimitRating = value
	}
	if value, ok := tc.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRating, field.TypeInt8, value)
		_node.CustomerRelationshipRating = value
	}
	if value, ok := tc.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRating, field.TypeInt8, value)
		_node.CompetitivePartnershipRating = value
	}
	if value, ok := tc.mutation.PrepareToBid(); ok {
		_spec.SetField(tender.FieldPrepareToBid, field.TypeBool, value)
		_node.PrepareToBid = value
	}
	if value, ok := tc.mutation.ProjectCode(); ok {
		_spec.SetField(tender.FieldProjectCode, field.TypeString, value)
		_node.ProjectCode = &value
	}
	if value, ok := tc.mutation.ProjectDefinition(); ok {
		_spec.SetField(tender.FieldProjectDefinition, field.TypeString, value)
		_node.ProjectDefinition = &value
	}
	if value, ok := tc.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectStartDate, field.TypeTime, value)
		_node.EstimatedProjectStartDate = &value
	}
	if value, ok := tc.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectEndDate, field.TypeTime, value)
		_node.EstimatedProjectEndDate = &value
	}
	if value, ok := tc.mutation.ProjectType(); ok {
		_spec.SetField(tender.FieldProjectType, field.TypeString, value)
		_node.ProjectType = &value
	}
	if value, ok := tc.mutation.Attachements(); ok {
		_spec.SetField(tender.FieldAttachements, field.TypeJSON, value)
		_node.Attachements = value
	}
	if value, ok := tc.mutation.GeoLocation(); ok {
		_spec.SetField(tender.FieldGeoLocation, field.TypeString, value)
		_node.GeoLocation = &value
	}
	if value, ok := tc.mutation.GeoCoordinate(); ok {
		_spec.SetField(tender.FieldGeoCoordinate, field.TypeOther, value)
		_node.GeoCoordinate = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.SetField(tender.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := tc.mutation.Images(); ok {
		_spec.SetField(tender.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if nodes := tc.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tender.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TenderCreate) OnConflict(opts ...sql.ConflictOption) *TenderUpsertOne {
	tc.conflict = opts
	return &TenderUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TenderCreate) OnConflictColumns(columns ...string) *TenderUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenderUpsertOne{
		create: tc,
	}
}

type (
	// TenderUpsertOne is the builder for "upsert"-ing
	//  one Tender node.
	TenderUpsertOne struct {
		create *TenderCreate
	}

	// TenderUpsert is the "OnConflict" setter.
	TenderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsert) SetUpdatedAt(v time.Time) *TenderUpsert {
	u.Set(tender.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsert) UpdateUpdatedAt() *TenderUpsert {
	u.SetExcluded(tender.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *TenderUpsert) SetCode(v string) *TenderUpsert {
	u.Set(tender.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCode() *TenderUpsert {
	u.SetExcluded(tender.FieldCode)
	return u
}

// SetStatus sets the "status" field.
func (u *TenderUpsert) SetStatus(v int8) *TenderUpsert {
	u.Set(tender.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsert) UpdateStatus() *TenderUpsert {
	u.SetExcluded(tender.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsert) AddStatus(v int8) *TenderUpsert {
	u.Add(tender.FieldStatus, v)
	return u
}

// SetName sets the "name" field.
func (u *TenderUpsert) SetName(v string) *TenderUpsert {
	u.Set(tender.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsert) UpdateName() *TenderUpsert {
	u.SetExcluded(tender.FieldName)
	return u
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsert) SetEstimatedAmount(v float64) *TenderUpsert {
	u.Set(tender.FieldEstimatedAmount, v)
	return u
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedAmount() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedAmount)
	return u
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsert) AddEstimatedAmount(v float64) *TenderUpsert {
	u.Add(tender.FieldEstimatedAmount, v)
	return u
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsert) ClearEstimatedAmount() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedAmount)
	return u
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsert) SetTenderDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldTenderDate, v)
	return u
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTenderDate() *TenderUpsert {
	u.SetExcluded(tender.FieldTenderDate)
	return u
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsert) ClearTenderDate() *TenderUpsert {
	u.SetNull(tender.FieldTenderDate)
	return u
}

// SetFindDate sets the "find_date" field.
func (u *TenderUpsert) SetFindDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldFindDate, v)
	return u
}

// UpdateFindDate sets the "find_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFindDate() *TenderUpsert {
	u.SetExcluded(tender.FieldFindDate)
	return u
}

// SetFinder sets the "finder" field.
func (u *TenderUpsert) SetFinder(v *zht.User) *TenderUpsert {
	u.Set(tender.FieldFinder, v)
	return u
}

// UpdateFinder sets the "finder" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFinder() *TenderUpsert {
	u.SetExcluded(tender.FieldFinder)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TenderUpsert) SetCreatedBy(v *zht.User) *TenderUpsert {
	u.Set(tender.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCreatedBy() *TenderUpsert {
	u.SetExcluded(tender.FieldCreatedBy)
	return u
}

// SetFollowingPerson sets the "following_person" field.
func (u *TenderUpsert) SetFollowingPerson(v []zht.User) *TenderUpsert {
	u.Set(tender.FieldFollowingPerson, v)
	return u
}

// UpdateFollowingPerson sets the "following_person" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFollowingPerson() *TenderUpsert {
	u.SetExcluded(tender.FieldFollowingPerson)
	return u
}

// ClearFollowingPerson clears the value of the "following_person" field.
func (u *TenderUpsert) ClearFollowingPerson() *TenderUpsert {
	u.SetNull(tender.FieldFollowingPerson)
	return u
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsert) SetSizeAndValueRating(v int8) *TenderUpsert {
	u.Set(tender.FieldSizeAndValueRating, v)
	return u
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateSizeAndValueRating() *TenderUpsert {
	u.SetExcluded(tender.FieldSizeAndValueRating)
	return u
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsert) AddSizeAndValueRating(v int8) *TenderUpsert {
	u.Add(tender.FieldSizeAndValueRating, v)
	return u
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsert) ClearSizeAndValueRating() *TenderUpsert {
	u.SetNull(tender.FieldSizeAndValueRating)
	return u
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsert) SetCreditAndPaymentRating(v int8) *TenderUpsert {
	u.Set(tender.FieldCreditAndPaymentRating, v)
	return u
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCreditAndPaymentRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCreditAndPaymentRating)
	return u
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsert) AddCreditAndPaymentRating(v int8) *TenderUpsert {
	u.Add(tender.FieldCreditAndPaymentRating, v)
	return u
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsert) ClearCreditAndPaymentRating() *TenderUpsert {
	u.SetNull(tender.FieldCreditAndPaymentRating)
	return u
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsert) SetTimeLimitRating(v int8) *TenderUpsert {
	u.Set(tender.FieldTimeLimitRating, v)
	return u
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTimeLimitRating() *TenderUpsert {
	u.SetExcluded(tender.FieldTimeLimitRating)
	return u
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsert) AddTimeLimitRating(v int8) *TenderUpsert {
	u.Add(tender.FieldTimeLimitRating, v)
	return u
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsert) ClearTimeLimitRating() *TenderUpsert {
	u.SetNull(tender.FieldTimeLimitRating)
	return u
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsert) SetCustomerRelationshipRating(v int8) *TenderUpsert {
	u.Set(tender.FieldCustomerRelationshipRating, v)
	return u
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCustomerRelationshipRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCustomerRelationshipRating)
	return u
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsert) AddCustomerRelationshipRating(v int8) *TenderUpsert {
	u.Add(tender.FieldCustomerRelationshipRating, v)
	return u
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsert) ClearCustomerRelationshipRating() *TenderUpsert {
	u.SetNull(tender.FieldCustomerRelationshipRating)
	return u
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsert) SetCompetitivePartnershipRating(v int8) *TenderUpsert {
	u.Set(tender.FieldCompetitivePartnershipRating, v)
	return u
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCompetitivePartnershipRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCompetitivePartnershipRating)
	return u
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsert) AddCompetitivePartnershipRating(v int8) *TenderUpsert {
	u.Add(tender.FieldCompetitivePartnershipRating, v)
	return u
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsert) ClearCompetitivePartnershipRating() *TenderUpsert {
	u.SetNull(tender.FieldCompetitivePartnershipRating)
	return u
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsert) SetPrepareToBid(v bool) *TenderUpsert {
	u.Set(tender.FieldPrepareToBid, v)
	return u
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsert) UpdatePrepareToBid() *TenderUpsert {
	u.SetExcluded(tender.FieldPrepareToBid)
	return u
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsert) SetProjectCode(v string) *TenderUpsert {
	u.Set(tender.FieldProjectCode, v)
	return u
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectCode() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectCode)
	return u
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsert) ClearProjectCode() *TenderUpsert {
	u.SetNull(tender.FieldProjectCode)
	return u
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsert) SetProjectDefinition(v string) *TenderUpsert {
	u.Set(tender.FieldProjectDefinition, v)
	return u
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectDefinition() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectDefinition)
	return u
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsert) ClearProjectDefinition() *TenderUpsert {
	u.SetNull(tender.FieldProjectDefinition)
	return u
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsert) SetEstimatedProjectStartDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldEstimatedProjectStartDate, v)
	return u
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedProjectStartDate() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedProjectStartDate)
	return u
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsert) ClearEstimatedProjectStartDate() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedProjectStartDate)
	return u
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsert) SetEstimatedProjectEndDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldEstimatedProjectEndDate, v)
	return u
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedProjectEndDate() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedProjectEndDate)
	return u
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsert) ClearEstimatedProjectEndDate() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedProjectEndDate)
	return u
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsert) SetProjectType(v string) *TenderUpsert {
	u.Set(tender.FieldProjectType, v)
	return u
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectType() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectType)
	return u
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsert) ClearProjectType() *TenderUpsert {
	u.SetNull(tender.FieldProjectType)
	return u
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsert) SetAttachements(v []string) *TenderUpsert {
	u.Set(tender.FieldAttachements, v)
	return u
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsert) UpdateAttachements() *TenderUpsert {
	u.SetExcluded(tender.FieldAttachements)
	return u
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsert) ClearAttachements() *TenderUpsert {
	u.SetNull(tender.FieldAttachements)
	return u
}

// SetGeoLocation sets the "geo_location" field.
func (u *TenderUpsert) SetGeoLocation(v string) *TenderUpsert {
	u.Set(tender.FieldGeoLocation, v)
	return u
}

// UpdateGeoLocation sets the "geo_location" field to the value that was provided on create.
func (u *TenderUpsert) UpdateGeoLocation() *TenderUpsert {
	u.SetExcluded(tender.FieldGeoLocation)
	return u
}

// ClearGeoLocation clears the value of the "geo_location" field.
func (u *TenderUpsert) ClearGeoLocation() *TenderUpsert {
	u.SetNull(tender.FieldGeoLocation)
	return u
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsert) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsert {
	u.Set(tender.FieldGeoCoordinate, v)
	return u
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsert) UpdateGeoCoordinate() *TenderUpsert {
	u.SetExcluded(tender.FieldGeoCoordinate)
	return u
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsert) ClearGeoCoordinate() *TenderUpsert {
	u.SetNull(tender.FieldGeoCoordinate)
	return u
}

// SetRemark sets the "remark" field.
func (u *TenderUpsert) SetRemark(v string) *TenderUpsert {
	u.Set(tender.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsert) UpdateRemark() *TenderUpsert {
	u.SetExcluded(tender.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsert) ClearRemark() *TenderUpsert {
	u.SetNull(tender.FieldRemark)
	return u
}

// SetImages sets the "images" field.
func (u *TenderUpsert) SetImages(v []string) *TenderUpsert {
	u.Set(tender.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsert) UpdateImages() *TenderUpsert {
	u.SetExcluded(tender.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsert) ClearImages() *TenderUpsert {
	u.SetNull(tender.FieldImages)
	return u
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsert) SetAreaID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldAreaID, v)
	return u
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateAreaID() *TenderUpsert {
	u.SetExcluded(tender.FieldAreaID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsert) SetCustomerID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCustomerID() *TenderUpsert {
	u.SetExcluded(tender.FieldCustomerID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderUpsertOne) UpdateNewValues() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tender.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tender.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenderUpsertOne) Ignore() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderUpsertOne) DoNothing() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCreate.OnConflict
// documentation for more info.
func (u *TenderUpsertOne) Update(set func(*TenderUpsert)) *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsertOne) SetUpdatedAt(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateUpdatedAt() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenderUpsertOne) SetCode(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *TenderUpsertOne) SetStatus(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsertOne) AddStatus(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateStatus() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *TenderUpsertOne) SetName(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateName() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateName()
	})
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsertOne) SetEstimatedAmount(v float64) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedAmount(v)
	})
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsertOne) AddEstimatedAmount(v float64) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddEstimatedAmount(v)
	})
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedAmount() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedAmount()
	})
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsertOne) ClearEstimatedAmount() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedAmount()
	})
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsertOne) SetTenderDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderDate(v)
	})
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTenderDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderDate()
	})
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsertOne) ClearTenderDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderDate()
	})
}

// SetFindDate sets the "find_date" field.
func (u *TenderUpsertOne) SetFindDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFindDate(v)
	})
}

// UpdateFindDate sets the "find_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFindDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFindDate()
	})
}

// SetFinder sets the "finder" field.
func (u *TenderUpsertOne) SetFinder(v *zht.User) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFinder(v)
	})
}

// UpdateFinder sets the "finder" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFinder() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFinder()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TenderUpsertOne) SetCreatedBy(v *zht.User) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCreatedBy() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetFollowingPerson sets the "following_person" field.
func (u *TenderUpsertOne) SetFollowingPerson(v []zht.User) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFollowingPerson(v)
	})
}

// UpdateFollowingPerson sets the "following_person" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFollowingPerson() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFollowingPerson()
	})
}

// ClearFollowingPerson clears the value of the "following_person" field.
func (u *TenderUpsertOne) ClearFollowingPerson() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFollowingPerson()
	})
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsertOne) SetSizeAndValueRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRating(v)
	})
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsertOne) AddSizeAndValueRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddSizeAndValueRating(v)
	})
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateSizeAndValueRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRating()
	})
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsertOne) ClearSizeAndValueRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRating()
	})
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) SetCreditAndPaymentRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRating(v)
	})
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) AddCreditAndPaymentRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCreditAndPaymentRating(v)
	})
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCreditAndPaymentRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRating()
	})
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) ClearCreditAndPaymentRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRating()
	})
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsertOne) SetTimeLimitRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRating(v)
	})
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsertOne) AddTimeLimitRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddTimeLimitRating(v)
	})
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTimeLimitRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRating()
	})
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsertOne) ClearTimeLimitRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRating()
	})
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsertOne) SetCustomerRelationshipRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRating(v)
	})
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsertOne) AddCustomerRelationshipRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCustomerRelationshipRating(v)
	})
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCustomerRelationshipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRating()
	})
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsertOne) ClearCustomerRelationshipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRating()
	})
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) SetCompetitivePartnershipRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRating(v)
	})
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) AddCompetitivePartnershipRating(v int8) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCompetitivePartnershipRating(v)
	})
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCompetitivePartnershipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRating()
	})
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) ClearCompetitivePartnershipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRating()
	})
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsertOne) SetPrepareToBid(v bool) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetPrepareToBid(v)
	})
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdatePrepareToBid() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdatePrepareToBid()
	})
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsertOne) SetProjectCode(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectCode(v)
	})
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectCode()
	})
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsertOne) ClearProjectCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectCode()
	})
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsertOne) SetProjectDefinition(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectDefinition(v)
	})
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectDefinition() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectDefinition()
	})
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsertOne) ClearProjectDefinition() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectDefinition()
	})
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsertOne) SetEstimatedProjectStartDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectStartDate(v)
	})
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedProjectStartDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectStartDate()
	})
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsertOne) ClearEstimatedProjectStartDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectStartDate()
	})
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsertOne) SetEstimatedProjectEndDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectEndDate(v)
	})
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedProjectEndDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectEndDate()
	})
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsertOne) ClearEstimatedProjectEndDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectEndDate()
	})
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsertOne) SetProjectType(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectType() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsertOne) ClearProjectType() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectType()
	})
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsertOne) SetAttachements(v []string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetAttachements(v)
	})
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateAttachements() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAttachements()
	})
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsertOne) ClearAttachements() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAttachements()
	})
}

// SetGeoLocation sets the "geo_location" field.
func (u *TenderUpsertOne) SetGeoLocation(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoLocation(v)
	})
}

// UpdateGeoLocation sets the "geo_location" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateGeoLocation() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoLocation()
	})
}

// ClearGeoLocation clears the value of the "geo_location" field.
func (u *TenderUpsertOne) ClearGeoLocation() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoLocation()
	})
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsertOne) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoCoordinate(v)
	})
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateGeoCoordinate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoCoordinate()
	})
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsertOne) ClearGeoCoordinate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoCoordinate()
	})
}

// SetRemark sets the "remark" field.
func (u *TenderUpsertOne) SetRemark(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateRemark() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsertOne) ClearRemark() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearRemark()
	})
}

// SetImages sets the "images" field.
func (u *TenderUpsertOne) SetImages(v []string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateImages() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsertOne) ClearImages() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearImages()
	})
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsertOne) SetAreaID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateAreaID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAreaID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsertOne) SetCustomerID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCustomerID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *TenderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenderUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TenderUpsertOne.ID is not supported by MySQL driver. Use TenderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenderUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenderCreateBulk is the builder for creating many Tender entities in bulk.
type TenderCreateBulk struct {
	config
	err      error
	builders []*TenderCreate
	conflict []sql.ConflictOption
}

// Save creates the Tender entities in the database.
func (tcb *TenderCreateBulk) Save(ctx context.Context) ([]*Tender, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tender, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenderCreateBulk) SaveX(ctx context.Context) []*Tender {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenderCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenderCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tender.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TenderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenderUpsertBulk {
	tcb.conflict = opts
	return &TenderUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TenderCreateBulk) OnConflictColumns(columns ...string) *TenderUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenderUpsertBulk{
		create: tcb,
	}
}

// TenderUpsertBulk is the builder for "upsert"-ing
// a bulk of Tender nodes.
type TenderUpsertBulk struct {
	create *TenderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderUpsertBulk) UpdateNewValues() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tender.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tender.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenderUpsertBulk) Ignore() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderUpsertBulk) DoNothing() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCreateBulk.OnConflict
// documentation for more info.
func (u *TenderUpsertBulk) Update(set func(*TenderUpsert)) *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsertBulk) SetUpdatedAt(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateUpdatedAt() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenderUpsertBulk) SetCode(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *TenderUpsertBulk) SetStatus(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsertBulk) AddStatus(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateStatus() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *TenderUpsertBulk) SetName(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateName() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateName()
	})
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsertBulk) SetEstimatedAmount(v float64) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedAmount(v)
	})
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsertBulk) AddEstimatedAmount(v float64) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddEstimatedAmount(v)
	})
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedAmount() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedAmount()
	})
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsertBulk) ClearEstimatedAmount() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedAmount()
	})
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsertBulk) SetTenderDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderDate(v)
	})
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTenderDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderDate()
	})
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsertBulk) ClearTenderDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderDate()
	})
}

// SetFindDate sets the "find_date" field.
func (u *TenderUpsertBulk) SetFindDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFindDate(v)
	})
}

// UpdateFindDate sets the "find_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFindDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFindDate()
	})
}

// SetFinder sets the "finder" field.
func (u *TenderUpsertBulk) SetFinder(v *zht.User) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFinder(v)
	})
}

// UpdateFinder sets the "finder" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFinder() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFinder()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TenderUpsertBulk) SetCreatedBy(v *zht.User) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCreatedBy() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetFollowingPerson sets the "following_person" field.
func (u *TenderUpsertBulk) SetFollowingPerson(v []zht.User) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFollowingPerson(v)
	})
}

// UpdateFollowingPerson sets the "following_person" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFollowingPerson() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFollowingPerson()
	})
}

// ClearFollowingPerson clears the value of the "following_person" field.
func (u *TenderUpsertBulk) ClearFollowingPerson() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFollowingPerson()
	})
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsertBulk) SetSizeAndValueRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRating(v)
	})
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsertBulk) AddSizeAndValueRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddSizeAndValueRating(v)
	})
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateSizeAndValueRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRating()
	})
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsertBulk) ClearSizeAndValueRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRating()
	})
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) SetCreditAndPaymentRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRating(v)
	})
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) AddCreditAndPaymentRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCreditAndPaymentRating(v)
	})
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCreditAndPaymentRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRating()
	})
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) ClearCreditAndPaymentRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRating()
	})
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsertBulk) SetTimeLimitRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRating(v)
	})
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsertBulk) AddTimeLimitRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddTimeLimitRating(v)
	})
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTimeLimitRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRating()
	})
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsertBulk) ClearTimeLimitRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRating()
	})
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) SetCustomerRelationshipRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRating(v)
	})
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) AddCustomerRelationshipRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCustomerRelationshipRating(v)
	})
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCustomerRelationshipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRating()
	})
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) ClearCustomerRelationshipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRating()
	})
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) SetCompetitivePartnershipRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRating(v)
	})
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) AddCompetitivePartnershipRating(v int8) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCompetitivePartnershipRating(v)
	})
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCompetitivePartnershipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRating()
	})
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) ClearCompetitivePartnershipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRating()
	})
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsertBulk) SetPrepareToBid(v bool) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetPrepareToBid(v)
	})
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdatePrepareToBid() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdatePrepareToBid()
	})
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsertBulk) SetProjectCode(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectCode(v)
	})
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectCode()
	})
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsertBulk) ClearProjectCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectCode()
	})
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsertBulk) SetProjectDefinition(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectDefinition(v)
	})
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectDefinition() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectDefinition()
	})
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsertBulk) ClearProjectDefinition() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectDefinition()
	})
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsertBulk) SetEstimatedProjectStartDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectStartDate(v)
	})
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedProjectStartDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectStartDate()
	})
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsertBulk) ClearEstimatedProjectStartDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectStartDate()
	})
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsertBulk) SetEstimatedProjectEndDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectEndDate(v)
	})
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedProjectEndDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectEndDate()
	})
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsertBulk) ClearEstimatedProjectEndDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectEndDate()
	})
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsertBulk) SetProjectType(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectType() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsertBulk) ClearProjectType() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectType()
	})
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsertBulk) SetAttachements(v []string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetAttachements(v)
	})
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateAttachements() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAttachements()
	})
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsertBulk) ClearAttachements() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAttachements()
	})
}

// SetGeoLocation sets the "geo_location" field.
func (u *TenderUpsertBulk) SetGeoLocation(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoLocation(v)
	})
}

// UpdateGeoLocation sets the "geo_location" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateGeoLocation() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoLocation()
	})
}

// ClearGeoLocation clears the value of the "geo_location" field.
func (u *TenderUpsertBulk) ClearGeoLocation() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoLocation()
	})
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsertBulk) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoCoordinate(v)
	})
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateGeoCoordinate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoCoordinate()
	})
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsertBulk) ClearGeoCoordinate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoCoordinate()
	})
}

// SetRemark sets the "remark" field.
func (u *TenderUpsertBulk) SetRemark(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateRemark() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsertBulk) ClearRemark() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearRemark()
	})
}

// SetImages sets the "images" field.
func (u *TenderUpsertBulk) SetImages(v []string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateImages() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsertBulk) ClearImages() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearImages()
	})
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsertBulk) SetAreaID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateAreaID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAreaID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsertBulk) SetCustomerID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCustomerID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerID()
	})
}

// Exec executes the query.
func (u *TenderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
