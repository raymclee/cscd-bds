// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderCreate is the builder for creating a Tender entity.
type TenderCreate struct {
	config
	mutation *TenderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TenderCreate) SetCreatedAt(t time.Time) *TenderCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCreatedAt(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TenderCreate) SetUpdatedAt(t time.Time) *TenderCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TenderCreate) SetNillableUpdatedAt(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCode sets the "code" field.
func (tc *TenderCreate) SetCode(s string) *TenderCreate {
	tc.mutation.SetCode(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TenderCreate) SetStatus(i int) *TenderCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TenderCreate) SetNillableStatus(i *int) *TenderCreate {
	if i != nil {
		tc.SetStatus(*i)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TenderCreate) SetName(s string) *TenderCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tc *TenderCreate) SetEstimatedAmount(f float64) *TenderCreate {
	tc.mutation.SetEstimatedAmount(f)
	return tc
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedAmount(f *float64) *TenderCreate {
	if f != nil {
		tc.SetEstimatedAmount(*f)
	}
	return tc
}

// SetTenderDate sets the "tender_date" field.
func (tc *TenderCreate) SetTenderDate(t time.Time) *TenderCreate {
	tc.mutation.SetTenderDate(t)
	return tc
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTenderDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetTenderDate(*t)
	}
	return tc
}

// SetDiscoveryDate sets the "discovery_date" field.
func (tc *TenderCreate) SetDiscoveryDate(t time.Time) *TenderCreate {
	tc.mutation.SetDiscoveryDate(t)
	return tc
}

// SetAddress sets the "address" field.
func (tc *TenderCreate) SetAddress(s string) *TenderCreate {
	tc.mutation.SetAddress(s)
	return tc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tc *TenderCreate) SetNillableAddress(s *string) *TenderCreate {
	if s != nil {
		tc.SetAddress(*s)
	}
	return tc
}

// SetFullAddress sets the "full_address" field.
func (tc *TenderCreate) SetFullAddress(s string) *TenderCreate {
	tc.mutation.SetFullAddress(s)
	return tc
}

// SetNillableFullAddress sets the "full_address" field if the given value is not nil.
func (tc *TenderCreate) SetNillableFullAddress(s *string) *TenderCreate {
	if s != nil {
		tc.SetFullAddress(*s)
	}
	return tc
}

// SetContractor sets the "contractor" field.
func (tc *TenderCreate) SetContractor(s string) *TenderCreate {
	tc.mutation.SetContractor(s)
	return tc
}

// SetNillableContractor sets the "contractor" field if the given value is not nil.
func (tc *TenderCreate) SetNillableContractor(s *string) *TenderCreate {
	if s != nil {
		tc.SetContractor(*s)
	}
	return tc
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tc *TenderCreate) SetSizeAndValueRating(i int) *TenderCreate {
	tc.mutation.SetSizeAndValueRating(i)
	return tc
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableSizeAndValueRating(i *int) *TenderCreate {
	if i != nil {
		tc.SetSizeAndValueRating(*i)
	}
	return tc
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (tc *TenderCreate) SetSizeAndValueRatingOverview(s string) *TenderCreate {
	tc.mutation.SetSizeAndValueRatingOverview(s)
	return tc
}

// SetNillableSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field if the given value is not nil.
func (tc *TenderCreate) SetNillableSizeAndValueRatingOverview(s *string) *TenderCreate {
	if s != nil {
		tc.SetSizeAndValueRatingOverview(*s)
	}
	return tc
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tc *TenderCreate) SetCreditAndPaymentRating(i int) *TenderCreate {
	tc.mutation.SetCreditAndPaymentRating(i)
	return tc
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCreditAndPaymentRating(i *int) *TenderCreate {
	if i != nil {
		tc.SetCreditAndPaymentRating(*i)
	}
	return tc
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (tc *TenderCreate) SetCreditAndPaymentRatingOverview(s string) *TenderCreate {
	tc.mutation.SetCreditAndPaymentRatingOverview(s)
	return tc
}

// SetNillableCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCreditAndPaymentRatingOverview(s *string) *TenderCreate {
	if s != nil {
		tc.SetCreditAndPaymentRatingOverview(*s)
	}
	return tc
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tc *TenderCreate) SetTimeLimitRating(i int) *TenderCreate {
	tc.mutation.SetTimeLimitRating(i)
	return tc
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTimeLimitRating(i *int) *TenderCreate {
	if i != nil {
		tc.SetTimeLimitRating(*i)
	}
	return tc
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (tc *TenderCreate) SetTimeLimitRatingOverview(s string) *TenderCreate {
	tc.mutation.SetTimeLimitRatingOverview(s)
	return tc
}

// SetNillableTimeLimitRatingOverview sets the "time_limit_rating_overview" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTimeLimitRatingOverview(s *string) *TenderCreate {
	if s != nil {
		tc.SetTimeLimitRatingOverview(*s)
	}
	return tc
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tc *TenderCreate) SetCustomerRelationshipRating(i int) *TenderCreate {
	tc.mutation.SetCustomerRelationshipRating(i)
	return tc
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCustomerRelationshipRating(i *int) *TenderCreate {
	if i != nil {
		tc.SetCustomerRelationshipRating(*i)
	}
	return tc
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (tc *TenderCreate) SetCustomerRelationshipRatingOverview(s string) *TenderCreate {
	tc.mutation.SetCustomerRelationshipRatingOverview(s)
	return tc
}

// SetNillableCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCustomerRelationshipRatingOverview(s *string) *TenderCreate {
	if s != nil {
		tc.SetCustomerRelationshipRatingOverview(*s)
	}
	return tc
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tc *TenderCreate) SetCompetitivePartnershipRating(i int) *TenderCreate {
	tc.mutation.SetCompetitivePartnershipRating(i)
	return tc
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCompetitivePartnershipRating(i *int) *TenderCreate {
	if i != nil {
		tc.SetCompetitivePartnershipRating(*i)
	}
	return tc
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (tc *TenderCreate) SetCompetitivePartnershipRatingOverview(s string) *TenderCreate {
	tc.mutation.SetCompetitivePartnershipRatingOverview(s)
	return tc
}

// SetNillableCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCompetitivePartnershipRatingOverview(s *string) *TenderCreate {
	if s != nil {
		tc.SetCompetitivePartnershipRatingOverview(*s)
	}
	return tc
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tc *TenderCreate) SetPrepareToBid(b bool) *TenderCreate {
	tc.mutation.SetPrepareToBid(b)
	return tc
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tc *TenderCreate) SetNillablePrepareToBid(b *bool) *TenderCreate {
	if b != nil {
		tc.SetPrepareToBid(*b)
	}
	return tc
}

// SetProjectCode sets the "project_code" field.
func (tc *TenderCreate) SetProjectCode(s string) *TenderCreate {
	tc.mutation.SetProjectCode(s)
	return tc
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectCode(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectCode(*s)
	}
	return tc
}

// SetProjectDefinition sets the "project_definition" field.
func (tc *TenderCreate) SetProjectDefinition(s string) *TenderCreate {
	tc.mutation.SetProjectDefinition(s)
	return tc
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectDefinition(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectDefinition(*s)
	}
	return tc
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tc *TenderCreate) SetEstimatedProjectStartDate(t time.Time) *TenderCreate {
	tc.mutation.SetEstimatedProjectStartDate(t)
	return tc
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetEstimatedProjectStartDate(*t)
	}
	return tc
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tc *TenderCreate) SetEstimatedProjectEndDate(t time.Time) *TenderCreate {
	tc.mutation.SetEstimatedProjectEndDate(t)
	return tc
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetEstimatedProjectEndDate(*t)
	}
	return tc
}

// SetProjectType sets the "project_type" field.
func (tc *TenderCreate) SetProjectType(s string) *TenderCreate {
	tc.mutation.SetProjectType(s)
	return tc
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tc *TenderCreate) SetNillableProjectType(s *string) *TenderCreate {
	if s != nil {
		tc.SetProjectType(*s)
	}
	return tc
}

// SetAttachements sets the "attachements" field.
func (tc *TenderCreate) SetAttachements(s []string) *TenderCreate {
	tc.mutation.SetAttachements(s)
	return tc
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tc *TenderCreate) SetGeoCoordinate(gj *geo.GeoJson) *TenderCreate {
	tc.mutation.SetGeoCoordinate(gj)
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TenderCreate) SetRemark(s string) *TenderCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TenderCreate) SetNillableRemark(s *string) *TenderCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetImages sets the "images" field.
func (tc *TenderCreate) SetImages(s []string) *TenderCreate {
	tc.mutation.SetImages(s)
	return tc
}

// SetTenderSituations sets the "tender_situations" field.
func (tc *TenderCreate) SetTenderSituations(s string) *TenderCreate {
	tc.mutation.SetTenderSituations(s)
	return tc
}

// SetNillableTenderSituations sets the "tender_situations" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTenderSituations(s *string) *TenderCreate {
	if s != nil {
		tc.SetTenderSituations(*s)
	}
	return tc
}

// SetOwnerSituations sets the "owner_situations" field.
func (tc *TenderCreate) SetOwnerSituations(s string) *TenderCreate {
	tc.mutation.SetOwnerSituations(s)
	return tc
}

// SetNillableOwnerSituations sets the "owner_situations" field if the given value is not nil.
func (tc *TenderCreate) SetNillableOwnerSituations(s *string) *TenderCreate {
	if s != nil {
		tc.SetOwnerSituations(*s)
	}
	return tc
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (tc *TenderCreate) SetBiddingInstructions(s string) *TenderCreate {
	tc.mutation.SetBiddingInstructions(s)
	return tc
}

// SetNillableBiddingInstructions sets the "bidding_instructions" field if the given value is not nil.
func (tc *TenderCreate) SetNillableBiddingInstructions(s *string) *TenderCreate {
	if s != nil {
		tc.SetBiddingInstructions(*s)
	}
	return tc
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (tc *TenderCreate) SetCompetitorSituations(s string) *TenderCreate {
	tc.mutation.SetCompetitorSituations(s)
	return tc
}

// SetNillableCompetitorSituations sets the "competitor_situations" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCompetitorSituations(s *string) *TenderCreate {
	if s != nil {
		tc.SetCompetitorSituations(*s)
	}
	return tc
}

// SetCostEngineer sets the "cost_engineer" field.
func (tc *TenderCreate) SetCostEngineer(s string) *TenderCreate {
	tc.mutation.SetCostEngineer(s)
	return tc
}

// SetNillableCostEngineer sets the "cost_engineer" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCostEngineer(s *string) *TenderCreate {
	if s != nil {
		tc.SetCostEngineer(*s)
	}
	return tc
}

// SetTenderForm sets the "tender_form" field.
func (tc *TenderCreate) SetTenderForm(s string) *TenderCreate {
	tc.mutation.SetTenderForm(s)
	return tc
}

// SetNillableTenderForm sets the "tender_form" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTenderForm(s *string) *TenderCreate {
	if s != nil {
		tc.SetTenderForm(*s)
	}
	return tc
}

// SetContractForm sets the "contract_form" field.
func (tc *TenderCreate) SetContractForm(s string) *TenderCreate {
	tc.mutation.SetContractForm(s)
	return tc
}

// SetNillableContractForm sets the "contract_form" field if the given value is not nil.
func (tc *TenderCreate) SetNillableContractForm(s *string) *TenderCreate {
	if s != nil {
		tc.SetContractForm(*s)
	}
	return tc
}

// SetManagementCompany sets the "management_company" field.
func (tc *TenderCreate) SetManagementCompany(s string) *TenderCreate {
	tc.mutation.SetManagementCompany(s)
	return tc
}

// SetNillableManagementCompany sets the "management_company" field if the given value is not nil.
func (tc *TenderCreate) SetNillableManagementCompany(s *string) *TenderCreate {
	if s != nil {
		tc.SetManagementCompany(*s)
	}
	return tc
}

// SetTenderingAgency sets the "tendering_agency" field.
func (tc *TenderCreate) SetTenderingAgency(s string) *TenderCreate {
	tc.mutation.SetTenderingAgency(s)
	return tc
}

// SetNillableTenderingAgency sets the "tendering_agency" field if the given value is not nil.
func (tc *TenderCreate) SetNillableTenderingAgency(s *string) *TenderCreate {
	if s != nil {
		tc.SetTenderingAgency(*s)
	}
	return tc
}

// SetBiddingDate sets the "bidding_date" field.
func (tc *TenderCreate) SetBiddingDate(t time.Time) *TenderCreate {
	tc.mutation.SetBiddingDate(t)
	return tc
}

// SetNillableBiddingDate sets the "bidding_date" field if the given value is not nil.
func (tc *TenderCreate) SetNillableBiddingDate(t *time.Time) *TenderCreate {
	if t != nil {
		tc.SetBiddingDate(*t)
	}
	return tc
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (tc *TenderCreate) SetFacadeConsultant(s string) *TenderCreate {
	tc.mutation.SetFacadeConsultant(s)
	return tc
}

// SetNillableFacadeConsultant sets the "facade_consultant" field if the given value is not nil.
func (tc *TenderCreate) SetNillableFacadeConsultant(s *string) *TenderCreate {
	if s != nil {
		tc.SetFacadeConsultant(*s)
	}
	return tc
}

// SetDesignUnit sets the "design_unit" field.
func (tc *TenderCreate) SetDesignUnit(s string) *TenderCreate {
	tc.mutation.SetDesignUnit(s)
	return tc
}

// SetNillableDesignUnit sets the "design_unit" field if the given value is not nil.
func (tc *TenderCreate) SetNillableDesignUnit(s *string) *TenderCreate {
	if s != nil {
		tc.SetDesignUnit(*s)
	}
	return tc
}

// SetConsultingFirm sets the "consulting_firm" field.
func (tc *TenderCreate) SetConsultingFirm(s string) *TenderCreate {
	tc.mutation.SetConsultingFirm(s)
	return tc
}

// SetNillableConsultingFirm sets the "consulting_firm" field if the given value is not nil.
func (tc *TenderCreate) SetNillableConsultingFirm(s *string) *TenderCreate {
	if s != nil {
		tc.SetConsultingFirm(*s)
	}
	return tc
}

// SetKeyProject sets the "key_project" field.
func (tc *TenderCreate) SetKeyProject(b bool) *TenderCreate {
	tc.mutation.SetKeyProject(b)
	return tc
}

// SetNillableKeyProject sets the "key_project" field if the given value is not nil.
func (tc *TenderCreate) SetNillableKeyProject(b *bool) *TenderCreate {
	if b != nil {
		tc.SetKeyProject(*b)
	}
	return tc
}

// SetAreaID sets the "area_id" field.
func (tc *TenderCreate) SetAreaID(x xid.ID) *TenderCreate {
	tc.mutation.SetAreaID(x)
	return tc
}

// SetProvinceID sets the "province_id" field.
func (tc *TenderCreate) SetProvinceID(x xid.ID) *TenderCreate {
	tc.mutation.SetProvinceID(x)
	return tc
}

// SetCityID sets the "city_id" field.
func (tc *TenderCreate) SetCityID(x xid.ID) *TenderCreate {
	tc.mutation.SetCityID(x)
	return tc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tc *TenderCreate) SetNillableCityID(x *xid.ID) *TenderCreate {
	if x != nil {
		tc.SetCityID(*x)
	}
	return tc
}

// SetDistrictID sets the "district_id" field.
func (tc *TenderCreate) SetDistrictID(x xid.ID) *TenderCreate {
	tc.mutation.SetDistrictID(x)
	return tc
}

// SetCustomerID sets the "customer_id" field.
func (tc *TenderCreate) SetCustomerID(x xid.ID) *TenderCreate {
	tc.mutation.SetCustomerID(x)
	return tc
}

// SetFinderID sets the "finder_id" field.
func (tc *TenderCreate) SetFinderID(x xid.ID) *TenderCreate {
	tc.mutation.SetFinderID(x)
	return tc
}

// SetCreatedByID sets the "created_by_id" field.
func (tc *TenderCreate) SetCreatedByID(x xid.ID) *TenderCreate {
	tc.mutation.SetCreatedByID(x)
	return tc
}

// SetID sets the "id" field.
func (tc *TenderCreate) SetID(x xid.ID) *TenderCreate {
	tc.mutation.SetID(x)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TenderCreate) SetNillableID(x *xid.ID) *TenderCreate {
	if x != nil {
		tc.SetID(*x)
	}
	return tc
}

// SetArea sets the "area" edge to the Area entity.
func (tc *TenderCreate) SetArea(a *Area) *TenderCreate {
	return tc.SetAreaID(a.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tc *TenderCreate) SetCustomer(c *Customer) *TenderCreate {
	return tc.SetCustomerID(c.ID)
}

// SetFinder sets the "finder" edge to the User entity.
func (tc *TenderCreate) SetFinder(u *User) *TenderCreate {
	return tc.SetFinderID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tc *TenderCreate) SetCreatedBy(u *User) *TenderCreate {
	return tc.SetCreatedByID(u.ID)
}

// AddFollowingSaleIDs adds the "following_sales" edge to the User entity by IDs.
func (tc *TenderCreate) AddFollowingSaleIDs(ids ...xid.ID) *TenderCreate {
	tc.mutation.AddFollowingSaleIDs(ids...)
	return tc
}

// AddFollowingSales adds the "following_sales" edges to the User entity.
func (tc *TenderCreate) AddFollowingSales(u ...*User) *TenderCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddFollowingSaleIDs(ids...)
}

// SetProvince sets the "province" edge to the Province entity.
func (tc *TenderCreate) SetProvince(p *Province) *TenderCreate {
	return tc.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tc *TenderCreate) SetCity(c *City) *TenderCreate {
	return tc.SetCityID(c.ID)
}

// SetDistrict sets the "district" edge to the District entity.
func (tc *TenderCreate) SetDistrict(d *District) *TenderCreate {
	return tc.SetDistrictID(d.ID)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (tc *TenderCreate) AddVisitRecordIDs(ids ...xid.ID) *TenderCreate {
	tc.mutation.AddVisitRecordIDs(ids...)
	return tc
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (tc *TenderCreate) AddVisitRecords(v ...*VisitRecord) *TenderCreate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return tc.AddVisitRecordIDs(ids...)
}

// Mutation returns the TenderMutation object of the builder.
func (tc *TenderCreate) Mutation() *TenderMutation {
	return tc.mutation
}

// Save creates the Tender in the database.
func (tc *TenderCreate) Save(ctx context.Context) (*Tender, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenderCreate) SaveX(ctx context.Context) *Tender {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenderCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenderCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenderCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tender.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tender.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := tender.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.PrepareToBid(); !ok {
		v := tender.DefaultPrepareToBid
		tc.mutation.SetPrepareToBid(v)
	}
	if _, ok := tc.mutation.KeyProject(); !ok {
		v := tender.DefaultKeyProject
		tc.mutation.SetKeyProject(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tender.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenderCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tender.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tender.updated_at"`)}
	}
	if _, ok := tc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Tender.code"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Tender.status"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tender.name"`)}
	}
	if _, ok := tc.mutation.DiscoveryDate(); !ok {
		return &ValidationError{Name: "discovery_date", err: errors.New(`ent: missing required field "Tender.discovery_date"`)}
	}
	if v, ok := tc.mutation.SizeAndValueRating(); ok {
		if err := tender.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CreditAndPaymentRating(); ok {
		if err := tender.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.TimeLimitRating(); ok {
		if err := tender.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CustomerRelationshipRating(); ok {
		if err := tender.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tc.mutation.CompetitivePartnershipRating(); ok {
		if err := tender.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.competitive_partnership_rating": %w`, err)}
		}
	}
	if _, ok := tc.mutation.PrepareToBid(); !ok {
		return &ValidationError{Name: "prepare_to_bid", err: errors.New(`ent: missing required field "Tender.prepare_to_bid"`)}
	}
	if _, ok := tc.mutation.KeyProject(); !ok {
		return &ValidationError{Name: "key_project", err: errors.New(`ent: missing required field "Tender.key_project"`)}
	}
	if _, ok := tc.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area_id", err: errors.New(`ent: missing required field "Tender.area_id"`)}
	}
	if _, ok := tc.mutation.ProvinceID(); !ok {
		return &ValidationError{Name: "province_id", err: errors.New(`ent: missing required field "Tender.province_id"`)}
	}
	if _, ok := tc.mutation.DistrictID(); !ok {
		return &ValidationError{Name: "district_id", err: errors.New(`ent: missing required field "Tender.district_id"`)}
	}
	if _, ok := tc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Tender.customer_id"`)}
	}
	if _, ok := tc.mutation.FinderID(); !ok {
		return &ValidationError{Name: "finder_id", err: errors.New(`ent: missing required field "Tender.finder_id"`)}
	}
	if _, ok := tc.mutation.CreatedByID(); !ok {
		return &ValidationError{Name: "created_by_id", err: errors.New(`ent: missing required field "Tender.created_by_id"`)}
	}
	if len(tc.mutation.AreaIDs()) == 0 {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required edge "Tender.area"`)}
	}
	if len(tc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Tender.customer"`)}
	}
	if len(tc.mutation.FinderIDs()) == 0 {
		return &ValidationError{Name: "finder", err: errors.New(`ent: missing required edge "Tender.finder"`)}
	}
	if len(tc.mutation.CreatedByIDs()) == 0 {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required edge "Tender.created_by"`)}
	}
	if len(tc.mutation.ProvinceIDs()) == 0 {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required edge "Tender.province"`)}
	}
	if len(tc.mutation.DistrictIDs()) == 0 {
		return &ValidationError{Name: "district", err: errors.New(`ent: missing required edge "Tender.district"`)}
	}
	return nil
}

func (tc *TenderCreate) sqlSave(ctx context.Context) (*Tender, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenderCreate) createSpec() (*Tender, *sqlgraph.CreateSpec) {
	var (
		_node = &Tender{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tender.Table, sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tender.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tender.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Code(); ok {
		_spec.SetField(tender.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(tender.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tender.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.EstimatedAmount(); ok {
		_spec.SetField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
		_node.EstimatedAmount = value
	}
	if value, ok := tc.mutation.TenderDate(); ok {
		_spec.SetField(tender.FieldTenderDate, field.TypeTime, value)
		_node.TenderDate = value
	}
	if value, ok := tc.mutation.DiscoveryDate(); ok {
		_spec.SetField(tender.FieldDiscoveryDate, field.TypeTime, value)
		_node.DiscoveryDate = value
	}
	if value, ok := tc.mutation.Address(); ok {
		_spec.SetField(tender.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := tc.mutation.FullAddress(); ok {
		_spec.SetField(tender.FieldFullAddress, field.TypeString, value)
		_node.FullAddress = &value
	}
	if value, ok := tc.mutation.Contractor(); ok {
		_spec.SetField(tender.FieldContractor, field.TypeString, value)
		_node.Contractor = &value
	}
	if value, ok := tc.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tender.FieldSizeAndValueRating, field.TypeInt, value)
		_node.SizeAndValueRating = &value
	}
	if value, ok := tc.mutation.SizeAndValueRatingOverview(); ok {
		_spec.SetField(tender.FieldSizeAndValueRatingOverview, field.TypeString, value)
		_node.SizeAndValueRatingOverview = &value
	}
	if value, ok := tc.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRating, field.TypeInt, value)
		_node.CreditAndPaymentRating = &value
	}
	if value, ok := tc.mutation.CreditAndPaymentRatingOverview(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRatingOverview, field.TypeString, value)
		_node.CreditAndPaymentRatingOverview = &value
	}
	if value, ok := tc.mutation.TimeLimitRating(); ok {
		_spec.SetField(tender.FieldTimeLimitRating, field.TypeInt, value)
		_node.TimeLimitRating = &value
	}
	if value, ok := tc.mutation.TimeLimitRatingOverview(); ok {
		_spec.SetField(tender.FieldTimeLimitRatingOverview, field.TypeString, value)
		_node.TimeLimitRatingOverview = &value
	}
	if value, ok := tc.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRating, field.TypeInt, value)
		_node.CustomerRelationshipRating = &value
	}
	if value, ok := tc.mutation.CustomerRelationshipRatingOverview(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRatingOverview, field.TypeString, value)
		_node.CustomerRelationshipRatingOverview = &value
	}
	if value, ok := tc.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRating, field.TypeInt, value)
		_node.CompetitivePartnershipRating = &value
	}
	if value, ok := tc.mutation.CompetitivePartnershipRatingOverview(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRatingOverview, field.TypeString, value)
		_node.CompetitivePartnershipRatingOverview = &value
	}
	if value, ok := tc.mutation.PrepareToBid(); ok {
		_spec.SetField(tender.FieldPrepareToBid, field.TypeBool, value)
		_node.PrepareToBid = value
	}
	if value, ok := tc.mutation.ProjectCode(); ok {
		_spec.SetField(tender.FieldProjectCode, field.TypeString, value)
		_node.ProjectCode = &value
	}
	if value, ok := tc.mutation.ProjectDefinition(); ok {
		_spec.SetField(tender.FieldProjectDefinition, field.TypeString, value)
		_node.ProjectDefinition = &value
	}
	if value, ok := tc.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectStartDate, field.TypeTime, value)
		_node.EstimatedProjectStartDate = &value
	}
	if value, ok := tc.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectEndDate, field.TypeTime, value)
		_node.EstimatedProjectEndDate = &value
	}
	if value, ok := tc.mutation.ProjectType(); ok {
		_spec.SetField(tender.FieldProjectType, field.TypeString, value)
		_node.ProjectType = &value
	}
	if value, ok := tc.mutation.Attachements(); ok {
		_spec.SetField(tender.FieldAttachements, field.TypeJSON, value)
		_node.Attachements = value
	}
	if value, ok := tc.mutation.GeoCoordinate(); ok {
		_spec.SetField(tender.FieldGeoCoordinate, field.TypeOther, value)
		_node.GeoCoordinate = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.SetField(tender.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := tc.mutation.Images(); ok {
		_spec.SetField(tender.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := tc.mutation.TenderSituations(); ok {
		_spec.SetField(tender.FieldTenderSituations, field.TypeString, value)
		_node.TenderSituations = &value
	}
	if value, ok := tc.mutation.OwnerSituations(); ok {
		_spec.SetField(tender.FieldOwnerSituations, field.TypeString, value)
		_node.OwnerSituations = &value
	}
	if value, ok := tc.mutation.BiddingInstructions(); ok {
		_spec.SetField(tender.FieldBiddingInstructions, field.TypeString, value)
		_node.BiddingInstructions = &value
	}
	if value, ok := tc.mutation.CompetitorSituations(); ok {
		_spec.SetField(tender.FieldCompetitorSituations, field.TypeString, value)
		_node.CompetitorSituations = &value
	}
	if value, ok := tc.mutation.CostEngineer(); ok {
		_spec.SetField(tender.FieldCostEngineer, field.TypeString, value)
		_node.CostEngineer = &value
	}
	if value, ok := tc.mutation.TenderForm(); ok {
		_spec.SetField(tender.FieldTenderForm, field.TypeString, value)
		_node.TenderForm = &value
	}
	if value, ok := tc.mutation.ContractForm(); ok {
		_spec.SetField(tender.FieldContractForm, field.TypeString, value)
		_node.ContractForm = &value
	}
	if value, ok := tc.mutation.ManagementCompany(); ok {
		_spec.SetField(tender.FieldManagementCompany, field.TypeString, value)
		_node.ManagementCompany = &value
	}
	if value, ok := tc.mutation.TenderingAgency(); ok {
		_spec.SetField(tender.FieldTenderingAgency, field.TypeString, value)
		_node.TenderingAgency = &value
	}
	if value, ok := tc.mutation.BiddingDate(); ok {
		_spec.SetField(tender.FieldBiddingDate, field.TypeTime, value)
		_node.BiddingDate = &value
	}
	if value, ok := tc.mutation.FacadeConsultant(); ok {
		_spec.SetField(tender.FieldFacadeConsultant, field.TypeString, value)
		_node.FacadeConsultant = &value
	}
	if value, ok := tc.mutation.DesignUnit(); ok {
		_spec.SetField(tender.FieldDesignUnit, field.TypeString, value)
		_node.DesignUnit = &value
	}
	if value, ok := tc.mutation.ConsultingFirm(); ok {
		_spec.SetField(tender.FieldConsultingFirm, field.TypeString, value)
		_node.ConsultingFirm = &value
	}
	if value, ok := tc.mutation.KeyProject(); ok {
		_spec.SetField(tender.FieldKeyProject, field.TypeBool, value)
		_node.KeyProject = value
	}
	if nodes := tc.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FinderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FinderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FollowingSalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProvinceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DistrictID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tender.VisitRecordsTable,
			Columns: []string{tender.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tender.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TenderCreate) OnConflict(opts ...sql.ConflictOption) *TenderUpsertOne {
	tc.conflict = opts
	return &TenderUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TenderCreate) OnConflictColumns(columns ...string) *TenderUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenderUpsertOne{
		create: tc,
	}
}

type (
	// TenderUpsertOne is the builder for "upsert"-ing
	//  one Tender node.
	TenderUpsertOne struct {
		create *TenderCreate
	}

	// TenderUpsert is the "OnConflict" setter.
	TenderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsert) SetUpdatedAt(v time.Time) *TenderUpsert {
	u.Set(tender.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsert) UpdateUpdatedAt() *TenderUpsert {
	u.SetExcluded(tender.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *TenderUpsert) SetCode(v string) *TenderUpsert {
	u.Set(tender.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCode() *TenderUpsert {
	u.SetExcluded(tender.FieldCode)
	return u
}

// SetStatus sets the "status" field.
func (u *TenderUpsert) SetStatus(v int) *TenderUpsert {
	u.Set(tender.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsert) UpdateStatus() *TenderUpsert {
	u.SetExcluded(tender.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsert) AddStatus(v int) *TenderUpsert {
	u.Add(tender.FieldStatus, v)
	return u
}

// SetName sets the "name" field.
func (u *TenderUpsert) SetName(v string) *TenderUpsert {
	u.Set(tender.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsert) UpdateName() *TenderUpsert {
	u.SetExcluded(tender.FieldName)
	return u
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsert) SetEstimatedAmount(v float64) *TenderUpsert {
	u.Set(tender.FieldEstimatedAmount, v)
	return u
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedAmount() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedAmount)
	return u
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsert) AddEstimatedAmount(v float64) *TenderUpsert {
	u.Add(tender.FieldEstimatedAmount, v)
	return u
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsert) ClearEstimatedAmount() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedAmount)
	return u
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsert) SetTenderDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldTenderDate, v)
	return u
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTenderDate() *TenderUpsert {
	u.SetExcluded(tender.FieldTenderDate)
	return u
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsert) ClearTenderDate() *TenderUpsert {
	u.SetNull(tender.FieldTenderDate)
	return u
}

// SetDiscoveryDate sets the "discovery_date" field.
func (u *TenderUpsert) SetDiscoveryDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldDiscoveryDate, v)
	return u
}

// UpdateDiscoveryDate sets the "discovery_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateDiscoveryDate() *TenderUpsert {
	u.SetExcluded(tender.FieldDiscoveryDate)
	return u
}

// SetAddress sets the "address" field.
func (u *TenderUpsert) SetAddress(v string) *TenderUpsert {
	u.Set(tender.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TenderUpsert) UpdateAddress() *TenderUpsert {
	u.SetExcluded(tender.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *TenderUpsert) ClearAddress() *TenderUpsert {
	u.SetNull(tender.FieldAddress)
	return u
}

// SetFullAddress sets the "full_address" field.
func (u *TenderUpsert) SetFullAddress(v string) *TenderUpsert {
	u.Set(tender.FieldFullAddress, v)
	return u
}

// UpdateFullAddress sets the "full_address" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFullAddress() *TenderUpsert {
	u.SetExcluded(tender.FieldFullAddress)
	return u
}

// ClearFullAddress clears the value of the "full_address" field.
func (u *TenderUpsert) ClearFullAddress() *TenderUpsert {
	u.SetNull(tender.FieldFullAddress)
	return u
}

// SetContractor sets the "contractor" field.
func (u *TenderUpsert) SetContractor(v string) *TenderUpsert {
	u.Set(tender.FieldContractor, v)
	return u
}

// UpdateContractor sets the "contractor" field to the value that was provided on create.
func (u *TenderUpsert) UpdateContractor() *TenderUpsert {
	u.SetExcluded(tender.FieldContractor)
	return u
}

// ClearContractor clears the value of the "contractor" field.
func (u *TenderUpsert) ClearContractor() *TenderUpsert {
	u.SetNull(tender.FieldContractor)
	return u
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsert) SetSizeAndValueRating(v int) *TenderUpsert {
	u.Set(tender.FieldSizeAndValueRating, v)
	return u
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateSizeAndValueRating() *TenderUpsert {
	u.SetExcluded(tender.FieldSizeAndValueRating)
	return u
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsert) AddSizeAndValueRating(v int) *TenderUpsert {
	u.Add(tender.FieldSizeAndValueRating, v)
	return u
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsert) ClearSizeAndValueRating() *TenderUpsert {
	u.SetNull(tender.FieldSizeAndValueRating)
	return u
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (u *TenderUpsert) SetSizeAndValueRatingOverview(v string) *TenderUpsert {
	u.Set(tender.FieldSizeAndValueRatingOverview, v)
	return u
}

// UpdateSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field to the value that was provided on create.
func (u *TenderUpsert) UpdateSizeAndValueRatingOverview() *TenderUpsert {
	u.SetExcluded(tender.FieldSizeAndValueRatingOverview)
	return u
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (u *TenderUpsert) ClearSizeAndValueRatingOverview() *TenderUpsert {
	u.SetNull(tender.FieldSizeAndValueRatingOverview)
	return u
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsert) SetCreditAndPaymentRating(v int) *TenderUpsert {
	u.Set(tender.FieldCreditAndPaymentRating, v)
	return u
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCreditAndPaymentRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCreditAndPaymentRating)
	return u
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsert) AddCreditAndPaymentRating(v int) *TenderUpsert {
	u.Add(tender.FieldCreditAndPaymentRating, v)
	return u
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsert) ClearCreditAndPaymentRating() *TenderUpsert {
	u.SetNull(tender.FieldCreditAndPaymentRating)
	return u
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (u *TenderUpsert) SetCreditAndPaymentRatingOverview(v string) *TenderUpsert {
	u.Set(tender.FieldCreditAndPaymentRatingOverview, v)
	return u
}

// UpdateCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCreditAndPaymentRatingOverview() *TenderUpsert {
	u.SetExcluded(tender.FieldCreditAndPaymentRatingOverview)
	return u
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (u *TenderUpsert) ClearCreditAndPaymentRatingOverview() *TenderUpsert {
	u.SetNull(tender.FieldCreditAndPaymentRatingOverview)
	return u
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsert) SetTimeLimitRating(v int) *TenderUpsert {
	u.Set(tender.FieldTimeLimitRating, v)
	return u
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTimeLimitRating() *TenderUpsert {
	u.SetExcluded(tender.FieldTimeLimitRating)
	return u
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsert) AddTimeLimitRating(v int) *TenderUpsert {
	u.Add(tender.FieldTimeLimitRating, v)
	return u
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsert) ClearTimeLimitRating() *TenderUpsert {
	u.SetNull(tender.FieldTimeLimitRating)
	return u
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (u *TenderUpsert) SetTimeLimitRatingOverview(v string) *TenderUpsert {
	u.Set(tender.FieldTimeLimitRatingOverview, v)
	return u
}

// UpdateTimeLimitRatingOverview sets the "time_limit_rating_overview" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTimeLimitRatingOverview() *TenderUpsert {
	u.SetExcluded(tender.FieldTimeLimitRatingOverview)
	return u
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (u *TenderUpsert) ClearTimeLimitRatingOverview() *TenderUpsert {
	u.SetNull(tender.FieldTimeLimitRatingOverview)
	return u
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsert) SetCustomerRelationshipRating(v int) *TenderUpsert {
	u.Set(tender.FieldCustomerRelationshipRating, v)
	return u
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCustomerRelationshipRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCustomerRelationshipRating)
	return u
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsert) AddCustomerRelationshipRating(v int) *TenderUpsert {
	u.Add(tender.FieldCustomerRelationshipRating, v)
	return u
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsert) ClearCustomerRelationshipRating() *TenderUpsert {
	u.SetNull(tender.FieldCustomerRelationshipRating)
	return u
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (u *TenderUpsert) SetCustomerRelationshipRatingOverview(v string) *TenderUpsert {
	u.Set(tender.FieldCustomerRelationshipRatingOverview, v)
	return u
}

// UpdateCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCustomerRelationshipRatingOverview() *TenderUpsert {
	u.SetExcluded(tender.FieldCustomerRelationshipRatingOverview)
	return u
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (u *TenderUpsert) ClearCustomerRelationshipRatingOverview() *TenderUpsert {
	u.SetNull(tender.FieldCustomerRelationshipRatingOverview)
	return u
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsert) SetCompetitivePartnershipRating(v int) *TenderUpsert {
	u.Set(tender.FieldCompetitivePartnershipRating, v)
	return u
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCompetitivePartnershipRating() *TenderUpsert {
	u.SetExcluded(tender.FieldCompetitivePartnershipRating)
	return u
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsert) AddCompetitivePartnershipRating(v int) *TenderUpsert {
	u.Add(tender.FieldCompetitivePartnershipRating, v)
	return u
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsert) ClearCompetitivePartnershipRating() *TenderUpsert {
	u.SetNull(tender.FieldCompetitivePartnershipRating)
	return u
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (u *TenderUpsert) SetCompetitivePartnershipRatingOverview(v string) *TenderUpsert {
	u.Set(tender.FieldCompetitivePartnershipRatingOverview, v)
	return u
}

// UpdateCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCompetitivePartnershipRatingOverview() *TenderUpsert {
	u.SetExcluded(tender.FieldCompetitivePartnershipRatingOverview)
	return u
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (u *TenderUpsert) ClearCompetitivePartnershipRatingOverview() *TenderUpsert {
	u.SetNull(tender.FieldCompetitivePartnershipRatingOverview)
	return u
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsert) SetPrepareToBid(v bool) *TenderUpsert {
	u.Set(tender.FieldPrepareToBid, v)
	return u
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsert) UpdatePrepareToBid() *TenderUpsert {
	u.SetExcluded(tender.FieldPrepareToBid)
	return u
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsert) SetProjectCode(v string) *TenderUpsert {
	u.Set(tender.FieldProjectCode, v)
	return u
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectCode() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectCode)
	return u
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsert) ClearProjectCode() *TenderUpsert {
	u.SetNull(tender.FieldProjectCode)
	return u
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsert) SetProjectDefinition(v string) *TenderUpsert {
	u.Set(tender.FieldProjectDefinition, v)
	return u
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectDefinition() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectDefinition)
	return u
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsert) ClearProjectDefinition() *TenderUpsert {
	u.SetNull(tender.FieldProjectDefinition)
	return u
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsert) SetEstimatedProjectStartDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldEstimatedProjectStartDate, v)
	return u
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedProjectStartDate() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedProjectStartDate)
	return u
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsert) ClearEstimatedProjectStartDate() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedProjectStartDate)
	return u
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsert) SetEstimatedProjectEndDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldEstimatedProjectEndDate, v)
	return u
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateEstimatedProjectEndDate() *TenderUpsert {
	u.SetExcluded(tender.FieldEstimatedProjectEndDate)
	return u
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsert) ClearEstimatedProjectEndDate() *TenderUpsert {
	u.SetNull(tender.FieldEstimatedProjectEndDate)
	return u
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsert) SetProjectType(v string) *TenderUpsert {
	u.Set(tender.FieldProjectType, v)
	return u
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProjectType() *TenderUpsert {
	u.SetExcluded(tender.FieldProjectType)
	return u
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsert) ClearProjectType() *TenderUpsert {
	u.SetNull(tender.FieldProjectType)
	return u
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsert) SetAttachements(v []string) *TenderUpsert {
	u.Set(tender.FieldAttachements, v)
	return u
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsert) UpdateAttachements() *TenderUpsert {
	u.SetExcluded(tender.FieldAttachements)
	return u
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsert) ClearAttachements() *TenderUpsert {
	u.SetNull(tender.FieldAttachements)
	return u
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsert) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsert {
	u.Set(tender.FieldGeoCoordinate, v)
	return u
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsert) UpdateGeoCoordinate() *TenderUpsert {
	u.SetExcluded(tender.FieldGeoCoordinate)
	return u
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsert) ClearGeoCoordinate() *TenderUpsert {
	u.SetNull(tender.FieldGeoCoordinate)
	return u
}

// SetRemark sets the "remark" field.
func (u *TenderUpsert) SetRemark(v string) *TenderUpsert {
	u.Set(tender.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsert) UpdateRemark() *TenderUpsert {
	u.SetExcluded(tender.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsert) ClearRemark() *TenderUpsert {
	u.SetNull(tender.FieldRemark)
	return u
}

// SetImages sets the "images" field.
func (u *TenderUpsert) SetImages(v []string) *TenderUpsert {
	u.Set(tender.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsert) UpdateImages() *TenderUpsert {
	u.SetExcluded(tender.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsert) ClearImages() *TenderUpsert {
	u.SetNull(tender.FieldImages)
	return u
}

// SetTenderSituations sets the "tender_situations" field.
func (u *TenderUpsert) SetTenderSituations(v string) *TenderUpsert {
	u.Set(tender.FieldTenderSituations, v)
	return u
}

// UpdateTenderSituations sets the "tender_situations" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTenderSituations() *TenderUpsert {
	u.SetExcluded(tender.FieldTenderSituations)
	return u
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (u *TenderUpsert) ClearTenderSituations() *TenderUpsert {
	u.SetNull(tender.FieldTenderSituations)
	return u
}

// SetOwnerSituations sets the "owner_situations" field.
func (u *TenderUpsert) SetOwnerSituations(v string) *TenderUpsert {
	u.Set(tender.FieldOwnerSituations, v)
	return u
}

// UpdateOwnerSituations sets the "owner_situations" field to the value that was provided on create.
func (u *TenderUpsert) UpdateOwnerSituations() *TenderUpsert {
	u.SetExcluded(tender.FieldOwnerSituations)
	return u
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (u *TenderUpsert) ClearOwnerSituations() *TenderUpsert {
	u.SetNull(tender.FieldOwnerSituations)
	return u
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (u *TenderUpsert) SetBiddingInstructions(v string) *TenderUpsert {
	u.Set(tender.FieldBiddingInstructions, v)
	return u
}

// UpdateBiddingInstructions sets the "bidding_instructions" field to the value that was provided on create.
func (u *TenderUpsert) UpdateBiddingInstructions() *TenderUpsert {
	u.SetExcluded(tender.FieldBiddingInstructions)
	return u
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (u *TenderUpsert) ClearBiddingInstructions() *TenderUpsert {
	u.SetNull(tender.FieldBiddingInstructions)
	return u
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (u *TenderUpsert) SetCompetitorSituations(v string) *TenderUpsert {
	u.Set(tender.FieldCompetitorSituations, v)
	return u
}

// UpdateCompetitorSituations sets the "competitor_situations" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCompetitorSituations() *TenderUpsert {
	u.SetExcluded(tender.FieldCompetitorSituations)
	return u
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (u *TenderUpsert) ClearCompetitorSituations() *TenderUpsert {
	u.SetNull(tender.FieldCompetitorSituations)
	return u
}

// SetCostEngineer sets the "cost_engineer" field.
func (u *TenderUpsert) SetCostEngineer(v string) *TenderUpsert {
	u.Set(tender.FieldCostEngineer, v)
	return u
}

// UpdateCostEngineer sets the "cost_engineer" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCostEngineer() *TenderUpsert {
	u.SetExcluded(tender.FieldCostEngineer)
	return u
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (u *TenderUpsert) ClearCostEngineer() *TenderUpsert {
	u.SetNull(tender.FieldCostEngineer)
	return u
}

// SetTenderForm sets the "tender_form" field.
func (u *TenderUpsert) SetTenderForm(v string) *TenderUpsert {
	u.Set(tender.FieldTenderForm, v)
	return u
}

// UpdateTenderForm sets the "tender_form" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTenderForm() *TenderUpsert {
	u.SetExcluded(tender.FieldTenderForm)
	return u
}

// ClearTenderForm clears the value of the "tender_form" field.
func (u *TenderUpsert) ClearTenderForm() *TenderUpsert {
	u.SetNull(tender.FieldTenderForm)
	return u
}

// SetContractForm sets the "contract_form" field.
func (u *TenderUpsert) SetContractForm(v string) *TenderUpsert {
	u.Set(tender.FieldContractForm, v)
	return u
}

// UpdateContractForm sets the "contract_form" field to the value that was provided on create.
func (u *TenderUpsert) UpdateContractForm() *TenderUpsert {
	u.SetExcluded(tender.FieldContractForm)
	return u
}

// ClearContractForm clears the value of the "contract_form" field.
func (u *TenderUpsert) ClearContractForm() *TenderUpsert {
	u.SetNull(tender.FieldContractForm)
	return u
}

// SetManagementCompany sets the "management_company" field.
func (u *TenderUpsert) SetManagementCompany(v string) *TenderUpsert {
	u.Set(tender.FieldManagementCompany, v)
	return u
}

// UpdateManagementCompany sets the "management_company" field to the value that was provided on create.
func (u *TenderUpsert) UpdateManagementCompany() *TenderUpsert {
	u.SetExcluded(tender.FieldManagementCompany)
	return u
}

// ClearManagementCompany clears the value of the "management_company" field.
func (u *TenderUpsert) ClearManagementCompany() *TenderUpsert {
	u.SetNull(tender.FieldManagementCompany)
	return u
}

// SetTenderingAgency sets the "tendering_agency" field.
func (u *TenderUpsert) SetTenderingAgency(v string) *TenderUpsert {
	u.Set(tender.FieldTenderingAgency, v)
	return u
}

// UpdateTenderingAgency sets the "tendering_agency" field to the value that was provided on create.
func (u *TenderUpsert) UpdateTenderingAgency() *TenderUpsert {
	u.SetExcluded(tender.FieldTenderingAgency)
	return u
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (u *TenderUpsert) ClearTenderingAgency() *TenderUpsert {
	u.SetNull(tender.FieldTenderingAgency)
	return u
}

// SetBiddingDate sets the "bidding_date" field.
func (u *TenderUpsert) SetBiddingDate(v time.Time) *TenderUpsert {
	u.Set(tender.FieldBiddingDate, v)
	return u
}

// UpdateBiddingDate sets the "bidding_date" field to the value that was provided on create.
func (u *TenderUpsert) UpdateBiddingDate() *TenderUpsert {
	u.SetExcluded(tender.FieldBiddingDate)
	return u
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (u *TenderUpsert) ClearBiddingDate() *TenderUpsert {
	u.SetNull(tender.FieldBiddingDate)
	return u
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (u *TenderUpsert) SetFacadeConsultant(v string) *TenderUpsert {
	u.Set(tender.FieldFacadeConsultant, v)
	return u
}

// UpdateFacadeConsultant sets the "facade_consultant" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFacadeConsultant() *TenderUpsert {
	u.SetExcluded(tender.FieldFacadeConsultant)
	return u
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (u *TenderUpsert) ClearFacadeConsultant() *TenderUpsert {
	u.SetNull(tender.FieldFacadeConsultant)
	return u
}

// SetDesignUnit sets the "design_unit" field.
func (u *TenderUpsert) SetDesignUnit(v string) *TenderUpsert {
	u.Set(tender.FieldDesignUnit, v)
	return u
}

// UpdateDesignUnit sets the "design_unit" field to the value that was provided on create.
func (u *TenderUpsert) UpdateDesignUnit() *TenderUpsert {
	u.SetExcluded(tender.FieldDesignUnit)
	return u
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (u *TenderUpsert) ClearDesignUnit() *TenderUpsert {
	u.SetNull(tender.FieldDesignUnit)
	return u
}

// SetConsultingFirm sets the "consulting_firm" field.
func (u *TenderUpsert) SetConsultingFirm(v string) *TenderUpsert {
	u.Set(tender.FieldConsultingFirm, v)
	return u
}

// UpdateConsultingFirm sets the "consulting_firm" field to the value that was provided on create.
func (u *TenderUpsert) UpdateConsultingFirm() *TenderUpsert {
	u.SetExcluded(tender.FieldConsultingFirm)
	return u
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (u *TenderUpsert) ClearConsultingFirm() *TenderUpsert {
	u.SetNull(tender.FieldConsultingFirm)
	return u
}

// SetKeyProject sets the "key_project" field.
func (u *TenderUpsert) SetKeyProject(v bool) *TenderUpsert {
	u.Set(tender.FieldKeyProject, v)
	return u
}

// UpdateKeyProject sets the "key_project" field to the value that was provided on create.
func (u *TenderUpsert) UpdateKeyProject() *TenderUpsert {
	u.SetExcluded(tender.FieldKeyProject)
	return u
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsert) SetAreaID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldAreaID, v)
	return u
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateAreaID() *TenderUpsert {
	u.SetExcluded(tender.FieldAreaID)
	return u
}

// SetProvinceID sets the "province_id" field.
func (u *TenderUpsert) SetProvinceID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldProvinceID, v)
	return u
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateProvinceID() *TenderUpsert {
	u.SetExcluded(tender.FieldProvinceID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *TenderUpsert) SetCityID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCityID() *TenderUpsert {
	u.SetExcluded(tender.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *TenderUpsert) ClearCityID() *TenderUpsert {
	u.SetNull(tender.FieldCityID)
	return u
}

// SetDistrictID sets the "district_id" field.
func (u *TenderUpsert) SetDistrictID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldDistrictID, v)
	return u
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateDistrictID() *TenderUpsert {
	u.SetExcluded(tender.FieldDistrictID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsert) SetCustomerID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCustomerID() *TenderUpsert {
	u.SetExcluded(tender.FieldCustomerID)
	return u
}

// SetFinderID sets the "finder_id" field.
func (u *TenderUpsert) SetFinderID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldFinderID, v)
	return u
}

// UpdateFinderID sets the "finder_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateFinderID() *TenderUpsert {
	u.SetExcluded(tender.FieldFinderID)
	return u
}

// SetCreatedByID sets the "created_by_id" field.
func (u *TenderUpsert) SetCreatedByID(v xid.ID) *TenderUpsert {
	u.Set(tender.FieldCreatedByID, v)
	return u
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *TenderUpsert) UpdateCreatedByID() *TenderUpsert {
	u.SetExcluded(tender.FieldCreatedByID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderUpsertOne) UpdateNewValues() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tender.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tender.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenderUpsertOne) Ignore() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderUpsertOne) DoNothing() *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCreate.OnConflict
// documentation for more info.
func (u *TenderUpsertOne) Update(set func(*TenderUpsert)) *TenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsertOne) SetUpdatedAt(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateUpdatedAt() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenderUpsertOne) SetCode(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *TenderUpsertOne) SetStatus(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsertOne) AddStatus(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateStatus() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *TenderUpsertOne) SetName(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateName() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateName()
	})
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsertOne) SetEstimatedAmount(v float64) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedAmount(v)
	})
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsertOne) AddEstimatedAmount(v float64) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddEstimatedAmount(v)
	})
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedAmount() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedAmount()
	})
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsertOne) ClearEstimatedAmount() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedAmount()
	})
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsertOne) SetTenderDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderDate(v)
	})
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTenderDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderDate()
	})
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsertOne) ClearTenderDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderDate()
	})
}

// SetDiscoveryDate sets the "discovery_date" field.
func (u *TenderUpsertOne) SetDiscoveryDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetDiscoveryDate(v)
	})
}

// UpdateDiscoveryDate sets the "discovery_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateDiscoveryDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDiscoveryDate()
	})
}

// SetAddress sets the "address" field.
func (u *TenderUpsertOne) SetAddress(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateAddress() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *TenderUpsertOne) ClearAddress() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAddress()
	})
}

// SetFullAddress sets the "full_address" field.
func (u *TenderUpsertOne) SetFullAddress(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFullAddress(v)
	})
}

// UpdateFullAddress sets the "full_address" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFullAddress() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFullAddress()
	})
}

// ClearFullAddress clears the value of the "full_address" field.
func (u *TenderUpsertOne) ClearFullAddress() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFullAddress()
	})
}

// SetContractor sets the "contractor" field.
func (u *TenderUpsertOne) SetContractor(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetContractor(v)
	})
}

// UpdateContractor sets the "contractor" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateContractor() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateContractor()
	})
}

// ClearContractor clears the value of the "contractor" field.
func (u *TenderUpsertOne) ClearContractor() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearContractor()
	})
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsertOne) SetSizeAndValueRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRating(v)
	})
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsertOne) AddSizeAndValueRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddSizeAndValueRating(v)
	})
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateSizeAndValueRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRating()
	})
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsertOne) ClearSizeAndValueRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRating()
	})
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (u *TenderUpsertOne) SetSizeAndValueRatingOverview(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRatingOverview(v)
	})
}

// UpdateSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateSizeAndValueRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRatingOverview()
	})
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (u *TenderUpsertOne) ClearSizeAndValueRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRatingOverview()
	})
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) SetCreditAndPaymentRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRating(v)
	})
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) AddCreditAndPaymentRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCreditAndPaymentRating(v)
	})
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCreditAndPaymentRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRating()
	})
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsertOne) ClearCreditAndPaymentRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRating()
	})
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (u *TenderUpsertOne) SetCreditAndPaymentRatingOverview(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRatingOverview(v)
	})
}

// UpdateCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCreditAndPaymentRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRatingOverview()
	})
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (u *TenderUpsertOne) ClearCreditAndPaymentRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRatingOverview()
	})
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsertOne) SetTimeLimitRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRating(v)
	})
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsertOne) AddTimeLimitRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddTimeLimitRating(v)
	})
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTimeLimitRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRating()
	})
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsertOne) ClearTimeLimitRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRating()
	})
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (u *TenderUpsertOne) SetTimeLimitRatingOverview(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRatingOverview(v)
	})
}

// UpdateTimeLimitRatingOverview sets the "time_limit_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTimeLimitRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRatingOverview()
	})
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (u *TenderUpsertOne) ClearTimeLimitRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRatingOverview()
	})
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsertOne) SetCustomerRelationshipRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRating(v)
	})
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsertOne) AddCustomerRelationshipRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCustomerRelationshipRating(v)
	})
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCustomerRelationshipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRating()
	})
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsertOne) ClearCustomerRelationshipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRating()
	})
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (u *TenderUpsertOne) SetCustomerRelationshipRatingOverview(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRatingOverview(v)
	})
}

// UpdateCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCustomerRelationshipRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRatingOverview()
	})
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (u *TenderUpsertOne) ClearCustomerRelationshipRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRatingOverview()
	})
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) SetCompetitivePartnershipRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRating(v)
	})
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) AddCompetitivePartnershipRating(v int) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.AddCompetitivePartnershipRating(v)
	})
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCompetitivePartnershipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRating()
	})
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsertOne) ClearCompetitivePartnershipRating() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRating()
	})
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (u *TenderUpsertOne) SetCompetitivePartnershipRatingOverview(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRatingOverview(v)
	})
}

// UpdateCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCompetitivePartnershipRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRatingOverview()
	})
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (u *TenderUpsertOne) ClearCompetitivePartnershipRatingOverview() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRatingOverview()
	})
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsertOne) SetPrepareToBid(v bool) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetPrepareToBid(v)
	})
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdatePrepareToBid() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdatePrepareToBid()
	})
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsertOne) SetProjectCode(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectCode(v)
	})
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectCode()
	})
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsertOne) ClearProjectCode() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectCode()
	})
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsertOne) SetProjectDefinition(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectDefinition(v)
	})
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectDefinition() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectDefinition()
	})
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsertOne) ClearProjectDefinition() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectDefinition()
	})
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsertOne) SetEstimatedProjectStartDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectStartDate(v)
	})
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedProjectStartDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectStartDate()
	})
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsertOne) ClearEstimatedProjectStartDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectStartDate()
	})
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsertOne) SetEstimatedProjectEndDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectEndDate(v)
	})
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateEstimatedProjectEndDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectEndDate()
	})
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsertOne) ClearEstimatedProjectEndDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectEndDate()
	})
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsertOne) SetProjectType(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProjectType() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsertOne) ClearProjectType() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectType()
	})
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsertOne) SetAttachements(v []string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetAttachements(v)
	})
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateAttachements() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAttachements()
	})
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsertOne) ClearAttachements() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAttachements()
	})
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsertOne) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoCoordinate(v)
	})
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateGeoCoordinate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoCoordinate()
	})
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsertOne) ClearGeoCoordinate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoCoordinate()
	})
}

// SetRemark sets the "remark" field.
func (u *TenderUpsertOne) SetRemark(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateRemark() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsertOne) ClearRemark() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearRemark()
	})
}

// SetImages sets the "images" field.
func (u *TenderUpsertOne) SetImages(v []string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateImages() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsertOne) ClearImages() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearImages()
	})
}

// SetTenderSituations sets the "tender_situations" field.
func (u *TenderUpsertOne) SetTenderSituations(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderSituations(v)
	})
}

// UpdateTenderSituations sets the "tender_situations" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTenderSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderSituations()
	})
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (u *TenderUpsertOne) ClearTenderSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderSituations()
	})
}

// SetOwnerSituations sets the "owner_situations" field.
func (u *TenderUpsertOne) SetOwnerSituations(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetOwnerSituations(v)
	})
}

// UpdateOwnerSituations sets the "owner_situations" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateOwnerSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateOwnerSituations()
	})
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (u *TenderUpsertOne) ClearOwnerSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearOwnerSituations()
	})
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (u *TenderUpsertOne) SetBiddingInstructions(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetBiddingInstructions(v)
	})
}

// UpdateBiddingInstructions sets the "bidding_instructions" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateBiddingInstructions() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateBiddingInstructions()
	})
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (u *TenderUpsertOne) ClearBiddingInstructions() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearBiddingInstructions()
	})
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (u *TenderUpsertOne) SetCompetitorSituations(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitorSituations(v)
	})
}

// UpdateCompetitorSituations sets the "competitor_situations" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCompetitorSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitorSituations()
	})
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (u *TenderUpsertOne) ClearCompetitorSituations() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitorSituations()
	})
}

// SetCostEngineer sets the "cost_engineer" field.
func (u *TenderUpsertOne) SetCostEngineer(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCostEngineer(v)
	})
}

// UpdateCostEngineer sets the "cost_engineer" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCostEngineer() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCostEngineer()
	})
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (u *TenderUpsertOne) ClearCostEngineer() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCostEngineer()
	})
}

// SetTenderForm sets the "tender_form" field.
func (u *TenderUpsertOne) SetTenderForm(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderForm(v)
	})
}

// UpdateTenderForm sets the "tender_form" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTenderForm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderForm()
	})
}

// ClearTenderForm clears the value of the "tender_form" field.
func (u *TenderUpsertOne) ClearTenderForm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderForm()
	})
}

// SetContractForm sets the "contract_form" field.
func (u *TenderUpsertOne) SetContractForm(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetContractForm(v)
	})
}

// UpdateContractForm sets the "contract_form" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateContractForm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateContractForm()
	})
}

// ClearContractForm clears the value of the "contract_form" field.
func (u *TenderUpsertOne) ClearContractForm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearContractForm()
	})
}

// SetManagementCompany sets the "management_company" field.
func (u *TenderUpsertOne) SetManagementCompany(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetManagementCompany(v)
	})
}

// UpdateManagementCompany sets the "management_company" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateManagementCompany() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateManagementCompany()
	})
}

// ClearManagementCompany clears the value of the "management_company" field.
func (u *TenderUpsertOne) ClearManagementCompany() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearManagementCompany()
	})
}

// SetTenderingAgency sets the "tendering_agency" field.
func (u *TenderUpsertOne) SetTenderingAgency(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderingAgency(v)
	})
}

// UpdateTenderingAgency sets the "tendering_agency" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateTenderingAgency() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderingAgency()
	})
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (u *TenderUpsertOne) ClearTenderingAgency() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderingAgency()
	})
}

// SetBiddingDate sets the "bidding_date" field.
func (u *TenderUpsertOne) SetBiddingDate(v time.Time) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetBiddingDate(v)
	})
}

// UpdateBiddingDate sets the "bidding_date" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateBiddingDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateBiddingDate()
	})
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (u *TenderUpsertOne) ClearBiddingDate() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearBiddingDate()
	})
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (u *TenderUpsertOne) SetFacadeConsultant(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFacadeConsultant(v)
	})
}

// UpdateFacadeConsultant sets the "facade_consultant" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFacadeConsultant() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFacadeConsultant()
	})
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (u *TenderUpsertOne) ClearFacadeConsultant() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFacadeConsultant()
	})
}

// SetDesignUnit sets the "design_unit" field.
func (u *TenderUpsertOne) SetDesignUnit(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetDesignUnit(v)
	})
}

// UpdateDesignUnit sets the "design_unit" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateDesignUnit() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDesignUnit()
	})
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (u *TenderUpsertOne) ClearDesignUnit() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearDesignUnit()
	})
}

// SetConsultingFirm sets the "consulting_firm" field.
func (u *TenderUpsertOne) SetConsultingFirm(v string) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetConsultingFirm(v)
	})
}

// UpdateConsultingFirm sets the "consulting_firm" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateConsultingFirm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateConsultingFirm()
	})
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (u *TenderUpsertOne) ClearConsultingFirm() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearConsultingFirm()
	})
}

// SetKeyProject sets the "key_project" field.
func (u *TenderUpsertOne) SetKeyProject(v bool) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetKeyProject(v)
	})
}

// UpdateKeyProject sets the "key_project" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateKeyProject() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateKeyProject()
	})
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsertOne) SetAreaID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateAreaID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAreaID()
	})
}

// SetProvinceID sets the "province_id" field.
func (u *TenderUpsertOne) SetProvinceID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetProvinceID(v)
	})
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateProvinceID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProvinceID()
	})
}

// SetCityID sets the "city_id" field.
func (u *TenderUpsertOne) SetCityID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCityID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *TenderUpsertOne) ClearCityID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCityID()
	})
}

// SetDistrictID sets the "district_id" field.
func (u *TenderUpsertOne) SetDistrictID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetDistrictID(v)
	})
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateDistrictID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDistrictID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsertOne) SetCustomerID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCustomerID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerID()
	})
}

// SetFinderID sets the "finder_id" field.
func (u *TenderUpsertOne) SetFinderID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetFinderID(v)
	})
}

// UpdateFinderID sets the "finder_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateFinderID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFinderID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *TenderUpsertOne) SetCreatedByID(v xid.ID) *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *TenderUpsertOne) UpdateCreatedByID() *TenderUpsertOne {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreatedByID()
	})
}

// Exec executes the query.
func (u *TenderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenderUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TenderUpsertOne.ID is not supported by MySQL driver. Use TenderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenderUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenderCreateBulk is the builder for creating many Tender entities in bulk.
type TenderCreateBulk struct {
	config
	err      error
	builders []*TenderCreate
	conflict []sql.ConflictOption
}

// Save creates the Tender entities in the database.
func (tcb *TenderCreateBulk) Save(ctx context.Context) ([]*Tender, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tender, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenderCreateBulk) SaveX(ctx context.Context) []*Tender {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenderCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenderCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tender.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TenderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenderUpsertBulk {
	tcb.conflict = opts
	return &TenderUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TenderCreateBulk) OnConflictColumns(columns ...string) *TenderUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenderUpsertBulk{
		create: tcb,
	}
}

// TenderUpsertBulk is the builder for "upsert"-ing
// a bulk of Tender nodes.
type TenderUpsertBulk struct {
	create *TenderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderUpsertBulk) UpdateNewValues() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tender.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tender.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tender.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenderUpsertBulk) Ignore() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderUpsertBulk) DoNothing() *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCreateBulk.OnConflict
// documentation for more info.
func (u *TenderUpsertBulk) Update(set func(*TenderUpsert)) *TenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderUpsertBulk) SetUpdatedAt(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateUpdatedAt() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *TenderUpsertBulk) SetCode(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *TenderUpsertBulk) SetStatus(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TenderUpsertBulk) AddStatus(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateStatus() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateStatus()
	})
}

// SetName sets the "name" field.
func (u *TenderUpsertBulk) SetName(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateName() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateName()
	})
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (u *TenderUpsertBulk) SetEstimatedAmount(v float64) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedAmount(v)
	})
}

// AddEstimatedAmount adds v to the "estimated_amount" field.
func (u *TenderUpsertBulk) AddEstimatedAmount(v float64) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddEstimatedAmount(v)
	})
}

// UpdateEstimatedAmount sets the "estimated_amount" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedAmount() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedAmount()
	})
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (u *TenderUpsertBulk) ClearEstimatedAmount() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedAmount()
	})
}

// SetTenderDate sets the "tender_date" field.
func (u *TenderUpsertBulk) SetTenderDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderDate(v)
	})
}

// UpdateTenderDate sets the "tender_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTenderDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderDate()
	})
}

// ClearTenderDate clears the value of the "tender_date" field.
func (u *TenderUpsertBulk) ClearTenderDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderDate()
	})
}

// SetDiscoveryDate sets the "discovery_date" field.
func (u *TenderUpsertBulk) SetDiscoveryDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetDiscoveryDate(v)
	})
}

// UpdateDiscoveryDate sets the "discovery_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateDiscoveryDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDiscoveryDate()
	})
}

// SetAddress sets the "address" field.
func (u *TenderUpsertBulk) SetAddress(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateAddress() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *TenderUpsertBulk) ClearAddress() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAddress()
	})
}

// SetFullAddress sets the "full_address" field.
func (u *TenderUpsertBulk) SetFullAddress(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFullAddress(v)
	})
}

// UpdateFullAddress sets the "full_address" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFullAddress() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFullAddress()
	})
}

// ClearFullAddress clears the value of the "full_address" field.
func (u *TenderUpsertBulk) ClearFullAddress() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFullAddress()
	})
}

// SetContractor sets the "contractor" field.
func (u *TenderUpsertBulk) SetContractor(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetContractor(v)
	})
}

// UpdateContractor sets the "contractor" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateContractor() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateContractor()
	})
}

// ClearContractor clears the value of the "contractor" field.
func (u *TenderUpsertBulk) ClearContractor() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearContractor()
	})
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (u *TenderUpsertBulk) SetSizeAndValueRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRating(v)
	})
}

// AddSizeAndValueRating adds v to the "size_and_value_rating" field.
func (u *TenderUpsertBulk) AddSizeAndValueRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddSizeAndValueRating(v)
	})
}

// UpdateSizeAndValueRating sets the "size_and_value_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateSizeAndValueRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRating()
	})
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (u *TenderUpsertBulk) ClearSizeAndValueRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRating()
	})
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (u *TenderUpsertBulk) SetSizeAndValueRatingOverview(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetSizeAndValueRatingOverview(v)
	})
}

// UpdateSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateSizeAndValueRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateSizeAndValueRatingOverview()
	})
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (u *TenderUpsertBulk) ClearSizeAndValueRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearSizeAndValueRatingOverview()
	})
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) SetCreditAndPaymentRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRating(v)
	})
}

// AddCreditAndPaymentRating adds v to the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) AddCreditAndPaymentRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCreditAndPaymentRating(v)
	})
}

// UpdateCreditAndPaymentRating sets the "credit_and_payment_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCreditAndPaymentRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRating()
	})
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (u *TenderUpsertBulk) ClearCreditAndPaymentRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRating()
	})
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (u *TenderUpsertBulk) SetCreditAndPaymentRatingOverview(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreditAndPaymentRatingOverview(v)
	})
}

// UpdateCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCreditAndPaymentRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreditAndPaymentRatingOverview()
	})
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (u *TenderUpsertBulk) ClearCreditAndPaymentRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCreditAndPaymentRatingOverview()
	})
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (u *TenderUpsertBulk) SetTimeLimitRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRating(v)
	})
}

// AddTimeLimitRating adds v to the "time_limit_rating" field.
func (u *TenderUpsertBulk) AddTimeLimitRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddTimeLimitRating(v)
	})
}

// UpdateTimeLimitRating sets the "time_limit_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTimeLimitRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRating()
	})
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (u *TenderUpsertBulk) ClearTimeLimitRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRating()
	})
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (u *TenderUpsertBulk) SetTimeLimitRatingOverview(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTimeLimitRatingOverview(v)
	})
}

// UpdateTimeLimitRatingOverview sets the "time_limit_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTimeLimitRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTimeLimitRatingOverview()
	})
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (u *TenderUpsertBulk) ClearTimeLimitRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTimeLimitRatingOverview()
	})
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) SetCustomerRelationshipRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRating(v)
	})
}

// AddCustomerRelationshipRating adds v to the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) AddCustomerRelationshipRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCustomerRelationshipRating(v)
	})
}

// UpdateCustomerRelationshipRating sets the "customer_relationship_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCustomerRelationshipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRating()
	})
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (u *TenderUpsertBulk) ClearCustomerRelationshipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRating()
	})
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (u *TenderUpsertBulk) SetCustomerRelationshipRatingOverview(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerRelationshipRatingOverview(v)
	})
}

// UpdateCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCustomerRelationshipRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerRelationshipRatingOverview()
	})
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (u *TenderUpsertBulk) ClearCustomerRelationshipRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCustomerRelationshipRatingOverview()
	})
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) SetCompetitivePartnershipRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRating(v)
	})
}

// AddCompetitivePartnershipRating adds v to the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) AddCompetitivePartnershipRating(v int) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.AddCompetitivePartnershipRating(v)
	})
}

// UpdateCompetitivePartnershipRating sets the "competitive_partnership_rating" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCompetitivePartnershipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRating()
	})
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (u *TenderUpsertBulk) ClearCompetitivePartnershipRating() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRating()
	})
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (u *TenderUpsertBulk) SetCompetitivePartnershipRatingOverview(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitivePartnershipRatingOverview(v)
	})
}

// UpdateCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCompetitivePartnershipRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitivePartnershipRatingOverview()
	})
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (u *TenderUpsertBulk) ClearCompetitivePartnershipRatingOverview() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitivePartnershipRatingOverview()
	})
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (u *TenderUpsertBulk) SetPrepareToBid(v bool) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetPrepareToBid(v)
	})
}

// UpdatePrepareToBid sets the "prepare_to_bid" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdatePrepareToBid() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdatePrepareToBid()
	})
}

// SetProjectCode sets the "project_code" field.
func (u *TenderUpsertBulk) SetProjectCode(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectCode(v)
	})
}

// UpdateProjectCode sets the "project_code" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectCode()
	})
}

// ClearProjectCode clears the value of the "project_code" field.
func (u *TenderUpsertBulk) ClearProjectCode() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectCode()
	})
}

// SetProjectDefinition sets the "project_definition" field.
func (u *TenderUpsertBulk) SetProjectDefinition(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectDefinition(v)
	})
}

// UpdateProjectDefinition sets the "project_definition" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectDefinition() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectDefinition()
	})
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (u *TenderUpsertBulk) ClearProjectDefinition() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectDefinition()
	})
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (u *TenderUpsertBulk) SetEstimatedProjectStartDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectStartDate(v)
	})
}

// UpdateEstimatedProjectStartDate sets the "estimated_project_start_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedProjectStartDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectStartDate()
	})
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (u *TenderUpsertBulk) ClearEstimatedProjectStartDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectStartDate()
	})
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (u *TenderUpsertBulk) SetEstimatedProjectEndDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetEstimatedProjectEndDate(v)
	})
}

// UpdateEstimatedProjectEndDate sets the "estimated_project_end_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateEstimatedProjectEndDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateEstimatedProjectEndDate()
	})
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (u *TenderUpsertBulk) ClearEstimatedProjectEndDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearEstimatedProjectEndDate()
	})
}

// SetProjectType sets the "project_type" field.
func (u *TenderUpsertBulk) SetProjectType(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProjectType(v)
	})
}

// UpdateProjectType sets the "project_type" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProjectType() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProjectType()
	})
}

// ClearProjectType clears the value of the "project_type" field.
func (u *TenderUpsertBulk) ClearProjectType() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearProjectType()
	})
}

// SetAttachements sets the "attachements" field.
func (u *TenderUpsertBulk) SetAttachements(v []string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetAttachements(v)
	})
}

// UpdateAttachements sets the "attachements" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateAttachements() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAttachements()
	})
}

// ClearAttachements clears the value of the "attachements" field.
func (u *TenderUpsertBulk) ClearAttachements() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearAttachements()
	})
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (u *TenderUpsertBulk) SetGeoCoordinate(v *geo.GeoJson) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetGeoCoordinate(v)
	})
}

// UpdateGeoCoordinate sets the "geo_coordinate" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateGeoCoordinate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateGeoCoordinate()
	})
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (u *TenderUpsertBulk) ClearGeoCoordinate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearGeoCoordinate()
	})
}

// SetRemark sets the "remark" field.
func (u *TenderUpsertBulk) SetRemark(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateRemark() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TenderUpsertBulk) ClearRemark() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearRemark()
	})
}

// SetImages sets the "images" field.
func (u *TenderUpsertBulk) SetImages(v []string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateImages() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *TenderUpsertBulk) ClearImages() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearImages()
	})
}

// SetTenderSituations sets the "tender_situations" field.
func (u *TenderUpsertBulk) SetTenderSituations(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderSituations(v)
	})
}

// UpdateTenderSituations sets the "tender_situations" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTenderSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderSituations()
	})
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (u *TenderUpsertBulk) ClearTenderSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderSituations()
	})
}

// SetOwnerSituations sets the "owner_situations" field.
func (u *TenderUpsertBulk) SetOwnerSituations(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetOwnerSituations(v)
	})
}

// UpdateOwnerSituations sets the "owner_situations" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateOwnerSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateOwnerSituations()
	})
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (u *TenderUpsertBulk) ClearOwnerSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearOwnerSituations()
	})
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (u *TenderUpsertBulk) SetBiddingInstructions(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetBiddingInstructions(v)
	})
}

// UpdateBiddingInstructions sets the "bidding_instructions" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateBiddingInstructions() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateBiddingInstructions()
	})
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (u *TenderUpsertBulk) ClearBiddingInstructions() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearBiddingInstructions()
	})
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (u *TenderUpsertBulk) SetCompetitorSituations(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCompetitorSituations(v)
	})
}

// UpdateCompetitorSituations sets the "competitor_situations" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCompetitorSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCompetitorSituations()
	})
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (u *TenderUpsertBulk) ClearCompetitorSituations() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCompetitorSituations()
	})
}

// SetCostEngineer sets the "cost_engineer" field.
func (u *TenderUpsertBulk) SetCostEngineer(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCostEngineer(v)
	})
}

// UpdateCostEngineer sets the "cost_engineer" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCostEngineer() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCostEngineer()
	})
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (u *TenderUpsertBulk) ClearCostEngineer() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCostEngineer()
	})
}

// SetTenderForm sets the "tender_form" field.
func (u *TenderUpsertBulk) SetTenderForm(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderForm(v)
	})
}

// UpdateTenderForm sets the "tender_form" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTenderForm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderForm()
	})
}

// ClearTenderForm clears the value of the "tender_form" field.
func (u *TenderUpsertBulk) ClearTenderForm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderForm()
	})
}

// SetContractForm sets the "contract_form" field.
func (u *TenderUpsertBulk) SetContractForm(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetContractForm(v)
	})
}

// UpdateContractForm sets the "contract_form" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateContractForm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateContractForm()
	})
}

// ClearContractForm clears the value of the "contract_form" field.
func (u *TenderUpsertBulk) ClearContractForm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearContractForm()
	})
}

// SetManagementCompany sets the "management_company" field.
func (u *TenderUpsertBulk) SetManagementCompany(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetManagementCompany(v)
	})
}

// UpdateManagementCompany sets the "management_company" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateManagementCompany() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateManagementCompany()
	})
}

// ClearManagementCompany clears the value of the "management_company" field.
func (u *TenderUpsertBulk) ClearManagementCompany() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearManagementCompany()
	})
}

// SetTenderingAgency sets the "tendering_agency" field.
func (u *TenderUpsertBulk) SetTenderingAgency(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetTenderingAgency(v)
	})
}

// UpdateTenderingAgency sets the "tendering_agency" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateTenderingAgency() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateTenderingAgency()
	})
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (u *TenderUpsertBulk) ClearTenderingAgency() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearTenderingAgency()
	})
}

// SetBiddingDate sets the "bidding_date" field.
func (u *TenderUpsertBulk) SetBiddingDate(v time.Time) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetBiddingDate(v)
	})
}

// UpdateBiddingDate sets the "bidding_date" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateBiddingDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateBiddingDate()
	})
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (u *TenderUpsertBulk) ClearBiddingDate() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearBiddingDate()
	})
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (u *TenderUpsertBulk) SetFacadeConsultant(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFacadeConsultant(v)
	})
}

// UpdateFacadeConsultant sets the "facade_consultant" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFacadeConsultant() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFacadeConsultant()
	})
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (u *TenderUpsertBulk) ClearFacadeConsultant() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearFacadeConsultant()
	})
}

// SetDesignUnit sets the "design_unit" field.
func (u *TenderUpsertBulk) SetDesignUnit(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetDesignUnit(v)
	})
}

// UpdateDesignUnit sets the "design_unit" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateDesignUnit() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDesignUnit()
	})
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (u *TenderUpsertBulk) ClearDesignUnit() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearDesignUnit()
	})
}

// SetConsultingFirm sets the "consulting_firm" field.
func (u *TenderUpsertBulk) SetConsultingFirm(v string) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetConsultingFirm(v)
	})
}

// UpdateConsultingFirm sets the "consulting_firm" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateConsultingFirm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateConsultingFirm()
	})
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (u *TenderUpsertBulk) ClearConsultingFirm() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearConsultingFirm()
	})
}

// SetKeyProject sets the "key_project" field.
func (u *TenderUpsertBulk) SetKeyProject(v bool) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetKeyProject(v)
	})
}

// UpdateKeyProject sets the "key_project" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateKeyProject() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateKeyProject()
	})
}

// SetAreaID sets the "area_id" field.
func (u *TenderUpsertBulk) SetAreaID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateAreaID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateAreaID()
	})
}

// SetProvinceID sets the "province_id" field.
func (u *TenderUpsertBulk) SetProvinceID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetProvinceID(v)
	})
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateProvinceID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateProvinceID()
	})
}

// SetCityID sets the "city_id" field.
func (u *TenderUpsertBulk) SetCityID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCityID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *TenderUpsertBulk) ClearCityID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.ClearCityID()
	})
}

// SetDistrictID sets the "district_id" field.
func (u *TenderUpsertBulk) SetDistrictID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetDistrictID(v)
	})
}

// UpdateDistrictID sets the "district_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateDistrictID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateDistrictID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *TenderUpsertBulk) SetCustomerID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCustomerID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCustomerID()
	})
}

// SetFinderID sets the "finder_id" field.
func (u *TenderUpsertBulk) SetFinderID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetFinderID(v)
	})
}

// UpdateFinderID sets the "finder_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateFinderID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateFinderID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *TenderUpsertBulk) SetCreatedByID(v xid.ID) *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *TenderUpsertBulk) UpdateCreatedByID() *TenderUpsertBulk {
	return u.Update(func(s *TenderUpsert) {
		s.UpdateCreatedByID()
	})
}

// Exec executes the query.
func (u *TenderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
