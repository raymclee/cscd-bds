// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PlotUpdate is the builder for updating Plot entities.
type PlotUpdate struct {
	config
	hooks     []Hook
	mutation  *PlotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlotUpdate builder.
func (pu *PlotUpdate) Where(ps ...predicate.Plot) *PlotUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlotUpdate) SetUpdatedAt(t time.Time) *PlotUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *PlotUpdate) SetName(s string) *PlotUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlotUpdate) SetNillableName(s *string) *PlotUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetColorHex sets the "color_hex" field.
func (pu *PlotUpdate) SetColorHex(s string) *PlotUpdate {
	pu.mutation.SetColorHex(s)
	return pu
}

// SetNillableColorHex sets the "color_hex" field if the given value is not nil.
func (pu *PlotUpdate) SetNillableColorHex(s *string) *PlotUpdate {
	if s != nil {
		pu.SetColorHex(*s)
	}
	return pu
}

// SetGeoBounds sets the "geo_bounds" field.
func (pu *PlotUpdate) SetGeoBounds(f [][]float64) *PlotUpdate {
	pu.mutation.SetGeoBounds(f)
	return pu
}

// AppendGeoBounds appends f to the "geo_bounds" field.
func (pu *PlotUpdate) AppendGeoBounds(f [][]float64) *PlotUpdate {
	pu.mutation.AppendGeoBounds(f)
	return pu
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (pu *PlotUpdate) ClearGeoBounds() *PlotUpdate {
	pu.mutation.ClearGeoBounds()
	return pu
}

// SetDistrictID sets the "district_id" field.
func (pu *PlotUpdate) SetDistrictID(x xid.ID) *PlotUpdate {
	pu.mutation.SetDistrictID(x)
	return pu
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (pu *PlotUpdate) SetNillableDistrictID(x *xid.ID) *PlotUpdate {
	if x != nil {
		pu.SetDistrictID(*x)
	}
	return pu
}

// SetDistrict sets the "district" edge to the District entity.
func (pu *PlotUpdate) SetDistrict(d *District) *PlotUpdate {
	return pu.SetDistrictID(d.ID)
}

// Mutation returns the PlotMutation object of the builder.
func (pu *PlotUpdate) Mutation() *PlotMutation {
	return pu.mutation
}

// ClearDistrict clears the "district" edge to the District entity.
func (pu *PlotUpdate) ClearDistrict() *PlotUpdate {
	pu.mutation.ClearDistrict()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlotUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlotUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlotUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlotUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlotUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := plot.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlotUpdate) check() error {
	if pu.mutation.DistrictCleared() && len(pu.mutation.DistrictIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Plot.district"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlotUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(plot.Table, plot.Columns, sqlgraph.NewFieldSpec(plot.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(plot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plot.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.ColorHex(); ok {
		_spec.SetField(plot.FieldColorHex, field.TypeString, value)
	}
	if value, ok := pu.mutation.GeoBounds(); ok {
		_spec.SetField(plot.FieldGeoBounds, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedGeoBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plot.FieldGeoBounds, value)
		})
	}
	if pu.mutation.GeoBoundsCleared() {
		_spec.ClearField(plot.FieldGeoBounds, field.TypeJSON)
	}
	if pu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlotUpdateOne is the builder for updating a single Plot entity.
type PlotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlotUpdateOne) SetUpdatedAt(t time.Time) *PlotUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *PlotUpdateOne) SetName(s string) *PlotUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlotUpdateOne) SetNillableName(s *string) *PlotUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetColorHex sets the "color_hex" field.
func (puo *PlotUpdateOne) SetColorHex(s string) *PlotUpdateOne {
	puo.mutation.SetColorHex(s)
	return puo
}

// SetNillableColorHex sets the "color_hex" field if the given value is not nil.
func (puo *PlotUpdateOne) SetNillableColorHex(s *string) *PlotUpdateOne {
	if s != nil {
		puo.SetColorHex(*s)
	}
	return puo
}

// SetGeoBounds sets the "geo_bounds" field.
func (puo *PlotUpdateOne) SetGeoBounds(f [][]float64) *PlotUpdateOne {
	puo.mutation.SetGeoBounds(f)
	return puo
}

// AppendGeoBounds appends f to the "geo_bounds" field.
func (puo *PlotUpdateOne) AppendGeoBounds(f [][]float64) *PlotUpdateOne {
	puo.mutation.AppendGeoBounds(f)
	return puo
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (puo *PlotUpdateOne) ClearGeoBounds() *PlotUpdateOne {
	puo.mutation.ClearGeoBounds()
	return puo
}

// SetDistrictID sets the "district_id" field.
func (puo *PlotUpdateOne) SetDistrictID(x xid.ID) *PlotUpdateOne {
	puo.mutation.SetDistrictID(x)
	return puo
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (puo *PlotUpdateOne) SetNillableDistrictID(x *xid.ID) *PlotUpdateOne {
	if x != nil {
		puo.SetDistrictID(*x)
	}
	return puo
}

// SetDistrict sets the "district" edge to the District entity.
func (puo *PlotUpdateOne) SetDistrict(d *District) *PlotUpdateOne {
	return puo.SetDistrictID(d.ID)
}

// Mutation returns the PlotMutation object of the builder.
func (puo *PlotUpdateOne) Mutation() *PlotMutation {
	return puo.mutation
}

// ClearDistrict clears the "district" edge to the District entity.
func (puo *PlotUpdateOne) ClearDistrict() *PlotUpdateOne {
	puo.mutation.ClearDistrict()
	return puo
}

// Where appends a list predicates to the PlotUpdate builder.
func (puo *PlotUpdateOne) Where(ps ...predicate.Plot) *PlotUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlotUpdateOne) Select(field string, fields ...string) *PlotUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plot entity.
func (puo *PlotUpdateOne) Save(ctx context.Context) (*Plot, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlotUpdateOne) SaveX(ctx context.Context) *Plot {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlotUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlotUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlotUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := plot.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlotUpdateOne) check() error {
	if puo.mutation.DistrictCleared() && len(puo.mutation.DistrictIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Plot.district"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlotUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlotUpdateOne) sqlSave(ctx context.Context) (_node *Plot, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plot.Table, plot.Columns, sqlgraph.NewFieldSpec(plot.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plot.FieldID)
		for _, f := range fields {
			if !plot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(plot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plot.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.ColorHex(); ok {
		_spec.SetField(plot.FieldColorHex, field.TypeString, value)
	}
	if value, ok := puo.mutation.GeoBounds(); ok {
		_spec.SetField(plot.FieldGeoBounds, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedGeoBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plot.FieldGeoBounds, value)
		})
	}
	if puo.mutation.GeoBoundsCleared() {
		_spec.ClearField(plot.FieldGeoBounds, field.TypeJSON)
	}
	if puo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Plot{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
