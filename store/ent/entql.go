// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/potentialtender"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 17)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: area.FieldID,
			},
		},
		Type: "Area",
		Fields: map[string]*sqlgraph.FieldSpec{
			area.FieldCreatedAt:    {Type: field.TypeTime, Column: area.FieldCreatedAt},
			area.FieldUpdatedAt:    {Type: field.TypeTime, Column: area.FieldUpdatedAt},
			area.FieldName:         {Type: field.TypeString, Column: area.FieldName},
			area.FieldCode:         {Type: field.TypeString, Column: area.FieldCode},
			area.FieldLeaderChatID: {Type: field.TypeString, Column: area.FieldLeaderChatID},
			area.FieldSalesChatID:  {Type: field.TypeString, Column: area.FieldSalesChatID},
			area.FieldCenter:       {Type: field.TypeOther, Column: area.FieldCenter},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: city.FieldID,
			},
		},
		Type: "City",
		Fields: map[string]*sqlgraph.FieldSpec{
			city.FieldCreatedAt:  {Type: field.TypeTime, Column: city.FieldCreatedAt},
			city.FieldUpdatedAt:  {Type: field.TypeTime, Column: city.FieldUpdatedAt},
			city.FieldAdcode:     {Type: field.TypeInt, Column: city.FieldAdcode},
			city.FieldProvCode:   {Type: field.TypeInt, Column: city.FieldProvCode},
			city.FieldName:       {Type: field.TypeString, Column: city.FieldName},
			city.FieldCenter:     {Type: field.TypeOther, Column: city.FieldCenter},
			city.FieldProvinceID: {Type: field.TypeString, Column: city.FieldProvinceID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   competitor.Table,
			Columns: competitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: competitor.FieldID,
			},
		},
		Type: "Competitor",
		Fields: map[string]*sqlgraph.FieldSpec{
			competitor.FieldCreatedAt: {Type: field.TypeTime, Column: competitor.FieldCreatedAt},
			competitor.FieldUpdatedAt: {Type: field.TypeTime, Column: competitor.FieldUpdatedAt},
			competitor.FieldShortName: {Type: field.TypeString, Column: competitor.FieldShortName},
			competitor.FieldName:      {Type: field.TypeString, Column: competitor.FieldName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: country.FieldID,
			},
		},
		Type: "Country",
		Fields: map[string]*sqlgraph.FieldSpec{
			country.FieldCreatedAt: {Type: field.TypeTime, Column: country.FieldCreatedAt},
			country.FieldUpdatedAt: {Type: field.TypeTime, Column: country.FieldUpdatedAt},
			country.FieldAdcode:    {Type: field.TypeInt, Column: country.FieldAdcode},
			country.FieldName:      {Type: field.TypeString, Column: country.FieldName},
			country.FieldCenter:    {Type: field.TypeOther, Column: country.FieldCenter},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customer.FieldID,
			},
		},
		Type: "Customer",
		Fields: map[string]*sqlgraph.FieldSpec{
			customer.FieldCreatedAt:             {Type: field.TypeTime, Column: customer.FieldCreatedAt},
			customer.FieldUpdatedAt:             {Type: field.TypeTime, Column: customer.FieldUpdatedAt},
			customer.FieldName:                  {Type: field.TypeString, Column: customer.FieldName},
			customer.FieldApprovalStatus:        {Type: field.TypeInt, Column: customer.FieldApprovalStatus},
			customer.FieldOwnerType:             {Type: field.TypeInt, Column: customer.FieldOwnerType},
			customer.FieldIndustry:              {Type: field.TypeInt, Column: customer.FieldIndustry},
			customer.FieldSize:                  {Type: field.TypeInt, Column: customer.FieldSize},
			customer.FieldContactPerson:         {Type: field.TypeString, Column: customer.FieldContactPerson},
			customer.FieldContactPersonPosition: {Type: field.TypeString, Column: customer.FieldContactPersonPosition},
			customer.FieldContactPersonPhone:    {Type: field.TypeString, Column: customer.FieldContactPersonPhone},
			customer.FieldContactPersonEmail:    {Type: field.TypeString, Column: customer.FieldContactPersonEmail},
			customer.FieldDraft:                 {Type: field.TypeJSON, Column: customer.FieldDraft},
			customer.FieldFeishuGroup:           {Type: field.TypeJSON, Column: customer.FieldFeishuGroup},
			customer.FieldAreaID:                {Type: field.TypeString, Column: customer.FieldAreaID},
			customer.FieldSalesID:               {Type: field.TypeString, Column: customer.FieldSalesID},
			customer.FieldCreatedByID:           {Type: field.TypeString, Column: customer.FieldCreatedByID},
			customer.FieldUpdatedByID:           {Type: field.TypeString, Column: customer.FieldUpdatedByID},
			customer.FieldApproverID:            {Type: field.TypeString, Column: customer.FieldApproverID},
			customer.FieldActiveProfileID:       {Type: field.TypeString, Column: customer.FieldActiveProfileID},
			customer.FieldPendingProfileID:      {Type: field.TypeString, Column: customer.FieldPendingProfileID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   customerprofile.Table,
			Columns: customerprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customerprofile.FieldID,
			},
		},
		Type: "CustomerProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			customerprofile.FieldCreatedAt:             {Type: field.TypeTime, Column: customerprofile.FieldCreatedAt},
			customerprofile.FieldUpdatedAt:             {Type: field.TypeTime, Column: customerprofile.FieldUpdatedAt},
			customerprofile.FieldName:                  {Type: field.TypeString, Column: customerprofile.FieldName},
			customerprofile.FieldApprovalStatus:        {Type: field.TypeInt, Column: customerprofile.FieldApprovalStatus},
			customerprofile.FieldOwnerType:             {Type: field.TypeInt, Column: customerprofile.FieldOwnerType},
			customerprofile.FieldIndustry:              {Type: field.TypeInt, Column: customerprofile.FieldIndustry},
			customerprofile.FieldSize:                  {Type: field.TypeInt, Column: customerprofile.FieldSize},
			customerprofile.FieldContactPerson:         {Type: field.TypeString, Column: customerprofile.FieldContactPerson},
			customerprofile.FieldContactPersonPosition: {Type: field.TypeString, Column: customerprofile.FieldContactPersonPosition},
			customerprofile.FieldContactPersonPhone:    {Type: field.TypeString, Column: customerprofile.FieldContactPersonPhone},
			customerprofile.FieldContactPersonEmail:    {Type: field.TypeString, Column: customerprofile.FieldContactPersonEmail},
			customerprofile.FieldSalesID:               {Type: field.TypeString, Column: customerprofile.FieldSalesID},
			customerprofile.FieldCustomerID:            {Type: field.TypeString, Column: customerprofile.FieldCustomerID},
			customerprofile.FieldCreatedByID:           {Type: field.TypeString, Column: customerprofile.FieldCreatedByID},
			customerprofile.FieldApproverID:            {Type: field.TypeString, Column: customerprofile.FieldApproverID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   district.Table,
			Columns: district.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: district.FieldID,
			},
		},
		Type: "District",
		Fields: map[string]*sqlgraph.FieldSpec{
			district.FieldCreatedAt:  {Type: field.TypeTime, Column: district.FieldCreatedAt},
			district.FieldUpdatedAt:  {Type: field.TypeTime, Column: district.FieldUpdatedAt},
			district.FieldAdcode:     {Type: field.TypeInt, Column: district.FieldAdcode},
			district.FieldProvCode:   {Type: field.TypeInt, Column: district.FieldProvCode},
			district.FieldCityCode:   {Type: field.TypeInt, Column: district.FieldCityCode},
			district.FieldName:       {Type: field.TypeString, Column: district.FieldName},
			district.FieldCenter:     {Type: field.TypeOther, Column: district.FieldCenter},
			district.FieldProvinceID: {Type: field.TypeString, Column: district.FieldProvinceID},
			district.FieldCityID:     {Type: field.TypeString, Column: district.FieldCityID},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   operation.Table,
			Columns: operation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: operation.FieldID,
			},
		},
		Type: "Operation",
		Fields: map[string]*sqlgraph.FieldSpec{
			operation.FieldCreatedAt: {Type: field.TypeTime, Column: operation.FieldCreatedAt},
			operation.FieldUpdatedAt: {Type: field.TypeTime, Column: operation.FieldUpdatedAt},
			operation.FieldCjeYs:     {Type: field.TypeFloat64, Column: operation.FieldCjeYs},
			operation.FieldCjeLj:     {Type: field.TypeFloat64, Column: operation.FieldCjeLj},
			operation.FieldYyeYs:     {Type: field.TypeFloat64, Column: operation.FieldYyeYs},
			operation.FieldYyeLj:     {Type: field.TypeFloat64, Column: operation.FieldYyeLj},
			operation.FieldXjlYs:     {Type: field.TypeFloat64, Column: operation.FieldXjlYs},
			operation.FieldXjlLj:     {Type: field.TypeFloat64, Column: operation.FieldXjlLj},
			operation.FieldXmglf:     {Type: field.TypeFloat64, Column: operation.FieldXmglf},
			operation.FieldXmsjf:     {Type: field.TypeFloat64, Column: operation.FieldXmsjf},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   plot.Table,
			Columns: plot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: plot.FieldID,
			},
		},
		Type: "Plot",
		Fields: map[string]*sqlgraph.FieldSpec{
			plot.FieldCreatedAt:  {Type: field.TypeTime, Column: plot.FieldCreatedAt},
			plot.FieldUpdatedAt:  {Type: field.TypeTime, Column: plot.FieldUpdatedAt},
			plot.FieldName:       {Type: field.TypeString, Column: plot.FieldName},
			plot.FieldColorHex:   {Type: field.TypeString, Column: plot.FieldColorHex},
			plot.FieldGeoBounds:  {Type: field.TypeJSON, Column: plot.FieldGeoBounds},
			plot.FieldDistrictID: {Type: field.TypeString, Column: plot.FieldDistrictID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   potentialtender.Table,
			Columns: potentialtender.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: potentialtender.FieldID,
			},
		},
		Type: "PotentialTender",
		Fields: map[string]*sqlgraph.FieldSpec{
			potentialtender.FieldCreatedAt:      {Type: field.TypeTime, Column: potentialtender.FieldCreatedAt},
			potentialtender.FieldUpdatedAt:      {Type: field.TypeTime, Column: potentialtender.FieldUpdatedAt},
			potentialtender.FieldRefURL:         {Type: field.TypeString, Column: potentialtender.FieldRefURL},
			potentialtender.FieldTitle:          {Type: field.TypeString, Column: potentialtender.FieldTitle},
			potentialtender.FieldDescription:    {Type: field.TypeString, Column: potentialtender.FieldDescription},
			potentialtender.FieldRequirement:    {Type: field.TypeString, Column: potentialtender.FieldRequirement},
			potentialtender.FieldAddress:        {Type: field.TypeString, Column: potentialtender.FieldAddress},
			potentialtender.FieldDate:           {Type: field.TypeString, Column: potentialtender.FieldDate},
			potentialtender.FieldType:           {Type: field.TypeString, Column: potentialtender.FieldType},
			potentialtender.FieldStatus:         {Type: field.TypeString, Column: potentialtender.FieldStatus},
			potentialtender.FieldAmount:         {Type: field.TypeString, Column: potentialtender.FieldAmount},
			potentialtender.FieldSize:           {Type: field.TypeString, Column: potentialtender.FieldSize},
			potentialtender.FieldLocation:       {Type: field.TypeString, Column: potentialtender.FieldLocation},
			potentialtender.FieldContact:        {Type: field.TypeString, Column: potentialtender.FieldContact},
			potentialtender.FieldContactPhone:   {Type: field.TypeString, Column: potentialtender.FieldContactPhone},
			potentialtender.FieldContactEmail:   {Type: field.TypeString, Column: potentialtender.FieldContactEmail},
			potentialtender.FieldContactAddress: {Type: field.TypeString, Column: potentialtender.FieldContactAddress},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: project.FieldID,
			},
		},
		Type: "Project",
		Fields: map[string]*sqlgraph.FieldSpec{
			project.FieldCreatedAt:                        {Type: field.TypeTime, Column: project.FieldCreatedAt},
			project.FieldUpdatedAt:                        {Type: field.TypeTime, Column: project.FieldUpdatedAt},
			project.FieldCode:                             {Type: field.TypeString, Column: project.FieldCode},
			project.FieldIsFinished:                       {Type: field.TypeBool, Column: project.FieldIsFinished},
			project.FieldRevenueKpi:                       {Type: field.TypeFloat64, Column: project.FieldRevenueKpi},
			project.FieldRevenueCurrentYearCompleted:      {Type: field.TypeFloat64, Column: project.FieldRevenueCurrentYearCompleted},
			project.FieldRevenueAccumulatedCompleted:      {Type: field.TypeFloat64, Column: project.FieldRevenueAccumulatedCompleted},
			project.FieldPayDate:                          {Type: field.TypeTime, Column: project.FieldPayDate},
			project.FieldOwnerVoCount:                     {Type: field.TypeInt, Column: project.FieldOwnerVoCount},
			project.FieldContractorVoCount:                {Type: field.TypeInt, Column: project.FieldContractorVoCount},
			project.FieldAccumulateDeduction:              {Type: field.TypeFloat64, Column: project.FieldAccumulateDeduction},
			project.FieldSubcontractorVaCount:             {Type: field.TypeInt, Column: project.FieldSubcontractorVaCount},
			project.FieldContractSupplementaryCount:       {Type: field.TypeInt, Column: project.FieldContractSupplementaryCount},
			project.FieldRepairFee:                        {Type: field.TypeFloat64, Column: project.FieldRepairFee},
			project.FieldUnitInventoryTotal:               {Type: field.TypeFloat64, Column: project.FieldUnitInventoryTotal},
			project.FieldUnitComponentTotal:               {Type: field.TypeFloat64, Column: project.FieldUnitComponentTotal},
			project.FieldUnitComponentProduction:          {Type: field.TypeFloat64, Column: project.FieldUnitComponentProduction},
			project.FieldUnitComponentInstallation:        {Type: field.TypeFloat64, Column: project.FieldUnitComponentInstallation},
			project.FieldBulkMaterialsTotalOrderQuantity:  {Type: field.TypeFloat64, Column: project.FieldBulkMaterialsTotalOrderQuantity},
			project.FieldBulkMaterialsCompletedQuantity:   {Type: field.TypeFloat64, Column: project.FieldBulkMaterialsCompletedQuantity},
			project.FieldBulkMaterialsUncompletedQuantity: {Type: field.TypeFloat64, Column: project.FieldBulkMaterialsUncompletedQuantity},
			project.FieldDiagramBdFinishCount:             {Type: field.TypeInt, Column: project.FieldDiagramBdFinishCount},
			project.FieldDiagramBdTotalCount:              {Type: field.TypeInt, Column: project.FieldDiagramBdTotalCount},
			project.FieldDiagramConstructionFinishCount:   {Type: field.TypeInt, Column: project.FieldDiagramConstructionFinishCount},
			project.FieldDiagramConstructionTotalCount:    {Type: field.TypeInt, Column: project.FieldDiagramConstructionTotalCount},
			project.FieldDiagramProcessingFinishCount:     {Type: field.TypeInt, Column: project.FieldDiagramProcessingFinishCount},
			project.FieldDiagramProcessingTotalCount:      {Type: field.TypeInt, Column: project.FieldDiagramProcessingTotalCount},
			project.FieldDiagramCApprovalRatioNumerator:   {Type: field.TypeInt, Column: project.FieldDiagramCApprovalRatioNumerator},
			project.FieldDiagramCApprovalRatioDenominator: {Type: field.TypeInt, Column: project.FieldDiagramCApprovalRatioDenominator},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   province.Table,
			Columns: province.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: province.FieldID,
			},
		},
		Type: "Province",
		Fields: map[string]*sqlgraph.FieldSpec{
			province.FieldCreatedAt: {Type: field.TypeTime, Column: province.FieldCreatedAt},
			province.FieldUpdatedAt: {Type: field.TypeTime, Column: province.FieldUpdatedAt},
			province.FieldAdcode:    {Type: field.TypeInt, Column: province.FieldAdcode},
			province.FieldName:      {Type: field.TypeString, Column: province.FieldName},
			province.FieldCenter:    {Type: field.TypeOther, Column: province.FieldCenter},
			province.FieldCountryID: {Type: field.TypeString, Column: province.FieldCountryID},
			province.FieldAreaID:    {Type: field.TypeString, Column: province.FieldAreaID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tender.Table,
			Columns: tender.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tender.FieldID,
			},
		},
		Type: "Tender",
		Fields: map[string]*sqlgraph.FieldSpec{
			tender.FieldCreatedAt:                            {Type: field.TypeTime, Column: tender.FieldCreatedAt},
			tender.FieldUpdatedAt:                            {Type: field.TypeTime, Column: tender.FieldUpdatedAt},
			tender.FieldCode:                                 {Type: field.TypeString, Column: tender.FieldCode},
			tender.FieldStatus:                               {Type: field.TypeInt, Column: tender.FieldStatus},
			tender.FieldApprovalStatus:                       {Type: field.TypeInt, Column: tender.FieldApprovalStatus},
			tender.FieldApprovalMsgID:                        {Type: field.TypeString, Column: tender.FieldApprovalMsgID},
			tender.FieldName:                                 {Type: field.TypeString, Column: tender.FieldName},
			tender.FieldEstimatedAmount:                      {Type: field.TypeFloat64, Column: tender.FieldEstimatedAmount},
			tender.FieldTenderDate:                           {Type: field.TypeTime, Column: tender.FieldTenderDate},
			tender.FieldClassify:                             {Type: field.TypeInt, Column: tender.FieldClassify},
			tender.FieldDiscoveryDate:                        {Type: field.TypeTime, Column: tender.FieldDiscoveryDate},
			tender.FieldAddress:                              {Type: field.TypeString, Column: tender.FieldAddress},
			tender.FieldFullAddress:                          {Type: field.TypeString, Column: tender.FieldFullAddress},
			tender.FieldContractor:                           {Type: field.TypeString, Column: tender.FieldContractor},
			tender.FieldLevelInvolved:                        {Type: field.TypeInt, Column: tender.FieldLevelInvolved},
			tender.FieldSizeAndValueRating:                   {Type: field.TypeInt, Column: tender.FieldSizeAndValueRating},
			tender.FieldSizeAndValueRatingOverview:           {Type: field.TypeString, Column: tender.FieldSizeAndValueRatingOverview},
			tender.FieldCreditAndPaymentRating:               {Type: field.TypeInt, Column: tender.FieldCreditAndPaymentRating},
			tender.FieldCreditAndPaymentRatingOverview:       {Type: field.TypeString, Column: tender.FieldCreditAndPaymentRatingOverview},
			tender.FieldTimeLimitRating:                      {Type: field.TypeInt, Column: tender.FieldTimeLimitRating},
			tender.FieldTimeLimitRatingOverview:              {Type: field.TypeString, Column: tender.FieldTimeLimitRatingOverview},
			tender.FieldCustomerRelationshipRating:           {Type: field.TypeInt, Column: tender.FieldCustomerRelationshipRating},
			tender.FieldCustomerRelationshipRatingOverview:   {Type: field.TypeString, Column: tender.FieldCustomerRelationshipRatingOverview},
			tender.FieldCompetitivePartnershipRating:         {Type: field.TypeInt, Column: tender.FieldCompetitivePartnershipRating},
			tender.FieldCompetitivePartnershipRatingOverview: {Type: field.TypeString, Column: tender.FieldCompetitivePartnershipRatingOverview},
			tender.FieldPrepareToBid:                         {Type: field.TypeBool, Column: tender.FieldPrepareToBid},
			tender.FieldProjectCode:                          {Type: field.TypeString, Column: tender.FieldProjectCode},
			tender.FieldProjectType:                          {Type: field.TypeString, Column: tender.FieldProjectType},
			tender.FieldProjectDefinition:                    {Type: field.TypeString, Column: tender.FieldProjectDefinition},
			tender.FieldEstimatedProjectStartDate:            {Type: field.TypeTime, Column: tender.FieldEstimatedProjectStartDate},
			tender.FieldEstimatedProjectEndDate:              {Type: field.TypeTime, Column: tender.FieldEstimatedProjectEndDate},
			tender.FieldAttachements:                         {Type: field.TypeJSON, Column: tender.FieldAttachements},
			tender.FieldGeoCoordinate:                        {Type: field.TypeOther, Column: tender.FieldGeoCoordinate},
			tender.FieldGeoBounds:                            {Type: field.TypeJSON, Column: tender.FieldGeoBounds},
			tender.FieldRemark:                               {Type: field.TypeString, Column: tender.FieldRemark},
			tender.FieldImages:                               {Type: field.TypeJSON, Column: tender.FieldImages},
			tender.FieldTenderSituations:                     {Type: field.TypeString, Column: tender.FieldTenderSituations},
			tender.FieldOwnerSituations:                      {Type: field.TypeString, Column: tender.FieldOwnerSituations},
			tender.FieldBiddingInstructions:                  {Type: field.TypeString, Column: tender.FieldBiddingInstructions},
			tender.FieldCompetitorSituations:                 {Type: field.TypeString, Column: tender.FieldCompetitorSituations},
			tender.FieldCostEngineer:                         {Type: field.TypeString, Column: tender.FieldCostEngineer},
			tender.FieldTenderForm:                           {Type: field.TypeString, Column: tender.FieldTenderForm},
			tender.FieldContractForm:                         {Type: field.TypeString, Column: tender.FieldContractForm},
			tender.FieldManagementCompany:                    {Type: field.TypeString, Column: tender.FieldManagementCompany},
			tender.FieldTenderingAgency:                      {Type: field.TypeString, Column: tender.FieldTenderingAgency},
			tender.FieldBiddingDate:                          {Type: field.TypeTime, Column: tender.FieldBiddingDate},
			tender.FieldFacadeConsultant:                     {Type: field.TypeString, Column: tender.FieldFacadeConsultant},
			tender.FieldDesignUnit:                           {Type: field.TypeString, Column: tender.FieldDesignUnit},
			tender.FieldConsultingFirm:                       {Type: field.TypeString, Column: tender.FieldConsultingFirm},
			tender.FieldKeyProject:                           {Type: field.TypeBool, Column: tender.FieldKeyProject},
			tender.FieldCurrentProgress:                      {Type: field.TypeString, Column: tender.FieldCurrentProgress},
			tender.FieldTenderWinCompany:                     {Type: field.TypeString, Column: tender.FieldTenderWinCompany},
			tender.FieldTenderCode:                           {Type: field.TypeString, Column: tender.FieldTenderCode},
			tender.FieldArchitect:                            {Type: field.TypeString, Column: tender.FieldArchitect},
			tender.FieldDeveloper:                            {Type: field.TypeString, Column: tender.FieldDeveloper},
			tender.FieldTenderClosingDate:                    {Type: field.TypeTime, Column: tender.FieldTenderClosingDate},
			tender.FieldConstructionArea:                     {Type: field.TypeString, Column: tender.FieldConstructionArea},
			tender.FieldTenderWinDate:                        {Type: field.TypeTime, Column: tender.FieldTenderWinDate},
			tender.FieldTenderWinAmount:                      {Type: field.TypeFloat64, Column: tender.FieldTenderWinAmount},
			tender.FieldLastTenderAmount:                     {Type: field.TypeFloat64, Column: tender.FieldLastTenderAmount},
			tender.FieldAreaID:                               {Type: field.TypeString, Column: tender.FieldAreaID},
			tender.FieldProvinceID:                           {Type: field.TypeString, Column: tender.FieldProvinceID},
			tender.FieldCityID:                               {Type: field.TypeString, Column: tender.FieldCityID},
			tender.FieldDistrictID:                           {Type: field.TypeString, Column: tender.FieldDistrictID},
			tender.FieldCustomerID:                           {Type: field.TypeString, Column: tender.FieldCustomerID},
			tender.FieldFinderID:                             {Type: field.TypeString, Column: tender.FieldFinderID},
			tender.FieldCreatedByID:                          {Type: field.TypeString, Column: tender.FieldCreatedByID},
			tender.FieldApproverID:                           {Type: field.TypeString, Column: tender.FieldApproverID},
			tender.FieldActiveProfileID:                      {Type: field.TypeString, Column: tender.FieldActiveProfileID},
			tender.FieldPendingProfileID:                     {Type: field.TypeString, Column: tender.FieldPendingProfileID},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tendercompetitor.Table,
			Columns: tendercompetitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tendercompetitor.FieldID,
			},
		},
		Type: "TenderCompetitor",
		Fields: map[string]*sqlgraph.FieldSpec{
			tendercompetitor.FieldCreatedAt:    {Type: field.TypeTime, Column: tendercompetitor.FieldCreatedAt},
			tendercompetitor.FieldUpdatedAt:    {Type: field.TypeTime, Column: tendercompetitor.FieldUpdatedAt},
			tendercompetitor.FieldTenderID:     {Type: field.TypeString, Column: tendercompetitor.FieldTenderID},
			tendercompetitor.FieldCompetitorID: {Type: field.TypeString, Column: tendercompetitor.FieldCompetitorID},
			tendercompetitor.FieldAmount:       {Type: field.TypeFloat64, Column: tendercompetitor.FieldAmount},
			tendercompetitor.FieldResult:       {Type: field.TypeBool, Column: tendercompetitor.FieldResult},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenderprofile.Table,
			Columns: tenderprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tenderprofile.FieldID,
			},
		},
		Type: "TenderProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenderprofile.FieldCreatedAt:                            {Type: field.TypeTime, Column: tenderprofile.FieldCreatedAt},
			tenderprofile.FieldUpdatedAt:                            {Type: field.TypeTime, Column: tenderprofile.FieldUpdatedAt},
			tenderprofile.FieldStatus:                               {Type: field.TypeInt, Column: tenderprofile.FieldStatus},
			tenderprofile.FieldApprovalStatus:                       {Type: field.TypeInt, Column: tenderprofile.FieldApprovalStatus},
			tenderprofile.FieldApprovalMsgID:                        {Type: field.TypeString, Column: tenderprofile.FieldApprovalMsgID},
			tenderprofile.FieldName:                                 {Type: field.TypeString, Column: tenderprofile.FieldName},
			tenderprofile.FieldEstimatedAmount:                      {Type: field.TypeFloat64, Column: tenderprofile.FieldEstimatedAmount},
			tenderprofile.FieldTenderDate:                           {Type: field.TypeTime, Column: tenderprofile.FieldTenderDate},
			tenderprofile.FieldClassify:                             {Type: field.TypeInt, Column: tenderprofile.FieldClassify},
			tenderprofile.FieldDiscoveryDate:                        {Type: field.TypeTime, Column: tenderprofile.FieldDiscoveryDate},
			tenderprofile.FieldAddress:                              {Type: field.TypeString, Column: tenderprofile.FieldAddress},
			tenderprofile.FieldFullAddress:                          {Type: field.TypeString, Column: tenderprofile.FieldFullAddress},
			tenderprofile.FieldContractor:                           {Type: field.TypeString, Column: tenderprofile.FieldContractor},
			tenderprofile.FieldLevelInvolved:                        {Type: field.TypeInt, Column: tenderprofile.FieldLevelInvolved},
			tenderprofile.FieldSizeAndValueRating:                   {Type: field.TypeInt, Column: tenderprofile.FieldSizeAndValueRating},
			tenderprofile.FieldSizeAndValueRatingOverview:           {Type: field.TypeString, Column: tenderprofile.FieldSizeAndValueRatingOverview},
			tenderprofile.FieldCreditAndPaymentRating:               {Type: field.TypeInt, Column: tenderprofile.FieldCreditAndPaymentRating},
			tenderprofile.FieldCreditAndPaymentRatingOverview:       {Type: field.TypeString, Column: tenderprofile.FieldCreditAndPaymentRatingOverview},
			tenderprofile.FieldTimeLimitRating:                      {Type: field.TypeInt, Column: tenderprofile.FieldTimeLimitRating},
			tenderprofile.FieldTimeLimitRatingOverview:              {Type: field.TypeString, Column: tenderprofile.FieldTimeLimitRatingOverview},
			tenderprofile.FieldCustomerRelationshipRating:           {Type: field.TypeInt, Column: tenderprofile.FieldCustomerRelationshipRating},
			tenderprofile.FieldCustomerRelationshipRatingOverview:   {Type: field.TypeString, Column: tenderprofile.FieldCustomerRelationshipRatingOverview},
			tenderprofile.FieldCompetitivePartnershipRating:         {Type: field.TypeInt, Column: tenderprofile.FieldCompetitivePartnershipRating},
			tenderprofile.FieldCompetitivePartnershipRatingOverview: {Type: field.TypeString, Column: tenderprofile.FieldCompetitivePartnershipRatingOverview},
			tenderprofile.FieldPrepareToBid:                         {Type: field.TypeBool, Column: tenderprofile.FieldPrepareToBid},
			tenderprofile.FieldProjectCode:                          {Type: field.TypeString, Column: tenderprofile.FieldProjectCode},
			tenderprofile.FieldProjectType:                          {Type: field.TypeString, Column: tenderprofile.FieldProjectType},
			tenderprofile.FieldProjectDefinition:                    {Type: field.TypeString, Column: tenderprofile.FieldProjectDefinition},
			tenderprofile.FieldEstimatedProjectStartDate:            {Type: field.TypeTime, Column: tenderprofile.FieldEstimatedProjectStartDate},
			tenderprofile.FieldEstimatedProjectEndDate:              {Type: field.TypeTime, Column: tenderprofile.FieldEstimatedProjectEndDate},
			tenderprofile.FieldAttachments:                          {Type: field.TypeJSON, Column: tenderprofile.FieldAttachments},
			tenderprofile.FieldGeoCoordinate:                        {Type: field.TypeJSON, Column: tenderprofile.FieldGeoCoordinate},
			tenderprofile.FieldGeoBounds:                            {Type: field.TypeJSON, Column: tenderprofile.FieldGeoBounds},
			tenderprofile.FieldRemark:                               {Type: field.TypeString, Column: tenderprofile.FieldRemark},
			tenderprofile.FieldImages:                               {Type: field.TypeJSON, Column: tenderprofile.FieldImages},
			tenderprofile.FieldTenderSituations:                     {Type: field.TypeString, Column: tenderprofile.FieldTenderSituations},
			tenderprofile.FieldOwnerSituations:                      {Type: field.TypeString, Column: tenderprofile.FieldOwnerSituations},
			tenderprofile.FieldBiddingInstructions:                  {Type: field.TypeString, Column: tenderprofile.FieldBiddingInstructions},
			tenderprofile.FieldCompetitorSituations:                 {Type: field.TypeString, Column: tenderprofile.FieldCompetitorSituations},
			tenderprofile.FieldCostEngineer:                         {Type: field.TypeString, Column: tenderprofile.FieldCostEngineer},
			tenderprofile.FieldTenderForm:                           {Type: field.TypeString, Column: tenderprofile.FieldTenderForm},
			tenderprofile.FieldContractForm:                         {Type: field.TypeString, Column: tenderprofile.FieldContractForm},
			tenderprofile.FieldManagementCompany:                    {Type: field.TypeString, Column: tenderprofile.FieldManagementCompany},
			tenderprofile.FieldTenderingAgency:                      {Type: field.TypeString, Column: tenderprofile.FieldTenderingAgency},
			tenderprofile.FieldBiddingDate:                          {Type: field.TypeTime, Column: tenderprofile.FieldBiddingDate},
			tenderprofile.FieldFacadeConsultant:                     {Type: field.TypeString, Column: tenderprofile.FieldFacadeConsultant},
			tenderprofile.FieldDesignUnit:                           {Type: field.TypeString, Column: tenderprofile.FieldDesignUnit},
			tenderprofile.FieldConsultingFirm:                       {Type: field.TypeString, Column: tenderprofile.FieldConsultingFirm},
			tenderprofile.FieldKeyProject:                           {Type: field.TypeBool, Column: tenderprofile.FieldKeyProject},
			tenderprofile.FieldCurrentProgress:                      {Type: field.TypeString, Column: tenderprofile.FieldCurrentProgress},
			tenderprofile.FieldTenderWinCompany:                     {Type: field.TypeString, Column: tenderprofile.FieldTenderWinCompany},
			tenderprofile.FieldTenderCode:                           {Type: field.TypeString, Column: tenderprofile.FieldTenderCode},
			tenderprofile.FieldArchitect:                            {Type: field.TypeString, Column: tenderprofile.FieldArchitect},
			tenderprofile.FieldDeveloper:                            {Type: field.TypeString, Column: tenderprofile.FieldDeveloper},
			tenderprofile.FieldTenderClosingDate:                    {Type: field.TypeTime, Column: tenderprofile.FieldTenderClosingDate},
			tenderprofile.FieldConstructionArea:                     {Type: field.TypeString, Column: tenderprofile.FieldConstructionArea},
			tenderprofile.FieldTenderWinDate:                        {Type: field.TypeTime, Column: tenderprofile.FieldTenderWinDate},
			tenderprofile.FieldTenderWinAmount:                      {Type: field.TypeFloat64, Column: tenderprofile.FieldTenderWinAmount},
			tenderprofile.FieldLastTenderAmount:                     {Type: field.TypeFloat64, Column: tenderprofile.FieldLastTenderAmount},
			tenderprofile.FieldTenderID:                             {Type: field.TypeString, Column: tenderprofile.FieldTenderID},
			tenderprofile.FieldProvinceID:                           {Type: field.TypeString, Column: tenderprofile.FieldProvinceID},
			tenderprofile.FieldCityID:                               {Type: field.TypeString, Column: tenderprofile.FieldCityID},
			tenderprofile.FieldDistrictID:                           {Type: field.TypeString, Column: tenderprofile.FieldDistrictID},
			tenderprofile.FieldCustomerID:                           {Type: field.TypeString, Column: tenderprofile.FieldCustomerID},
			tenderprofile.FieldFinderID:                             {Type: field.TypeString, Column: tenderprofile.FieldFinderID},
			tenderprofile.FieldCreatedByID:                          {Type: field.TypeString, Column: tenderprofile.FieldCreatedByID},
			tenderprofile.FieldApproverID:                           {Type: field.TypeString, Column: tenderprofile.FieldApproverID},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:     {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:     {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldOpenID:        {Type: field.TypeString, Column: user.FieldOpenID},
			user.FieldName:          {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:         {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldUsername:      {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldAvatarURL:     {Type: field.TypeString, Column: user.FieldAvatarURL},
			user.FieldDisabled:      {Type: field.TypeBool, Column: user.FieldDisabled},
			user.FieldIsAdmin:       {Type: field.TypeBool, Column: user.FieldIsAdmin},
			user.FieldIsCeo:         {Type: field.TypeBool, Column: user.FieldIsCeo},
			user.FieldIsSuperAdmin:  {Type: field.TypeBool, Column: user.FieldIsSuperAdmin},
			user.FieldHasMapAccess:  {Type: field.TypeBool, Column: user.FieldHasMapAccess},
			user.FieldHasEditAccess: {Type: field.TypeBool, Column: user.FieldHasEditAccess},
			user.FieldLeaderID:      {Type: field.TypeString, Column: user.FieldLeaderID},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   visitrecord.Table,
			Columns: visitrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: visitrecord.FieldID,
			},
		},
		Type: "VisitRecord",
		Fields: map[string]*sqlgraph.FieldSpec{
			visitrecord.FieldCreatedAt:   {Type: field.TypeTime, Column: visitrecord.FieldCreatedAt},
			visitrecord.FieldUpdatedAt:   {Type: field.TypeTime, Column: visitrecord.FieldUpdatedAt},
			visitrecord.FieldVisitType:   {Type: field.TypeInt, Column: visitrecord.FieldVisitType},
			visitrecord.FieldCommPeople:  {Type: field.TypeString, Column: visitrecord.FieldCommPeople},
			visitrecord.FieldCommContent: {Type: field.TypeString, Column: visitrecord.FieldCommContent},
			visitrecord.FieldNextStep:    {Type: field.TypeString, Column: visitrecord.FieldNextStep},
			visitrecord.FieldDate:        {Type: field.TypeTime, Column: visitrecord.FieldDate},
			visitrecord.FieldTenderID:    {Type: field.TypeString, Column: visitrecord.FieldTenderID},
			visitrecord.FieldCustomerID:  {Type: field.TypeString, Column: visitrecord.FieldCustomerID},
		},
	}
	graph.MustAddE(
		"customers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
		},
		"Area",
		"Customer",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
		},
		"Area",
		"Tender",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.UsersTable,
			Columns: area.UsersPrimaryKey,
			Bidi:    false,
		},
		"Area",
		"User",
	)
	graph.MustAddE(
		"provinces",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ProvincesTable,
			Columns: []string{area.ProvincesColumn},
			Bidi:    false,
		},
		"Area",
		"Province",
	)
	graph.MustAddE(
		"districts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
		},
		"City",
		"District",
	)
	graph.MustAddE(
		"province",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvinceTable,
			Columns: []string{city.ProvinceColumn},
			Bidi:    false,
		},
		"City",
		"Province",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.TendersTable,
			Columns: []string{city.TendersColumn},
			Bidi:    false,
		},
		"City",
		"Tender",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
		},
		"Competitor",
		"TenderCompetitor",
	)
	graph.MustAddE(
		"provinces",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.ProvincesTable,
			Columns: []string{country.ProvincesColumn},
			Bidi:    false,
		},
		"Country",
		"Province",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
		},
		"Customer",
		"Area",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
		},
		"Customer",
		"Tender",
	)
	graph.MustAddE(
		"sales",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
		},
		"Customer",
		"User",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
		},
		"Customer",
		"User",
	)
	graph.MustAddE(
		"updated_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.UpdatedByTable,
			Columns: []string{customer.UpdatedByColumn},
			Bidi:    false,
		},
		"Customer",
		"User",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
		},
		"Customer",
		"User",
	)
	graph.MustAddE(
		"visit_records",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
		},
		"Customer",
		"VisitRecord",
	)
	graph.MustAddE(
		"profiles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ProfilesTable,
			Columns: []string{customer.ProfilesColumn},
			Bidi:    false,
		},
		"Customer",
		"CustomerProfile",
	)
	graph.MustAddE(
		"active_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ActiveProfileTable,
			Columns: []string{customer.ActiveProfileColumn},
			Bidi:    false,
		},
		"Customer",
		"CustomerProfile",
	)
	graph.MustAddE(
		"pending_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.PendingProfileTable,
			Columns: []string{customer.PendingProfileColumn},
			Bidi:    false,
		},
		"Customer",
		"CustomerProfile",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
		},
		"CustomerProfile",
		"Customer",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
		},
		"CustomerProfile",
		"User",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
		},
		"CustomerProfile",
		"User",
	)
	graph.MustAddE(
		"sales",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
		},
		"CustomerProfile",
		"User",
	)
	graph.MustAddE(
		"province",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
		},
		"District",
		"Province",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
		},
		"District",
		"City",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
		},
		"District",
		"Tender",
	)
	graph.MustAddE(
		"plots",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.PlotsTable,
			Columns: []string{district.PlotsColumn},
			Bidi:    false,
		},
		"District",
		"Plot",
	)
	graph.MustAddE(
		"district",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plot.DistrictTable,
			Columns: []string{plot.DistrictColumn},
			Bidi:    false,
		},
		"Plot",
		"District",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
		},
		"Project",
		"User",
	)
	graph.MustAddE(
		"districts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.DistrictsTable,
			Columns: []string{province.DistrictsColumn},
			Bidi:    false,
		},
		"Province",
		"District",
	)
	graph.MustAddE(
		"cities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
		},
		"Province",
		"City",
	)
	graph.MustAddE(
		"country",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.CountryTable,
			Columns: []string{province.CountryColumn},
			Bidi:    false,
		},
		"Province",
		"Country",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.TendersTable,
			Columns: []string{province.TendersColumn},
			Bidi:    false,
		},
		"Province",
		"Tender",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.AreaTable,
			Columns: []string{province.AreaColumn},
			Bidi:    false,
		},
		"Province",
		"Area",
	)
	graph.MustAddE(
		"area",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
		},
		"Tender",
		"Area",
	)
	graph.MustAddE(
		"profiles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tender.ProfilesTable,
			Columns: []string{tender.ProfilesColumn},
			Bidi:    false,
		},
		"Tender",
		"TenderProfile",
	)
	graph.MustAddE(
		"competitors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tender.CompetitorsTable,
			Columns: []string{tender.CompetitorsColumn},
			Bidi:    false,
		},
		"Tender",
		"TenderCompetitor",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
		},
		"Tender",
		"Customer",
	)
	graph.MustAddE(
		"finder",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
		},
		"Tender",
		"User",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
		},
		"Tender",
		"User",
	)
	graph.MustAddE(
		"following_sales",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
		},
		"Tender",
		"User",
	)
	graph.MustAddE(
		"province",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
		},
		"Tender",
		"Province",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
		},
		"Tender",
		"City",
	)
	graph.MustAddE(
		"district",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
		},
		"Tender",
		"District",
	)
	graph.MustAddE(
		"visit_records",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tender.VisitRecordsTable,
			Columns: []string{tender.VisitRecordsColumn},
			Bidi:    false,
		},
		"Tender",
		"VisitRecord",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.ApproverTable,
			Columns: []string{tender.ApproverColumn},
			Bidi:    false,
		},
		"Tender",
		"User",
	)
	graph.MustAddE(
		"active_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.ActiveProfileTable,
			Columns: []string{tender.ActiveProfileColumn},
			Bidi:    false,
		},
		"Tender",
		"TenderProfile",
	)
	graph.MustAddE(
		"pending_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.PendingProfileTable,
			Columns: []string{tender.PendingProfileColumn},
			Bidi:    false,
		},
		"Tender",
		"TenderProfile",
	)
	graph.MustAddE(
		"tender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
		},
		"TenderCompetitor",
		"Tender",
	)
	graph.MustAddE(
		"competitor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
		},
		"TenderCompetitor",
		"Competitor",
	)
	graph.MustAddE(
		"tender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenderprofile.TenderTable,
			Columns: []string{tenderprofile.TenderColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"Tender",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CustomerTable,
			Columns: []string{tenderprofile.CustomerColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"Customer",
	)
	graph.MustAddE(
		"finder",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.FinderTable,
			Columns: []string{tenderprofile.FinderColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"User",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CreatedByTable,
			Columns: []string{tenderprofile.CreatedByColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"User",
	)
	graph.MustAddE(
		"province",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ProvinceTable,
			Columns: []string{tenderprofile.ProvinceColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"Province",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CityTable,
			Columns: []string{tenderprofile.CityColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"City",
	)
	graph.MustAddE(
		"district",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.DistrictTable,
			Columns: []string{tenderprofile.DistrictColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"District",
	)
	graph.MustAddE(
		"approver",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ApproverTable,
			Columns: []string{tenderprofile.ApproverColumn},
			Bidi:    false,
		},
		"TenderProfile",
		"User",
	)
	graph.MustAddE(
		"areas",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Area",
	)
	graph.MustAddE(
		"customers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
		},
		"User",
		"Customer",
	)
	graph.MustAddE(
		"leader",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"team_members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"tenders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Tender",
	)
	graph.MustAddE(
		"visit_records",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"VisitRecord",
	)
	graph.MustAddE(
		"projects",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ProjectsTable,
			Columns: user.ProjectsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Project",
	)
	graph.MustAddE(
		"tender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.TenderTable,
			Columns: []string{visitrecord.TenderColumn},
			Bidi:    false,
		},
		"VisitRecord",
		"Tender",
	)
	graph.MustAddE(
		"customer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitrecord.CustomerTable,
			Columns: []string{visitrecord.CustomerColumn},
			Bidi:    false,
		},
		"VisitRecord",
		"Customer",
	)
	graph.MustAddE(
		"followUpBys",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   visitrecord.FollowUpBysTable,
			Columns: visitrecord.FollowUpBysPrimaryKey,
			Bidi:    false,
		},
		"VisitRecord",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AreaQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AreaQuery builder.
func (aq *AreaQuery) Filter() *AreaFilter {
	return &AreaFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AreaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AreaMutation builder.
func (m *AreaMutation) Filter() *AreaFilter {
	return &AreaFilter{config: m.config, predicateAdder: m}
}

// AreaFilter provides a generic filtering capability at runtime for AreaQuery.
type AreaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AreaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AreaFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(area.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AreaFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(area.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AreaFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(area.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *AreaFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(area.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *AreaFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(area.FieldCode))
}

// WhereLeaderChatID applies the entql string predicate on the leader_chat_id field.
func (f *AreaFilter) WhereLeaderChatID(p entql.StringP) {
	f.Where(p.Field(area.FieldLeaderChatID))
}

// WhereSalesChatID applies the entql string predicate on the sales_chat_id field.
func (f *AreaFilter) WhereSalesChatID(p entql.StringP) {
	f.Where(p.Field(area.FieldSalesChatID))
}

// WhereCenter applies the entql other predicate on the center field.
func (f *AreaFilter) WhereCenter(p entql.OtherP) {
	f.Where(p.Field(area.FieldCenter))
}

// WhereHasCustomers applies a predicate to check if query has an edge customers.
func (f *AreaFilter) WhereHasCustomers() {
	f.Where(entql.HasEdge("customers"))
}

// WhereHasCustomersWith applies a predicate to check if query has an edge customers with a given conditions (other predicates).
func (f *AreaFilter) WhereHasCustomersWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *AreaFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *AreaFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *AreaFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *AreaFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProvinces applies a predicate to check if query has an edge provinces.
func (f *AreaFilter) WhereHasProvinces() {
	f.Where(entql.HasEdge("provinces"))
}

// WhereHasProvincesWith applies a predicate to check if query has an edge provinces with a given conditions (other predicates).
func (f *AreaFilter) WhereHasProvincesWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("provinces", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CityQuery builder.
func (cq *CityQuery) Filter() *CityFilter {
	return &CityFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CityMutation builder.
func (m *CityMutation) Filter() *CityFilter {
	return &CityFilter{config: m.config, predicateAdder: m}
}

// CityFilter provides a generic filtering capability at runtime for CityQuery.
type CityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(city.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldUpdatedAt))
}

// WhereAdcode applies the entql int predicate on the adcode field.
func (f *CityFilter) WhereAdcode(p entql.IntP) {
	f.Where(p.Field(city.FieldAdcode))
}

// WhereProvCode applies the entql int predicate on the prov_code field.
func (f *CityFilter) WhereProvCode(p entql.IntP) {
	f.Where(p.Field(city.FieldProvCode))
}

// WhereName applies the entql string predicate on the name field.
func (f *CityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(city.FieldName))
}

// WhereCenter applies the entql other predicate on the center field.
func (f *CityFilter) WhereCenter(p entql.OtherP) {
	f.Where(p.Field(city.FieldCenter))
}

// WhereProvinceID applies the entql string predicate on the province_id field.
func (f *CityFilter) WhereProvinceID(p entql.StringP) {
	f.Where(p.Field(city.FieldProvinceID))
}

// WhereHasDistricts applies a predicate to check if query has an edge districts.
func (f *CityFilter) WhereHasDistricts() {
	f.Where(entql.HasEdge("districts"))
}

// WhereHasDistrictsWith applies a predicate to check if query has an edge districts with a given conditions (other predicates).
func (f *CityFilter) WhereHasDistrictsWith(preds ...predicate.District) {
	f.Where(entql.HasEdgeWith("districts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProvince applies a predicate to check if query has an edge province.
func (f *CityFilter) WhereHasProvince() {
	f.Where(entql.HasEdge("province"))
}

// WhereHasProvinceWith applies a predicate to check if query has an edge province with a given conditions (other predicates).
func (f *CityFilter) WhereHasProvinceWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("province", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *CityFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *CityFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CompetitorQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CompetitorQuery builder.
func (cq *CompetitorQuery) Filter() *CompetitorFilter {
	return &CompetitorFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CompetitorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CompetitorMutation builder.
func (m *CompetitorMutation) Filter() *CompetitorFilter {
	return &CompetitorFilter{config: m.config, predicateAdder: m}
}

// CompetitorFilter provides a generic filtering capability at runtime for CompetitorQuery.
type CompetitorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CompetitorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CompetitorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(competitor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CompetitorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(competitor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CompetitorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(competitor.FieldUpdatedAt))
}

// WhereShortName applies the entql string predicate on the short_name field.
func (f *CompetitorFilter) WhereShortName(p entql.StringP) {
	f.Where(p.Field(competitor.FieldShortName))
}

// WhereName applies the entql string predicate on the name field.
func (f *CompetitorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(competitor.FieldName))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *CompetitorFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *CompetitorFilter) WhereHasTendersWith(preds ...predicate.TenderCompetitor) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CountryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryQuery builder.
func (cq *CountryQuery) Filter() *CountryFilter {
	return &CountryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryMutation builder.
func (m *CountryMutation) Filter() *CountryFilter {
	return &CountryFilter{config: m.config, predicateAdder: m}
}

// CountryFilter provides a generic filtering capability at runtime for CountryQuery.
type CountryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CountryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(country.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CountryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(country.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CountryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(country.FieldUpdatedAt))
}

// WhereAdcode applies the entql int predicate on the adcode field.
func (f *CountryFilter) WhereAdcode(p entql.IntP) {
	f.Where(p.Field(country.FieldAdcode))
}

// WhereName applies the entql string predicate on the name field.
func (f *CountryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(country.FieldName))
}

// WhereCenter applies the entql other predicate on the center field.
func (f *CountryFilter) WhereCenter(p entql.OtherP) {
	f.Where(p.Field(country.FieldCenter))
}

// WhereHasProvinces applies a predicate to check if query has an edge provinces.
func (f *CountryFilter) WhereHasProvinces() {
	f.Where(entql.HasEdge("provinces"))
}

// WhereHasProvincesWith applies a predicate to check if query has an edge provinces with a given conditions (other predicates).
func (f *CountryFilter) WhereHasProvincesWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("provinces", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CustomerQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerQuery builder.
func (cq *CustomerQuery) Filter() *CustomerFilter {
	return &CustomerFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerMutation builder.
func (m *CustomerMutation) Filter() *CustomerFilter {
	return &CustomerFilter{config: m.config, predicateAdder: m}
}

// CustomerFilter provides a generic filtering capability at runtime for CustomerQuery.
type CustomerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomerFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customer.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customer.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *CustomerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(customer.FieldName))
}

// WhereApprovalStatus applies the entql int predicate on the approval_status field.
func (f *CustomerFilter) WhereApprovalStatus(p entql.IntP) {
	f.Where(p.Field(customer.FieldApprovalStatus))
}

// WhereOwnerType applies the entql int predicate on the owner_type field.
func (f *CustomerFilter) WhereOwnerType(p entql.IntP) {
	f.Where(p.Field(customer.FieldOwnerType))
}

// WhereIndustry applies the entql int predicate on the industry field.
func (f *CustomerFilter) WhereIndustry(p entql.IntP) {
	f.Where(p.Field(customer.FieldIndustry))
}

// WhereSize applies the entql int predicate on the size field.
func (f *CustomerFilter) WhereSize(p entql.IntP) {
	f.Where(p.Field(customer.FieldSize))
}

// WhereContactPerson applies the entql string predicate on the contact_person field.
func (f *CustomerFilter) WhereContactPerson(p entql.StringP) {
	f.Where(p.Field(customer.FieldContactPerson))
}

// WhereContactPersonPosition applies the entql string predicate on the contact_person_position field.
func (f *CustomerFilter) WhereContactPersonPosition(p entql.StringP) {
	f.Where(p.Field(customer.FieldContactPersonPosition))
}

// WhereContactPersonPhone applies the entql string predicate on the contact_person_phone field.
func (f *CustomerFilter) WhereContactPersonPhone(p entql.StringP) {
	f.Where(p.Field(customer.FieldContactPersonPhone))
}

// WhereContactPersonEmail applies the entql string predicate on the contact_person_email field.
func (f *CustomerFilter) WhereContactPersonEmail(p entql.StringP) {
	f.Where(p.Field(customer.FieldContactPersonEmail))
}

// WhereDraft applies the entql json.RawMessage predicate on the draft field.
func (f *CustomerFilter) WhereDraft(p entql.BytesP) {
	f.Where(p.Field(customer.FieldDraft))
}

// WhereFeishuGroup applies the entql json.RawMessage predicate on the feishu_group field.
func (f *CustomerFilter) WhereFeishuGroup(p entql.BytesP) {
	f.Where(p.Field(customer.FieldFeishuGroup))
}

// WhereAreaID applies the entql string predicate on the area_id field.
func (f *CustomerFilter) WhereAreaID(p entql.StringP) {
	f.Where(p.Field(customer.FieldAreaID))
}

// WhereSalesID applies the entql string predicate on the sales_id field.
func (f *CustomerFilter) WhereSalesID(p entql.StringP) {
	f.Where(p.Field(customer.FieldSalesID))
}

// WhereCreatedByID applies the entql string predicate on the created_by_id field.
func (f *CustomerFilter) WhereCreatedByID(p entql.StringP) {
	f.Where(p.Field(customer.FieldCreatedByID))
}

// WhereUpdatedByID applies the entql string predicate on the updated_by_id field.
func (f *CustomerFilter) WhereUpdatedByID(p entql.StringP) {
	f.Where(p.Field(customer.FieldUpdatedByID))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *CustomerFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(customer.FieldApproverID))
}

// WhereActiveProfileID applies the entql string predicate on the active_profile_id field.
func (f *CustomerFilter) WhereActiveProfileID(p entql.StringP) {
	f.Where(p.Field(customer.FieldActiveProfileID))
}

// WherePendingProfileID applies the entql string predicate on the pending_profile_id field.
func (f *CustomerFilter) WherePendingProfileID(p entql.StringP) {
	f.Where(p.Field(customer.FieldPendingProfileID))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *CustomerFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *CustomerFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSales applies a predicate to check if query has an edge sales.
func (f *CustomerFilter) WhereHasSales() {
	f.Where(entql.HasEdge("sales"))
}

// WhereHasSalesWith applies a predicate to check if query has an edge sales with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasSalesWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("sales", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *CustomerFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUpdatedBy applies a predicate to check if query has an edge updated_by.
func (f *CustomerFilter) WhereHasUpdatedBy() {
	f.Where(entql.HasEdge("updated_by"))
}

// WhereHasUpdatedByWith applies a predicate to check if query has an edge updated_by with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasUpdatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("updated_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *CustomerFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasApproverWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVisitRecords applies a predicate to check if query has an edge visit_records.
func (f *CustomerFilter) WhereHasVisitRecords() {
	f.Where(entql.HasEdge("visit_records"))
}

// WhereHasVisitRecordsWith applies a predicate to check if query has an edge visit_records with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasVisitRecordsWith(preds ...predicate.VisitRecord) {
	f.Where(entql.HasEdgeWith("visit_records", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProfiles applies a predicate to check if query has an edge profiles.
func (f *CustomerFilter) WhereHasProfiles() {
	f.Where(entql.HasEdge("profiles"))
}

// WhereHasProfilesWith applies a predicate to check if query has an edge profiles with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasProfilesWith(preds ...predicate.CustomerProfile) {
	f.Where(entql.HasEdgeWith("profiles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActiveProfile applies a predicate to check if query has an edge active_profile.
func (f *CustomerFilter) WhereHasActiveProfile() {
	f.Where(entql.HasEdge("active_profile"))
}

// WhereHasActiveProfileWith applies a predicate to check if query has an edge active_profile with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasActiveProfileWith(preds ...predicate.CustomerProfile) {
	f.Where(entql.HasEdgeWith("active_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPendingProfile applies a predicate to check if query has an edge pending_profile.
func (f *CustomerFilter) WhereHasPendingProfile() {
	f.Where(entql.HasEdge("pending_profile"))
}

// WhereHasPendingProfileWith applies a predicate to check if query has an edge pending_profile with a given conditions (other predicates).
func (f *CustomerFilter) WhereHasPendingProfileWith(preds ...predicate.CustomerProfile) {
	f.Where(entql.HasEdgeWith("pending_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cpq *CustomerProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	cpq.predicates = append(cpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CustomerProfileQuery builder.
func (cpq *CustomerProfileQuery) Filter() *CustomerProfileFilter {
	return &CustomerProfileFilter{config: cpq.config, predicateAdder: cpq}
}

// addPredicate implements the predicateAdder interface.
func (m *CustomerProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CustomerProfileMutation builder.
func (m *CustomerProfileMutation) Filter() *CustomerProfileFilter {
	return &CustomerProfileFilter{config: m.config, predicateAdder: m}
}

// CustomerProfileFilter provides a generic filtering capability at runtime for CustomerProfileQuery.
type CustomerProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CustomerProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CustomerProfileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CustomerProfileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(customerprofile.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CustomerProfileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(customerprofile.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *CustomerProfileFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldName))
}

// WhereApprovalStatus applies the entql int predicate on the approval_status field.
func (f *CustomerProfileFilter) WhereApprovalStatus(p entql.IntP) {
	f.Where(p.Field(customerprofile.FieldApprovalStatus))
}

// WhereOwnerType applies the entql int predicate on the owner_type field.
func (f *CustomerProfileFilter) WhereOwnerType(p entql.IntP) {
	f.Where(p.Field(customerprofile.FieldOwnerType))
}

// WhereIndustry applies the entql int predicate on the industry field.
func (f *CustomerProfileFilter) WhereIndustry(p entql.IntP) {
	f.Where(p.Field(customerprofile.FieldIndustry))
}

// WhereSize applies the entql int predicate on the size field.
func (f *CustomerProfileFilter) WhereSize(p entql.IntP) {
	f.Where(p.Field(customerprofile.FieldSize))
}

// WhereContactPerson applies the entql string predicate on the contact_person field.
func (f *CustomerProfileFilter) WhereContactPerson(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldContactPerson))
}

// WhereContactPersonPosition applies the entql string predicate on the contact_person_position field.
func (f *CustomerProfileFilter) WhereContactPersonPosition(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldContactPersonPosition))
}

// WhereContactPersonPhone applies the entql string predicate on the contact_person_phone field.
func (f *CustomerProfileFilter) WhereContactPersonPhone(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldContactPersonPhone))
}

// WhereContactPersonEmail applies the entql string predicate on the contact_person_email field.
func (f *CustomerProfileFilter) WhereContactPersonEmail(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldContactPersonEmail))
}

// WhereSalesID applies the entql string predicate on the sales_id field.
func (f *CustomerProfileFilter) WhereSalesID(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldSalesID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *CustomerProfileFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldCustomerID))
}

// WhereCreatedByID applies the entql string predicate on the created_by_id field.
func (f *CustomerProfileFilter) WhereCreatedByID(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldCreatedByID))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *CustomerProfileFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(customerprofile.FieldApproverID))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *CustomerProfileFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *CustomerProfileFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *CustomerProfileFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *CustomerProfileFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *CustomerProfileFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *CustomerProfileFilter) WhereHasApproverWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSales applies a predicate to check if query has an edge sales.
func (f *CustomerProfileFilter) WhereHasSales() {
	f.Where(entql.HasEdge("sales"))
}

// WhereHasSalesWith applies a predicate to check if query has an edge sales with a given conditions (other predicates).
func (f *CustomerProfileFilter) WhereHasSalesWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("sales", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DistrictQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DistrictQuery builder.
func (dq *DistrictQuery) Filter() *DistrictFilter {
	return &DistrictFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DistrictMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DistrictMutation builder.
func (m *DistrictMutation) Filter() *DistrictFilter {
	return &DistrictFilter{config: m.config, predicateAdder: m}
}

// DistrictFilter provides a generic filtering capability at runtime for DistrictQuery.
type DistrictFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DistrictFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DistrictFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(district.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DistrictFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(district.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DistrictFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(district.FieldUpdatedAt))
}

// WhereAdcode applies the entql int predicate on the adcode field.
func (f *DistrictFilter) WhereAdcode(p entql.IntP) {
	f.Where(p.Field(district.FieldAdcode))
}

// WhereProvCode applies the entql int predicate on the prov_code field.
func (f *DistrictFilter) WhereProvCode(p entql.IntP) {
	f.Where(p.Field(district.FieldProvCode))
}

// WhereCityCode applies the entql int predicate on the city_code field.
func (f *DistrictFilter) WhereCityCode(p entql.IntP) {
	f.Where(p.Field(district.FieldCityCode))
}

// WhereName applies the entql string predicate on the name field.
func (f *DistrictFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(district.FieldName))
}

// WhereCenter applies the entql other predicate on the center field.
func (f *DistrictFilter) WhereCenter(p entql.OtherP) {
	f.Where(p.Field(district.FieldCenter))
}

// WhereProvinceID applies the entql string predicate on the province_id field.
func (f *DistrictFilter) WhereProvinceID(p entql.StringP) {
	f.Where(p.Field(district.FieldProvinceID))
}

// WhereCityID applies the entql string predicate on the city_id field.
func (f *DistrictFilter) WhereCityID(p entql.StringP) {
	f.Where(p.Field(district.FieldCityID))
}

// WhereHasProvince applies a predicate to check if query has an edge province.
func (f *DistrictFilter) WhereHasProvince() {
	f.Where(entql.HasEdge("province"))
}

// WhereHasProvinceWith applies a predicate to check if query has an edge province with a given conditions (other predicates).
func (f *DistrictFilter) WhereHasProvinceWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("province", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *DistrictFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *DistrictFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *DistrictFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *DistrictFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlots applies a predicate to check if query has an edge plots.
func (f *DistrictFilter) WhereHasPlots() {
	f.Where(entql.HasEdge("plots"))
}

// WhereHasPlotsWith applies a predicate to check if query has an edge plots with a given conditions (other predicates).
func (f *DistrictFilter) WhereHasPlotsWith(preds ...predicate.Plot) {
	f.Where(entql.HasEdgeWith("plots", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OperationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OperationQuery builder.
func (oq *OperationQuery) Filter() *OperationFilter {
	return &OperationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OperationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OperationMutation builder.
func (m *OperationMutation) Filter() *OperationFilter {
	return &OperationFilter{config: m.config, predicateAdder: m}
}

// OperationFilter provides a generic filtering capability at runtime for OperationQuery.
type OperationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OperationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OperationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(operation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OperationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(operation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OperationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(operation.FieldUpdatedAt))
}

// WhereCjeYs applies the entql float64 predicate on the cje_ys field.
func (f *OperationFilter) WhereCjeYs(p entql.Float64P) {
	f.Where(p.Field(operation.FieldCjeYs))
}

// WhereCjeLj applies the entql float64 predicate on the cje_lj field.
func (f *OperationFilter) WhereCjeLj(p entql.Float64P) {
	f.Where(p.Field(operation.FieldCjeLj))
}

// WhereYyeYs applies the entql float64 predicate on the yye_ys field.
func (f *OperationFilter) WhereYyeYs(p entql.Float64P) {
	f.Where(p.Field(operation.FieldYyeYs))
}

// WhereYyeLj applies the entql float64 predicate on the yye_lj field.
func (f *OperationFilter) WhereYyeLj(p entql.Float64P) {
	f.Where(p.Field(operation.FieldYyeLj))
}

// WhereXjlYs applies the entql float64 predicate on the xjl_ys field.
func (f *OperationFilter) WhereXjlYs(p entql.Float64P) {
	f.Where(p.Field(operation.FieldXjlYs))
}

// WhereXjlLj applies the entql float64 predicate on the xjl_lj field.
func (f *OperationFilter) WhereXjlLj(p entql.Float64P) {
	f.Where(p.Field(operation.FieldXjlLj))
}

// WhereXmglf applies the entql float64 predicate on the xmglf field.
func (f *OperationFilter) WhereXmglf(p entql.Float64P) {
	f.Where(p.Field(operation.FieldXmglf))
}

// WhereXmsjf applies the entql float64 predicate on the xmsjf field.
func (f *OperationFilter) WhereXmsjf(p entql.Float64P) {
	f.Where(p.Field(operation.FieldXmsjf))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlotQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlotQuery builder.
func (pq *PlotQuery) Filter() *PlotFilter {
	return &PlotFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlotMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlotMutation builder.
func (m *PlotMutation) Filter() *PlotFilter {
	return &PlotFilter{config: m.config, predicateAdder: m}
}

// PlotFilter provides a generic filtering capability at runtime for PlotQuery.
type PlotFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlotFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PlotFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(plot.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlotFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(plot.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlotFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(plot.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlotFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(plot.FieldName))
}

// WhereColorHex applies the entql string predicate on the color_hex field.
func (f *PlotFilter) WhereColorHex(p entql.StringP) {
	f.Where(p.Field(plot.FieldColorHex))
}

// WhereGeoBounds applies the entql json.RawMessage predicate on the geo_bounds field.
func (f *PlotFilter) WhereGeoBounds(p entql.BytesP) {
	f.Where(p.Field(plot.FieldGeoBounds))
}

// WhereDistrictID applies the entql string predicate on the district_id field.
func (f *PlotFilter) WhereDistrictID(p entql.StringP) {
	f.Where(p.Field(plot.FieldDistrictID))
}

// WhereHasDistrict applies a predicate to check if query has an edge district.
func (f *PlotFilter) WhereHasDistrict() {
	f.Where(entql.HasEdge("district"))
}

// WhereHasDistrictWith applies a predicate to check if query has an edge district with a given conditions (other predicates).
func (f *PlotFilter) WhereHasDistrictWith(preds ...predicate.District) {
	f.Where(entql.HasEdgeWith("district", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ptq *PotentialTenderQuery) addPredicate(pred func(s *sql.Selector)) {
	ptq.predicates = append(ptq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PotentialTenderQuery builder.
func (ptq *PotentialTenderQuery) Filter() *PotentialTenderFilter {
	return &PotentialTenderFilter{config: ptq.config, predicateAdder: ptq}
}

// addPredicate implements the predicateAdder interface.
func (m *PotentialTenderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PotentialTenderMutation builder.
func (m *PotentialTenderMutation) Filter() *PotentialTenderFilter {
	return &PotentialTenderFilter{config: m.config, predicateAdder: m}
}

// PotentialTenderFilter provides a generic filtering capability at runtime for PotentialTenderQuery.
type PotentialTenderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PotentialTenderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PotentialTenderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PotentialTenderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(potentialtender.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PotentialTenderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(potentialtender.FieldUpdatedAt))
}

// WhereRefURL applies the entql string predicate on the ref_url field.
func (f *PotentialTenderFilter) WhereRefURL(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldRefURL))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PotentialTenderFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PotentialTenderFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldDescription))
}

// WhereRequirement applies the entql string predicate on the requirement field.
func (f *PotentialTenderFilter) WhereRequirement(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldRequirement))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *PotentialTenderFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldAddress))
}

// WhereDate applies the entql string predicate on the date field.
func (f *PotentialTenderFilter) WhereDate(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldDate))
}

// WhereType applies the entql string predicate on the type field.
func (f *PotentialTenderFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldType))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PotentialTenderFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldStatus))
}

// WhereAmount applies the entql string predicate on the amount field.
func (f *PotentialTenderFilter) WhereAmount(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldAmount))
}

// WhereSize applies the entql string predicate on the size field.
func (f *PotentialTenderFilter) WhereSize(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldSize))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *PotentialTenderFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldLocation))
}

// WhereContact applies the entql string predicate on the contact field.
func (f *PotentialTenderFilter) WhereContact(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldContact))
}

// WhereContactPhone applies the entql string predicate on the contact_phone field.
func (f *PotentialTenderFilter) WhereContactPhone(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldContactPhone))
}

// WhereContactEmail applies the entql string predicate on the contact_email field.
func (f *PotentialTenderFilter) WhereContactEmail(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldContactEmail))
}

// WhereContactAddress applies the entql string predicate on the contact_address field.
func (f *PotentialTenderFilter) WhereContactAddress(p entql.StringP) {
	f.Where(p.Field(potentialtender.FieldContactAddress))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProjectQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProjectQuery builder.
func (pq *ProjectQuery) Filter() *ProjectFilter {
	return &ProjectFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProjectMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProjectMutation builder.
func (m *ProjectMutation) Filter() *ProjectFilter {
	return &ProjectFilter{config: m.config, predicateAdder: m}
}

// ProjectFilter provides a generic filtering capability at runtime for ProjectQuery.
type ProjectFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProjectFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProjectFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(project.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProjectFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(project.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProjectFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(project.FieldUpdatedAt))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ProjectFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(project.FieldCode))
}

// WhereIsFinished applies the entql bool predicate on the is_finished field.
func (f *ProjectFilter) WhereIsFinished(p entql.BoolP) {
	f.Where(p.Field(project.FieldIsFinished))
}

// WhereRevenueKpi applies the entql float64 predicate on the revenue_kpi field.
func (f *ProjectFilter) WhereRevenueKpi(p entql.Float64P) {
	f.Where(p.Field(project.FieldRevenueKpi))
}

// WhereRevenueCurrentYearCompleted applies the entql float64 predicate on the revenue_current_year_completed field.
func (f *ProjectFilter) WhereRevenueCurrentYearCompleted(p entql.Float64P) {
	f.Where(p.Field(project.FieldRevenueCurrentYearCompleted))
}

// WhereRevenueAccumulatedCompleted applies the entql float64 predicate on the revenue_accumulated_completed field.
func (f *ProjectFilter) WhereRevenueAccumulatedCompleted(p entql.Float64P) {
	f.Where(p.Field(project.FieldRevenueAccumulatedCompleted))
}

// WherePayDate applies the entql time.Time predicate on the pay_date field.
func (f *ProjectFilter) WherePayDate(p entql.TimeP) {
	f.Where(p.Field(project.FieldPayDate))
}

// WhereOwnerVoCount applies the entql int predicate on the owner_vo_count field.
func (f *ProjectFilter) WhereOwnerVoCount(p entql.IntP) {
	f.Where(p.Field(project.FieldOwnerVoCount))
}

// WhereContractorVoCount applies the entql int predicate on the contractor_vo_count field.
func (f *ProjectFilter) WhereContractorVoCount(p entql.IntP) {
	f.Where(p.Field(project.FieldContractorVoCount))
}

// WhereAccumulateDeduction applies the entql float64 predicate on the accumulate_deduction field.
func (f *ProjectFilter) WhereAccumulateDeduction(p entql.Float64P) {
	f.Where(p.Field(project.FieldAccumulateDeduction))
}

// WhereSubcontractorVaCount applies the entql int predicate on the subcontractor_va_count field.
func (f *ProjectFilter) WhereSubcontractorVaCount(p entql.IntP) {
	f.Where(p.Field(project.FieldSubcontractorVaCount))
}

// WhereContractSupplementaryCount applies the entql int predicate on the contract_supplementary_count field.
func (f *ProjectFilter) WhereContractSupplementaryCount(p entql.IntP) {
	f.Where(p.Field(project.FieldContractSupplementaryCount))
}

// WhereRepairFee applies the entql float64 predicate on the repair_fee field.
func (f *ProjectFilter) WhereRepairFee(p entql.Float64P) {
	f.Where(p.Field(project.FieldRepairFee))
}

// WhereUnitInventoryTotal applies the entql float64 predicate on the unit_inventory_total field.
func (f *ProjectFilter) WhereUnitInventoryTotal(p entql.Float64P) {
	f.Where(p.Field(project.FieldUnitInventoryTotal))
}

// WhereUnitComponentTotal applies the entql float64 predicate on the unit_component_total field.
func (f *ProjectFilter) WhereUnitComponentTotal(p entql.Float64P) {
	f.Where(p.Field(project.FieldUnitComponentTotal))
}

// WhereUnitComponentProduction applies the entql float64 predicate on the unit_component_production field.
func (f *ProjectFilter) WhereUnitComponentProduction(p entql.Float64P) {
	f.Where(p.Field(project.FieldUnitComponentProduction))
}

// WhereUnitComponentInstallation applies the entql float64 predicate on the unit_component_installation field.
func (f *ProjectFilter) WhereUnitComponentInstallation(p entql.Float64P) {
	f.Where(p.Field(project.FieldUnitComponentInstallation))
}

// WhereBulkMaterialsTotalOrderQuantity applies the entql float64 predicate on the bulk_materials_total_order_quantity field.
func (f *ProjectFilter) WhereBulkMaterialsTotalOrderQuantity(p entql.Float64P) {
	f.Where(p.Field(project.FieldBulkMaterialsTotalOrderQuantity))
}

// WhereBulkMaterialsCompletedQuantity applies the entql float64 predicate on the bulk_materials_completed_quantity field.
func (f *ProjectFilter) WhereBulkMaterialsCompletedQuantity(p entql.Float64P) {
	f.Where(p.Field(project.FieldBulkMaterialsCompletedQuantity))
}

// WhereBulkMaterialsUncompletedQuantity applies the entql float64 predicate on the bulk_materials_uncompleted_quantity field.
func (f *ProjectFilter) WhereBulkMaterialsUncompletedQuantity(p entql.Float64P) {
	f.Where(p.Field(project.FieldBulkMaterialsUncompletedQuantity))
}

// WhereDiagramBdFinishCount applies the entql int predicate on the diagram_bd_finish_count field.
func (f *ProjectFilter) WhereDiagramBdFinishCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramBdFinishCount))
}

// WhereDiagramBdTotalCount applies the entql int predicate on the diagram_bd_total_count field.
func (f *ProjectFilter) WhereDiagramBdTotalCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramBdTotalCount))
}

// WhereDiagramConstructionFinishCount applies the entql int predicate on the diagram_construction_finish_count field.
func (f *ProjectFilter) WhereDiagramConstructionFinishCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramConstructionFinishCount))
}

// WhereDiagramConstructionTotalCount applies the entql int predicate on the diagram_construction_total_count field.
func (f *ProjectFilter) WhereDiagramConstructionTotalCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramConstructionTotalCount))
}

// WhereDiagramProcessingFinishCount applies the entql int predicate on the diagram_processing_finish_count field.
func (f *ProjectFilter) WhereDiagramProcessingFinishCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramProcessingFinishCount))
}

// WhereDiagramProcessingTotalCount applies the entql int predicate on the diagram_processing_total_count field.
func (f *ProjectFilter) WhereDiagramProcessingTotalCount(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramProcessingTotalCount))
}

// WhereDiagramCApprovalRatioNumerator applies the entql int predicate on the diagram_c_approval_ratio_numerator field.
func (f *ProjectFilter) WhereDiagramCApprovalRatioNumerator(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramCApprovalRatioNumerator))
}

// WhereDiagramCApprovalRatioDenominator applies the entql int predicate on the diagram_c_approval_ratio_denominator field.
func (f *ProjectFilter) WhereDiagramCApprovalRatioDenominator(p entql.IntP) {
	f.Where(p.Field(project.FieldDiagramCApprovalRatioDenominator))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *ProjectFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *ProjectFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProvinceQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProvinceQuery builder.
func (pq *ProvinceQuery) Filter() *ProvinceFilter {
	return &ProvinceFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProvinceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProvinceMutation builder.
func (m *ProvinceMutation) Filter() *ProvinceFilter {
	return &ProvinceFilter{config: m.config, predicateAdder: m}
}

// ProvinceFilter provides a generic filtering capability at runtime for ProvinceQuery.
type ProvinceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProvinceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProvinceFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(province.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProvinceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(province.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProvinceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(province.FieldUpdatedAt))
}

// WhereAdcode applies the entql int predicate on the adcode field.
func (f *ProvinceFilter) WhereAdcode(p entql.IntP) {
	f.Where(p.Field(province.FieldAdcode))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProvinceFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(province.FieldName))
}

// WhereCenter applies the entql other predicate on the center field.
func (f *ProvinceFilter) WhereCenter(p entql.OtherP) {
	f.Where(p.Field(province.FieldCenter))
}

// WhereCountryID applies the entql string predicate on the country_id field.
func (f *ProvinceFilter) WhereCountryID(p entql.StringP) {
	f.Where(p.Field(province.FieldCountryID))
}

// WhereAreaID applies the entql string predicate on the area_id field.
func (f *ProvinceFilter) WhereAreaID(p entql.StringP) {
	f.Where(p.Field(province.FieldAreaID))
}

// WhereHasDistricts applies a predicate to check if query has an edge districts.
func (f *ProvinceFilter) WhereHasDistricts() {
	f.Where(entql.HasEdge("districts"))
}

// WhereHasDistrictsWith applies a predicate to check if query has an edge districts with a given conditions (other predicates).
func (f *ProvinceFilter) WhereHasDistrictsWith(preds ...predicate.District) {
	f.Where(entql.HasEdgeWith("districts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCities applies a predicate to check if query has an edge cities.
func (f *ProvinceFilter) WhereHasCities() {
	f.Where(entql.HasEdge("cities"))
}

// WhereHasCitiesWith applies a predicate to check if query has an edge cities with a given conditions (other predicates).
func (f *ProvinceFilter) WhereHasCitiesWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("cities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountry applies a predicate to check if query has an edge country.
func (f *ProvinceFilter) WhereHasCountry() {
	f.Where(entql.HasEdge("country"))
}

// WhereHasCountryWith applies a predicate to check if query has an edge country with a given conditions (other predicates).
func (f *ProvinceFilter) WhereHasCountryWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *ProvinceFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *ProvinceFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *ProvinceFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *ProvinceFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TenderQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenderQuery builder.
func (tq *TenderQuery) Filter() *TenderFilter {
	return &TenderFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenderMutation builder.
func (m *TenderMutation) Filter() *TenderFilter {
	return &TenderFilter{config: m.config, predicateAdder: m}
}

// TenderFilter provides a generic filtering capability at runtime for TenderQuery.
type TenderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TenderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tender.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TenderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tender.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TenderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tender.FieldUpdatedAt))
}

// WhereCode applies the entql string predicate on the code field.
func (f *TenderFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(tender.FieldCode))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *TenderFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(tender.FieldStatus))
}

// WhereApprovalStatus applies the entql int predicate on the approval_status field.
func (f *TenderFilter) WhereApprovalStatus(p entql.IntP) {
	f.Where(p.Field(tender.FieldApprovalStatus))
}

// WhereApprovalMsgID applies the entql string predicate on the approval_msg_id field.
func (f *TenderFilter) WhereApprovalMsgID(p entql.StringP) {
	f.Where(p.Field(tender.FieldApprovalMsgID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tender.FieldName))
}

// WhereEstimatedAmount applies the entql float64 predicate on the estimated_amount field.
func (f *TenderFilter) WhereEstimatedAmount(p entql.Float64P) {
	f.Where(p.Field(tender.FieldEstimatedAmount))
}

// WhereTenderDate applies the entql time.Time predicate on the tender_date field.
func (f *TenderFilter) WhereTenderDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldTenderDate))
}

// WhereClassify applies the entql int predicate on the classify field.
func (f *TenderFilter) WhereClassify(p entql.IntP) {
	f.Where(p.Field(tender.FieldClassify))
}

// WhereDiscoveryDate applies the entql time.Time predicate on the discovery_date field.
func (f *TenderFilter) WhereDiscoveryDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldDiscoveryDate))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *TenderFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(tender.FieldAddress))
}

// WhereFullAddress applies the entql string predicate on the full_address field.
func (f *TenderFilter) WhereFullAddress(p entql.StringP) {
	f.Where(p.Field(tender.FieldFullAddress))
}

// WhereContractor applies the entql string predicate on the contractor field.
func (f *TenderFilter) WhereContractor(p entql.StringP) {
	f.Where(p.Field(tender.FieldContractor))
}

// WhereLevelInvolved applies the entql int predicate on the level_involved field.
func (f *TenderFilter) WhereLevelInvolved(p entql.IntP) {
	f.Where(p.Field(tender.FieldLevelInvolved))
}

// WhereSizeAndValueRating applies the entql int predicate on the size_and_value_rating field.
func (f *TenderFilter) WhereSizeAndValueRating(p entql.IntP) {
	f.Where(p.Field(tender.FieldSizeAndValueRating))
}

// WhereSizeAndValueRatingOverview applies the entql string predicate on the size_and_value_rating_overview field.
func (f *TenderFilter) WhereSizeAndValueRatingOverview(p entql.StringP) {
	f.Where(p.Field(tender.FieldSizeAndValueRatingOverview))
}

// WhereCreditAndPaymentRating applies the entql int predicate on the credit_and_payment_rating field.
func (f *TenderFilter) WhereCreditAndPaymentRating(p entql.IntP) {
	f.Where(p.Field(tender.FieldCreditAndPaymentRating))
}

// WhereCreditAndPaymentRatingOverview applies the entql string predicate on the credit_and_payment_rating_overview field.
func (f *TenderFilter) WhereCreditAndPaymentRatingOverview(p entql.StringP) {
	f.Where(p.Field(tender.FieldCreditAndPaymentRatingOverview))
}

// WhereTimeLimitRating applies the entql int predicate on the time_limit_rating field.
func (f *TenderFilter) WhereTimeLimitRating(p entql.IntP) {
	f.Where(p.Field(tender.FieldTimeLimitRating))
}

// WhereTimeLimitRatingOverview applies the entql string predicate on the time_limit_rating_overview field.
func (f *TenderFilter) WhereTimeLimitRatingOverview(p entql.StringP) {
	f.Where(p.Field(tender.FieldTimeLimitRatingOverview))
}

// WhereCustomerRelationshipRating applies the entql int predicate on the customer_relationship_rating field.
func (f *TenderFilter) WhereCustomerRelationshipRating(p entql.IntP) {
	f.Where(p.Field(tender.FieldCustomerRelationshipRating))
}

// WhereCustomerRelationshipRatingOverview applies the entql string predicate on the customer_relationship_rating_overview field.
func (f *TenderFilter) WhereCustomerRelationshipRatingOverview(p entql.StringP) {
	f.Where(p.Field(tender.FieldCustomerRelationshipRatingOverview))
}

// WhereCompetitivePartnershipRating applies the entql int predicate on the competitive_partnership_rating field.
func (f *TenderFilter) WhereCompetitivePartnershipRating(p entql.IntP) {
	f.Where(p.Field(tender.FieldCompetitivePartnershipRating))
}

// WhereCompetitivePartnershipRatingOverview applies the entql string predicate on the competitive_partnership_rating_overview field.
func (f *TenderFilter) WhereCompetitivePartnershipRatingOverview(p entql.StringP) {
	f.Where(p.Field(tender.FieldCompetitivePartnershipRatingOverview))
}

// WherePrepareToBid applies the entql bool predicate on the prepare_to_bid field.
func (f *TenderFilter) WherePrepareToBid(p entql.BoolP) {
	f.Where(p.Field(tender.FieldPrepareToBid))
}

// WhereProjectCode applies the entql string predicate on the project_code field.
func (f *TenderFilter) WhereProjectCode(p entql.StringP) {
	f.Where(p.Field(tender.FieldProjectCode))
}

// WhereProjectType applies the entql string predicate on the project_type field.
func (f *TenderFilter) WhereProjectType(p entql.StringP) {
	f.Where(p.Field(tender.FieldProjectType))
}

// WhereProjectDefinition applies the entql string predicate on the project_definition field.
func (f *TenderFilter) WhereProjectDefinition(p entql.StringP) {
	f.Where(p.Field(tender.FieldProjectDefinition))
}

// WhereEstimatedProjectStartDate applies the entql time.Time predicate on the estimated_project_start_date field.
func (f *TenderFilter) WhereEstimatedProjectStartDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldEstimatedProjectStartDate))
}

// WhereEstimatedProjectEndDate applies the entql time.Time predicate on the estimated_project_end_date field.
func (f *TenderFilter) WhereEstimatedProjectEndDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldEstimatedProjectEndDate))
}

// WhereAttachements applies the entql json.RawMessage predicate on the attachements field.
func (f *TenderFilter) WhereAttachements(p entql.BytesP) {
	f.Where(p.Field(tender.FieldAttachements))
}

// WhereGeoCoordinate applies the entql other predicate on the geo_coordinate field.
func (f *TenderFilter) WhereGeoCoordinate(p entql.OtherP) {
	f.Where(p.Field(tender.FieldGeoCoordinate))
}

// WhereGeoBounds applies the entql json.RawMessage predicate on the geo_bounds field.
func (f *TenderFilter) WhereGeoBounds(p entql.BytesP) {
	f.Where(p.Field(tender.FieldGeoBounds))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TenderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(tender.FieldRemark))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *TenderFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(tender.FieldImages))
}

// WhereTenderSituations applies the entql string predicate on the tender_situations field.
func (f *TenderFilter) WhereTenderSituations(p entql.StringP) {
	f.Where(p.Field(tender.FieldTenderSituations))
}

// WhereOwnerSituations applies the entql string predicate on the owner_situations field.
func (f *TenderFilter) WhereOwnerSituations(p entql.StringP) {
	f.Where(p.Field(tender.FieldOwnerSituations))
}

// WhereBiddingInstructions applies the entql string predicate on the bidding_instructions field.
func (f *TenderFilter) WhereBiddingInstructions(p entql.StringP) {
	f.Where(p.Field(tender.FieldBiddingInstructions))
}

// WhereCompetitorSituations applies the entql string predicate on the competitor_situations field.
func (f *TenderFilter) WhereCompetitorSituations(p entql.StringP) {
	f.Where(p.Field(tender.FieldCompetitorSituations))
}

// WhereCostEngineer applies the entql string predicate on the cost_engineer field.
func (f *TenderFilter) WhereCostEngineer(p entql.StringP) {
	f.Where(p.Field(tender.FieldCostEngineer))
}

// WhereTenderForm applies the entql string predicate on the tender_form field.
func (f *TenderFilter) WhereTenderForm(p entql.StringP) {
	f.Where(p.Field(tender.FieldTenderForm))
}

// WhereContractForm applies the entql string predicate on the contract_form field.
func (f *TenderFilter) WhereContractForm(p entql.StringP) {
	f.Where(p.Field(tender.FieldContractForm))
}

// WhereManagementCompany applies the entql string predicate on the management_company field.
func (f *TenderFilter) WhereManagementCompany(p entql.StringP) {
	f.Where(p.Field(tender.FieldManagementCompany))
}

// WhereTenderingAgency applies the entql string predicate on the tendering_agency field.
func (f *TenderFilter) WhereTenderingAgency(p entql.StringP) {
	f.Where(p.Field(tender.FieldTenderingAgency))
}

// WhereBiddingDate applies the entql time.Time predicate on the bidding_date field.
func (f *TenderFilter) WhereBiddingDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldBiddingDate))
}

// WhereFacadeConsultant applies the entql string predicate on the facade_consultant field.
func (f *TenderFilter) WhereFacadeConsultant(p entql.StringP) {
	f.Where(p.Field(tender.FieldFacadeConsultant))
}

// WhereDesignUnit applies the entql string predicate on the design_unit field.
func (f *TenderFilter) WhereDesignUnit(p entql.StringP) {
	f.Where(p.Field(tender.FieldDesignUnit))
}

// WhereConsultingFirm applies the entql string predicate on the consulting_firm field.
func (f *TenderFilter) WhereConsultingFirm(p entql.StringP) {
	f.Where(p.Field(tender.FieldConsultingFirm))
}

// WhereKeyProject applies the entql bool predicate on the key_project field.
func (f *TenderFilter) WhereKeyProject(p entql.BoolP) {
	f.Where(p.Field(tender.FieldKeyProject))
}

// WhereCurrentProgress applies the entql string predicate on the current_progress field.
func (f *TenderFilter) WhereCurrentProgress(p entql.StringP) {
	f.Where(p.Field(tender.FieldCurrentProgress))
}

// WhereTenderWinCompany applies the entql string predicate on the tender_win_company field.
func (f *TenderFilter) WhereTenderWinCompany(p entql.StringP) {
	f.Where(p.Field(tender.FieldTenderWinCompany))
}

// WhereTenderCode applies the entql string predicate on the tender_code field.
func (f *TenderFilter) WhereTenderCode(p entql.StringP) {
	f.Where(p.Field(tender.FieldTenderCode))
}

// WhereArchitect applies the entql string predicate on the architect field.
func (f *TenderFilter) WhereArchitect(p entql.StringP) {
	f.Where(p.Field(tender.FieldArchitect))
}

// WhereDeveloper applies the entql string predicate on the developer field.
func (f *TenderFilter) WhereDeveloper(p entql.StringP) {
	f.Where(p.Field(tender.FieldDeveloper))
}

// WhereTenderClosingDate applies the entql time.Time predicate on the tender_closing_date field.
func (f *TenderFilter) WhereTenderClosingDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldTenderClosingDate))
}

// WhereConstructionArea applies the entql string predicate on the construction_area field.
func (f *TenderFilter) WhereConstructionArea(p entql.StringP) {
	f.Where(p.Field(tender.FieldConstructionArea))
}

// WhereTenderWinDate applies the entql time.Time predicate on the tender_win_date field.
func (f *TenderFilter) WhereTenderWinDate(p entql.TimeP) {
	f.Where(p.Field(tender.FieldTenderWinDate))
}

// WhereTenderWinAmount applies the entql float64 predicate on the tender_win_amount field.
func (f *TenderFilter) WhereTenderWinAmount(p entql.Float64P) {
	f.Where(p.Field(tender.FieldTenderWinAmount))
}

// WhereLastTenderAmount applies the entql float64 predicate on the last_tender_amount field.
func (f *TenderFilter) WhereLastTenderAmount(p entql.Float64P) {
	f.Where(p.Field(tender.FieldLastTenderAmount))
}

// WhereAreaID applies the entql string predicate on the area_id field.
func (f *TenderFilter) WhereAreaID(p entql.StringP) {
	f.Where(p.Field(tender.FieldAreaID))
}

// WhereProvinceID applies the entql string predicate on the province_id field.
func (f *TenderFilter) WhereProvinceID(p entql.StringP) {
	f.Where(p.Field(tender.FieldProvinceID))
}

// WhereCityID applies the entql string predicate on the city_id field.
func (f *TenderFilter) WhereCityID(p entql.StringP) {
	f.Where(p.Field(tender.FieldCityID))
}

// WhereDistrictID applies the entql string predicate on the district_id field.
func (f *TenderFilter) WhereDistrictID(p entql.StringP) {
	f.Where(p.Field(tender.FieldDistrictID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *TenderFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(tender.FieldCustomerID))
}

// WhereFinderID applies the entql string predicate on the finder_id field.
func (f *TenderFilter) WhereFinderID(p entql.StringP) {
	f.Where(p.Field(tender.FieldFinderID))
}

// WhereCreatedByID applies the entql string predicate on the created_by_id field.
func (f *TenderFilter) WhereCreatedByID(p entql.StringP) {
	f.Where(p.Field(tender.FieldCreatedByID))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *TenderFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(tender.FieldApproverID))
}

// WhereActiveProfileID applies the entql string predicate on the active_profile_id field.
func (f *TenderFilter) WhereActiveProfileID(p entql.StringP) {
	f.Where(p.Field(tender.FieldActiveProfileID))
}

// WherePendingProfileID applies the entql string predicate on the pending_profile_id field.
func (f *TenderFilter) WherePendingProfileID(p entql.StringP) {
	f.Where(p.Field(tender.FieldPendingProfileID))
}

// WhereHasArea applies a predicate to check if query has an edge area.
func (f *TenderFilter) WhereHasArea() {
	f.Where(entql.HasEdge("area"))
}

// WhereHasAreaWith applies a predicate to check if query has an edge area with a given conditions (other predicates).
func (f *TenderFilter) WhereHasAreaWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("area", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProfiles applies a predicate to check if query has an edge profiles.
func (f *TenderFilter) WhereHasProfiles() {
	f.Where(entql.HasEdge("profiles"))
}

// WhereHasProfilesWith applies a predicate to check if query has an edge profiles with a given conditions (other predicates).
func (f *TenderFilter) WhereHasProfilesWith(preds ...predicate.TenderProfile) {
	f.Where(entql.HasEdgeWith("profiles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCompetitors applies a predicate to check if query has an edge competitors.
func (f *TenderFilter) WhereHasCompetitors() {
	f.Where(entql.HasEdge("competitors"))
}

// WhereHasCompetitorsWith applies a predicate to check if query has an edge competitors with a given conditions (other predicates).
func (f *TenderFilter) WhereHasCompetitorsWith(preds ...predicate.TenderCompetitor) {
	f.Where(entql.HasEdgeWith("competitors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *TenderFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *TenderFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFinder applies a predicate to check if query has an edge finder.
func (f *TenderFilter) WhereHasFinder() {
	f.Where(entql.HasEdge("finder"))
}

// WhereHasFinderWith applies a predicate to check if query has an edge finder with a given conditions (other predicates).
func (f *TenderFilter) WhereHasFinderWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("finder", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *TenderFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *TenderFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowingSales applies a predicate to check if query has an edge following_sales.
func (f *TenderFilter) WhereHasFollowingSales() {
	f.Where(entql.HasEdge("following_sales"))
}

// WhereHasFollowingSalesWith applies a predicate to check if query has an edge following_sales with a given conditions (other predicates).
func (f *TenderFilter) WhereHasFollowingSalesWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("following_sales", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProvince applies a predicate to check if query has an edge province.
func (f *TenderFilter) WhereHasProvince() {
	f.Where(entql.HasEdge("province"))
}

// WhereHasProvinceWith applies a predicate to check if query has an edge province with a given conditions (other predicates).
func (f *TenderFilter) WhereHasProvinceWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("province", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *TenderFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *TenderFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDistrict applies a predicate to check if query has an edge district.
func (f *TenderFilter) WhereHasDistrict() {
	f.Where(entql.HasEdge("district"))
}

// WhereHasDistrictWith applies a predicate to check if query has an edge district with a given conditions (other predicates).
func (f *TenderFilter) WhereHasDistrictWith(preds ...predicate.District) {
	f.Where(entql.HasEdgeWith("district", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVisitRecords applies a predicate to check if query has an edge visit_records.
func (f *TenderFilter) WhereHasVisitRecords() {
	f.Where(entql.HasEdge("visit_records"))
}

// WhereHasVisitRecordsWith applies a predicate to check if query has an edge visit_records with a given conditions (other predicates).
func (f *TenderFilter) WhereHasVisitRecordsWith(preds ...predicate.VisitRecord) {
	f.Where(entql.HasEdgeWith("visit_records", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *TenderFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *TenderFilter) WhereHasApproverWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasActiveProfile applies a predicate to check if query has an edge active_profile.
func (f *TenderFilter) WhereHasActiveProfile() {
	f.Where(entql.HasEdge("active_profile"))
}

// WhereHasActiveProfileWith applies a predicate to check if query has an edge active_profile with a given conditions (other predicates).
func (f *TenderFilter) WhereHasActiveProfileWith(preds ...predicate.TenderProfile) {
	f.Where(entql.HasEdgeWith("active_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPendingProfile applies a predicate to check if query has an edge pending_profile.
func (f *TenderFilter) WhereHasPendingProfile() {
	f.Where(entql.HasEdge("pending_profile"))
}

// WhereHasPendingProfileWith applies a predicate to check if query has an edge pending_profile with a given conditions (other predicates).
func (f *TenderFilter) WhereHasPendingProfileWith(preds ...predicate.TenderProfile) {
	f.Where(entql.HasEdgeWith("pending_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tcq *TenderCompetitorQuery) addPredicate(pred func(s *sql.Selector)) {
	tcq.predicates = append(tcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenderCompetitorQuery builder.
func (tcq *TenderCompetitorQuery) Filter() *TenderCompetitorFilter {
	return &TenderCompetitorFilter{config: tcq.config, predicateAdder: tcq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenderCompetitorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenderCompetitorMutation builder.
func (m *TenderCompetitorMutation) Filter() *TenderCompetitorFilter {
	return &TenderCompetitorFilter{config: m.config, predicateAdder: m}
}

// TenderCompetitorFilter provides a generic filtering capability at runtime for TenderCompetitorQuery.
type TenderCompetitorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenderCompetitorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TenderCompetitorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tendercompetitor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TenderCompetitorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tendercompetitor.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TenderCompetitorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tendercompetitor.FieldUpdatedAt))
}

// WhereTenderID applies the entql string predicate on the tender_id field.
func (f *TenderCompetitorFilter) WhereTenderID(p entql.StringP) {
	f.Where(p.Field(tendercompetitor.FieldTenderID))
}

// WhereCompetitorID applies the entql string predicate on the competitor_id field.
func (f *TenderCompetitorFilter) WhereCompetitorID(p entql.StringP) {
	f.Where(p.Field(tendercompetitor.FieldCompetitorID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *TenderCompetitorFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(tendercompetitor.FieldAmount))
}

// WhereResult applies the entql bool predicate on the result field.
func (f *TenderCompetitorFilter) WhereResult(p entql.BoolP) {
	f.Where(p.Field(tendercompetitor.FieldResult))
}

// WhereHasTender applies a predicate to check if query has an edge tender.
func (f *TenderCompetitorFilter) WhereHasTender() {
	f.Where(entql.HasEdge("tender"))
}

// WhereHasTenderWith applies a predicate to check if query has an edge tender with a given conditions (other predicates).
func (f *TenderCompetitorFilter) WhereHasTenderWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCompetitor applies a predicate to check if query has an edge competitor.
func (f *TenderCompetitorFilter) WhereHasCompetitor() {
	f.Where(entql.HasEdge("competitor"))
}

// WhereHasCompetitorWith applies a predicate to check if query has an edge competitor with a given conditions (other predicates).
func (f *TenderCompetitorFilter) WhereHasCompetitorWith(preds ...predicate.Competitor) {
	f.Where(entql.HasEdgeWith("competitor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tpq *TenderProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	tpq.predicates = append(tpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenderProfileQuery builder.
func (tpq *TenderProfileQuery) Filter() *TenderProfileFilter {
	return &TenderProfileFilter{config: tpq.config, predicateAdder: tpq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenderProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenderProfileMutation builder.
func (m *TenderProfileMutation) Filter() *TenderProfileFilter {
	return &TenderProfileFilter{config: m.config, predicateAdder: m}
}

// TenderProfileFilter provides a generic filtering capability at runtime for TenderProfileQuery.
type TenderProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenderProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TenderProfileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TenderProfileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TenderProfileFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldUpdatedAt))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *TenderProfileFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldStatus))
}

// WhereApprovalStatus applies the entql int predicate on the approval_status field.
func (f *TenderProfileFilter) WhereApprovalStatus(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldApprovalStatus))
}

// WhereApprovalMsgID applies the entql string predicate on the approval_msg_id field.
func (f *TenderProfileFilter) WhereApprovalMsgID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldApprovalMsgID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenderProfileFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldName))
}

// WhereEstimatedAmount applies the entql float64 predicate on the estimated_amount field.
func (f *TenderProfileFilter) WhereEstimatedAmount(p entql.Float64P) {
	f.Where(p.Field(tenderprofile.FieldEstimatedAmount))
}

// WhereTenderDate applies the entql time.Time predicate on the tender_date field.
func (f *TenderProfileFilter) WhereTenderDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldTenderDate))
}

// WhereClassify applies the entql int predicate on the classify field.
func (f *TenderProfileFilter) WhereClassify(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldClassify))
}

// WhereDiscoveryDate applies the entql time.Time predicate on the discovery_date field.
func (f *TenderProfileFilter) WhereDiscoveryDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldDiscoveryDate))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *TenderProfileFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldAddress))
}

// WhereFullAddress applies the entql string predicate on the full_address field.
func (f *TenderProfileFilter) WhereFullAddress(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldFullAddress))
}

// WhereContractor applies the entql string predicate on the contractor field.
func (f *TenderProfileFilter) WhereContractor(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldContractor))
}

// WhereLevelInvolved applies the entql int predicate on the level_involved field.
func (f *TenderProfileFilter) WhereLevelInvolved(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldLevelInvolved))
}

// WhereSizeAndValueRating applies the entql int predicate on the size_and_value_rating field.
func (f *TenderProfileFilter) WhereSizeAndValueRating(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldSizeAndValueRating))
}

// WhereSizeAndValueRatingOverview applies the entql string predicate on the size_and_value_rating_overview field.
func (f *TenderProfileFilter) WhereSizeAndValueRatingOverview(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldSizeAndValueRatingOverview))
}

// WhereCreditAndPaymentRating applies the entql int predicate on the credit_and_payment_rating field.
func (f *TenderProfileFilter) WhereCreditAndPaymentRating(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldCreditAndPaymentRating))
}

// WhereCreditAndPaymentRatingOverview applies the entql string predicate on the credit_and_payment_rating_overview field.
func (f *TenderProfileFilter) WhereCreditAndPaymentRatingOverview(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCreditAndPaymentRatingOverview))
}

// WhereTimeLimitRating applies the entql int predicate on the time_limit_rating field.
func (f *TenderProfileFilter) WhereTimeLimitRating(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldTimeLimitRating))
}

// WhereTimeLimitRatingOverview applies the entql string predicate on the time_limit_rating_overview field.
func (f *TenderProfileFilter) WhereTimeLimitRatingOverview(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTimeLimitRatingOverview))
}

// WhereCustomerRelationshipRating applies the entql int predicate on the customer_relationship_rating field.
func (f *TenderProfileFilter) WhereCustomerRelationshipRating(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldCustomerRelationshipRating))
}

// WhereCustomerRelationshipRatingOverview applies the entql string predicate on the customer_relationship_rating_overview field.
func (f *TenderProfileFilter) WhereCustomerRelationshipRatingOverview(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCustomerRelationshipRatingOverview))
}

// WhereCompetitivePartnershipRating applies the entql int predicate on the competitive_partnership_rating field.
func (f *TenderProfileFilter) WhereCompetitivePartnershipRating(p entql.IntP) {
	f.Where(p.Field(tenderprofile.FieldCompetitivePartnershipRating))
}

// WhereCompetitivePartnershipRatingOverview applies the entql string predicate on the competitive_partnership_rating_overview field.
func (f *TenderProfileFilter) WhereCompetitivePartnershipRatingOverview(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCompetitivePartnershipRatingOverview))
}

// WherePrepareToBid applies the entql bool predicate on the prepare_to_bid field.
func (f *TenderProfileFilter) WherePrepareToBid(p entql.BoolP) {
	f.Where(p.Field(tenderprofile.FieldPrepareToBid))
}

// WhereProjectCode applies the entql string predicate on the project_code field.
func (f *TenderProfileFilter) WhereProjectCode(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldProjectCode))
}

// WhereProjectType applies the entql string predicate on the project_type field.
func (f *TenderProfileFilter) WhereProjectType(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldProjectType))
}

// WhereProjectDefinition applies the entql string predicate on the project_definition field.
func (f *TenderProfileFilter) WhereProjectDefinition(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldProjectDefinition))
}

// WhereEstimatedProjectStartDate applies the entql time.Time predicate on the estimated_project_start_date field.
func (f *TenderProfileFilter) WhereEstimatedProjectStartDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldEstimatedProjectStartDate))
}

// WhereEstimatedProjectEndDate applies the entql time.Time predicate on the estimated_project_end_date field.
func (f *TenderProfileFilter) WhereEstimatedProjectEndDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldEstimatedProjectEndDate))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *TenderProfileFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(tenderprofile.FieldAttachments))
}

// WhereGeoCoordinate applies the entql json.RawMessage predicate on the geo_coordinate field.
func (f *TenderProfileFilter) WhereGeoCoordinate(p entql.BytesP) {
	f.Where(p.Field(tenderprofile.FieldGeoCoordinate))
}

// WhereGeoBounds applies the entql json.RawMessage predicate on the geo_bounds field.
func (f *TenderProfileFilter) WhereGeoBounds(p entql.BytesP) {
	f.Where(p.Field(tenderprofile.FieldGeoBounds))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TenderProfileFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldRemark))
}

// WhereImages applies the entql json.RawMessage predicate on the images field.
func (f *TenderProfileFilter) WhereImages(p entql.BytesP) {
	f.Where(p.Field(tenderprofile.FieldImages))
}

// WhereTenderSituations applies the entql string predicate on the tender_situations field.
func (f *TenderProfileFilter) WhereTenderSituations(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderSituations))
}

// WhereOwnerSituations applies the entql string predicate on the owner_situations field.
func (f *TenderProfileFilter) WhereOwnerSituations(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldOwnerSituations))
}

// WhereBiddingInstructions applies the entql string predicate on the bidding_instructions field.
func (f *TenderProfileFilter) WhereBiddingInstructions(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldBiddingInstructions))
}

// WhereCompetitorSituations applies the entql string predicate on the competitor_situations field.
func (f *TenderProfileFilter) WhereCompetitorSituations(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCompetitorSituations))
}

// WhereCostEngineer applies the entql string predicate on the cost_engineer field.
func (f *TenderProfileFilter) WhereCostEngineer(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCostEngineer))
}

// WhereTenderForm applies the entql string predicate on the tender_form field.
func (f *TenderProfileFilter) WhereTenderForm(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderForm))
}

// WhereContractForm applies the entql string predicate on the contract_form field.
func (f *TenderProfileFilter) WhereContractForm(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldContractForm))
}

// WhereManagementCompany applies the entql string predicate on the management_company field.
func (f *TenderProfileFilter) WhereManagementCompany(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldManagementCompany))
}

// WhereTenderingAgency applies the entql string predicate on the tendering_agency field.
func (f *TenderProfileFilter) WhereTenderingAgency(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderingAgency))
}

// WhereBiddingDate applies the entql time.Time predicate on the bidding_date field.
func (f *TenderProfileFilter) WhereBiddingDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldBiddingDate))
}

// WhereFacadeConsultant applies the entql string predicate on the facade_consultant field.
func (f *TenderProfileFilter) WhereFacadeConsultant(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldFacadeConsultant))
}

// WhereDesignUnit applies the entql string predicate on the design_unit field.
func (f *TenderProfileFilter) WhereDesignUnit(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldDesignUnit))
}

// WhereConsultingFirm applies the entql string predicate on the consulting_firm field.
func (f *TenderProfileFilter) WhereConsultingFirm(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldConsultingFirm))
}

// WhereKeyProject applies the entql bool predicate on the key_project field.
func (f *TenderProfileFilter) WhereKeyProject(p entql.BoolP) {
	f.Where(p.Field(tenderprofile.FieldKeyProject))
}

// WhereCurrentProgress applies the entql string predicate on the current_progress field.
func (f *TenderProfileFilter) WhereCurrentProgress(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCurrentProgress))
}

// WhereTenderWinCompany applies the entql string predicate on the tender_win_company field.
func (f *TenderProfileFilter) WhereTenderWinCompany(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderWinCompany))
}

// WhereTenderCode applies the entql string predicate on the tender_code field.
func (f *TenderProfileFilter) WhereTenderCode(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderCode))
}

// WhereArchitect applies the entql string predicate on the architect field.
func (f *TenderProfileFilter) WhereArchitect(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldArchitect))
}

// WhereDeveloper applies the entql string predicate on the developer field.
func (f *TenderProfileFilter) WhereDeveloper(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldDeveloper))
}

// WhereTenderClosingDate applies the entql time.Time predicate on the tender_closing_date field.
func (f *TenderProfileFilter) WhereTenderClosingDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldTenderClosingDate))
}

// WhereConstructionArea applies the entql string predicate on the construction_area field.
func (f *TenderProfileFilter) WhereConstructionArea(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldConstructionArea))
}

// WhereTenderWinDate applies the entql time.Time predicate on the tender_win_date field.
func (f *TenderProfileFilter) WhereTenderWinDate(p entql.TimeP) {
	f.Where(p.Field(tenderprofile.FieldTenderWinDate))
}

// WhereTenderWinAmount applies the entql float64 predicate on the tender_win_amount field.
func (f *TenderProfileFilter) WhereTenderWinAmount(p entql.Float64P) {
	f.Where(p.Field(tenderprofile.FieldTenderWinAmount))
}

// WhereLastTenderAmount applies the entql float64 predicate on the last_tender_amount field.
func (f *TenderProfileFilter) WhereLastTenderAmount(p entql.Float64P) {
	f.Where(p.Field(tenderprofile.FieldLastTenderAmount))
}

// WhereTenderID applies the entql string predicate on the tender_id field.
func (f *TenderProfileFilter) WhereTenderID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldTenderID))
}

// WhereProvinceID applies the entql string predicate on the province_id field.
func (f *TenderProfileFilter) WhereProvinceID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldProvinceID))
}

// WhereCityID applies the entql string predicate on the city_id field.
func (f *TenderProfileFilter) WhereCityID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCityID))
}

// WhereDistrictID applies the entql string predicate on the district_id field.
func (f *TenderProfileFilter) WhereDistrictID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldDistrictID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *TenderProfileFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCustomerID))
}

// WhereFinderID applies the entql string predicate on the finder_id field.
func (f *TenderProfileFilter) WhereFinderID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldFinderID))
}

// WhereCreatedByID applies the entql string predicate on the created_by_id field.
func (f *TenderProfileFilter) WhereCreatedByID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldCreatedByID))
}

// WhereApproverID applies the entql string predicate on the approver_id field.
func (f *TenderProfileFilter) WhereApproverID(p entql.StringP) {
	f.Where(p.Field(tenderprofile.FieldApproverID))
}

// WhereHasTender applies a predicate to check if query has an edge tender.
func (f *TenderProfileFilter) WhereHasTender() {
	f.Where(entql.HasEdge("tender"))
}

// WhereHasTenderWith applies a predicate to check if query has an edge tender with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasTenderWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *TenderProfileFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFinder applies a predicate to check if query has an edge finder.
func (f *TenderProfileFilter) WhereHasFinder() {
	f.Where(entql.HasEdge("finder"))
}

// WhereHasFinderWith applies a predicate to check if query has an edge finder with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasFinderWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("finder", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *TenderProfileFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProvince applies a predicate to check if query has an edge province.
func (f *TenderProfileFilter) WhereHasProvince() {
	f.Where(entql.HasEdge("province"))
}

// WhereHasProvinceWith applies a predicate to check if query has an edge province with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasProvinceWith(preds ...predicate.Province) {
	f.Where(entql.HasEdgeWith("province", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *TenderProfileFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDistrict applies a predicate to check if query has an edge district.
func (f *TenderProfileFilter) WhereHasDistrict() {
	f.Where(entql.HasEdge("district"))
}

// WhereHasDistrictWith applies a predicate to check if query has an edge district with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasDistrictWith(preds ...predicate.District) {
	f.Where(entql.HasEdgeWith("district", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApprover applies a predicate to check if query has an edge approver.
func (f *TenderProfileFilter) WhereHasApprover() {
	f.Where(entql.HasEdge("approver"))
}

// WhereHasApproverWith applies a predicate to check if query has an edge approver with a given conditions (other predicates).
func (f *TenderProfileFilter) WhereHasApproverWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("approver", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereOpenID applies the entql string predicate on the open_id field.
func (f *UserFilter) WhereOpenID(p entql.StringP) {
	f.Where(p.Field(user.FieldOpenID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereAvatarURL applies the entql string predicate on the avatar_url field.
func (f *UserFilter) WhereAvatarURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarURL))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *UserFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(user.FieldDisabled))
}

// WhereIsAdmin applies the entql bool predicate on the is_admin field.
func (f *UserFilter) WhereIsAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsAdmin))
}

// WhereIsCeo applies the entql bool predicate on the is_ceo field.
func (f *UserFilter) WhereIsCeo(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsCeo))
}

// WhereIsSuperAdmin applies the entql bool predicate on the is_super_admin field.
func (f *UserFilter) WhereIsSuperAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsSuperAdmin))
}

// WhereHasMapAccess applies the entql bool predicate on the has_map_access field.
func (f *UserFilter) WhereHasMapAccess(p entql.BoolP) {
	f.Where(p.Field(user.FieldHasMapAccess))
}

// WhereHasEditAccess applies the entql bool predicate on the has_edit_access field.
func (f *UserFilter) WhereHasEditAccess(p entql.BoolP) {
	f.Where(p.Field(user.FieldHasEditAccess))
}

// WhereLeaderID applies the entql string predicate on the leader_id field.
func (f *UserFilter) WhereLeaderID(p entql.StringP) {
	f.Where(p.Field(user.FieldLeaderID))
}

// WhereHasAreas applies a predicate to check if query has an edge areas.
func (f *UserFilter) WhereHasAreas() {
	f.Where(entql.HasEdge("areas"))
}

// WhereHasAreasWith applies a predicate to check if query has an edge areas with a given conditions (other predicates).
func (f *UserFilter) WhereHasAreasWith(preds ...predicate.Area) {
	f.Where(entql.HasEdgeWith("areas", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomers applies a predicate to check if query has an edge customers.
func (f *UserFilter) WhereHasCustomers() {
	f.Where(entql.HasEdge("customers"))
}

// WhereHasCustomersWith applies a predicate to check if query has an edge customers with a given conditions (other predicates).
func (f *UserFilter) WhereHasCustomersWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLeader applies a predicate to check if query has an edge leader.
func (f *UserFilter) WhereHasLeader() {
	f.Where(entql.HasEdge("leader"))
}

// WhereHasLeaderWith applies a predicate to check if query has an edge leader with a given conditions (other predicates).
func (f *UserFilter) WhereHasLeaderWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("leader", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTeamMembers applies a predicate to check if query has an edge team_members.
func (f *UserFilter) WhereHasTeamMembers() {
	f.Where(entql.HasEdge("team_members"))
}

// WhereHasTeamMembersWith applies a predicate to check if query has an edge team_members with a given conditions (other predicates).
func (f *UserFilter) WhereHasTeamMembersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("team_members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenders applies a predicate to check if query has an edge tenders.
func (f *UserFilter) WhereHasTenders() {
	f.Where(entql.HasEdge("tenders"))
}

// WhereHasTendersWith applies a predicate to check if query has an edge tenders with a given conditions (other predicates).
func (f *UserFilter) WhereHasTendersWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tenders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVisitRecords applies a predicate to check if query has an edge visit_records.
func (f *UserFilter) WhereHasVisitRecords() {
	f.Where(entql.HasEdge("visit_records"))
}

// WhereHasVisitRecordsWith applies a predicate to check if query has an edge visit_records with a given conditions (other predicates).
func (f *UserFilter) WhereHasVisitRecordsWith(preds ...predicate.VisitRecord) {
	f.Where(entql.HasEdgeWith("visit_records", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProjects applies a predicate to check if query has an edge projects.
func (f *UserFilter) WhereHasProjects() {
	f.Where(entql.HasEdge("projects"))
}

// WhereHasProjectsWith applies a predicate to check if query has an edge projects with a given conditions (other predicates).
func (f *UserFilter) WhereHasProjectsWith(preds ...predicate.Project) {
	f.Where(entql.HasEdgeWith("projects", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vrq *VisitRecordQuery) addPredicate(pred func(s *sql.Selector)) {
	vrq.predicates = append(vrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VisitRecordQuery builder.
func (vrq *VisitRecordQuery) Filter() *VisitRecordFilter {
	return &VisitRecordFilter{config: vrq.config, predicateAdder: vrq}
}

// addPredicate implements the predicateAdder interface.
func (m *VisitRecordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VisitRecordMutation builder.
func (m *VisitRecordMutation) Filter() *VisitRecordFilter {
	return &VisitRecordFilter{config: m.config, predicateAdder: m}
}

// VisitRecordFilter provides a generic filtering capability at runtime for VisitRecordQuery.
type VisitRecordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *VisitRecordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *VisitRecordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VisitRecordFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(visitrecord.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VisitRecordFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(visitrecord.FieldUpdatedAt))
}

// WhereVisitType applies the entql int predicate on the visit_type field.
func (f *VisitRecordFilter) WhereVisitType(p entql.IntP) {
	f.Where(p.Field(visitrecord.FieldVisitType))
}

// WhereCommPeople applies the entql string predicate on the comm_people field.
func (f *VisitRecordFilter) WhereCommPeople(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldCommPeople))
}

// WhereCommContent applies the entql string predicate on the comm_content field.
func (f *VisitRecordFilter) WhereCommContent(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldCommContent))
}

// WhereNextStep applies the entql string predicate on the next_step field.
func (f *VisitRecordFilter) WhereNextStep(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldNextStep))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *VisitRecordFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(visitrecord.FieldDate))
}

// WhereTenderID applies the entql string predicate on the tender_id field.
func (f *VisitRecordFilter) WhereTenderID(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldTenderID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *VisitRecordFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(visitrecord.FieldCustomerID))
}

// WhereHasTender applies a predicate to check if query has an edge tender.
func (f *VisitRecordFilter) WhereHasTender() {
	f.Where(entql.HasEdge("tender"))
}

// WhereHasTenderWith applies a predicate to check if query has an edge tender with a given conditions (other predicates).
func (f *VisitRecordFilter) WhereHasTenderWith(preds ...predicate.Tender) {
	f.Where(entql.HasEdgeWith("tender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCustomer applies a predicate to check if query has an edge customer.
func (f *VisitRecordFilter) WhereHasCustomer() {
	f.Where(entql.HasEdge("customer"))
}

// WhereHasCustomerWith applies a predicate to check if query has an edge customer with a given conditions (other predicates).
func (f *VisitRecordFilter) WhereHasCustomerWith(preds ...predicate.Customer) {
	f.Where(entql.HasEdgeWith("customer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowUpBys applies a predicate to check if query has an edge followUpBys.
func (f *VisitRecordFilter) WhereHasFollowUpBys() {
	f.Where(entql.HasEdge("followUpBys"))
}

// WhereHasFollowUpBysWith applies a predicate to check if query has an edge followUpBys with a given conditions (other predicates).
func (f *VisitRecordFilter) WhereHasFollowUpBysWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("followUpBys", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
