// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/opportunity"
	"cscd-bds/store/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   opportunity.Table,
			Columns: opportunity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: opportunity.FieldID,
			},
		},
		Type: "Opportunity",
		Fields: map[string]*sqlgraph.FieldSpec{
			opportunity.FieldCreatedAt:          {Type: field.TypeTime, Column: opportunity.FieldCreatedAt},
			opportunity.FieldUpdatedAt:          {Type: field.TypeTime, Column: opportunity.FieldUpdatedAt},
			opportunity.FieldRegistrationNumber: {Type: field.TypeString, Column: opportunity.FieldRegistrationNumber},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldName:      {Type: field.TypeString, Column: user.FieldName},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (oq *OpportunityQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OpportunityQuery builder.
func (oq *OpportunityQuery) Filter() *OpportunityFilter {
	return &OpportunityFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OpportunityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OpportunityMutation builder.
func (m *OpportunityMutation) Filter() *OpportunityFilter {
	return &OpportunityFilter{config: m.config, predicateAdder: m}
}

// OpportunityFilter provides a generic filtering capability at runtime for OpportunityQuery.
type OpportunityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OpportunityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OpportunityFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(opportunity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OpportunityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(opportunity.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OpportunityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(opportunity.FieldUpdatedAt))
}

// WhereRegistrationNumber applies the entql string predicate on the registration_number field.
func (f *OpportunityFilter) WhereRegistrationNumber(p entql.StringP) {
	f.Where(p.Field(opportunity.FieldRegistrationNumber))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}
