// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 成交额预算
	CjeYs *float64 `json:"cje_ys,omitempty"`
	// 成交额累计
	CjeLj *float64 `json:"cje_lj,omitempty"`
	// 营业额预算
	YyeYs *float64 `json:"yye_ys,omitempty"`
	// 营业额累计
	YyeLj *float64 `json:"yye_lj,omitempty"`
	// 现金流预算
	XjlYs *float64 `json:"xjl_ys,omitempty"`
	// 现金流累计
	XjlLj *float64 `json:"xjl_lj,omitempty"`
	// 项目管理费
	Xmglf *float64 `json:"xmglf,omitempty"`
	// 项目设计费
	Xmsjf        *float64 `json:"xmsjf,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operation.FieldCjeYs, operation.FieldCjeLj, operation.FieldYyeYs, operation.FieldYyeLj, operation.FieldXjlYs, operation.FieldXjlLj, operation.FieldXmglf, operation.FieldXmsjf:
			values[i] = new(sql.NullFloat64)
		case operation.FieldCreatedAt, operation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case operation.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operation.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case operation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case operation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case operation.FieldCjeYs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cje_ys", values[i])
			} else if value.Valid {
				o.CjeYs = new(float64)
				*o.CjeYs = value.Float64
			}
		case operation.FieldCjeLj:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cje_lj", values[i])
			} else if value.Valid {
				o.CjeLj = new(float64)
				*o.CjeLj = value.Float64
			}
		case operation.FieldYyeYs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field yye_ys", values[i])
			} else if value.Valid {
				o.YyeYs = new(float64)
				*o.YyeYs = value.Float64
			}
		case operation.FieldYyeLj:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field yye_lj", values[i])
			} else if value.Valid {
				o.YyeLj = new(float64)
				*o.YyeLj = value.Float64
			}
		case operation.FieldXjlYs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field xjl_ys", values[i])
			} else if value.Valid {
				o.XjlYs = new(float64)
				*o.XjlYs = value.Float64
			}
		case operation.FieldXjlLj:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field xjl_lj", values[i])
			} else if value.Valid {
				o.XjlLj = new(float64)
				*o.XjlLj = value.Float64
			}
		case operation.FieldXmglf:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field xmglf", values[i])
			} else if value.Valid {
				o.Xmglf = new(float64)
				*o.Xmglf = value.Float64
			}
		case operation.FieldXmsjf:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field xmsjf", values[i])
			} else if value.Valid {
				o.Xmsjf = new(float64)
				*o.Xmsjf = value.Float64
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operation.
// This includes values selected through modifiers, order, etc.
func (o *Operation) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Operation.
// Note that you need to call Operation.Unwrap() before calling this method if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return NewOperationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.CjeYs; v != nil {
		builder.WriteString("cje_ys=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.CjeLj; v != nil {
		builder.WriteString("cje_lj=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.YyeYs; v != nil {
		builder.WriteString("yye_ys=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.YyeLj; v != nil {
		builder.WriteString("yye_lj=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.XjlYs; v != nil {
		builder.WriteString("xjl_ys=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.XjlLj; v != nil {
		builder.WriteString("xjl_lj=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.Xmglf; v != nil {
		builder.WriteString("xmglf=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.Xmsjf; v != nil {
		builder.WriteString("xmsjf=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation
