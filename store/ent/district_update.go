// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DistrictUpdate is the builder for updating District entities.
type DistrictUpdate struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// Where appends a list predicates to the DistrictUpdate builder.
func (du *DistrictUpdate) Where(ps ...predicate.District) *DistrictUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DistrictUpdate) SetUpdatedAt(t time.Time) *DistrictUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetAdcode sets the "adcode" field.
func (du *DistrictUpdate) SetAdcode(i int) *DistrictUpdate {
	du.mutation.ResetAdcode()
	du.mutation.SetAdcode(i)
	return du
}

// SetNillableAdcode sets the "adcode" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableAdcode(i *int) *DistrictUpdate {
	if i != nil {
		du.SetAdcode(*i)
	}
	return du
}

// AddAdcode adds i to the "adcode" field.
func (du *DistrictUpdate) AddAdcode(i int) *DistrictUpdate {
	du.mutation.AddAdcode(i)
	return du
}

// SetProvCode sets the "prov_code" field.
func (du *DistrictUpdate) SetProvCode(i int) *DistrictUpdate {
	du.mutation.ResetProvCode()
	du.mutation.SetProvCode(i)
	return du
}

// SetNillableProvCode sets the "prov_code" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableProvCode(i *int) *DistrictUpdate {
	if i != nil {
		du.SetProvCode(*i)
	}
	return du
}

// AddProvCode adds i to the "prov_code" field.
func (du *DistrictUpdate) AddProvCode(i int) *DistrictUpdate {
	du.mutation.AddProvCode(i)
	return du
}

// SetCityCode sets the "city_code" field.
func (du *DistrictUpdate) SetCityCode(i int) *DistrictUpdate {
	du.mutation.ResetCityCode()
	du.mutation.SetCityCode(i)
	return du
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableCityCode(i *int) *DistrictUpdate {
	if i != nil {
		du.SetCityCode(*i)
	}
	return du
}

// AddCityCode adds i to the "city_code" field.
func (du *DistrictUpdate) AddCityCode(i int) *DistrictUpdate {
	du.mutation.AddCityCode(i)
	return du
}

// SetName sets the "name" field.
func (du *DistrictUpdate) SetName(s string) *DistrictUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableName(s *string) *DistrictUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetCenter sets the "center" field.
func (du *DistrictUpdate) SetCenter(gj *geo.GeoJson) *DistrictUpdate {
	du.mutation.SetCenter(gj)
	return du
}

// SetProvinceID sets the "province_id" field.
func (du *DistrictUpdate) SetProvinceID(x xid.ID) *DistrictUpdate {
	du.mutation.SetProvinceID(x)
	return du
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableProvinceID(x *xid.ID) *DistrictUpdate {
	if x != nil {
		du.SetProvinceID(*x)
	}
	return du
}

// SetCityID sets the "city_id" field.
func (du *DistrictUpdate) SetCityID(x xid.ID) *DistrictUpdate {
	du.mutation.SetCityID(x)
	return du
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (du *DistrictUpdate) SetNillableCityID(x *xid.ID) *DistrictUpdate {
	if x != nil {
		du.SetCityID(*x)
	}
	return du
}

// ClearCityID clears the value of the "city_id" field.
func (du *DistrictUpdate) ClearCityID() *DistrictUpdate {
	du.mutation.ClearCityID()
	return du
}

// SetProvince sets the "province" edge to the Province entity.
func (du *DistrictUpdate) SetProvince(p *Province) *DistrictUpdate {
	return du.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (du *DistrictUpdate) SetCity(c *City) *DistrictUpdate {
	return du.SetCityID(c.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (du *DistrictUpdate) AddTenderIDs(ids ...xid.ID) *DistrictUpdate {
	du.mutation.AddTenderIDs(ids...)
	return du
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (du *DistrictUpdate) AddTenders(t ...*Tender) *DistrictUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.AddTenderIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (du *DistrictUpdate) Mutation() *DistrictMutation {
	return du.mutation
}

// ClearProvince clears the "province" edge to the Province entity.
func (du *DistrictUpdate) ClearProvince() *DistrictUpdate {
	du.mutation.ClearProvince()
	return du
}

// ClearCity clears the "city" edge to the City entity.
func (du *DistrictUpdate) ClearCity() *DistrictUpdate {
	du.mutation.ClearCity()
	return du
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (du *DistrictUpdate) ClearTenders() *DistrictUpdate {
	du.mutation.ClearTenders()
	return du
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (du *DistrictUpdate) RemoveTenderIDs(ids ...xid.ID) *DistrictUpdate {
	du.mutation.RemoveTenderIDs(ids...)
	return du
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (du *DistrictUpdate) RemoveTenders(t ...*Tender) *DistrictUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.RemoveTenderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DistrictUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistrictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistrictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DistrictUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := district.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DistrictUpdate) check() error {
	if du.mutation.ProvinceCleared() && len(du.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "District.province"`)
	}
	return nil
}

func (du *DistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(district.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Adcode(); ok {
		_spec.SetField(district.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedAdcode(); ok {
		_spec.AddField(district.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := du.mutation.ProvCode(); ok {
		_spec.SetField(district.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedProvCode(); ok {
		_spec.AddField(district.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := du.mutation.CityCode(); ok {
		_spec.SetField(district.FieldCityCode, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedCityCode(); ok {
		_spec.AddField(district.FieldCityCode, field.TypeInt, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(district.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Center(); ok {
		_spec.SetField(district.FieldCenter, field.TypeOther, value)
	}
	if du.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedTendersIDs(); len(nodes) > 0 && !du.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DistrictUpdateOne is the builder for updating a single District entity.
type DistrictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DistrictMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DistrictUpdateOne) SetUpdatedAt(t time.Time) *DistrictUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetAdcode sets the "adcode" field.
func (duo *DistrictUpdateOne) SetAdcode(i int) *DistrictUpdateOne {
	duo.mutation.ResetAdcode()
	duo.mutation.SetAdcode(i)
	return duo
}

// SetNillableAdcode sets the "adcode" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableAdcode(i *int) *DistrictUpdateOne {
	if i != nil {
		duo.SetAdcode(*i)
	}
	return duo
}

// AddAdcode adds i to the "adcode" field.
func (duo *DistrictUpdateOne) AddAdcode(i int) *DistrictUpdateOne {
	duo.mutation.AddAdcode(i)
	return duo
}

// SetProvCode sets the "prov_code" field.
func (duo *DistrictUpdateOne) SetProvCode(i int) *DistrictUpdateOne {
	duo.mutation.ResetProvCode()
	duo.mutation.SetProvCode(i)
	return duo
}

// SetNillableProvCode sets the "prov_code" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableProvCode(i *int) *DistrictUpdateOne {
	if i != nil {
		duo.SetProvCode(*i)
	}
	return duo
}

// AddProvCode adds i to the "prov_code" field.
func (duo *DistrictUpdateOne) AddProvCode(i int) *DistrictUpdateOne {
	duo.mutation.AddProvCode(i)
	return duo
}

// SetCityCode sets the "city_code" field.
func (duo *DistrictUpdateOne) SetCityCode(i int) *DistrictUpdateOne {
	duo.mutation.ResetCityCode()
	duo.mutation.SetCityCode(i)
	return duo
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableCityCode(i *int) *DistrictUpdateOne {
	if i != nil {
		duo.SetCityCode(*i)
	}
	return duo
}

// AddCityCode adds i to the "city_code" field.
func (duo *DistrictUpdateOne) AddCityCode(i int) *DistrictUpdateOne {
	duo.mutation.AddCityCode(i)
	return duo
}

// SetName sets the "name" field.
func (duo *DistrictUpdateOne) SetName(s string) *DistrictUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableName(s *string) *DistrictUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetCenter sets the "center" field.
func (duo *DistrictUpdateOne) SetCenter(gj *geo.GeoJson) *DistrictUpdateOne {
	duo.mutation.SetCenter(gj)
	return duo
}

// SetProvinceID sets the "province_id" field.
func (duo *DistrictUpdateOne) SetProvinceID(x xid.ID) *DistrictUpdateOne {
	duo.mutation.SetProvinceID(x)
	return duo
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableProvinceID(x *xid.ID) *DistrictUpdateOne {
	if x != nil {
		duo.SetProvinceID(*x)
	}
	return duo
}

// SetCityID sets the "city_id" field.
func (duo *DistrictUpdateOne) SetCityID(x xid.ID) *DistrictUpdateOne {
	duo.mutation.SetCityID(x)
	return duo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableCityID(x *xid.ID) *DistrictUpdateOne {
	if x != nil {
		duo.SetCityID(*x)
	}
	return duo
}

// ClearCityID clears the value of the "city_id" field.
func (duo *DistrictUpdateOne) ClearCityID() *DistrictUpdateOne {
	duo.mutation.ClearCityID()
	return duo
}

// SetProvince sets the "province" edge to the Province entity.
func (duo *DistrictUpdateOne) SetProvince(p *Province) *DistrictUpdateOne {
	return duo.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (duo *DistrictUpdateOne) SetCity(c *City) *DistrictUpdateOne {
	return duo.SetCityID(c.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (duo *DistrictUpdateOne) AddTenderIDs(ids ...xid.ID) *DistrictUpdateOne {
	duo.mutation.AddTenderIDs(ids...)
	return duo
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (duo *DistrictUpdateOne) AddTenders(t ...*Tender) *DistrictUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.AddTenderIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (duo *DistrictUpdateOne) Mutation() *DistrictMutation {
	return duo.mutation
}

// ClearProvince clears the "province" edge to the Province entity.
func (duo *DistrictUpdateOne) ClearProvince() *DistrictUpdateOne {
	duo.mutation.ClearProvince()
	return duo
}

// ClearCity clears the "city" edge to the City entity.
func (duo *DistrictUpdateOne) ClearCity() *DistrictUpdateOne {
	duo.mutation.ClearCity()
	return duo
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (duo *DistrictUpdateOne) ClearTenders() *DistrictUpdateOne {
	duo.mutation.ClearTenders()
	return duo
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (duo *DistrictUpdateOne) RemoveTenderIDs(ids ...xid.ID) *DistrictUpdateOne {
	duo.mutation.RemoveTenderIDs(ids...)
	return duo
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (duo *DistrictUpdateOne) RemoveTenders(t ...*Tender) *DistrictUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.RemoveTenderIDs(ids...)
}

// Where appends a list predicates to the DistrictUpdate builder.
func (duo *DistrictUpdateOne) Where(ps ...predicate.District) *DistrictUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DistrictUpdateOne) Select(field string, fields ...string) *DistrictUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated District entity.
func (duo *DistrictUpdateOne) Save(ctx context.Context) (*District, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistrictUpdateOne) SaveX(ctx context.Context) *District {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistrictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DistrictUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := district.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DistrictUpdateOne) check() error {
	if duo.mutation.ProvinceCleared() && len(duo.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "District.province"`)
	}
	return nil
}

func (duo *DistrictUpdateOne) sqlSave(ctx context.Context) (_node *District, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "District.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, district.FieldID)
		for _, f := range fields {
			if !district.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != district.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(district.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Adcode(); ok {
		_spec.SetField(district.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedAdcode(); ok {
		_spec.AddField(district.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.ProvCode(); ok {
		_spec.SetField(district.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedProvCode(); ok {
		_spec.AddField(district.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.CityCode(); ok {
		_spec.SetField(district.FieldCityCode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedCityCode(); ok {
		_spec.AddField(district.FieldCityCode, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(district.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Center(); ok {
		_spec.SetField(district.FieldCenter, field.TypeOther, value)
	}
	if duo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedTendersIDs(); len(nodes) > 0 && !duo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &District{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
