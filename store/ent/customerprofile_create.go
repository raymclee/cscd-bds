// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerProfileCreate is the builder for creating a CustomerProfile entity.
type CustomerProfileCreate struct {
	config
	mutation *CustomerProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cpc *CustomerProfileCreate) SetCreatedAt(t time.Time) *CustomerProfileCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableCreatedAt(t *time.Time) *CustomerProfileCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpc *CustomerProfileCreate) SetUpdatedAt(t time.Time) *CustomerProfileCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableUpdatedAt(t *time.Time) *CustomerProfileCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetName sets the "name" field.
func (cpc *CustomerProfileCreate) SetName(s string) *CustomerProfileCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetApprovalStatus sets the "approval_status" field.
func (cpc *CustomerProfileCreate) SetApprovalStatus(i int) *CustomerProfileCreate {
	cpc.mutation.SetApprovalStatus(i)
	return cpc
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableApprovalStatus(i *int) *CustomerProfileCreate {
	if i != nil {
		cpc.SetApprovalStatus(*i)
	}
	return cpc
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (cpc *CustomerProfileCreate) SetApprovalMsgID(s string) *CustomerProfileCreate {
	cpc.mutation.SetApprovalMsgID(s)
	return cpc
}

// SetNillableApprovalMsgID sets the "approval_msg_id" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableApprovalMsgID(s *string) *CustomerProfileCreate {
	if s != nil {
		cpc.SetApprovalMsgID(*s)
	}
	return cpc
}

// SetApprovalDate sets the "approval_date" field.
func (cpc *CustomerProfileCreate) SetApprovalDate(t time.Time) *CustomerProfileCreate {
	cpc.mutation.SetApprovalDate(t)
	return cpc
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableApprovalDate(t *time.Time) *CustomerProfileCreate {
	if t != nil {
		cpc.SetApprovalDate(*t)
	}
	return cpc
}

// SetOwnerType sets the "owner_type" field.
func (cpc *CustomerProfileCreate) SetOwnerType(i int) *CustomerProfileCreate {
	cpc.mutation.SetOwnerType(i)
	return cpc
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableOwnerType(i *int) *CustomerProfileCreate {
	if i != nil {
		cpc.SetOwnerType(*i)
	}
	return cpc
}

// SetIndustry sets the "industry" field.
func (cpc *CustomerProfileCreate) SetIndustry(i int) *CustomerProfileCreate {
	cpc.mutation.SetIndustry(i)
	return cpc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableIndustry(i *int) *CustomerProfileCreate {
	if i != nil {
		cpc.SetIndustry(*i)
	}
	return cpc
}

// SetSize sets the "size" field.
func (cpc *CustomerProfileCreate) SetSize(i int) *CustomerProfileCreate {
	cpc.mutation.SetSize(i)
	return cpc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableSize(i *int) *CustomerProfileCreate {
	if i != nil {
		cpc.SetSize(*i)
	}
	return cpc
}

// SetContactPerson sets the "contact_person" field.
func (cpc *CustomerProfileCreate) SetContactPerson(s string) *CustomerProfileCreate {
	cpc.mutation.SetContactPerson(s)
	return cpc
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableContactPerson(s *string) *CustomerProfileCreate {
	if s != nil {
		cpc.SetContactPerson(*s)
	}
	return cpc
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cpc *CustomerProfileCreate) SetContactPersonPosition(s string) *CustomerProfileCreate {
	cpc.mutation.SetContactPersonPosition(s)
	return cpc
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableContactPersonPosition(s *string) *CustomerProfileCreate {
	if s != nil {
		cpc.SetContactPersonPosition(*s)
	}
	return cpc
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cpc *CustomerProfileCreate) SetContactPersonPhone(s string) *CustomerProfileCreate {
	cpc.mutation.SetContactPersonPhone(s)
	return cpc
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableContactPersonPhone(s *string) *CustomerProfileCreate {
	if s != nil {
		cpc.SetContactPersonPhone(*s)
	}
	return cpc
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cpc *CustomerProfileCreate) SetContactPersonEmail(s string) *CustomerProfileCreate {
	cpc.mutation.SetContactPersonEmail(s)
	return cpc
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableContactPersonEmail(s *string) *CustomerProfileCreate {
	if s != nil {
		cpc.SetContactPersonEmail(*s)
	}
	return cpc
}

// SetSalesID sets the "sales_id" field.
func (cpc *CustomerProfileCreate) SetSalesID(x xid.ID) *CustomerProfileCreate {
	cpc.mutation.SetSalesID(x)
	return cpc
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableSalesID(x *xid.ID) *CustomerProfileCreate {
	if x != nil {
		cpc.SetSalesID(*x)
	}
	return cpc
}

// SetCustomerID sets the "customer_id" field.
func (cpc *CustomerProfileCreate) SetCustomerID(x xid.ID) *CustomerProfileCreate {
	cpc.mutation.SetCustomerID(x)
	return cpc
}

// SetCreatedByID sets the "created_by_id" field.
func (cpc *CustomerProfileCreate) SetCreatedByID(x xid.ID) *CustomerProfileCreate {
	cpc.mutation.SetCreatedByID(x)
	return cpc
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableCreatedByID(x *xid.ID) *CustomerProfileCreate {
	if x != nil {
		cpc.SetCreatedByID(*x)
	}
	return cpc
}

// SetApproverID sets the "approver_id" field.
func (cpc *CustomerProfileCreate) SetApproverID(x xid.ID) *CustomerProfileCreate {
	cpc.mutation.SetApproverID(x)
	return cpc
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableApproverID(x *xid.ID) *CustomerProfileCreate {
	if x != nil {
		cpc.SetApproverID(*x)
	}
	return cpc
}

// SetID sets the "id" field.
func (cpc *CustomerProfileCreate) SetID(x xid.ID) *CustomerProfileCreate {
	cpc.mutation.SetID(x)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *CustomerProfileCreate) SetNillableID(x *xid.ID) *CustomerProfileCreate {
	if x != nil {
		cpc.SetID(*x)
	}
	return cpc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cpc *CustomerProfileCreate) SetCustomer(c *Customer) *CustomerProfileCreate {
	return cpc.SetCustomerID(c.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cpc *CustomerProfileCreate) SetCreatedBy(u *User) *CustomerProfileCreate {
	return cpc.SetCreatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cpc *CustomerProfileCreate) SetApprover(u *User) *CustomerProfileCreate {
	return cpc.SetApproverID(u.ID)
}

// SetSales sets the "sales" edge to the User entity.
func (cpc *CustomerProfileCreate) SetSales(u *User) *CustomerProfileCreate {
	return cpc.SetSalesID(u.ID)
}

// Mutation returns the CustomerProfileMutation object of the builder.
func (cpc *CustomerProfileCreate) Mutation() *CustomerProfileMutation {
	return cpc.mutation
}

// Save creates the CustomerProfile in the database.
func (cpc *CustomerProfileCreate) Save(ctx context.Context) (*CustomerProfile, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CustomerProfileCreate) SaveX(ctx context.Context) *CustomerProfile {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CustomerProfileCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CustomerProfileCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CustomerProfileCreate) defaults() {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := customerprofile.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := customerprofile.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cpc.mutation.ApprovalStatus(); !ok {
		v := customerprofile.DefaultApprovalStatus
		cpc.mutation.SetApprovalStatus(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := customerprofile.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CustomerProfileCreate) check() error {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CustomerProfile.created_at"`)}
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CustomerProfile.updated_at"`)}
	}
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CustomerProfile.name"`)}
	}
	if v, ok := cpc.mutation.Name(); ok {
		if err := customerprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.name": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.ApprovalStatus(); !ok {
		return &ValidationError{Name: "approval_status", err: errors.New(`ent: missing required field "CustomerProfile.approval_status"`)}
	}
	if v, ok := cpc.mutation.ApprovalStatus(); ok {
		if err := customerprofile.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.approval_status": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "CustomerProfile.customer_id"`)}
	}
	if len(cpc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerProfile.customer"`)}
	}
	return nil
}

func (cpc *CustomerProfileCreate) sqlSave(ctx context.Context) (*CustomerProfile, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CustomerProfileCreate) createSpec() (*CustomerProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerProfile{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(customerprofile.Table, sqlgraph.NewFieldSpec(customerprofile.FieldID, field.TypeString))
	)
	_spec.OnConflict = cpc.conflict
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.SetField(customerprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.SetField(customerprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.SetField(customerprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cpc.mutation.ApprovalStatus(); ok {
		_spec.SetField(customerprofile.FieldApprovalStatus, field.TypeInt, value)
		_node.ApprovalStatus = value
	}
	if value, ok := cpc.mutation.ApprovalMsgID(); ok {
		_spec.SetField(customerprofile.FieldApprovalMsgID, field.TypeString, value)
		_node.ApprovalMsgID = &value
	}
	if value, ok := cpc.mutation.ApprovalDate(); ok {
		_spec.SetField(customerprofile.FieldApprovalDate, field.TypeTime, value)
		_node.ApprovalDate = &value
	}
	if value, ok := cpc.mutation.OwnerType(); ok {
		_spec.SetField(customerprofile.FieldOwnerType, field.TypeInt, value)
		_node.OwnerType = &value
	}
	if value, ok := cpc.mutation.Industry(); ok {
		_spec.SetField(customerprofile.FieldIndustry, field.TypeInt, value)
		_node.Industry = &value
	}
	if value, ok := cpc.mutation.Size(); ok {
		_spec.SetField(customerprofile.FieldSize, field.TypeInt, value)
		_node.Size = &value
	}
	if value, ok := cpc.mutation.ContactPerson(); ok {
		_spec.SetField(customerprofile.FieldContactPerson, field.TypeString, value)
		_node.ContactPerson = &value
	}
	if value, ok := cpc.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPosition, field.TypeString, value)
		_node.ContactPersonPosition = &value
	}
	if value, ok := cpc.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPhone, field.TypeString, value)
		_node.ContactPersonPhone = &value
	}
	if value, ok := cpc.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customerprofile.FieldContactPersonEmail, field.TypeString, value)
		_node.ContactPersonEmail = &value
	}
	if nodes := cpc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproverID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SalesID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerProfile.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cpc *CustomerProfileCreate) OnConflict(opts ...sql.ConflictOption) *CustomerProfileUpsertOne {
	cpc.conflict = opts
	return &CustomerProfileUpsertOne{
		create: cpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpc *CustomerProfileCreate) OnConflictColumns(columns ...string) *CustomerProfileUpsertOne {
	cpc.conflict = append(cpc.conflict, sql.ConflictColumns(columns...))
	return &CustomerProfileUpsertOne{
		create: cpc,
	}
}

type (
	// CustomerProfileUpsertOne is the builder for "upsert"-ing
	//  one CustomerProfile node.
	CustomerProfileUpsertOne struct {
		create *CustomerProfileCreate
	}

	// CustomerProfileUpsert is the "OnConflict" setter.
	CustomerProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerProfileUpsert) SetUpdatedAt(v time.Time) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateUpdatedAt() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *CustomerProfileUpsert) SetName(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateName() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldName)
	return u
}

// SetApprovalStatus sets the "approval_status" field.
func (u *CustomerProfileUpsert) SetApprovalStatus(v int) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldApprovalStatus, v)
	return u
}

// UpdateApprovalStatus sets the "approval_status" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateApprovalStatus() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldApprovalStatus)
	return u
}

// AddApprovalStatus adds v to the "approval_status" field.
func (u *CustomerProfileUpsert) AddApprovalStatus(v int) *CustomerProfileUpsert {
	u.Add(customerprofile.FieldApprovalStatus, v)
	return u
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (u *CustomerProfileUpsert) SetApprovalMsgID(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldApprovalMsgID, v)
	return u
}

// UpdateApprovalMsgID sets the "approval_msg_id" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateApprovalMsgID() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldApprovalMsgID)
	return u
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (u *CustomerProfileUpsert) ClearApprovalMsgID() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldApprovalMsgID)
	return u
}

// SetApprovalDate sets the "approval_date" field.
func (u *CustomerProfileUpsert) SetApprovalDate(v time.Time) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldApprovalDate, v)
	return u
}

// UpdateApprovalDate sets the "approval_date" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateApprovalDate() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldApprovalDate)
	return u
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (u *CustomerProfileUpsert) ClearApprovalDate() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldApprovalDate)
	return u
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerProfileUpsert) SetOwnerType(v int) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldOwnerType, v)
	return u
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateOwnerType() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldOwnerType)
	return u
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerProfileUpsert) AddOwnerType(v int) *CustomerProfileUpsert {
	u.Add(customerprofile.FieldOwnerType, v)
	return u
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerProfileUpsert) ClearOwnerType() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldOwnerType)
	return u
}

// SetIndustry sets the "industry" field.
func (u *CustomerProfileUpsert) SetIndustry(v int) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateIndustry() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldIndustry)
	return u
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerProfileUpsert) AddIndustry(v int) *CustomerProfileUpsert {
	u.Add(customerprofile.FieldIndustry, v)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerProfileUpsert) ClearIndustry() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldIndustry)
	return u
}

// SetSize sets the "size" field.
func (u *CustomerProfileUpsert) SetSize(v int) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateSize() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *CustomerProfileUpsert) AddSize(v int) *CustomerProfileUpsert {
	u.Add(customerprofile.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *CustomerProfileUpsert) ClearSize() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldSize)
	return u
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerProfileUpsert) SetContactPerson(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldContactPerson, v)
	return u
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateContactPerson() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldContactPerson)
	return u
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerProfileUpsert) ClearContactPerson() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldContactPerson)
	return u
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerProfileUpsert) SetContactPersonPosition(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldContactPersonPosition, v)
	return u
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateContactPersonPosition() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldContactPersonPosition)
	return u
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerProfileUpsert) ClearContactPersonPosition() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldContactPersonPosition)
	return u
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerProfileUpsert) SetContactPersonPhone(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldContactPersonPhone, v)
	return u
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateContactPersonPhone() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldContactPersonPhone)
	return u
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerProfileUpsert) ClearContactPersonPhone() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldContactPersonPhone)
	return u
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerProfileUpsert) SetContactPersonEmail(v string) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldContactPersonEmail, v)
	return u
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateContactPersonEmail() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldContactPersonEmail)
	return u
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerProfileUpsert) ClearContactPersonEmail() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldContactPersonEmail)
	return u
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerProfileUpsert) SetSalesID(v xid.ID) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldSalesID, v)
	return u
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateSalesID() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldSalesID)
	return u
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerProfileUpsert) ClearSalesID() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldSalesID)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerProfileUpsert) SetCustomerID(v xid.ID) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateCustomerID() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldCustomerID)
	return u
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerProfileUpsert) SetCreatedByID(v xid.ID) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldCreatedByID, v)
	return u
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateCreatedByID() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldCreatedByID)
	return u
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerProfileUpsert) ClearCreatedByID() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldCreatedByID)
	return u
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerProfileUpsert) SetApproverID(v xid.ID) *CustomerProfileUpsert {
	u.Set(customerprofile.FieldApproverID, v)
	return u
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerProfileUpsert) UpdateApproverID() *CustomerProfileUpsert {
	u.SetExcluded(customerprofile.FieldApproverID)
	return u
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerProfileUpsert) ClearApproverID() *CustomerProfileUpsert {
	u.SetNull(customerprofile.FieldApproverID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customerprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerProfileUpsertOne) UpdateNewValues() *CustomerProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customerprofile.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customerprofile.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerProfileUpsertOne) Ignore() *CustomerProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerProfileUpsertOne) DoNothing() *CustomerProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerProfileCreate.OnConflict
// documentation for more info.
func (u *CustomerProfileUpsertOne) Update(set func(*CustomerProfileUpsert)) *CustomerProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerProfileUpsertOne) SetUpdatedAt(v time.Time) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateUpdatedAt() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerProfileUpsertOne) SetName(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateName() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateName()
	})
}

// SetApprovalStatus sets the "approval_status" field.
func (u *CustomerProfileUpsertOne) SetApprovalStatus(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalStatus(v)
	})
}

// AddApprovalStatus adds v to the "approval_status" field.
func (u *CustomerProfileUpsertOne) AddApprovalStatus(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddApprovalStatus(v)
	})
}

// UpdateApprovalStatus sets the "approval_status" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateApprovalStatus() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalStatus()
	})
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (u *CustomerProfileUpsertOne) SetApprovalMsgID(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalMsgID(v)
	})
}

// UpdateApprovalMsgID sets the "approval_msg_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateApprovalMsgID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalMsgID()
	})
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (u *CustomerProfileUpsertOne) ClearApprovalMsgID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApprovalMsgID()
	})
}

// SetApprovalDate sets the "approval_date" field.
func (u *CustomerProfileUpsertOne) SetApprovalDate(v time.Time) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalDate(v)
	})
}

// UpdateApprovalDate sets the "approval_date" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateApprovalDate() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalDate()
	})
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (u *CustomerProfileUpsertOne) ClearApprovalDate() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApprovalDate()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerProfileUpsertOne) SetOwnerType(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetOwnerType(v)
	})
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerProfileUpsertOne) AddOwnerType(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateOwnerType() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerProfileUpsertOne) ClearOwnerType() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearOwnerType()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerProfileUpsertOne) SetIndustry(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetIndustry(v)
	})
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerProfileUpsertOne) AddIndustry(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateIndustry() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerProfileUpsertOne) ClearIndustry() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *CustomerProfileUpsertOne) SetSize(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CustomerProfileUpsertOne) AddSize(v int) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateSize() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *CustomerProfileUpsertOne) ClearSize() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearSize()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerProfileUpsertOne) SetContactPerson(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateContactPerson() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerProfileUpsertOne) ClearContactPerson() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerProfileUpsertOne) SetContactPersonPosition(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonPosition(v)
	})
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateContactPersonPosition() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonPosition()
	})
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerProfileUpsertOne) ClearContactPersonPosition() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonPosition()
	})
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerProfileUpsertOne) SetContactPersonPhone(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonPhone(v)
	})
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateContactPersonPhone() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonPhone()
	})
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerProfileUpsertOne) ClearContactPersonPhone() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonPhone()
	})
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerProfileUpsertOne) SetContactPersonEmail(v string) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonEmail(v)
	})
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateContactPersonEmail() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonEmail()
	})
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerProfileUpsertOne) ClearContactPersonEmail() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonEmail()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerProfileUpsertOne) SetSalesID(v xid.ID) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateSalesID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerProfileUpsertOne) ClearSalesID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearSalesID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerProfileUpsertOne) SetCustomerID(v xid.ID) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateCustomerID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateCustomerID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerProfileUpsertOne) SetCreatedByID(v xid.ID) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateCreatedByID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateCreatedByID()
	})
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerProfileUpsertOne) ClearCreatedByID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearCreatedByID()
	})
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerProfileUpsertOne) SetApproverID(v xid.ID) *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApproverID(v)
	})
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertOne) UpdateApproverID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApproverID()
	})
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerProfileUpsertOne) ClearApproverID() *CustomerProfileUpsertOne {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApproverID()
	})
}

// Exec executes the query.
func (u *CustomerProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerProfileUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CustomerProfileUpsertOne.ID is not supported by MySQL driver. Use CustomerProfileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerProfileUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerProfileCreateBulk is the builder for creating many CustomerProfile entities in bulk.
type CustomerProfileCreateBulk struct {
	config
	err      error
	builders []*CustomerProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the CustomerProfile entities in the database.
func (cpcb *CustomerProfileCreateBulk) Save(ctx context.Context) ([]*CustomerProfile, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CustomerProfile, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CustomerProfileCreateBulk) SaveX(ctx context.Context) []*CustomerProfile {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CustomerProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CustomerProfileCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CustomerProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerProfileUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cpcb *CustomerProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerProfileUpsertBulk {
	cpcb.conflict = opts
	return &CustomerProfileUpsertBulk{
		create: cpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpcb *CustomerProfileCreateBulk) OnConflictColumns(columns ...string) *CustomerProfileUpsertBulk {
	cpcb.conflict = append(cpcb.conflict, sql.ConflictColumns(columns...))
	return &CustomerProfileUpsertBulk{
		create: cpcb,
	}
}

// CustomerProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of CustomerProfile nodes.
type CustomerProfileUpsertBulk struct {
	create *CustomerProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customerprofile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerProfileUpsertBulk) UpdateNewValues() *CustomerProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customerprofile.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customerprofile.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CustomerProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerProfileUpsertBulk) Ignore() *CustomerProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerProfileUpsertBulk) DoNothing() *CustomerProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerProfileCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerProfileUpsertBulk) Update(set func(*CustomerProfileUpsert)) *CustomerProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerProfileUpsertBulk) SetUpdatedAt(v time.Time) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateUpdatedAt() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerProfileUpsertBulk) SetName(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateName() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateName()
	})
}

// SetApprovalStatus sets the "approval_status" field.
func (u *CustomerProfileUpsertBulk) SetApprovalStatus(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalStatus(v)
	})
}

// AddApprovalStatus adds v to the "approval_status" field.
func (u *CustomerProfileUpsertBulk) AddApprovalStatus(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddApprovalStatus(v)
	})
}

// UpdateApprovalStatus sets the "approval_status" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateApprovalStatus() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalStatus()
	})
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (u *CustomerProfileUpsertBulk) SetApprovalMsgID(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalMsgID(v)
	})
}

// UpdateApprovalMsgID sets the "approval_msg_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateApprovalMsgID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalMsgID()
	})
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (u *CustomerProfileUpsertBulk) ClearApprovalMsgID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApprovalMsgID()
	})
}

// SetApprovalDate sets the "approval_date" field.
func (u *CustomerProfileUpsertBulk) SetApprovalDate(v time.Time) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApprovalDate(v)
	})
}

// UpdateApprovalDate sets the "approval_date" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateApprovalDate() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApprovalDate()
	})
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (u *CustomerProfileUpsertBulk) ClearApprovalDate() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApprovalDate()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerProfileUpsertBulk) SetOwnerType(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetOwnerType(v)
	})
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerProfileUpsertBulk) AddOwnerType(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateOwnerType() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerProfileUpsertBulk) ClearOwnerType() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearOwnerType()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerProfileUpsertBulk) SetIndustry(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetIndustry(v)
	})
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerProfileUpsertBulk) AddIndustry(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateIndustry() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerProfileUpsertBulk) ClearIndustry() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *CustomerProfileUpsertBulk) SetSize(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CustomerProfileUpsertBulk) AddSize(v int) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateSize() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *CustomerProfileUpsertBulk) ClearSize() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearSize()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerProfileUpsertBulk) SetContactPerson(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateContactPerson() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerProfileUpsertBulk) ClearContactPerson() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerProfileUpsertBulk) SetContactPersonPosition(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonPosition(v)
	})
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateContactPersonPosition() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonPosition()
	})
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerProfileUpsertBulk) ClearContactPersonPosition() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonPosition()
	})
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerProfileUpsertBulk) SetContactPersonPhone(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonPhone(v)
	})
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateContactPersonPhone() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonPhone()
	})
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerProfileUpsertBulk) ClearContactPersonPhone() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonPhone()
	})
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerProfileUpsertBulk) SetContactPersonEmail(v string) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetContactPersonEmail(v)
	})
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateContactPersonEmail() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateContactPersonEmail()
	})
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerProfileUpsertBulk) ClearContactPersonEmail() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearContactPersonEmail()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerProfileUpsertBulk) SetSalesID(v xid.ID) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateSalesID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerProfileUpsertBulk) ClearSalesID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearSalesID()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CustomerProfileUpsertBulk) SetCustomerID(v xid.ID) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateCustomerID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateCustomerID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerProfileUpsertBulk) SetCreatedByID(v xid.ID) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateCreatedByID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateCreatedByID()
	})
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerProfileUpsertBulk) ClearCreatedByID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearCreatedByID()
	})
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerProfileUpsertBulk) SetApproverID(v xid.ID) *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.SetApproverID(v)
	})
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerProfileUpsertBulk) UpdateApproverID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.UpdateApproverID()
	})
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerProfileUpsertBulk) ClearApproverID() *CustomerProfileUpsertBulk {
	return u.Update(func(s *CustomerProfileUpsert) {
		s.ClearApproverID()
	})
}

// Exec executes the query.
func (u *CustomerProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
