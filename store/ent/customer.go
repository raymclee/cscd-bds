// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/schema/zht"
	"cscd-bds/store/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OwnerType holds the value of the "owner_type" field.
	OwnerType *int `json:"owner_type,omitempty"`
	// Industry holds the value of the "industry" field.
	Industry int `json:"industry,omitempty"`
	// Size holds the value of the "size" field.
	Size *int `json:"size,omitempty"`
	// ContactPerson holds the value of the "contact_person" field.
	ContactPerson *string `json:"contact_person,omitempty"`
	// ContactPersonPosition holds the value of the "contact_person_position" field.
	ContactPersonPosition *string `json:"contact_person_position,omitempty"`
	// ContactPersonPhone holds the value of the "contact_person_phone" field.
	ContactPersonPhone *string `json:"contact_person_phone,omitempty"`
	// ContactPersonEmail holds the value of the "contact_person_email" field.
	ContactPersonEmail *string `json:"contact_person_email,omitempty"`
	// FeishuGroup holds the value of the "feishu_group" field.
	FeishuGroup *zht.Group `json:"feishu_group,omitempty"`
	// AreaID holds the value of the "area_id" field.
	AreaID xid.ID `json:"area_id,omitempty"`
	// SalesID holds the value of the "sales_id" field.
	SalesID *xid.ID `json:"sales_id,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID xid.ID `json:"created_by_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// Tenders holds the value of the tenders edge.
	Tenders []*Tender `json:"tenders,omitempty"`
	// Sales holds the value of the sales edge.
	Sales *User `json:"sales,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// VisitRecords holds the value of the visit_records edge.
	VisitRecords []*VisitRecord `json:"visit_records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTenders      map[string][]*Tender
	namedVisitRecords map[string][]*VisitRecord
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) AreaOrErr() (*Area, error) {
	if e.Area != nil {
		return e.Area, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: area.Label}
	}
	return nil, &NotLoadedError{edge: "area"}
}

// TendersOrErr returns the Tenders value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) TendersOrErr() ([]*Tender, error) {
	if e.loadedTypes[1] {
		return e.Tenders, nil
	}
	return nil, &NotLoadedError{edge: "tenders"}
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) SalesOrErr() (*User, error) {
	if e.Sales != nil {
		return e.Sales, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// VisitRecordsOrErr returns the VisitRecords value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) VisitRecordsOrErr() ([]*VisitRecord, error) {
	if e.loadedTypes[4] {
		return e.VisitRecords, nil
	}
	return nil, &NotLoadedError{edge: "visit_records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldSalesID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case customer.FieldFeishuGroup:
			values[i] = new([]byte)
		case customer.FieldOwnerType, customer.FieldIndustry, customer.FieldSize:
			values[i] = new(sql.NullInt64)
		case customer.FieldName, customer.FieldContactPerson, customer.FieldContactPersonPosition, customer.FieldContactPersonPhone, customer.FieldContactPersonEmail:
			values[i] = new(sql.NullString)
		case customer.FieldCreatedAt, customer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customer.FieldID, customer.FieldAreaID, customer.FieldCreatedByID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case customer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case customer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case customer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case customer.FieldOwnerType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_type", values[i])
			} else if value.Valid {
				c.OwnerType = new(int)
				*c.OwnerType = int(value.Int64)
			}
		case customer.FieldIndustry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				c.Industry = int(value.Int64)
			}
		case customer.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				c.Size = new(int)
				*c.Size = int(value.Int64)
			}
		case customer.FieldContactPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person", values[i])
			} else if value.Valid {
				c.ContactPerson = new(string)
				*c.ContactPerson = value.String
			}
		case customer.FieldContactPersonPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_position", values[i])
			} else if value.Valid {
				c.ContactPersonPosition = new(string)
				*c.ContactPersonPosition = value.String
			}
		case customer.FieldContactPersonPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_phone", values[i])
			} else if value.Valid {
				c.ContactPersonPhone = new(string)
				*c.ContactPersonPhone = value.String
			}
		case customer.FieldContactPersonEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_email", values[i])
			} else if value.Valid {
				c.ContactPersonEmail = new(string)
				*c.ContactPersonEmail = value.String
			}
		case customer.FieldFeishuGroup:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field feishu_group", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.FeishuGroup); err != nil {
					return fmt.Errorf("unmarshal field feishu_group: %w", err)
				}
			}
		case customer.FieldAreaID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value != nil {
				c.AreaID = *value
			}
		case customer.FieldSalesID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sales_id", values[i])
			} else if value.Valid {
				c.SalesID = new(xid.ID)
				*c.SalesID = *value.S.(*xid.ID)
			}
		case customer.FieldCreatedByID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value != nil {
				c.CreatedByID = *value
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryArea queries the "area" edge of the Customer entity.
func (c *Customer) QueryArea() *AreaQuery {
	return NewCustomerClient(c.config).QueryArea(c)
}

// QueryTenders queries the "tenders" edge of the Customer entity.
func (c *Customer) QueryTenders() *TenderQuery {
	return NewCustomerClient(c.config).QueryTenders(c)
}

// QuerySales queries the "sales" edge of the Customer entity.
func (c *Customer) QuerySales() *UserQuery {
	return NewCustomerClient(c.config).QuerySales(c)
}

// QueryCreatedBy queries the "created_by" edge of the Customer entity.
func (c *Customer) QueryCreatedBy() *UserQuery {
	return NewCustomerClient(c.config).QueryCreatedBy(c)
}

// QueryVisitRecords queries the "visit_records" edge of the Customer entity.
func (c *Customer) QueryVisitRecords() *VisitRecordQuery {
	return NewCustomerClient(c.config).QueryVisitRecords(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	if v := c.OwnerType; v != nil {
		builder.WriteString("owner_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("industry=")
	builder.WriteString(fmt.Sprintf("%v", c.Industry))
	builder.WriteString(", ")
	if v := c.Size; v != nil {
		builder.WriteString("size=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.ContactPerson; v != nil {
		builder.WriteString("contact_person=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ContactPersonPosition; v != nil {
		builder.WriteString("contact_person_position=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ContactPersonPhone; v != nil {
		builder.WriteString("contact_person_phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ContactPersonEmail; v != nil {
		builder.WriteString("contact_person_email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("feishu_group=")
	builder.WriteString(fmt.Sprintf("%v", c.FeishuGroup))
	builder.WriteString(", ")
	builder.WriteString("area_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AreaID))
	builder.WriteString(", ")
	if v := c.SalesID; v != nil {
		builder.WriteString("sales_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedByID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTenders returns the Tenders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedTenders(name string) ([]*Tender, error) {
	if c.Edges.namedTenders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedTenders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedTenders(name string, edges ...*Tender) {
	if c.Edges.namedTenders == nil {
		c.Edges.namedTenders = make(map[string][]*Tender)
	}
	if len(edges) == 0 {
		c.Edges.namedTenders[name] = []*Tender{}
	} else {
		c.Edges.namedTenders[name] = append(c.Edges.namedTenders[name], edges...)
	}
}

// NamedVisitRecords returns the VisitRecords named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedVisitRecords(name string) ([]*VisitRecord, error) {
	if c.Edges.namedVisitRecords == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedVisitRecords[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedVisitRecords(name string, edges ...*VisitRecord) {
	if c.Edges.namedVisitRecords == nil {
		c.Edges.namedVisitRecords = make(map[string][]*VisitRecord)
	}
	if len(edges) == 0 {
		c.Edges.namedVisitRecords[name] = []*VisitRecord{}
	} else {
		c.Edges.namedVisitRecords[name] = append(c.Edges.namedVisitRecords[name], edges...)
	}
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
