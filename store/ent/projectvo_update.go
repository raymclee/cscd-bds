// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectVOUpdate is the builder for updating ProjectVO entities.
type ProjectVOUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectVOMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProjectVOUpdate builder.
func (pvu *ProjectVOUpdate) Where(ps ...predicate.ProjectVO) *ProjectVOUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *ProjectVOUpdate) SetUpdatedAt(t time.Time) *ProjectVOUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// SetProjectID sets the "project_id" field.
func (pvu *ProjectVOUpdate) SetProjectID(x xid.ID) *ProjectVOUpdate {
	pvu.mutation.SetProjectID(x)
	return pvu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableProjectID(x *xid.ID) *ProjectVOUpdate {
	if x != nil {
		pvu.SetProjectID(*x)
	}
	return pvu
}

// SetChangeType sets the "change_type" field.
func (pvu *ProjectVOUpdate) SetChangeType(i int) *ProjectVOUpdate {
	pvu.mutation.ResetChangeType()
	pvu.mutation.SetChangeType(i)
	return pvu
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableChangeType(i *int) *ProjectVOUpdate {
	if i != nil {
		pvu.SetChangeType(*i)
	}
	return pvu
}

// AddChangeType adds i to the "change_type" field.
func (pvu *ProjectVOUpdate) AddChangeType(i int) *ProjectVOUpdate {
	pvu.mutation.AddChangeType(i)
	return pvu
}

// SetIsApproved sets the "is_approved" field.
func (pvu *ProjectVOUpdate) SetIsApproved(b bool) *ProjectVOUpdate {
	pvu.mutation.SetIsApproved(b)
	return pvu
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableIsApproved(b *bool) *ProjectVOUpdate {
	if b != nil {
		pvu.SetIsApproved(*b)
	}
	return pvu
}

// SetAzjd sets the "azjd" field.
func (pvu *ProjectVOUpdate) SetAzjd(f float64) *ProjectVOUpdate {
	pvu.mutation.ResetAzjd()
	pvu.mutation.SetAzjd(f)
	return pvu
}

// SetNillableAzjd sets the "azjd" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableAzjd(f *float64) *ProjectVOUpdate {
	if f != nil {
		pvu.SetAzjd(*f)
	}
	return pvu
}

// AddAzjd adds f to the "azjd" field.
func (pvu *ProjectVOUpdate) AddAzjd(f float64) *ProjectVOUpdate {
	pvu.mutation.AddAzjd(f)
	return pvu
}

// ClearAzjd clears the value of the "azjd" field.
func (pvu *ProjectVOUpdate) ClearAzjd() *ProjectVOUpdate {
	pvu.mutation.ClearAzjd()
	return pvu
}

// SetYxhyze sets the "yxhyze" field.
func (pvu *ProjectVOUpdate) SetYxhyze(f float64) *ProjectVOUpdate {
	pvu.mutation.ResetYxhyze()
	pvu.mutation.SetYxhyze(f)
	return pvu
}

// SetNillableYxhyze sets the "yxhyze" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableYxhyze(f *float64) *ProjectVOUpdate {
	if f != nil {
		pvu.SetYxhyze(*f)
	}
	return pvu
}

// AddYxhyze adds f to the "yxhyze" field.
func (pvu *ProjectVOUpdate) AddYxhyze(f float64) *ProjectVOUpdate {
	pvu.mutation.AddYxhyze(f)
	return pvu
}

// ClearYxhyze clears the value of the "yxhyze" field.
func (pvu *ProjectVOUpdate) ClearYxhyze() *ProjectVOUpdate {
	pvu.mutation.ClearYxhyze()
	return pvu
}

// SetApplyAmount sets the "apply_amount" field.
func (pvu *ProjectVOUpdate) SetApplyAmount(f float64) *ProjectVOUpdate {
	pvu.mutation.ResetApplyAmount()
	pvu.mutation.SetApplyAmount(f)
	return pvu
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableApplyAmount(f *float64) *ProjectVOUpdate {
	if f != nil {
		pvu.SetApplyAmount(*f)
	}
	return pvu
}

// AddApplyAmount adds f to the "apply_amount" field.
func (pvu *ProjectVOUpdate) AddApplyAmount(f float64) *ProjectVOUpdate {
	pvu.mutation.AddApplyAmount(f)
	return pvu
}

// ClearApplyAmount clears the value of the "apply_amount" field.
func (pvu *ProjectVOUpdate) ClearApplyAmount() *ProjectVOUpdate {
	pvu.mutation.ClearApplyAmount()
	return pvu
}

// SetApproveAmount sets the "approve_amount" field.
func (pvu *ProjectVOUpdate) SetApproveAmount(f float64) *ProjectVOUpdate {
	pvu.mutation.ResetApproveAmount()
	pvu.mutation.SetApproveAmount(f)
	return pvu
}

// SetNillableApproveAmount sets the "approve_amount" field if the given value is not nil.
func (pvu *ProjectVOUpdate) SetNillableApproveAmount(f *float64) *ProjectVOUpdate {
	if f != nil {
		pvu.SetApproveAmount(*f)
	}
	return pvu
}

// AddApproveAmount adds f to the "approve_amount" field.
func (pvu *ProjectVOUpdate) AddApproveAmount(f float64) *ProjectVOUpdate {
	pvu.mutation.AddApproveAmount(f)
	return pvu
}

// ClearApproveAmount clears the value of the "approve_amount" field.
func (pvu *ProjectVOUpdate) ClearApproveAmount() *ProjectVOUpdate {
	pvu.mutation.ClearApproveAmount()
	return pvu
}

// SetProject sets the "project" edge to the Project entity.
func (pvu *ProjectVOUpdate) SetProject(p *Project) *ProjectVOUpdate {
	return pvu.SetProjectID(p.ID)
}

// Mutation returns the ProjectVOMutation object of the builder.
func (pvu *ProjectVOUpdate) Mutation() *ProjectVOMutation {
	return pvu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pvu *ProjectVOUpdate) ClearProject() *ProjectVOUpdate {
	pvu.mutation.ClearProject()
	return pvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProjectVOUpdate) Save(ctx context.Context) (int, error) {
	pvu.defaults()
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProjectVOUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProjectVOUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProjectVOUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *ProjectVOUpdate) defaults() {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		v := projectvo.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *ProjectVOUpdate) check() error {
	if pvu.mutation.ProjectCleared() && len(pvu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectVO.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pvu *ProjectVOUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectVOUpdate {
	pvu.modifiers = append(pvu.modifiers, modifiers...)
	return pvu
}

func (pvu *ProjectVOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectvo.Table, projectvo.Columns, sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectvo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pvu.mutation.ChangeType(); ok {
		_spec.SetField(projectvo.FieldChangeType, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedChangeType(); ok {
		_spec.AddField(projectvo.FieldChangeType, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.IsApproved(); ok {
		_spec.SetField(projectvo.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := pvu.mutation.Azjd(); ok {
		_spec.SetField(projectvo.FieldAzjd, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedAzjd(); ok {
		_spec.AddField(projectvo.FieldAzjd, field.TypeFloat64, value)
	}
	if pvu.mutation.AzjdCleared() {
		_spec.ClearField(projectvo.FieldAzjd, field.TypeFloat64)
	}
	if value, ok := pvu.mutation.Yxhyze(); ok {
		_spec.SetField(projectvo.FieldYxhyze, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedYxhyze(); ok {
		_spec.AddField(projectvo.FieldYxhyze, field.TypeFloat64, value)
	}
	if pvu.mutation.YxhyzeCleared() {
		_spec.ClearField(projectvo.FieldYxhyze, field.TypeFloat64)
	}
	if value, ok := pvu.mutation.ApplyAmount(); ok {
		_spec.SetField(projectvo.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedApplyAmount(); ok {
		_spec.AddField(projectvo.FieldApplyAmount, field.TypeFloat64, value)
	}
	if pvu.mutation.ApplyAmountCleared() {
		_spec.ClearField(projectvo.FieldApplyAmount, field.TypeFloat64)
	}
	if value, ok := pvu.mutation.ApproveAmount(); ok {
		_spec.SetField(projectvo.FieldApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedApproveAmount(); ok {
		_spec.AddField(projectvo.FieldApproveAmount, field.TypeFloat64, value)
	}
	if pvu.mutation.ApproveAmountCleared() {
		_spec.ClearField(projectvo.FieldApproveAmount, field.TypeFloat64)
	}
	if pvu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectvo.ProjectTable,
			Columns: []string{projectvo.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectvo.ProjectTable,
			Columns: []string{projectvo.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pvu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectvo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProjectVOUpdateOne is the builder for updating a single ProjectVO entity.
type ProjectVOUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectVOMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *ProjectVOUpdateOne) SetUpdatedAt(t time.Time) *ProjectVOUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// SetProjectID sets the "project_id" field.
func (pvuo *ProjectVOUpdateOne) SetProjectID(x xid.ID) *ProjectVOUpdateOne {
	pvuo.mutation.SetProjectID(x)
	return pvuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableProjectID(x *xid.ID) *ProjectVOUpdateOne {
	if x != nil {
		pvuo.SetProjectID(*x)
	}
	return pvuo
}

// SetChangeType sets the "change_type" field.
func (pvuo *ProjectVOUpdateOne) SetChangeType(i int) *ProjectVOUpdateOne {
	pvuo.mutation.ResetChangeType()
	pvuo.mutation.SetChangeType(i)
	return pvuo
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableChangeType(i *int) *ProjectVOUpdateOne {
	if i != nil {
		pvuo.SetChangeType(*i)
	}
	return pvuo
}

// AddChangeType adds i to the "change_type" field.
func (pvuo *ProjectVOUpdateOne) AddChangeType(i int) *ProjectVOUpdateOne {
	pvuo.mutation.AddChangeType(i)
	return pvuo
}

// SetIsApproved sets the "is_approved" field.
func (pvuo *ProjectVOUpdateOne) SetIsApproved(b bool) *ProjectVOUpdateOne {
	pvuo.mutation.SetIsApproved(b)
	return pvuo
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableIsApproved(b *bool) *ProjectVOUpdateOne {
	if b != nil {
		pvuo.SetIsApproved(*b)
	}
	return pvuo
}

// SetAzjd sets the "azjd" field.
func (pvuo *ProjectVOUpdateOne) SetAzjd(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.ResetAzjd()
	pvuo.mutation.SetAzjd(f)
	return pvuo
}

// SetNillableAzjd sets the "azjd" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableAzjd(f *float64) *ProjectVOUpdateOne {
	if f != nil {
		pvuo.SetAzjd(*f)
	}
	return pvuo
}

// AddAzjd adds f to the "azjd" field.
func (pvuo *ProjectVOUpdateOne) AddAzjd(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.AddAzjd(f)
	return pvuo
}

// ClearAzjd clears the value of the "azjd" field.
func (pvuo *ProjectVOUpdateOne) ClearAzjd() *ProjectVOUpdateOne {
	pvuo.mutation.ClearAzjd()
	return pvuo
}

// SetYxhyze sets the "yxhyze" field.
func (pvuo *ProjectVOUpdateOne) SetYxhyze(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.ResetYxhyze()
	pvuo.mutation.SetYxhyze(f)
	return pvuo
}

// SetNillableYxhyze sets the "yxhyze" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableYxhyze(f *float64) *ProjectVOUpdateOne {
	if f != nil {
		pvuo.SetYxhyze(*f)
	}
	return pvuo
}

// AddYxhyze adds f to the "yxhyze" field.
func (pvuo *ProjectVOUpdateOne) AddYxhyze(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.AddYxhyze(f)
	return pvuo
}

// ClearYxhyze clears the value of the "yxhyze" field.
func (pvuo *ProjectVOUpdateOne) ClearYxhyze() *ProjectVOUpdateOne {
	pvuo.mutation.ClearYxhyze()
	return pvuo
}

// SetApplyAmount sets the "apply_amount" field.
func (pvuo *ProjectVOUpdateOne) SetApplyAmount(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.ResetApplyAmount()
	pvuo.mutation.SetApplyAmount(f)
	return pvuo
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableApplyAmount(f *float64) *ProjectVOUpdateOne {
	if f != nil {
		pvuo.SetApplyAmount(*f)
	}
	return pvuo
}

// AddApplyAmount adds f to the "apply_amount" field.
func (pvuo *ProjectVOUpdateOne) AddApplyAmount(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.AddApplyAmount(f)
	return pvuo
}

// ClearApplyAmount clears the value of the "apply_amount" field.
func (pvuo *ProjectVOUpdateOne) ClearApplyAmount() *ProjectVOUpdateOne {
	pvuo.mutation.ClearApplyAmount()
	return pvuo
}

// SetApproveAmount sets the "approve_amount" field.
func (pvuo *ProjectVOUpdateOne) SetApproveAmount(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.ResetApproveAmount()
	pvuo.mutation.SetApproveAmount(f)
	return pvuo
}

// SetNillableApproveAmount sets the "approve_amount" field if the given value is not nil.
func (pvuo *ProjectVOUpdateOne) SetNillableApproveAmount(f *float64) *ProjectVOUpdateOne {
	if f != nil {
		pvuo.SetApproveAmount(*f)
	}
	return pvuo
}

// AddApproveAmount adds f to the "approve_amount" field.
func (pvuo *ProjectVOUpdateOne) AddApproveAmount(f float64) *ProjectVOUpdateOne {
	pvuo.mutation.AddApproveAmount(f)
	return pvuo
}

// ClearApproveAmount clears the value of the "approve_amount" field.
func (pvuo *ProjectVOUpdateOne) ClearApproveAmount() *ProjectVOUpdateOne {
	pvuo.mutation.ClearApproveAmount()
	return pvuo
}

// SetProject sets the "project" edge to the Project entity.
func (pvuo *ProjectVOUpdateOne) SetProject(p *Project) *ProjectVOUpdateOne {
	return pvuo.SetProjectID(p.ID)
}

// Mutation returns the ProjectVOMutation object of the builder.
func (pvuo *ProjectVOUpdateOne) Mutation() *ProjectVOMutation {
	return pvuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pvuo *ProjectVOUpdateOne) ClearProject() *ProjectVOUpdateOne {
	pvuo.mutation.ClearProject()
	return pvuo
}

// Where appends a list predicates to the ProjectVOUpdate builder.
func (pvuo *ProjectVOUpdateOne) Where(ps ...predicate.ProjectVO) *ProjectVOUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProjectVOUpdateOne) Select(field string, fields ...string) *ProjectVOUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProjectVO entity.
func (pvuo *ProjectVOUpdateOne) Save(ctx context.Context) (*ProjectVO, error) {
	pvuo.defaults()
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProjectVOUpdateOne) SaveX(ctx context.Context) *ProjectVO {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProjectVOUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProjectVOUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *ProjectVOUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		v := projectvo.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *ProjectVOUpdateOne) check() error {
	if pvuo.mutation.ProjectCleared() && len(pvuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectVO.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pvuo *ProjectVOUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectVOUpdateOne {
	pvuo.modifiers = append(pvuo.modifiers, modifiers...)
	return pvuo
}

func (pvuo *ProjectVOUpdateOne) sqlSave(ctx context.Context) (_node *ProjectVO, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectvo.Table, projectvo.Columns, sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectVO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectvo.FieldID)
		for _, f := range fields {
			if !projectvo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectvo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectvo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pvuo.mutation.ChangeType(); ok {
		_spec.SetField(projectvo.FieldChangeType, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedChangeType(); ok {
		_spec.AddField(projectvo.FieldChangeType, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.IsApproved(); ok {
		_spec.SetField(projectvo.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := pvuo.mutation.Azjd(); ok {
		_spec.SetField(projectvo.FieldAzjd, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedAzjd(); ok {
		_spec.AddField(projectvo.FieldAzjd, field.TypeFloat64, value)
	}
	if pvuo.mutation.AzjdCleared() {
		_spec.ClearField(projectvo.FieldAzjd, field.TypeFloat64)
	}
	if value, ok := pvuo.mutation.Yxhyze(); ok {
		_spec.SetField(projectvo.FieldYxhyze, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedYxhyze(); ok {
		_spec.AddField(projectvo.FieldYxhyze, field.TypeFloat64, value)
	}
	if pvuo.mutation.YxhyzeCleared() {
		_spec.ClearField(projectvo.FieldYxhyze, field.TypeFloat64)
	}
	if value, ok := pvuo.mutation.ApplyAmount(); ok {
		_spec.SetField(projectvo.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedApplyAmount(); ok {
		_spec.AddField(projectvo.FieldApplyAmount, field.TypeFloat64, value)
	}
	if pvuo.mutation.ApplyAmountCleared() {
		_spec.ClearField(projectvo.FieldApplyAmount, field.TypeFloat64)
	}
	if value, ok := pvuo.mutation.ApproveAmount(); ok {
		_spec.SetField(projectvo.FieldApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedApproveAmount(); ok {
		_spec.AddField(projectvo.FieldApproveAmount, field.TypeFloat64, value)
	}
	if pvuo.mutation.ApproveAmountCleared() {
		_spec.ClearField(projectvo.FieldApproveAmount, field.TypeFloat64)
	}
	if pvuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectvo.ProjectTable,
			Columns: []string{projectvo.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectvo.ProjectTable,
			Columns: []string{projectvo.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pvuo.modifiers...)
	_node = &ProjectVO{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectvo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
