// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaUpdate is the builder for updating Area entities.
type AreaUpdate struct {
	config
	hooks    []Hook
	mutation *AreaMutation
}

// Where appends a list predicates to the AreaUpdate builder.
func (au *AreaUpdate) Where(ps ...predicate.Area) *AreaUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AreaUpdate) SetUpdatedAt(t time.Time) *AreaUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetName sets the "name" field.
func (au *AreaUpdate) SetName(s string) *AreaUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AreaUpdate) SetNillableName(s *string) *AreaUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetCode sets the "code" field.
func (au *AreaUpdate) SetCode(s string) *AreaUpdate {
	au.mutation.SetCode(s)
	return au
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (au *AreaUpdate) SetNillableCode(s *string) *AreaUpdate {
	if s != nil {
		au.SetCode(*s)
	}
	return au
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (au *AreaUpdate) AddCustomerIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.AddCustomerIDs(ids...)
	return au
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (au *AreaUpdate) AddCustomers(c ...*Customer) *AreaUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCustomerIDs(ids...)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (au *AreaUpdate) AddTenderIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.AddTenderIDs(ids...)
	return au
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (au *AreaUpdate) AddTenders(t ...*Tender) *AreaUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTenderIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the User entity by IDs.
func (au *AreaUpdate) AddSaleIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.AddSaleIDs(ids...)
	return au
}

// AddSales adds the "sales" edges to the User entity.
func (au *AreaUpdate) AddSales(u ...*User) *AreaUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddSaleIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (au *AreaUpdate) Mutation() *AreaMutation {
	return au.mutation
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (au *AreaUpdate) ClearCustomers() *AreaUpdate {
	au.mutation.ClearCustomers()
	return au
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (au *AreaUpdate) RemoveCustomerIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.RemoveCustomerIDs(ids...)
	return au
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (au *AreaUpdate) RemoveCustomers(c ...*Customer) *AreaUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCustomerIDs(ids...)
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (au *AreaUpdate) ClearTenders() *AreaUpdate {
	au.mutation.ClearTenders()
	return au
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (au *AreaUpdate) RemoveTenderIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.RemoveTenderIDs(ids...)
	return au
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (au *AreaUpdate) RemoveTenders(t ...*Tender) *AreaUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTenderIDs(ids...)
}

// ClearSales clears all "sales" edges to the User entity.
func (au *AreaUpdate) ClearSales() *AreaUpdate {
	au.mutation.ClearSales()
	return au
}

// RemoveSaleIDs removes the "sales" edge to User entities by IDs.
func (au *AreaUpdate) RemoveSaleIDs(ids ...xid.ID) *AreaUpdate {
	au.mutation.RemoveSaleIDs(ids...)
	return au
}

// RemoveSales removes "sales" edges to User entities.
func (au *AreaUpdate) RemoveSales(u ...*User) *AreaUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveSaleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AreaUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AreaUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AreaUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AreaUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AreaUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := area.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(area.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Code(); ok {
		_spec.SetField(area.FieldCode, field.TypeString, value)
	}
	if au.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !au.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTendersIDs(); len(nodes) > 0 && !au.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSalesIDs(); len(nodes) > 0 && !au.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AreaUpdateOne is the builder for updating a single Area entity.
type AreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AreaUpdateOne) SetUpdatedAt(t time.Time) *AreaUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetName sets the "name" field.
func (auo *AreaUpdateOne) SetName(s string) *AreaUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableName(s *string) *AreaUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetCode sets the "code" field.
func (auo *AreaUpdateOne) SetCode(s string) *AreaUpdateOne {
	auo.mutation.SetCode(s)
	return auo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableCode(s *string) *AreaUpdateOne {
	if s != nil {
		auo.SetCode(*s)
	}
	return auo
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (auo *AreaUpdateOne) AddCustomerIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.AddCustomerIDs(ids...)
	return auo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (auo *AreaUpdateOne) AddCustomers(c ...*Customer) *AreaUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCustomerIDs(ids...)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (auo *AreaUpdateOne) AddTenderIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.AddTenderIDs(ids...)
	return auo
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (auo *AreaUpdateOne) AddTenders(t ...*Tender) *AreaUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTenderIDs(ids...)
}

// AddSaleIDs adds the "sales" edge to the User entity by IDs.
func (auo *AreaUpdateOne) AddSaleIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.AddSaleIDs(ids...)
	return auo
}

// AddSales adds the "sales" edges to the User entity.
func (auo *AreaUpdateOne) AddSales(u ...*User) *AreaUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddSaleIDs(ids...)
}

// Mutation returns the AreaMutation object of the builder.
func (auo *AreaUpdateOne) Mutation() *AreaMutation {
	return auo.mutation
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (auo *AreaUpdateOne) ClearCustomers() *AreaUpdateOne {
	auo.mutation.ClearCustomers()
	return auo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (auo *AreaUpdateOne) RemoveCustomerIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.RemoveCustomerIDs(ids...)
	return auo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (auo *AreaUpdateOne) RemoveCustomers(c ...*Customer) *AreaUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCustomerIDs(ids...)
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (auo *AreaUpdateOne) ClearTenders() *AreaUpdateOne {
	auo.mutation.ClearTenders()
	return auo
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (auo *AreaUpdateOne) RemoveTenderIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.RemoveTenderIDs(ids...)
	return auo
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (auo *AreaUpdateOne) RemoveTenders(t ...*Tender) *AreaUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTenderIDs(ids...)
}

// ClearSales clears all "sales" edges to the User entity.
func (auo *AreaUpdateOne) ClearSales() *AreaUpdateOne {
	auo.mutation.ClearSales()
	return auo
}

// RemoveSaleIDs removes the "sales" edge to User entities by IDs.
func (auo *AreaUpdateOne) RemoveSaleIDs(ids ...xid.ID) *AreaUpdateOne {
	auo.mutation.RemoveSaleIDs(ids...)
	return auo
}

// RemoveSales removes "sales" edges to User entities.
func (auo *AreaUpdateOne) RemoveSales(u ...*User) *AreaUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveSaleIDs(ids...)
}

// Where appends a list predicates to the AreaUpdate builder.
func (auo *AreaUpdateOne) Where(ps ...predicate.Area) *AreaUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AreaUpdateOne) Select(field string, fields ...string) *AreaUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Area entity.
func (auo *AreaUpdateOne) Save(ctx context.Context) (*Area, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AreaUpdateOne) SaveX(ctx context.Context) *Area {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AreaUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AreaUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AreaUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := area.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AreaUpdateOne) sqlSave(ctx context.Context) (_node *Area, err error) {
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Area.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, area.FieldID)
		for _, f := range fields {
			if !area.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != area.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(area.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Code(); ok {
		_spec.SetField(area.FieldCode, field.TypeString, value)
	}
	if auo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !auo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.CustomersTable,
			Columns: []string{area.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTendersIDs(); len(nodes) > 0 && !auo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.TendersTable,
			Columns: []string{area.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSalesIDs(); len(nodes) > 0 && !auo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   area.SalesTable,
			Columns: area.SalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Area{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
