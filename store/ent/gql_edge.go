// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Area) Customers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CustomerOrder, where *CustomerWhereInput,
) (*CustomerConnection, error) {
	opts := []CustomerPaginateOption{
		WithCustomerOrder(orderBy),
		WithCustomerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[0][alias]
	if nodes, err := a.NamedCustomers(alias); err == nil || hasTotalCount {
		pager, err := newCustomerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CustomerConnection{Edges: []*CustomerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryCustomers().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Area) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[1][alias]
	if nodes, err := a.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Area) Sales(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[2][alias]
	if nodes, err := a.NamedSales(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QuerySales().Paginate(ctx, after, first, before, last, opts...)
}

func (a *Area) Provinces(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ProvinceOrder, where *ProvinceWhereInput,
) (*ProvinceConnection, error) {
	opts := []ProvincePaginateOption{
		WithProvinceOrder(orderBy),
		WithProvinceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[3][alias]
	if nodes, err := a.NamedProvinces(alias); err == nil || hasTotalCount {
		pager, err := newProvincePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProvinceConnection{Edges: []*ProvinceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryProvinces().Paginate(ctx, after, first, before, last, opts...)
}

func (c *City) Districts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *DistrictOrder, where *DistrictWhereInput,
) (*DistrictConnection, error) {
	opts := []DistrictPaginateOption{
		WithDistrictOrder(orderBy),
		WithDistrictFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[0][alias]
	if nodes, err := c.NamedDistricts(alias); err == nil || hasTotalCount {
		pager, err := newDistrictPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DistrictConnection{Edges: []*DistrictEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryDistricts().Paginate(ctx, after, first, before, last, opts...)
}

func (c *City) Province(ctx context.Context) (*Province, error) {
	result, err := c.Edges.ProvinceOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryProvince().Only(ctx)
	}
	return result, err
}

func (c *City) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[2][alias]
	if nodes, err := c.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Country) Provinces(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ProvinceOrder, where *ProvinceWhereInput,
) (*ProvinceConnection, error) {
	opts := []ProvincePaginateOption{
		WithProvinceOrder(orderBy),
		WithProvinceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[0][alias]
	if nodes, err := c.NamedProvinces(alias); err == nil || hasTotalCount {
		pager, err := newProvincePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ProvinceConnection{Edges: []*ProvinceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryProvinces().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Customer) Area(ctx context.Context) (*Area, error) {
	result, err := c.Edges.AreaOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryArea().Only(ctx)
	}
	return result, err
}

func (c *Customer) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[1][alias]
	if nodes, err := c.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Customer) Sales(ctx context.Context) (*User, error) {
	result, err := c.Edges.SalesOrErr()
	if IsNotLoaded(err) {
		result, err = c.QuerySales().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Customer) CreatedBy(ctx context.Context) (*User, error) {
	result, err := c.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCreatedBy().Only(ctx)
	}
	return result, err
}

func (c *Customer) VisitRecords(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *VisitRecordOrder, where *VisitRecordWhereInput,
) (*VisitRecordConnection, error) {
	opts := []VisitRecordPaginateOption{
		WithVisitRecordOrder(orderBy),
		WithVisitRecordFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[4][alias]
	if nodes, err := c.NamedVisitRecords(alias); err == nil || hasTotalCount {
		pager, err := newVisitRecordPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &VisitRecordConnection{Edges: []*VisitRecordEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryVisitRecords().Paginate(ctx, after, first, before, last, opts...)
}

func (d *District) Province(ctx context.Context) (*Province, error) {
	result, err := d.Edges.ProvinceOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryProvince().Only(ctx)
	}
	return result, err
}

func (d *District) City(ctx context.Context) (*City, error) {
	result, err := d.Edges.CityOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryCity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *District) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := d.Edges.totalCount[2][alias]
	if nodes, err := d.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return d.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (d *District) Plots(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PlotOrder, where *PlotWhereInput,
) (*PlotConnection, error) {
	opts := []PlotPaginateOption{
		WithPlotOrder(orderBy),
		WithPlotFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := d.Edges.totalCount[3][alias]
	if nodes, err := d.NamedPlots(alias); err == nil || hasTotalCount {
		pager, err := newPlotPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &PlotConnection{Edges: []*PlotEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return d.QueryPlots().Paginate(ctx, after, first, before, last, opts...)
}

func (pl *Plot) District(ctx context.Context) (*District, error) {
	result, err := pl.Edges.DistrictOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryDistrict().Only(ctx)
	}
	return result, err
}

func (pr *Province) Districts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *DistrictOrder, where *DistrictWhereInput,
) (*DistrictConnection, error) {
	opts := []DistrictPaginateOption{
		WithDistrictOrder(orderBy),
		WithDistrictFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[0][alias]
	if nodes, err := pr.NamedDistricts(alias); err == nil || hasTotalCount {
		pager, err := newDistrictPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DistrictConnection{Edges: []*DistrictEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryDistricts().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Province) Cities(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CityOrder, where *CityWhereInput,
) (*CityConnection, error) {
	opts := []CityPaginateOption{
		WithCityOrder(orderBy),
		WithCityFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[1][alias]
	if nodes, err := pr.NamedCities(alias); err == nil || hasTotalCount {
		pager, err := newCityPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CityConnection{Edges: []*CityEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryCities().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Province) Country(ctx context.Context) (*Country, error) {
	result, err := pr.Edges.CountryOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCountry().Only(ctx)
	}
	return result, err
}

func (pr *Province) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[3][alias]
	if nodes, err := pr.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (pr *Province) Area(ctx context.Context) (*Area, error) {
	result, err := pr.Edges.AreaOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryArea().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tender) Area(ctx context.Context) (*Area, error) {
	result, err := t.Edges.AreaOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryArea().Only(ctx)
	}
	return result, err
}

func (t *Tender) Customer(ctx context.Context) (*Customer, error) {
	result, err := t.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCustomer().Only(ctx)
	}
	return result, err
}

func (t *Tender) Finder(ctx context.Context) (*User, error) {
	result, err := t.Edges.FinderOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryFinder().Only(ctx)
	}
	return result, err
}

func (t *Tender) CreatedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCreatedBy().Only(ctx)
	}
	return result, err
}

func (t *Tender) FollowingSales(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedFollowingSales(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.FollowingSalesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryFollowingSales().All(ctx)
	}
	return result, err
}

func (t *Tender) Province(ctx context.Context) (*Province, error) {
	result, err := t.Edges.ProvinceOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProvince().Only(ctx)
	}
	return result, err
}

func (t *Tender) City(ctx context.Context) (*City, error) {
	result, err := t.Edges.CityOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tender) District(ctx context.Context) (*District, error) {
	result, err := t.Edges.DistrictOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryDistrict().Only(ctx)
	}
	return result, err
}

func (t *Tender) VisitRecords(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *VisitRecordOrder, where *VisitRecordWhereInput,
) (*VisitRecordConnection, error) {
	opts := []VisitRecordPaginateOption{
		WithVisitRecordOrder(orderBy),
		WithVisitRecordFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[8][alias]
	if nodes, err := t.NamedVisitRecords(alias); err == nil || hasTotalCount {
		pager, err := newVisitRecordPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &VisitRecordConnection{Edges: []*VisitRecordEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryVisitRecords().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Areas(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *AreaOrder, where *AreaWhereInput,
) (*AreaConnection, error) {
	opts := []AreaPaginateOption{
		WithAreaOrder(orderBy),
		WithAreaFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedAreas(alias); err == nil || hasTotalCount {
		pager, err := newAreaPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AreaConnection{Edges: []*AreaEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryAreas().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Customers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CustomerOrder, where *CustomerWhereInput,
) (*CustomerConnection, error) {
	opts := []CustomerPaginateOption{
		WithCustomerOrder(orderBy),
		WithCustomerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedCustomers(alias); err == nil || hasTotalCount {
		pager, err := newCustomerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &CustomerConnection{Edges: []*CustomerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryCustomers().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Leader(ctx context.Context) (*User, error) {
	result, err := u.Edges.LeaderOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLeader().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) TeamMembers(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTeamMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TeamMembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTeamMembers().All(ctx)
	}
	return result, err
}

func (u *User) Tenders(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TenderOrder, where *TenderWhereInput,
) (*TenderConnection, error) {
	opts := []TenderPaginateOption{
		WithTenderOrder(orderBy),
		WithTenderFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[4][alias]
	if nodes, err := u.NamedTenders(alias); err == nil || hasTotalCount {
		pager, err := newTenderPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TenderConnection{Edges: []*TenderEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryTenders().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) VisitRecords(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *VisitRecordOrder, where *VisitRecordWhereInput,
) (*VisitRecordConnection, error) {
	opts := []VisitRecordPaginateOption{
		WithVisitRecordOrder(orderBy),
		WithVisitRecordFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[5][alias]
	if nodes, err := u.NamedVisitRecords(alias); err == nil || hasTotalCount {
		pager, err := newVisitRecordPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &VisitRecordConnection{Edges: []*VisitRecordEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryVisitRecords().Paginate(ctx, after, first, before, last, opts...)
}

func (vr *VisitRecord) Tender(ctx context.Context) (*Tender, error) {
	result, err := vr.Edges.TenderOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryTender().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vr *VisitRecord) Customer(ctx context.Context) (*Customer, error) {
	result, err := vr.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryCustomer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vr *VisitRecord) FollowUpBys(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := vr.Edges.totalCount[2][alias]
	if nodes, err := vr.NamedFollowUpBys(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return vr.QueryFollowUpBys().Paginate(ctx, after, first, before, last, opts...)
}
