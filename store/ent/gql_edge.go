// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Area) Customers(ctx context.Context) (result []*Customer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedCustomers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.CustomersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryCustomers().All(ctx)
	}
	return result, err
}

func (a *Area) Tenders(ctx context.Context) (result []*Tender, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedTenders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.TendersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryTenders().All(ctx)
	}
	return result, err
}

func (c *Customer) Area(ctx context.Context) (*Area, error) {
	result, err := c.Edges.AreaOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryArea().Only(ctx)
	}
	return result, err
}

func (c *Customer) Tenders(ctx context.Context) (result []*Tender, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedTenders(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.TendersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryTenders().All(ctx)
	}
	return result, err
}

func (t *Tender) Area(ctx context.Context) (*Area, error) {
	result, err := t.Edges.AreaOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryArea().Only(ctx)
	}
	return result, err
}

func (t *Tender) Customer(ctx context.Context) (*Customer, error) {
	result, err := t.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCustomer().Only(ctx)
	}
	return result, err
}
