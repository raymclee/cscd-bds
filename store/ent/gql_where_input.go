// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"
)

// AreaWhereInput represents a where input for filtering Area queries.
type AreaWhereInput struct {
	Predicates []predicate.Area  `json:"-"`
	Not        *AreaWhereInput   `json:"not,omitempty"`
	Or         []*AreaWhereInput `json:"or,omitempty"`
	And        []*AreaWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "customers" edge predicates.
	HasCustomers     *bool                 `json:"hasCustomers,omitempty"`
	HasCustomersWith []*CustomerWhereInput `json:"hasCustomersWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "sales" edge predicates.
	HasSales     *bool             `json:"hasSales,omitempty"`
	HasSalesWith []*UserWhereInput `json:"hasSalesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AreaWhereInput) AddPredicates(predicates ...predicate.Area) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AreaWhereInput filter on the AreaQuery builder.
func (i *AreaWhereInput) Filter(q *AreaQuery) (*AreaQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAreaWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAreaWhereInput is returned in case the AreaWhereInput is empty.
var ErrEmptyAreaWhereInput = errors.New("ent: empty predicate AreaWhereInput")

// P returns a predicate for filtering areas.
// An error is returned if the input is empty or invalid.
func (i *AreaWhereInput) P() (predicate.Area, error) {
	var predicates []predicate.Area
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, area.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Area, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, area.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Area, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, area.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, area.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, area.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, area.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, area.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, area.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, area.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, area.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, area.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, area.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, area.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, area.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, area.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, area.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, area.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, area.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, area.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, area.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, area.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, area.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, area.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, area.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, area.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, area.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, area.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, area.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, area.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, area.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, area.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, area.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, area.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, area.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, area.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, area.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, area.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, area.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, area.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, area.NameContainsFold(*i.NameContainsFold))
	}
	if i.Code != nil {
		predicates = append(predicates, area.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, area.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, area.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, area.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, area.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, area.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, area.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, area.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, area.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, area.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, area.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, area.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, area.CodeContainsFold(*i.CodeContainsFold))
	}

	if i.HasCustomers != nil {
		p := area.HasCustomers()
		if !*i.HasCustomers {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomersWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomersWith))
		for _, w := range i.HasCustomersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasCustomersWith(with...))
	}
	if i.HasTenders != nil {
		p := area.HasTenders()
		if !*i.HasTenders {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasTendersWith(with...))
	}
	if i.HasSales != nil {
		p := area.HasSales()
		if !*i.HasSales {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSalesWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasSalesWith))
		for _, w := range i.HasSalesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSalesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasSalesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAreaWhereInput
	case 1:
		return predicates[0], nil
	default:
		return area.And(predicates...), nil
	}
}

// CityWhereInput represents a where input for filtering City queries.
type CityWhereInput struct {
	Predicates []predicate.City  `json:"-"`
	Not        *CityWhereInput   `json:"not,omitempty"`
	Or         []*CityWhereInput `json:"or,omitempty"`
	And        []*CityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "prov_code" field predicates.
	ProvCode      *int  `json:"provCode,omitempty"`
	ProvCodeNEQ   *int  `json:"provCodeNEQ,omitempty"`
	ProvCodeIn    []int `json:"provCodeIn,omitempty"`
	ProvCodeNotIn []int `json:"provCodeNotIn,omitempty"`
	ProvCodeGT    *int  `json:"provCodeGT,omitempty"`
	ProvCodeGTE   *int  `json:"provCodeGTE,omitempty"`
	ProvCodeLT    *int  `json:"provCodeLT,omitempty"`
	ProvCodeLTE   *int  `json:"provCodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "province_id" field predicates.
	ProvinceID      *xid.ID  `json:"provinceID,omitempty"`
	ProvinceIDNEQ   *xid.ID  `json:"provinceIDNEQ,omitempty"`
	ProvinceIDIn    []xid.ID `json:"provinceIDIn,omitempty"`
	ProvinceIDNotIn []xid.ID `json:"provinceIDNotIn,omitempty"`
	ProvinceIDGT    *xid.ID  `json:"provinceIDGT,omitempty"`
	ProvinceIDGTE   *xid.ID  `json:"provinceIDGTE,omitempty"`
	ProvinceIDLT    *xid.ID  `json:"provinceIDLT,omitempty"`
	ProvinceIDLTE   *xid.ID  `json:"provinceIDLTE,omitempty"`

	// "districts" edge predicates.
	HasDistricts     *bool                 `json:"hasDistricts,omitempty"`
	HasDistrictsWith []*DistrictWhereInput `json:"hasDistrictsWith,omitempty"`

	// "province" edge predicates.
	HasProvince     *bool                 `json:"hasProvince,omitempty"`
	HasProvinceWith []*ProvinceWhereInput `json:"hasProvinceWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CityWhereInput) AddPredicates(predicates ...predicate.City) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CityWhereInput filter on the CityQuery builder.
func (i *CityWhereInput) Filter(q *CityQuery) (*CityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCityWhereInput is returned in case the CityWhereInput is empty.
var ErrEmptyCityWhereInput = errors.New("ent: empty predicate CityWhereInput")

// P returns a predicate for filtering cities.
// An error is returned if the input is empty or invalid.
func (i *CityWhereInput) P() (predicate.City, error) {
	var predicates []predicate.City
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, city.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.City, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, city.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.City, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, city.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, city.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, city.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, city.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, city.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, city.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, city.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, city.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, city.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, city.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, city.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, city.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, city.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, city.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, city.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, city.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, city.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, city.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, city.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, city.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, city.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, city.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, city.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, city.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, city.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, city.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, city.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, city.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, city.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, city.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, city.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, city.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, city.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.ProvCode != nil {
		predicates = append(predicates, city.ProvCodeEQ(*i.ProvCode))
	}
	if i.ProvCodeNEQ != nil {
		predicates = append(predicates, city.ProvCodeNEQ(*i.ProvCodeNEQ))
	}
	if len(i.ProvCodeIn) > 0 {
		predicates = append(predicates, city.ProvCodeIn(i.ProvCodeIn...))
	}
	if len(i.ProvCodeNotIn) > 0 {
		predicates = append(predicates, city.ProvCodeNotIn(i.ProvCodeNotIn...))
	}
	if i.ProvCodeGT != nil {
		predicates = append(predicates, city.ProvCodeGT(*i.ProvCodeGT))
	}
	if i.ProvCodeGTE != nil {
		predicates = append(predicates, city.ProvCodeGTE(*i.ProvCodeGTE))
	}
	if i.ProvCodeLT != nil {
		predicates = append(predicates, city.ProvCodeLT(*i.ProvCodeLT))
	}
	if i.ProvCodeLTE != nil {
		predicates = append(predicates, city.ProvCodeLTE(*i.ProvCodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, city.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, city.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, city.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, city.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, city.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, city.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, city.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, city.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, city.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, city.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, city.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, city.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, city.NameContainsFold(*i.NameContainsFold))
	}
	if i.ProvinceID != nil {
		predicates = append(predicates, city.ProvinceIDEQ(*i.ProvinceID))
	}
	if i.ProvinceIDNEQ != nil {
		predicates = append(predicates, city.ProvinceIDNEQ(*i.ProvinceIDNEQ))
	}
	if len(i.ProvinceIDIn) > 0 {
		predicates = append(predicates, city.ProvinceIDIn(i.ProvinceIDIn...))
	}
	if len(i.ProvinceIDNotIn) > 0 {
		predicates = append(predicates, city.ProvinceIDNotIn(i.ProvinceIDNotIn...))
	}
	if i.ProvinceIDGT != nil {
		predicates = append(predicates, city.ProvinceIDGT(*i.ProvinceIDGT))
	}
	if i.ProvinceIDGTE != nil {
		predicates = append(predicates, city.ProvinceIDGTE(*i.ProvinceIDGTE))
	}
	if i.ProvinceIDLT != nil {
		predicates = append(predicates, city.ProvinceIDLT(*i.ProvinceIDLT))
	}
	if i.ProvinceIDLTE != nil {
		predicates = append(predicates, city.ProvinceIDLTE(*i.ProvinceIDLTE))
	}

	if i.HasDistricts != nil {
		p := city.HasDistricts()
		if !*i.HasDistricts {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictsWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictsWith))
		for _, w := range i.HasDistrictsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasDistrictsWith(with...))
	}
	if i.HasProvince != nil {
		p := city.HasProvince()
		if !*i.HasProvince {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvinceWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvinceWith))
		for _, w := range i.HasProvinceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvinceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasProvinceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return city.And(predicates...), nil
	}
}

// CountryWhereInput represents a where input for filtering Country queries.
type CountryWhereInput struct {
	Predicates []predicate.Country  `json:"-"`
	Not        *CountryWhereInput   `json:"not,omitempty"`
	Or         []*CountryWhereInput `json:"or,omitempty"`
	And        []*CountryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "provinces" edge predicates.
	HasProvinces     *bool                 `json:"hasProvinces,omitempty"`
	HasProvincesWith []*ProvinceWhereInput `json:"hasProvincesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CountryWhereInput) AddPredicates(predicates ...predicate.Country) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CountryWhereInput filter on the CountryQuery builder.
func (i *CountryWhereInput) Filter(q *CountryQuery) (*CountryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCountryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCountryWhereInput is returned in case the CountryWhereInput is empty.
var ErrEmptyCountryWhereInput = errors.New("ent: empty predicate CountryWhereInput")

// P returns a predicate for filtering countries.
// An error is returned if the input is empty or invalid.
func (i *CountryWhereInput) P() (predicate.Country, error) {
	var predicates []predicate.Country
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, country.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Country, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, country.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Country, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, country.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, country.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, country.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, country.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, country.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, country.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, country.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, country.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, country.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, country.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, country.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, country.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, country.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, country.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, country.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, country.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, country.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, country.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, country.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, country.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, country.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, country.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, country.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, country.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, country.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, country.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, country.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, country.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, country.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, country.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, country.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, country.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, country.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, country.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, country.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, country.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, country.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, country.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, country.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, country.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, country.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, country.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, country.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, country.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, country.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, country.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasProvinces != nil {
		p := country.HasProvinces()
		if !*i.HasProvinces {
			p = country.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvincesWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvincesWith))
		for _, w := range i.HasProvincesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvincesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, country.HasProvincesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCountryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return country.And(predicates...), nil
	}
}

// CustomerWhereInput represents a where input for filtering Customer queries.
type CustomerWhereInput struct {
	Predicates []predicate.Customer  `json:"-"`
	Not        *CustomerWhereInput   `json:"not,omitempty"`
	Or         []*CustomerWhereInput `json:"or,omitempty"`
	And        []*CustomerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "owner_type" field predicates.
	OwnerType       *int8  `json:"ownerType,omitempty"`
	OwnerTypeNEQ    *int8  `json:"ownerTypeNEQ,omitempty"`
	OwnerTypeIn     []int8 `json:"ownerTypeIn,omitempty"`
	OwnerTypeNotIn  []int8 `json:"ownerTypeNotIn,omitempty"`
	OwnerTypeGT     *int8  `json:"ownerTypeGT,omitempty"`
	OwnerTypeGTE    *int8  `json:"ownerTypeGTE,omitempty"`
	OwnerTypeLT     *int8  `json:"ownerTypeLT,omitempty"`
	OwnerTypeLTE    *int8  `json:"ownerTypeLTE,omitempty"`
	OwnerTypeIsNil  bool   `json:"ownerTypeIsNil,omitempty"`
	OwnerTypeNotNil bool   `json:"ownerTypeNotNil,omitempty"`

	// "industry" field predicates.
	Industry      *int8  `json:"industry,omitempty"`
	IndustryNEQ   *int8  `json:"industryNEQ,omitempty"`
	IndustryIn    []int8 `json:"industryIn,omitempty"`
	IndustryNotIn []int8 `json:"industryNotIn,omitempty"`
	IndustryGT    *int8  `json:"industryGT,omitempty"`
	IndustryGTE   *int8  `json:"industryGTE,omitempty"`
	IndustryLT    *int8  `json:"industryLT,omitempty"`
	IndustryLTE   *int8  `json:"industryLTE,omitempty"`

	// "size" field predicates.
	Size       *int8  `json:"size,omitempty"`
	SizeNEQ    *int8  `json:"sizeNEQ,omitempty"`
	SizeIn     []int8 `json:"sizeIn,omitempty"`
	SizeNotIn  []int8 `json:"sizeNotIn,omitempty"`
	SizeGT     *int8  `json:"sizeGT,omitempty"`
	SizeGTE    *int8  `json:"sizeGTE,omitempty"`
	SizeLT     *int8  `json:"sizeLT,omitempty"`
	SizeLTE    *int8  `json:"sizeLTE,omitempty"`
	SizeIsNil  bool   `json:"sizeIsNil,omitempty"`
	SizeNotNil bool   `json:"sizeNotNil,omitempty"`

	// "contact_person" field predicates.
	ContactPerson             *string  `json:"contactPerson,omitempty"`
	ContactPersonNEQ          *string  `json:"contactPersonNEQ,omitempty"`
	ContactPersonIn           []string `json:"contactPersonIn,omitempty"`
	ContactPersonNotIn        []string `json:"contactPersonNotIn,omitempty"`
	ContactPersonGT           *string  `json:"contactPersonGT,omitempty"`
	ContactPersonGTE          *string  `json:"contactPersonGTE,omitempty"`
	ContactPersonLT           *string  `json:"contactPersonLT,omitempty"`
	ContactPersonLTE          *string  `json:"contactPersonLTE,omitempty"`
	ContactPersonContains     *string  `json:"contactPersonContains,omitempty"`
	ContactPersonHasPrefix    *string  `json:"contactPersonHasPrefix,omitempty"`
	ContactPersonHasSuffix    *string  `json:"contactPersonHasSuffix,omitempty"`
	ContactPersonIsNil        bool     `json:"contactPersonIsNil,omitempty"`
	ContactPersonNotNil       bool     `json:"contactPersonNotNil,omitempty"`
	ContactPersonEqualFold    *string  `json:"contactPersonEqualFold,omitempty"`
	ContactPersonContainsFold *string  `json:"contactPersonContainsFold,omitempty"`

	// "contact_person_position" field predicates.
	ContactPersonPosition             *string  `json:"contactPersonPosition,omitempty"`
	ContactPersonPositionNEQ          *string  `json:"contactPersonPositionNEQ,omitempty"`
	ContactPersonPositionIn           []string `json:"contactPersonPositionIn,omitempty"`
	ContactPersonPositionNotIn        []string `json:"contactPersonPositionNotIn,omitempty"`
	ContactPersonPositionGT           *string  `json:"contactPersonPositionGT,omitempty"`
	ContactPersonPositionGTE          *string  `json:"contactPersonPositionGTE,omitempty"`
	ContactPersonPositionLT           *string  `json:"contactPersonPositionLT,omitempty"`
	ContactPersonPositionLTE          *string  `json:"contactPersonPositionLTE,omitempty"`
	ContactPersonPositionContains     *string  `json:"contactPersonPositionContains,omitempty"`
	ContactPersonPositionHasPrefix    *string  `json:"contactPersonPositionHasPrefix,omitempty"`
	ContactPersonPositionHasSuffix    *string  `json:"contactPersonPositionHasSuffix,omitempty"`
	ContactPersonPositionIsNil        bool     `json:"contactPersonPositionIsNil,omitempty"`
	ContactPersonPositionNotNil       bool     `json:"contactPersonPositionNotNil,omitempty"`
	ContactPersonPositionEqualFold    *string  `json:"contactPersonPositionEqualFold,omitempty"`
	ContactPersonPositionContainsFold *string  `json:"contactPersonPositionContainsFold,omitempty"`

	// "contact_person_phone" field predicates.
	ContactPersonPhone             *string  `json:"contactPersonPhone,omitempty"`
	ContactPersonPhoneNEQ          *string  `json:"contactPersonPhoneNEQ,omitempty"`
	ContactPersonPhoneIn           []string `json:"contactPersonPhoneIn,omitempty"`
	ContactPersonPhoneNotIn        []string `json:"contactPersonPhoneNotIn,omitempty"`
	ContactPersonPhoneGT           *string  `json:"contactPersonPhoneGT,omitempty"`
	ContactPersonPhoneGTE          *string  `json:"contactPersonPhoneGTE,omitempty"`
	ContactPersonPhoneLT           *string  `json:"contactPersonPhoneLT,omitempty"`
	ContactPersonPhoneLTE          *string  `json:"contactPersonPhoneLTE,omitempty"`
	ContactPersonPhoneContains     *string  `json:"contactPersonPhoneContains,omitempty"`
	ContactPersonPhoneHasPrefix    *string  `json:"contactPersonPhoneHasPrefix,omitempty"`
	ContactPersonPhoneHasSuffix    *string  `json:"contactPersonPhoneHasSuffix,omitempty"`
	ContactPersonPhoneIsNil        bool     `json:"contactPersonPhoneIsNil,omitempty"`
	ContactPersonPhoneNotNil       bool     `json:"contactPersonPhoneNotNil,omitempty"`
	ContactPersonPhoneEqualFold    *string  `json:"contactPersonPhoneEqualFold,omitempty"`
	ContactPersonPhoneContainsFold *string  `json:"contactPersonPhoneContainsFold,omitempty"`

	// "contact_person_email" field predicates.
	ContactPersonEmail             *string  `json:"contactPersonEmail,omitempty"`
	ContactPersonEmailNEQ          *string  `json:"contactPersonEmailNEQ,omitempty"`
	ContactPersonEmailIn           []string `json:"contactPersonEmailIn,omitempty"`
	ContactPersonEmailNotIn        []string `json:"contactPersonEmailNotIn,omitempty"`
	ContactPersonEmailGT           *string  `json:"contactPersonEmailGT,omitempty"`
	ContactPersonEmailGTE          *string  `json:"contactPersonEmailGTE,omitempty"`
	ContactPersonEmailLT           *string  `json:"contactPersonEmailLT,omitempty"`
	ContactPersonEmailLTE          *string  `json:"contactPersonEmailLTE,omitempty"`
	ContactPersonEmailContains     *string  `json:"contactPersonEmailContains,omitempty"`
	ContactPersonEmailHasPrefix    *string  `json:"contactPersonEmailHasPrefix,omitempty"`
	ContactPersonEmailHasSuffix    *string  `json:"contactPersonEmailHasSuffix,omitempty"`
	ContactPersonEmailIsNil        bool     `json:"contactPersonEmailIsNil,omitempty"`
	ContactPersonEmailNotNil       bool     `json:"contactPersonEmailNotNil,omitempty"`
	ContactPersonEmailEqualFold    *string  `json:"contactPersonEmailEqualFold,omitempty"`
	ContactPersonEmailContainsFold *string  `json:"contactPersonEmailContainsFold,omitempty"`

	// "area_id" field predicates.
	AreaID      *xid.ID  `json:"areaID,omitempty"`
	AreaIDNEQ   *xid.ID  `json:"areaIDNEQ,omitempty"`
	AreaIDIn    []xid.ID `json:"areaIDIn,omitempty"`
	AreaIDNotIn []xid.ID `json:"areaIDNotIn,omitempty"`
	AreaIDGT    *xid.ID  `json:"areaIDGT,omitempty"`
	AreaIDGTE   *xid.ID  `json:"areaIDGTE,omitempty"`
	AreaIDLT    *xid.ID  `json:"areaIDLT,omitempty"`
	AreaIDLTE   *xid.ID  `json:"areaIDLTE,omitempty"`

	// "sales_id" field predicates.
	SalesID       *xid.ID  `json:"salesID,omitempty"`
	SalesIDNEQ    *xid.ID  `json:"salesIDNEQ,omitempty"`
	SalesIDIn     []xid.ID `json:"salesIDIn,omitempty"`
	SalesIDNotIn  []xid.ID `json:"salesIDNotIn,omitempty"`
	SalesIDGT     *xid.ID  `json:"salesIDGT,omitempty"`
	SalesIDGTE    *xid.ID  `json:"salesIDGTE,omitempty"`
	SalesIDLT     *xid.ID  `json:"salesIDLT,omitempty"`
	SalesIDLTE    *xid.ID  `json:"salesIDLTE,omitempty"`
	SalesIDIsNil  bool     `json:"salesIDIsNil,omitempty"`
	SalesIDNotNil bool     `json:"salesIDNotNil,omitempty"`

	// "created_by_user_id" field predicates.
	CreatedByUserID      *xid.ID  `json:"createdByUserID,omitempty"`
	CreatedByUserIDNEQ   *xid.ID  `json:"createdByUserIDNEQ,omitempty"`
	CreatedByUserIDIn    []xid.ID `json:"createdByUserIDIn,omitempty"`
	CreatedByUserIDNotIn []xid.ID `json:"createdByUserIDNotIn,omitempty"`
	CreatedByUserIDGT    *xid.ID  `json:"createdByUserIDGT,omitempty"`
	CreatedByUserIDGTE   *xid.ID  `json:"createdByUserIDGTE,omitempty"`
	CreatedByUserIDLT    *xid.ID  `json:"createdByUserIDLT,omitempty"`
	CreatedByUserIDLTE   *xid.ID  `json:"createdByUserIDLTE,omitempty"`

	// "area" edge predicates.
	HasArea     *bool             `json:"hasArea,omitempty"`
	HasAreaWith []*AreaWhereInput `json:"hasAreaWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "sales" edge predicates.
	HasSales     *bool             `json:"hasSales,omitempty"`
	HasSalesWith []*UserWhereInput `json:"hasSalesWith,omitempty"`

	// "created_by" edge predicates.
	HasCreatedBy     *bool             `json:"hasCreatedBy,omitempty"`
	HasCreatedByWith []*UserWhereInput `json:"hasCreatedByWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CustomerWhereInput) AddPredicates(predicates ...predicate.Customer) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CustomerWhereInput filter on the CustomerQuery builder.
func (i *CustomerWhereInput) Filter(q *CustomerQuery) (*CustomerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCustomerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCustomerWhereInput is returned in case the CustomerWhereInput is empty.
var ErrEmptyCustomerWhereInput = errors.New("ent: empty predicate CustomerWhereInput")

// P returns a predicate for filtering customers.
// An error is returned if the input is empty or invalid.
func (i *CustomerWhereInput) P() (predicate.Customer, error) {
	var predicates []predicate.Customer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, customer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Customer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, customer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Customer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, customer.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, customer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, customer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, customer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, customer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, customer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, customer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, customer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, customer.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, customer.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, customer.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, customer.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, customer.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, customer.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, customer.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, customer.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, customer.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, customer.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, customer.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, customer.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, customer.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, customer.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, customer.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, customer.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, customer.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, customer.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, customer.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, customer.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, customer.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, customer.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, customer.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, customer.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, customer.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, customer.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, customer.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, customer.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, customer.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, customer.NameContainsFold(*i.NameContainsFold))
	}
	if i.OwnerType != nil {
		predicates = append(predicates, customer.OwnerTypeEQ(*i.OwnerType))
	}
	if i.OwnerTypeNEQ != nil {
		predicates = append(predicates, customer.OwnerTypeNEQ(*i.OwnerTypeNEQ))
	}
	if len(i.OwnerTypeIn) > 0 {
		predicates = append(predicates, customer.OwnerTypeIn(i.OwnerTypeIn...))
	}
	if len(i.OwnerTypeNotIn) > 0 {
		predicates = append(predicates, customer.OwnerTypeNotIn(i.OwnerTypeNotIn...))
	}
	if i.OwnerTypeGT != nil {
		predicates = append(predicates, customer.OwnerTypeGT(*i.OwnerTypeGT))
	}
	if i.OwnerTypeGTE != nil {
		predicates = append(predicates, customer.OwnerTypeGTE(*i.OwnerTypeGTE))
	}
	if i.OwnerTypeLT != nil {
		predicates = append(predicates, customer.OwnerTypeLT(*i.OwnerTypeLT))
	}
	if i.OwnerTypeLTE != nil {
		predicates = append(predicates, customer.OwnerTypeLTE(*i.OwnerTypeLTE))
	}
	if i.OwnerTypeIsNil {
		predicates = append(predicates, customer.OwnerTypeIsNil())
	}
	if i.OwnerTypeNotNil {
		predicates = append(predicates, customer.OwnerTypeNotNil())
	}
	if i.Industry != nil {
		predicates = append(predicates, customer.IndustryEQ(*i.Industry))
	}
	if i.IndustryNEQ != nil {
		predicates = append(predicates, customer.IndustryNEQ(*i.IndustryNEQ))
	}
	if len(i.IndustryIn) > 0 {
		predicates = append(predicates, customer.IndustryIn(i.IndustryIn...))
	}
	if len(i.IndustryNotIn) > 0 {
		predicates = append(predicates, customer.IndustryNotIn(i.IndustryNotIn...))
	}
	if i.IndustryGT != nil {
		predicates = append(predicates, customer.IndustryGT(*i.IndustryGT))
	}
	if i.IndustryGTE != nil {
		predicates = append(predicates, customer.IndustryGTE(*i.IndustryGTE))
	}
	if i.IndustryLT != nil {
		predicates = append(predicates, customer.IndustryLT(*i.IndustryLT))
	}
	if i.IndustryLTE != nil {
		predicates = append(predicates, customer.IndustryLTE(*i.IndustryLTE))
	}
	if i.Size != nil {
		predicates = append(predicates, customer.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, customer.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, customer.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, customer.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, customer.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, customer.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, customer.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, customer.SizeLTE(*i.SizeLTE))
	}
	if i.SizeIsNil {
		predicates = append(predicates, customer.SizeIsNil())
	}
	if i.SizeNotNil {
		predicates = append(predicates, customer.SizeNotNil())
	}
	if i.ContactPerson != nil {
		predicates = append(predicates, customer.ContactPersonEQ(*i.ContactPerson))
	}
	if i.ContactPersonNEQ != nil {
		predicates = append(predicates, customer.ContactPersonNEQ(*i.ContactPersonNEQ))
	}
	if len(i.ContactPersonIn) > 0 {
		predicates = append(predicates, customer.ContactPersonIn(i.ContactPersonIn...))
	}
	if len(i.ContactPersonNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonNotIn(i.ContactPersonNotIn...))
	}
	if i.ContactPersonGT != nil {
		predicates = append(predicates, customer.ContactPersonGT(*i.ContactPersonGT))
	}
	if i.ContactPersonGTE != nil {
		predicates = append(predicates, customer.ContactPersonGTE(*i.ContactPersonGTE))
	}
	if i.ContactPersonLT != nil {
		predicates = append(predicates, customer.ContactPersonLT(*i.ContactPersonLT))
	}
	if i.ContactPersonLTE != nil {
		predicates = append(predicates, customer.ContactPersonLTE(*i.ContactPersonLTE))
	}
	if i.ContactPersonContains != nil {
		predicates = append(predicates, customer.ContactPersonContains(*i.ContactPersonContains))
	}
	if i.ContactPersonHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonHasPrefix(*i.ContactPersonHasPrefix))
	}
	if i.ContactPersonHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonHasSuffix(*i.ContactPersonHasSuffix))
	}
	if i.ContactPersonIsNil {
		predicates = append(predicates, customer.ContactPersonIsNil())
	}
	if i.ContactPersonNotNil {
		predicates = append(predicates, customer.ContactPersonNotNil())
	}
	if i.ContactPersonEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonEqualFold(*i.ContactPersonEqualFold))
	}
	if i.ContactPersonContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonContainsFold(*i.ContactPersonContainsFold))
	}
	if i.ContactPersonPosition != nil {
		predicates = append(predicates, customer.ContactPersonPositionEQ(*i.ContactPersonPosition))
	}
	if i.ContactPersonPositionNEQ != nil {
		predicates = append(predicates, customer.ContactPersonPositionNEQ(*i.ContactPersonPositionNEQ))
	}
	if len(i.ContactPersonPositionIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPositionIn(i.ContactPersonPositionIn...))
	}
	if len(i.ContactPersonPositionNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPositionNotIn(i.ContactPersonPositionNotIn...))
	}
	if i.ContactPersonPositionGT != nil {
		predicates = append(predicates, customer.ContactPersonPositionGT(*i.ContactPersonPositionGT))
	}
	if i.ContactPersonPositionGTE != nil {
		predicates = append(predicates, customer.ContactPersonPositionGTE(*i.ContactPersonPositionGTE))
	}
	if i.ContactPersonPositionLT != nil {
		predicates = append(predicates, customer.ContactPersonPositionLT(*i.ContactPersonPositionLT))
	}
	if i.ContactPersonPositionLTE != nil {
		predicates = append(predicates, customer.ContactPersonPositionLTE(*i.ContactPersonPositionLTE))
	}
	if i.ContactPersonPositionContains != nil {
		predicates = append(predicates, customer.ContactPersonPositionContains(*i.ContactPersonPositionContains))
	}
	if i.ContactPersonPositionHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonPositionHasPrefix(*i.ContactPersonPositionHasPrefix))
	}
	if i.ContactPersonPositionHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonPositionHasSuffix(*i.ContactPersonPositionHasSuffix))
	}
	if i.ContactPersonPositionIsNil {
		predicates = append(predicates, customer.ContactPersonPositionIsNil())
	}
	if i.ContactPersonPositionNotNil {
		predicates = append(predicates, customer.ContactPersonPositionNotNil())
	}
	if i.ContactPersonPositionEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonPositionEqualFold(*i.ContactPersonPositionEqualFold))
	}
	if i.ContactPersonPositionContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonPositionContainsFold(*i.ContactPersonPositionContainsFold))
	}
	if i.ContactPersonPhone != nil {
		predicates = append(predicates, customer.ContactPersonPhoneEQ(*i.ContactPersonPhone))
	}
	if i.ContactPersonPhoneNEQ != nil {
		predicates = append(predicates, customer.ContactPersonPhoneNEQ(*i.ContactPersonPhoneNEQ))
	}
	if len(i.ContactPersonPhoneIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPhoneIn(i.ContactPersonPhoneIn...))
	}
	if len(i.ContactPersonPhoneNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPhoneNotIn(i.ContactPersonPhoneNotIn...))
	}
	if i.ContactPersonPhoneGT != nil {
		predicates = append(predicates, customer.ContactPersonPhoneGT(*i.ContactPersonPhoneGT))
	}
	if i.ContactPersonPhoneGTE != nil {
		predicates = append(predicates, customer.ContactPersonPhoneGTE(*i.ContactPersonPhoneGTE))
	}
	if i.ContactPersonPhoneLT != nil {
		predicates = append(predicates, customer.ContactPersonPhoneLT(*i.ContactPersonPhoneLT))
	}
	if i.ContactPersonPhoneLTE != nil {
		predicates = append(predicates, customer.ContactPersonPhoneLTE(*i.ContactPersonPhoneLTE))
	}
	if i.ContactPersonPhoneContains != nil {
		predicates = append(predicates, customer.ContactPersonPhoneContains(*i.ContactPersonPhoneContains))
	}
	if i.ContactPersonPhoneHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonPhoneHasPrefix(*i.ContactPersonPhoneHasPrefix))
	}
	if i.ContactPersonPhoneHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonPhoneHasSuffix(*i.ContactPersonPhoneHasSuffix))
	}
	if i.ContactPersonPhoneIsNil {
		predicates = append(predicates, customer.ContactPersonPhoneIsNil())
	}
	if i.ContactPersonPhoneNotNil {
		predicates = append(predicates, customer.ContactPersonPhoneNotNil())
	}
	if i.ContactPersonPhoneEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonPhoneEqualFold(*i.ContactPersonPhoneEqualFold))
	}
	if i.ContactPersonPhoneContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonPhoneContainsFold(*i.ContactPersonPhoneContainsFold))
	}
	if i.ContactPersonEmail != nil {
		predicates = append(predicates, customer.ContactPersonEmailEQ(*i.ContactPersonEmail))
	}
	if i.ContactPersonEmailNEQ != nil {
		predicates = append(predicates, customer.ContactPersonEmailNEQ(*i.ContactPersonEmailNEQ))
	}
	if len(i.ContactPersonEmailIn) > 0 {
		predicates = append(predicates, customer.ContactPersonEmailIn(i.ContactPersonEmailIn...))
	}
	if len(i.ContactPersonEmailNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonEmailNotIn(i.ContactPersonEmailNotIn...))
	}
	if i.ContactPersonEmailGT != nil {
		predicates = append(predicates, customer.ContactPersonEmailGT(*i.ContactPersonEmailGT))
	}
	if i.ContactPersonEmailGTE != nil {
		predicates = append(predicates, customer.ContactPersonEmailGTE(*i.ContactPersonEmailGTE))
	}
	if i.ContactPersonEmailLT != nil {
		predicates = append(predicates, customer.ContactPersonEmailLT(*i.ContactPersonEmailLT))
	}
	if i.ContactPersonEmailLTE != nil {
		predicates = append(predicates, customer.ContactPersonEmailLTE(*i.ContactPersonEmailLTE))
	}
	if i.ContactPersonEmailContains != nil {
		predicates = append(predicates, customer.ContactPersonEmailContains(*i.ContactPersonEmailContains))
	}
	if i.ContactPersonEmailHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonEmailHasPrefix(*i.ContactPersonEmailHasPrefix))
	}
	if i.ContactPersonEmailHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonEmailHasSuffix(*i.ContactPersonEmailHasSuffix))
	}
	if i.ContactPersonEmailIsNil {
		predicates = append(predicates, customer.ContactPersonEmailIsNil())
	}
	if i.ContactPersonEmailNotNil {
		predicates = append(predicates, customer.ContactPersonEmailNotNil())
	}
	if i.ContactPersonEmailEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonEmailEqualFold(*i.ContactPersonEmailEqualFold))
	}
	if i.ContactPersonEmailContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonEmailContainsFold(*i.ContactPersonEmailContainsFold))
	}
	if i.AreaID != nil {
		predicates = append(predicates, customer.AreaIDEQ(*i.AreaID))
	}
	if i.AreaIDNEQ != nil {
		predicates = append(predicates, customer.AreaIDNEQ(*i.AreaIDNEQ))
	}
	if len(i.AreaIDIn) > 0 {
		predicates = append(predicates, customer.AreaIDIn(i.AreaIDIn...))
	}
	if len(i.AreaIDNotIn) > 0 {
		predicates = append(predicates, customer.AreaIDNotIn(i.AreaIDNotIn...))
	}
	if i.AreaIDGT != nil {
		predicates = append(predicates, customer.AreaIDGT(*i.AreaIDGT))
	}
	if i.AreaIDGTE != nil {
		predicates = append(predicates, customer.AreaIDGTE(*i.AreaIDGTE))
	}
	if i.AreaIDLT != nil {
		predicates = append(predicates, customer.AreaIDLT(*i.AreaIDLT))
	}
	if i.AreaIDLTE != nil {
		predicates = append(predicates, customer.AreaIDLTE(*i.AreaIDLTE))
	}
	if i.SalesID != nil {
		predicates = append(predicates, customer.SalesIDEQ(*i.SalesID))
	}
	if i.SalesIDNEQ != nil {
		predicates = append(predicates, customer.SalesIDNEQ(*i.SalesIDNEQ))
	}
	if len(i.SalesIDIn) > 0 {
		predicates = append(predicates, customer.SalesIDIn(i.SalesIDIn...))
	}
	if len(i.SalesIDNotIn) > 0 {
		predicates = append(predicates, customer.SalesIDNotIn(i.SalesIDNotIn...))
	}
	if i.SalesIDGT != nil {
		predicates = append(predicates, customer.SalesIDGT(*i.SalesIDGT))
	}
	if i.SalesIDGTE != nil {
		predicates = append(predicates, customer.SalesIDGTE(*i.SalesIDGTE))
	}
	if i.SalesIDLT != nil {
		predicates = append(predicates, customer.SalesIDLT(*i.SalesIDLT))
	}
	if i.SalesIDLTE != nil {
		predicates = append(predicates, customer.SalesIDLTE(*i.SalesIDLTE))
	}
	if i.SalesIDIsNil {
		predicates = append(predicates, customer.SalesIDIsNil())
	}
	if i.SalesIDNotNil {
		predicates = append(predicates, customer.SalesIDNotNil())
	}
	if i.CreatedByUserID != nil {
		predicates = append(predicates, customer.CreatedByUserIDEQ(*i.CreatedByUserID))
	}
	if i.CreatedByUserIDNEQ != nil {
		predicates = append(predicates, customer.CreatedByUserIDNEQ(*i.CreatedByUserIDNEQ))
	}
	if len(i.CreatedByUserIDIn) > 0 {
		predicates = append(predicates, customer.CreatedByUserIDIn(i.CreatedByUserIDIn...))
	}
	if len(i.CreatedByUserIDNotIn) > 0 {
		predicates = append(predicates, customer.CreatedByUserIDNotIn(i.CreatedByUserIDNotIn...))
	}
	if i.CreatedByUserIDGT != nil {
		predicates = append(predicates, customer.CreatedByUserIDGT(*i.CreatedByUserIDGT))
	}
	if i.CreatedByUserIDGTE != nil {
		predicates = append(predicates, customer.CreatedByUserIDGTE(*i.CreatedByUserIDGTE))
	}
	if i.CreatedByUserIDLT != nil {
		predicates = append(predicates, customer.CreatedByUserIDLT(*i.CreatedByUserIDLT))
	}
	if i.CreatedByUserIDLTE != nil {
		predicates = append(predicates, customer.CreatedByUserIDLTE(*i.CreatedByUserIDLTE))
	}

	if i.HasArea != nil {
		p := customer.HasArea()
		if !*i.HasArea {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreaWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreaWith))
		for _, w := range i.HasAreaWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreaWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasAreaWith(with...))
	}
	if i.HasTenders != nil {
		p := customer.HasTenders()
		if !*i.HasTenders {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasTendersWith(with...))
	}
	if i.HasSales != nil {
		p := customer.HasSales()
		if !*i.HasSales {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSalesWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasSalesWith))
		for _, w := range i.HasSalesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSalesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasSalesWith(with...))
	}
	if i.HasCreatedBy != nil {
		p := customer.HasCreatedBy()
		if !*i.HasCreatedBy {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasCreatedByWith))
		for _, w := range i.HasCreatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasCreatedByWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCustomerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return customer.And(predicates...), nil
	}
}

// DistrictWhereInput represents a where input for filtering District queries.
type DistrictWhereInput struct {
	Predicates []predicate.District  `json:"-"`
	Not        *DistrictWhereInput   `json:"not,omitempty"`
	Or         []*DistrictWhereInput `json:"or,omitempty"`
	And        []*DistrictWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "prov_code" field predicates.
	ProvCode      *int  `json:"provCode,omitempty"`
	ProvCodeNEQ   *int  `json:"provCodeNEQ,omitempty"`
	ProvCodeIn    []int `json:"provCodeIn,omitempty"`
	ProvCodeNotIn []int `json:"provCodeNotIn,omitempty"`
	ProvCodeGT    *int  `json:"provCodeGT,omitempty"`
	ProvCodeGTE   *int  `json:"provCodeGTE,omitempty"`
	ProvCodeLT    *int  `json:"provCodeLT,omitempty"`
	ProvCodeLTE   *int  `json:"provCodeLTE,omitempty"`

	// "city_code" field predicates.
	CityCode      *int  `json:"cityCode,omitempty"`
	CityCodeNEQ   *int  `json:"cityCodeNEQ,omitempty"`
	CityCodeIn    []int `json:"cityCodeIn,omitempty"`
	CityCodeNotIn []int `json:"cityCodeNotIn,omitempty"`
	CityCodeGT    *int  `json:"cityCodeGT,omitempty"`
	CityCodeGTE   *int  `json:"cityCodeGTE,omitempty"`
	CityCodeLT    *int  `json:"cityCodeLT,omitempty"`
	CityCodeLTE   *int  `json:"cityCodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "province_id" field predicates.
	ProvinceID      *xid.ID  `json:"provinceID,omitempty"`
	ProvinceIDNEQ   *xid.ID  `json:"provinceIDNEQ,omitempty"`
	ProvinceIDIn    []xid.ID `json:"provinceIDIn,omitempty"`
	ProvinceIDNotIn []xid.ID `json:"provinceIDNotIn,omitempty"`
	ProvinceIDGT    *xid.ID  `json:"provinceIDGT,omitempty"`
	ProvinceIDGTE   *xid.ID  `json:"provinceIDGTE,omitempty"`
	ProvinceIDLT    *xid.ID  `json:"provinceIDLT,omitempty"`
	ProvinceIDLTE   *xid.ID  `json:"provinceIDLTE,omitempty"`

	// "city_id" field predicates.
	CityID       *xid.ID  `json:"cityID,omitempty"`
	CityIDNEQ    *xid.ID  `json:"cityIDNEQ,omitempty"`
	CityIDIn     []xid.ID `json:"cityIDIn,omitempty"`
	CityIDNotIn  []xid.ID `json:"cityIDNotIn,omitempty"`
	CityIDGT     *xid.ID  `json:"cityIDGT,omitempty"`
	CityIDGTE    *xid.ID  `json:"cityIDGTE,omitempty"`
	CityIDLT     *xid.ID  `json:"cityIDLT,omitempty"`
	CityIDLTE    *xid.ID  `json:"cityIDLTE,omitempty"`
	CityIDIsNil  bool     `json:"cityIDIsNil,omitempty"`
	CityIDNotNil bool     `json:"cityIDNotNil,omitempty"`

	// "province" edge predicates.
	HasProvince     *bool                 `json:"hasProvince,omitempty"`
	HasProvinceWith []*ProvinceWhereInput `json:"hasProvinceWith,omitempty"`

	// "city" edge predicates.
	HasCity     *bool             `json:"hasCity,omitempty"`
	HasCityWith []*CityWhereInput `json:"hasCityWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DistrictWhereInput) AddPredicates(predicates ...predicate.District) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DistrictWhereInput filter on the DistrictQuery builder.
func (i *DistrictWhereInput) Filter(q *DistrictQuery) (*DistrictQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDistrictWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDistrictWhereInput is returned in case the DistrictWhereInput is empty.
var ErrEmptyDistrictWhereInput = errors.New("ent: empty predicate DistrictWhereInput")

// P returns a predicate for filtering districts.
// An error is returned if the input is empty or invalid.
func (i *DistrictWhereInput) P() (predicate.District, error) {
	var predicates []predicate.District
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, district.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.District, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, district.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.District, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, district.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, district.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, district.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, district.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, district.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, district.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, district.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, district.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, district.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, district.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, district.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, district.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, district.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, district.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, district.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, district.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, district.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, district.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, district.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, district.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, district.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, district.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, district.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, district.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, district.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, district.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, district.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, district.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, district.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, district.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, district.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, district.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, district.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.ProvCode != nil {
		predicates = append(predicates, district.ProvCodeEQ(*i.ProvCode))
	}
	if i.ProvCodeNEQ != nil {
		predicates = append(predicates, district.ProvCodeNEQ(*i.ProvCodeNEQ))
	}
	if len(i.ProvCodeIn) > 0 {
		predicates = append(predicates, district.ProvCodeIn(i.ProvCodeIn...))
	}
	if len(i.ProvCodeNotIn) > 0 {
		predicates = append(predicates, district.ProvCodeNotIn(i.ProvCodeNotIn...))
	}
	if i.ProvCodeGT != nil {
		predicates = append(predicates, district.ProvCodeGT(*i.ProvCodeGT))
	}
	if i.ProvCodeGTE != nil {
		predicates = append(predicates, district.ProvCodeGTE(*i.ProvCodeGTE))
	}
	if i.ProvCodeLT != nil {
		predicates = append(predicates, district.ProvCodeLT(*i.ProvCodeLT))
	}
	if i.ProvCodeLTE != nil {
		predicates = append(predicates, district.ProvCodeLTE(*i.ProvCodeLTE))
	}
	if i.CityCode != nil {
		predicates = append(predicates, district.CityCodeEQ(*i.CityCode))
	}
	if i.CityCodeNEQ != nil {
		predicates = append(predicates, district.CityCodeNEQ(*i.CityCodeNEQ))
	}
	if len(i.CityCodeIn) > 0 {
		predicates = append(predicates, district.CityCodeIn(i.CityCodeIn...))
	}
	if len(i.CityCodeNotIn) > 0 {
		predicates = append(predicates, district.CityCodeNotIn(i.CityCodeNotIn...))
	}
	if i.CityCodeGT != nil {
		predicates = append(predicates, district.CityCodeGT(*i.CityCodeGT))
	}
	if i.CityCodeGTE != nil {
		predicates = append(predicates, district.CityCodeGTE(*i.CityCodeGTE))
	}
	if i.CityCodeLT != nil {
		predicates = append(predicates, district.CityCodeLT(*i.CityCodeLT))
	}
	if i.CityCodeLTE != nil {
		predicates = append(predicates, district.CityCodeLTE(*i.CityCodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, district.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, district.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, district.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, district.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, district.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, district.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, district.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, district.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, district.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, district.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, district.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, district.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, district.NameContainsFold(*i.NameContainsFold))
	}
	if i.ProvinceID != nil {
		predicates = append(predicates, district.ProvinceIDEQ(*i.ProvinceID))
	}
	if i.ProvinceIDNEQ != nil {
		predicates = append(predicates, district.ProvinceIDNEQ(*i.ProvinceIDNEQ))
	}
	if len(i.ProvinceIDIn) > 0 {
		predicates = append(predicates, district.ProvinceIDIn(i.ProvinceIDIn...))
	}
	if len(i.ProvinceIDNotIn) > 0 {
		predicates = append(predicates, district.ProvinceIDNotIn(i.ProvinceIDNotIn...))
	}
	if i.ProvinceIDGT != nil {
		predicates = append(predicates, district.ProvinceIDGT(*i.ProvinceIDGT))
	}
	if i.ProvinceIDGTE != nil {
		predicates = append(predicates, district.ProvinceIDGTE(*i.ProvinceIDGTE))
	}
	if i.ProvinceIDLT != nil {
		predicates = append(predicates, district.ProvinceIDLT(*i.ProvinceIDLT))
	}
	if i.ProvinceIDLTE != nil {
		predicates = append(predicates, district.ProvinceIDLTE(*i.ProvinceIDLTE))
	}
	if i.CityID != nil {
		predicates = append(predicates, district.CityIDEQ(*i.CityID))
	}
	if i.CityIDNEQ != nil {
		predicates = append(predicates, district.CityIDNEQ(*i.CityIDNEQ))
	}
	if len(i.CityIDIn) > 0 {
		predicates = append(predicates, district.CityIDIn(i.CityIDIn...))
	}
	if len(i.CityIDNotIn) > 0 {
		predicates = append(predicates, district.CityIDNotIn(i.CityIDNotIn...))
	}
	if i.CityIDGT != nil {
		predicates = append(predicates, district.CityIDGT(*i.CityIDGT))
	}
	if i.CityIDGTE != nil {
		predicates = append(predicates, district.CityIDGTE(*i.CityIDGTE))
	}
	if i.CityIDLT != nil {
		predicates = append(predicates, district.CityIDLT(*i.CityIDLT))
	}
	if i.CityIDLTE != nil {
		predicates = append(predicates, district.CityIDLTE(*i.CityIDLTE))
	}
	if i.CityIDIsNil {
		predicates = append(predicates, district.CityIDIsNil())
	}
	if i.CityIDNotNil {
		predicates = append(predicates, district.CityIDNotNil())
	}

	if i.HasProvince != nil {
		p := district.HasProvince()
		if !*i.HasProvince {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvinceWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvinceWith))
		for _, w := range i.HasProvinceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvinceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasProvinceWith(with...))
	}
	if i.HasCity != nil {
		p := district.HasCity()
		if !*i.HasCity {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCityWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCityWith))
		for _, w := range i.HasCityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasCityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDistrictWhereInput
	case 1:
		return predicates[0], nil
	default:
		return district.And(predicates...), nil
	}
}

// ProvinceWhereInput represents a where input for filtering Province queries.
type ProvinceWhereInput struct {
	Predicates []predicate.Province  `json:"-"`
	Not        *ProvinceWhereInput   `json:"not,omitempty"`
	Or         []*ProvinceWhereInput `json:"or,omitempty"`
	And        []*ProvinceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "country_id" field predicates.
	CountryID      *xid.ID  `json:"countryID,omitempty"`
	CountryIDNEQ   *xid.ID  `json:"countryIDNEQ,omitempty"`
	CountryIDIn    []xid.ID `json:"countryIDIn,omitempty"`
	CountryIDNotIn []xid.ID `json:"countryIDNotIn,omitempty"`
	CountryIDGT    *xid.ID  `json:"countryIDGT,omitempty"`
	CountryIDGTE   *xid.ID  `json:"countryIDGTE,omitempty"`
	CountryIDLT    *xid.ID  `json:"countryIDLT,omitempty"`
	CountryIDLTE   *xid.ID  `json:"countryIDLTE,omitempty"`

	// "districts" edge predicates.
	HasDistricts     *bool                 `json:"hasDistricts,omitempty"`
	HasDistrictsWith []*DistrictWhereInput `json:"hasDistrictsWith,omitempty"`

	// "cities" edge predicates.
	HasCities     *bool             `json:"hasCities,omitempty"`
	HasCitiesWith []*CityWhereInput `json:"hasCitiesWith,omitempty"`

	// "country" edge predicates.
	HasCountry     *bool                `json:"hasCountry,omitempty"`
	HasCountryWith []*CountryWhereInput `json:"hasCountryWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProvinceWhereInput) AddPredicates(predicates ...predicate.Province) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProvinceWhereInput filter on the ProvinceQuery builder.
func (i *ProvinceWhereInput) Filter(q *ProvinceQuery) (*ProvinceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProvinceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProvinceWhereInput is returned in case the ProvinceWhereInput is empty.
var ErrEmptyProvinceWhereInput = errors.New("ent: empty predicate ProvinceWhereInput")

// P returns a predicate for filtering provinces.
// An error is returned if the input is empty or invalid.
func (i *ProvinceWhereInput) P() (predicate.Province, error) {
	var predicates []predicate.Province
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, province.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Province, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, province.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Province, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, province.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, province.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, province.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, province.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, province.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, province.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, province.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, province.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, province.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, province.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, province.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, province.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, province.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, province.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, province.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, province.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, province.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, province.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, province.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, province.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, province.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, province.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, province.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, province.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, province.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, province.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, province.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, province.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, province.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, province.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, province.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, province.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, province.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, province.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, province.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, province.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, province.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, province.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, province.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, province.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, province.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, province.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, province.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, province.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, province.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, province.NameContainsFold(*i.NameContainsFold))
	}
	if i.CountryID != nil {
		predicates = append(predicates, province.CountryIDEQ(*i.CountryID))
	}
	if i.CountryIDNEQ != nil {
		predicates = append(predicates, province.CountryIDNEQ(*i.CountryIDNEQ))
	}
	if len(i.CountryIDIn) > 0 {
		predicates = append(predicates, province.CountryIDIn(i.CountryIDIn...))
	}
	if len(i.CountryIDNotIn) > 0 {
		predicates = append(predicates, province.CountryIDNotIn(i.CountryIDNotIn...))
	}
	if i.CountryIDGT != nil {
		predicates = append(predicates, province.CountryIDGT(*i.CountryIDGT))
	}
	if i.CountryIDGTE != nil {
		predicates = append(predicates, province.CountryIDGTE(*i.CountryIDGTE))
	}
	if i.CountryIDLT != nil {
		predicates = append(predicates, province.CountryIDLT(*i.CountryIDLT))
	}
	if i.CountryIDLTE != nil {
		predicates = append(predicates, province.CountryIDLTE(*i.CountryIDLTE))
	}

	if i.HasDistricts != nil {
		p := province.HasDistricts()
		if !*i.HasDistricts {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictsWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictsWith))
		for _, w := range i.HasDistrictsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasDistrictsWith(with...))
	}
	if i.HasCities != nil {
		p := province.HasCities()
		if !*i.HasCities {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCitiesWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCitiesWith))
		for _, w := range i.HasCitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasCitiesWith(with...))
	}
	if i.HasCountry != nil {
		p := province.HasCountry()
		if !*i.HasCountry {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCountryWith) > 0 {
		with := make([]predicate.Country, 0, len(i.HasCountryWith))
		for _, w := range i.HasCountryWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCountryWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasCountryWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProvinceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return province.And(predicates...), nil
	}
}

// TenderWhereInput represents a where input for filtering Tender queries.
type TenderWhereInput struct {
	Predicates []predicate.Tender  `json:"-"`
	Not        *TenderWhereInput   `json:"not,omitempty"`
	Or         []*TenderWhereInput `json:"or,omitempty"`
	And        []*TenderWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "status" field predicates.
	Status      *int8  `json:"status,omitempty"`
	StatusNEQ   *int8  `json:"statusNEQ,omitempty"`
	StatusIn    []int8 `json:"statusIn,omitempty"`
	StatusNotIn []int8 `json:"statusNotIn,omitempty"`
	StatusGT    *int8  `json:"statusGT,omitempty"`
	StatusGTE   *int8  `json:"statusGTE,omitempty"`
	StatusLT    *int8  `json:"statusLT,omitempty"`
	StatusLTE   *int8  `json:"statusLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "estimated_amount" field predicates.
	EstimatedAmount       *float64  `json:"estimatedAmount,omitempty"`
	EstimatedAmountNEQ    *float64  `json:"estimatedAmountNEQ,omitempty"`
	EstimatedAmountIn     []float64 `json:"estimatedAmountIn,omitempty"`
	EstimatedAmountNotIn  []float64 `json:"estimatedAmountNotIn,omitempty"`
	EstimatedAmountGT     *float64  `json:"estimatedAmountGT,omitempty"`
	EstimatedAmountGTE    *float64  `json:"estimatedAmountGTE,omitempty"`
	EstimatedAmountLT     *float64  `json:"estimatedAmountLT,omitempty"`
	EstimatedAmountLTE    *float64  `json:"estimatedAmountLTE,omitempty"`
	EstimatedAmountIsNil  bool      `json:"estimatedAmountIsNil,omitempty"`
	EstimatedAmountNotNil bool      `json:"estimatedAmountNotNil,omitempty"`

	// "tender_date" field predicates.
	TenderDate       *time.Time  `json:"tenderDate,omitempty"`
	TenderDateNEQ    *time.Time  `json:"tenderDateNEQ,omitempty"`
	TenderDateIn     []time.Time `json:"tenderDateIn,omitempty"`
	TenderDateNotIn  []time.Time `json:"tenderDateNotIn,omitempty"`
	TenderDateGT     *time.Time  `json:"tenderDateGT,omitempty"`
	TenderDateGTE    *time.Time  `json:"tenderDateGTE,omitempty"`
	TenderDateLT     *time.Time  `json:"tenderDateLT,omitempty"`
	TenderDateLTE    *time.Time  `json:"tenderDateLTE,omitempty"`
	TenderDateIsNil  bool        `json:"tenderDateIsNil,omitempty"`
	TenderDateNotNil bool        `json:"tenderDateNotNil,omitempty"`

	// "find_date" field predicates.
	FindDate      *time.Time  `json:"findDate,omitempty"`
	FindDateNEQ   *time.Time  `json:"findDateNEQ,omitempty"`
	FindDateIn    []time.Time `json:"findDateIn,omitempty"`
	FindDateNotIn []time.Time `json:"findDateNotIn,omitempty"`
	FindDateGT    *time.Time  `json:"findDateGT,omitempty"`
	FindDateGTE   *time.Time  `json:"findDateGTE,omitempty"`
	FindDateLT    *time.Time  `json:"findDateLT,omitempty"`
	FindDateLTE   *time.Time  `json:"findDateLTE,omitempty"`

	// "size_and_value_rating" field predicates.
	SizeAndValueRating       *int8  `json:"sizeAndValueRating,omitempty"`
	SizeAndValueRatingNEQ    *int8  `json:"sizeAndValueRatingNEQ,omitempty"`
	SizeAndValueRatingIn     []int8 `json:"sizeAndValueRatingIn,omitempty"`
	SizeAndValueRatingNotIn  []int8 `json:"sizeAndValueRatingNotIn,omitempty"`
	SizeAndValueRatingGT     *int8  `json:"sizeAndValueRatingGT,omitempty"`
	SizeAndValueRatingGTE    *int8  `json:"sizeAndValueRatingGTE,omitempty"`
	SizeAndValueRatingLT     *int8  `json:"sizeAndValueRatingLT,omitempty"`
	SizeAndValueRatingLTE    *int8  `json:"sizeAndValueRatingLTE,omitempty"`
	SizeAndValueRatingIsNil  bool   `json:"sizeAndValueRatingIsNil,omitempty"`
	SizeAndValueRatingNotNil bool   `json:"sizeAndValueRatingNotNil,omitempty"`

	// "credit_and_payment_rating" field predicates.
	CreditAndPaymentRating       *int8  `json:"creditAndPaymentRating,omitempty"`
	CreditAndPaymentRatingNEQ    *int8  `json:"creditAndPaymentRatingNEQ,omitempty"`
	CreditAndPaymentRatingIn     []int8 `json:"creditAndPaymentRatingIn,omitempty"`
	CreditAndPaymentRatingNotIn  []int8 `json:"creditAndPaymentRatingNotIn,omitempty"`
	CreditAndPaymentRatingGT     *int8  `json:"creditAndPaymentRatingGT,omitempty"`
	CreditAndPaymentRatingGTE    *int8  `json:"creditAndPaymentRatingGTE,omitempty"`
	CreditAndPaymentRatingLT     *int8  `json:"creditAndPaymentRatingLT,omitempty"`
	CreditAndPaymentRatingLTE    *int8  `json:"creditAndPaymentRatingLTE,omitempty"`
	CreditAndPaymentRatingIsNil  bool   `json:"creditAndPaymentRatingIsNil,omitempty"`
	CreditAndPaymentRatingNotNil bool   `json:"creditAndPaymentRatingNotNil,omitempty"`

	// "time_limit_rating" field predicates.
	TimeLimitRating       *int8  `json:"timeLimitRating,omitempty"`
	TimeLimitRatingNEQ    *int8  `json:"timeLimitRatingNEQ,omitempty"`
	TimeLimitRatingIn     []int8 `json:"timeLimitRatingIn,omitempty"`
	TimeLimitRatingNotIn  []int8 `json:"timeLimitRatingNotIn,omitempty"`
	TimeLimitRatingGT     *int8  `json:"timeLimitRatingGT,omitempty"`
	TimeLimitRatingGTE    *int8  `json:"timeLimitRatingGTE,omitempty"`
	TimeLimitRatingLT     *int8  `json:"timeLimitRatingLT,omitempty"`
	TimeLimitRatingLTE    *int8  `json:"timeLimitRatingLTE,omitempty"`
	TimeLimitRatingIsNil  bool   `json:"timeLimitRatingIsNil,omitempty"`
	TimeLimitRatingNotNil bool   `json:"timeLimitRatingNotNil,omitempty"`

	// "customer_relationship_rating" field predicates.
	CustomerRelationshipRating       *int8  `json:"customerRelationshipRating,omitempty"`
	CustomerRelationshipRatingNEQ    *int8  `json:"customerRelationshipRatingNEQ,omitempty"`
	CustomerRelationshipRatingIn     []int8 `json:"customerRelationshipRatingIn,omitempty"`
	CustomerRelationshipRatingNotIn  []int8 `json:"customerRelationshipRatingNotIn,omitempty"`
	CustomerRelationshipRatingGT     *int8  `json:"customerRelationshipRatingGT,omitempty"`
	CustomerRelationshipRatingGTE    *int8  `json:"customerRelationshipRatingGTE,omitempty"`
	CustomerRelationshipRatingLT     *int8  `json:"customerRelationshipRatingLT,omitempty"`
	CustomerRelationshipRatingLTE    *int8  `json:"customerRelationshipRatingLTE,omitempty"`
	CustomerRelationshipRatingIsNil  bool   `json:"customerRelationshipRatingIsNil,omitempty"`
	CustomerRelationshipRatingNotNil bool   `json:"customerRelationshipRatingNotNil,omitempty"`

	// "competitive_partnership_rating" field predicates.
	CompetitivePartnershipRating       *int8  `json:"competitivePartnershipRating,omitempty"`
	CompetitivePartnershipRatingNEQ    *int8  `json:"competitivePartnershipRatingNEQ,omitempty"`
	CompetitivePartnershipRatingIn     []int8 `json:"competitivePartnershipRatingIn,omitempty"`
	CompetitivePartnershipRatingNotIn  []int8 `json:"competitivePartnershipRatingNotIn,omitempty"`
	CompetitivePartnershipRatingGT     *int8  `json:"competitivePartnershipRatingGT,omitempty"`
	CompetitivePartnershipRatingGTE    *int8  `json:"competitivePartnershipRatingGTE,omitempty"`
	CompetitivePartnershipRatingLT     *int8  `json:"competitivePartnershipRatingLT,omitempty"`
	CompetitivePartnershipRatingLTE    *int8  `json:"competitivePartnershipRatingLTE,omitempty"`
	CompetitivePartnershipRatingIsNil  bool   `json:"competitivePartnershipRatingIsNil,omitempty"`
	CompetitivePartnershipRatingNotNil bool   `json:"competitivePartnershipRatingNotNil,omitempty"`

	// "prepare_to_bid" field predicates.
	PrepareToBid    *bool `json:"prepareToBid,omitempty"`
	PrepareToBidNEQ *bool `json:"prepareToBidNEQ,omitempty"`

	// "project_code" field predicates.
	ProjectCode             *string  `json:"projectCode,omitempty"`
	ProjectCodeNEQ          *string  `json:"projectCodeNEQ,omitempty"`
	ProjectCodeIn           []string `json:"projectCodeIn,omitempty"`
	ProjectCodeNotIn        []string `json:"projectCodeNotIn,omitempty"`
	ProjectCodeGT           *string  `json:"projectCodeGT,omitempty"`
	ProjectCodeGTE          *string  `json:"projectCodeGTE,omitempty"`
	ProjectCodeLT           *string  `json:"projectCodeLT,omitempty"`
	ProjectCodeLTE          *string  `json:"projectCodeLTE,omitempty"`
	ProjectCodeContains     *string  `json:"projectCodeContains,omitempty"`
	ProjectCodeHasPrefix    *string  `json:"projectCodeHasPrefix,omitempty"`
	ProjectCodeHasSuffix    *string  `json:"projectCodeHasSuffix,omitempty"`
	ProjectCodeIsNil        bool     `json:"projectCodeIsNil,omitempty"`
	ProjectCodeNotNil       bool     `json:"projectCodeNotNil,omitempty"`
	ProjectCodeEqualFold    *string  `json:"projectCodeEqualFold,omitempty"`
	ProjectCodeContainsFold *string  `json:"projectCodeContainsFold,omitempty"`

	// "project_definition" field predicates.
	ProjectDefinition             *string  `json:"projectDefinition,omitempty"`
	ProjectDefinitionNEQ          *string  `json:"projectDefinitionNEQ,omitempty"`
	ProjectDefinitionIn           []string `json:"projectDefinitionIn,omitempty"`
	ProjectDefinitionNotIn        []string `json:"projectDefinitionNotIn,omitempty"`
	ProjectDefinitionGT           *string  `json:"projectDefinitionGT,omitempty"`
	ProjectDefinitionGTE          *string  `json:"projectDefinitionGTE,omitempty"`
	ProjectDefinitionLT           *string  `json:"projectDefinitionLT,omitempty"`
	ProjectDefinitionLTE          *string  `json:"projectDefinitionLTE,omitempty"`
	ProjectDefinitionContains     *string  `json:"projectDefinitionContains,omitempty"`
	ProjectDefinitionHasPrefix    *string  `json:"projectDefinitionHasPrefix,omitempty"`
	ProjectDefinitionHasSuffix    *string  `json:"projectDefinitionHasSuffix,omitempty"`
	ProjectDefinitionIsNil        bool     `json:"projectDefinitionIsNil,omitempty"`
	ProjectDefinitionNotNil       bool     `json:"projectDefinitionNotNil,omitempty"`
	ProjectDefinitionEqualFold    *string  `json:"projectDefinitionEqualFold,omitempty"`
	ProjectDefinitionContainsFold *string  `json:"projectDefinitionContainsFold,omitempty"`

	// "estimated_project_start_date" field predicates.
	EstimatedProjectStartDate       *time.Time  `json:"estimatedProjectStartDate,omitempty"`
	EstimatedProjectStartDateNEQ    *time.Time  `json:"estimatedProjectStartDateNEQ,omitempty"`
	EstimatedProjectStartDateIn     []time.Time `json:"estimatedProjectStartDateIn,omitempty"`
	EstimatedProjectStartDateNotIn  []time.Time `json:"estimatedProjectStartDateNotIn,omitempty"`
	EstimatedProjectStartDateGT     *time.Time  `json:"estimatedProjectStartDateGT,omitempty"`
	EstimatedProjectStartDateGTE    *time.Time  `json:"estimatedProjectStartDateGTE,omitempty"`
	EstimatedProjectStartDateLT     *time.Time  `json:"estimatedProjectStartDateLT,omitempty"`
	EstimatedProjectStartDateLTE    *time.Time  `json:"estimatedProjectStartDateLTE,omitempty"`
	EstimatedProjectStartDateIsNil  bool        `json:"estimatedProjectStartDateIsNil,omitempty"`
	EstimatedProjectStartDateNotNil bool        `json:"estimatedProjectStartDateNotNil,omitempty"`

	// "estimated_project_end_date" field predicates.
	EstimatedProjectEndDate       *time.Time  `json:"estimatedProjectEndDate,omitempty"`
	EstimatedProjectEndDateNEQ    *time.Time  `json:"estimatedProjectEndDateNEQ,omitempty"`
	EstimatedProjectEndDateIn     []time.Time `json:"estimatedProjectEndDateIn,omitempty"`
	EstimatedProjectEndDateNotIn  []time.Time `json:"estimatedProjectEndDateNotIn,omitempty"`
	EstimatedProjectEndDateGT     *time.Time  `json:"estimatedProjectEndDateGT,omitempty"`
	EstimatedProjectEndDateGTE    *time.Time  `json:"estimatedProjectEndDateGTE,omitempty"`
	EstimatedProjectEndDateLT     *time.Time  `json:"estimatedProjectEndDateLT,omitempty"`
	EstimatedProjectEndDateLTE    *time.Time  `json:"estimatedProjectEndDateLTE,omitempty"`
	EstimatedProjectEndDateIsNil  bool        `json:"estimatedProjectEndDateIsNil,omitempty"`
	EstimatedProjectEndDateNotNil bool        `json:"estimatedProjectEndDateNotNil,omitempty"`

	// "project_type" field predicates.
	ProjectType             *string  `json:"projectType,omitempty"`
	ProjectTypeNEQ          *string  `json:"projectTypeNEQ,omitempty"`
	ProjectTypeIn           []string `json:"projectTypeIn,omitempty"`
	ProjectTypeNotIn        []string `json:"projectTypeNotIn,omitempty"`
	ProjectTypeGT           *string  `json:"projectTypeGT,omitempty"`
	ProjectTypeGTE          *string  `json:"projectTypeGTE,omitempty"`
	ProjectTypeLT           *string  `json:"projectTypeLT,omitempty"`
	ProjectTypeLTE          *string  `json:"projectTypeLTE,omitempty"`
	ProjectTypeContains     *string  `json:"projectTypeContains,omitempty"`
	ProjectTypeHasPrefix    *string  `json:"projectTypeHasPrefix,omitempty"`
	ProjectTypeHasSuffix    *string  `json:"projectTypeHasSuffix,omitempty"`
	ProjectTypeIsNil        bool     `json:"projectTypeIsNil,omitempty"`
	ProjectTypeNotNil       bool     `json:"projectTypeNotNil,omitempty"`
	ProjectTypeEqualFold    *string  `json:"projectTypeEqualFold,omitempty"`
	ProjectTypeContainsFold *string  `json:"projectTypeContainsFold,omitempty"`

	// "geo_location" field predicates.
	GeoLocation             *string  `json:"geoLocation,omitempty"`
	GeoLocationNEQ          *string  `json:"geoLocationNEQ,omitempty"`
	GeoLocationIn           []string `json:"geoLocationIn,omitempty"`
	GeoLocationNotIn        []string `json:"geoLocationNotIn,omitempty"`
	GeoLocationGT           *string  `json:"geoLocationGT,omitempty"`
	GeoLocationGTE          *string  `json:"geoLocationGTE,omitempty"`
	GeoLocationLT           *string  `json:"geoLocationLT,omitempty"`
	GeoLocationLTE          *string  `json:"geoLocationLTE,omitempty"`
	GeoLocationContains     *string  `json:"geoLocationContains,omitempty"`
	GeoLocationHasPrefix    *string  `json:"geoLocationHasPrefix,omitempty"`
	GeoLocationHasSuffix    *string  `json:"geoLocationHasSuffix,omitempty"`
	GeoLocationIsNil        bool     `json:"geoLocationIsNil,omitempty"`
	GeoLocationNotNil       bool     `json:"geoLocationNotNil,omitempty"`
	GeoLocationEqualFold    *string  `json:"geoLocationEqualFold,omitempty"`
	GeoLocationContainsFold *string  `json:"geoLocationContainsFold,omitempty"`

	// "remark" field predicates.
	Remark             *string  `json:"remark,omitempty"`
	RemarkNEQ          *string  `json:"remarkNEQ,omitempty"`
	RemarkIn           []string `json:"remarkIn,omitempty"`
	RemarkNotIn        []string `json:"remarkNotIn,omitempty"`
	RemarkGT           *string  `json:"remarkGT,omitempty"`
	RemarkGTE          *string  `json:"remarkGTE,omitempty"`
	RemarkLT           *string  `json:"remarkLT,omitempty"`
	RemarkLTE          *string  `json:"remarkLTE,omitempty"`
	RemarkContains     *string  `json:"remarkContains,omitempty"`
	RemarkHasPrefix    *string  `json:"remarkHasPrefix,omitempty"`
	RemarkHasSuffix    *string  `json:"remarkHasSuffix,omitempty"`
	RemarkIsNil        bool     `json:"remarkIsNil,omitempty"`
	RemarkNotNil       bool     `json:"remarkNotNil,omitempty"`
	RemarkEqualFold    *string  `json:"remarkEqualFold,omitempty"`
	RemarkContainsFold *string  `json:"remarkContainsFold,omitempty"`

	// "area_id" field predicates.
	AreaID      *xid.ID  `json:"areaID,omitempty"`
	AreaIDNEQ   *xid.ID  `json:"areaIDNEQ,omitempty"`
	AreaIDIn    []xid.ID `json:"areaIDIn,omitempty"`
	AreaIDNotIn []xid.ID `json:"areaIDNotIn,omitempty"`
	AreaIDGT    *xid.ID  `json:"areaIDGT,omitempty"`
	AreaIDGTE   *xid.ID  `json:"areaIDGTE,omitempty"`
	AreaIDLT    *xid.ID  `json:"areaIDLT,omitempty"`
	AreaIDLTE   *xid.ID  `json:"areaIDLTE,omitempty"`

	// "customer_id" field predicates.
	CustomerID      *xid.ID  `json:"customerID,omitempty"`
	CustomerIDNEQ   *xid.ID  `json:"customerIDNEQ,omitempty"`
	CustomerIDIn    []xid.ID `json:"customerIDIn,omitempty"`
	CustomerIDNotIn []xid.ID `json:"customerIDNotIn,omitempty"`
	CustomerIDGT    *xid.ID  `json:"customerIDGT,omitempty"`
	CustomerIDGTE   *xid.ID  `json:"customerIDGTE,omitempty"`
	CustomerIDLT    *xid.ID  `json:"customerIDLT,omitempty"`
	CustomerIDLTE   *xid.ID  `json:"customerIDLTE,omitempty"`

	// "area" edge predicates.
	HasArea     *bool             `json:"hasArea,omitempty"`
	HasAreaWith []*AreaWhereInput `json:"hasAreaWith,omitempty"`

	// "customer" edge predicates.
	HasCustomer     *bool                 `json:"hasCustomer,omitempty"`
	HasCustomerWith []*CustomerWhereInput `json:"hasCustomerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TenderWhereInput) AddPredicates(predicates ...predicate.Tender) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TenderWhereInput filter on the TenderQuery builder.
func (i *TenderWhereInput) Filter(q *TenderQuery) (*TenderQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTenderWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTenderWhereInput is returned in case the TenderWhereInput is empty.
var ErrEmptyTenderWhereInput = errors.New("ent: empty predicate TenderWhereInput")

// P returns a predicate for filtering tenders.
// An error is returned if the input is empty or invalid.
func (i *TenderWhereInput) P() (predicate.Tender, error) {
	var predicates []predicate.Tender
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tender.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tender, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tender.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tender, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tender.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tender.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tender.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tender.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tender.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tender.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tender.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tender.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tender.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tender.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tender.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tender.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tender.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tender.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tender.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tender.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tender.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tender.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tender.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tender.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tender.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tender.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tender.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tender.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tender.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Code != nil {
		predicates = append(predicates, tender.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, tender.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, tender.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, tender.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, tender.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, tender.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, tender.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, tender.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, tender.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, tender.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, tender.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, tender.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, tender.CodeContainsFold(*i.CodeContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, tender.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, tender.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, tender.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, tender.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, tender.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, tender.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, tender.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, tender.StatusLTE(*i.StatusLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tender.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tender.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tender.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tender.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tender.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tender.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tender.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tender.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tender.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tender.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tender.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tender.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tender.NameContainsFold(*i.NameContainsFold))
	}
	if i.EstimatedAmount != nil {
		predicates = append(predicates, tender.EstimatedAmountEQ(*i.EstimatedAmount))
	}
	if i.EstimatedAmountNEQ != nil {
		predicates = append(predicates, tender.EstimatedAmountNEQ(*i.EstimatedAmountNEQ))
	}
	if len(i.EstimatedAmountIn) > 0 {
		predicates = append(predicates, tender.EstimatedAmountIn(i.EstimatedAmountIn...))
	}
	if len(i.EstimatedAmountNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedAmountNotIn(i.EstimatedAmountNotIn...))
	}
	if i.EstimatedAmountGT != nil {
		predicates = append(predicates, tender.EstimatedAmountGT(*i.EstimatedAmountGT))
	}
	if i.EstimatedAmountGTE != nil {
		predicates = append(predicates, tender.EstimatedAmountGTE(*i.EstimatedAmountGTE))
	}
	if i.EstimatedAmountLT != nil {
		predicates = append(predicates, tender.EstimatedAmountLT(*i.EstimatedAmountLT))
	}
	if i.EstimatedAmountLTE != nil {
		predicates = append(predicates, tender.EstimatedAmountLTE(*i.EstimatedAmountLTE))
	}
	if i.EstimatedAmountIsNil {
		predicates = append(predicates, tender.EstimatedAmountIsNil())
	}
	if i.EstimatedAmountNotNil {
		predicates = append(predicates, tender.EstimatedAmountNotNil())
	}
	if i.TenderDate != nil {
		predicates = append(predicates, tender.TenderDateEQ(*i.TenderDate))
	}
	if i.TenderDateNEQ != nil {
		predicates = append(predicates, tender.TenderDateNEQ(*i.TenderDateNEQ))
	}
	if len(i.TenderDateIn) > 0 {
		predicates = append(predicates, tender.TenderDateIn(i.TenderDateIn...))
	}
	if len(i.TenderDateNotIn) > 0 {
		predicates = append(predicates, tender.TenderDateNotIn(i.TenderDateNotIn...))
	}
	if i.TenderDateGT != nil {
		predicates = append(predicates, tender.TenderDateGT(*i.TenderDateGT))
	}
	if i.TenderDateGTE != nil {
		predicates = append(predicates, tender.TenderDateGTE(*i.TenderDateGTE))
	}
	if i.TenderDateLT != nil {
		predicates = append(predicates, tender.TenderDateLT(*i.TenderDateLT))
	}
	if i.TenderDateLTE != nil {
		predicates = append(predicates, tender.TenderDateLTE(*i.TenderDateLTE))
	}
	if i.TenderDateIsNil {
		predicates = append(predicates, tender.TenderDateIsNil())
	}
	if i.TenderDateNotNil {
		predicates = append(predicates, tender.TenderDateNotNil())
	}
	if i.FindDate != nil {
		predicates = append(predicates, tender.FindDateEQ(*i.FindDate))
	}
	if i.FindDateNEQ != nil {
		predicates = append(predicates, tender.FindDateNEQ(*i.FindDateNEQ))
	}
	if len(i.FindDateIn) > 0 {
		predicates = append(predicates, tender.FindDateIn(i.FindDateIn...))
	}
	if len(i.FindDateNotIn) > 0 {
		predicates = append(predicates, tender.FindDateNotIn(i.FindDateNotIn...))
	}
	if i.FindDateGT != nil {
		predicates = append(predicates, tender.FindDateGT(*i.FindDateGT))
	}
	if i.FindDateGTE != nil {
		predicates = append(predicates, tender.FindDateGTE(*i.FindDateGTE))
	}
	if i.FindDateLT != nil {
		predicates = append(predicates, tender.FindDateLT(*i.FindDateLT))
	}
	if i.FindDateLTE != nil {
		predicates = append(predicates, tender.FindDateLTE(*i.FindDateLTE))
	}
	if i.SizeAndValueRating != nil {
		predicates = append(predicates, tender.SizeAndValueRatingEQ(*i.SizeAndValueRating))
	}
	if i.SizeAndValueRatingNEQ != nil {
		predicates = append(predicates, tender.SizeAndValueRatingNEQ(*i.SizeAndValueRatingNEQ))
	}
	if len(i.SizeAndValueRatingIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingIn(i.SizeAndValueRatingIn...))
	}
	if len(i.SizeAndValueRatingNotIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingNotIn(i.SizeAndValueRatingNotIn...))
	}
	if i.SizeAndValueRatingGT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingGT(*i.SizeAndValueRatingGT))
	}
	if i.SizeAndValueRatingGTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingGTE(*i.SizeAndValueRatingGTE))
	}
	if i.SizeAndValueRatingLT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingLT(*i.SizeAndValueRatingLT))
	}
	if i.SizeAndValueRatingLTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingLTE(*i.SizeAndValueRatingLTE))
	}
	if i.SizeAndValueRatingIsNil {
		predicates = append(predicates, tender.SizeAndValueRatingIsNil())
	}
	if i.SizeAndValueRatingNotNil {
		predicates = append(predicates, tender.SizeAndValueRatingNotNil())
	}
	if i.CreditAndPaymentRating != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingEQ(*i.CreditAndPaymentRating))
	}
	if i.CreditAndPaymentRatingNEQ != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingNEQ(*i.CreditAndPaymentRatingNEQ))
	}
	if len(i.CreditAndPaymentRatingIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingIn(i.CreditAndPaymentRatingIn...))
	}
	if len(i.CreditAndPaymentRatingNotIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingNotIn(i.CreditAndPaymentRatingNotIn...))
	}
	if i.CreditAndPaymentRatingGT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingGT(*i.CreditAndPaymentRatingGT))
	}
	if i.CreditAndPaymentRatingGTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingGTE(*i.CreditAndPaymentRatingGTE))
	}
	if i.CreditAndPaymentRatingLT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingLT(*i.CreditAndPaymentRatingLT))
	}
	if i.CreditAndPaymentRatingLTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingLTE(*i.CreditAndPaymentRatingLTE))
	}
	if i.CreditAndPaymentRatingIsNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingIsNil())
	}
	if i.CreditAndPaymentRatingNotNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingNotNil())
	}
	if i.TimeLimitRating != nil {
		predicates = append(predicates, tender.TimeLimitRatingEQ(*i.TimeLimitRating))
	}
	if i.TimeLimitRatingNEQ != nil {
		predicates = append(predicates, tender.TimeLimitRatingNEQ(*i.TimeLimitRatingNEQ))
	}
	if len(i.TimeLimitRatingIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingIn(i.TimeLimitRatingIn...))
	}
	if len(i.TimeLimitRatingNotIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingNotIn(i.TimeLimitRatingNotIn...))
	}
	if i.TimeLimitRatingGT != nil {
		predicates = append(predicates, tender.TimeLimitRatingGT(*i.TimeLimitRatingGT))
	}
	if i.TimeLimitRatingGTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingGTE(*i.TimeLimitRatingGTE))
	}
	if i.TimeLimitRatingLT != nil {
		predicates = append(predicates, tender.TimeLimitRatingLT(*i.TimeLimitRatingLT))
	}
	if i.TimeLimitRatingLTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingLTE(*i.TimeLimitRatingLTE))
	}
	if i.TimeLimitRatingIsNil {
		predicates = append(predicates, tender.TimeLimitRatingIsNil())
	}
	if i.TimeLimitRatingNotNil {
		predicates = append(predicates, tender.TimeLimitRatingNotNil())
	}
	if i.CustomerRelationshipRating != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingEQ(*i.CustomerRelationshipRating))
	}
	if i.CustomerRelationshipRatingNEQ != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingNEQ(*i.CustomerRelationshipRatingNEQ))
	}
	if len(i.CustomerRelationshipRatingIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingIn(i.CustomerRelationshipRatingIn...))
	}
	if len(i.CustomerRelationshipRatingNotIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingNotIn(i.CustomerRelationshipRatingNotIn...))
	}
	if i.CustomerRelationshipRatingGT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingGT(*i.CustomerRelationshipRatingGT))
	}
	if i.CustomerRelationshipRatingGTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingGTE(*i.CustomerRelationshipRatingGTE))
	}
	if i.CustomerRelationshipRatingLT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingLT(*i.CustomerRelationshipRatingLT))
	}
	if i.CustomerRelationshipRatingLTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingLTE(*i.CustomerRelationshipRatingLTE))
	}
	if i.CustomerRelationshipRatingIsNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingIsNil())
	}
	if i.CustomerRelationshipRatingNotNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingNotNil())
	}
	if i.CompetitivePartnershipRating != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingEQ(*i.CompetitivePartnershipRating))
	}
	if i.CompetitivePartnershipRatingNEQ != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNEQ(*i.CompetitivePartnershipRatingNEQ))
	}
	if len(i.CompetitivePartnershipRatingIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingIn(i.CompetitivePartnershipRatingIn...))
	}
	if len(i.CompetitivePartnershipRatingNotIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNotIn(i.CompetitivePartnershipRatingNotIn...))
	}
	if i.CompetitivePartnershipRatingGT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingGT(*i.CompetitivePartnershipRatingGT))
	}
	if i.CompetitivePartnershipRatingGTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingGTE(*i.CompetitivePartnershipRatingGTE))
	}
	if i.CompetitivePartnershipRatingLT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingLT(*i.CompetitivePartnershipRatingLT))
	}
	if i.CompetitivePartnershipRatingLTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingLTE(*i.CompetitivePartnershipRatingLTE))
	}
	if i.CompetitivePartnershipRatingIsNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingIsNil())
	}
	if i.CompetitivePartnershipRatingNotNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNotNil())
	}
	if i.PrepareToBid != nil {
		predicates = append(predicates, tender.PrepareToBidEQ(*i.PrepareToBid))
	}
	if i.PrepareToBidNEQ != nil {
		predicates = append(predicates, tender.PrepareToBidNEQ(*i.PrepareToBidNEQ))
	}
	if i.ProjectCode != nil {
		predicates = append(predicates, tender.ProjectCodeEQ(*i.ProjectCode))
	}
	if i.ProjectCodeNEQ != nil {
		predicates = append(predicates, tender.ProjectCodeNEQ(*i.ProjectCodeNEQ))
	}
	if len(i.ProjectCodeIn) > 0 {
		predicates = append(predicates, tender.ProjectCodeIn(i.ProjectCodeIn...))
	}
	if len(i.ProjectCodeNotIn) > 0 {
		predicates = append(predicates, tender.ProjectCodeNotIn(i.ProjectCodeNotIn...))
	}
	if i.ProjectCodeGT != nil {
		predicates = append(predicates, tender.ProjectCodeGT(*i.ProjectCodeGT))
	}
	if i.ProjectCodeGTE != nil {
		predicates = append(predicates, tender.ProjectCodeGTE(*i.ProjectCodeGTE))
	}
	if i.ProjectCodeLT != nil {
		predicates = append(predicates, tender.ProjectCodeLT(*i.ProjectCodeLT))
	}
	if i.ProjectCodeLTE != nil {
		predicates = append(predicates, tender.ProjectCodeLTE(*i.ProjectCodeLTE))
	}
	if i.ProjectCodeContains != nil {
		predicates = append(predicates, tender.ProjectCodeContains(*i.ProjectCodeContains))
	}
	if i.ProjectCodeHasPrefix != nil {
		predicates = append(predicates, tender.ProjectCodeHasPrefix(*i.ProjectCodeHasPrefix))
	}
	if i.ProjectCodeHasSuffix != nil {
		predicates = append(predicates, tender.ProjectCodeHasSuffix(*i.ProjectCodeHasSuffix))
	}
	if i.ProjectCodeIsNil {
		predicates = append(predicates, tender.ProjectCodeIsNil())
	}
	if i.ProjectCodeNotNil {
		predicates = append(predicates, tender.ProjectCodeNotNil())
	}
	if i.ProjectCodeEqualFold != nil {
		predicates = append(predicates, tender.ProjectCodeEqualFold(*i.ProjectCodeEqualFold))
	}
	if i.ProjectCodeContainsFold != nil {
		predicates = append(predicates, tender.ProjectCodeContainsFold(*i.ProjectCodeContainsFold))
	}
	if i.ProjectDefinition != nil {
		predicates = append(predicates, tender.ProjectDefinitionEQ(*i.ProjectDefinition))
	}
	if i.ProjectDefinitionNEQ != nil {
		predicates = append(predicates, tender.ProjectDefinitionNEQ(*i.ProjectDefinitionNEQ))
	}
	if len(i.ProjectDefinitionIn) > 0 {
		predicates = append(predicates, tender.ProjectDefinitionIn(i.ProjectDefinitionIn...))
	}
	if len(i.ProjectDefinitionNotIn) > 0 {
		predicates = append(predicates, tender.ProjectDefinitionNotIn(i.ProjectDefinitionNotIn...))
	}
	if i.ProjectDefinitionGT != nil {
		predicates = append(predicates, tender.ProjectDefinitionGT(*i.ProjectDefinitionGT))
	}
	if i.ProjectDefinitionGTE != nil {
		predicates = append(predicates, tender.ProjectDefinitionGTE(*i.ProjectDefinitionGTE))
	}
	if i.ProjectDefinitionLT != nil {
		predicates = append(predicates, tender.ProjectDefinitionLT(*i.ProjectDefinitionLT))
	}
	if i.ProjectDefinitionLTE != nil {
		predicates = append(predicates, tender.ProjectDefinitionLTE(*i.ProjectDefinitionLTE))
	}
	if i.ProjectDefinitionContains != nil {
		predicates = append(predicates, tender.ProjectDefinitionContains(*i.ProjectDefinitionContains))
	}
	if i.ProjectDefinitionHasPrefix != nil {
		predicates = append(predicates, tender.ProjectDefinitionHasPrefix(*i.ProjectDefinitionHasPrefix))
	}
	if i.ProjectDefinitionHasSuffix != nil {
		predicates = append(predicates, tender.ProjectDefinitionHasSuffix(*i.ProjectDefinitionHasSuffix))
	}
	if i.ProjectDefinitionIsNil {
		predicates = append(predicates, tender.ProjectDefinitionIsNil())
	}
	if i.ProjectDefinitionNotNil {
		predicates = append(predicates, tender.ProjectDefinitionNotNil())
	}
	if i.ProjectDefinitionEqualFold != nil {
		predicates = append(predicates, tender.ProjectDefinitionEqualFold(*i.ProjectDefinitionEqualFold))
	}
	if i.ProjectDefinitionContainsFold != nil {
		predicates = append(predicates, tender.ProjectDefinitionContainsFold(*i.ProjectDefinitionContainsFold))
	}
	if i.EstimatedProjectStartDate != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateEQ(*i.EstimatedProjectStartDate))
	}
	if i.EstimatedProjectStartDateNEQ != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateNEQ(*i.EstimatedProjectStartDateNEQ))
	}
	if len(i.EstimatedProjectStartDateIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectStartDateIn(i.EstimatedProjectStartDateIn...))
	}
	if len(i.EstimatedProjectStartDateNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectStartDateNotIn(i.EstimatedProjectStartDateNotIn...))
	}
	if i.EstimatedProjectStartDateGT != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateGT(*i.EstimatedProjectStartDateGT))
	}
	if i.EstimatedProjectStartDateGTE != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateGTE(*i.EstimatedProjectStartDateGTE))
	}
	if i.EstimatedProjectStartDateLT != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateLT(*i.EstimatedProjectStartDateLT))
	}
	if i.EstimatedProjectStartDateLTE != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateLTE(*i.EstimatedProjectStartDateLTE))
	}
	if i.EstimatedProjectStartDateIsNil {
		predicates = append(predicates, tender.EstimatedProjectStartDateIsNil())
	}
	if i.EstimatedProjectStartDateNotNil {
		predicates = append(predicates, tender.EstimatedProjectStartDateNotNil())
	}
	if i.EstimatedProjectEndDate != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateEQ(*i.EstimatedProjectEndDate))
	}
	if i.EstimatedProjectEndDateNEQ != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateNEQ(*i.EstimatedProjectEndDateNEQ))
	}
	if len(i.EstimatedProjectEndDateIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectEndDateIn(i.EstimatedProjectEndDateIn...))
	}
	if len(i.EstimatedProjectEndDateNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectEndDateNotIn(i.EstimatedProjectEndDateNotIn...))
	}
	if i.EstimatedProjectEndDateGT != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateGT(*i.EstimatedProjectEndDateGT))
	}
	if i.EstimatedProjectEndDateGTE != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateGTE(*i.EstimatedProjectEndDateGTE))
	}
	if i.EstimatedProjectEndDateLT != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateLT(*i.EstimatedProjectEndDateLT))
	}
	if i.EstimatedProjectEndDateLTE != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateLTE(*i.EstimatedProjectEndDateLTE))
	}
	if i.EstimatedProjectEndDateIsNil {
		predicates = append(predicates, tender.EstimatedProjectEndDateIsNil())
	}
	if i.EstimatedProjectEndDateNotNil {
		predicates = append(predicates, tender.EstimatedProjectEndDateNotNil())
	}
	if i.ProjectType != nil {
		predicates = append(predicates, tender.ProjectTypeEQ(*i.ProjectType))
	}
	if i.ProjectTypeNEQ != nil {
		predicates = append(predicates, tender.ProjectTypeNEQ(*i.ProjectTypeNEQ))
	}
	if len(i.ProjectTypeIn) > 0 {
		predicates = append(predicates, tender.ProjectTypeIn(i.ProjectTypeIn...))
	}
	if len(i.ProjectTypeNotIn) > 0 {
		predicates = append(predicates, tender.ProjectTypeNotIn(i.ProjectTypeNotIn...))
	}
	if i.ProjectTypeGT != nil {
		predicates = append(predicates, tender.ProjectTypeGT(*i.ProjectTypeGT))
	}
	if i.ProjectTypeGTE != nil {
		predicates = append(predicates, tender.ProjectTypeGTE(*i.ProjectTypeGTE))
	}
	if i.ProjectTypeLT != nil {
		predicates = append(predicates, tender.ProjectTypeLT(*i.ProjectTypeLT))
	}
	if i.ProjectTypeLTE != nil {
		predicates = append(predicates, tender.ProjectTypeLTE(*i.ProjectTypeLTE))
	}
	if i.ProjectTypeContains != nil {
		predicates = append(predicates, tender.ProjectTypeContains(*i.ProjectTypeContains))
	}
	if i.ProjectTypeHasPrefix != nil {
		predicates = append(predicates, tender.ProjectTypeHasPrefix(*i.ProjectTypeHasPrefix))
	}
	if i.ProjectTypeHasSuffix != nil {
		predicates = append(predicates, tender.ProjectTypeHasSuffix(*i.ProjectTypeHasSuffix))
	}
	if i.ProjectTypeIsNil {
		predicates = append(predicates, tender.ProjectTypeIsNil())
	}
	if i.ProjectTypeNotNil {
		predicates = append(predicates, tender.ProjectTypeNotNil())
	}
	if i.ProjectTypeEqualFold != nil {
		predicates = append(predicates, tender.ProjectTypeEqualFold(*i.ProjectTypeEqualFold))
	}
	if i.ProjectTypeContainsFold != nil {
		predicates = append(predicates, tender.ProjectTypeContainsFold(*i.ProjectTypeContainsFold))
	}
	if i.GeoLocation != nil {
		predicates = append(predicates, tender.GeoLocationEQ(*i.GeoLocation))
	}
	if i.GeoLocationNEQ != nil {
		predicates = append(predicates, tender.GeoLocationNEQ(*i.GeoLocationNEQ))
	}
	if len(i.GeoLocationIn) > 0 {
		predicates = append(predicates, tender.GeoLocationIn(i.GeoLocationIn...))
	}
	if len(i.GeoLocationNotIn) > 0 {
		predicates = append(predicates, tender.GeoLocationNotIn(i.GeoLocationNotIn...))
	}
	if i.GeoLocationGT != nil {
		predicates = append(predicates, tender.GeoLocationGT(*i.GeoLocationGT))
	}
	if i.GeoLocationGTE != nil {
		predicates = append(predicates, tender.GeoLocationGTE(*i.GeoLocationGTE))
	}
	if i.GeoLocationLT != nil {
		predicates = append(predicates, tender.GeoLocationLT(*i.GeoLocationLT))
	}
	if i.GeoLocationLTE != nil {
		predicates = append(predicates, tender.GeoLocationLTE(*i.GeoLocationLTE))
	}
	if i.GeoLocationContains != nil {
		predicates = append(predicates, tender.GeoLocationContains(*i.GeoLocationContains))
	}
	if i.GeoLocationHasPrefix != nil {
		predicates = append(predicates, tender.GeoLocationHasPrefix(*i.GeoLocationHasPrefix))
	}
	if i.GeoLocationHasSuffix != nil {
		predicates = append(predicates, tender.GeoLocationHasSuffix(*i.GeoLocationHasSuffix))
	}
	if i.GeoLocationIsNil {
		predicates = append(predicates, tender.GeoLocationIsNil())
	}
	if i.GeoLocationNotNil {
		predicates = append(predicates, tender.GeoLocationNotNil())
	}
	if i.GeoLocationEqualFold != nil {
		predicates = append(predicates, tender.GeoLocationEqualFold(*i.GeoLocationEqualFold))
	}
	if i.GeoLocationContainsFold != nil {
		predicates = append(predicates, tender.GeoLocationContainsFold(*i.GeoLocationContainsFold))
	}
	if i.Remark != nil {
		predicates = append(predicates, tender.RemarkEQ(*i.Remark))
	}
	if i.RemarkNEQ != nil {
		predicates = append(predicates, tender.RemarkNEQ(*i.RemarkNEQ))
	}
	if len(i.RemarkIn) > 0 {
		predicates = append(predicates, tender.RemarkIn(i.RemarkIn...))
	}
	if len(i.RemarkNotIn) > 0 {
		predicates = append(predicates, tender.RemarkNotIn(i.RemarkNotIn...))
	}
	if i.RemarkGT != nil {
		predicates = append(predicates, tender.RemarkGT(*i.RemarkGT))
	}
	if i.RemarkGTE != nil {
		predicates = append(predicates, tender.RemarkGTE(*i.RemarkGTE))
	}
	if i.RemarkLT != nil {
		predicates = append(predicates, tender.RemarkLT(*i.RemarkLT))
	}
	if i.RemarkLTE != nil {
		predicates = append(predicates, tender.RemarkLTE(*i.RemarkLTE))
	}
	if i.RemarkContains != nil {
		predicates = append(predicates, tender.RemarkContains(*i.RemarkContains))
	}
	if i.RemarkHasPrefix != nil {
		predicates = append(predicates, tender.RemarkHasPrefix(*i.RemarkHasPrefix))
	}
	if i.RemarkHasSuffix != nil {
		predicates = append(predicates, tender.RemarkHasSuffix(*i.RemarkHasSuffix))
	}
	if i.RemarkIsNil {
		predicates = append(predicates, tender.RemarkIsNil())
	}
	if i.RemarkNotNil {
		predicates = append(predicates, tender.RemarkNotNil())
	}
	if i.RemarkEqualFold != nil {
		predicates = append(predicates, tender.RemarkEqualFold(*i.RemarkEqualFold))
	}
	if i.RemarkContainsFold != nil {
		predicates = append(predicates, tender.RemarkContainsFold(*i.RemarkContainsFold))
	}
	if i.AreaID != nil {
		predicates = append(predicates, tender.AreaIDEQ(*i.AreaID))
	}
	if i.AreaIDNEQ != nil {
		predicates = append(predicates, tender.AreaIDNEQ(*i.AreaIDNEQ))
	}
	if len(i.AreaIDIn) > 0 {
		predicates = append(predicates, tender.AreaIDIn(i.AreaIDIn...))
	}
	if len(i.AreaIDNotIn) > 0 {
		predicates = append(predicates, tender.AreaIDNotIn(i.AreaIDNotIn...))
	}
	if i.AreaIDGT != nil {
		predicates = append(predicates, tender.AreaIDGT(*i.AreaIDGT))
	}
	if i.AreaIDGTE != nil {
		predicates = append(predicates, tender.AreaIDGTE(*i.AreaIDGTE))
	}
	if i.AreaIDLT != nil {
		predicates = append(predicates, tender.AreaIDLT(*i.AreaIDLT))
	}
	if i.AreaIDLTE != nil {
		predicates = append(predicates, tender.AreaIDLTE(*i.AreaIDLTE))
	}
	if i.CustomerID != nil {
		predicates = append(predicates, tender.CustomerIDEQ(*i.CustomerID))
	}
	if i.CustomerIDNEQ != nil {
		predicates = append(predicates, tender.CustomerIDNEQ(*i.CustomerIDNEQ))
	}
	if len(i.CustomerIDIn) > 0 {
		predicates = append(predicates, tender.CustomerIDIn(i.CustomerIDIn...))
	}
	if len(i.CustomerIDNotIn) > 0 {
		predicates = append(predicates, tender.CustomerIDNotIn(i.CustomerIDNotIn...))
	}
	if i.CustomerIDGT != nil {
		predicates = append(predicates, tender.CustomerIDGT(*i.CustomerIDGT))
	}
	if i.CustomerIDGTE != nil {
		predicates = append(predicates, tender.CustomerIDGTE(*i.CustomerIDGTE))
	}
	if i.CustomerIDLT != nil {
		predicates = append(predicates, tender.CustomerIDLT(*i.CustomerIDLT))
	}
	if i.CustomerIDLTE != nil {
		predicates = append(predicates, tender.CustomerIDLTE(*i.CustomerIDLTE))
	}

	if i.HasArea != nil {
		p := tender.HasArea()
		if !*i.HasArea {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreaWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreaWith))
		for _, w := range i.HasAreaWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreaWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasAreaWith(with...))
	}
	if i.HasCustomer != nil {
		p := tender.HasCustomer()
		if !*i.HasCustomer {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomerWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomerWith))
		for _, w := range i.HasCustomerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasCustomerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTenderWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tender.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "open_id" field predicates.
	OpenID             *string  `json:"openID,omitempty"`
	OpenIDNEQ          *string  `json:"openIDNEQ,omitempty"`
	OpenIDIn           []string `json:"openIDIn,omitempty"`
	OpenIDNotIn        []string `json:"openIDNotIn,omitempty"`
	OpenIDGT           *string  `json:"openIDGT,omitempty"`
	OpenIDGTE          *string  `json:"openIDGTE,omitempty"`
	OpenIDLT           *string  `json:"openIDLT,omitempty"`
	OpenIDLTE          *string  `json:"openIDLTE,omitempty"`
	OpenIDContains     *string  `json:"openIDContains,omitempty"`
	OpenIDHasPrefix    *string  `json:"openIDHasPrefix,omitempty"`
	OpenIDHasSuffix    *string  `json:"openIDHasSuffix,omitempty"`
	OpenIDEqualFold    *string  `json:"openIDEqualFold,omitempty"`
	OpenIDContainsFold *string  `json:"openIDContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "leader_id" field predicates.
	LeaderID       *xid.ID  `json:"leaderID,omitempty"`
	LeaderIDNEQ    *xid.ID  `json:"leaderIDNEQ,omitempty"`
	LeaderIDIn     []xid.ID `json:"leaderIDIn,omitempty"`
	LeaderIDNotIn  []xid.ID `json:"leaderIDNotIn,omitempty"`
	LeaderIDGT     *xid.ID  `json:"leaderIDGT,omitempty"`
	LeaderIDGTE    *xid.ID  `json:"leaderIDGTE,omitempty"`
	LeaderIDLT     *xid.ID  `json:"leaderIDLT,omitempty"`
	LeaderIDLTE    *xid.ID  `json:"leaderIDLTE,omitempty"`
	LeaderIDIsNil  bool     `json:"leaderIDIsNil,omitempty"`
	LeaderIDNotNil bool     `json:"leaderIDNotNil,omitempty"`

	// "areas" edge predicates.
	HasAreas     *bool             `json:"hasAreas,omitempty"`
	HasAreasWith []*AreaWhereInput `json:"hasAreasWith,omitempty"`

	// "customers" edge predicates.
	HasCustomers     *bool                 `json:"hasCustomers,omitempty"`
	HasCustomersWith []*CustomerWhereInput `json:"hasCustomersWith,omitempty"`

	// "leader" edge predicates.
	HasLeader     *bool             `json:"hasLeader,omitempty"`
	HasLeaderWith []*UserWhereInput `json:"hasLeaderWith,omitempty"`

	// "team_members" edge predicates.
	HasTeamMembers     *bool             `json:"hasTeamMembers,omitempty"`
	HasTeamMembersWith []*UserWhereInput `json:"hasTeamMembersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.OpenID != nil {
		predicates = append(predicates, user.OpenIDEQ(*i.OpenID))
	}
	if i.OpenIDNEQ != nil {
		predicates = append(predicates, user.OpenIDNEQ(*i.OpenIDNEQ))
	}
	if len(i.OpenIDIn) > 0 {
		predicates = append(predicates, user.OpenIDIn(i.OpenIDIn...))
	}
	if len(i.OpenIDNotIn) > 0 {
		predicates = append(predicates, user.OpenIDNotIn(i.OpenIDNotIn...))
	}
	if i.OpenIDGT != nil {
		predicates = append(predicates, user.OpenIDGT(*i.OpenIDGT))
	}
	if i.OpenIDGTE != nil {
		predicates = append(predicates, user.OpenIDGTE(*i.OpenIDGTE))
	}
	if i.OpenIDLT != nil {
		predicates = append(predicates, user.OpenIDLT(*i.OpenIDLT))
	}
	if i.OpenIDLTE != nil {
		predicates = append(predicates, user.OpenIDLTE(*i.OpenIDLTE))
	}
	if i.OpenIDContains != nil {
		predicates = append(predicates, user.OpenIDContains(*i.OpenIDContains))
	}
	if i.OpenIDHasPrefix != nil {
		predicates = append(predicates, user.OpenIDHasPrefix(*i.OpenIDHasPrefix))
	}
	if i.OpenIDHasSuffix != nil {
		predicates = append(predicates, user.OpenIDHasSuffix(*i.OpenIDHasSuffix))
	}
	if i.OpenIDEqualFold != nil {
		predicates = append(predicates, user.OpenIDEqualFold(*i.OpenIDEqualFold))
	}
	if i.OpenIDContainsFold != nil {
		predicates = append(predicates, user.OpenIDContainsFold(*i.OpenIDContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, user.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, user.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.LeaderID != nil {
		predicates = append(predicates, user.LeaderIDEQ(*i.LeaderID))
	}
	if i.LeaderIDNEQ != nil {
		predicates = append(predicates, user.LeaderIDNEQ(*i.LeaderIDNEQ))
	}
	if len(i.LeaderIDIn) > 0 {
		predicates = append(predicates, user.LeaderIDIn(i.LeaderIDIn...))
	}
	if len(i.LeaderIDNotIn) > 0 {
		predicates = append(predicates, user.LeaderIDNotIn(i.LeaderIDNotIn...))
	}
	if i.LeaderIDGT != nil {
		predicates = append(predicates, user.LeaderIDGT(*i.LeaderIDGT))
	}
	if i.LeaderIDGTE != nil {
		predicates = append(predicates, user.LeaderIDGTE(*i.LeaderIDGTE))
	}
	if i.LeaderIDLT != nil {
		predicates = append(predicates, user.LeaderIDLT(*i.LeaderIDLT))
	}
	if i.LeaderIDLTE != nil {
		predicates = append(predicates, user.LeaderIDLTE(*i.LeaderIDLTE))
	}
	if i.LeaderIDIsNil {
		predicates = append(predicates, user.LeaderIDIsNil())
	}
	if i.LeaderIDNotNil {
		predicates = append(predicates, user.LeaderIDNotNil())
	}

	if i.HasAreas != nil {
		p := user.HasAreas()
		if !*i.HasAreas {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreasWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreasWith))
		for _, w := range i.HasAreasWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreasWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasAreasWith(with...))
	}
	if i.HasCustomers != nil {
		p := user.HasCustomers()
		if !*i.HasCustomers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomersWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomersWith))
		for _, w := range i.HasCustomersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCustomersWith(with...))
	}
	if i.HasLeader != nil {
		p := user.HasLeader()
		if !*i.HasLeader {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLeaderWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLeaderWith))
		for _, w := range i.HasLeaderWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLeaderWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLeaderWith(with...))
	}
	if i.HasTeamMembers != nil {
		p := user.HasTeamMembers()
		if !*i.HasTeamMembers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeamMembersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasTeamMembersWith))
		for _, w := range i.HasTeamMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTeamMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTeamMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
