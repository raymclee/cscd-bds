// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/potentialtender"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectstaff"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"
)

// AreaWhereInput represents a where input for filtering Area queries.
type AreaWhereInput struct {
	Predicates []predicate.Area  `json:"-"`
	Not        *AreaWhereInput   `json:"not,omitempty"`
	Or         []*AreaWhereInput `json:"or,omitempty"`
	And        []*AreaWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "leader_chat_id" field predicates.
	LeaderChatID             *string  `json:"leaderChatID,omitempty"`
	LeaderChatIDNEQ          *string  `json:"leaderChatIDNEQ,omitempty"`
	LeaderChatIDIn           []string `json:"leaderChatIDIn,omitempty"`
	LeaderChatIDNotIn        []string `json:"leaderChatIDNotIn,omitempty"`
	LeaderChatIDGT           *string  `json:"leaderChatIDGT,omitempty"`
	LeaderChatIDGTE          *string  `json:"leaderChatIDGTE,omitempty"`
	LeaderChatIDLT           *string  `json:"leaderChatIDLT,omitempty"`
	LeaderChatIDLTE          *string  `json:"leaderChatIDLTE,omitempty"`
	LeaderChatIDContains     *string  `json:"leaderChatIDContains,omitempty"`
	LeaderChatIDHasPrefix    *string  `json:"leaderChatIDHasPrefix,omitempty"`
	LeaderChatIDHasSuffix    *string  `json:"leaderChatIDHasSuffix,omitempty"`
	LeaderChatIDIsNil        bool     `json:"leaderChatIDIsNil,omitempty"`
	LeaderChatIDNotNil       bool     `json:"leaderChatIDNotNil,omitempty"`
	LeaderChatIDEqualFold    *string  `json:"leaderChatIDEqualFold,omitempty"`
	LeaderChatIDContainsFold *string  `json:"leaderChatIDContainsFold,omitempty"`

	// "sales_chat_id" field predicates.
	SalesChatID             *string  `json:"salesChatID,omitempty"`
	SalesChatIDNEQ          *string  `json:"salesChatIDNEQ,omitempty"`
	SalesChatIDIn           []string `json:"salesChatIDIn,omitempty"`
	SalesChatIDNotIn        []string `json:"salesChatIDNotIn,omitempty"`
	SalesChatIDGT           *string  `json:"salesChatIDGT,omitempty"`
	SalesChatIDGTE          *string  `json:"salesChatIDGTE,omitempty"`
	SalesChatIDLT           *string  `json:"salesChatIDLT,omitempty"`
	SalesChatIDLTE          *string  `json:"salesChatIDLTE,omitempty"`
	SalesChatIDContains     *string  `json:"salesChatIDContains,omitempty"`
	SalesChatIDHasPrefix    *string  `json:"salesChatIDHasPrefix,omitempty"`
	SalesChatIDHasSuffix    *string  `json:"salesChatIDHasSuffix,omitempty"`
	SalesChatIDIsNil        bool     `json:"salesChatIDIsNil,omitempty"`
	SalesChatIDNotNil       bool     `json:"salesChatIDNotNil,omitempty"`
	SalesChatIDEqualFold    *string  `json:"salesChatIDEqualFold,omitempty"`
	SalesChatIDContainsFold *string  `json:"salesChatIDContainsFold,omitempty"`

	// "customers" edge predicates.
	HasCustomers     *bool                 `json:"hasCustomers,omitempty"`
	HasCustomersWith []*CustomerWhereInput `json:"hasCustomersWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "provinces" edge predicates.
	HasProvinces     *bool                 `json:"hasProvinces,omitempty"`
	HasProvincesWith []*ProvinceWhereInput `json:"hasProvincesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AreaWhereInput) AddPredicates(predicates ...predicate.Area) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AreaWhereInput filter on the AreaQuery builder.
func (i *AreaWhereInput) Filter(q *AreaQuery) (*AreaQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAreaWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAreaWhereInput is returned in case the AreaWhereInput is empty.
var ErrEmptyAreaWhereInput = errors.New("ent: empty predicate AreaWhereInput")

// P returns a predicate for filtering areas.
// An error is returned if the input is empty or invalid.
func (i *AreaWhereInput) P() (predicate.Area, error) {
	var predicates []predicate.Area
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, area.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Area, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, area.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Area, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, area.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, area.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, area.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, area.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, area.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, area.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, area.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, area.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, area.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, area.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, area.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, area.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, area.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, area.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, area.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, area.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, area.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, area.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, area.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, area.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, area.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, area.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, area.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, area.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, area.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, area.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, area.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, area.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, area.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, area.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, area.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, area.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, area.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, area.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, area.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, area.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, area.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, area.NameContainsFold(*i.NameContainsFold))
	}
	if i.Code != nil {
		predicates = append(predicates, area.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, area.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, area.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, area.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, area.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, area.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, area.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, area.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, area.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, area.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, area.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, area.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, area.CodeContainsFold(*i.CodeContainsFold))
	}
	if i.LeaderChatID != nil {
		predicates = append(predicates, area.LeaderChatIDEQ(*i.LeaderChatID))
	}
	if i.LeaderChatIDNEQ != nil {
		predicates = append(predicates, area.LeaderChatIDNEQ(*i.LeaderChatIDNEQ))
	}
	if len(i.LeaderChatIDIn) > 0 {
		predicates = append(predicates, area.LeaderChatIDIn(i.LeaderChatIDIn...))
	}
	if len(i.LeaderChatIDNotIn) > 0 {
		predicates = append(predicates, area.LeaderChatIDNotIn(i.LeaderChatIDNotIn...))
	}
	if i.LeaderChatIDGT != nil {
		predicates = append(predicates, area.LeaderChatIDGT(*i.LeaderChatIDGT))
	}
	if i.LeaderChatIDGTE != nil {
		predicates = append(predicates, area.LeaderChatIDGTE(*i.LeaderChatIDGTE))
	}
	if i.LeaderChatIDLT != nil {
		predicates = append(predicates, area.LeaderChatIDLT(*i.LeaderChatIDLT))
	}
	if i.LeaderChatIDLTE != nil {
		predicates = append(predicates, area.LeaderChatIDLTE(*i.LeaderChatIDLTE))
	}
	if i.LeaderChatIDContains != nil {
		predicates = append(predicates, area.LeaderChatIDContains(*i.LeaderChatIDContains))
	}
	if i.LeaderChatIDHasPrefix != nil {
		predicates = append(predicates, area.LeaderChatIDHasPrefix(*i.LeaderChatIDHasPrefix))
	}
	if i.LeaderChatIDHasSuffix != nil {
		predicates = append(predicates, area.LeaderChatIDHasSuffix(*i.LeaderChatIDHasSuffix))
	}
	if i.LeaderChatIDIsNil {
		predicates = append(predicates, area.LeaderChatIDIsNil())
	}
	if i.LeaderChatIDNotNil {
		predicates = append(predicates, area.LeaderChatIDNotNil())
	}
	if i.LeaderChatIDEqualFold != nil {
		predicates = append(predicates, area.LeaderChatIDEqualFold(*i.LeaderChatIDEqualFold))
	}
	if i.LeaderChatIDContainsFold != nil {
		predicates = append(predicates, area.LeaderChatIDContainsFold(*i.LeaderChatIDContainsFold))
	}
	if i.SalesChatID != nil {
		predicates = append(predicates, area.SalesChatIDEQ(*i.SalesChatID))
	}
	if i.SalesChatIDNEQ != nil {
		predicates = append(predicates, area.SalesChatIDNEQ(*i.SalesChatIDNEQ))
	}
	if len(i.SalesChatIDIn) > 0 {
		predicates = append(predicates, area.SalesChatIDIn(i.SalesChatIDIn...))
	}
	if len(i.SalesChatIDNotIn) > 0 {
		predicates = append(predicates, area.SalesChatIDNotIn(i.SalesChatIDNotIn...))
	}
	if i.SalesChatIDGT != nil {
		predicates = append(predicates, area.SalesChatIDGT(*i.SalesChatIDGT))
	}
	if i.SalesChatIDGTE != nil {
		predicates = append(predicates, area.SalesChatIDGTE(*i.SalesChatIDGTE))
	}
	if i.SalesChatIDLT != nil {
		predicates = append(predicates, area.SalesChatIDLT(*i.SalesChatIDLT))
	}
	if i.SalesChatIDLTE != nil {
		predicates = append(predicates, area.SalesChatIDLTE(*i.SalesChatIDLTE))
	}
	if i.SalesChatIDContains != nil {
		predicates = append(predicates, area.SalesChatIDContains(*i.SalesChatIDContains))
	}
	if i.SalesChatIDHasPrefix != nil {
		predicates = append(predicates, area.SalesChatIDHasPrefix(*i.SalesChatIDHasPrefix))
	}
	if i.SalesChatIDHasSuffix != nil {
		predicates = append(predicates, area.SalesChatIDHasSuffix(*i.SalesChatIDHasSuffix))
	}
	if i.SalesChatIDIsNil {
		predicates = append(predicates, area.SalesChatIDIsNil())
	}
	if i.SalesChatIDNotNil {
		predicates = append(predicates, area.SalesChatIDNotNil())
	}
	if i.SalesChatIDEqualFold != nil {
		predicates = append(predicates, area.SalesChatIDEqualFold(*i.SalesChatIDEqualFold))
	}
	if i.SalesChatIDContainsFold != nil {
		predicates = append(predicates, area.SalesChatIDContainsFold(*i.SalesChatIDContainsFold))
	}

	if i.HasCustomers != nil {
		p := area.HasCustomers()
		if !*i.HasCustomers {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomersWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomersWith))
		for _, w := range i.HasCustomersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasCustomersWith(with...))
	}
	if i.HasTenders != nil {
		p := area.HasTenders()
		if !*i.HasTenders {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasTendersWith(with...))
	}
	if i.HasUsers != nil {
		p := area.HasUsers()
		if !*i.HasUsers {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasUsersWith(with...))
	}
	if i.HasProvinces != nil {
		p := area.HasProvinces()
		if !*i.HasProvinces {
			p = area.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvincesWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvincesWith))
		for _, w := range i.HasProvincesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvincesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, area.HasProvincesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAreaWhereInput
	case 1:
		return predicates[0], nil
	default:
		return area.And(predicates...), nil
	}
}

// CityWhereInput represents a where input for filtering City queries.
type CityWhereInput struct {
	Predicates []predicate.City  `json:"-"`
	Not        *CityWhereInput   `json:"not,omitempty"`
	Or         []*CityWhereInput `json:"or,omitempty"`
	And        []*CityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "prov_code" field predicates.
	ProvCode      *int  `json:"provCode,omitempty"`
	ProvCodeNEQ   *int  `json:"provCodeNEQ,omitempty"`
	ProvCodeIn    []int `json:"provCodeIn,omitempty"`
	ProvCodeNotIn []int `json:"provCodeNotIn,omitempty"`
	ProvCodeGT    *int  `json:"provCodeGT,omitempty"`
	ProvCodeGTE   *int  `json:"provCodeGTE,omitempty"`
	ProvCodeLT    *int  `json:"provCodeLT,omitempty"`
	ProvCodeLTE   *int  `json:"provCodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "province_id" field predicates.
	ProvinceID             *xid.ID  `json:"provinceID,omitempty"`
	ProvinceIDNEQ          *xid.ID  `json:"provinceIDNEQ,omitempty"`
	ProvinceIDIn           []xid.ID `json:"provinceIDIn,omitempty"`
	ProvinceIDNotIn        []xid.ID `json:"provinceIDNotIn,omitempty"`
	ProvinceIDGT           *xid.ID  `json:"provinceIDGT,omitempty"`
	ProvinceIDGTE          *xid.ID  `json:"provinceIDGTE,omitempty"`
	ProvinceIDLT           *xid.ID  `json:"provinceIDLT,omitempty"`
	ProvinceIDLTE          *xid.ID  `json:"provinceIDLTE,omitempty"`
	ProvinceIDContains     *xid.ID  `json:"provinceIDContains,omitempty"`
	ProvinceIDHasPrefix    *xid.ID  `json:"provinceIDHasPrefix,omitempty"`
	ProvinceIDHasSuffix    *xid.ID  `json:"provinceIDHasSuffix,omitempty"`
	ProvinceIDEqualFold    *xid.ID  `json:"provinceIDEqualFold,omitempty"`
	ProvinceIDContainsFold *xid.ID  `json:"provinceIDContainsFold,omitempty"`

	// "districts" edge predicates.
	HasDistricts     *bool                 `json:"hasDistricts,omitempty"`
	HasDistrictsWith []*DistrictWhereInput `json:"hasDistrictsWith,omitempty"`

	// "province" edge predicates.
	HasProvince     *bool                 `json:"hasProvince,omitempty"`
	HasProvinceWith []*ProvinceWhereInput `json:"hasProvinceWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CityWhereInput) AddPredicates(predicates ...predicate.City) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CityWhereInput filter on the CityQuery builder.
func (i *CityWhereInput) Filter(q *CityQuery) (*CityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCityWhereInput is returned in case the CityWhereInput is empty.
var ErrEmptyCityWhereInput = errors.New("ent: empty predicate CityWhereInput")

// P returns a predicate for filtering cities.
// An error is returned if the input is empty or invalid.
func (i *CityWhereInput) P() (predicate.City, error) {
	var predicates []predicate.City
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, city.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.City, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, city.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.City, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, city.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, city.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, city.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, city.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, city.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, city.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, city.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, city.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, city.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, city.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, city.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, city.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, city.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, city.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, city.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, city.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, city.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, city.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, city.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, city.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, city.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, city.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, city.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, city.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, city.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, city.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, city.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, city.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, city.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, city.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, city.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, city.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, city.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.ProvCode != nil {
		predicates = append(predicates, city.ProvCodeEQ(*i.ProvCode))
	}
	if i.ProvCodeNEQ != nil {
		predicates = append(predicates, city.ProvCodeNEQ(*i.ProvCodeNEQ))
	}
	if len(i.ProvCodeIn) > 0 {
		predicates = append(predicates, city.ProvCodeIn(i.ProvCodeIn...))
	}
	if len(i.ProvCodeNotIn) > 0 {
		predicates = append(predicates, city.ProvCodeNotIn(i.ProvCodeNotIn...))
	}
	if i.ProvCodeGT != nil {
		predicates = append(predicates, city.ProvCodeGT(*i.ProvCodeGT))
	}
	if i.ProvCodeGTE != nil {
		predicates = append(predicates, city.ProvCodeGTE(*i.ProvCodeGTE))
	}
	if i.ProvCodeLT != nil {
		predicates = append(predicates, city.ProvCodeLT(*i.ProvCodeLT))
	}
	if i.ProvCodeLTE != nil {
		predicates = append(predicates, city.ProvCodeLTE(*i.ProvCodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, city.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, city.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, city.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, city.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, city.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, city.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, city.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, city.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, city.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, city.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, city.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, city.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, city.NameContainsFold(*i.NameContainsFold))
	}
	if i.ProvinceID != nil {
		predicates = append(predicates, city.ProvinceIDEQ(*i.ProvinceID))
	}
	if i.ProvinceIDNEQ != nil {
		predicates = append(predicates, city.ProvinceIDNEQ(*i.ProvinceIDNEQ))
	}
	if len(i.ProvinceIDIn) > 0 {
		predicates = append(predicates, city.ProvinceIDIn(i.ProvinceIDIn...))
	}
	if len(i.ProvinceIDNotIn) > 0 {
		predicates = append(predicates, city.ProvinceIDNotIn(i.ProvinceIDNotIn...))
	}
	if i.ProvinceIDGT != nil {
		predicates = append(predicates, city.ProvinceIDGT(*i.ProvinceIDGT))
	}
	if i.ProvinceIDGTE != nil {
		predicates = append(predicates, city.ProvinceIDGTE(*i.ProvinceIDGTE))
	}
	if i.ProvinceIDLT != nil {
		predicates = append(predicates, city.ProvinceIDLT(*i.ProvinceIDLT))
	}
	if i.ProvinceIDLTE != nil {
		predicates = append(predicates, city.ProvinceIDLTE(*i.ProvinceIDLTE))
	}
	if i.ProvinceIDContains != nil {
		predicates = append(predicates, city.ProvinceIDContains(*i.ProvinceIDContains))
	}
	if i.ProvinceIDHasPrefix != nil {
		predicates = append(predicates, city.ProvinceIDHasPrefix(*i.ProvinceIDHasPrefix))
	}
	if i.ProvinceIDHasSuffix != nil {
		predicates = append(predicates, city.ProvinceIDHasSuffix(*i.ProvinceIDHasSuffix))
	}
	if i.ProvinceIDEqualFold != nil {
		predicates = append(predicates, city.ProvinceIDEqualFold(*i.ProvinceIDEqualFold))
	}
	if i.ProvinceIDContainsFold != nil {
		predicates = append(predicates, city.ProvinceIDContainsFold(*i.ProvinceIDContainsFold))
	}

	if i.HasDistricts != nil {
		p := city.HasDistricts()
		if !*i.HasDistricts {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictsWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictsWith))
		for _, w := range i.HasDistrictsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasDistrictsWith(with...))
	}
	if i.HasProvince != nil {
		p := city.HasProvince()
		if !*i.HasProvince {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvinceWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvinceWith))
		for _, w := range i.HasProvinceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvinceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasProvinceWith(with...))
	}
	if i.HasTenders != nil {
		p := city.HasTenders()
		if !*i.HasTenders {
			p = city.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, city.HasTendersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return city.And(predicates...), nil
	}
}

// CompetitorWhereInput represents a where input for filtering Competitor queries.
type CompetitorWhereInput struct {
	Predicates []predicate.Competitor  `json:"-"`
	Not        *CompetitorWhereInput   `json:"not,omitempty"`
	Or         []*CompetitorWhereInput `json:"or,omitempty"`
	And        []*CompetitorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "short_name" field predicates.
	ShortName             *string  `json:"shortName,omitempty"`
	ShortNameNEQ          *string  `json:"shortNameNEQ,omitempty"`
	ShortNameIn           []string `json:"shortNameIn,omitempty"`
	ShortNameNotIn        []string `json:"shortNameNotIn,omitempty"`
	ShortNameGT           *string  `json:"shortNameGT,omitempty"`
	ShortNameGTE          *string  `json:"shortNameGTE,omitempty"`
	ShortNameLT           *string  `json:"shortNameLT,omitempty"`
	ShortNameLTE          *string  `json:"shortNameLTE,omitempty"`
	ShortNameContains     *string  `json:"shortNameContains,omitempty"`
	ShortNameHasPrefix    *string  `json:"shortNameHasPrefix,omitempty"`
	ShortNameHasSuffix    *string  `json:"shortNameHasSuffix,omitempty"`
	ShortNameEqualFold    *string  `json:"shortNameEqualFold,omitempty"`
	ShortNameContainsFold *string  `json:"shortNameContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "won_tenders" edge predicates.
	HasWonTenders     *bool               `json:"hasWonTenders,omitempty"`
	HasWonTendersWith []*TenderWhereInput `json:"hasWonTendersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CompetitorWhereInput) AddPredicates(predicates ...predicate.Competitor) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CompetitorWhereInput filter on the CompetitorQuery builder.
func (i *CompetitorWhereInput) Filter(q *CompetitorQuery) (*CompetitorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCompetitorWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCompetitorWhereInput is returned in case the CompetitorWhereInput is empty.
var ErrEmptyCompetitorWhereInput = errors.New("ent: empty predicate CompetitorWhereInput")

// P returns a predicate for filtering competitors.
// An error is returned if the input is empty or invalid.
func (i *CompetitorWhereInput) P() (predicate.Competitor, error) {
	var predicates []predicate.Competitor
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, competitor.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Competitor, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, competitor.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Competitor, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, competitor.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, competitor.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, competitor.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, competitor.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, competitor.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, competitor.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, competitor.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, competitor.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, competitor.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, competitor.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, competitor.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, competitor.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, competitor.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, competitor.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, competitor.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, competitor.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, competitor.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, competitor.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, competitor.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, competitor.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, competitor.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, competitor.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, competitor.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, competitor.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, competitor.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.ShortName != nil {
		predicates = append(predicates, competitor.ShortNameEQ(*i.ShortName))
	}
	if i.ShortNameNEQ != nil {
		predicates = append(predicates, competitor.ShortNameNEQ(*i.ShortNameNEQ))
	}
	if len(i.ShortNameIn) > 0 {
		predicates = append(predicates, competitor.ShortNameIn(i.ShortNameIn...))
	}
	if len(i.ShortNameNotIn) > 0 {
		predicates = append(predicates, competitor.ShortNameNotIn(i.ShortNameNotIn...))
	}
	if i.ShortNameGT != nil {
		predicates = append(predicates, competitor.ShortNameGT(*i.ShortNameGT))
	}
	if i.ShortNameGTE != nil {
		predicates = append(predicates, competitor.ShortNameGTE(*i.ShortNameGTE))
	}
	if i.ShortNameLT != nil {
		predicates = append(predicates, competitor.ShortNameLT(*i.ShortNameLT))
	}
	if i.ShortNameLTE != nil {
		predicates = append(predicates, competitor.ShortNameLTE(*i.ShortNameLTE))
	}
	if i.ShortNameContains != nil {
		predicates = append(predicates, competitor.ShortNameContains(*i.ShortNameContains))
	}
	if i.ShortNameHasPrefix != nil {
		predicates = append(predicates, competitor.ShortNameHasPrefix(*i.ShortNameHasPrefix))
	}
	if i.ShortNameHasSuffix != nil {
		predicates = append(predicates, competitor.ShortNameHasSuffix(*i.ShortNameHasSuffix))
	}
	if i.ShortNameEqualFold != nil {
		predicates = append(predicates, competitor.ShortNameEqualFold(*i.ShortNameEqualFold))
	}
	if i.ShortNameContainsFold != nil {
		predicates = append(predicates, competitor.ShortNameContainsFold(*i.ShortNameContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, competitor.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, competitor.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, competitor.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, competitor.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, competitor.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, competitor.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, competitor.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, competitor.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, competitor.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, competitor.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, competitor.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, competitor.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, competitor.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasWonTenders != nil {
		p := competitor.HasWonTenders()
		if !*i.HasWonTenders {
			p = competitor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWonTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasWonTendersWith))
		for _, w := range i.HasWonTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWonTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, competitor.HasWonTendersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCompetitorWhereInput
	case 1:
		return predicates[0], nil
	default:
		return competitor.And(predicates...), nil
	}
}

// CountryWhereInput represents a where input for filtering Country queries.
type CountryWhereInput struct {
	Predicates []predicate.Country  `json:"-"`
	Not        *CountryWhereInput   `json:"not,omitempty"`
	Or         []*CountryWhereInput `json:"or,omitempty"`
	And        []*CountryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "provinces" edge predicates.
	HasProvinces     *bool                 `json:"hasProvinces,omitempty"`
	HasProvincesWith []*ProvinceWhereInput `json:"hasProvincesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CountryWhereInput) AddPredicates(predicates ...predicate.Country) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CountryWhereInput filter on the CountryQuery builder.
func (i *CountryWhereInput) Filter(q *CountryQuery) (*CountryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCountryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCountryWhereInput is returned in case the CountryWhereInput is empty.
var ErrEmptyCountryWhereInput = errors.New("ent: empty predicate CountryWhereInput")

// P returns a predicate for filtering countries.
// An error is returned if the input is empty or invalid.
func (i *CountryWhereInput) P() (predicate.Country, error) {
	var predicates []predicate.Country
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, country.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Country, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, country.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Country, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, country.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, country.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, country.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, country.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, country.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, country.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, country.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, country.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, country.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, country.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, country.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, country.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, country.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, country.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, country.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, country.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, country.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, country.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, country.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, country.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, country.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, country.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, country.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, country.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, country.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, country.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, country.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, country.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, country.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, country.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, country.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, country.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, country.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, country.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, country.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, country.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, country.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, country.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, country.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, country.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, country.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, country.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, country.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, country.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, country.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, country.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasProvinces != nil {
		p := country.HasProvinces()
		if !*i.HasProvinces {
			p = country.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvincesWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvincesWith))
		for _, w := range i.HasProvincesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvincesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, country.HasProvincesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCountryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return country.And(predicates...), nil
	}
}

// CustomerWhereInput represents a where input for filtering Customer queries.
type CustomerWhereInput struct {
	Predicates []predicate.Customer  `json:"-"`
	Not        *CustomerWhereInput   `json:"not,omitempty"`
	Or         []*CustomerWhereInput `json:"or,omitempty"`
	And        []*CustomerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "is_approved" field predicates.
	IsApproved    *bool `json:"isApproved,omitempty"`
	IsApprovedNEQ *bool `json:"isApprovedNEQ,omitempty"`

	// "owner_type" field predicates.
	OwnerType       *int  `json:"ownerType,omitempty"`
	OwnerTypeNEQ    *int  `json:"ownerTypeNEQ,omitempty"`
	OwnerTypeIn     []int `json:"ownerTypeIn,omitempty"`
	OwnerTypeNotIn  []int `json:"ownerTypeNotIn,omitempty"`
	OwnerTypeGT     *int  `json:"ownerTypeGT,omitempty"`
	OwnerTypeGTE    *int  `json:"ownerTypeGTE,omitempty"`
	OwnerTypeLT     *int  `json:"ownerTypeLT,omitempty"`
	OwnerTypeLTE    *int  `json:"ownerTypeLTE,omitempty"`
	OwnerTypeIsNil  bool  `json:"ownerTypeIsNil,omitempty"`
	OwnerTypeNotNil bool  `json:"ownerTypeNotNil,omitempty"`

	// "industry" field predicates.
	Industry       *int  `json:"industry,omitempty"`
	IndustryNEQ    *int  `json:"industryNEQ,omitempty"`
	IndustryIn     []int `json:"industryIn,omitempty"`
	IndustryNotIn  []int `json:"industryNotIn,omitempty"`
	IndustryGT     *int  `json:"industryGT,omitempty"`
	IndustryGTE    *int  `json:"industryGTE,omitempty"`
	IndustryLT     *int  `json:"industryLT,omitempty"`
	IndustryLTE    *int  `json:"industryLTE,omitempty"`
	IndustryIsNil  bool  `json:"industryIsNil,omitempty"`
	IndustryNotNil bool  `json:"industryNotNil,omitempty"`

	// "size" field predicates.
	Size       *int  `json:"size,omitempty"`
	SizeNEQ    *int  `json:"sizeNEQ,omitempty"`
	SizeIn     []int `json:"sizeIn,omitempty"`
	SizeNotIn  []int `json:"sizeNotIn,omitempty"`
	SizeGT     *int  `json:"sizeGT,omitempty"`
	SizeGTE    *int  `json:"sizeGTE,omitempty"`
	SizeLT     *int  `json:"sizeLT,omitempty"`
	SizeLTE    *int  `json:"sizeLTE,omitempty"`
	SizeIsNil  bool  `json:"sizeIsNil,omitempty"`
	SizeNotNil bool  `json:"sizeNotNil,omitempty"`

	// "contact_person" field predicates.
	ContactPerson             *string  `json:"contactPerson,omitempty"`
	ContactPersonNEQ          *string  `json:"contactPersonNEQ,omitempty"`
	ContactPersonIn           []string `json:"contactPersonIn,omitempty"`
	ContactPersonNotIn        []string `json:"contactPersonNotIn,omitempty"`
	ContactPersonGT           *string  `json:"contactPersonGT,omitempty"`
	ContactPersonGTE          *string  `json:"contactPersonGTE,omitempty"`
	ContactPersonLT           *string  `json:"contactPersonLT,omitempty"`
	ContactPersonLTE          *string  `json:"contactPersonLTE,omitempty"`
	ContactPersonContains     *string  `json:"contactPersonContains,omitempty"`
	ContactPersonHasPrefix    *string  `json:"contactPersonHasPrefix,omitempty"`
	ContactPersonHasSuffix    *string  `json:"contactPersonHasSuffix,omitempty"`
	ContactPersonIsNil        bool     `json:"contactPersonIsNil,omitempty"`
	ContactPersonNotNil       bool     `json:"contactPersonNotNil,omitempty"`
	ContactPersonEqualFold    *string  `json:"contactPersonEqualFold,omitempty"`
	ContactPersonContainsFold *string  `json:"contactPersonContainsFold,omitempty"`

	// "contact_person_position" field predicates.
	ContactPersonPosition             *string  `json:"contactPersonPosition,omitempty"`
	ContactPersonPositionNEQ          *string  `json:"contactPersonPositionNEQ,omitempty"`
	ContactPersonPositionIn           []string `json:"contactPersonPositionIn,omitempty"`
	ContactPersonPositionNotIn        []string `json:"contactPersonPositionNotIn,omitempty"`
	ContactPersonPositionGT           *string  `json:"contactPersonPositionGT,omitempty"`
	ContactPersonPositionGTE          *string  `json:"contactPersonPositionGTE,omitempty"`
	ContactPersonPositionLT           *string  `json:"contactPersonPositionLT,omitempty"`
	ContactPersonPositionLTE          *string  `json:"contactPersonPositionLTE,omitempty"`
	ContactPersonPositionContains     *string  `json:"contactPersonPositionContains,omitempty"`
	ContactPersonPositionHasPrefix    *string  `json:"contactPersonPositionHasPrefix,omitempty"`
	ContactPersonPositionHasSuffix    *string  `json:"contactPersonPositionHasSuffix,omitempty"`
	ContactPersonPositionIsNil        bool     `json:"contactPersonPositionIsNil,omitempty"`
	ContactPersonPositionNotNil       bool     `json:"contactPersonPositionNotNil,omitempty"`
	ContactPersonPositionEqualFold    *string  `json:"contactPersonPositionEqualFold,omitempty"`
	ContactPersonPositionContainsFold *string  `json:"contactPersonPositionContainsFold,omitempty"`

	// "contact_person_phone" field predicates.
	ContactPersonPhone             *string  `json:"contactPersonPhone,omitempty"`
	ContactPersonPhoneNEQ          *string  `json:"contactPersonPhoneNEQ,omitempty"`
	ContactPersonPhoneIn           []string `json:"contactPersonPhoneIn,omitempty"`
	ContactPersonPhoneNotIn        []string `json:"contactPersonPhoneNotIn,omitempty"`
	ContactPersonPhoneGT           *string  `json:"contactPersonPhoneGT,omitempty"`
	ContactPersonPhoneGTE          *string  `json:"contactPersonPhoneGTE,omitempty"`
	ContactPersonPhoneLT           *string  `json:"contactPersonPhoneLT,omitempty"`
	ContactPersonPhoneLTE          *string  `json:"contactPersonPhoneLTE,omitempty"`
	ContactPersonPhoneContains     *string  `json:"contactPersonPhoneContains,omitempty"`
	ContactPersonPhoneHasPrefix    *string  `json:"contactPersonPhoneHasPrefix,omitempty"`
	ContactPersonPhoneHasSuffix    *string  `json:"contactPersonPhoneHasSuffix,omitempty"`
	ContactPersonPhoneIsNil        bool     `json:"contactPersonPhoneIsNil,omitempty"`
	ContactPersonPhoneNotNil       bool     `json:"contactPersonPhoneNotNil,omitempty"`
	ContactPersonPhoneEqualFold    *string  `json:"contactPersonPhoneEqualFold,omitempty"`
	ContactPersonPhoneContainsFold *string  `json:"contactPersonPhoneContainsFold,omitempty"`

	// "contact_person_email" field predicates.
	ContactPersonEmail             *string  `json:"contactPersonEmail,omitempty"`
	ContactPersonEmailNEQ          *string  `json:"contactPersonEmailNEQ,omitempty"`
	ContactPersonEmailIn           []string `json:"contactPersonEmailIn,omitempty"`
	ContactPersonEmailNotIn        []string `json:"contactPersonEmailNotIn,omitempty"`
	ContactPersonEmailGT           *string  `json:"contactPersonEmailGT,omitempty"`
	ContactPersonEmailGTE          *string  `json:"contactPersonEmailGTE,omitempty"`
	ContactPersonEmailLT           *string  `json:"contactPersonEmailLT,omitempty"`
	ContactPersonEmailLTE          *string  `json:"contactPersonEmailLTE,omitempty"`
	ContactPersonEmailContains     *string  `json:"contactPersonEmailContains,omitempty"`
	ContactPersonEmailHasPrefix    *string  `json:"contactPersonEmailHasPrefix,omitempty"`
	ContactPersonEmailHasSuffix    *string  `json:"contactPersonEmailHasSuffix,omitempty"`
	ContactPersonEmailIsNil        bool     `json:"contactPersonEmailIsNil,omitempty"`
	ContactPersonEmailNotNil       bool     `json:"contactPersonEmailNotNil,omitempty"`
	ContactPersonEmailEqualFold    *string  `json:"contactPersonEmailEqualFold,omitempty"`
	ContactPersonEmailContainsFold *string  `json:"contactPersonEmailContainsFold,omitempty"`

	// "area_id" field predicates.
	AreaID             *xid.ID  `json:"areaID,omitempty"`
	AreaIDNEQ          *xid.ID  `json:"areaIDNEQ,omitempty"`
	AreaIDIn           []xid.ID `json:"areaIDIn,omitempty"`
	AreaIDNotIn        []xid.ID `json:"areaIDNotIn,omitempty"`
	AreaIDGT           *xid.ID  `json:"areaIDGT,omitempty"`
	AreaIDGTE          *xid.ID  `json:"areaIDGTE,omitempty"`
	AreaIDLT           *xid.ID  `json:"areaIDLT,omitempty"`
	AreaIDLTE          *xid.ID  `json:"areaIDLTE,omitempty"`
	AreaIDContains     *xid.ID  `json:"areaIDContains,omitempty"`
	AreaIDHasPrefix    *xid.ID  `json:"areaIDHasPrefix,omitempty"`
	AreaIDHasSuffix    *xid.ID  `json:"areaIDHasSuffix,omitempty"`
	AreaIDEqualFold    *xid.ID  `json:"areaIDEqualFold,omitempty"`
	AreaIDContainsFold *xid.ID  `json:"areaIDContainsFold,omitempty"`

	// "sales_id" field predicates.
	SalesID             *xid.ID  `json:"salesID,omitempty"`
	SalesIDNEQ          *xid.ID  `json:"salesIDNEQ,omitempty"`
	SalesIDIn           []xid.ID `json:"salesIDIn,omitempty"`
	SalesIDNotIn        []xid.ID `json:"salesIDNotIn,omitempty"`
	SalesIDGT           *xid.ID  `json:"salesIDGT,omitempty"`
	SalesIDGTE          *xid.ID  `json:"salesIDGTE,omitempty"`
	SalesIDLT           *xid.ID  `json:"salesIDLT,omitempty"`
	SalesIDLTE          *xid.ID  `json:"salesIDLTE,omitempty"`
	SalesIDContains     *xid.ID  `json:"salesIDContains,omitempty"`
	SalesIDHasPrefix    *xid.ID  `json:"salesIDHasPrefix,omitempty"`
	SalesIDHasSuffix    *xid.ID  `json:"salesIDHasSuffix,omitempty"`
	SalesIDIsNil        bool     `json:"salesIDIsNil,omitempty"`
	SalesIDNotNil       bool     `json:"salesIDNotNil,omitempty"`
	SalesIDEqualFold    *xid.ID  `json:"salesIDEqualFold,omitempty"`
	SalesIDContainsFold *xid.ID  `json:"salesIDContainsFold,omitempty"`

	// "created_by_id" field predicates.
	CreatedByID             *xid.ID  `json:"createdByID,omitempty"`
	CreatedByIDNEQ          *xid.ID  `json:"createdByIDNEQ,omitempty"`
	CreatedByIDIn           []xid.ID `json:"createdByIDIn,omitempty"`
	CreatedByIDNotIn        []xid.ID `json:"createdByIDNotIn,omitempty"`
	CreatedByIDGT           *xid.ID  `json:"createdByIDGT,omitempty"`
	CreatedByIDGTE          *xid.ID  `json:"createdByIDGTE,omitempty"`
	CreatedByIDLT           *xid.ID  `json:"createdByIDLT,omitempty"`
	CreatedByIDLTE          *xid.ID  `json:"createdByIDLTE,omitempty"`
	CreatedByIDContains     *xid.ID  `json:"createdByIDContains,omitempty"`
	CreatedByIDHasPrefix    *xid.ID  `json:"createdByIDHasPrefix,omitempty"`
	CreatedByIDHasSuffix    *xid.ID  `json:"createdByIDHasSuffix,omitempty"`
	CreatedByIDIsNil        bool     `json:"createdByIDIsNil,omitempty"`
	CreatedByIDNotNil       bool     `json:"createdByIDNotNil,omitempty"`
	CreatedByIDEqualFold    *xid.ID  `json:"createdByIDEqualFold,omitempty"`
	CreatedByIDContainsFold *xid.ID  `json:"createdByIDContainsFold,omitempty"`

	// "approver_id" field predicates.
	ApproverID             *xid.ID  `json:"approverID,omitempty"`
	ApproverIDNEQ          *xid.ID  `json:"approverIDNEQ,omitempty"`
	ApproverIDIn           []xid.ID `json:"approverIDIn,omitempty"`
	ApproverIDNotIn        []xid.ID `json:"approverIDNotIn,omitempty"`
	ApproverIDGT           *xid.ID  `json:"approverIDGT,omitempty"`
	ApproverIDGTE          *xid.ID  `json:"approverIDGTE,omitempty"`
	ApproverIDLT           *xid.ID  `json:"approverIDLT,omitempty"`
	ApproverIDLTE          *xid.ID  `json:"approverIDLTE,omitempty"`
	ApproverIDContains     *xid.ID  `json:"approverIDContains,omitempty"`
	ApproverIDHasPrefix    *xid.ID  `json:"approverIDHasPrefix,omitempty"`
	ApproverIDHasSuffix    *xid.ID  `json:"approverIDHasSuffix,omitempty"`
	ApproverIDIsNil        bool     `json:"approverIDIsNil,omitempty"`
	ApproverIDNotNil       bool     `json:"approverIDNotNil,omitempty"`
	ApproverIDEqualFold    *xid.ID  `json:"approverIDEqualFold,omitempty"`
	ApproverIDContainsFold *xid.ID  `json:"approverIDContainsFold,omitempty"`

	// "area" edge predicates.
	HasArea     *bool             `json:"hasArea,omitempty"`
	HasAreaWith []*AreaWhereInput `json:"hasAreaWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "sales" edge predicates.
	HasSales     *bool             `json:"hasSales,omitempty"`
	HasSalesWith []*UserWhereInput `json:"hasSalesWith,omitempty"`

	// "created_by" edge predicates.
	HasCreatedBy     *bool             `json:"hasCreatedBy,omitempty"`
	HasCreatedByWith []*UserWhereInput `json:"hasCreatedByWith,omitempty"`

	// "approver" edge predicates.
	HasApprover     *bool             `json:"hasApprover,omitempty"`
	HasApproverWith []*UserWhereInput `json:"hasApproverWith,omitempty"`

	// "visit_records" edge predicates.
	HasVisitRecords     *bool                    `json:"hasVisitRecords,omitempty"`
	HasVisitRecordsWith []*VisitRecordWhereInput `json:"hasVisitRecordsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CustomerWhereInput) AddPredicates(predicates ...predicate.Customer) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CustomerWhereInput filter on the CustomerQuery builder.
func (i *CustomerWhereInput) Filter(q *CustomerQuery) (*CustomerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCustomerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCustomerWhereInput is returned in case the CustomerWhereInput is empty.
var ErrEmptyCustomerWhereInput = errors.New("ent: empty predicate CustomerWhereInput")

// P returns a predicate for filtering customers.
// An error is returned if the input is empty or invalid.
func (i *CustomerWhereInput) P() (predicate.Customer, error) {
	var predicates []predicate.Customer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, customer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Customer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, customer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Customer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, customer.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, customer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, customer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, customer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, customer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, customer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, customer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, customer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, customer.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, customer.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, customer.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, customer.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, customer.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, customer.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, customer.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, customer.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, customer.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, customer.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, customer.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, customer.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, customer.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, customer.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, customer.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, customer.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, customer.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, customer.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, customer.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, customer.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, customer.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, customer.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, customer.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, customer.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, customer.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, customer.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, customer.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, customer.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, customer.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, customer.NameContainsFold(*i.NameContainsFold))
	}
	if i.IsApproved != nil {
		predicates = append(predicates, customer.IsApprovedEQ(*i.IsApproved))
	}
	if i.IsApprovedNEQ != nil {
		predicates = append(predicates, customer.IsApprovedNEQ(*i.IsApprovedNEQ))
	}
	if i.OwnerType != nil {
		predicates = append(predicates, customer.OwnerTypeEQ(*i.OwnerType))
	}
	if i.OwnerTypeNEQ != nil {
		predicates = append(predicates, customer.OwnerTypeNEQ(*i.OwnerTypeNEQ))
	}
	if len(i.OwnerTypeIn) > 0 {
		predicates = append(predicates, customer.OwnerTypeIn(i.OwnerTypeIn...))
	}
	if len(i.OwnerTypeNotIn) > 0 {
		predicates = append(predicates, customer.OwnerTypeNotIn(i.OwnerTypeNotIn...))
	}
	if i.OwnerTypeGT != nil {
		predicates = append(predicates, customer.OwnerTypeGT(*i.OwnerTypeGT))
	}
	if i.OwnerTypeGTE != nil {
		predicates = append(predicates, customer.OwnerTypeGTE(*i.OwnerTypeGTE))
	}
	if i.OwnerTypeLT != nil {
		predicates = append(predicates, customer.OwnerTypeLT(*i.OwnerTypeLT))
	}
	if i.OwnerTypeLTE != nil {
		predicates = append(predicates, customer.OwnerTypeLTE(*i.OwnerTypeLTE))
	}
	if i.OwnerTypeIsNil {
		predicates = append(predicates, customer.OwnerTypeIsNil())
	}
	if i.OwnerTypeNotNil {
		predicates = append(predicates, customer.OwnerTypeNotNil())
	}
	if i.Industry != nil {
		predicates = append(predicates, customer.IndustryEQ(*i.Industry))
	}
	if i.IndustryNEQ != nil {
		predicates = append(predicates, customer.IndustryNEQ(*i.IndustryNEQ))
	}
	if len(i.IndustryIn) > 0 {
		predicates = append(predicates, customer.IndustryIn(i.IndustryIn...))
	}
	if len(i.IndustryNotIn) > 0 {
		predicates = append(predicates, customer.IndustryNotIn(i.IndustryNotIn...))
	}
	if i.IndustryGT != nil {
		predicates = append(predicates, customer.IndustryGT(*i.IndustryGT))
	}
	if i.IndustryGTE != nil {
		predicates = append(predicates, customer.IndustryGTE(*i.IndustryGTE))
	}
	if i.IndustryLT != nil {
		predicates = append(predicates, customer.IndustryLT(*i.IndustryLT))
	}
	if i.IndustryLTE != nil {
		predicates = append(predicates, customer.IndustryLTE(*i.IndustryLTE))
	}
	if i.IndustryIsNil {
		predicates = append(predicates, customer.IndustryIsNil())
	}
	if i.IndustryNotNil {
		predicates = append(predicates, customer.IndustryNotNil())
	}
	if i.Size != nil {
		predicates = append(predicates, customer.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, customer.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, customer.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, customer.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, customer.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, customer.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, customer.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, customer.SizeLTE(*i.SizeLTE))
	}
	if i.SizeIsNil {
		predicates = append(predicates, customer.SizeIsNil())
	}
	if i.SizeNotNil {
		predicates = append(predicates, customer.SizeNotNil())
	}
	if i.ContactPerson != nil {
		predicates = append(predicates, customer.ContactPersonEQ(*i.ContactPerson))
	}
	if i.ContactPersonNEQ != nil {
		predicates = append(predicates, customer.ContactPersonNEQ(*i.ContactPersonNEQ))
	}
	if len(i.ContactPersonIn) > 0 {
		predicates = append(predicates, customer.ContactPersonIn(i.ContactPersonIn...))
	}
	if len(i.ContactPersonNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonNotIn(i.ContactPersonNotIn...))
	}
	if i.ContactPersonGT != nil {
		predicates = append(predicates, customer.ContactPersonGT(*i.ContactPersonGT))
	}
	if i.ContactPersonGTE != nil {
		predicates = append(predicates, customer.ContactPersonGTE(*i.ContactPersonGTE))
	}
	if i.ContactPersonLT != nil {
		predicates = append(predicates, customer.ContactPersonLT(*i.ContactPersonLT))
	}
	if i.ContactPersonLTE != nil {
		predicates = append(predicates, customer.ContactPersonLTE(*i.ContactPersonLTE))
	}
	if i.ContactPersonContains != nil {
		predicates = append(predicates, customer.ContactPersonContains(*i.ContactPersonContains))
	}
	if i.ContactPersonHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonHasPrefix(*i.ContactPersonHasPrefix))
	}
	if i.ContactPersonHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonHasSuffix(*i.ContactPersonHasSuffix))
	}
	if i.ContactPersonIsNil {
		predicates = append(predicates, customer.ContactPersonIsNil())
	}
	if i.ContactPersonNotNil {
		predicates = append(predicates, customer.ContactPersonNotNil())
	}
	if i.ContactPersonEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonEqualFold(*i.ContactPersonEqualFold))
	}
	if i.ContactPersonContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonContainsFold(*i.ContactPersonContainsFold))
	}
	if i.ContactPersonPosition != nil {
		predicates = append(predicates, customer.ContactPersonPositionEQ(*i.ContactPersonPosition))
	}
	if i.ContactPersonPositionNEQ != nil {
		predicates = append(predicates, customer.ContactPersonPositionNEQ(*i.ContactPersonPositionNEQ))
	}
	if len(i.ContactPersonPositionIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPositionIn(i.ContactPersonPositionIn...))
	}
	if len(i.ContactPersonPositionNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPositionNotIn(i.ContactPersonPositionNotIn...))
	}
	if i.ContactPersonPositionGT != nil {
		predicates = append(predicates, customer.ContactPersonPositionGT(*i.ContactPersonPositionGT))
	}
	if i.ContactPersonPositionGTE != nil {
		predicates = append(predicates, customer.ContactPersonPositionGTE(*i.ContactPersonPositionGTE))
	}
	if i.ContactPersonPositionLT != nil {
		predicates = append(predicates, customer.ContactPersonPositionLT(*i.ContactPersonPositionLT))
	}
	if i.ContactPersonPositionLTE != nil {
		predicates = append(predicates, customer.ContactPersonPositionLTE(*i.ContactPersonPositionLTE))
	}
	if i.ContactPersonPositionContains != nil {
		predicates = append(predicates, customer.ContactPersonPositionContains(*i.ContactPersonPositionContains))
	}
	if i.ContactPersonPositionHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonPositionHasPrefix(*i.ContactPersonPositionHasPrefix))
	}
	if i.ContactPersonPositionHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonPositionHasSuffix(*i.ContactPersonPositionHasSuffix))
	}
	if i.ContactPersonPositionIsNil {
		predicates = append(predicates, customer.ContactPersonPositionIsNil())
	}
	if i.ContactPersonPositionNotNil {
		predicates = append(predicates, customer.ContactPersonPositionNotNil())
	}
	if i.ContactPersonPositionEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonPositionEqualFold(*i.ContactPersonPositionEqualFold))
	}
	if i.ContactPersonPositionContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonPositionContainsFold(*i.ContactPersonPositionContainsFold))
	}
	if i.ContactPersonPhone != nil {
		predicates = append(predicates, customer.ContactPersonPhoneEQ(*i.ContactPersonPhone))
	}
	if i.ContactPersonPhoneNEQ != nil {
		predicates = append(predicates, customer.ContactPersonPhoneNEQ(*i.ContactPersonPhoneNEQ))
	}
	if len(i.ContactPersonPhoneIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPhoneIn(i.ContactPersonPhoneIn...))
	}
	if len(i.ContactPersonPhoneNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonPhoneNotIn(i.ContactPersonPhoneNotIn...))
	}
	if i.ContactPersonPhoneGT != nil {
		predicates = append(predicates, customer.ContactPersonPhoneGT(*i.ContactPersonPhoneGT))
	}
	if i.ContactPersonPhoneGTE != nil {
		predicates = append(predicates, customer.ContactPersonPhoneGTE(*i.ContactPersonPhoneGTE))
	}
	if i.ContactPersonPhoneLT != nil {
		predicates = append(predicates, customer.ContactPersonPhoneLT(*i.ContactPersonPhoneLT))
	}
	if i.ContactPersonPhoneLTE != nil {
		predicates = append(predicates, customer.ContactPersonPhoneLTE(*i.ContactPersonPhoneLTE))
	}
	if i.ContactPersonPhoneContains != nil {
		predicates = append(predicates, customer.ContactPersonPhoneContains(*i.ContactPersonPhoneContains))
	}
	if i.ContactPersonPhoneHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonPhoneHasPrefix(*i.ContactPersonPhoneHasPrefix))
	}
	if i.ContactPersonPhoneHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonPhoneHasSuffix(*i.ContactPersonPhoneHasSuffix))
	}
	if i.ContactPersonPhoneIsNil {
		predicates = append(predicates, customer.ContactPersonPhoneIsNil())
	}
	if i.ContactPersonPhoneNotNil {
		predicates = append(predicates, customer.ContactPersonPhoneNotNil())
	}
	if i.ContactPersonPhoneEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonPhoneEqualFold(*i.ContactPersonPhoneEqualFold))
	}
	if i.ContactPersonPhoneContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonPhoneContainsFold(*i.ContactPersonPhoneContainsFold))
	}
	if i.ContactPersonEmail != nil {
		predicates = append(predicates, customer.ContactPersonEmailEQ(*i.ContactPersonEmail))
	}
	if i.ContactPersonEmailNEQ != nil {
		predicates = append(predicates, customer.ContactPersonEmailNEQ(*i.ContactPersonEmailNEQ))
	}
	if len(i.ContactPersonEmailIn) > 0 {
		predicates = append(predicates, customer.ContactPersonEmailIn(i.ContactPersonEmailIn...))
	}
	if len(i.ContactPersonEmailNotIn) > 0 {
		predicates = append(predicates, customer.ContactPersonEmailNotIn(i.ContactPersonEmailNotIn...))
	}
	if i.ContactPersonEmailGT != nil {
		predicates = append(predicates, customer.ContactPersonEmailGT(*i.ContactPersonEmailGT))
	}
	if i.ContactPersonEmailGTE != nil {
		predicates = append(predicates, customer.ContactPersonEmailGTE(*i.ContactPersonEmailGTE))
	}
	if i.ContactPersonEmailLT != nil {
		predicates = append(predicates, customer.ContactPersonEmailLT(*i.ContactPersonEmailLT))
	}
	if i.ContactPersonEmailLTE != nil {
		predicates = append(predicates, customer.ContactPersonEmailLTE(*i.ContactPersonEmailLTE))
	}
	if i.ContactPersonEmailContains != nil {
		predicates = append(predicates, customer.ContactPersonEmailContains(*i.ContactPersonEmailContains))
	}
	if i.ContactPersonEmailHasPrefix != nil {
		predicates = append(predicates, customer.ContactPersonEmailHasPrefix(*i.ContactPersonEmailHasPrefix))
	}
	if i.ContactPersonEmailHasSuffix != nil {
		predicates = append(predicates, customer.ContactPersonEmailHasSuffix(*i.ContactPersonEmailHasSuffix))
	}
	if i.ContactPersonEmailIsNil {
		predicates = append(predicates, customer.ContactPersonEmailIsNil())
	}
	if i.ContactPersonEmailNotNil {
		predicates = append(predicates, customer.ContactPersonEmailNotNil())
	}
	if i.ContactPersonEmailEqualFold != nil {
		predicates = append(predicates, customer.ContactPersonEmailEqualFold(*i.ContactPersonEmailEqualFold))
	}
	if i.ContactPersonEmailContainsFold != nil {
		predicates = append(predicates, customer.ContactPersonEmailContainsFold(*i.ContactPersonEmailContainsFold))
	}
	if i.AreaID != nil {
		predicates = append(predicates, customer.AreaIDEQ(*i.AreaID))
	}
	if i.AreaIDNEQ != nil {
		predicates = append(predicates, customer.AreaIDNEQ(*i.AreaIDNEQ))
	}
	if len(i.AreaIDIn) > 0 {
		predicates = append(predicates, customer.AreaIDIn(i.AreaIDIn...))
	}
	if len(i.AreaIDNotIn) > 0 {
		predicates = append(predicates, customer.AreaIDNotIn(i.AreaIDNotIn...))
	}
	if i.AreaIDGT != nil {
		predicates = append(predicates, customer.AreaIDGT(*i.AreaIDGT))
	}
	if i.AreaIDGTE != nil {
		predicates = append(predicates, customer.AreaIDGTE(*i.AreaIDGTE))
	}
	if i.AreaIDLT != nil {
		predicates = append(predicates, customer.AreaIDLT(*i.AreaIDLT))
	}
	if i.AreaIDLTE != nil {
		predicates = append(predicates, customer.AreaIDLTE(*i.AreaIDLTE))
	}
	if i.AreaIDContains != nil {
		predicates = append(predicates, customer.AreaIDContains(*i.AreaIDContains))
	}
	if i.AreaIDHasPrefix != nil {
		predicates = append(predicates, customer.AreaIDHasPrefix(*i.AreaIDHasPrefix))
	}
	if i.AreaIDHasSuffix != nil {
		predicates = append(predicates, customer.AreaIDHasSuffix(*i.AreaIDHasSuffix))
	}
	if i.AreaIDEqualFold != nil {
		predicates = append(predicates, customer.AreaIDEqualFold(*i.AreaIDEqualFold))
	}
	if i.AreaIDContainsFold != nil {
		predicates = append(predicates, customer.AreaIDContainsFold(*i.AreaIDContainsFold))
	}
	if i.SalesID != nil {
		predicates = append(predicates, customer.SalesIDEQ(*i.SalesID))
	}
	if i.SalesIDNEQ != nil {
		predicates = append(predicates, customer.SalesIDNEQ(*i.SalesIDNEQ))
	}
	if len(i.SalesIDIn) > 0 {
		predicates = append(predicates, customer.SalesIDIn(i.SalesIDIn...))
	}
	if len(i.SalesIDNotIn) > 0 {
		predicates = append(predicates, customer.SalesIDNotIn(i.SalesIDNotIn...))
	}
	if i.SalesIDGT != nil {
		predicates = append(predicates, customer.SalesIDGT(*i.SalesIDGT))
	}
	if i.SalesIDGTE != nil {
		predicates = append(predicates, customer.SalesIDGTE(*i.SalesIDGTE))
	}
	if i.SalesIDLT != nil {
		predicates = append(predicates, customer.SalesIDLT(*i.SalesIDLT))
	}
	if i.SalesIDLTE != nil {
		predicates = append(predicates, customer.SalesIDLTE(*i.SalesIDLTE))
	}
	if i.SalesIDContains != nil {
		predicates = append(predicates, customer.SalesIDContains(*i.SalesIDContains))
	}
	if i.SalesIDHasPrefix != nil {
		predicates = append(predicates, customer.SalesIDHasPrefix(*i.SalesIDHasPrefix))
	}
	if i.SalesIDHasSuffix != nil {
		predicates = append(predicates, customer.SalesIDHasSuffix(*i.SalesIDHasSuffix))
	}
	if i.SalesIDIsNil {
		predicates = append(predicates, customer.SalesIDIsNil())
	}
	if i.SalesIDNotNil {
		predicates = append(predicates, customer.SalesIDNotNil())
	}
	if i.SalesIDEqualFold != nil {
		predicates = append(predicates, customer.SalesIDEqualFold(*i.SalesIDEqualFold))
	}
	if i.SalesIDContainsFold != nil {
		predicates = append(predicates, customer.SalesIDContainsFold(*i.SalesIDContainsFold))
	}
	if i.CreatedByID != nil {
		predicates = append(predicates, customer.CreatedByIDEQ(*i.CreatedByID))
	}
	if i.CreatedByIDNEQ != nil {
		predicates = append(predicates, customer.CreatedByIDNEQ(*i.CreatedByIDNEQ))
	}
	if len(i.CreatedByIDIn) > 0 {
		predicates = append(predicates, customer.CreatedByIDIn(i.CreatedByIDIn...))
	}
	if len(i.CreatedByIDNotIn) > 0 {
		predicates = append(predicates, customer.CreatedByIDNotIn(i.CreatedByIDNotIn...))
	}
	if i.CreatedByIDGT != nil {
		predicates = append(predicates, customer.CreatedByIDGT(*i.CreatedByIDGT))
	}
	if i.CreatedByIDGTE != nil {
		predicates = append(predicates, customer.CreatedByIDGTE(*i.CreatedByIDGTE))
	}
	if i.CreatedByIDLT != nil {
		predicates = append(predicates, customer.CreatedByIDLT(*i.CreatedByIDLT))
	}
	if i.CreatedByIDLTE != nil {
		predicates = append(predicates, customer.CreatedByIDLTE(*i.CreatedByIDLTE))
	}
	if i.CreatedByIDContains != nil {
		predicates = append(predicates, customer.CreatedByIDContains(*i.CreatedByIDContains))
	}
	if i.CreatedByIDHasPrefix != nil {
		predicates = append(predicates, customer.CreatedByIDHasPrefix(*i.CreatedByIDHasPrefix))
	}
	if i.CreatedByIDHasSuffix != nil {
		predicates = append(predicates, customer.CreatedByIDHasSuffix(*i.CreatedByIDHasSuffix))
	}
	if i.CreatedByIDIsNil {
		predicates = append(predicates, customer.CreatedByIDIsNil())
	}
	if i.CreatedByIDNotNil {
		predicates = append(predicates, customer.CreatedByIDNotNil())
	}
	if i.CreatedByIDEqualFold != nil {
		predicates = append(predicates, customer.CreatedByIDEqualFold(*i.CreatedByIDEqualFold))
	}
	if i.CreatedByIDContainsFold != nil {
		predicates = append(predicates, customer.CreatedByIDContainsFold(*i.CreatedByIDContainsFold))
	}
	if i.ApproverID != nil {
		predicates = append(predicates, customer.ApproverIDEQ(*i.ApproverID))
	}
	if i.ApproverIDNEQ != nil {
		predicates = append(predicates, customer.ApproverIDNEQ(*i.ApproverIDNEQ))
	}
	if len(i.ApproverIDIn) > 0 {
		predicates = append(predicates, customer.ApproverIDIn(i.ApproverIDIn...))
	}
	if len(i.ApproverIDNotIn) > 0 {
		predicates = append(predicates, customer.ApproverIDNotIn(i.ApproverIDNotIn...))
	}
	if i.ApproverIDGT != nil {
		predicates = append(predicates, customer.ApproverIDGT(*i.ApproverIDGT))
	}
	if i.ApproverIDGTE != nil {
		predicates = append(predicates, customer.ApproverIDGTE(*i.ApproverIDGTE))
	}
	if i.ApproverIDLT != nil {
		predicates = append(predicates, customer.ApproverIDLT(*i.ApproverIDLT))
	}
	if i.ApproverIDLTE != nil {
		predicates = append(predicates, customer.ApproverIDLTE(*i.ApproverIDLTE))
	}
	if i.ApproverIDContains != nil {
		predicates = append(predicates, customer.ApproverIDContains(*i.ApproverIDContains))
	}
	if i.ApproverIDHasPrefix != nil {
		predicates = append(predicates, customer.ApproverIDHasPrefix(*i.ApproverIDHasPrefix))
	}
	if i.ApproverIDHasSuffix != nil {
		predicates = append(predicates, customer.ApproverIDHasSuffix(*i.ApproverIDHasSuffix))
	}
	if i.ApproverIDIsNil {
		predicates = append(predicates, customer.ApproverIDIsNil())
	}
	if i.ApproverIDNotNil {
		predicates = append(predicates, customer.ApproverIDNotNil())
	}
	if i.ApproverIDEqualFold != nil {
		predicates = append(predicates, customer.ApproverIDEqualFold(*i.ApproverIDEqualFold))
	}
	if i.ApproverIDContainsFold != nil {
		predicates = append(predicates, customer.ApproverIDContainsFold(*i.ApproverIDContainsFold))
	}

	if i.HasArea != nil {
		p := customer.HasArea()
		if !*i.HasArea {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreaWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreaWith))
		for _, w := range i.HasAreaWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreaWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasAreaWith(with...))
	}
	if i.HasTenders != nil {
		p := customer.HasTenders()
		if !*i.HasTenders {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasTendersWith(with...))
	}
	if i.HasSales != nil {
		p := customer.HasSales()
		if !*i.HasSales {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSalesWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasSalesWith))
		for _, w := range i.HasSalesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSalesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasSalesWith(with...))
	}
	if i.HasCreatedBy != nil {
		p := customer.HasCreatedBy()
		if !*i.HasCreatedBy {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasCreatedByWith))
		for _, w := range i.HasCreatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasCreatedByWith(with...))
	}
	if i.HasApprover != nil {
		p := customer.HasApprover()
		if !*i.HasApprover {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasApproverWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasApproverWith))
		for _, w := range i.HasApproverWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasApproverWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasApproverWith(with...))
	}
	if i.HasVisitRecords != nil {
		p := customer.HasVisitRecords()
		if !*i.HasVisitRecords {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVisitRecordsWith) > 0 {
		with := make([]predicate.VisitRecord, 0, len(i.HasVisitRecordsWith))
		for _, w := range i.HasVisitRecordsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVisitRecordsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasVisitRecordsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCustomerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return customer.And(predicates...), nil
	}
}

// DistrictWhereInput represents a where input for filtering District queries.
type DistrictWhereInput struct {
	Predicates []predicate.District  `json:"-"`
	Not        *DistrictWhereInput   `json:"not,omitempty"`
	Or         []*DistrictWhereInput `json:"or,omitempty"`
	And        []*DistrictWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "prov_code" field predicates.
	ProvCode      *int  `json:"provCode,omitempty"`
	ProvCodeNEQ   *int  `json:"provCodeNEQ,omitempty"`
	ProvCodeIn    []int `json:"provCodeIn,omitempty"`
	ProvCodeNotIn []int `json:"provCodeNotIn,omitempty"`
	ProvCodeGT    *int  `json:"provCodeGT,omitempty"`
	ProvCodeGTE   *int  `json:"provCodeGTE,omitempty"`
	ProvCodeLT    *int  `json:"provCodeLT,omitempty"`
	ProvCodeLTE   *int  `json:"provCodeLTE,omitempty"`

	// "city_code" field predicates.
	CityCode      *int  `json:"cityCode,omitempty"`
	CityCodeNEQ   *int  `json:"cityCodeNEQ,omitempty"`
	CityCodeIn    []int `json:"cityCodeIn,omitempty"`
	CityCodeNotIn []int `json:"cityCodeNotIn,omitempty"`
	CityCodeGT    *int  `json:"cityCodeGT,omitempty"`
	CityCodeGTE   *int  `json:"cityCodeGTE,omitempty"`
	CityCodeLT    *int  `json:"cityCodeLT,omitempty"`
	CityCodeLTE   *int  `json:"cityCodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "province_id" field predicates.
	ProvinceID             *xid.ID  `json:"provinceID,omitempty"`
	ProvinceIDNEQ          *xid.ID  `json:"provinceIDNEQ,omitempty"`
	ProvinceIDIn           []xid.ID `json:"provinceIDIn,omitempty"`
	ProvinceIDNotIn        []xid.ID `json:"provinceIDNotIn,omitempty"`
	ProvinceIDGT           *xid.ID  `json:"provinceIDGT,omitempty"`
	ProvinceIDGTE          *xid.ID  `json:"provinceIDGTE,omitempty"`
	ProvinceIDLT           *xid.ID  `json:"provinceIDLT,omitempty"`
	ProvinceIDLTE          *xid.ID  `json:"provinceIDLTE,omitempty"`
	ProvinceIDContains     *xid.ID  `json:"provinceIDContains,omitempty"`
	ProvinceIDHasPrefix    *xid.ID  `json:"provinceIDHasPrefix,omitempty"`
	ProvinceIDHasSuffix    *xid.ID  `json:"provinceIDHasSuffix,omitempty"`
	ProvinceIDEqualFold    *xid.ID  `json:"provinceIDEqualFold,omitempty"`
	ProvinceIDContainsFold *xid.ID  `json:"provinceIDContainsFold,omitempty"`

	// "city_id" field predicates.
	CityID             *xid.ID  `json:"cityID,omitempty"`
	CityIDNEQ          *xid.ID  `json:"cityIDNEQ,omitempty"`
	CityIDIn           []xid.ID `json:"cityIDIn,omitempty"`
	CityIDNotIn        []xid.ID `json:"cityIDNotIn,omitempty"`
	CityIDGT           *xid.ID  `json:"cityIDGT,omitempty"`
	CityIDGTE          *xid.ID  `json:"cityIDGTE,omitempty"`
	CityIDLT           *xid.ID  `json:"cityIDLT,omitempty"`
	CityIDLTE          *xid.ID  `json:"cityIDLTE,omitempty"`
	CityIDContains     *xid.ID  `json:"cityIDContains,omitempty"`
	CityIDHasPrefix    *xid.ID  `json:"cityIDHasPrefix,omitempty"`
	CityIDHasSuffix    *xid.ID  `json:"cityIDHasSuffix,omitempty"`
	CityIDIsNil        bool     `json:"cityIDIsNil,omitempty"`
	CityIDNotNil       bool     `json:"cityIDNotNil,omitempty"`
	CityIDEqualFold    *xid.ID  `json:"cityIDEqualFold,omitempty"`
	CityIDContainsFold *xid.ID  `json:"cityIDContainsFold,omitempty"`

	// "province" edge predicates.
	HasProvince     *bool                 `json:"hasProvince,omitempty"`
	HasProvinceWith []*ProvinceWhereInput `json:"hasProvinceWith,omitempty"`

	// "city" edge predicates.
	HasCity     *bool             `json:"hasCity,omitempty"`
	HasCityWith []*CityWhereInput `json:"hasCityWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "plots" edge predicates.
	HasPlots     *bool             `json:"hasPlots,omitempty"`
	HasPlotsWith []*PlotWhereInput `json:"hasPlotsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DistrictWhereInput) AddPredicates(predicates ...predicate.District) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DistrictWhereInput filter on the DistrictQuery builder.
func (i *DistrictWhereInput) Filter(q *DistrictQuery) (*DistrictQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDistrictWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDistrictWhereInput is returned in case the DistrictWhereInput is empty.
var ErrEmptyDistrictWhereInput = errors.New("ent: empty predicate DistrictWhereInput")

// P returns a predicate for filtering districts.
// An error is returned if the input is empty or invalid.
func (i *DistrictWhereInput) P() (predicate.District, error) {
	var predicates []predicate.District
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, district.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.District, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, district.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.District, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, district.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, district.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, district.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, district.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, district.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, district.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, district.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, district.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, district.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, district.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, district.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, district.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, district.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, district.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, district.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, district.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, district.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, district.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, district.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, district.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, district.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, district.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, district.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, district.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, district.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, district.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, district.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, district.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, district.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, district.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, district.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, district.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, district.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.ProvCode != nil {
		predicates = append(predicates, district.ProvCodeEQ(*i.ProvCode))
	}
	if i.ProvCodeNEQ != nil {
		predicates = append(predicates, district.ProvCodeNEQ(*i.ProvCodeNEQ))
	}
	if len(i.ProvCodeIn) > 0 {
		predicates = append(predicates, district.ProvCodeIn(i.ProvCodeIn...))
	}
	if len(i.ProvCodeNotIn) > 0 {
		predicates = append(predicates, district.ProvCodeNotIn(i.ProvCodeNotIn...))
	}
	if i.ProvCodeGT != nil {
		predicates = append(predicates, district.ProvCodeGT(*i.ProvCodeGT))
	}
	if i.ProvCodeGTE != nil {
		predicates = append(predicates, district.ProvCodeGTE(*i.ProvCodeGTE))
	}
	if i.ProvCodeLT != nil {
		predicates = append(predicates, district.ProvCodeLT(*i.ProvCodeLT))
	}
	if i.ProvCodeLTE != nil {
		predicates = append(predicates, district.ProvCodeLTE(*i.ProvCodeLTE))
	}
	if i.CityCode != nil {
		predicates = append(predicates, district.CityCodeEQ(*i.CityCode))
	}
	if i.CityCodeNEQ != nil {
		predicates = append(predicates, district.CityCodeNEQ(*i.CityCodeNEQ))
	}
	if len(i.CityCodeIn) > 0 {
		predicates = append(predicates, district.CityCodeIn(i.CityCodeIn...))
	}
	if len(i.CityCodeNotIn) > 0 {
		predicates = append(predicates, district.CityCodeNotIn(i.CityCodeNotIn...))
	}
	if i.CityCodeGT != nil {
		predicates = append(predicates, district.CityCodeGT(*i.CityCodeGT))
	}
	if i.CityCodeGTE != nil {
		predicates = append(predicates, district.CityCodeGTE(*i.CityCodeGTE))
	}
	if i.CityCodeLT != nil {
		predicates = append(predicates, district.CityCodeLT(*i.CityCodeLT))
	}
	if i.CityCodeLTE != nil {
		predicates = append(predicates, district.CityCodeLTE(*i.CityCodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, district.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, district.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, district.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, district.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, district.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, district.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, district.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, district.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, district.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, district.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, district.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, district.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, district.NameContainsFold(*i.NameContainsFold))
	}
	if i.ProvinceID != nil {
		predicates = append(predicates, district.ProvinceIDEQ(*i.ProvinceID))
	}
	if i.ProvinceIDNEQ != nil {
		predicates = append(predicates, district.ProvinceIDNEQ(*i.ProvinceIDNEQ))
	}
	if len(i.ProvinceIDIn) > 0 {
		predicates = append(predicates, district.ProvinceIDIn(i.ProvinceIDIn...))
	}
	if len(i.ProvinceIDNotIn) > 0 {
		predicates = append(predicates, district.ProvinceIDNotIn(i.ProvinceIDNotIn...))
	}
	if i.ProvinceIDGT != nil {
		predicates = append(predicates, district.ProvinceIDGT(*i.ProvinceIDGT))
	}
	if i.ProvinceIDGTE != nil {
		predicates = append(predicates, district.ProvinceIDGTE(*i.ProvinceIDGTE))
	}
	if i.ProvinceIDLT != nil {
		predicates = append(predicates, district.ProvinceIDLT(*i.ProvinceIDLT))
	}
	if i.ProvinceIDLTE != nil {
		predicates = append(predicates, district.ProvinceIDLTE(*i.ProvinceIDLTE))
	}
	if i.ProvinceIDContains != nil {
		predicates = append(predicates, district.ProvinceIDContains(*i.ProvinceIDContains))
	}
	if i.ProvinceIDHasPrefix != nil {
		predicates = append(predicates, district.ProvinceIDHasPrefix(*i.ProvinceIDHasPrefix))
	}
	if i.ProvinceIDHasSuffix != nil {
		predicates = append(predicates, district.ProvinceIDHasSuffix(*i.ProvinceIDHasSuffix))
	}
	if i.ProvinceIDEqualFold != nil {
		predicates = append(predicates, district.ProvinceIDEqualFold(*i.ProvinceIDEqualFold))
	}
	if i.ProvinceIDContainsFold != nil {
		predicates = append(predicates, district.ProvinceIDContainsFold(*i.ProvinceIDContainsFold))
	}
	if i.CityID != nil {
		predicates = append(predicates, district.CityIDEQ(*i.CityID))
	}
	if i.CityIDNEQ != nil {
		predicates = append(predicates, district.CityIDNEQ(*i.CityIDNEQ))
	}
	if len(i.CityIDIn) > 0 {
		predicates = append(predicates, district.CityIDIn(i.CityIDIn...))
	}
	if len(i.CityIDNotIn) > 0 {
		predicates = append(predicates, district.CityIDNotIn(i.CityIDNotIn...))
	}
	if i.CityIDGT != nil {
		predicates = append(predicates, district.CityIDGT(*i.CityIDGT))
	}
	if i.CityIDGTE != nil {
		predicates = append(predicates, district.CityIDGTE(*i.CityIDGTE))
	}
	if i.CityIDLT != nil {
		predicates = append(predicates, district.CityIDLT(*i.CityIDLT))
	}
	if i.CityIDLTE != nil {
		predicates = append(predicates, district.CityIDLTE(*i.CityIDLTE))
	}
	if i.CityIDContains != nil {
		predicates = append(predicates, district.CityIDContains(*i.CityIDContains))
	}
	if i.CityIDHasPrefix != nil {
		predicates = append(predicates, district.CityIDHasPrefix(*i.CityIDHasPrefix))
	}
	if i.CityIDHasSuffix != nil {
		predicates = append(predicates, district.CityIDHasSuffix(*i.CityIDHasSuffix))
	}
	if i.CityIDIsNil {
		predicates = append(predicates, district.CityIDIsNil())
	}
	if i.CityIDNotNil {
		predicates = append(predicates, district.CityIDNotNil())
	}
	if i.CityIDEqualFold != nil {
		predicates = append(predicates, district.CityIDEqualFold(*i.CityIDEqualFold))
	}
	if i.CityIDContainsFold != nil {
		predicates = append(predicates, district.CityIDContainsFold(*i.CityIDContainsFold))
	}

	if i.HasProvince != nil {
		p := district.HasProvince()
		if !*i.HasProvince {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvinceWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvinceWith))
		for _, w := range i.HasProvinceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvinceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasProvinceWith(with...))
	}
	if i.HasCity != nil {
		p := district.HasCity()
		if !*i.HasCity {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCityWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCityWith))
		for _, w := range i.HasCityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasCityWith(with...))
	}
	if i.HasTenders != nil {
		p := district.HasTenders()
		if !*i.HasTenders {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasTendersWith(with...))
	}
	if i.HasPlots != nil {
		p := district.HasPlots()
		if !*i.HasPlots {
			p = district.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPlotsWith) > 0 {
		with := make([]predicate.Plot, 0, len(i.HasPlotsWith))
		for _, w := range i.HasPlotsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPlotsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, district.HasPlotsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDistrictWhereInput
	case 1:
		return predicates[0], nil
	default:
		return district.And(predicates...), nil
	}
}

// OperationWhereInput represents a where input for filtering Operation queries.
type OperationWhereInput struct {
	Predicates []predicate.Operation  `json:"-"`
	Not        *OperationWhereInput   `json:"not,omitempty"`
	Or         []*OperationWhereInput `json:"or,omitempty"`
	And        []*OperationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "cje_ys" field predicates.
	CjeYs       *float64  `json:"cjeYs,omitempty"`
	CjeYsNEQ    *float64  `json:"cjeYsNEQ,omitempty"`
	CjeYsIn     []float64 `json:"cjeYsIn,omitempty"`
	CjeYsNotIn  []float64 `json:"cjeYsNotIn,omitempty"`
	CjeYsGT     *float64  `json:"cjeYsGT,omitempty"`
	CjeYsGTE    *float64  `json:"cjeYsGTE,omitempty"`
	CjeYsLT     *float64  `json:"cjeYsLT,omitempty"`
	CjeYsLTE    *float64  `json:"cjeYsLTE,omitempty"`
	CjeYsIsNil  bool      `json:"cjeYsIsNil,omitempty"`
	CjeYsNotNil bool      `json:"cjeYsNotNil,omitempty"`

	// "cje_lj" field predicates.
	CjeLj       *float64  `json:"cjeLj,omitempty"`
	CjeLjNEQ    *float64  `json:"cjeLjNEQ,omitempty"`
	CjeLjIn     []float64 `json:"cjeLjIn,omitempty"`
	CjeLjNotIn  []float64 `json:"cjeLjNotIn,omitempty"`
	CjeLjGT     *float64  `json:"cjeLjGT,omitempty"`
	CjeLjGTE    *float64  `json:"cjeLjGTE,omitempty"`
	CjeLjLT     *float64  `json:"cjeLjLT,omitempty"`
	CjeLjLTE    *float64  `json:"cjeLjLTE,omitempty"`
	CjeLjIsNil  bool      `json:"cjeLjIsNil,omitempty"`
	CjeLjNotNil bool      `json:"cjeLjNotNil,omitempty"`

	// "yye_ys" field predicates.
	YyeYs       *float64  `json:"yyeYs,omitempty"`
	YyeYsNEQ    *float64  `json:"yyeYsNEQ,omitempty"`
	YyeYsIn     []float64 `json:"yyeYsIn,omitempty"`
	YyeYsNotIn  []float64 `json:"yyeYsNotIn,omitempty"`
	YyeYsGT     *float64  `json:"yyeYsGT,omitempty"`
	YyeYsGTE    *float64  `json:"yyeYsGTE,omitempty"`
	YyeYsLT     *float64  `json:"yyeYsLT,omitempty"`
	YyeYsLTE    *float64  `json:"yyeYsLTE,omitempty"`
	YyeYsIsNil  bool      `json:"yyeYsIsNil,omitempty"`
	YyeYsNotNil bool      `json:"yyeYsNotNil,omitempty"`

	// "yye_lj" field predicates.
	YyeLj       *float64  `json:"yyeLj,omitempty"`
	YyeLjNEQ    *float64  `json:"yyeLjNEQ,omitempty"`
	YyeLjIn     []float64 `json:"yyeLjIn,omitempty"`
	YyeLjNotIn  []float64 `json:"yyeLjNotIn,omitempty"`
	YyeLjGT     *float64  `json:"yyeLjGT,omitempty"`
	YyeLjGTE    *float64  `json:"yyeLjGTE,omitempty"`
	YyeLjLT     *float64  `json:"yyeLjLT,omitempty"`
	YyeLjLTE    *float64  `json:"yyeLjLTE,omitempty"`
	YyeLjIsNil  bool      `json:"yyeLjIsNil,omitempty"`
	YyeLjNotNil bool      `json:"yyeLjNotNil,omitempty"`

	// "xjl_ys" field predicates.
	XjlYs       *float64  `json:"xjlYs,omitempty"`
	XjlYsNEQ    *float64  `json:"xjlYsNEQ,omitempty"`
	XjlYsIn     []float64 `json:"xjlYsIn,omitempty"`
	XjlYsNotIn  []float64 `json:"xjlYsNotIn,omitempty"`
	XjlYsGT     *float64  `json:"xjlYsGT,omitempty"`
	XjlYsGTE    *float64  `json:"xjlYsGTE,omitempty"`
	XjlYsLT     *float64  `json:"xjlYsLT,omitempty"`
	XjlYsLTE    *float64  `json:"xjlYsLTE,omitempty"`
	XjlYsIsNil  bool      `json:"xjlYsIsNil,omitempty"`
	XjlYsNotNil bool      `json:"xjlYsNotNil,omitempty"`

	// "xjl_lj" field predicates.
	XjlLj       *float64  `json:"xjlLj,omitempty"`
	XjlLjNEQ    *float64  `json:"xjlLjNEQ,omitempty"`
	XjlLjIn     []float64 `json:"xjlLjIn,omitempty"`
	XjlLjNotIn  []float64 `json:"xjlLjNotIn,omitempty"`
	XjlLjGT     *float64  `json:"xjlLjGT,omitempty"`
	XjlLjGTE    *float64  `json:"xjlLjGTE,omitempty"`
	XjlLjLT     *float64  `json:"xjlLjLT,omitempty"`
	XjlLjLTE    *float64  `json:"xjlLjLTE,omitempty"`
	XjlLjIsNil  bool      `json:"xjlLjIsNil,omitempty"`
	XjlLjNotNil bool      `json:"xjlLjNotNil,omitempty"`

	// "xmglf" field predicates.
	Xmglf       *float64  `json:"xmglf,omitempty"`
	XmglfNEQ    *float64  `json:"xmglfNEQ,omitempty"`
	XmglfIn     []float64 `json:"xmglfIn,omitempty"`
	XmglfNotIn  []float64 `json:"xmglfNotIn,omitempty"`
	XmglfGT     *float64  `json:"xmglfGT,omitempty"`
	XmglfGTE    *float64  `json:"xmglfGTE,omitempty"`
	XmglfLT     *float64  `json:"xmglfLT,omitempty"`
	XmglfLTE    *float64  `json:"xmglfLTE,omitempty"`
	XmglfIsNil  bool      `json:"xmglfIsNil,omitempty"`
	XmglfNotNil bool      `json:"xmglfNotNil,omitempty"`

	// "xmsjf" field predicates.
	Xmsjf       *float64  `json:"xmsjf,omitempty"`
	XmsjfNEQ    *float64  `json:"xmsjfNEQ,omitempty"`
	XmsjfIn     []float64 `json:"xmsjfIn,omitempty"`
	XmsjfNotIn  []float64 `json:"xmsjfNotIn,omitempty"`
	XmsjfGT     *float64  `json:"xmsjfGT,omitempty"`
	XmsjfGTE    *float64  `json:"xmsjfGTE,omitempty"`
	XmsjfLT     *float64  `json:"xmsjfLT,omitempty"`
	XmsjfLTE    *float64  `json:"xmsjfLTE,omitempty"`
	XmsjfIsNil  bool      `json:"xmsjfIsNil,omitempty"`
	XmsjfNotNil bool      `json:"xmsjfNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OperationWhereInput) AddPredicates(predicates ...predicate.Operation) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OperationWhereInput filter on the OperationQuery builder.
func (i *OperationWhereInput) Filter(q *OperationQuery) (*OperationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOperationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOperationWhereInput is returned in case the OperationWhereInput is empty.
var ErrEmptyOperationWhereInput = errors.New("ent: empty predicate OperationWhereInput")

// P returns a predicate for filtering operations.
// An error is returned if the input is empty or invalid.
func (i *OperationWhereInput) P() (predicate.Operation, error) {
	var predicates []predicate.Operation
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, operation.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Operation, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, operation.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Operation, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, operation.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, operation.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, operation.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, operation.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, operation.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, operation.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, operation.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, operation.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, operation.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, operation.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, operation.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, operation.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, operation.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, operation.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, operation.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, operation.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, operation.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, operation.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, operation.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, operation.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, operation.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, operation.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, operation.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, operation.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, operation.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CjeYs != nil {
		predicates = append(predicates, operation.CjeYsEQ(*i.CjeYs))
	}
	if i.CjeYsNEQ != nil {
		predicates = append(predicates, operation.CjeYsNEQ(*i.CjeYsNEQ))
	}
	if len(i.CjeYsIn) > 0 {
		predicates = append(predicates, operation.CjeYsIn(i.CjeYsIn...))
	}
	if len(i.CjeYsNotIn) > 0 {
		predicates = append(predicates, operation.CjeYsNotIn(i.CjeYsNotIn...))
	}
	if i.CjeYsGT != nil {
		predicates = append(predicates, operation.CjeYsGT(*i.CjeYsGT))
	}
	if i.CjeYsGTE != nil {
		predicates = append(predicates, operation.CjeYsGTE(*i.CjeYsGTE))
	}
	if i.CjeYsLT != nil {
		predicates = append(predicates, operation.CjeYsLT(*i.CjeYsLT))
	}
	if i.CjeYsLTE != nil {
		predicates = append(predicates, operation.CjeYsLTE(*i.CjeYsLTE))
	}
	if i.CjeYsIsNil {
		predicates = append(predicates, operation.CjeYsIsNil())
	}
	if i.CjeYsNotNil {
		predicates = append(predicates, operation.CjeYsNotNil())
	}
	if i.CjeLj != nil {
		predicates = append(predicates, operation.CjeLjEQ(*i.CjeLj))
	}
	if i.CjeLjNEQ != nil {
		predicates = append(predicates, operation.CjeLjNEQ(*i.CjeLjNEQ))
	}
	if len(i.CjeLjIn) > 0 {
		predicates = append(predicates, operation.CjeLjIn(i.CjeLjIn...))
	}
	if len(i.CjeLjNotIn) > 0 {
		predicates = append(predicates, operation.CjeLjNotIn(i.CjeLjNotIn...))
	}
	if i.CjeLjGT != nil {
		predicates = append(predicates, operation.CjeLjGT(*i.CjeLjGT))
	}
	if i.CjeLjGTE != nil {
		predicates = append(predicates, operation.CjeLjGTE(*i.CjeLjGTE))
	}
	if i.CjeLjLT != nil {
		predicates = append(predicates, operation.CjeLjLT(*i.CjeLjLT))
	}
	if i.CjeLjLTE != nil {
		predicates = append(predicates, operation.CjeLjLTE(*i.CjeLjLTE))
	}
	if i.CjeLjIsNil {
		predicates = append(predicates, operation.CjeLjIsNil())
	}
	if i.CjeLjNotNil {
		predicates = append(predicates, operation.CjeLjNotNil())
	}
	if i.YyeYs != nil {
		predicates = append(predicates, operation.YyeYsEQ(*i.YyeYs))
	}
	if i.YyeYsNEQ != nil {
		predicates = append(predicates, operation.YyeYsNEQ(*i.YyeYsNEQ))
	}
	if len(i.YyeYsIn) > 0 {
		predicates = append(predicates, operation.YyeYsIn(i.YyeYsIn...))
	}
	if len(i.YyeYsNotIn) > 0 {
		predicates = append(predicates, operation.YyeYsNotIn(i.YyeYsNotIn...))
	}
	if i.YyeYsGT != nil {
		predicates = append(predicates, operation.YyeYsGT(*i.YyeYsGT))
	}
	if i.YyeYsGTE != nil {
		predicates = append(predicates, operation.YyeYsGTE(*i.YyeYsGTE))
	}
	if i.YyeYsLT != nil {
		predicates = append(predicates, operation.YyeYsLT(*i.YyeYsLT))
	}
	if i.YyeYsLTE != nil {
		predicates = append(predicates, operation.YyeYsLTE(*i.YyeYsLTE))
	}
	if i.YyeYsIsNil {
		predicates = append(predicates, operation.YyeYsIsNil())
	}
	if i.YyeYsNotNil {
		predicates = append(predicates, operation.YyeYsNotNil())
	}
	if i.YyeLj != nil {
		predicates = append(predicates, operation.YyeLjEQ(*i.YyeLj))
	}
	if i.YyeLjNEQ != nil {
		predicates = append(predicates, operation.YyeLjNEQ(*i.YyeLjNEQ))
	}
	if len(i.YyeLjIn) > 0 {
		predicates = append(predicates, operation.YyeLjIn(i.YyeLjIn...))
	}
	if len(i.YyeLjNotIn) > 0 {
		predicates = append(predicates, operation.YyeLjNotIn(i.YyeLjNotIn...))
	}
	if i.YyeLjGT != nil {
		predicates = append(predicates, operation.YyeLjGT(*i.YyeLjGT))
	}
	if i.YyeLjGTE != nil {
		predicates = append(predicates, operation.YyeLjGTE(*i.YyeLjGTE))
	}
	if i.YyeLjLT != nil {
		predicates = append(predicates, operation.YyeLjLT(*i.YyeLjLT))
	}
	if i.YyeLjLTE != nil {
		predicates = append(predicates, operation.YyeLjLTE(*i.YyeLjLTE))
	}
	if i.YyeLjIsNil {
		predicates = append(predicates, operation.YyeLjIsNil())
	}
	if i.YyeLjNotNil {
		predicates = append(predicates, operation.YyeLjNotNil())
	}
	if i.XjlYs != nil {
		predicates = append(predicates, operation.XjlYsEQ(*i.XjlYs))
	}
	if i.XjlYsNEQ != nil {
		predicates = append(predicates, operation.XjlYsNEQ(*i.XjlYsNEQ))
	}
	if len(i.XjlYsIn) > 0 {
		predicates = append(predicates, operation.XjlYsIn(i.XjlYsIn...))
	}
	if len(i.XjlYsNotIn) > 0 {
		predicates = append(predicates, operation.XjlYsNotIn(i.XjlYsNotIn...))
	}
	if i.XjlYsGT != nil {
		predicates = append(predicates, operation.XjlYsGT(*i.XjlYsGT))
	}
	if i.XjlYsGTE != nil {
		predicates = append(predicates, operation.XjlYsGTE(*i.XjlYsGTE))
	}
	if i.XjlYsLT != nil {
		predicates = append(predicates, operation.XjlYsLT(*i.XjlYsLT))
	}
	if i.XjlYsLTE != nil {
		predicates = append(predicates, operation.XjlYsLTE(*i.XjlYsLTE))
	}
	if i.XjlYsIsNil {
		predicates = append(predicates, operation.XjlYsIsNil())
	}
	if i.XjlYsNotNil {
		predicates = append(predicates, operation.XjlYsNotNil())
	}
	if i.XjlLj != nil {
		predicates = append(predicates, operation.XjlLjEQ(*i.XjlLj))
	}
	if i.XjlLjNEQ != nil {
		predicates = append(predicates, operation.XjlLjNEQ(*i.XjlLjNEQ))
	}
	if len(i.XjlLjIn) > 0 {
		predicates = append(predicates, operation.XjlLjIn(i.XjlLjIn...))
	}
	if len(i.XjlLjNotIn) > 0 {
		predicates = append(predicates, operation.XjlLjNotIn(i.XjlLjNotIn...))
	}
	if i.XjlLjGT != nil {
		predicates = append(predicates, operation.XjlLjGT(*i.XjlLjGT))
	}
	if i.XjlLjGTE != nil {
		predicates = append(predicates, operation.XjlLjGTE(*i.XjlLjGTE))
	}
	if i.XjlLjLT != nil {
		predicates = append(predicates, operation.XjlLjLT(*i.XjlLjLT))
	}
	if i.XjlLjLTE != nil {
		predicates = append(predicates, operation.XjlLjLTE(*i.XjlLjLTE))
	}
	if i.XjlLjIsNil {
		predicates = append(predicates, operation.XjlLjIsNil())
	}
	if i.XjlLjNotNil {
		predicates = append(predicates, operation.XjlLjNotNil())
	}
	if i.Xmglf != nil {
		predicates = append(predicates, operation.XmglfEQ(*i.Xmglf))
	}
	if i.XmglfNEQ != nil {
		predicates = append(predicates, operation.XmglfNEQ(*i.XmglfNEQ))
	}
	if len(i.XmglfIn) > 0 {
		predicates = append(predicates, operation.XmglfIn(i.XmglfIn...))
	}
	if len(i.XmglfNotIn) > 0 {
		predicates = append(predicates, operation.XmglfNotIn(i.XmglfNotIn...))
	}
	if i.XmglfGT != nil {
		predicates = append(predicates, operation.XmglfGT(*i.XmglfGT))
	}
	if i.XmglfGTE != nil {
		predicates = append(predicates, operation.XmglfGTE(*i.XmglfGTE))
	}
	if i.XmglfLT != nil {
		predicates = append(predicates, operation.XmglfLT(*i.XmglfLT))
	}
	if i.XmglfLTE != nil {
		predicates = append(predicates, operation.XmglfLTE(*i.XmglfLTE))
	}
	if i.XmglfIsNil {
		predicates = append(predicates, operation.XmglfIsNil())
	}
	if i.XmglfNotNil {
		predicates = append(predicates, operation.XmglfNotNil())
	}
	if i.Xmsjf != nil {
		predicates = append(predicates, operation.XmsjfEQ(*i.Xmsjf))
	}
	if i.XmsjfNEQ != nil {
		predicates = append(predicates, operation.XmsjfNEQ(*i.XmsjfNEQ))
	}
	if len(i.XmsjfIn) > 0 {
		predicates = append(predicates, operation.XmsjfIn(i.XmsjfIn...))
	}
	if len(i.XmsjfNotIn) > 0 {
		predicates = append(predicates, operation.XmsjfNotIn(i.XmsjfNotIn...))
	}
	if i.XmsjfGT != nil {
		predicates = append(predicates, operation.XmsjfGT(*i.XmsjfGT))
	}
	if i.XmsjfGTE != nil {
		predicates = append(predicates, operation.XmsjfGTE(*i.XmsjfGTE))
	}
	if i.XmsjfLT != nil {
		predicates = append(predicates, operation.XmsjfLT(*i.XmsjfLT))
	}
	if i.XmsjfLTE != nil {
		predicates = append(predicates, operation.XmsjfLTE(*i.XmsjfLTE))
	}
	if i.XmsjfIsNil {
		predicates = append(predicates, operation.XmsjfIsNil())
	}
	if i.XmsjfNotNil {
		predicates = append(predicates, operation.XmsjfNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOperationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return operation.And(predicates...), nil
	}
}

// PlotWhereInput represents a where input for filtering Plot queries.
type PlotWhereInput struct {
	Predicates []predicate.Plot  `json:"-"`
	Not        *PlotWhereInput   `json:"not,omitempty"`
	Or         []*PlotWhereInput `json:"or,omitempty"`
	And        []*PlotWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "color_hex" field predicates.
	ColorHex             *string  `json:"colorHex,omitempty"`
	ColorHexNEQ          *string  `json:"colorHexNEQ,omitempty"`
	ColorHexIn           []string `json:"colorHexIn,omitempty"`
	ColorHexNotIn        []string `json:"colorHexNotIn,omitempty"`
	ColorHexGT           *string  `json:"colorHexGT,omitempty"`
	ColorHexGTE          *string  `json:"colorHexGTE,omitempty"`
	ColorHexLT           *string  `json:"colorHexLT,omitempty"`
	ColorHexLTE          *string  `json:"colorHexLTE,omitempty"`
	ColorHexContains     *string  `json:"colorHexContains,omitempty"`
	ColorHexHasPrefix    *string  `json:"colorHexHasPrefix,omitempty"`
	ColorHexHasSuffix    *string  `json:"colorHexHasSuffix,omitempty"`
	ColorHexEqualFold    *string  `json:"colorHexEqualFold,omitempty"`
	ColorHexContainsFold *string  `json:"colorHexContainsFold,omitempty"`

	// "district_id" field predicates.
	DistrictID             *xid.ID  `json:"districtID,omitempty"`
	DistrictIDNEQ          *xid.ID  `json:"districtIDNEQ,omitempty"`
	DistrictIDIn           []xid.ID `json:"districtIDIn,omitempty"`
	DistrictIDNotIn        []xid.ID `json:"districtIDNotIn,omitempty"`
	DistrictIDGT           *xid.ID  `json:"districtIDGT,omitempty"`
	DistrictIDGTE          *xid.ID  `json:"districtIDGTE,omitempty"`
	DistrictIDLT           *xid.ID  `json:"districtIDLT,omitempty"`
	DistrictIDLTE          *xid.ID  `json:"districtIDLTE,omitempty"`
	DistrictIDContains     *xid.ID  `json:"districtIDContains,omitempty"`
	DistrictIDHasPrefix    *xid.ID  `json:"districtIDHasPrefix,omitempty"`
	DistrictIDHasSuffix    *xid.ID  `json:"districtIDHasSuffix,omitempty"`
	DistrictIDEqualFold    *xid.ID  `json:"districtIDEqualFold,omitempty"`
	DistrictIDContainsFold *xid.ID  `json:"districtIDContainsFold,omitempty"`

	// "district" edge predicates.
	HasDistrict     *bool                 `json:"hasDistrict,omitempty"`
	HasDistrictWith []*DistrictWhereInput `json:"hasDistrictWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PlotWhereInput) AddPredicates(predicates ...predicate.Plot) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PlotWhereInput filter on the PlotQuery builder.
func (i *PlotWhereInput) Filter(q *PlotQuery) (*PlotQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPlotWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPlotWhereInput is returned in case the PlotWhereInput is empty.
var ErrEmptyPlotWhereInput = errors.New("ent: empty predicate PlotWhereInput")

// P returns a predicate for filtering plots.
// An error is returned if the input is empty or invalid.
func (i *PlotWhereInput) P() (predicate.Plot, error) {
	var predicates []predicate.Plot
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, plot.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Plot, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, plot.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Plot, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, plot.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, plot.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, plot.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, plot.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, plot.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, plot.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, plot.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, plot.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, plot.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, plot.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, plot.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, plot.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, plot.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, plot.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, plot.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, plot.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, plot.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, plot.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, plot.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, plot.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, plot.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, plot.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, plot.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, plot.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, plot.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, plot.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, plot.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, plot.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, plot.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, plot.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, plot.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, plot.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, plot.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, plot.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, plot.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, plot.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, plot.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, plot.NameContainsFold(*i.NameContainsFold))
	}
	if i.ColorHex != nil {
		predicates = append(predicates, plot.ColorHexEQ(*i.ColorHex))
	}
	if i.ColorHexNEQ != nil {
		predicates = append(predicates, plot.ColorHexNEQ(*i.ColorHexNEQ))
	}
	if len(i.ColorHexIn) > 0 {
		predicates = append(predicates, plot.ColorHexIn(i.ColorHexIn...))
	}
	if len(i.ColorHexNotIn) > 0 {
		predicates = append(predicates, plot.ColorHexNotIn(i.ColorHexNotIn...))
	}
	if i.ColorHexGT != nil {
		predicates = append(predicates, plot.ColorHexGT(*i.ColorHexGT))
	}
	if i.ColorHexGTE != nil {
		predicates = append(predicates, plot.ColorHexGTE(*i.ColorHexGTE))
	}
	if i.ColorHexLT != nil {
		predicates = append(predicates, plot.ColorHexLT(*i.ColorHexLT))
	}
	if i.ColorHexLTE != nil {
		predicates = append(predicates, plot.ColorHexLTE(*i.ColorHexLTE))
	}
	if i.ColorHexContains != nil {
		predicates = append(predicates, plot.ColorHexContains(*i.ColorHexContains))
	}
	if i.ColorHexHasPrefix != nil {
		predicates = append(predicates, plot.ColorHexHasPrefix(*i.ColorHexHasPrefix))
	}
	if i.ColorHexHasSuffix != nil {
		predicates = append(predicates, plot.ColorHexHasSuffix(*i.ColorHexHasSuffix))
	}
	if i.ColorHexEqualFold != nil {
		predicates = append(predicates, plot.ColorHexEqualFold(*i.ColorHexEqualFold))
	}
	if i.ColorHexContainsFold != nil {
		predicates = append(predicates, plot.ColorHexContainsFold(*i.ColorHexContainsFold))
	}
	if i.DistrictID != nil {
		predicates = append(predicates, plot.DistrictIDEQ(*i.DistrictID))
	}
	if i.DistrictIDNEQ != nil {
		predicates = append(predicates, plot.DistrictIDNEQ(*i.DistrictIDNEQ))
	}
	if len(i.DistrictIDIn) > 0 {
		predicates = append(predicates, plot.DistrictIDIn(i.DistrictIDIn...))
	}
	if len(i.DistrictIDNotIn) > 0 {
		predicates = append(predicates, plot.DistrictIDNotIn(i.DistrictIDNotIn...))
	}
	if i.DistrictIDGT != nil {
		predicates = append(predicates, plot.DistrictIDGT(*i.DistrictIDGT))
	}
	if i.DistrictIDGTE != nil {
		predicates = append(predicates, plot.DistrictIDGTE(*i.DistrictIDGTE))
	}
	if i.DistrictIDLT != nil {
		predicates = append(predicates, plot.DistrictIDLT(*i.DistrictIDLT))
	}
	if i.DistrictIDLTE != nil {
		predicates = append(predicates, plot.DistrictIDLTE(*i.DistrictIDLTE))
	}
	if i.DistrictIDContains != nil {
		predicates = append(predicates, plot.DistrictIDContains(*i.DistrictIDContains))
	}
	if i.DistrictIDHasPrefix != nil {
		predicates = append(predicates, plot.DistrictIDHasPrefix(*i.DistrictIDHasPrefix))
	}
	if i.DistrictIDHasSuffix != nil {
		predicates = append(predicates, plot.DistrictIDHasSuffix(*i.DistrictIDHasSuffix))
	}
	if i.DistrictIDEqualFold != nil {
		predicates = append(predicates, plot.DistrictIDEqualFold(*i.DistrictIDEqualFold))
	}
	if i.DistrictIDContainsFold != nil {
		predicates = append(predicates, plot.DistrictIDContainsFold(*i.DistrictIDContainsFold))
	}

	if i.HasDistrict != nil {
		p := plot.HasDistrict()
		if !*i.HasDistrict {
			p = plot.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictWith))
		for _, w := range i.HasDistrictWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, plot.HasDistrictWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPlotWhereInput
	case 1:
		return predicates[0], nil
	default:
		return plot.And(predicates...), nil
	}
}

// PotentialTenderWhereInput represents a where input for filtering PotentialTender queries.
type PotentialTenderWhereInput struct {
	Predicates []predicate.PotentialTender  `json:"-"`
	Not        *PotentialTenderWhereInput   `json:"not,omitempty"`
	Or         []*PotentialTenderWhereInput `json:"or,omitempty"`
	And        []*PotentialTenderWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PotentialTenderWhereInput) AddPredicates(predicates ...predicate.PotentialTender) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PotentialTenderWhereInput filter on the PotentialTenderQuery builder.
func (i *PotentialTenderWhereInput) Filter(q *PotentialTenderQuery) (*PotentialTenderQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPotentialTenderWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPotentialTenderWhereInput is returned in case the PotentialTenderWhereInput is empty.
var ErrEmptyPotentialTenderWhereInput = errors.New("ent: empty predicate PotentialTenderWhereInput")

// P returns a predicate for filtering potentialtenders.
// An error is returned if the input is empty or invalid.
func (i *PotentialTenderWhereInput) P() (predicate.PotentialTender, error) {
	var predicates []predicate.PotentialTender
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, potentialtender.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PotentialTender, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, potentialtender.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PotentialTender, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, potentialtender.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, potentialtender.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, potentialtender.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, potentialtender.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, potentialtender.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, potentialtender.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, potentialtender.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, potentialtender.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, potentialtender.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, potentialtender.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, potentialtender.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, potentialtender.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, potentialtender.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, potentialtender.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, potentialtender.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, potentialtender.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, potentialtender.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, potentialtender.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, potentialtender.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, potentialtender.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, potentialtender.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, potentialtender.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, potentialtender.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, potentialtender.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, potentialtender.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPotentialTenderWhereInput
	case 1:
		return predicates[0], nil
	default:
		return potentialtender.And(predicates...), nil
	}
}

// ProjectWhereInput represents a where input for filtering Project queries.
type ProjectWhereInput struct {
	Predicates []predicate.Project  `json:"-"`
	Not        *ProjectWhereInput   `json:"not,omitempty"`
	Or         []*ProjectWhereInput `json:"or,omitempty"`
	And        []*ProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "manager" field predicates.
	Manager             *string  `json:"manager,omitempty"`
	ManagerNEQ          *string  `json:"managerNEQ,omitempty"`
	ManagerIn           []string `json:"managerIn,omitempty"`
	ManagerNotIn        []string `json:"managerNotIn,omitempty"`
	ManagerGT           *string  `json:"managerGT,omitempty"`
	ManagerGTE          *string  `json:"managerGTE,omitempty"`
	ManagerLT           *string  `json:"managerLT,omitempty"`
	ManagerLTE          *string  `json:"managerLTE,omitempty"`
	ManagerContains     *string  `json:"managerContains,omitempty"`
	ManagerHasPrefix    *string  `json:"managerHasPrefix,omitempty"`
	ManagerHasSuffix    *string  `json:"managerHasSuffix,omitempty"`
	ManagerIsNil        bool     `json:"managerIsNil,omitempty"`
	ManagerNotNil       bool     `json:"managerNotNil,omitempty"`
	ManagerEqualFold    *string  `json:"managerEqualFold,omitempty"`
	ManagerContainsFold *string  `json:"managerContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "owner" field predicates.
	Owner             *string  `json:"owner,omitempty"`
	OwnerNEQ          *string  `json:"ownerNEQ,omitempty"`
	OwnerIn           []string `json:"ownerIn,omitempty"`
	OwnerNotIn        []string `json:"ownerNotIn,omitempty"`
	OwnerGT           *string  `json:"ownerGT,omitempty"`
	OwnerGTE          *string  `json:"ownerGTE,omitempty"`
	OwnerLT           *string  `json:"ownerLT,omitempty"`
	OwnerLTE          *string  `json:"ownerLTE,omitempty"`
	OwnerContains     *string  `json:"ownerContains,omitempty"`
	OwnerHasPrefix    *string  `json:"ownerHasPrefix,omitempty"`
	OwnerHasSuffix    *string  `json:"ownerHasSuffix,omitempty"`
	OwnerIsNil        bool     `json:"ownerIsNil,omitempty"`
	OwnerNotNil       bool     `json:"ownerNotNil,omitempty"`
	OwnerEqualFold    *string  `json:"ownerEqualFold,omitempty"`
	OwnerContainsFold *string  `json:"ownerContainsFold,omitempty"`

	// "jzs" field predicates.
	Jzs             *string  `json:"jzs,omitempty"`
	JzsNEQ          *string  `json:"jzsNEQ,omitempty"`
	JzsIn           []string `json:"jzsIn,omitempty"`
	JzsNotIn        []string `json:"jzsNotIn,omitempty"`
	JzsGT           *string  `json:"jzsGT,omitempty"`
	JzsGTE          *string  `json:"jzsGTE,omitempty"`
	JzsLT           *string  `json:"jzsLT,omitempty"`
	JzsLTE          *string  `json:"jzsLTE,omitempty"`
	JzsContains     *string  `json:"jzsContains,omitempty"`
	JzsHasPrefix    *string  `json:"jzsHasPrefix,omitempty"`
	JzsHasSuffix    *string  `json:"jzsHasSuffix,omitempty"`
	JzsIsNil        bool     `json:"jzsIsNil,omitempty"`
	JzsNotNil       bool     `json:"jzsNotNil,omitempty"`
	JzsEqualFold    *string  `json:"jzsEqualFold,omitempty"`
	JzsContainsFold *string  `json:"jzsContainsFold,omitempty"`

	// "mcn" field predicates.
	Mcn             *string  `json:"mcn,omitempty"`
	McnNEQ          *string  `json:"mcnNEQ,omitempty"`
	McnIn           []string `json:"mcnIn,omitempty"`
	McnNotIn        []string `json:"mcnNotIn,omitempty"`
	McnGT           *string  `json:"mcnGT,omitempty"`
	McnGTE          *string  `json:"mcnGTE,omitempty"`
	McnLT           *string  `json:"mcnLT,omitempty"`
	McnLTE          *string  `json:"mcnLTE,omitempty"`
	McnContains     *string  `json:"mcnContains,omitempty"`
	McnHasPrefix    *string  `json:"mcnHasPrefix,omitempty"`
	McnHasSuffix    *string  `json:"mcnHasSuffix,omitempty"`
	McnIsNil        bool     `json:"mcnIsNil,omitempty"`
	McnNotNil       bool     `json:"mcnNotNil,omitempty"`
	McnEqualFold    *string  `json:"mcnEqualFold,omitempty"`
	McnContainsFold *string  `json:"mcnContainsFold,omitempty"`

	// "consultant" field predicates.
	Consultant             *string  `json:"consultant,omitempty"`
	ConsultantNEQ          *string  `json:"consultantNEQ,omitempty"`
	ConsultantIn           []string `json:"consultantIn,omitempty"`
	ConsultantNotIn        []string `json:"consultantNotIn,omitempty"`
	ConsultantGT           *string  `json:"consultantGT,omitempty"`
	ConsultantGTE          *string  `json:"consultantGTE,omitempty"`
	ConsultantLT           *string  `json:"consultantLT,omitempty"`
	ConsultantLTE          *string  `json:"consultantLTE,omitempty"`
	ConsultantContains     *string  `json:"consultantContains,omitempty"`
	ConsultantHasPrefix    *string  `json:"consultantHasPrefix,omitempty"`
	ConsultantHasSuffix    *string  `json:"consultantHasSuffix,omitempty"`
	ConsultantIsNil        bool     `json:"consultantIsNil,omitempty"`
	ConsultantNotNil       bool     `json:"consultantNotNil,omitempty"`
	ConsultantEqualFold    *string  `json:"consultantEqualFold,omitempty"`
	ConsultantContainsFold *string  `json:"consultantContainsFold,omitempty"`

	// "areas" field predicates.
	Areas             *string  `json:"areas,omitempty"`
	AreasNEQ          *string  `json:"areasNEQ,omitempty"`
	AreasIn           []string `json:"areasIn,omitempty"`
	AreasNotIn        []string `json:"areasNotIn,omitempty"`
	AreasGT           *string  `json:"areasGT,omitempty"`
	AreasGTE          *string  `json:"areasGTE,omitempty"`
	AreasLT           *string  `json:"areasLT,omitempty"`
	AreasLTE          *string  `json:"areasLTE,omitempty"`
	AreasContains     *string  `json:"areasContains,omitempty"`
	AreasHasPrefix    *string  `json:"areasHasPrefix,omitempty"`
	AreasHasSuffix    *string  `json:"areasHasSuffix,omitempty"`
	AreasIsNil        bool     `json:"areasIsNil,omitempty"`
	AreasNotNil       bool     `json:"areasNotNil,omitempty"`
	AreasEqualFold    *string  `json:"areasEqualFold,omitempty"`
	AreasContainsFold *string  `json:"areasContainsFold,omitempty"`

	// "start_date" field predicates.
	StartDate       *time.Time  `json:"startDate,omitempty"`
	StartDateNEQ    *time.Time  `json:"startDateNEQ,omitempty"`
	StartDateIn     []time.Time `json:"startDateIn,omitempty"`
	StartDateNotIn  []time.Time `json:"startDateNotIn,omitempty"`
	StartDateGT     *time.Time  `json:"startDateGT,omitempty"`
	StartDateGTE    *time.Time  `json:"startDateGTE,omitempty"`
	StartDateLT     *time.Time  `json:"startDateLT,omitempty"`
	StartDateLTE    *time.Time  `json:"startDateLTE,omitempty"`
	StartDateIsNil  bool        `json:"startDateIsNil,omitempty"`
	StartDateNotNil bool        `json:"startDateNotNil,omitempty"`

	// "fs_date" field predicates.
	FsDate       *time.Time  `json:"fsDate,omitempty"`
	FsDateNEQ    *time.Time  `json:"fsDateNEQ,omitempty"`
	FsDateIn     []time.Time `json:"fsDateIn,omitempty"`
	FsDateNotIn  []time.Time `json:"fsDateNotIn,omitempty"`
	FsDateGT     *time.Time  `json:"fsDateGT,omitempty"`
	FsDateGTE    *time.Time  `json:"fsDateGTE,omitempty"`
	FsDateLT     *time.Time  `json:"fsDateLT,omitempty"`
	FsDateLTE    *time.Time  `json:"fsDateLTE,omitempty"`
	FsDateIsNil  bool        `json:"fsDateIsNil,omitempty"`
	FsDateNotNil bool        `json:"fsDateNotNil,omitempty"`

	// "op_date" field predicates.
	OpDate       *time.Time  `json:"opDate,omitempty"`
	OpDateNEQ    *time.Time  `json:"opDateNEQ,omitempty"`
	OpDateIn     []time.Time `json:"opDateIn,omitempty"`
	OpDateNotIn  []time.Time `json:"opDateNotIn,omitempty"`
	OpDateGT     *time.Time  `json:"opDateGT,omitempty"`
	OpDateGTE    *time.Time  `json:"opDateGTE,omitempty"`
	OpDateLT     *time.Time  `json:"opDateLT,omitempty"`
	OpDateLTE    *time.Time  `json:"opDateLTE,omitempty"`
	OpDateIsNil  bool        `json:"opDateIsNil,omitempty"`
	OpDateNotNil bool        `json:"opDateNotNil,omitempty"`

	// "end_date" field predicates.
	EndDate       *time.Time  `json:"endDate,omitempty"`
	EndDateNEQ    *time.Time  `json:"endDateNEQ,omitempty"`
	EndDateIn     []time.Time `json:"endDateIn,omitempty"`
	EndDateNotIn  []time.Time `json:"endDateNotIn,omitempty"`
	EndDateGT     *time.Time  `json:"endDateGT,omitempty"`
	EndDateGTE    *time.Time  `json:"endDateGTE,omitempty"`
	EndDateLT     *time.Time  `json:"endDateLT,omitempty"`
	EndDateLTE    *time.Time  `json:"endDateLTE,omitempty"`
	EndDateIsNil  bool        `json:"endDateIsNil,omitempty"`
	EndDateNotNil bool        `json:"endDateNotNil,omitempty"`

	// "mntyr" field predicates.
	Mntyr             *string  `json:"mntyr,omitempty"`
	MntyrNEQ          *string  `json:"mntyrNEQ,omitempty"`
	MntyrIn           []string `json:"mntyrIn,omitempty"`
	MntyrNotIn        []string `json:"mntyrNotIn,omitempty"`
	MntyrGT           *string  `json:"mntyrGT,omitempty"`
	MntyrGTE          *string  `json:"mntyrGTE,omitempty"`
	MntyrLT           *string  `json:"mntyrLT,omitempty"`
	MntyrLTE          *string  `json:"mntyrLTE,omitempty"`
	MntyrContains     *string  `json:"mntyrContains,omitempty"`
	MntyrHasPrefix    *string  `json:"mntyrHasPrefix,omitempty"`
	MntyrHasSuffix    *string  `json:"mntyrHasSuffix,omitempty"`
	MntyrIsNil        bool     `json:"mntyrIsNil,omitempty"`
	MntyrNotNil       bool     `json:"mntyrNotNil,omitempty"`
	MntyrEqualFold    *string  `json:"mntyrEqualFold,omitempty"`
	MntyrContainsFold *string  `json:"mntyrContainsFold,omitempty"`

	// "con_type" field predicates.
	ConType             *string  `json:"conType,omitempty"`
	ConTypeNEQ          *string  `json:"conTypeNEQ,omitempty"`
	ConTypeIn           []string `json:"conTypeIn,omitempty"`
	ConTypeNotIn        []string `json:"conTypeNotIn,omitempty"`
	ConTypeGT           *string  `json:"conTypeGT,omitempty"`
	ConTypeGTE          *string  `json:"conTypeGTE,omitempty"`
	ConTypeLT           *string  `json:"conTypeLT,omitempty"`
	ConTypeLTE          *string  `json:"conTypeLTE,omitempty"`
	ConTypeContains     *string  `json:"conTypeContains,omitempty"`
	ConTypeHasPrefix    *string  `json:"conTypeHasPrefix,omitempty"`
	ConTypeHasSuffix    *string  `json:"conTypeHasSuffix,omitempty"`
	ConTypeIsNil        bool     `json:"conTypeIsNil,omitempty"`
	ConTypeNotNil       bool     `json:"conTypeNotNil,omitempty"`
	ConTypeEqualFold    *string  `json:"conTypeEqualFold,omitempty"`
	ConTypeContainsFold *string  `json:"conTypeContainsFold,omitempty"`

	// "is_finished" field predicates.
	IsFinished    *bool `json:"isFinished,omitempty"`
	IsFinishedNEQ *bool `json:"isFinishedNEQ,omitempty"`

	// "cje" field predicates.
	Cje       *float64  `json:"cje,omitempty"`
	CjeNEQ    *float64  `json:"cjeNEQ,omitempty"`
	CjeIn     []float64 `json:"cjeIn,omitempty"`
	CjeNotIn  []float64 `json:"cjeNotIn,omitempty"`
	CjeGT     *float64  `json:"cjeGT,omitempty"`
	CjeGTE    *float64  `json:"cjeGTE,omitempty"`
	CjeLT     *float64  `json:"cjeLT,omitempty"`
	CjeLTE    *float64  `json:"cjeLTE,omitempty"`
	CjeIsNil  bool      `json:"cjeIsNil,omitempty"`
	CjeNotNil bool      `json:"cjeNotNil,omitempty"`

	// "yye" field predicates.
	Yye       *float64  `json:"yye,omitempty"`
	YyeNEQ    *float64  `json:"yyeNEQ,omitempty"`
	YyeIn     []float64 `json:"yyeIn,omitempty"`
	YyeNotIn  []float64 `json:"yyeNotIn,omitempty"`
	YyeGT     *float64  `json:"yyeGT,omitempty"`
	YyeGTE    *float64  `json:"yyeGTE,omitempty"`
	YyeLT     *float64  `json:"yyeLT,omitempty"`
	YyeLTE    *float64  `json:"yyeLTE,omitempty"`
	YyeIsNil  bool      `json:"yyeIsNil,omitempty"`
	YyeNotNil bool      `json:"yyeNotNil,omitempty"`

	// "xjl" field predicates.
	Xjl       *float64  `json:"xjl,omitempty"`
	XjlNEQ    *float64  `json:"xjlNEQ,omitempty"`
	XjlIn     []float64 `json:"xjlIn,omitempty"`
	XjlNotIn  []float64 `json:"xjlNotIn,omitempty"`
	XjlGT     *float64  `json:"xjlGT,omitempty"`
	XjlGTE    *float64  `json:"xjlGTE,omitempty"`
	XjlLT     *float64  `json:"xjlLT,omitempty"`
	XjlLTE    *float64  `json:"xjlLTE,omitempty"`
	XjlIsNil  bool      `json:"xjlIsNil,omitempty"`
	XjlNotNil bool      `json:"xjlNotNil,omitempty"`

	// "xmglf_ys" field predicates.
	XmglfYs       *float64  `json:"xmglfYs,omitempty"`
	XmglfYsNEQ    *float64  `json:"xmglfYsNEQ,omitempty"`
	XmglfYsIn     []float64 `json:"xmglfYsIn,omitempty"`
	XmglfYsNotIn  []float64 `json:"xmglfYsNotIn,omitempty"`
	XmglfYsGT     *float64  `json:"xmglfYsGT,omitempty"`
	XmglfYsGTE    *float64  `json:"xmglfYsGTE,omitempty"`
	XmglfYsLT     *float64  `json:"xmglfYsLT,omitempty"`
	XmglfYsLTE    *float64  `json:"xmglfYsLTE,omitempty"`
	XmglfYsIsNil  bool      `json:"xmglfYsIsNil,omitempty"`
	XmglfYsNotNil bool      `json:"xmglfYsNotNil,omitempty"`

	// "xmglf_lj" field predicates.
	XmglfLj       *float64  `json:"xmglfLj,omitempty"`
	XmglfLjNEQ    *float64  `json:"xmglfLjNEQ,omitempty"`
	XmglfLjIn     []float64 `json:"xmglfLjIn,omitempty"`
	XmglfLjNotIn  []float64 `json:"xmglfLjNotIn,omitempty"`
	XmglfLjGT     *float64  `json:"xmglfLjGT,omitempty"`
	XmglfLjGTE    *float64  `json:"xmglfLjGTE,omitempty"`
	XmglfLjLT     *float64  `json:"xmglfLjLT,omitempty"`
	XmglfLjLTE    *float64  `json:"xmglfLjLTE,omitempty"`
	XmglfLjIsNil  bool      `json:"xmglfLjIsNil,omitempty"`
	XmglfLjNotNil bool      `json:"xmglfLjNotNil,omitempty"`

	// "xmsjf" field predicates.
	Xmsjf       *float64  `json:"xmsjf,omitempty"`
	XmsjfNEQ    *float64  `json:"xmsjfNEQ,omitempty"`
	XmsjfIn     []float64 `json:"xmsjfIn,omitempty"`
	XmsjfNotIn  []float64 `json:"xmsjfNotIn,omitempty"`
	XmsjfGT     *float64  `json:"xmsjfGT,omitempty"`
	XmsjfGTE    *float64  `json:"xmsjfGTE,omitempty"`
	XmsjfLT     *float64  `json:"xmsjfLT,omitempty"`
	XmsjfLTE    *float64  `json:"xmsjfLTE,omitempty"`
	XmsjfIsNil  bool      `json:"xmsjfIsNil,omitempty"`
	XmsjfNotNil bool      `json:"xmsjfNotNil,omitempty"`

	// "xmfzr" field predicates.
	Xmfzr             *string  `json:"xmfzr,omitempty"`
	XmfzrNEQ          *string  `json:"xmfzrNEQ,omitempty"`
	XmfzrIn           []string `json:"xmfzrIn,omitempty"`
	XmfzrNotIn        []string `json:"xmfzrNotIn,omitempty"`
	XmfzrGT           *string  `json:"xmfzrGT,omitempty"`
	XmfzrGTE          *string  `json:"xmfzrGTE,omitempty"`
	XmfzrLT           *string  `json:"xmfzrLT,omitempty"`
	XmfzrLTE          *string  `json:"xmfzrLTE,omitempty"`
	XmfzrContains     *string  `json:"xmfzrContains,omitempty"`
	XmfzrHasPrefix    *string  `json:"xmfzrHasPrefix,omitempty"`
	XmfzrHasSuffix    *string  `json:"xmfzrHasSuffix,omitempty"`
	XmfzrIsNil        bool     `json:"xmfzrIsNil,omitempty"`
	XmfzrNotNil       bool     `json:"xmfzrNotNil,omitempty"`
	XmfzrEqualFold    *string  `json:"xmfzrEqualFold,omitempty"`
	XmfzrContainsFold *string  `json:"xmfzrContainsFold,omitempty"`

	// "owner_apply_amount" field predicates.
	OwnerApplyAmount       *float64  `json:"ownerApplyAmount,omitempty"`
	OwnerApplyAmountNEQ    *float64  `json:"ownerApplyAmountNEQ,omitempty"`
	OwnerApplyAmountIn     []float64 `json:"ownerApplyAmountIn,omitempty"`
	OwnerApplyAmountNotIn  []float64 `json:"ownerApplyAmountNotIn,omitempty"`
	OwnerApplyAmountGT     *float64  `json:"ownerApplyAmountGT,omitempty"`
	OwnerApplyAmountGTE    *float64  `json:"ownerApplyAmountGTE,omitempty"`
	OwnerApplyAmountLT     *float64  `json:"ownerApplyAmountLT,omitempty"`
	OwnerApplyAmountLTE    *float64  `json:"ownerApplyAmountLTE,omitempty"`
	OwnerApplyAmountIsNil  bool      `json:"ownerApplyAmountIsNil,omitempty"`
	OwnerApplyAmountNotNil bool      `json:"ownerApplyAmountNotNil,omitempty"`

	// "owner_apply_count" field predicates.
	OwnerApplyCount       *int  `json:"ownerApplyCount,omitempty"`
	OwnerApplyCountNEQ    *int  `json:"ownerApplyCountNEQ,omitempty"`
	OwnerApplyCountIn     []int `json:"ownerApplyCountIn,omitempty"`
	OwnerApplyCountNotIn  []int `json:"ownerApplyCountNotIn,omitempty"`
	OwnerApplyCountGT     *int  `json:"ownerApplyCountGT,omitempty"`
	OwnerApplyCountGTE    *int  `json:"ownerApplyCountGTE,omitempty"`
	OwnerApplyCountLT     *int  `json:"ownerApplyCountLT,omitempty"`
	OwnerApplyCountLTE    *int  `json:"ownerApplyCountLTE,omitempty"`
	OwnerApplyCountIsNil  bool  `json:"ownerApplyCountIsNil,omitempty"`
	OwnerApplyCountNotNil bool  `json:"ownerApplyCountNotNil,omitempty"`

	// "owner_approve_amount" field predicates.
	OwnerApproveAmount       *float64  `json:"ownerApproveAmount,omitempty"`
	OwnerApproveAmountNEQ    *float64  `json:"ownerApproveAmountNEQ,omitempty"`
	OwnerApproveAmountIn     []float64 `json:"ownerApproveAmountIn,omitempty"`
	OwnerApproveAmountNotIn  []float64 `json:"ownerApproveAmountNotIn,omitempty"`
	OwnerApproveAmountGT     *float64  `json:"ownerApproveAmountGT,omitempty"`
	OwnerApproveAmountGTE    *float64  `json:"ownerApproveAmountGTE,omitempty"`
	OwnerApproveAmountLT     *float64  `json:"ownerApproveAmountLT,omitempty"`
	OwnerApproveAmountLTE    *float64  `json:"ownerApproveAmountLTE,omitempty"`
	OwnerApproveAmountIsNil  bool      `json:"ownerApproveAmountIsNil,omitempty"`
	OwnerApproveAmountNotNil bool      `json:"ownerApproveAmountNotNil,omitempty"`

	// "owner_approve_count" field predicates.
	OwnerApproveCount       *int  `json:"ownerApproveCount,omitempty"`
	OwnerApproveCountNEQ    *int  `json:"ownerApproveCountNEQ,omitempty"`
	OwnerApproveCountIn     []int `json:"ownerApproveCountIn,omitempty"`
	OwnerApproveCountNotIn  []int `json:"ownerApproveCountNotIn,omitempty"`
	OwnerApproveCountGT     *int  `json:"ownerApproveCountGT,omitempty"`
	OwnerApproveCountGTE    *int  `json:"ownerApproveCountGTE,omitempty"`
	OwnerApproveCountLT     *int  `json:"ownerApproveCountLT,omitempty"`
	OwnerApproveCountLTE    *int  `json:"ownerApproveCountLTE,omitempty"`
	OwnerApproveCountIsNil  bool  `json:"ownerApproveCountIsNil,omitempty"`
	OwnerApproveCountNotNil bool  `json:"ownerApproveCountNotNil,omitempty"`

	// "contractor_apply_amount" field predicates.
	ContractorApplyAmount       *float64  `json:"contractorApplyAmount,omitempty"`
	ContractorApplyAmountNEQ    *float64  `json:"contractorApplyAmountNEQ,omitempty"`
	ContractorApplyAmountIn     []float64 `json:"contractorApplyAmountIn,omitempty"`
	ContractorApplyAmountNotIn  []float64 `json:"contractorApplyAmountNotIn,omitempty"`
	ContractorApplyAmountGT     *float64  `json:"contractorApplyAmountGT,omitempty"`
	ContractorApplyAmountGTE    *float64  `json:"contractorApplyAmountGTE,omitempty"`
	ContractorApplyAmountLT     *float64  `json:"contractorApplyAmountLT,omitempty"`
	ContractorApplyAmountLTE    *float64  `json:"contractorApplyAmountLTE,omitempty"`
	ContractorApplyAmountIsNil  bool      `json:"contractorApplyAmountIsNil,omitempty"`
	ContractorApplyAmountNotNil bool      `json:"contractorApplyAmountNotNil,omitempty"`

	// "contractor_apply_count" field predicates.
	ContractorApplyCount       *int  `json:"contractorApplyCount,omitempty"`
	ContractorApplyCountNEQ    *int  `json:"contractorApplyCountNEQ,omitempty"`
	ContractorApplyCountIn     []int `json:"contractorApplyCountIn,omitempty"`
	ContractorApplyCountNotIn  []int `json:"contractorApplyCountNotIn,omitempty"`
	ContractorApplyCountGT     *int  `json:"contractorApplyCountGT,omitempty"`
	ContractorApplyCountGTE    *int  `json:"contractorApplyCountGTE,omitempty"`
	ContractorApplyCountLT     *int  `json:"contractorApplyCountLT,omitempty"`
	ContractorApplyCountLTE    *int  `json:"contractorApplyCountLTE,omitempty"`
	ContractorApplyCountIsNil  bool  `json:"contractorApplyCountIsNil,omitempty"`
	ContractorApplyCountNotNil bool  `json:"contractorApplyCountNotNil,omitempty"`

	// "contractor_approve_amount" field predicates.
	ContractorApproveAmount       *float64  `json:"contractorApproveAmount,omitempty"`
	ContractorApproveAmountNEQ    *float64  `json:"contractorApproveAmountNEQ,omitempty"`
	ContractorApproveAmountIn     []float64 `json:"contractorApproveAmountIn,omitempty"`
	ContractorApproveAmountNotIn  []float64 `json:"contractorApproveAmountNotIn,omitempty"`
	ContractorApproveAmountGT     *float64  `json:"contractorApproveAmountGT,omitempty"`
	ContractorApproveAmountGTE    *float64  `json:"contractorApproveAmountGTE,omitempty"`
	ContractorApproveAmountLT     *float64  `json:"contractorApproveAmountLT,omitempty"`
	ContractorApproveAmountLTE    *float64  `json:"contractorApproveAmountLTE,omitempty"`
	ContractorApproveAmountIsNil  bool      `json:"contractorApproveAmountIsNil,omitempty"`
	ContractorApproveAmountNotNil bool      `json:"contractorApproveAmountNotNil,omitempty"`

	// "contractor_approve_count" field predicates.
	ContractorApproveCount       *int  `json:"contractorApproveCount,omitempty"`
	ContractorApproveCountNEQ    *int  `json:"contractorApproveCountNEQ,omitempty"`
	ContractorApproveCountIn     []int `json:"contractorApproveCountIn,omitempty"`
	ContractorApproveCountNotIn  []int `json:"contractorApproveCountNotIn,omitempty"`
	ContractorApproveCountGT     *int  `json:"contractorApproveCountGT,omitempty"`
	ContractorApproveCountGTE    *int  `json:"contractorApproveCountGTE,omitempty"`
	ContractorApproveCountLT     *int  `json:"contractorApproveCountLT,omitempty"`
	ContractorApproveCountLTE    *int  `json:"contractorApproveCountLTE,omitempty"`
	ContractorApproveCountIsNil  bool  `json:"contractorApproveCountIsNil,omitempty"`
	ContractorApproveCountNotNil bool  `json:"contractorApproveCountNotNil,omitempty"`

	// "install_progress" field predicates.
	InstallProgress       *float64  `json:"installProgress,omitempty"`
	InstallProgressNEQ    *float64  `json:"installProgressNEQ,omitempty"`
	InstallProgressIn     []float64 `json:"installProgressIn,omitempty"`
	InstallProgressNotIn  []float64 `json:"installProgressNotIn,omitempty"`
	InstallProgressGT     *float64  `json:"installProgressGT,omitempty"`
	InstallProgressGTE    *float64  `json:"installProgressGTE,omitempty"`
	InstallProgressLT     *float64  `json:"installProgressLT,omitempty"`
	InstallProgressLTE    *float64  `json:"installProgressLTE,omitempty"`
	InstallProgressIsNil  bool      `json:"installProgressIsNil,omitempty"`
	InstallProgressNotNil bool      `json:"installProgressNotNil,omitempty"`

	// "effective_contract_amount" field predicates.
	EffectiveContractAmount       *float64  `json:"effectiveContractAmount,omitempty"`
	EffectiveContractAmountNEQ    *float64  `json:"effectiveContractAmountNEQ,omitempty"`
	EffectiveContractAmountIn     []float64 `json:"effectiveContractAmountIn,omitempty"`
	EffectiveContractAmountNotIn  []float64 `json:"effectiveContractAmountNotIn,omitempty"`
	EffectiveContractAmountGT     *float64  `json:"effectiveContractAmountGT,omitempty"`
	EffectiveContractAmountGTE    *float64  `json:"effectiveContractAmountGTE,omitempty"`
	EffectiveContractAmountLT     *float64  `json:"effectiveContractAmountLT,omitempty"`
	EffectiveContractAmountLTE    *float64  `json:"effectiveContractAmountLTE,omitempty"`
	EffectiveContractAmountIsNil  bool      `json:"effectiveContractAmountIsNil,omitempty"`
	EffectiveContractAmountNotNil bool      `json:"effectiveContractAmountNotNil,omitempty"`

	// "va_apply_amount" field predicates.
	VaApplyAmount       *float64  `json:"vaApplyAmount,omitempty"`
	VaApplyAmountNEQ    *float64  `json:"vaApplyAmountNEQ,omitempty"`
	VaApplyAmountIn     []float64 `json:"vaApplyAmountIn,omitempty"`
	VaApplyAmountNotIn  []float64 `json:"vaApplyAmountNotIn,omitempty"`
	VaApplyAmountGT     *float64  `json:"vaApplyAmountGT,omitempty"`
	VaApplyAmountGTE    *float64  `json:"vaApplyAmountGTE,omitempty"`
	VaApplyAmountLT     *float64  `json:"vaApplyAmountLT,omitempty"`
	VaApplyAmountLTE    *float64  `json:"vaApplyAmountLTE,omitempty"`
	VaApplyAmountIsNil  bool      `json:"vaApplyAmountIsNil,omitempty"`
	VaApplyAmountNotNil bool      `json:"vaApplyAmountNotNil,omitempty"`

	// "va_approve_amount" field predicates.
	VaApproveAmount       *float64  `json:"vaApproveAmount,omitempty"`
	VaApproveAmountNEQ    *float64  `json:"vaApproveAmountNEQ,omitempty"`
	VaApproveAmountIn     []float64 `json:"vaApproveAmountIn,omitempty"`
	VaApproveAmountNotIn  []float64 `json:"vaApproveAmountNotIn,omitempty"`
	VaApproveAmountGT     *float64  `json:"vaApproveAmountGT,omitempty"`
	VaApproveAmountGTE    *float64  `json:"vaApproveAmountGTE,omitempty"`
	VaApproveAmountLT     *float64  `json:"vaApproveAmountLT,omitempty"`
	VaApproveAmountLTE    *float64  `json:"vaApproveAmountLTE,omitempty"`
	VaApproveAmountIsNil  bool      `json:"vaApproveAmountIsNil,omitempty"`
	VaApproveAmountNotNil bool      `json:"vaApproveAmountNotNil,omitempty"`

	// "accumulated_statutory_deductions" field predicates.
	AccumulatedStatutoryDeductions       *float64  `json:"accumulatedStatutoryDeductions,omitempty"`
	AccumulatedStatutoryDeductionsNEQ    *float64  `json:"accumulatedStatutoryDeductionsNEQ,omitempty"`
	AccumulatedStatutoryDeductionsIn     []float64 `json:"accumulatedStatutoryDeductionsIn,omitempty"`
	AccumulatedStatutoryDeductionsNotIn  []float64 `json:"accumulatedStatutoryDeductionsNotIn,omitempty"`
	AccumulatedStatutoryDeductionsGT     *float64  `json:"accumulatedStatutoryDeductionsGT,omitempty"`
	AccumulatedStatutoryDeductionsGTE    *float64  `json:"accumulatedStatutoryDeductionsGTE,omitempty"`
	AccumulatedStatutoryDeductionsLT     *float64  `json:"accumulatedStatutoryDeductionsLT,omitempty"`
	AccumulatedStatutoryDeductionsLTE    *float64  `json:"accumulatedStatutoryDeductionsLTE,omitempty"`
	AccumulatedStatutoryDeductionsIsNil  bool      `json:"accumulatedStatutoryDeductionsIsNil,omitempty"`
	AccumulatedStatutoryDeductionsNotNil bool      `json:"accumulatedStatutoryDeductionsNotNil,omitempty"`

	// "accumulated_non_statutory_deductions" field predicates.
	AccumulatedNonStatutoryDeductions       *float64  `json:"accumulatedNonStatutoryDeductions,omitempty"`
	AccumulatedNonStatutoryDeductionsNEQ    *float64  `json:"accumulatedNonStatutoryDeductionsNEQ,omitempty"`
	AccumulatedNonStatutoryDeductionsIn     []float64 `json:"accumulatedNonStatutoryDeductionsIn,omitempty"`
	AccumulatedNonStatutoryDeductionsNotIn  []float64 `json:"accumulatedNonStatutoryDeductionsNotIn,omitempty"`
	AccumulatedNonStatutoryDeductionsGT     *float64  `json:"accumulatedNonStatutoryDeductionsGT,omitempty"`
	AccumulatedNonStatutoryDeductionsGTE    *float64  `json:"accumulatedNonStatutoryDeductionsGTE,omitempty"`
	AccumulatedNonStatutoryDeductionsLT     *float64  `json:"accumulatedNonStatutoryDeductionsLT,omitempty"`
	AccumulatedNonStatutoryDeductionsLTE    *float64  `json:"accumulatedNonStatutoryDeductionsLTE,omitempty"`
	AccumulatedNonStatutoryDeductionsIsNil  bool      `json:"accumulatedNonStatutoryDeductionsIsNil,omitempty"`
	AccumulatedNonStatutoryDeductionsNotNil bool      `json:"accumulatedNonStatutoryDeductionsNotNil,omitempty"`

	// "accumulated_statutory_deductions_period" field predicates.
	AccumulatedStatutoryDeductionsPeriod       *float64  `json:"accumulatedStatutoryDeductionsPeriod,omitempty"`
	AccumulatedStatutoryDeductionsPeriodNEQ    *float64  `json:"accumulatedStatutoryDeductionsPeriodNEQ,omitempty"`
	AccumulatedStatutoryDeductionsPeriodIn     []float64 `json:"accumulatedStatutoryDeductionsPeriodIn,omitempty"`
	AccumulatedStatutoryDeductionsPeriodNotIn  []float64 `json:"accumulatedStatutoryDeductionsPeriodNotIn,omitempty"`
	AccumulatedStatutoryDeductionsPeriodGT     *float64  `json:"accumulatedStatutoryDeductionsPeriodGT,omitempty"`
	AccumulatedStatutoryDeductionsPeriodGTE    *float64  `json:"accumulatedStatutoryDeductionsPeriodGTE,omitempty"`
	AccumulatedStatutoryDeductionsPeriodLT     *float64  `json:"accumulatedStatutoryDeductionsPeriodLT,omitempty"`
	AccumulatedStatutoryDeductionsPeriodLTE    *float64  `json:"accumulatedStatutoryDeductionsPeriodLTE,omitempty"`
	AccumulatedStatutoryDeductionsPeriodIsNil  bool      `json:"accumulatedStatutoryDeductionsPeriodIsNil,omitempty"`
	AccumulatedStatutoryDeductionsPeriodNotNil bool      `json:"accumulatedStatutoryDeductionsPeriodNotNil,omitempty"`

	// "accumulated_non_statutory_deductions_period" field predicates.
	AccumulatedNonStatutoryDeductionsPeriod       *float64  `json:"accumulatedNonStatutoryDeductionsPeriod,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodNEQ    *float64  `json:"accumulatedNonStatutoryDeductionsPeriodNEQ,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodIn     []float64 `json:"accumulatedNonStatutoryDeductionsPeriodIn,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodNotIn  []float64 `json:"accumulatedNonStatutoryDeductionsPeriodNotIn,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodGT     *float64  `json:"accumulatedNonStatutoryDeductionsPeriodGT,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodGTE    *float64  `json:"accumulatedNonStatutoryDeductionsPeriodGTE,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodLT     *float64  `json:"accumulatedNonStatutoryDeductionsPeriodLT,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodLTE    *float64  `json:"accumulatedNonStatutoryDeductionsPeriodLTE,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodIsNil  bool      `json:"accumulatedNonStatutoryDeductionsPeriodIsNil,omitempty"`
	AccumulatedNonStatutoryDeductionsPeriodNotNil bool      `json:"accumulatedNonStatutoryDeductionsPeriodNotNil,omitempty"`

	// "total_contract_amount" field predicates.
	TotalContractAmount       *float64  `json:"totalContractAmount,omitempty"`
	TotalContractAmountNEQ    *float64  `json:"totalContractAmountNEQ,omitempty"`
	TotalContractAmountIn     []float64 `json:"totalContractAmountIn,omitempty"`
	TotalContractAmountNotIn  []float64 `json:"totalContractAmountNotIn,omitempty"`
	TotalContractAmountGT     *float64  `json:"totalContractAmountGT,omitempty"`
	TotalContractAmountGTE    *float64  `json:"totalContractAmountGTE,omitempty"`
	TotalContractAmountLT     *float64  `json:"totalContractAmountLT,omitempty"`
	TotalContractAmountLTE    *float64  `json:"totalContractAmountLTE,omitempty"`
	TotalContractAmountIsNil  bool      `json:"totalContractAmountIsNil,omitempty"`
	TotalContractAmountNotNil bool      `json:"totalContractAmountNotNil,omitempty"`

	// "aluminum_plate_budget_percentage" field predicates.
	AluminumPlateBudgetPercentage       *float64  `json:"aluminumPlateBudgetPercentage,omitempty"`
	AluminumPlateBudgetPercentageNEQ    *float64  `json:"aluminumPlateBudgetPercentageNEQ,omitempty"`
	AluminumPlateBudgetPercentageIn     []float64 `json:"aluminumPlateBudgetPercentageIn,omitempty"`
	AluminumPlateBudgetPercentageNotIn  []float64 `json:"aluminumPlateBudgetPercentageNotIn,omitempty"`
	AluminumPlateBudgetPercentageGT     *float64  `json:"aluminumPlateBudgetPercentageGT,omitempty"`
	AluminumPlateBudgetPercentageGTE    *float64  `json:"aluminumPlateBudgetPercentageGTE,omitempty"`
	AluminumPlateBudgetPercentageLT     *float64  `json:"aluminumPlateBudgetPercentageLT,omitempty"`
	AluminumPlateBudgetPercentageLTE    *float64  `json:"aluminumPlateBudgetPercentageLTE,omitempty"`
	AluminumPlateBudgetPercentageIsNil  bool      `json:"aluminumPlateBudgetPercentageIsNil,omitempty"`
	AluminumPlateBudgetPercentageNotNil bool      `json:"aluminumPlateBudgetPercentageNotNil,omitempty"`

	// "aluminum_budget_percentage" field predicates.
	AluminumBudgetPercentage       *float64  `json:"aluminumBudgetPercentage,omitempty"`
	AluminumBudgetPercentageNEQ    *float64  `json:"aluminumBudgetPercentageNEQ,omitempty"`
	AluminumBudgetPercentageIn     []float64 `json:"aluminumBudgetPercentageIn,omitempty"`
	AluminumBudgetPercentageNotIn  []float64 `json:"aluminumBudgetPercentageNotIn,omitempty"`
	AluminumBudgetPercentageGT     *float64  `json:"aluminumBudgetPercentageGT,omitempty"`
	AluminumBudgetPercentageGTE    *float64  `json:"aluminumBudgetPercentageGTE,omitempty"`
	AluminumBudgetPercentageLT     *float64  `json:"aluminumBudgetPercentageLT,omitempty"`
	AluminumBudgetPercentageLTE    *float64  `json:"aluminumBudgetPercentageLTE,omitempty"`
	AluminumBudgetPercentageIsNil  bool      `json:"aluminumBudgetPercentageIsNil,omitempty"`
	AluminumBudgetPercentageNotNil bool      `json:"aluminumBudgetPercentageNotNil,omitempty"`

	// "glass_budget_percentage" field predicates.
	GlassBudgetPercentage       *float64  `json:"glassBudgetPercentage,omitempty"`
	GlassBudgetPercentageNEQ    *float64  `json:"glassBudgetPercentageNEQ,omitempty"`
	GlassBudgetPercentageIn     []float64 `json:"glassBudgetPercentageIn,omitempty"`
	GlassBudgetPercentageNotIn  []float64 `json:"glassBudgetPercentageNotIn,omitempty"`
	GlassBudgetPercentageGT     *float64  `json:"glassBudgetPercentageGT,omitempty"`
	GlassBudgetPercentageGTE    *float64  `json:"glassBudgetPercentageGTE,omitempty"`
	GlassBudgetPercentageLT     *float64  `json:"glassBudgetPercentageLT,omitempty"`
	GlassBudgetPercentageLTE    *float64  `json:"glassBudgetPercentageLTE,omitempty"`
	GlassBudgetPercentageIsNil  bool      `json:"glassBudgetPercentageIsNil,omitempty"`
	GlassBudgetPercentageNotNil bool      `json:"glassBudgetPercentageNotNil,omitempty"`

	// "iron_budget_percentage" field predicates.
	IronBudgetPercentage       *float64  `json:"ironBudgetPercentage,omitempty"`
	IronBudgetPercentageNEQ    *float64  `json:"ironBudgetPercentageNEQ,omitempty"`
	IronBudgetPercentageIn     []float64 `json:"ironBudgetPercentageIn,omitempty"`
	IronBudgetPercentageNotIn  []float64 `json:"ironBudgetPercentageNotIn,omitempty"`
	IronBudgetPercentageGT     *float64  `json:"ironBudgetPercentageGT,omitempty"`
	IronBudgetPercentageGTE    *float64  `json:"ironBudgetPercentageGTE,omitempty"`
	IronBudgetPercentageLT     *float64  `json:"ironBudgetPercentageLT,omitempty"`
	IronBudgetPercentageLTE    *float64  `json:"ironBudgetPercentageLTE,omitempty"`
	IronBudgetPercentageIsNil  bool      `json:"ironBudgetPercentageIsNil,omitempty"`
	IronBudgetPercentageNotNil bool      `json:"ironBudgetPercentageNotNil,omitempty"`

	// "milestone_plan_year" field predicates.
	MilestonePlanYear       *int  `json:"milestonePlanYear,omitempty"`
	MilestonePlanYearNEQ    *int  `json:"milestonePlanYearNEQ,omitempty"`
	MilestonePlanYearIn     []int `json:"milestonePlanYearIn,omitempty"`
	MilestonePlanYearNotIn  []int `json:"milestonePlanYearNotIn,omitempty"`
	MilestonePlanYearGT     *int  `json:"milestonePlanYearGT,omitempty"`
	MilestonePlanYearGTE    *int  `json:"milestonePlanYearGTE,omitempty"`
	MilestonePlanYearLT     *int  `json:"milestonePlanYearLT,omitempty"`
	MilestonePlanYearLTE    *int  `json:"milestonePlanYearLTE,omitempty"`
	MilestonePlanYearIsNil  bool  `json:"milestonePlanYearIsNil,omitempty"`
	MilestonePlanYearNotNil bool  `json:"milestonePlanYearNotNil,omitempty"`

	// "milestone_plan_month" field predicates.
	MilestonePlanMonth       *int  `json:"milestonePlanMonth,omitempty"`
	MilestonePlanMonthNEQ    *int  `json:"milestonePlanMonthNEQ,omitempty"`
	MilestonePlanMonthIn     []int `json:"milestonePlanMonthIn,omitempty"`
	MilestonePlanMonthNotIn  []int `json:"milestonePlanMonthNotIn,omitempty"`
	MilestonePlanMonthGT     *int  `json:"milestonePlanMonthGT,omitempty"`
	MilestonePlanMonthGTE    *int  `json:"milestonePlanMonthGTE,omitempty"`
	MilestonePlanMonthLT     *int  `json:"milestonePlanMonthLT,omitempty"`
	MilestonePlanMonthLTE    *int  `json:"milestonePlanMonthLTE,omitempty"`
	MilestonePlanMonthIsNil  bool  `json:"milestonePlanMonthIsNil,omitempty"`
	MilestonePlanMonthNotNil bool  `json:"milestonePlanMonthNotNil,omitempty"`

	// "milestone_done_year" field predicates.
	MilestoneDoneYear       *int  `json:"milestoneDoneYear,omitempty"`
	MilestoneDoneYearNEQ    *int  `json:"milestoneDoneYearNEQ,omitempty"`
	MilestoneDoneYearIn     []int `json:"milestoneDoneYearIn,omitempty"`
	MilestoneDoneYearNotIn  []int `json:"milestoneDoneYearNotIn,omitempty"`
	MilestoneDoneYearGT     *int  `json:"milestoneDoneYearGT,omitempty"`
	MilestoneDoneYearGTE    *int  `json:"milestoneDoneYearGTE,omitempty"`
	MilestoneDoneYearLT     *int  `json:"milestoneDoneYearLT,omitempty"`
	MilestoneDoneYearLTE    *int  `json:"milestoneDoneYearLTE,omitempty"`
	MilestoneDoneYearIsNil  bool  `json:"milestoneDoneYearIsNil,omitempty"`
	MilestoneDoneYearNotNil bool  `json:"milestoneDoneYearNotNil,omitempty"`

	// "milestone_done_month" field predicates.
	MilestoneDoneMonth       *int  `json:"milestoneDoneMonth,omitempty"`
	MilestoneDoneMonthNEQ    *int  `json:"milestoneDoneMonthNEQ,omitempty"`
	MilestoneDoneMonthIn     []int `json:"milestoneDoneMonthIn,omitempty"`
	MilestoneDoneMonthNotIn  []int `json:"milestoneDoneMonthNotIn,omitempty"`
	MilestoneDoneMonthGT     *int  `json:"milestoneDoneMonthGT,omitempty"`
	MilestoneDoneMonthGTE    *int  `json:"milestoneDoneMonthGTE,omitempty"`
	MilestoneDoneMonthLT     *int  `json:"milestoneDoneMonthLT,omitempty"`
	MilestoneDoneMonthLTE    *int  `json:"milestoneDoneMonthLTE,omitempty"`
	MilestoneDoneMonthIsNil  bool  `json:"milestoneDoneMonthIsNil,omitempty"`
	MilestoneDoneMonthNotNil bool  `json:"milestoneDoneMonthNotNil,omitempty"`

	// "pm_area" field predicates.
	PmArea       *float64  `json:"pmArea,omitempty"`
	PmAreaNEQ    *float64  `json:"pmAreaNEQ,omitempty"`
	PmAreaIn     []float64 `json:"pmAreaIn,omitempty"`
	PmAreaNotIn  []float64 `json:"pmAreaNotIn,omitempty"`
	PmAreaGT     *float64  `json:"pmAreaGT,omitempty"`
	PmAreaGTE    *float64  `json:"pmAreaGTE,omitempty"`
	PmAreaLT     *float64  `json:"pmAreaLT,omitempty"`
	PmAreaLTE    *float64  `json:"pmAreaLTE,omitempty"`
	PmAreaIsNil  bool      `json:"pmAreaIsNil,omitempty"`
	PmAreaNotNil bool      `json:"pmAreaNotNil,omitempty"`

	// "pm_year_target" field predicates.
	PmYearTarget       *float64  `json:"pmYearTarget,omitempty"`
	PmYearTargetNEQ    *float64  `json:"pmYearTargetNEQ,omitempty"`
	PmYearTargetIn     []float64 `json:"pmYearTargetIn,omitempty"`
	PmYearTargetNotIn  []float64 `json:"pmYearTargetNotIn,omitempty"`
	PmYearTargetGT     *float64  `json:"pmYearTargetGT,omitempty"`
	PmYearTargetGTE    *float64  `json:"pmYearTargetGTE,omitempty"`
	PmYearTargetLT     *float64  `json:"pmYearTargetLT,omitempty"`
	PmYearTargetLTE    *float64  `json:"pmYearTargetLTE,omitempty"`
	PmYearTargetIsNil  bool      `json:"pmYearTargetIsNil,omitempty"`
	PmYearTargetNotNil bool      `json:"pmYearTargetNotNil,omitempty"`

	// "pm_month_target" field predicates.
	PmMonthTarget       *float64  `json:"pmMonthTarget,omitempty"`
	PmMonthTargetNEQ    *float64  `json:"pmMonthTargetNEQ,omitempty"`
	PmMonthTargetIn     []float64 `json:"pmMonthTargetIn,omitempty"`
	PmMonthTargetNotIn  []float64 `json:"pmMonthTargetNotIn,omitempty"`
	PmMonthTargetGT     *float64  `json:"pmMonthTargetGT,omitempty"`
	PmMonthTargetGTE    *float64  `json:"pmMonthTargetGTE,omitempty"`
	PmMonthTargetLT     *float64  `json:"pmMonthTargetLT,omitempty"`
	PmMonthTargetLTE    *float64  `json:"pmMonthTargetLTE,omitempty"`
	PmMonthTargetIsNil  bool      `json:"pmMonthTargetIsNil,omitempty"`
	PmMonthTargetNotNil bool      `json:"pmMonthTargetNotNil,omitempty"`

	// "pm_year_actual" field predicates.
	PmYearActual       *float64  `json:"pmYearActual,omitempty"`
	PmYearActualNEQ    *float64  `json:"pmYearActualNEQ,omitempty"`
	PmYearActualIn     []float64 `json:"pmYearActualIn,omitempty"`
	PmYearActualNotIn  []float64 `json:"pmYearActualNotIn,omitempty"`
	PmYearActualGT     *float64  `json:"pmYearActualGT,omitempty"`
	PmYearActualGTE    *float64  `json:"pmYearActualGTE,omitempty"`
	PmYearActualLT     *float64  `json:"pmYearActualLT,omitempty"`
	PmYearActualLTE    *float64  `json:"pmYearActualLTE,omitempty"`
	PmYearActualIsNil  bool      `json:"pmYearActualIsNil,omitempty"`
	PmYearActualNotNil bool      `json:"pmYearActualNotNil,omitempty"`

	// "pm_month_actual" field predicates.
	PmMonthActual       *float64  `json:"pmMonthActual,omitempty"`
	PmMonthActualNEQ    *float64  `json:"pmMonthActualNEQ,omitempty"`
	PmMonthActualIn     []float64 `json:"pmMonthActualIn,omitempty"`
	PmMonthActualNotIn  []float64 `json:"pmMonthActualNotIn,omitempty"`
	PmMonthActualGT     *float64  `json:"pmMonthActualGT,omitempty"`
	PmMonthActualGTE    *float64  `json:"pmMonthActualGTE,omitempty"`
	PmMonthActualLT     *float64  `json:"pmMonthActualLT,omitempty"`
	PmMonthActualLTE    *float64  `json:"pmMonthActualLTE,omitempty"`
	PmMonthActualIsNil  bool      `json:"pmMonthActualIsNil,omitempty"`
	PmMonthActualNotNil bool      `json:"pmMonthActualNotNil,omitempty"`

	// "pm_total" field predicates.
	PmTotal       *float64  `json:"pmTotal,omitempty"`
	PmTotalNEQ    *float64  `json:"pmTotalNEQ,omitempty"`
	PmTotalIn     []float64 `json:"pmTotalIn,omitempty"`
	PmTotalNotIn  []float64 `json:"pmTotalNotIn,omitempty"`
	PmTotalGT     *float64  `json:"pmTotalGT,omitempty"`
	PmTotalGTE    *float64  `json:"pmTotalGTE,omitempty"`
	PmTotalLT     *float64  `json:"pmTotalLT,omitempty"`
	PmTotalLTE    *float64  `json:"pmTotalLTE,omitempty"`
	PmTotalIsNil  bool      `json:"pmTotalIsNil,omitempty"`
	PmTotalNotNil bool      `json:"pmTotalNotNil,omitempty"`

	// "pm_yesterday" field predicates.
	PmYesterday       *float64  `json:"pmYesterday,omitempty"`
	PmYesterdayNEQ    *float64  `json:"pmYesterdayNEQ,omitempty"`
	PmYesterdayIn     []float64 `json:"pmYesterdayIn,omitempty"`
	PmYesterdayNotIn  []float64 `json:"pmYesterdayNotIn,omitempty"`
	PmYesterdayGT     *float64  `json:"pmYesterdayGT,omitempty"`
	PmYesterdayGTE    *float64  `json:"pmYesterdayGTE,omitempty"`
	PmYesterdayLT     *float64  `json:"pmYesterdayLT,omitempty"`
	PmYesterdayLTE    *float64  `json:"pmYesterdayLTE,omitempty"`
	PmYesterdayIsNil  bool      `json:"pmYesterdayIsNil,omitempty"`
	PmYesterdayNotNil bool      `json:"pmYesterdayNotNil,omitempty"`

	// "unit_inventory_total" field predicates.
	UnitInventoryTotal       *float64  `json:"unitInventoryTotal,omitempty"`
	UnitInventoryTotalNEQ    *float64  `json:"unitInventoryTotalNEQ,omitempty"`
	UnitInventoryTotalIn     []float64 `json:"unitInventoryTotalIn,omitempty"`
	UnitInventoryTotalNotIn  []float64 `json:"unitInventoryTotalNotIn,omitempty"`
	UnitInventoryTotalGT     *float64  `json:"unitInventoryTotalGT,omitempty"`
	UnitInventoryTotalGTE    *float64  `json:"unitInventoryTotalGTE,omitempty"`
	UnitInventoryTotalLT     *float64  `json:"unitInventoryTotalLT,omitempty"`
	UnitInventoryTotalLTE    *float64  `json:"unitInventoryTotalLTE,omitempty"`
	UnitInventoryTotalIsNil  bool      `json:"unitInventoryTotalIsNil,omitempty"`
	UnitInventoryTotalNotNil bool      `json:"unitInventoryTotalNotNil,omitempty"`

	// "unit_component_total" field predicates.
	UnitComponentTotal       *float64  `json:"unitComponentTotal,omitempty"`
	UnitComponentTotalNEQ    *float64  `json:"unitComponentTotalNEQ,omitempty"`
	UnitComponentTotalIn     []float64 `json:"unitComponentTotalIn,omitempty"`
	UnitComponentTotalNotIn  []float64 `json:"unitComponentTotalNotIn,omitempty"`
	UnitComponentTotalGT     *float64  `json:"unitComponentTotalGT,omitempty"`
	UnitComponentTotalGTE    *float64  `json:"unitComponentTotalGTE,omitempty"`
	UnitComponentTotalLT     *float64  `json:"unitComponentTotalLT,omitempty"`
	UnitComponentTotalLTE    *float64  `json:"unitComponentTotalLTE,omitempty"`
	UnitComponentTotalIsNil  bool      `json:"unitComponentTotalIsNil,omitempty"`
	UnitComponentTotalNotNil bool      `json:"unitComponentTotalNotNil,omitempty"`

	// "unit_component_production" field predicates.
	UnitComponentProduction       *float64  `json:"unitComponentProduction,omitempty"`
	UnitComponentProductionNEQ    *float64  `json:"unitComponentProductionNEQ,omitempty"`
	UnitComponentProductionIn     []float64 `json:"unitComponentProductionIn,omitempty"`
	UnitComponentProductionNotIn  []float64 `json:"unitComponentProductionNotIn,omitempty"`
	UnitComponentProductionGT     *float64  `json:"unitComponentProductionGT,omitempty"`
	UnitComponentProductionGTE    *float64  `json:"unitComponentProductionGTE,omitempty"`
	UnitComponentProductionLT     *float64  `json:"unitComponentProductionLT,omitempty"`
	UnitComponentProductionLTE    *float64  `json:"unitComponentProductionLTE,omitempty"`
	UnitComponentProductionIsNil  bool      `json:"unitComponentProductionIsNil,omitempty"`
	UnitComponentProductionNotNil bool      `json:"unitComponentProductionNotNil,omitempty"`

	// "unit_component_installation" field predicates.
	UnitComponentInstallation       *float64  `json:"unitComponentInstallation,omitempty"`
	UnitComponentInstallationNEQ    *float64  `json:"unitComponentInstallationNEQ,omitempty"`
	UnitComponentInstallationIn     []float64 `json:"unitComponentInstallationIn,omitempty"`
	UnitComponentInstallationNotIn  []float64 `json:"unitComponentInstallationNotIn,omitempty"`
	UnitComponentInstallationGT     *float64  `json:"unitComponentInstallationGT,omitempty"`
	UnitComponentInstallationGTE    *float64  `json:"unitComponentInstallationGTE,omitempty"`
	UnitComponentInstallationLT     *float64  `json:"unitComponentInstallationLT,omitempty"`
	UnitComponentInstallationLTE    *float64  `json:"unitComponentInstallationLTE,omitempty"`
	UnitComponentInstallationIsNil  bool      `json:"unitComponentInstallationIsNil,omitempty"`
	UnitComponentInstallationNotNil bool      `json:"unitComponentInstallationNotNil,omitempty"`

	// "material_loss" field predicates.
	MaterialLoss       *float64  `json:"materialLoss,omitempty"`
	MaterialLossNEQ    *float64  `json:"materialLossNEQ,omitempty"`
	MaterialLossIn     []float64 `json:"materialLossIn,omitempty"`
	MaterialLossNotIn  []float64 `json:"materialLossNotIn,omitempty"`
	MaterialLossGT     *float64  `json:"materialLossGT,omitempty"`
	MaterialLossGTE    *float64  `json:"materialLossGTE,omitempty"`
	MaterialLossLT     *float64  `json:"materialLossLT,omitempty"`
	MaterialLossLTE    *float64  `json:"materialLossLTE,omitempty"`
	MaterialLossIsNil  bool      `json:"materialLossIsNil,omitempty"`
	MaterialLossNotNil bool      `json:"materialLossNotNil,omitempty"`

	// "design_rated_weight" field predicates.
	DesignRatedWeight       *float64  `json:"designRatedWeight,omitempty"`
	DesignRatedWeightNEQ    *float64  `json:"designRatedWeightNEQ,omitempty"`
	DesignRatedWeightIn     []float64 `json:"designRatedWeightIn,omitempty"`
	DesignRatedWeightNotIn  []float64 `json:"designRatedWeightNotIn,omitempty"`
	DesignRatedWeightGT     *float64  `json:"designRatedWeightGT,omitempty"`
	DesignRatedWeightGTE    *float64  `json:"designRatedWeightGTE,omitempty"`
	DesignRatedWeightLT     *float64  `json:"designRatedWeightLT,omitempty"`
	DesignRatedWeightLTE    *float64  `json:"designRatedWeightLTE,omitempty"`
	DesignRatedWeightIsNil  bool      `json:"designRatedWeightIsNil,omitempty"`
	DesignRatedWeightNotNil bool      `json:"designRatedWeightNotNil,omitempty"`

	// "processing_weight" field predicates.
	ProcessingWeight       *float64  `json:"processingWeight,omitempty"`
	ProcessingWeightNEQ    *float64  `json:"processingWeightNEQ,omitempty"`
	ProcessingWeightIn     []float64 `json:"processingWeightIn,omitempty"`
	ProcessingWeightNotIn  []float64 `json:"processingWeightNotIn,omitempty"`
	ProcessingWeightGT     *float64  `json:"processingWeightGT,omitempty"`
	ProcessingWeightGTE    *float64  `json:"processingWeightGTE,omitempty"`
	ProcessingWeightLT     *float64  `json:"processingWeightLT,omitempty"`
	ProcessingWeightLTE    *float64  `json:"processingWeightLTE,omitempty"`
	ProcessingWeightIsNil  bool      `json:"processingWeightIsNil,omitempty"`
	ProcessingWeightNotNil bool      `json:"processingWeightNotNil,omitempty"`

	// "item_stock_weight" field predicates.
	ItemStockWeight       *float64  `json:"itemStockWeight,omitempty"`
	ItemStockWeightNEQ    *float64  `json:"itemStockWeightNEQ,omitempty"`
	ItemStockWeightIn     []float64 `json:"itemStockWeightIn,omitempty"`
	ItemStockWeightNotIn  []float64 `json:"itemStockWeightNotIn,omitempty"`
	ItemStockWeightGT     *float64  `json:"itemStockWeightGT,omitempty"`
	ItemStockWeightGTE    *float64  `json:"itemStockWeightGTE,omitempty"`
	ItemStockWeightLT     *float64  `json:"itemStockWeightLT,omitempty"`
	ItemStockWeightLTE    *float64  `json:"itemStockWeightLTE,omitempty"`
	ItemStockWeightIsNil  bool      `json:"itemStockWeightIsNil,omitempty"`
	ItemStockWeightNotNil bool      `json:"itemStockWeightNotNil,omitempty"`

	// "pallets_in_stock" field predicates.
	PalletsInStock       *float64  `json:"palletsInStock,omitempty"`
	PalletsInStockNEQ    *float64  `json:"palletsInStockNEQ,omitempty"`
	PalletsInStockIn     []float64 `json:"palletsInStockIn,omitempty"`
	PalletsInStockNotIn  []float64 `json:"palletsInStockNotIn,omitempty"`
	PalletsInStockGT     *float64  `json:"palletsInStockGT,omitempty"`
	PalletsInStockGTE    *float64  `json:"palletsInStockGTE,omitempty"`
	PalletsInStockLT     *float64  `json:"palletsInStockLT,omitempty"`
	PalletsInStockLTE    *float64  `json:"palletsInStockLTE,omitempty"`
	PalletsInStockIsNil  bool      `json:"palletsInStockIsNil,omitempty"`
	PalletsInStockNotNil bool      `json:"palletsInStockNotNil,omitempty"`

	// "parts_in_stock" field predicates.
	PartsInStock       *float64  `json:"partsInStock,omitempty"`
	PartsInStockNEQ    *float64  `json:"partsInStockNEQ,omitempty"`
	PartsInStockIn     []float64 `json:"partsInStockIn,omitempty"`
	PartsInStockNotIn  []float64 `json:"partsInStockNotIn,omitempty"`
	PartsInStockGT     *float64  `json:"partsInStockGT,omitempty"`
	PartsInStockGTE    *float64  `json:"partsInStockGTE,omitempty"`
	PartsInStockLT     *float64  `json:"partsInStockLT,omitempty"`
	PartsInStockLTE    *float64  `json:"partsInStockLTE,omitempty"`
	PartsInStockIsNil  bool      `json:"partsInStockIsNil,omitempty"`
	PartsInStockNotNil bool      `json:"partsInStockNotNil,omitempty"`

	// "quality_score" field predicates.
	QualityScore       *float64  `json:"qualityScore,omitempty"`
	QualityScoreNEQ    *float64  `json:"qualityScoreNEQ,omitempty"`
	QualityScoreIn     []float64 `json:"qualityScoreIn,omitempty"`
	QualityScoreNotIn  []float64 `json:"qualityScoreNotIn,omitempty"`
	QualityScoreGT     *float64  `json:"qualityScoreGT,omitempty"`
	QualityScoreGTE    *float64  `json:"qualityScoreGTE,omitempty"`
	QualityScoreLT     *float64  `json:"qualityScoreLT,omitempty"`
	QualityScoreLTE    *float64  `json:"qualityScoreLTE,omitempty"`
	QualityScoreIsNil  bool      `json:"qualityScoreIsNil,omitempty"`
	QualityScoreNotNil bool      `json:"qualityScoreNotNil,omitempty"`

	// "quality_ranking" field predicates.
	QualityRanking       *float64  `json:"qualityRanking,omitempty"`
	QualityRankingNEQ    *float64  `json:"qualityRankingNEQ,omitempty"`
	QualityRankingIn     []float64 `json:"qualityRankingIn,omitempty"`
	QualityRankingNotIn  []float64 `json:"qualityRankingNotIn,omitempty"`
	QualityRankingGT     *float64  `json:"qualityRankingGT,omitempty"`
	QualityRankingGTE    *float64  `json:"qualityRankingGTE,omitempty"`
	QualityRankingLT     *float64  `json:"qualityRankingLT,omitempty"`
	QualityRankingLTE    *float64  `json:"qualityRankingLTE,omitempty"`
	QualityRankingIsNil  bool      `json:"qualityRankingIsNil,omitempty"`
	QualityRankingNotNil bool      `json:"qualityRankingNotNil,omitempty"`

	// "bulk_materials_total_order_quantity" field predicates.
	BulkMaterialsTotalOrderQuantity       *float64  `json:"bulkMaterialsTotalOrderQuantity,omitempty"`
	BulkMaterialsTotalOrderQuantityNEQ    *float64  `json:"bulkMaterialsTotalOrderQuantityNEQ,omitempty"`
	BulkMaterialsTotalOrderQuantityIn     []float64 `json:"bulkMaterialsTotalOrderQuantityIn,omitempty"`
	BulkMaterialsTotalOrderQuantityNotIn  []float64 `json:"bulkMaterialsTotalOrderQuantityNotIn,omitempty"`
	BulkMaterialsTotalOrderQuantityGT     *float64  `json:"bulkMaterialsTotalOrderQuantityGT,omitempty"`
	BulkMaterialsTotalOrderQuantityGTE    *float64  `json:"bulkMaterialsTotalOrderQuantityGTE,omitempty"`
	BulkMaterialsTotalOrderQuantityLT     *float64  `json:"bulkMaterialsTotalOrderQuantityLT,omitempty"`
	BulkMaterialsTotalOrderQuantityLTE    *float64  `json:"bulkMaterialsTotalOrderQuantityLTE,omitempty"`
	BulkMaterialsTotalOrderQuantityIsNil  bool      `json:"bulkMaterialsTotalOrderQuantityIsNil,omitempty"`
	BulkMaterialsTotalOrderQuantityNotNil bool      `json:"bulkMaterialsTotalOrderQuantityNotNil,omitempty"`

	// "bulk_materials_completed_quantity" field predicates.
	BulkMaterialsCompletedQuantity       *float64  `json:"bulkMaterialsCompletedQuantity,omitempty"`
	BulkMaterialsCompletedQuantityNEQ    *float64  `json:"bulkMaterialsCompletedQuantityNEQ,omitempty"`
	BulkMaterialsCompletedQuantityIn     []float64 `json:"bulkMaterialsCompletedQuantityIn,omitempty"`
	BulkMaterialsCompletedQuantityNotIn  []float64 `json:"bulkMaterialsCompletedQuantityNotIn,omitempty"`
	BulkMaterialsCompletedQuantityGT     *float64  `json:"bulkMaterialsCompletedQuantityGT,omitempty"`
	BulkMaterialsCompletedQuantityGTE    *float64  `json:"bulkMaterialsCompletedQuantityGTE,omitempty"`
	BulkMaterialsCompletedQuantityLT     *float64  `json:"bulkMaterialsCompletedQuantityLT,omitempty"`
	BulkMaterialsCompletedQuantityLTE    *float64  `json:"bulkMaterialsCompletedQuantityLTE,omitempty"`
	BulkMaterialsCompletedQuantityIsNil  bool      `json:"bulkMaterialsCompletedQuantityIsNil,omitempty"`
	BulkMaterialsCompletedQuantityNotNil bool      `json:"bulkMaterialsCompletedQuantityNotNil,omitempty"`

	// "bulk_materials_uncompleted_quantity" field predicates.
	BulkMaterialsUncompletedQuantity       *float64  `json:"bulkMaterialsUncompletedQuantity,omitempty"`
	BulkMaterialsUncompletedQuantityNEQ    *float64  `json:"bulkMaterialsUncompletedQuantityNEQ,omitempty"`
	BulkMaterialsUncompletedQuantityIn     []float64 `json:"bulkMaterialsUncompletedQuantityIn,omitempty"`
	BulkMaterialsUncompletedQuantityNotIn  []float64 `json:"bulkMaterialsUncompletedQuantityNotIn,omitempty"`
	BulkMaterialsUncompletedQuantityGT     *float64  `json:"bulkMaterialsUncompletedQuantityGT,omitempty"`
	BulkMaterialsUncompletedQuantityGTE    *float64  `json:"bulkMaterialsUncompletedQuantityGTE,omitempty"`
	BulkMaterialsUncompletedQuantityLT     *float64  `json:"bulkMaterialsUncompletedQuantityLT,omitempty"`
	BulkMaterialsUncompletedQuantityLTE    *float64  `json:"bulkMaterialsUncompletedQuantityLTE,omitempty"`
	BulkMaterialsUncompletedQuantityIsNil  bool      `json:"bulkMaterialsUncompletedQuantityIsNil,omitempty"`
	BulkMaterialsUncompletedQuantityNotNil bool      `json:"bulkMaterialsUncompletedQuantityNotNil,omitempty"`

	// "plan_total_count" field predicates.
	PlanTotalCount       *int  `json:"planTotalCount,omitempty"`
	PlanTotalCountNEQ    *int  `json:"planTotalCountNEQ,omitempty"`
	PlanTotalCountIn     []int `json:"planTotalCountIn,omitempty"`
	PlanTotalCountNotIn  []int `json:"planTotalCountNotIn,omitempty"`
	PlanTotalCountGT     *int  `json:"planTotalCountGT,omitempty"`
	PlanTotalCountGTE    *int  `json:"planTotalCountGTE,omitempty"`
	PlanTotalCountLT     *int  `json:"planTotalCountLT,omitempty"`
	PlanTotalCountLTE    *int  `json:"planTotalCountLTE,omitempty"`
	PlanTotalCountIsNil  bool  `json:"planTotalCountIsNil,omitempty"`
	PlanTotalCountNotNil bool  `json:"planTotalCountNotNil,omitempty"`

	// "plan_overdue_count" field predicates.
	PlanOverdueCount       *int  `json:"planOverdueCount,omitempty"`
	PlanOverdueCountNEQ    *int  `json:"planOverdueCountNEQ,omitempty"`
	PlanOverdueCountIn     []int `json:"planOverdueCountIn,omitempty"`
	PlanOverdueCountNotIn  []int `json:"planOverdueCountNotIn,omitempty"`
	PlanOverdueCountGT     *int  `json:"planOverdueCountGT,omitempty"`
	PlanOverdueCountGTE    *int  `json:"planOverdueCountGTE,omitempty"`
	PlanOverdueCountLT     *int  `json:"planOverdueCountLT,omitempty"`
	PlanOverdueCountLTE    *int  `json:"planOverdueCountLTE,omitempty"`
	PlanOverdueCountIsNil  bool  `json:"planOverdueCountIsNil,omitempty"`
	PlanOverdueCountNotNil bool  `json:"planOverdueCountNotNil,omitempty"`

	// "plan_overdue_month_count" field predicates.
	PlanOverdueMonthCount       *int  `json:"planOverdueMonthCount,omitempty"`
	PlanOverdueMonthCountNEQ    *int  `json:"planOverdueMonthCountNEQ,omitempty"`
	PlanOverdueMonthCountIn     []int `json:"planOverdueMonthCountIn,omitempty"`
	PlanOverdueMonthCountNotIn  []int `json:"planOverdueMonthCountNotIn,omitempty"`
	PlanOverdueMonthCountGT     *int  `json:"planOverdueMonthCountGT,omitempty"`
	PlanOverdueMonthCountGTE    *int  `json:"planOverdueMonthCountGTE,omitempty"`
	PlanOverdueMonthCountLT     *int  `json:"planOverdueMonthCountLT,omitempty"`
	PlanOverdueMonthCountLTE    *int  `json:"planOverdueMonthCountLTE,omitempty"`
	PlanOverdueMonthCountIsNil  bool  `json:"planOverdueMonthCountIsNil,omitempty"`
	PlanOverdueMonthCountNotNil bool  `json:"planOverdueMonthCountNotNil,omitempty"`

	// "diagram_bd_finish_count" field predicates.
	DiagramBdFinishCount       *int  `json:"diagramBdFinishCount,omitempty"`
	DiagramBdFinishCountNEQ    *int  `json:"diagramBdFinishCountNEQ,omitempty"`
	DiagramBdFinishCountIn     []int `json:"diagramBdFinishCountIn,omitempty"`
	DiagramBdFinishCountNotIn  []int `json:"diagramBdFinishCountNotIn,omitempty"`
	DiagramBdFinishCountGT     *int  `json:"diagramBdFinishCountGT,omitempty"`
	DiagramBdFinishCountGTE    *int  `json:"diagramBdFinishCountGTE,omitempty"`
	DiagramBdFinishCountLT     *int  `json:"diagramBdFinishCountLT,omitempty"`
	DiagramBdFinishCountLTE    *int  `json:"diagramBdFinishCountLTE,omitempty"`
	DiagramBdFinishCountIsNil  bool  `json:"diagramBdFinishCountIsNil,omitempty"`
	DiagramBdFinishCountNotNil bool  `json:"diagramBdFinishCountNotNil,omitempty"`

	// "diagram_bd_total_count" field predicates.
	DiagramBdTotalCount       *int  `json:"diagramBdTotalCount,omitempty"`
	DiagramBdTotalCountNEQ    *int  `json:"diagramBdTotalCountNEQ,omitempty"`
	DiagramBdTotalCountIn     []int `json:"diagramBdTotalCountIn,omitempty"`
	DiagramBdTotalCountNotIn  []int `json:"diagramBdTotalCountNotIn,omitempty"`
	DiagramBdTotalCountGT     *int  `json:"diagramBdTotalCountGT,omitempty"`
	DiagramBdTotalCountGTE    *int  `json:"diagramBdTotalCountGTE,omitempty"`
	DiagramBdTotalCountLT     *int  `json:"diagramBdTotalCountLT,omitempty"`
	DiagramBdTotalCountLTE    *int  `json:"diagramBdTotalCountLTE,omitempty"`
	DiagramBdTotalCountIsNil  bool  `json:"diagramBdTotalCountIsNil,omitempty"`
	DiagramBdTotalCountNotNil bool  `json:"diagramBdTotalCountNotNil,omitempty"`

	// "diagram_construction_finish_count" field predicates.
	DiagramConstructionFinishCount       *int  `json:"diagramConstructionFinishCount,omitempty"`
	DiagramConstructionFinishCountNEQ    *int  `json:"diagramConstructionFinishCountNEQ,omitempty"`
	DiagramConstructionFinishCountIn     []int `json:"diagramConstructionFinishCountIn,omitempty"`
	DiagramConstructionFinishCountNotIn  []int `json:"diagramConstructionFinishCountNotIn,omitempty"`
	DiagramConstructionFinishCountGT     *int  `json:"diagramConstructionFinishCountGT,omitempty"`
	DiagramConstructionFinishCountGTE    *int  `json:"diagramConstructionFinishCountGTE,omitempty"`
	DiagramConstructionFinishCountLT     *int  `json:"diagramConstructionFinishCountLT,omitempty"`
	DiagramConstructionFinishCountLTE    *int  `json:"diagramConstructionFinishCountLTE,omitempty"`
	DiagramConstructionFinishCountIsNil  bool  `json:"diagramConstructionFinishCountIsNil,omitempty"`
	DiagramConstructionFinishCountNotNil bool  `json:"diagramConstructionFinishCountNotNil,omitempty"`

	// "diagram_construction_total_count" field predicates.
	DiagramConstructionTotalCount       *int  `json:"diagramConstructionTotalCount,omitempty"`
	DiagramConstructionTotalCountNEQ    *int  `json:"diagramConstructionTotalCountNEQ,omitempty"`
	DiagramConstructionTotalCountIn     []int `json:"diagramConstructionTotalCountIn,omitempty"`
	DiagramConstructionTotalCountNotIn  []int `json:"diagramConstructionTotalCountNotIn,omitempty"`
	DiagramConstructionTotalCountGT     *int  `json:"diagramConstructionTotalCountGT,omitempty"`
	DiagramConstructionTotalCountGTE    *int  `json:"diagramConstructionTotalCountGTE,omitempty"`
	DiagramConstructionTotalCountLT     *int  `json:"diagramConstructionTotalCountLT,omitempty"`
	DiagramConstructionTotalCountLTE    *int  `json:"diagramConstructionTotalCountLTE,omitempty"`
	DiagramConstructionTotalCountIsNil  bool  `json:"diagramConstructionTotalCountIsNil,omitempty"`
	DiagramConstructionTotalCountNotNil bool  `json:"diagramConstructionTotalCountNotNil,omitempty"`

	// "diagram_processing_finish_count" field predicates.
	DiagramProcessingFinishCount       *int  `json:"diagramProcessingFinishCount,omitempty"`
	DiagramProcessingFinishCountNEQ    *int  `json:"diagramProcessingFinishCountNEQ,omitempty"`
	DiagramProcessingFinishCountIn     []int `json:"diagramProcessingFinishCountIn,omitempty"`
	DiagramProcessingFinishCountNotIn  []int `json:"diagramProcessingFinishCountNotIn,omitempty"`
	DiagramProcessingFinishCountGT     *int  `json:"diagramProcessingFinishCountGT,omitempty"`
	DiagramProcessingFinishCountGTE    *int  `json:"diagramProcessingFinishCountGTE,omitempty"`
	DiagramProcessingFinishCountLT     *int  `json:"diagramProcessingFinishCountLT,omitempty"`
	DiagramProcessingFinishCountLTE    *int  `json:"diagramProcessingFinishCountLTE,omitempty"`
	DiagramProcessingFinishCountIsNil  bool  `json:"diagramProcessingFinishCountIsNil,omitempty"`
	DiagramProcessingFinishCountNotNil bool  `json:"diagramProcessingFinishCountNotNil,omitempty"`

	// "diagram_processing_total_count" field predicates.
	DiagramProcessingTotalCount       *int  `json:"diagramProcessingTotalCount,omitempty"`
	DiagramProcessingTotalCountNEQ    *int  `json:"diagramProcessingTotalCountNEQ,omitempty"`
	DiagramProcessingTotalCountIn     []int `json:"diagramProcessingTotalCountIn,omitempty"`
	DiagramProcessingTotalCountNotIn  []int `json:"diagramProcessingTotalCountNotIn,omitempty"`
	DiagramProcessingTotalCountGT     *int  `json:"diagramProcessingTotalCountGT,omitempty"`
	DiagramProcessingTotalCountGTE    *int  `json:"diagramProcessingTotalCountGTE,omitempty"`
	DiagramProcessingTotalCountLT     *int  `json:"diagramProcessingTotalCountLT,omitempty"`
	DiagramProcessingTotalCountLTE    *int  `json:"diagramProcessingTotalCountLTE,omitempty"`
	DiagramProcessingTotalCountIsNil  bool  `json:"diagramProcessingTotalCountIsNil,omitempty"`
	DiagramProcessingTotalCountNotNil bool  `json:"diagramProcessingTotalCountNotNil,omitempty"`

	// "diagram_c_approval_ratio_numerator" field predicates.
	DiagramCApprovalRatioNumerator       *int  `json:"diagramCApprovalRatioNumerator,omitempty"`
	DiagramCApprovalRatioNumeratorNEQ    *int  `json:"diagramCApprovalRatioNumeratorNEQ,omitempty"`
	DiagramCApprovalRatioNumeratorIn     []int `json:"diagramCApprovalRatioNumeratorIn,omitempty"`
	DiagramCApprovalRatioNumeratorNotIn  []int `json:"diagramCApprovalRatioNumeratorNotIn,omitempty"`
	DiagramCApprovalRatioNumeratorGT     *int  `json:"diagramCApprovalRatioNumeratorGT,omitempty"`
	DiagramCApprovalRatioNumeratorGTE    *int  `json:"diagramCApprovalRatioNumeratorGTE,omitempty"`
	DiagramCApprovalRatioNumeratorLT     *int  `json:"diagramCApprovalRatioNumeratorLT,omitempty"`
	DiagramCApprovalRatioNumeratorLTE    *int  `json:"diagramCApprovalRatioNumeratorLTE,omitempty"`
	DiagramCApprovalRatioNumeratorIsNil  bool  `json:"diagramCApprovalRatioNumeratorIsNil,omitempty"`
	DiagramCApprovalRatioNumeratorNotNil bool  `json:"diagramCApprovalRatioNumeratorNotNil,omitempty"`

	// "diagram_c_approval_ratio_denominator" field predicates.
	DiagramCApprovalRatioDenominator       *int  `json:"diagramCApprovalRatioDenominator,omitempty"`
	DiagramCApprovalRatioDenominatorNEQ    *int  `json:"diagramCApprovalRatioDenominatorNEQ,omitempty"`
	DiagramCApprovalRatioDenominatorIn     []int `json:"diagramCApprovalRatioDenominatorIn,omitempty"`
	DiagramCApprovalRatioDenominatorNotIn  []int `json:"diagramCApprovalRatioDenominatorNotIn,omitempty"`
	DiagramCApprovalRatioDenominatorGT     *int  `json:"diagramCApprovalRatioDenominatorGT,omitempty"`
	DiagramCApprovalRatioDenominatorGTE    *int  `json:"diagramCApprovalRatioDenominatorGTE,omitempty"`
	DiagramCApprovalRatioDenominatorLT     *int  `json:"diagramCApprovalRatioDenominatorLT,omitempty"`
	DiagramCApprovalRatioDenominatorLTE    *int  `json:"diagramCApprovalRatioDenominatorLTE,omitempty"`
	DiagramCApprovalRatioDenominatorIsNil  bool  `json:"diagramCApprovalRatioDenominatorIsNil,omitempty"`
	DiagramCApprovalRatioDenominatorNotNil bool  `json:"diagramCApprovalRatioDenominatorNotNil,omitempty"`

	// "vos" edge predicates.
	HasVos     *bool                  `json:"hasVos,omitempty"`
	HasVosWith []*ProjectVOWhereInput `json:"hasVosWith,omitempty"`

	// "project_staffs" edge predicates.
	HasProjectStaffs     *bool                     `json:"hasProjectStaffs,omitempty"`
	HasProjectStaffsWith []*ProjectStaffWhereInput `json:"hasProjectStaffsWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProjectWhereInput) AddPredicates(predicates ...predicate.Project) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProjectWhereInput filter on the ProjectQuery builder.
func (i *ProjectWhereInput) Filter(q *ProjectQuery) (*ProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProjectWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProjectWhereInput is returned in case the ProjectWhereInput is empty.
var ErrEmptyProjectWhereInput = errors.New("ent: empty predicate ProjectWhereInput")

// P returns a predicate for filtering projects.
// An error is returned if the input is empty or invalid.
func (i *ProjectWhereInput) P() (predicate.Project, error) {
	var predicates []predicate.Project
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, project.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Project, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, project.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Project, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, project.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, project.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, project.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, project.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, project.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, project.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, project.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, project.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, project.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, project.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, project.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, project.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, project.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, project.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, project.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, project.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, project.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, project.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, project.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, project.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, project.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, project.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, project.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, project.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, project.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Code != nil {
		predicates = append(predicates, project.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, project.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, project.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, project.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, project.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, project.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, project.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, project.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, project.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, project.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, project.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, project.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, project.CodeContainsFold(*i.CodeContainsFold))
	}
	if i.Manager != nil {
		predicates = append(predicates, project.ManagerEQ(*i.Manager))
	}
	if i.ManagerNEQ != nil {
		predicates = append(predicates, project.ManagerNEQ(*i.ManagerNEQ))
	}
	if len(i.ManagerIn) > 0 {
		predicates = append(predicates, project.ManagerIn(i.ManagerIn...))
	}
	if len(i.ManagerNotIn) > 0 {
		predicates = append(predicates, project.ManagerNotIn(i.ManagerNotIn...))
	}
	if i.ManagerGT != nil {
		predicates = append(predicates, project.ManagerGT(*i.ManagerGT))
	}
	if i.ManagerGTE != nil {
		predicates = append(predicates, project.ManagerGTE(*i.ManagerGTE))
	}
	if i.ManagerLT != nil {
		predicates = append(predicates, project.ManagerLT(*i.ManagerLT))
	}
	if i.ManagerLTE != nil {
		predicates = append(predicates, project.ManagerLTE(*i.ManagerLTE))
	}
	if i.ManagerContains != nil {
		predicates = append(predicates, project.ManagerContains(*i.ManagerContains))
	}
	if i.ManagerHasPrefix != nil {
		predicates = append(predicates, project.ManagerHasPrefix(*i.ManagerHasPrefix))
	}
	if i.ManagerHasSuffix != nil {
		predicates = append(predicates, project.ManagerHasSuffix(*i.ManagerHasSuffix))
	}
	if i.ManagerIsNil {
		predicates = append(predicates, project.ManagerIsNil())
	}
	if i.ManagerNotNil {
		predicates = append(predicates, project.ManagerNotNil())
	}
	if i.ManagerEqualFold != nil {
		predicates = append(predicates, project.ManagerEqualFold(*i.ManagerEqualFold))
	}
	if i.ManagerContainsFold != nil {
		predicates = append(predicates, project.ManagerContainsFold(*i.ManagerContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, project.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, project.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, project.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, project.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, project.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, project.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, project.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, project.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, project.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, project.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, project.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, project.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, project.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, project.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, project.NameContainsFold(*i.NameContainsFold))
	}
	if i.Owner != nil {
		predicates = append(predicates, project.OwnerEQ(*i.Owner))
	}
	if i.OwnerNEQ != nil {
		predicates = append(predicates, project.OwnerNEQ(*i.OwnerNEQ))
	}
	if len(i.OwnerIn) > 0 {
		predicates = append(predicates, project.OwnerIn(i.OwnerIn...))
	}
	if len(i.OwnerNotIn) > 0 {
		predicates = append(predicates, project.OwnerNotIn(i.OwnerNotIn...))
	}
	if i.OwnerGT != nil {
		predicates = append(predicates, project.OwnerGT(*i.OwnerGT))
	}
	if i.OwnerGTE != nil {
		predicates = append(predicates, project.OwnerGTE(*i.OwnerGTE))
	}
	if i.OwnerLT != nil {
		predicates = append(predicates, project.OwnerLT(*i.OwnerLT))
	}
	if i.OwnerLTE != nil {
		predicates = append(predicates, project.OwnerLTE(*i.OwnerLTE))
	}
	if i.OwnerContains != nil {
		predicates = append(predicates, project.OwnerContains(*i.OwnerContains))
	}
	if i.OwnerHasPrefix != nil {
		predicates = append(predicates, project.OwnerHasPrefix(*i.OwnerHasPrefix))
	}
	if i.OwnerHasSuffix != nil {
		predicates = append(predicates, project.OwnerHasSuffix(*i.OwnerHasSuffix))
	}
	if i.OwnerIsNil {
		predicates = append(predicates, project.OwnerIsNil())
	}
	if i.OwnerNotNil {
		predicates = append(predicates, project.OwnerNotNil())
	}
	if i.OwnerEqualFold != nil {
		predicates = append(predicates, project.OwnerEqualFold(*i.OwnerEqualFold))
	}
	if i.OwnerContainsFold != nil {
		predicates = append(predicates, project.OwnerContainsFold(*i.OwnerContainsFold))
	}
	if i.Jzs != nil {
		predicates = append(predicates, project.JzsEQ(*i.Jzs))
	}
	if i.JzsNEQ != nil {
		predicates = append(predicates, project.JzsNEQ(*i.JzsNEQ))
	}
	if len(i.JzsIn) > 0 {
		predicates = append(predicates, project.JzsIn(i.JzsIn...))
	}
	if len(i.JzsNotIn) > 0 {
		predicates = append(predicates, project.JzsNotIn(i.JzsNotIn...))
	}
	if i.JzsGT != nil {
		predicates = append(predicates, project.JzsGT(*i.JzsGT))
	}
	if i.JzsGTE != nil {
		predicates = append(predicates, project.JzsGTE(*i.JzsGTE))
	}
	if i.JzsLT != nil {
		predicates = append(predicates, project.JzsLT(*i.JzsLT))
	}
	if i.JzsLTE != nil {
		predicates = append(predicates, project.JzsLTE(*i.JzsLTE))
	}
	if i.JzsContains != nil {
		predicates = append(predicates, project.JzsContains(*i.JzsContains))
	}
	if i.JzsHasPrefix != nil {
		predicates = append(predicates, project.JzsHasPrefix(*i.JzsHasPrefix))
	}
	if i.JzsHasSuffix != nil {
		predicates = append(predicates, project.JzsHasSuffix(*i.JzsHasSuffix))
	}
	if i.JzsIsNil {
		predicates = append(predicates, project.JzsIsNil())
	}
	if i.JzsNotNil {
		predicates = append(predicates, project.JzsNotNil())
	}
	if i.JzsEqualFold != nil {
		predicates = append(predicates, project.JzsEqualFold(*i.JzsEqualFold))
	}
	if i.JzsContainsFold != nil {
		predicates = append(predicates, project.JzsContainsFold(*i.JzsContainsFold))
	}
	if i.Mcn != nil {
		predicates = append(predicates, project.McnEQ(*i.Mcn))
	}
	if i.McnNEQ != nil {
		predicates = append(predicates, project.McnNEQ(*i.McnNEQ))
	}
	if len(i.McnIn) > 0 {
		predicates = append(predicates, project.McnIn(i.McnIn...))
	}
	if len(i.McnNotIn) > 0 {
		predicates = append(predicates, project.McnNotIn(i.McnNotIn...))
	}
	if i.McnGT != nil {
		predicates = append(predicates, project.McnGT(*i.McnGT))
	}
	if i.McnGTE != nil {
		predicates = append(predicates, project.McnGTE(*i.McnGTE))
	}
	if i.McnLT != nil {
		predicates = append(predicates, project.McnLT(*i.McnLT))
	}
	if i.McnLTE != nil {
		predicates = append(predicates, project.McnLTE(*i.McnLTE))
	}
	if i.McnContains != nil {
		predicates = append(predicates, project.McnContains(*i.McnContains))
	}
	if i.McnHasPrefix != nil {
		predicates = append(predicates, project.McnHasPrefix(*i.McnHasPrefix))
	}
	if i.McnHasSuffix != nil {
		predicates = append(predicates, project.McnHasSuffix(*i.McnHasSuffix))
	}
	if i.McnIsNil {
		predicates = append(predicates, project.McnIsNil())
	}
	if i.McnNotNil {
		predicates = append(predicates, project.McnNotNil())
	}
	if i.McnEqualFold != nil {
		predicates = append(predicates, project.McnEqualFold(*i.McnEqualFold))
	}
	if i.McnContainsFold != nil {
		predicates = append(predicates, project.McnContainsFold(*i.McnContainsFold))
	}
	if i.Consultant != nil {
		predicates = append(predicates, project.ConsultantEQ(*i.Consultant))
	}
	if i.ConsultantNEQ != nil {
		predicates = append(predicates, project.ConsultantNEQ(*i.ConsultantNEQ))
	}
	if len(i.ConsultantIn) > 0 {
		predicates = append(predicates, project.ConsultantIn(i.ConsultantIn...))
	}
	if len(i.ConsultantNotIn) > 0 {
		predicates = append(predicates, project.ConsultantNotIn(i.ConsultantNotIn...))
	}
	if i.ConsultantGT != nil {
		predicates = append(predicates, project.ConsultantGT(*i.ConsultantGT))
	}
	if i.ConsultantGTE != nil {
		predicates = append(predicates, project.ConsultantGTE(*i.ConsultantGTE))
	}
	if i.ConsultantLT != nil {
		predicates = append(predicates, project.ConsultantLT(*i.ConsultantLT))
	}
	if i.ConsultantLTE != nil {
		predicates = append(predicates, project.ConsultantLTE(*i.ConsultantLTE))
	}
	if i.ConsultantContains != nil {
		predicates = append(predicates, project.ConsultantContains(*i.ConsultantContains))
	}
	if i.ConsultantHasPrefix != nil {
		predicates = append(predicates, project.ConsultantHasPrefix(*i.ConsultantHasPrefix))
	}
	if i.ConsultantHasSuffix != nil {
		predicates = append(predicates, project.ConsultantHasSuffix(*i.ConsultantHasSuffix))
	}
	if i.ConsultantIsNil {
		predicates = append(predicates, project.ConsultantIsNil())
	}
	if i.ConsultantNotNil {
		predicates = append(predicates, project.ConsultantNotNil())
	}
	if i.ConsultantEqualFold != nil {
		predicates = append(predicates, project.ConsultantEqualFold(*i.ConsultantEqualFold))
	}
	if i.ConsultantContainsFold != nil {
		predicates = append(predicates, project.ConsultantContainsFold(*i.ConsultantContainsFold))
	}
	if i.Areas != nil {
		predicates = append(predicates, project.AreasEQ(*i.Areas))
	}
	if i.AreasNEQ != nil {
		predicates = append(predicates, project.AreasNEQ(*i.AreasNEQ))
	}
	if len(i.AreasIn) > 0 {
		predicates = append(predicates, project.AreasIn(i.AreasIn...))
	}
	if len(i.AreasNotIn) > 0 {
		predicates = append(predicates, project.AreasNotIn(i.AreasNotIn...))
	}
	if i.AreasGT != nil {
		predicates = append(predicates, project.AreasGT(*i.AreasGT))
	}
	if i.AreasGTE != nil {
		predicates = append(predicates, project.AreasGTE(*i.AreasGTE))
	}
	if i.AreasLT != nil {
		predicates = append(predicates, project.AreasLT(*i.AreasLT))
	}
	if i.AreasLTE != nil {
		predicates = append(predicates, project.AreasLTE(*i.AreasLTE))
	}
	if i.AreasContains != nil {
		predicates = append(predicates, project.AreasContains(*i.AreasContains))
	}
	if i.AreasHasPrefix != nil {
		predicates = append(predicates, project.AreasHasPrefix(*i.AreasHasPrefix))
	}
	if i.AreasHasSuffix != nil {
		predicates = append(predicates, project.AreasHasSuffix(*i.AreasHasSuffix))
	}
	if i.AreasIsNil {
		predicates = append(predicates, project.AreasIsNil())
	}
	if i.AreasNotNil {
		predicates = append(predicates, project.AreasNotNil())
	}
	if i.AreasEqualFold != nil {
		predicates = append(predicates, project.AreasEqualFold(*i.AreasEqualFold))
	}
	if i.AreasContainsFold != nil {
		predicates = append(predicates, project.AreasContainsFold(*i.AreasContainsFold))
	}
	if i.StartDate != nil {
		predicates = append(predicates, project.StartDateEQ(*i.StartDate))
	}
	if i.StartDateNEQ != nil {
		predicates = append(predicates, project.StartDateNEQ(*i.StartDateNEQ))
	}
	if len(i.StartDateIn) > 0 {
		predicates = append(predicates, project.StartDateIn(i.StartDateIn...))
	}
	if len(i.StartDateNotIn) > 0 {
		predicates = append(predicates, project.StartDateNotIn(i.StartDateNotIn...))
	}
	if i.StartDateGT != nil {
		predicates = append(predicates, project.StartDateGT(*i.StartDateGT))
	}
	if i.StartDateGTE != nil {
		predicates = append(predicates, project.StartDateGTE(*i.StartDateGTE))
	}
	if i.StartDateLT != nil {
		predicates = append(predicates, project.StartDateLT(*i.StartDateLT))
	}
	if i.StartDateLTE != nil {
		predicates = append(predicates, project.StartDateLTE(*i.StartDateLTE))
	}
	if i.StartDateIsNil {
		predicates = append(predicates, project.StartDateIsNil())
	}
	if i.StartDateNotNil {
		predicates = append(predicates, project.StartDateNotNil())
	}
	if i.FsDate != nil {
		predicates = append(predicates, project.FsDateEQ(*i.FsDate))
	}
	if i.FsDateNEQ != nil {
		predicates = append(predicates, project.FsDateNEQ(*i.FsDateNEQ))
	}
	if len(i.FsDateIn) > 0 {
		predicates = append(predicates, project.FsDateIn(i.FsDateIn...))
	}
	if len(i.FsDateNotIn) > 0 {
		predicates = append(predicates, project.FsDateNotIn(i.FsDateNotIn...))
	}
	if i.FsDateGT != nil {
		predicates = append(predicates, project.FsDateGT(*i.FsDateGT))
	}
	if i.FsDateGTE != nil {
		predicates = append(predicates, project.FsDateGTE(*i.FsDateGTE))
	}
	if i.FsDateLT != nil {
		predicates = append(predicates, project.FsDateLT(*i.FsDateLT))
	}
	if i.FsDateLTE != nil {
		predicates = append(predicates, project.FsDateLTE(*i.FsDateLTE))
	}
	if i.FsDateIsNil {
		predicates = append(predicates, project.FsDateIsNil())
	}
	if i.FsDateNotNil {
		predicates = append(predicates, project.FsDateNotNil())
	}
	if i.OpDate != nil {
		predicates = append(predicates, project.OpDateEQ(*i.OpDate))
	}
	if i.OpDateNEQ != nil {
		predicates = append(predicates, project.OpDateNEQ(*i.OpDateNEQ))
	}
	if len(i.OpDateIn) > 0 {
		predicates = append(predicates, project.OpDateIn(i.OpDateIn...))
	}
	if len(i.OpDateNotIn) > 0 {
		predicates = append(predicates, project.OpDateNotIn(i.OpDateNotIn...))
	}
	if i.OpDateGT != nil {
		predicates = append(predicates, project.OpDateGT(*i.OpDateGT))
	}
	if i.OpDateGTE != nil {
		predicates = append(predicates, project.OpDateGTE(*i.OpDateGTE))
	}
	if i.OpDateLT != nil {
		predicates = append(predicates, project.OpDateLT(*i.OpDateLT))
	}
	if i.OpDateLTE != nil {
		predicates = append(predicates, project.OpDateLTE(*i.OpDateLTE))
	}
	if i.OpDateIsNil {
		predicates = append(predicates, project.OpDateIsNil())
	}
	if i.OpDateNotNil {
		predicates = append(predicates, project.OpDateNotNil())
	}
	if i.EndDate != nil {
		predicates = append(predicates, project.EndDateEQ(*i.EndDate))
	}
	if i.EndDateNEQ != nil {
		predicates = append(predicates, project.EndDateNEQ(*i.EndDateNEQ))
	}
	if len(i.EndDateIn) > 0 {
		predicates = append(predicates, project.EndDateIn(i.EndDateIn...))
	}
	if len(i.EndDateNotIn) > 0 {
		predicates = append(predicates, project.EndDateNotIn(i.EndDateNotIn...))
	}
	if i.EndDateGT != nil {
		predicates = append(predicates, project.EndDateGT(*i.EndDateGT))
	}
	if i.EndDateGTE != nil {
		predicates = append(predicates, project.EndDateGTE(*i.EndDateGTE))
	}
	if i.EndDateLT != nil {
		predicates = append(predicates, project.EndDateLT(*i.EndDateLT))
	}
	if i.EndDateLTE != nil {
		predicates = append(predicates, project.EndDateLTE(*i.EndDateLTE))
	}
	if i.EndDateIsNil {
		predicates = append(predicates, project.EndDateIsNil())
	}
	if i.EndDateNotNil {
		predicates = append(predicates, project.EndDateNotNil())
	}
	if i.Mntyr != nil {
		predicates = append(predicates, project.MntyrEQ(*i.Mntyr))
	}
	if i.MntyrNEQ != nil {
		predicates = append(predicates, project.MntyrNEQ(*i.MntyrNEQ))
	}
	if len(i.MntyrIn) > 0 {
		predicates = append(predicates, project.MntyrIn(i.MntyrIn...))
	}
	if len(i.MntyrNotIn) > 0 {
		predicates = append(predicates, project.MntyrNotIn(i.MntyrNotIn...))
	}
	if i.MntyrGT != nil {
		predicates = append(predicates, project.MntyrGT(*i.MntyrGT))
	}
	if i.MntyrGTE != nil {
		predicates = append(predicates, project.MntyrGTE(*i.MntyrGTE))
	}
	if i.MntyrLT != nil {
		predicates = append(predicates, project.MntyrLT(*i.MntyrLT))
	}
	if i.MntyrLTE != nil {
		predicates = append(predicates, project.MntyrLTE(*i.MntyrLTE))
	}
	if i.MntyrContains != nil {
		predicates = append(predicates, project.MntyrContains(*i.MntyrContains))
	}
	if i.MntyrHasPrefix != nil {
		predicates = append(predicates, project.MntyrHasPrefix(*i.MntyrHasPrefix))
	}
	if i.MntyrHasSuffix != nil {
		predicates = append(predicates, project.MntyrHasSuffix(*i.MntyrHasSuffix))
	}
	if i.MntyrIsNil {
		predicates = append(predicates, project.MntyrIsNil())
	}
	if i.MntyrNotNil {
		predicates = append(predicates, project.MntyrNotNil())
	}
	if i.MntyrEqualFold != nil {
		predicates = append(predicates, project.MntyrEqualFold(*i.MntyrEqualFold))
	}
	if i.MntyrContainsFold != nil {
		predicates = append(predicates, project.MntyrContainsFold(*i.MntyrContainsFold))
	}
	if i.ConType != nil {
		predicates = append(predicates, project.ConTypeEQ(*i.ConType))
	}
	if i.ConTypeNEQ != nil {
		predicates = append(predicates, project.ConTypeNEQ(*i.ConTypeNEQ))
	}
	if len(i.ConTypeIn) > 0 {
		predicates = append(predicates, project.ConTypeIn(i.ConTypeIn...))
	}
	if len(i.ConTypeNotIn) > 0 {
		predicates = append(predicates, project.ConTypeNotIn(i.ConTypeNotIn...))
	}
	if i.ConTypeGT != nil {
		predicates = append(predicates, project.ConTypeGT(*i.ConTypeGT))
	}
	if i.ConTypeGTE != nil {
		predicates = append(predicates, project.ConTypeGTE(*i.ConTypeGTE))
	}
	if i.ConTypeLT != nil {
		predicates = append(predicates, project.ConTypeLT(*i.ConTypeLT))
	}
	if i.ConTypeLTE != nil {
		predicates = append(predicates, project.ConTypeLTE(*i.ConTypeLTE))
	}
	if i.ConTypeContains != nil {
		predicates = append(predicates, project.ConTypeContains(*i.ConTypeContains))
	}
	if i.ConTypeHasPrefix != nil {
		predicates = append(predicates, project.ConTypeHasPrefix(*i.ConTypeHasPrefix))
	}
	if i.ConTypeHasSuffix != nil {
		predicates = append(predicates, project.ConTypeHasSuffix(*i.ConTypeHasSuffix))
	}
	if i.ConTypeIsNil {
		predicates = append(predicates, project.ConTypeIsNil())
	}
	if i.ConTypeNotNil {
		predicates = append(predicates, project.ConTypeNotNil())
	}
	if i.ConTypeEqualFold != nil {
		predicates = append(predicates, project.ConTypeEqualFold(*i.ConTypeEqualFold))
	}
	if i.ConTypeContainsFold != nil {
		predicates = append(predicates, project.ConTypeContainsFold(*i.ConTypeContainsFold))
	}
	if i.IsFinished != nil {
		predicates = append(predicates, project.IsFinishedEQ(*i.IsFinished))
	}
	if i.IsFinishedNEQ != nil {
		predicates = append(predicates, project.IsFinishedNEQ(*i.IsFinishedNEQ))
	}
	if i.Cje != nil {
		predicates = append(predicates, project.CjeEQ(*i.Cje))
	}
	if i.CjeNEQ != nil {
		predicates = append(predicates, project.CjeNEQ(*i.CjeNEQ))
	}
	if len(i.CjeIn) > 0 {
		predicates = append(predicates, project.CjeIn(i.CjeIn...))
	}
	if len(i.CjeNotIn) > 0 {
		predicates = append(predicates, project.CjeNotIn(i.CjeNotIn...))
	}
	if i.CjeGT != nil {
		predicates = append(predicates, project.CjeGT(*i.CjeGT))
	}
	if i.CjeGTE != nil {
		predicates = append(predicates, project.CjeGTE(*i.CjeGTE))
	}
	if i.CjeLT != nil {
		predicates = append(predicates, project.CjeLT(*i.CjeLT))
	}
	if i.CjeLTE != nil {
		predicates = append(predicates, project.CjeLTE(*i.CjeLTE))
	}
	if i.CjeIsNil {
		predicates = append(predicates, project.CjeIsNil())
	}
	if i.CjeNotNil {
		predicates = append(predicates, project.CjeNotNil())
	}
	if i.Yye != nil {
		predicates = append(predicates, project.YyeEQ(*i.Yye))
	}
	if i.YyeNEQ != nil {
		predicates = append(predicates, project.YyeNEQ(*i.YyeNEQ))
	}
	if len(i.YyeIn) > 0 {
		predicates = append(predicates, project.YyeIn(i.YyeIn...))
	}
	if len(i.YyeNotIn) > 0 {
		predicates = append(predicates, project.YyeNotIn(i.YyeNotIn...))
	}
	if i.YyeGT != nil {
		predicates = append(predicates, project.YyeGT(*i.YyeGT))
	}
	if i.YyeGTE != nil {
		predicates = append(predicates, project.YyeGTE(*i.YyeGTE))
	}
	if i.YyeLT != nil {
		predicates = append(predicates, project.YyeLT(*i.YyeLT))
	}
	if i.YyeLTE != nil {
		predicates = append(predicates, project.YyeLTE(*i.YyeLTE))
	}
	if i.YyeIsNil {
		predicates = append(predicates, project.YyeIsNil())
	}
	if i.YyeNotNil {
		predicates = append(predicates, project.YyeNotNil())
	}
	if i.Xjl != nil {
		predicates = append(predicates, project.XjlEQ(*i.Xjl))
	}
	if i.XjlNEQ != nil {
		predicates = append(predicates, project.XjlNEQ(*i.XjlNEQ))
	}
	if len(i.XjlIn) > 0 {
		predicates = append(predicates, project.XjlIn(i.XjlIn...))
	}
	if len(i.XjlNotIn) > 0 {
		predicates = append(predicates, project.XjlNotIn(i.XjlNotIn...))
	}
	if i.XjlGT != nil {
		predicates = append(predicates, project.XjlGT(*i.XjlGT))
	}
	if i.XjlGTE != nil {
		predicates = append(predicates, project.XjlGTE(*i.XjlGTE))
	}
	if i.XjlLT != nil {
		predicates = append(predicates, project.XjlLT(*i.XjlLT))
	}
	if i.XjlLTE != nil {
		predicates = append(predicates, project.XjlLTE(*i.XjlLTE))
	}
	if i.XjlIsNil {
		predicates = append(predicates, project.XjlIsNil())
	}
	if i.XjlNotNil {
		predicates = append(predicates, project.XjlNotNil())
	}
	if i.XmglfYs != nil {
		predicates = append(predicates, project.XmglfYsEQ(*i.XmglfYs))
	}
	if i.XmglfYsNEQ != nil {
		predicates = append(predicates, project.XmglfYsNEQ(*i.XmglfYsNEQ))
	}
	if len(i.XmglfYsIn) > 0 {
		predicates = append(predicates, project.XmglfYsIn(i.XmglfYsIn...))
	}
	if len(i.XmglfYsNotIn) > 0 {
		predicates = append(predicates, project.XmglfYsNotIn(i.XmglfYsNotIn...))
	}
	if i.XmglfYsGT != nil {
		predicates = append(predicates, project.XmglfYsGT(*i.XmglfYsGT))
	}
	if i.XmglfYsGTE != nil {
		predicates = append(predicates, project.XmglfYsGTE(*i.XmglfYsGTE))
	}
	if i.XmglfYsLT != nil {
		predicates = append(predicates, project.XmglfYsLT(*i.XmglfYsLT))
	}
	if i.XmglfYsLTE != nil {
		predicates = append(predicates, project.XmglfYsLTE(*i.XmglfYsLTE))
	}
	if i.XmglfYsIsNil {
		predicates = append(predicates, project.XmglfYsIsNil())
	}
	if i.XmglfYsNotNil {
		predicates = append(predicates, project.XmglfYsNotNil())
	}
	if i.XmglfLj != nil {
		predicates = append(predicates, project.XmglfLjEQ(*i.XmglfLj))
	}
	if i.XmglfLjNEQ != nil {
		predicates = append(predicates, project.XmglfLjNEQ(*i.XmglfLjNEQ))
	}
	if len(i.XmglfLjIn) > 0 {
		predicates = append(predicates, project.XmglfLjIn(i.XmglfLjIn...))
	}
	if len(i.XmglfLjNotIn) > 0 {
		predicates = append(predicates, project.XmglfLjNotIn(i.XmglfLjNotIn...))
	}
	if i.XmglfLjGT != nil {
		predicates = append(predicates, project.XmglfLjGT(*i.XmglfLjGT))
	}
	if i.XmglfLjGTE != nil {
		predicates = append(predicates, project.XmglfLjGTE(*i.XmglfLjGTE))
	}
	if i.XmglfLjLT != nil {
		predicates = append(predicates, project.XmglfLjLT(*i.XmglfLjLT))
	}
	if i.XmglfLjLTE != nil {
		predicates = append(predicates, project.XmglfLjLTE(*i.XmglfLjLTE))
	}
	if i.XmglfLjIsNil {
		predicates = append(predicates, project.XmglfLjIsNil())
	}
	if i.XmglfLjNotNil {
		predicates = append(predicates, project.XmglfLjNotNil())
	}
	if i.Xmsjf != nil {
		predicates = append(predicates, project.XmsjfEQ(*i.Xmsjf))
	}
	if i.XmsjfNEQ != nil {
		predicates = append(predicates, project.XmsjfNEQ(*i.XmsjfNEQ))
	}
	if len(i.XmsjfIn) > 0 {
		predicates = append(predicates, project.XmsjfIn(i.XmsjfIn...))
	}
	if len(i.XmsjfNotIn) > 0 {
		predicates = append(predicates, project.XmsjfNotIn(i.XmsjfNotIn...))
	}
	if i.XmsjfGT != nil {
		predicates = append(predicates, project.XmsjfGT(*i.XmsjfGT))
	}
	if i.XmsjfGTE != nil {
		predicates = append(predicates, project.XmsjfGTE(*i.XmsjfGTE))
	}
	if i.XmsjfLT != nil {
		predicates = append(predicates, project.XmsjfLT(*i.XmsjfLT))
	}
	if i.XmsjfLTE != nil {
		predicates = append(predicates, project.XmsjfLTE(*i.XmsjfLTE))
	}
	if i.XmsjfIsNil {
		predicates = append(predicates, project.XmsjfIsNil())
	}
	if i.XmsjfNotNil {
		predicates = append(predicates, project.XmsjfNotNil())
	}
	if i.Xmfzr != nil {
		predicates = append(predicates, project.XmfzrEQ(*i.Xmfzr))
	}
	if i.XmfzrNEQ != nil {
		predicates = append(predicates, project.XmfzrNEQ(*i.XmfzrNEQ))
	}
	if len(i.XmfzrIn) > 0 {
		predicates = append(predicates, project.XmfzrIn(i.XmfzrIn...))
	}
	if len(i.XmfzrNotIn) > 0 {
		predicates = append(predicates, project.XmfzrNotIn(i.XmfzrNotIn...))
	}
	if i.XmfzrGT != nil {
		predicates = append(predicates, project.XmfzrGT(*i.XmfzrGT))
	}
	if i.XmfzrGTE != nil {
		predicates = append(predicates, project.XmfzrGTE(*i.XmfzrGTE))
	}
	if i.XmfzrLT != nil {
		predicates = append(predicates, project.XmfzrLT(*i.XmfzrLT))
	}
	if i.XmfzrLTE != nil {
		predicates = append(predicates, project.XmfzrLTE(*i.XmfzrLTE))
	}
	if i.XmfzrContains != nil {
		predicates = append(predicates, project.XmfzrContains(*i.XmfzrContains))
	}
	if i.XmfzrHasPrefix != nil {
		predicates = append(predicates, project.XmfzrHasPrefix(*i.XmfzrHasPrefix))
	}
	if i.XmfzrHasSuffix != nil {
		predicates = append(predicates, project.XmfzrHasSuffix(*i.XmfzrHasSuffix))
	}
	if i.XmfzrIsNil {
		predicates = append(predicates, project.XmfzrIsNil())
	}
	if i.XmfzrNotNil {
		predicates = append(predicates, project.XmfzrNotNil())
	}
	if i.XmfzrEqualFold != nil {
		predicates = append(predicates, project.XmfzrEqualFold(*i.XmfzrEqualFold))
	}
	if i.XmfzrContainsFold != nil {
		predicates = append(predicates, project.XmfzrContainsFold(*i.XmfzrContainsFold))
	}
	if i.OwnerApplyAmount != nil {
		predicates = append(predicates, project.OwnerApplyAmountEQ(*i.OwnerApplyAmount))
	}
	if i.OwnerApplyAmountNEQ != nil {
		predicates = append(predicates, project.OwnerApplyAmountNEQ(*i.OwnerApplyAmountNEQ))
	}
	if len(i.OwnerApplyAmountIn) > 0 {
		predicates = append(predicates, project.OwnerApplyAmountIn(i.OwnerApplyAmountIn...))
	}
	if len(i.OwnerApplyAmountNotIn) > 0 {
		predicates = append(predicates, project.OwnerApplyAmountNotIn(i.OwnerApplyAmountNotIn...))
	}
	if i.OwnerApplyAmountGT != nil {
		predicates = append(predicates, project.OwnerApplyAmountGT(*i.OwnerApplyAmountGT))
	}
	if i.OwnerApplyAmountGTE != nil {
		predicates = append(predicates, project.OwnerApplyAmountGTE(*i.OwnerApplyAmountGTE))
	}
	if i.OwnerApplyAmountLT != nil {
		predicates = append(predicates, project.OwnerApplyAmountLT(*i.OwnerApplyAmountLT))
	}
	if i.OwnerApplyAmountLTE != nil {
		predicates = append(predicates, project.OwnerApplyAmountLTE(*i.OwnerApplyAmountLTE))
	}
	if i.OwnerApplyAmountIsNil {
		predicates = append(predicates, project.OwnerApplyAmountIsNil())
	}
	if i.OwnerApplyAmountNotNil {
		predicates = append(predicates, project.OwnerApplyAmountNotNil())
	}
	if i.OwnerApplyCount != nil {
		predicates = append(predicates, project.OwnerApplyCountEQ(*i.OwnerApplyCount))
	}
	if i.OwnerApplyCountNEQ != nil {
		predicates = append(predicates, project.OwnerApplyCountNEQ(*i.OwnerApplyCountNEQ))
	}
	if len(i.OwnerApplyCountIn) > 0 {
		predicates = append(predicates, project.OwnerApplyCountIn(i.OwnerApplyCountIn...))
	}
	if len(i.OwnerApplyCountNotIn) > 0 {
		predicates = append(predicates, project.OwnerApplyCountNotIn(i.OwnerApplyCountNotIn...))
	}
	if i.OwnerApplyCountGT != nil {
		predicates = append(predicates, project.OwnerApplyCountGT(*i.OwnerApplyCountGT))
	}
	if i.OwnerApplyCountGTE != nil {
		predicates = append(predicates, project.OwnerApplyCountGTE(*i.OwnerApplyCountGTE))
	}
	if i.OwnerApplyCountLT != nil {
		predicates = append(predicates, project.OwnerApplyCountLT(*i.OwnerApplyCountLT))
	}
	if i.OwnerApplyCountLTE != nil {
		predicates = append(predicates, project.OwnerApplyCountLTE(*i.OwnerApplyCountLTE))
	}
	if i.OwnerApplyCountIsNil {
		predicates = append(predicates, project.OwnerApplyCountIsNil())
	}
	if i.OwnerApplyCountNotNil {
		predicates = append(predicates, project.OwnerApplyCountNotNil())
	}
	if i.OwnerApproveAmount != nil {
		predicates = append(predicates, project.OwnerApproveAmountEQ(*i.OwnerApproveAmount))
	}
	if i.OwnerApproveAmountNEQ != nil {
		predicates = append(predicates, project.OwnerApproveAmountNEQ(*i.OwnerApproveAmountNEQ))
	}
	if len(i.OwnerApproveAmountIn) > 0 {
		predicates = append(predicates, project.OwnerApproveAmountIn(i.OwnerApproveAmountIn...))
	}
	if len(i.OwnerApproveAmountNotIn) > 0 {
		predicates = append(predicates, project.OwnerApproveAmountNotIn(i.OwnerApproveAmountNotIn...))
	}
	if i.OwnerApproveAmountGT != nil {
		predicates = append(predicates, project.OwnerApproveAmountGT(*i.OwnerApproveAmountGT))
	}
	if i.OwnerApproveAmountGTE != nil {
		predicates = append(predicates, project.OwnerApproveAmountGTE(*i.OwnerApproveAmountGTE))
	}
	if i.OwnerApproveAmountLT != nil {
		predicates = append(predicates, project.OwnerApproveAmountLT(*i.OwnerApproveAmountLT))
	}
	if i.OwnerApproveAmountLTE != nil {
		predicates = append(predicates, project.OwnerApproveAmountLTE(*i.OwnerApproveAmountLTE))
	}
	if i.OwnerApproveAmountIsNil {
		predicates = append(predicates, project.OwnerApproveAmountIsNil())
	}
	if i.OwnerApproveAmountNotNil {
		predicates = append(predicates, project.OwnerApproveAmountNotNil())
	}
	if i.OwnerApproveCount != nil {
		predicates = append(predicates, project.OwnerApproveCountEQ(*i.OwnerApproveCount))
	}
	if i.OwnerApproveCountNEQ != nil {
		predicates = append(predicates, project.OwnerApproveCountNEQ(*i.OwnerApproveCountNEQ))
	}
	if len(i.OwnerApproveCountIn) > 0 {
		predicates = append(predicates, project.OwnerApproveCountIn(i.OwnerApproveCountIn...))
	}
	if len(i.OwnerApproveCountNotIn) > 0 {
		predicates = append(predicates, project.OwnerApproveCountNotIn(i.OwnerApproveCountNotIn...))
	}
	if i.OwnerApproveCountGT != nil {
		predicates = append(predicates, project.OwnerApproveCountGT(*i.OwnerApproveCountGT))
	}
	if i.OwnerApproveCountGTE != nil {
		predicates = append(predicates, project.OwnerApproveCountGTE(*i.OwnerApproveCountGTE))
	}
	if i.OwnerApproveCountLT != nil {
		predicates = append(predicates, project.OwnerApproveCountLT(*i.OwnerApproveCountLT))
	}
	if i.OwnerApproveCountLTE != nil {
		predicates = append(predicates, project.OwnerApproveCountLTE(*i.OwnerApproveCountLTE))
	}
	if i.OwnerApproveCountIsNil {
		predicates = append(predicates, project.OwnerApproveCountIsNil())
	}
	if i.OwnerApproveCountNotNil {
		predicates = append(predicates, project.OwnerApproveCountNotNil())
	}
	if i.ContractorApplyAmount != nil {
		predicates = append(predicates, project.ContractorApplyAmountEQ(*i.ContractorApplyAmount))
	}
	if i.ContractorApplyAmountNEQ != nil {
		predicates = append(predicates, project.ContractorApplyAmountNEQ(*i.ContractorApplyAmountNEQ))
	}
	if len(i.ContractorApplyAmountIn) > 0 {
		predicates = append(predicates, project.ContractorApplyAmountIn(i.ContractorApplyAmountIn...))
	}
	if len(i.ContractorApplyAmountNotIn) > 0 {
		predicates = append(predicates, project.ContractorApplyAmountNotIn(i.ContractorApplyAmountNotIn...))
	}
	if i.ContractorApplyAmountGT != nil {
		predicates = append(predicates, project.ContractorApplyAmountGT(*i.ContractorApplyAmountGT))
	}
	if i.ContractorApplyAmountGTE != nil {
		predicates = append(predicates, project.ContractorApplyAmountGTE(*i.ContractorApplyAmountGTE))
	}
	if i.ContractorApplyAmountLT != nil {
		predicates = append(predicates, project.ContractorApplyAmountLT(*i.ContractorApplyAmountLT))
	}
	if i.ContractorApplyAmountLTE != nil {
		predicates = append(predicates, project.ContractorApplyAmountLTE(*i.ContractorApplyAmountLTE))
	}
	if i.ContractorApplyAmountIsNil {
		predicates = append(predicates, project.ContractorApplyAmountIsNil())
	}
	if i.ContractorApplyAmountNotNil {
		predicates = append(predicates, project.ContractorApplyAmountNotNil())
	}
	if i.ContractorApplyCount != nil {
		predicates = append(predicates, project.ContractorApplyCountEQ(*i.ContractorApplyCount))
	}
	if i.ContractorApplyCountNEQ != nil {
		predicates = append(predicates, project.ContractorApplyCountNEQ(*i.ContractorApplyCountNEQ))
	}
	if len(i.ContractorApplyCountIn) > 0 {
		predicates = append(predicates, project.ContractorApplyCountIn(i.ContractorApplyCountIn...))
	}
	if len(i.ContractorApplyCountNotIn) > 0 {
		predicates = append(predicates, project.ContractorApplyCountNotIn(i.ContractorApplyCountNotIn...))
	}
	if i.ContractorApplyCountGT != nil {
		predicates = append(predicates, project.ContractorApplyCountGT(*i.ContractorApplyCountGT))
	}
	if i.ContractorApplyCountGTE != nil {
		predicates = append(predicates, project.ContractorApplyCountGTE(*i.ContractorApplyCountGTE))
	}
	if i.ContractorApplyCountLT != nil {
		predicates = append(predicates, project.ContractorApplyCountLT(*i.ContractorApplyCountLT))
	}
	if i.ContractorApplyCountLTE != nil {
		predicates = append(predicates, project.ContractorApplyCountLTE(*i.ContractorApplyCountLTE))
	}
	if i.ContractorApplyCountIsNil {
		predicates = append(predicates, project.ContractorApplyCountIsNil())
	}
	if i.ContractorApplyCountNotNil {
		predicates = append(predicates, project.ContractorApplyCountNotNil())
	}
	if i.ContractorApproveAmount != nil {
		predicates = append(predicates, project.ContractorApproveAmountEQ(*i.ContractorApproveAmount))
	}
	if i.ContractorApproveAmountNEQ != nil {
		predicates = append(predicates, project.ContractorApproveAmountNEQ(*i.ContractorApproveAmountNEQ))
	}
	if len(i.ContractorApproveAmountIn) > 0 {
		predicates = append(predicates, project.ContractorApproveAmountIn(i.ContractorApproveAmountIn...))
	}
	if len(i.ContractorApproveAmountNotIn) > 0 {
		predicates = append(predicates, project.ContractorApproveAmountNotIn(i.ContractorApproveAmountNotIn...))
	}
	if i.ContractorApproveAmountGT != nil {
		predicates = append(predicates, project.ContractorApproveAmountGT(*i.ContractorApproveAmountGT))
	}
	if i.ContractorApproveAmountGTE != nil {
		predicates = append(predicates, project.ContractorApproveAmountGTE(*i.ContractorApproveAmountGTE))
	}
	if i.ContractorApproveAmountLT != nil {
		predicates = append(predicates, project.ContractorApproveAmountLT(*i.ContractorApproveAmountLT))
	}
	if i.ContractorApproveAmountLTE != nil {
		predicates = append(predicates, project.ContractorApproveAmountLTE(*i.ContractorApproveAmountLTE))
	}
	if i.ContractorApproveAmountIsNil {
		predicates = append(predicates, project.ContractorApproveAmountIsNil())
	}
	if i.ContractorApproveAmountNotNil {
		predicates = append(predicates, project.ContractorApproveAmountNotNil())
	}
	if i.ContractorApproveCount != nil {
		predicates = append(predicates, project.ContractorApproveCountEQ(*i.ContractorApproveCount))
	}
	if i.ContractorApproveCountNEQ != nil {
		predicates = append(predicates, project.ContractorApproveCountNEQ(*i.ContractorApproveCountNEQ))
	}
	if len(i.ContractorApproveCountIn) > 0 {
		predicates = append(predicates, project.ContractorApproveCountIn(i.ContractorApproveCountIn...))
	}
	if len(i.ContractorApproveCountNotIn) > 0 {
		predicates = append(predicates, project.ContractorApproveCountNotIn(i.ContractorApproveCountNotIn...))
	}
	if i.ContractorApproveCountGT != nil {
		predicates = append(predicates, project.ContractorApproveCountGT(*i.ContractorApproveCountGT))
	}
	if i.ContractorApproveCountGTE != nil {
		predicates = append(predicates, project.ContractorApproveCountGTE(*i.ContractorApproveCountGTE))
	}
	if i.ContractorApproveCountLT != nil {
		predicates = append(predicates, project.ContractorApproveCountLT(*i.ContractorApproveCountLT))
	}
	if i.ContractorApproveCountLTE != nil {
		predicates = append(predicates, project.ContractorApproveCountLTE(*i.ContractorApproveCountLTE))
	}
	if i.ContractorApproveCountIsNil {
		predicates = append(predicates, project.ContractorApproveCountIsNil())
	}
	if i.ContractorApproveCountNotNil {
		predicates = append(predicates, project.ContractorApproveCountNotNil())
	}
	if i.InstallProgress != nil {
		predicates = append(predicates, project.InstallProgressEQ(*i.InstallProgress))
	}
	if i.InstallProgressNEQ != nil {
		predicates = append(predicates, project.InstallProgressNEQ(*i.InstallProgressNEQ))
	}
	if len(i.InstallProgressIn) > 0 {
		predicates = append(predicates, project.InstallProgressIn(i.InstallProgressIn...))
	}
	if len(i.InstallProgressNotIn) > 0 {
		predicates = append(predicates, project.InstallProgressNotIn(i.InstallProgressNotIn...))
	}
	if i.InstallProgressGT != nil {
		predicates = append(predicates, project.InstallProgressGT(*i.InstallProgressGT))
	}
	if i.InstallProgressGTE != nil {
		predicates = append(predicates, project.InstallProgressGTE(*i.InstallProgressGTE))
	}
	if i.InstallProgressLT != nil {
		predicates = append(predicates, project.InstallProgressLT(*i.InstallProgressLT))
	}
	if i.InstallProgressLTE != nil {
		predicates = append(predicates, project.InstallProgressLTE(*i.InstallProgressLTE))
	}
	if i.InstallProgressIsNil {
		predicates = append(predicates, project.InstallProgressIsNil())
	}
	if i.InstallProgressNotNil {
		predicates = append(predicates, project.InstallProgressNotNil())
	}
	if i.EffectiveContractAmount != nil {
		predicates = append(predicates, project.EffectiveContractAmountEQ(*i.EffectiveContractAmount))
	}
	if i.EffectiveContractAmountNEQ != nil {
		predicates = append(predicates, project.EffectiveContractAmountNEQ(*i.EffectiveContractAmountNEQ))
	}
	if len(i.EffectiveContractAmountIn) > 0 {
		predicates = append(predicates, project.EffectiveContractAmountIn(i.EffectiveContractAmountIn...))
	}
	if len(i.EffectiveContractAmountNotIn) > 0 {
		predicates = append(predicates, project.EffectiveContractAmountNotIn(i.EffectiveContractAmountNotIn...))
	}
	if i.EffectiveContractAmountGT != nil {
		predicates = append(predicates, project.EffectiveContractAmountGT(*i.EffectiveContractAmountGT))
	}
	if i.EffectiveContractAmountGTE != nil {
		predicates = append(predicates, project.EffectiveContractAmountGTE(*i.EffectiveContractAmountGTE))
	}
	if i.EffectiveContractAmountLT != nil {
		predicates = append(predicates, project.EffectiveContractAmountLT(*i.EffectiveContractAmountLT))
	}
	if i.EffectiveContractAmountLTE != nil {
		predicates = append(predicates, project.EffectiveContractAmountLTE(*i.EffectiveContractAmountLTE))
	}
	if i.EffectiveContractAmountIsNil {
		predicates = append(predicates, project.EffectiveContractAmountIsNil())
	}
	if i.EffectiveContractAmountNotNil {
		predicates = append(predicates, project.EffectiveContractAmountNotNil())
	}
	if i.VaApplyAmount != nil {
		predicates = append(predicates, project.VaApplyAmountEQ(*i.VaApplyAmount))
	}
	if i.VaApplyAmountNEQ != nil {
		predicates = append(predicates, project.VaApplyAmountNEQ(*i.VaApplyAmountNEQ))
	}
	if len(i.VaApplyAmountIn) > 0 {
		predicates = append(predicates, project.VaApplyAmountIn(i.VaApplyAmountIn...))
	}
	if len(i.VaApplyAmountNotIn) > 0 {
		predicates = append(predicates, project.VaApplyAmountNotIn(i.VaApplyAmountNotIn...))
	}
	if i.VaApplyAmountGT != nil {
		predicates = append(predicates, project.VaApplyAmountGT(*i.VaApplyAmountGT))
	}
	if i.VaApplyAmountGTE != nil {
		predicates = append(predicates, project.VaApplyAmountGTE(*i.VaApplyAmountGTE))
	}
	if i.VaApplyAmountLT != nil {
		predicates = append(predicates, project.VaApplyAmountLT(*i.VaApplyAmountLT))
	}
	if i.VaApplyAmountLTE != nil {
		predicates = append(predicates, project.VaApplyAmountLTE(*i.VaApplyAmountLTE))
	}
	if i.VaApplyAmountIsNil {
		predicates = append(predicates, project.VaApplyAmountIsNil())
	}
	if i.VaApplyAmountNotNil {
		predicates = append(predicates, project.VaApplyAmountNotNil())
	}
	if i.VaApproveAmount != nil {
		predicates = append(predicates, project.VaApproveAmountEQ(*i.VaApproveAmount))
	}
	if i.VaApproveAmountNEQ != nil {
		predicates = append(predicates, project.VaApproveAmountNEQ(*i.VaApproveAmountNEQ))
	}
	if len(i.VaApproveAmountIn) > 0 {
		predicates = append(predicates, project.VaApproveAmountIn(i.VaApproveAmountIn...))
	}
	if len(i.VaApproveAmountNotIn) > 0 {
		predicates = append(predicates, project.VaApproveAmountNotIn(i.VaApproveAmountNotIn...))
	}
	if i.VaApproveAmountGT != nil {
		predicates = append(predicates, project.VaApproveAmountGT(*i.VaApproveAmountGT))
	}
	if i.VaApproveAmountGTE != nil {
		predicates = append(predicates, project.VaApproveAmountGTE(*i.VaApproveAmountGTE))
	}
	if i.VaApproveAmountLT != nil {
		predicates = append(predicates, project.VaApproveAmountLT(*i.VaApproveAmountLT))
	}
	if i.VaApproveAmountLTE != nil {
		predicates = append(predicates, project.VaApproveAmountLTE(*i.VaApproveAmountLTE))
	}
	if i.VaApproveAmountIsNil {
		predicates = append(predicates, project.VaApproveAmountIsNil())
	}
	if i.VaApproveAmountNotNil {
		predicates = append(predicates, project.VaApproveAmountNotNil())
	}
	if i.AccumulatedStatutoryDeductions != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsEQ(*i.AccumulatedStatutoryDeductions))
	}
	if i.AccumulatedStatutoryDeductionsNEQ != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsNEQ(*i.AccumulatedStatutoryDeductionsNEQ))
	}
	if len(i.AccumulatedStatutoryDeductionsIn) > 0 {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsIn(i.AccumulatedStatutoryDeductionsIn...))
	}
	if len(i.AccumulatedStatutoryDeductionsNotIn) > 0 {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsNotIn(i.AccumulatedStatutoryDeductionsNotIn...))
	}
	if i.AccumulatedStatutoryDeductionsGT != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsGT(*i.AccumulatedStatutoryDeductionsGT))
	}
	if i.AccumulatedStatutoryDeductionsGTE != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsGTE(*i.AccumulatedStatutoryDeductionsGTE))
	}
	if i.AccumulatedStatutoryDeductionsLT != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsLT(*i.AccumulatedStatutoryDeductionsLT))
	}
	if i.AccumulatedStatutoryDeductionsLTE != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsLTE(*i.AccumulatedStatutoryDeductionsLTE))
	}
	if i.AccumulatedStatutoryDeductionsIsNil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsIsNil())
	}
	if i.AccumulatedStatutoryDeductionsNotNil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsNotNil())
	}
	if i.AccumulatedNonStatutoryDeductions != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsEQ(*i.AccumulatedNonStatutoryDeductions))
	}
	if i.AccumulatedNonStatutoryDeductionsNEQ != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsNEQ(*i.AccumulatedNonStatutoryDeductionsNEQ))
	}
	if len(i.AccumulatedNonStatutoryDeductionsIn) > 0 {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsIn(i.AccumulatedNonStatutoryDeductionsIn...))
	}
	if len(i.AccumulatedNonStatutoryDeductionsNotIn) > 0 {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsNotIn(i.AccumulatedNonStatutoryDeductionsNotIn...))
	}
	if i.AccumulatedNonStatutoryDeductionsGT != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsGT(*i.AccumulatedNonStatutoryDeductionsGT))
	}
	if i.AccumulatedNonStatutoryDeductionsGTE != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsGTE(*i.AccumulatedNonStatutoryDeductionsGTE))
	}
	if i.AccumulatedNonStatutoryDeductionsLT != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsLT(*i.AccumulatedNonStatutoryDeductionsLT))
	}
	if i.AccumulatedNonStatutoryDeductionsLTE != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsLTE(*i.AccumulatedNonStatutoryDeductionsLTE))
	}
	if i.AccumulatedNonStatutoryDeductionsIsNil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsIsNil())
	}
	if i.AccumulatedNonStatutoryDeductionsNotNil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsNotNil())
	}
	if i.AccumulatedStatutoryDeductionsPeriod != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodEQ(*i.AccumulatedStatutoryDeductionsPeriod))
	}
	if i.AccumulatedStatutoryDeductionsPeriodNEQ != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodNEQ(*i.AccumulatedStatutoryDeductionsPeriodNEQ))
	}
	if len(i.AccumulatedStatutoryDeductionsPeriodIn) > 0 {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodIn(i.AccumulatedStatutoryDeductionsPeriodIn...))
	}
	if len(i.AccumulatedStatutoryDeductionsPeriodNotIn) > 0 {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodNotIn(i.AccumulatedStatutoryDeductionsPeriodNotIn...))
	}
	if i.AccumulatedStatutoryDeductionsPeriodGT != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodGT(*i.AccumulatedStatutoryDeductionsPeriodGT))
	}
	if i.AccumulatedStatutoryDeductionsPeriodGTE != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodGTE(*i.AccumulatedStatutoryDeductionsPeriodGTE))
	}
	if i.AccumulatedStatutoryDeductionsPeriodLT != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodLT(*i.AccumulatedStatutoryDeductionsPeriodLT))
	}
	if i.AccumulatedStatutoryDeductionsPeriodLTE != nil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodLTE(*i.AccumulatedStatutoryDeductionsPeriodLTE))
	}
	if i.AccumulatedStatutoryDeductionsPeriodIsNil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodIsNil())
	}
	if i.AccumulatedStatutoryDeductionsPeriodNotNil {
		predicates = append(predicates, project.AccumulatedStatutoryDeductionsPeriodNotNil())
	}
	if i.AccumulatedNonStatutoryDeductionsPeriod != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodEQ(*i.AccumulatedNonStatutoryDeductionsPeriod))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodNEQ != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodNEQ(*i.AccumulatedNonStatutoryDeductionsPeriodNEQ))
	}
	if len(i.AccumulatedNonStatutoryDeductionsPeriodIn) > 0 {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodIn(i.AccumulatedNonStatutoryDeductionsPeriodIn...))
	}
	if len(i.AccumulatedNonStatutoryDeductionsPeriodNotIn) > 0 {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodNotIn(i.AccumulatedNonStatutoryDeductionsPeriodNotIn...))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodGT != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodGT(*i.AccumulatedNonStatutoryDeductionsPeriodGT))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodGTE != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodGTE(*i.AccumulatedNonStatutoryDeductionsPeriodGTE))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodLT != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodLT(*i.AccumulatedNonStatutoryDeductionsPeriodLT))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodLTE != nil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodLTE(*i.AccumulatedNonStatutoryDeductionsPeriodLTE))
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodIsNil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodIsNil())
	}
	if i.AccumulatedNonStatutoryDeductionsPeriodNotNil {
		predicates = append(predicates, project.AccumulatedNonStatutoryDeductionsPeriodNotNil())
	}
	if i.TotalContractAmount != nil {
		predicates = append(predicates, project.TotalContractAmountEQ(*i.TotalContractAmount))
	}
	if i.TotalContractAmountNEQ != nil {
		predicates = append(predicates, project.TotalContractAmountNEQ(*i.TotalContractAmountNEQ))
	}
	if len(i.TotalContractAmountIn) > 0 {
		predicates = append(predicates, project.TotalContractAmountIn(i.TotalContractAmountIn...))
	}
	if len(i.TotalContractAmountNotIn) > 0 {
		predicates = append(predicates, project.TotalContractAmountNotIn(i.TotalContractAmountNotIn...))
	}
	if i.TotalContractAmountGT != nil {
		predicates = append(predicates, project.TotalContractAmountGT(*i.TotalContractAmountGT))
	}
	if i.TotalContractAmountGTE != nil {
		predicates = append(predicates, project.TotalContractAmountGTE(*i.TotalContractAmountGTE))
	}
	if i.TotalContractAmountLT != nil {
		predicates = append(predicates, project.TotalContractAmountLT(*i.TotalContractAmountLT))
	}
	if i.TotalContractAmountLTE != nil {
		predicates = append(predicates, project.TotalContractAmountLTE(*i.TotalContractAmountLTE))
	}
	if i.TotalContractAmountIsNil {
		predicates = append(predicates, project.TotalContractAmountIsNil())
	}
	if i.TotalContractAmountNotNil {
		predicates = append(predicates, project.TotalContractAmountNotNil())
	}
	if i.AluminumPlateBudgetPercentage != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageEQ(*i.AluminumPlateBudgetPercentage))
	}
	if i.AluminumPlateBudgetPercentageNEQ != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageNEQ(*i.AluminumPlateBudgetPercentageNEQ))
	}
	if len(i.AluminumPlateBudgetPercentageIn) > 0 {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageIn(i.AluminumPlateBudgetPercentageIn...))
	}
	if len(i.AluminumPlateBudgetPercentageNotIn) > 0 {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageNotIn(i.AluminumPlateBudgetPercentageNotIn...))
	}
	if i.AluminumPlateBudgetPercentageGT != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageGT(*i.AluminumPlateBudgetPercentageGT))
	}
	if i.AluminumPlateBudgetPercentageGTE != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageGTE(*i.AluminumPlateBudgetPercentageGTE))
	}
	if i.AluminumPlateBudgetPercentageLT != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageLT(*i.AluminumPlateBudgetPercentageLT))
	}
	if i.AluminumPlateBudgetPercentageLTE != nil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageLTE(*i.AluminumPlateBudgetPercentageLTE))
	}
	if i.AluminumPlateBudgetPercentageIsNil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageIsNil())
	}
	if i.AluminumPlateBudgetPercentageNotNil {
		predicates = append(predicates, project.AluminumPlateBudgetPercentageNotNil())
	}
	if i.AluminumBudgetPercentage != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageEQ(*i.AluminumBudgetPercentage))
	}
	if i.AluminumBudgetPercentageNEQ != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageNEQ(*i.AluminumBudgetPercentageNEQ))
	}
	if len(i.AluminumBudgetPercentageIn) > 0 {
		predicates = append(predicates, project.AluminumBudgetPercentageIn(i.AluminumBudgetPercentageIn...))
	}
	if len(i.AluminumBudgetPercentageNotIn) > 0 {
		predicates = append(predicates, project.AluminumBudgetPercentageNotIn(i.AluminumBudgetPercentageNotIn...))
	}
	if i.AluminumBudgetPercentageGT != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageGT(*i.AluminumBudgetPercentageGT))
	}
	if i.AluminumBudgetPercentageGTE != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageGTE(*i.AluminumBudgetPercentageGTE))
	}
	if i.AluminumBudgetPercentageLT != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageLT(*i.AluminumBudgetPercentageLT))
	}
	if i.AluminumBudgetPercentageLTE != nil {
		predicates = append(predicates, project.AluminumBudgetPercentageLTE(*i.AluminumBudgetPercentageLTE))
	}
	if i.AluminumBudgetPercentageIsNil {
		predicates = append(predicates, project.AluminumBudgetPercentageIsNil())
	}
	if i.AluminumBudgetPercentageNotNil {
		predicates = append(predicates, project.AluminumBudgetPercentageNotNil())
	}
	if i.GlassBudgetPercentage != nil {
		predicates = append(predicates, project.GlassBudgetPercentageEQ(*i.GlassBudgetPercentage))
	}
	if i.GlassBudgetPercentageNEQ != nil {
		predicates = append(predicates, project.GlassBudgetPercentageNEQ(*i.GlassBudgetPercentageNEQ))
	}
	if len(i.GlassBudgetPercentageIn) > 0 {
		predicates = append(predicates, project.GlassBudgetPercentageIn(i.GlassBudgetPercentageIn...))
	}
	if len(i.GlassBudgetPercentageNotIn) > 0 {
		predicates = append(predicates, project.GlassBudgetPercentageNotIn(i.GlassBudgetPercentageNotIn...))
	}
	if i.GlassBudgetPercentageGT != nil {
		predicates = append(predicates, project.GlassBudgetPercentageGT(*i.GlassBudgetPercentageGT))
	}
	if i.GlassBudgetPercentageGTE != nil {
		predicates = append(predicates, project.GlassBudgetPercentageGTE(*i.GlassBudgetPercentageGTE))
	}
	if i.GlassBudgetPercentageLT != nil {
		predicates = append(predicates, project.GlassBudgetPercentageLT(*i.GlassBudgetPercentageLT))
	}
	if i.GlassBudgetPercentageLTE != nil {
		predicates = append(predicates, project.GlassBudgetPercentageLTE(*i.GlassBudgetPercentageLTE))
	}
	if i.GlassBudgetPercentageIsNil {
		predicates = append(predicates, project.GlassBudgetPercentageIsNil())
	}
	if i.GlassBudgetPercentageNotNil {
		predicates = append(predicates, project.GlassBudgetPercentageNotNil())
	}
	if i.IronBudgetPercentage != nil {
		predicates = append(predicates, project.IronBudgetPercentageEQ(*i.IronBudgetPercentage))
	}
	if i.IronBudgetPercentageNEQ != nil {
		predicates = append(predicates, project.IronBudgetPercentageNEQ(*i.IronBudgetPercentageNEQ))
	}
	if len(i.IronBudgetPercentageIn) > 0 {
		predicates = append(predicates, project.IronBudgetPercentageIn(i.IronBudgetPercentageIn...))
	}
	if len(i.IronBudgetPercentageNotIn) > 0 {
		predicates = append(predicates, project.IronBudgetPercentageNotIn(i.IronBudgetPercentageNotIn...))
	}
	if i.IronBudgetPercentageGT != nil {
		predicates = append(predicates, project.IronBudgetPercentageGT(*i.IronBudgetPercentageGT))
	}
	if i.IronBudgetPercentageGTE != nil {
		predicates = append(predicates, project.IronBudgetPercentageGTE(*i.IronBudgetPercentageGTE))
	}
	if i.IronBudgetPercentageLT != nil {
		predicates = append(predicates, project.IronBudgetPercentageLT(*i.IronBudgetPercentageLT))
	}
	if i.IronBudgetPercentageLTE != nil {
		predicates = append(predicates, project.IronBudgetPercentageLTE(*i.IronBudgetPercentageLTE))
	}
	if i.IronBudgetPercentageIsNil {
		predicates = append(predicates, project.IronBudgetPercentageIsNil())
	}
	if i.IronBudgetPercentageNotNil {
		predicates = append(predicates, project.IronBudgetPercentageNotNil())
	}
	if i.MilestonePlanYear != nil {
		predicates = append(predicates, project.MilestonePlanYearEQ(*i.MilestonePlanYear))
	}
	if i.MilestonePlanYearNEQ != nil {
		predicates = append(predicates, project.MilestonePlanYearNEQ(*i.MilestonePlanYearNEQ))
	}
	if len(i.MilestonePlanYearIn) > 0 {
		predicates = append(predicates, project.MilestonePlanYearIn(i.MilestonePlanYearIn...))
	}
	if len(i.MilestonePlanYearNotIn) > 0 {
		predicates = append(predicates, project.MilestonePlanYearNotIn(i.MilestonePlanYearNotIn...))
	}
	if i.MilestonePlanYearGT != nil {
		predicates = append(predicates, project.MilestonePlanYearGT(*i.MilestonePlanYearGT))
	}
	if i.MilestonePlanYearGTE != nil {
		predicates = append(predicates, project.MilestonePlanYearGTE(*i.MilestonePlanYearGTE))
	}
	if i.MilestonePlanYearLT != nil {
		predicates = append(predicates, project.MilestonePlanYearLT(*i.MilestonePlanYearLT))
	}
	if i.MilestonePlanYearLTE != nil {
		predicates = append(predicates, project.MilestonePlanYearLTE(*i.MilestonePlanYearLTE))
	}
	if i.MilestonePlanYearIsNil {
		predicates = append(predicates, project.MilestonePlanYearIsNil())
	}
	if i.MilestonePlanYearNotNil {
		predicates = append(predicates, project.MilestonePlanYearNotNil())
	}
	if i.MilestonePlanMonth != nil {
		predicates = append(predicates, project.MilestonePlanMonthEQ(*i.MilestonePlanMonth))
	}
	if i.MilestonePlanMonthNEQ != nil {
		predicates = append(predicates, project.MilestonePlanMonthNEQ(*i.MilestonePlanMonthNEQ))
	}
	if len(i.MilestonePlanMonthIn) > 0 {
		predicates = append(predicates, project.MilestonePlanMonthIn(i.MilestonePlanMonthIn...))
	}
	if len(i.MilestonePlanMonthNotIn) > 0 {
		predicates = append(predicates, project.MilestonePlanMonthNotIn(i.MilestonePlanMonthNotIn...))
	}
	if i.MilestonePlanMonthGT != nil {
		predicates = append(predicates, project.MilestonePlanMonthGT(*i.MilestonePlanMonthGT))
	}
	if i.MilestonePlanMonthGTE != nil {
		predicates = append(predicates, project.MilestonePlanMonthGTE(*i.MilestonePlanMonthGTE))
	}
	if i.MilestonePlanMonthLT != nil {
		predicates = append(predicates, project.MilestonePlanMonthLT(*i.MilestonePlanMonthLT))
	}
	if i.MilestonePlanMonthLTE != nil {
		predicates = append(predicates, project.MilestonePlanMonthLTE(*i.MilestonePlanMonthLTE))
	}
	if i.MilestonePlanMonthIsNil {
		predicates = append(predicates, project.MilestonePlanMonthIsNil())
	}
	if i.MilestonePlanMonthNotNil {
		predicates = append(predicates, project.MilestonePlanMonthNotNil())
	}
	if i.MilestoneDoneYear != nil {
		predicates = append(predicates, project.MilestoneDoneYearEQ(*i.MilestoneDoneYear))
	}
	if i.MilestoneDoneYearNEQ != nil {
		predicates = append(predicates, project.MilestoneDoneYearNEQ(*i.MilestoneDoneYearNEQ))
	}
	if len(i.MilestoneDoneYearIn) > 0 {
		predicates = append(predicates, project.MilestoneDoneYearIn(i.MilestoneDoneYearIn...))
	}
	if len(i.MilestoneDoneYearNotIn) > 0 {
		predicates = append(predicates, project.MilestoneDoneYearNotIn(i.MilestoneDoneYearNotIn...))
	}
	if i.MilestoneDoneYearGT != nil {
		predicates = append(predicates, project.MilestoneDoneYearGT(*i.MilestoneDoneYearGT))
	}
	if i.MilestoneDoneYearGTE != nil {
		predicates = append(predicates, project.MilestoneDoneYearGTE(*i.MilestoneDoneYearGTE))
	}
	if i.MilestoneDoneYearLT != nil {
		predicates = append(predicates, project.MilestoneDoneYearLT(*i.MilestoneDoneYearLT))
	}
	if i.MilestoneDoneYearLTE != nil {
		predicates = append(predicates, project.MilestoneDoneYearLTE(*i.MilestoneDoneYearLTE))
	}
	if i.MilestoneDoneYearIsNil {
		predicates = append(predicates, project.MilestoneDoneYearIsNil())
	}
	if i.MilestoneDoneYearNotNil {
		predicates = append(predicates, project.MilestoneDoneYearNotNil())
	}
	if i.MilestoneDoneMonth != nil {
		predicates = append(predicates, project.MilestoneDoneMonthEQ(*i.MilestoneDoneMonth))
	}
	if i.MilestoneDoneMonthNEQ != nil {
		predicates = append(predicates, project.MilestoneDoneMonthNEQ(*i.MilestoneDoneMonthNEQ))
	}
	if len(i.MilestoneDoneMonthIn) > 0 {
		predicates = append(predicates, project.MilestoneDoneMonthIn(i.MilestoneDoneMonthIn...))
	}
	if len(i.MilestoneDoneMonthNotIn) > 0 {
		predicates = append(predicates, project.MilestoneDoneMonthNotIn(i.MilestoneDoneMonthNotIn...))
	}
	if i.MilestoneDoneMonthGT != nil {
		predicates = append(predicates, project.MilestoneDoneMonthGT(*i.MilestoneDoneMonthGT))
	}
	if i.MilestoneDoneMonthGTE != nil {
		predicates = append(predicates, project.MilestoneDoneMonthGTE(*i.MilestoneDoneMonthGTE))
	}
	if i.MilestoneDoneMonthLT != nil {
		predicates = append(predicates, project.MilestoneDoneMonthLT(*i.MilestoneDoneMonthLT))
	}
	if i.MilestoneDoneMonthLTE != nil {
		predicates = append(predicates, project.MilestoneDoneMonthLTE(*i.MilestoneDoneMonthLTE))
	}
	if i.MilestoneDoneMonthIsNil {
		predicates = append(predicates, project.MilestoneDoneMonthIsNil())
	}
	if i.MilestoneDoneMonthNotNil {
		predicates = append(predicates, project.MilestoneDoneMonthNotNil())
	}
	if i.PmArea != nil {
		predicates = append(predicates, project.PmAreaEQ(*i.PmArea))
	}
	if i.PmAreaNEQ != nil {
		predicates = append(predicates, project.PmAreaNEQ(*i.PmAreaNEQ))
	}
	if len(i.PmAreaIn) > 0 {
		predicates = append(predicates, project.PmAreaIn(i.PmAreaIn...))
	}
	if len(i.PmAreaNotIn) > 0 {
		predicates = append(predicates, project.PmAreaNotIn(i.PmAreaNotIn...))
	}
	if i.PmAreaGT != nil {
		predicates = append(predicates, project.PmAreaGT(*i.PmAreaGT))
	}
	if i.PmAreaGTE != nil {
		predicates = append(predicates, project.PmAreaGTE(*i.PmAreaGTE))
	}
	if i.PmAreaLT != nil {
		predicates = append(predicates, project.PmAreaLT(*i.PmAreaLT))
	}
	if i.PmAreaLTE != nil {
		predicates = append(predicates, project.PmAreaLTE(*i.PmAreaLTE))
	}
	if i.PmAreaIsNil {
		predicates = append(predicates, project.PmAreaIsNil())
	}
	if i.PmAreaNotNil {
		predicates = append(predicates, project.PmAreaNotNil())
	}
	if i.PmYearTarget != nil {
		predicates = append(predicates, project.PmYearTargetEQ(*i.PmYearTarget))
	}
	if i.PmYearTargetNEQ != nil {
		predicates = append(predicates, project.PmYearTargetNEQ(*i.PmYearTargetNEQ))
	}
	if len(i.PmYearTargetIn) > 0 {
		predicates = append(predicates, project.PmYearTargetIn(i.PmYearTargetIn...))
	}
	if len(i.PmYearTargetNotIn) > 0 {
		predicates = append(predicates, project.PmYearTargetNotIn(i.PmYearTargetNotIn...))
	}
	if i.PmYearTargetGT != nil {
		predicates = append(predicates, project.PmYearTargetGT(*i.PmYearTargetGT))
	}
	if i.PmYearTargetGTE != nil {
		predicates = append(predicates, project.PmYearTargetGTE(*i.PmYearTargetGTE))
	}
	if i.PmYearTargetLT != nil {
		predicates = append(predicates, project.PmYearTargetLT(*i.PmYearTargetLT))
	}
	if i.PmYearTargetLTE != nil {
		predicates = append(predicates, project.PmYearTargetLTE(*i.PmYearTargetLTE))
	}
	if i.PmYearTargetIsNil {
		predicates = append(predicates, project.PmYearTargetIsNil())
	}
	if i.PmYearTargetNotNil {
		predicates = append(predicates, project.PmYearTargetNotNil())
	}
	if i.PmMonthTarget != nil {
		predicates = append(predicates, project.PmMonthTargetEQ(*i.PmMonthTarget))
	}
	if i.PmMonthTargetNEQ != nil {
		predicates = append(predicates, project.PmMonthTargetNEQ(*i.PmMonthTargetNEQ))
	}
	if len(i.PmMonthTargetIn) > 0 {
		predicates = append(predicates, project.PmMonthTargetIn(i.PmMonthTargetIn...))
	}
	if len(i.PmMonthTargetNotIn) > 0 {
		predicates = append(predicates, project.PmMonthTargetNotIn(i.PmMonthTargetNotIn...))
	}
	if i.PmMonthTargetGT != nil {
		predicates = append(predicates, project.PmMonthTargetGT(*i.PmMonthTargetGT))
	}
	if i.PmMonthTargetGTE != nil {
		predicates = append(predicates, project.PmMonthTargetGTE(*i.PmMonthTargetGTE))
	}
	if i.PmMonthTargetLT != nil {
		predicates = append(predicates, project.PmMonthTargetLT(*i.PmMonthTargetLT))
	}
	if i.PmMonthTargetLTE != nil {
		predicates = append(predicates, project.PmMonthTargetLTE(*i.PmMonthTargetLTE))
	}
	if i.PmMonthTargetIsNil {
		predicates = append(predicates, project.PmMonthTargetIsNil())
	}
	if i.PmMonthTargetNotNil {
		predicates = append(predicates, project.PmMonthTargetNotNil())
	}
	if i.PmYearActual != nil {
		predicates = append(predicates, project.PmYearActualEQ(*i.PmYearActual))
	}
	if i.PmYearActualNEQ != nil {
		predicates = append(predicates, project.PmYearActualNEQ(*i.PmYearActualNEQ))
	}
	if len(i.PmYearActualIn) > 0 {
		predicates = append(predicates, project.PmYearActualIn(i.PmYearActualIn...))
	}
	if len(i.PmYearActualNotIn) > 0 {
		predicates = append(predicates, project.PmYearActualNotIn(i.PmYearActualNotIn...))
	}
	if i.PmYearActualGT != nil {
		predicates = append(predicates, project.PmYearActualGT(*i.PmYearActualGT))
	}
	if i.PmYearActualGTE != nil {
		predicates = append(predicates, project.PmYearActualGTE(*i.PmYearActualGTE))
	}
	if i.PmYearActualLT != nil {
		predicates = append(predicates, project.PmYearActualLT(*i.PmYearActualLT))
	}
	if i.PmYearActualLTE != nil {
		predicates = append(predicates, project.PmYearActualLTE(*i.PmYearActualLTE))
	}
	if i.PmYearActualIsNil {
		predicates = append(predicates, project.PmYearActualIsNil())
	}
	if i.PmYearActualNotNil {
		predicates = append(predicates, project.PmYearActualNotNil())
	}
	if i.PmMonthActual != nil {
		predicates = append(predicates, project.PmMonthActualEQ(*i.PmMonthActual))
	}
	if i.PmMonthActualNEQ != nil {
		predicates = append(predicates, project.PmMonthActualNEQ(*i.PmMonthActualNEQ))
	}
	if len(i.PmMonthActualIn) > 0 {
		predicates = append(predicates, project.PmMonthActualIn(i.PmMonthActualIn...))
	}
	if len(i.PmMonthActualNotIn) > 0 {
		predicates = append(predicates, project.PmMonthActualNotIn(i.PmMonthActualNotIn...))
	}
	if i.PmMonthActualGT != nil {
		predicates = append(predicates, project.PmMonthActualGT(*i.PmMonthActualGT))
	}
	if i.PmMonthActualGTE != nil {
		predicates = append(predicates, project.PmMonthActualGTE(*i.PmMonthActualGTE))
	}
	if i.PmMonthActualLT != nil {
		predicates = append(predicates, project.PmMonthActualLT(*i.PmMonthActualLT))
	}
	if i.PmMonthActualLTE != nil {
		predicates = append(predicates, project.PmMonthActualLTE(*i.PmMonthActualLTE))
	}
	if i.PmMonthActualIsNil {
		predicates = append(predicates, project.PmMonthActualIsNil())
	}
	if i.PmMonthActualNotNil {
		predicates = append(predicates, project.PmMonthActualNotNil())
	}
	if i.PmTotal != nil {
		predicates = append(predicates, project.PmTotalEQ(*i.PmTotal))
	}
	if i.PmTotalNEQ != nil {
		predicates = append(predicates, project.PmTotalNEQ(*i.PmTotalNEQ))
	}
	if len(i.PmTotalIn) > 0 {
		predicates = append(predicates, project.PmTotalIn(i.PmTotalIn...))
	}
	if len(i.PmTotalNotIn) > 0 {
		predicates = append(predicates, project.PmTotalNotIn(i.PmTotalNotIn...))
	}
	if i.PmTotalGT != nil {
		predicates = append(predicates, project.PmTotalGT(*i.PmTotalGT))
	}
	if i.PmTotalGTE != nil {
		predicates = append(predicates, project.PmTotalGTE(*i.PmTotalGTE))
	}
	if i.PmTotalLT != nil {
		predicates = append(predicates, project.PmTotalLT(*i.PmTotalLT))
	}
	if i.PmTotalLTE != nil {
		predicates = append(predicates, project.PmTotalLTE(*i.PmTotalLTE))
	}
	if i.PmTotalIsNil {
		predicates = append(predicates, project.PmTotalIsNil())
	}
	if i.PmTotalNotNil {
		predicates = append(predicates, project.PmTotalNotNil())
	}
	if i.PmYesterday != nil {
		predicates = append(predicates, project.PmYesterdayEQ(*i.PmYesterday))
	}
	if i.PmYesterdayNEQ != nil {
		predicates = append(predicates, project.PmYesterdayNEQ(*i.PmYesterdayNEQ))
	}
	if len(i.PmYesterdayIn) > 0 {
		predicates = append(predicates, project.PmYesterdayIn(i.PmYesterdayIn...))
	}
	if len(i.PmYesterdayNotIn) > 0 {
		predicates = append(predicates, project.PmYesterdayNotIn(i.PmYesterdayNotIn...))
	}
	if i.PmYesterdayGT != nil {
		predicates = append(predicates, project.PmYesterdayGT(*i.PmYesterdayGT))
	}
	if i.PmYesterdayGTE != nil {
		predicates = append(predicates, project.PmYesterdayGTE(*i.PmYesterdayGTE))
	}
	if i.PmYesterdayLT != nil {
		predicates = append(predicates, project.PmYesterdayLT(*i.PmYesterdayLT))
	}
	if i.PmYesterdayLTE != nil {
		predicates = append(predicates, project.PmYesterdayLTE(*i.PmYesterdayLTE))
	}
	if i.PmYesterdayIsNil {
		predicates = append(predicates, project.PmYesterdayIsNil())
	}
	if i.PmYesterdayNotNil {
		predicates = append(predicates, project.PmYesterdayNotNil())
	}
	if i.UnitInventoryTotal != nil {
		predicates = append(predicates, project.UnitInventoryTotalEQ(*i.UnitInventoryTotal))
	}
	if i.UnitInventoryTotalNEQ != nil {
		predicates = append(predicates, project.UnitInventoryTotalNEQ(*i.UnitInventoryTotalNEQ))
	}
	if len(i.UnitInventoryTotalIn) > 0 {
		predicates = append(predicates, project.UnitInventoryTotalIn(i.UnitInventoryTotalIn...))
	}
	if len(i.UnitInventoryTotalNotIn) > 0 {
		predicates = append(predicates, project.UnitInventoryTotalNotIn(i.UnitInventoryTotalNotIn...))
	}
	if i.UnitInventoryTotalGT != nil {
		predicates = append(predicates, project.UnitInventoryTotalGT(*i.UnitInventoryTotalGT))
	}
	if i.UnitInventoryTotalGTE != nil {
		predicates = append(predicates, project.UnitInventoryTotalGTE(*i.UnitInventoryTotalGTE))
	}
	if i.UnitInventoryTotalLT != nil {
		predicates = append(predicates, project.UnitInventoryTotalLT(*i.UnitInventoryTotalLT))
	}
	if i.UnitInventoryTotalLTE != nil {
		predicates = append(predicates, project.UnitInventoryTotalLTE(*i.UnitInventoryTotalLTE))
	}
	if i.UnitInventoryTotalIsNil {
		predicates = append(predicates, project.UnitInventoryTotalIsNil())
	}
	if i.UnitInventoryTotalNotNil {
		predicates = append(predicates, project.UnitInventoryTotalNotNil())
	}
	if i.UnitComponentTotal != nil {
		predicates = append(predicates, project.UnitComponentTotalEQ(*i.UnitComponentTotal))
	}
	if i.UnitComponentTotalNEQ != nil {
		predicates = append(predicates, project.UnitComponentTotalNEQ(*i.UnitComponentTotalNEQ))
	}
	if len(i.UnitComponentTotalIn) > 0 {
		predicates = append(predicates, project.UnitComponentTotalIn(i.UnitComponentTotalIn...))
	}
	if len(i.UnitComponentTotalNotIn) > 0 {
		predicates = append(predicates, project.UnitComponentTotalNotIn(i.UnitComponentTotalNotIn...))
	}
	if i.UnitComponentTotalGT != nil {
		predicates = append(predicates, project.UnitComponentTotalGT(*i.UnitComponentTotalGT))
	}
	if i.UnitComponentTotalGTE != nil {
		predicates = append(predicates, project.UnitComponentTotalGTE(*i.UnitComponentTotalGTE))
	}
	if i.UnitComponentTotalLT != nil {
		predicates = append(predicates, project.UnitComponentTotalLT(*i.UnitComponentTotalLT))
	}
	if i.UnitComponentTotalLTE != nil {
		predicates = append(predicates, project.UnitComponentTotalLTE(*i.UnitComponentTotalLTE))
	}
	if i.UnitComponentTotalIsNil {
		predicates = append(predicates, project.UnitComponentTotalIsNil())
	}
	if i.UnitComponentTotalNotNil {
		predicates = append(predicates, project.UnitComponentTotalNotNil())
	}
	if i.UnitComponentProduction != nil {
		predicates = append(predicates, project.UnitComponentProductionEQ(*i.UnitComponentProduction))
	}
	if i.UnitComponentProductionNEQ != nil {
		predicates = append(predicates, project.UnitComponentProductionNEQ(*i.UnitComponentProductionNEQ))
	}
	if len(i.UnitComponentProductionIn) > 0 {
		predicates = append(predicates, project.UnitComponentProductionIn(i.UnitComponentProductionIn...))
	}
	if len(i.UnitComponentProductionNotIn) > 0 {
		predicates = append(predicates, project.UnitComponentProductionNotIn(i.UnitComponentProductionNotIn...))
	}
	if i.UnitComponentProductionGT != nil {
		predicates = append(predicates, project.UnitComponentProductionGT(*i.UnitComponentProductionGT))
	}
	if i.UnitComponentProductionGTE != nil {
		predicates = append(predicates, project.UnitComponentProductionGTE(*i.UnitComponentProductionGTE))
	}
	if i.UnitComponentProductionLT != nil {
		predicates = append(predicates, project.UnitComponentProductionLT(*i.UnitComponentProductionLT))
	}
	if i.UnitComponentProductionLTE != nil {
		predicates = append(predicates, project.UnitComponentProductionLTE(*i.UnitComponentProductionLTE))
	}
	if i.UnitComponentProductionIsNil {
		predicates = append(predicates, project.UnitComponentProductionIsNil())
	}
	if i.UnitComponentProductionNotNil {
		predicates = append(predicates, project.UnitComponentProductionNotNil())
	}
	if i.UnitComponentInstallation != nil {
		predicates = append(predicates, project.UnitComponentInstallationEQ(*i.UnitComponentInstallation))
	}
	if i.UnitComponentInstallationNEQ != nil {
		predicates = append(predicates, project.UnitComponentInstallationNEQ(*i.UnitComponentInstallationNEQ))
	}
	if len(i.UnitComponentInstallationIn) > 0 {
		predicates = append(predicates, project.UnitComponentInstallationIn(i.UnitComponentInstallationIn...))
	}
	if len(i.UnitComponentInstallationNotIn) > 0 {
		predicates = append(predicates, project.UnitComponentInstallationNotIn(i.UnitComponentInstallationNotIn...))
	}
	if i.UnitComponentInstallationGT != nil {
		predicates = append(predicates, project.UnitComponentInstallationGT(*i.UnitComponentInstallationGT))
	}
	if i.UnitComponentInstallationGTE != nil {
		predicates = append(predicates, project.UnitComponentInstallationGTE(*i.UnitComponentInstallationGTE))
	}
	if i.UnitComponentInstallationLT != nil {
		predicates = append(predicates, project.UnitComponentInstallationLT(*i.UnitComponentInstallationLT))
	}
	if i.UnitComponentInstallationLTE != nil {
		predicates = append(predicates, project.UnitComponentInstallationLTE(*i.UnitComponentInstallationLTE))
	}
	if i.UnitComponentInstallationIsNil {
		predicates = append(predicates, project.UnitComponentInstallationIsNil())
	}
	if i.UnitComponentInstallationNotNil {
		predicates = append(predicates, project.UnitComponentInstallationNotNil())
	}
	if i.MaterialLoss != nil {
		predicates = append(predicates, project.MaterialLossEQ(*i.MaterialLoss))
	}
	if i.MaterialLossNEQ != nil {
		predicates = append(predicates, project.MaterialLossNEQ(*i.MaterialLossNEQ))
	}
	if len(i.MaterialLossIn) > 0 {
		predicates = append(predicates, project.MaterialLossIn(i.MaterialLossIn...))
	}
	if len(i.MaterialLossNotIn) > 0 {
		predicates = append(predicates, project.MaterialLossNotIn(i.MaterialLossNotIn...))
	}
	if i.MaterialLossGT != nil {
		predicates = append(predicates, project.MaterialLossGT(*i.MaterialLossGT))
	}
	if i.MaterialLossGTE != nil {
		predicates = append(predicates, project.MaterialLossGTE(*i.MaterialLossGTE))
	}
	if i.MaterialLossLT != nil {
		predicates = append(predicates, project.MaterialLossLT(*i.MaterialLossLT))
	}
	if i.MaterialLossLTE != nil {
		predicates = append(predicates, project.MaterialLossLTE(*i.MaterialLossLTE))
	}
	if i.MaterialLossIsNil {
		predicates = append(predicates, project.MaterialLossIsNil())
	}
	if i.MaterialLossNotNil {
		predicates = append(predicates, project.MaterialLossNotNil())
	}
	if i.DesignRatedWeight != nil {
		predicates = append(predicates, project.DesignRatedWeightEQ(*i.DesignRatedWeight))
	}
	if i.DesignRatedWeightNEQ != nil {
		predicates = append(predicates, project.DesignRatedWeightNEQ(*i.DesignRatedWeightNEQ))
	}
	if len(i.DesignRatedWeightIn) > 0 {
		predicates = append(predicates, project.DesignRatedWeightIn(i.DesignRatedWeightIn...))
	}
	if len(i.DesignRatedWeightNotIn) > 0 {
		predicates = append(predicates, project.DesignRatedWeightNotIn(i.DesignRatedWeightNotIn...))
	}
	if i.DesignRatedWeightGT != nil {
		predicates = append(predicates, project.DesignRatedWeightGT(*i.DesignRatedWeightGT))
	}
	if i.DesignRatedWeightGTE != nil {
		predicates = append(predicates, project.DesignRatedWeightGTE(*i.DesignRatedWeightGTE))
	}
	if i.DesignRatedWeightLT != nil {
		predicates = append(predicates, project.DesignRatedWeightLT(*i.DesignRatedWeightLT))
	}
	if i.DesignRatedWeightLTE != nil {
		predicates = append(predicates, project.DesignRatedWeightLTE(*i.DesignRatedWeightLTE))
	}
	if i.DesignRatedWeightIsNil {
		predicates = append(predicates, project.DesignRatedWeightIsNil())
	}
	if i.DesignRatedWeightNotNil {
		predicates = append(predicates, project.DesignRatedWeightNotNil())
	}
	if i.ProcessingWeight != nil {
		predicates = append(predicates, project.ProcessingWeightEQ(*i.ProcessingWeight))
	}
	if i.ProcessingWeightNEQ != nil {
		predicates = append(predicates, project.ProcessingWeightNEQ(*i.ProcessingWeightNEQ))
	}
	if len(i.ProcessingWeightIn) > 0 {
		predicates = append(predicates, project.ProcessingWeightIn(i.ProcessingWeightIn...))
	}
	if len(i.ProcessingWeightNotIn) > 0 {
		predicates = append(predicates, project.ProcessingWeightNotIn(i.ProcessingWeightNotIn...))
	}
	if i.ProcessingWeightGT != nil {
		predicates = append(predicates, project.ProcessingWeightGT(*i.ProcessingWeightGT))
	}
	if i.ProcessingWeightGTE != nil {
		predicates = append(predicates, project.ProcessingWeightGTE(*i.ProcessingWeightGTE))
	}
	if i.ProcessingWeightLT != nil {
		predicates = append(predicates, project.ProcessingWeightLT(*i.ProcessingWeightLT))
	}
	if i.ProcessingWeightLTE != nil {
		predicates = append(predicates, project.ProcessingWeightLTE(*i.ProcessingWeightLTE))
	}
	if i.ProcessingWeightIsNil {
		predicates = append(predicates, project.ProcessingWeightIsNil())
	}
	if i.ProcessingWeightNotNil {
		predicates = append(predicates, project.ProcessingWeightNotNil())
	}
	if i.ItemStockWeight != nil {
		predicates = append(predicates, project.ItemStockWeightEQ(*i.ItemStockWeight))
	}
	if i.ItemStockWeightNEQ != nil {
		predicates = append(predicates, project.ItemStockWeightNEQ(*i.ItemStockWeightNEQ))
	}
	if len(i.ItemStockWeightIn) > 0 {
		predicates = append(predicates, project.ItemStockWeightIn(i.ItemStockWeightIn...))
	}
	if len(i.ItemStockWeightNotIn) > 0 {
		predicates = append(predicates, project.ItemStockWeightNotIn(i.ItemStockWeightNotIn...))
	}
	if i.ItemStockWeightGT != nil {
		predicates = append(predicates, project.ItemStockWeightGT(*i.ItemStockWeightGT))
	}
	if i.ItemStockWeightGTE != nil {
		predicates = append(predicates, project.ItemStockWeightGTE(*i.ItemStockWeightGTE))
	}
	if i.ItemStockWeightLT != nil {
		predicates = append(predicates, project.ItemStockWeightLT(*i.ItemStockWeightLT))
	}
	if i.ItemStockWeightLTE != nil {
		predicates = append(predicates, project.ItemStockWeightLTE(*i.ItemStockWeightLTE))
	}
	if i.ItemStockWeightIsNil {
		predicates = append(predicates, project.ItemStockWeightIsNil())
	}
	if i.ItemStockWeightNotNil {
		predicates = append(predicates, project.ItemStockWeightNotNil())
	}
	if i.PalletsInStock != nil {
		predicates = append(predicates, project.PalletsInStockEQ(*i.PalletsInStock))
	}
	if i.PalletsInStockNEQ != nil {
		predicates = append(predicates, project.PalletsInStockNEQ(*i.PalletsInStockNEQ))
	}
	if len(i.PalletsInStockIn) > 0 {
		predicates = append(predicates, project.PalletsInStockIn(i.PalletsInStockIn...))
	}
	if len(i.PalletsInStockNotIn) > 0 {
		predicates = append(predicates, project.PalletsInStockNotIn(i.PalletsInStockNotIn...))
	}
	if i.PalletsInStockGT != nil {
		predicates = append(predicates, project.PalletsInStockGT(*i.PalletsInStockGT))
	}
	if i.PalletsInStockGTE != nil {
		predicates = append(predicates, project.PalletsInStockGTE(*i.PalletsInStockGTE))
	}
	if i.PalletsInStockLT != nil {
		predicates = append(predicates, project.PalletsInStockLT(*i.PalletsInStockLT))
	}
	if i.PalletsInStockLTE != nil {
		predicates = append(predicates, project.PalletsInStockLTE(*i.PalletsInStockLTE))
	}
	if i.PalletsInStockIsNil {
		predicates = append(predicates, project.PalletsInStockIsNil())
	}
	if i.PalletsInStockNotNil {
		predicates = append(predicates, project.PalletsInStockNotNil())
	}
	if i.PartsInStock != nil {
		predicates = append(predicates, project.PartsInStockEQ(*i.PartsInStock))
	}
	if i.PartsInStockNEQ != nil {
		predicates = append(predicates, project.PartsInStockNEQ(*i.PartsInStockNEQ))
	}
	if len(i.PartsInStockIn) > 0 {
		predicates = append(predicates, project.PartsInStockIn(i.PartsInStockIn...))
	}
	if len(i.PartsInStockNotIn) > 0 {
		predicates = append(predicates, project.PartsInStockNotIn(i.PartsInStockNotIn...))
	}
	if i.PartsInStockGT != nil {
		predicates = append(predicates, project.PartsInStockGT(*i.PartsInStockGT))
	}
	if i.PartsInStockGTE != nil {
		predicates = append(predicates, project.PartsInStockGTE(*i.PartsInStockGTE))
	}
	if i.PartsInStockLT != nil {
		predicates = append(predicates, project.PartsInStockLT(*i.PartsInStockLT))
	}
	if i.PartsInStockLTE != nil {
		predicates = append(predicates, project.PartsInStockLTE(*i.PartsInStockLTE))
	}
	if i.PartsInStockIsNil {
		predicates = append(predicates, project.PartsInStockIsNil())
	}
	if i.PartsInStockNotNil {
		predicates = append(predicates, project.PartsInStockNotNil())
	}
	if i.QualityScore != nil {
		predicates = append(predicates, project.QualityScoreEQ(*i.QualityScore))
	}
	if i.QualityScoreNEQ != nil {
		predicates = append(predicates, project.QualityScoreNEQ(*i.QualityScoreNEQ))
	}
	if len(i.QualityScoreIn) > 0 {
		predicates = append(predicates, project.QualityScoreIn(i.QualityScoreIn...))
	}
	if len(i.QualityScoreNotIn) > 0 {
		predicates = append(predicates, project.QualityScoreNotIn(i.QualityScoreNotIn...))
	}
	if i.QualityScoreGT != nil {
		predicates = append(predicates, project.QualityScoreGT(*i.QualityScoreGT))
	}
	if i.QualityScoreGTE != nil {
		predicates = append(predicates, project.QualityScoreGTE(*i.QualityScoreGTE))
	}
	if i.QualityScoreLT != nil {
		predicates = append(predicates, project.QualityScoreLT(*i.QualityScoreLT))
	}
	if i.QualityScoreLTE != nil {
		predicates = append(predicates, project.QualityScoreLTE(*i.QualityScoreLTE))
	}
	if i.QualityScoreIsNil {
		predicates = append(predicates, project.QualityScoreIsNil())
	}
	if i.QualityScoreNotNil {
		predicates = append(predicates, project.QualityScoreNotNil())
	}
	if i.QualityRanking != nil {
		predicates = append(predicates, project.QualityRankingEQ(*i.QualityRanking))
	}
	if i.QualityRankingNEQ != nil {
		predicates = append(predicates, project.QualityRankingNEQ(*i.QualityRankingNEQ))
	}
	if len(i.QualityRankingIn) > 0 {
		predicates = append(predicates, project.QualityRankingIn(i.QualityRankingIn...))
	}
	if len(i.QualityRankingNotIn) > 0 {
		predicates = append(predicates, project.QualityRankingNotIn(i.QualityRankingNotIn...))
	}
	if i.QualityRankingGT != nil {
		predicates = append(predicates, project.QualityRankingGT(*i.QualityRankingGT))
	}
	if i.QualityRankingGTE != nil {
		predicates = append(predicates, project.QualityRankingGTE(*i.QualityRankingGTE))
	}
	if i.QualityRankingLT != nil {
		predicates = append(predicates, project.QualityRankingLT(*i.QualityRankingLT))
	}
	if i.QualityRankingLTE != nil {
		predicates = append(predicates, project.QualityRankingLTE(*i.QualityRankingLTE))
	}
	if i.QualityRankingIsNil {
		predicates = append(predicates, project.QualityRankingIsNil())
	}
	if i.QualityRankingNotNil {
		predicates = append(predicates, project.QualityRankingNotNil())
	}
	if i.BulkMaterialsTotalOrderQuantity != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityEQ(*i.BulkMaterialsTotalOrderQuantity))
	}
	if i.BulkMaterialsTotalOrderQuantityNEQ != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityNEQ(*i.BulkMaterialsTotalOrderQuantityNEQ))
	}
	if len(i.BulkMaterialsTotalOrderQuantityIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityIn(i.BulkMaterialsTotalOrderQuantityIn...))
	}
	if len(i.BulkMaterialsTotalOrderQuantityNotIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityNotIn(i.BulkMaterialsTotalOrderQuantityNotIn...))
	}
	if i.BulkMaterialsTotalOrderQuantityGT != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityGT(*i.BulkMaterialsTotalOrderQuantityGT))
	}
	if i.BulkMaterialsTotalOrderQuantityGTE != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityGTE(*i.BulkMaterialsTotalOrderQuantityGTE))
	}
	if i.BulkMaterialsTotalOrderQuantityLT != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityLT(*i.BulkMaterialsTotalOrderQuantityLT))
	}
	if i.BulkMaterialsTotalOrderQuantityLTE != nil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityLTE(*i.BulkMaterialsTotalOrderQuantityLTE))
	}
	if i.BulkMaterialsTotalOrderQuantityIsNil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityIsNil())
	}
	if i.BulkMaterialsTotalOrderQuantityNotNil {
		predicates = append(predicates, project.BulkMaterialsTotalOrderQuantityNotNil())
	}
	if i.BulkMaterialsCompletedQuantity != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityEQ(*i.BulkMaterialsCompletedQuantity))
	}
	if i.BulkMaterialsCompletedQuantityNEQ != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityNEQ(*i.BulkMaterialsCompletedQuantityNEQ))
	}
	if len(i.BulkMaterialsCompletedQuantityIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityIn(i.BulkMaterialsCompletedQuantityIn...))
	}
	if len(i.BulkMaterialsCompletedQuantityNotIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityNotIn(i.BulkMaterialsCompletedQuantityNotIn...))
	}
	if i.BulkMaterialsCompletedQuantityGT != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityGT(*i.BulkMaterialsCompletedQuantityGT))
	}
	if i.BulkMaterialsCompletedQuantityGTE != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityGTE(*i.BulkMaterialsCompletedQuantityGTE))
	}
	if i.BulkMaterialsCompletedQuantityLT != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityLT(*i.BulkMaterialsCompletedQuantityLT))
	}
	if i.BulkMaterialsCompletedQuantityLTE != nil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityLTE(*i.BulkMaterialsCompletedQuantityLTE))
	}
	if i.BulkMaterialsCompletedQuantityIsNil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityIsNil())
	}
	if i.BulkMaterialsCompletedQuantityNotNil {
		predicates = append(predicates, project.BulkMaterialsCompletedQuantityNotNil())
	}
	if i.BulkMaterialsUncompletedQuantity != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityEQ(*i.BulkMaterialsUncompletedQuantity))
	}
	if i.BulkMaterialsUncompletedQuantityNEQ != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityNEQ(*i.BulkMaterialsUncompletedQuantityNEQ))
	}
	if len(i.BulkMaterialsUncompletedQuantityIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityIn(i.BulkMaterialsUncompletedQuantityIn...))
	}
	if len(i.BulkMaterialsUncompletedQuantityNotIn) > 0 {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityNotIn(i.BulkMaterialsUncompletedQuantityNotIn...))
	}
	if i.BulkMaterialsUncompletedQuantityGT != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityGT(*i.BulkMaterialsUncompletedQuantityGT))
	}
	if i.BulkMaterialsUncompletedQuantityGTE != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityGTE(*i.BulkMaterialsUncompletedQuantityGTE))
	}
	if i.BulkMaterialsUncompletedQuantityLT != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityLT(*i.BulkMaterialsUncompletedQuantityLT))
	}
	if i.BulkMaterialsUncompletedQuantityLTE != nil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityLTE(*i.BulkMaterialsUncompletedQuantityLTE))
	}
	if i.BulkMaterialsUncompletedQuantityIsNil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityIsNil())
	}
	if i.BulkMaterialsUncompletedQuantityNotNil {
		predicates = append(predicates, project.BulkMaterialsUncompletedQuantityNotNil())
	}
	if i.PlanTotalCount != nil {
		predicates = append(predicates, project.PlanTotalCountEQ(*i.PlanTotalCount))
	}
	if i.PlanTotalCountNEQ != nil {
		predicates = append(predicates, project.PlanTotalCountNEQ(*i.PlanTotalCountNEQ))
	}
	if len(i.PlanTotalCountIn) > 0 {
		predicates = append(predicates, project.PlanTotalCountIn(i.PlanTotalCountIn...))
	}
	if len(i.PlanTotalCountNotIn) > 0 {
		predicates = append(predicates, project.PlanTotalCountNotIn(i.PlanTotalCountNotIn...))
	}
	if i.PlanTotalCountGT != nil {
		predicates = append(predicates, project.PlanTotalCountGT(*i.PlanTotalCountGT))
	}
	if i.PlanTotalCountGTE != nil {
		predicates = append(predicates, project.PlanTotalCountGTE(*i.PlanTotalCountGTE))
	}
	if i.PlanTotalCountLT != nil {
		predicates = append(predicates, project.PlanTotalCountLT(*i.PlanTotalCountLT))
	}
	if i.PlanTotalCountLTE != nil {
		predicates = append(predicates, project.PlanTotalCountLTE(*i.PlanTotalCountLTE))
	}
	if i.PlanTotalCountIsNil {
		predicates = append(predicates, project.PlanTotalCountIsNil())
	}
	if i.PlanTotalCountNotNil {
		predicates = append(predicates, project.PlanTotalCountNotNil())
	}
	if i.PlanOverdueCount != nil {
		predicates = append(predicates, project.PlanOverdueCountEQ(*i.PlanOverdueCount))
	}
	if i.PlanOverdueCountNEQ != nil {
		predicates = append(predicates, project.PlanOverdueCountNEQ(*i.PlanOverdueCountNEQ))
	}
	if len(i.PlanOverdueCountIn) > 0 {
		predicates = append(predicates, project.PlanOverdueCountIn(i.PlanOverdueCountIn...))
	}
	if len(i.PlanOverdueCountNotIn) > 0 {
		predicates = append(predicates, project.PlanOverdueCountNotIn(i.PlanOverdueCountNotIn...))
	}
	if i.PlanOverdueCountGT != nil {
		predicates = append(predicates, project.PlanOverdueCountGT(*i.PlanOverdueCountGT))
	}
	if i.PlanOverdueCountGTE != nil {
		predicates = append(predicates, project.PlanOverdueCountGTE(*i.PlanOverdueCountGTE))
	}
	if i.PlanOverdueCountLT != nil {
		predicates = append(predicates, project.PlanOverdueCountLT(*i.PlanOverdueCountLT))
	}
	if i.PlanOverdueCountLTE != nil {
		predicates = append(predicates, project.PlanOverdueCountLTE(*i.PlanOverdueCountLTE))
	}
	if i.PlanOverdueCountIsNil {
		predicates = append(predicates, project.PlanOverdueCountIsNil())
	}
	if i.PlanOverdueCountNotNil {
		predicates = append(predicates, project.PlanOverdueCountNotNil())
	}
	if i.PlanOverdueMonthCount != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountEQ(*i.PlanOverdueMonthCount))
	}
	if i.PlanOverdueMonthCountNEQ != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountNEQ(*i.PlanOverdueMonthCountNEQ))
	}
	if len(i.PlanOverdueMonthCountIn) > 0 {
		predicates = append(predicates, project.PlanOverdueMonthCountIn(i.PlanOverdueMonthCountIn...))
	}
	if len(i.PlanOverdueMonthCountNotIn) > 0 {
		predicates = append(predicates, project.PlanOverdueMonthCountNotIn(i.PlanOverdueMonthCountNotIn...))
	}
	if i.PlanOverdueMonthCountGT != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountGT(*i.PlanOverdueMonthCountGT))
	}
	if i.PlanOverdueMonthCountGTE != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountGTE(*i.PlanOverdueMonthCountGTE))
	}
	if i.PlanOverdueMonthCountLT != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountLT(*i.PlanOverdueMonthCountLT))
	}
	if i.PlanOverdueMonthCountLTE != nil {
		predicates = append(predicates, project.PlanOverdueMonthCountLTE(*i.PlanOverdueMonthCountLTE))
	}
	if i.PlanOverdueMonthCountIsNil {
		predicates = append(predicates, project.PlanOverdueMonthCountIsNil())
	}
	if i.PlanOverdueMonthCountNotNil {
		predicates = append(predicates, project.PlanOverdueMonthCountNotNil())
	}
	if i.DiagramBdFinishCount != nil {
		predicates = append(predicates, project.DiagramBdFinishCountEQ(*i.DiagramBdFinishCount))
	}
	if i.DiagramBdFinishCountNEQ != nil {
		predicates = append(predicates, project.DiagramBdFinishCountNEQ(*i.DiagramBdFinishCountNEQ))
	}
	if len(i.DiagramBdFinishCountIn) > 0 {
		predicates = append(predicates, project.DiagramBdFinishCountIn(i.DiagramBdFinishCountIn...))
	}
	if len(i.DiagramBdFinishCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramBdFinishCountNotIn(i.DiagramBdFinishCountNotIn...))
	}
	if i.DiagramBdFinishCountGT != nil {
		predicates = append(predicates, project.DiagramBdFinishCountGT(*i.DiagramBdFinishCountGT))
	}
	if i.DiagramBdFinishCountGTE != nil {
		predicates = append(predicates, project.DiagramBdFinishCountGTE(*i.DiagramBdFinishCountGTE))
	}
	if i.DiagramBdFinishCountLT != nil {
		predicates = append(predicates, project.DiagramBdFinishCountLT(*i.DiagramBdFinishCountLT))
	}
	if i.DiagramBdFinishCountLTE != nil {
		predicates = append(predicates, project.DiagramBdFinishCountLTE(*i.DiagramBdFinishCountLTE))
	}
	if i.DiagramBdFinishCountIsNil {
		predicates = append(predicates, project.DiagramBdFinishCountIsNil())
	}
	if i.DiagramBdFinishCountNotNil {
		predicates = append(predicates, project.DiagramBdFinishCountNotNil())
	}
	if i.DiagramBdTotalCount != nil {
		predicates = append(predicates, project.DiagramBdTotalCountEQ(*i.DiagramBdTotalCount))
	}
	if i.DiagramBdTotalCountNEQ != nil {
		predicates = append(predicates, project.DiagramBdTotalCountNEQ(*i.DiagramBdTotalCountNEQ))
	}
	if len(i.DiagramBdTotalCountIn) > 0 {
		predicates = append(predicates, project.DiagramBdTotalCountIn(i.DiagramBdTotalCountIn...))
	}
	if len(i.DiagramBdTotalCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramBdTotalCountNotIn(i.DiagramBdTotalCountNotIn...))
	}
	if i.DiagramBdTotalCountGT != nil {
		predicates = append(predicates, project.DiagramBdTotalCountGT(*i.DiagramBdTotalCountGT))
	}
	if i.DiagramBdTotalCountGTE != nil {
		predicates = append(predicates, project.DiagramBdTotalCountGTE(*i.DiagramBdTotalCountGTE))
	}
	if i.DiagramBdTotalCountLT != nil {
		predicates = append(predicates, project.DiagramBdTotalCountLT(*i.DiagramBdTotalCountLT))
	}
	if i.DiagramBdTotalCountLTE != nil {
		predicates = append(predicates, project.DiagramBdTotalCountLTE(*i.DiagramBdTotalCountLTE))
	}
	if i.DiagramBdTotalCountIsNil {
		predicates = append(predicates, project.DiagramBdTotalCountIsNil())
	}
	if i.DiagramBdTotalCountNotNil {
		predicates = append(predicates, project.DiagramBdTotalCountNotNil())
	}
	if i.DiagramConstructionFinishCount != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountEQ(*i.DiagramConstructionFinishCount))
	}
	if i.DiagramConstructionFinishCountNEQ != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountNEQ(*i.DiagramConstructionFinishCountNEQ))
	}
	if len(i.DiagramConstructionFinishCountIn) > 0 {
		predicates = append(predicates, project.DiagramConstructionFinishCountIn(i.DiagramConstructionFinishCountIn...))
	}
	if len(i.DiagramConstructionFinishCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramConstructionFinishCountNotIn(i.DiagramConstructionFinishCountNotIn...))
	}
	if i.DiagramConstructionFinishCountGT != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountGT(*i.DiagramConstructionFinishCountGT))
	}
	if i.DiagramConstructionFinishCountGTE != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountGTE(*i.DiagramConstructionFinishCountGTE))
	}
	if i.DiagramConstructionFinishCountLT != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountLT(*i.DiagramConstructionFinishCountLT))
	}
	if i.DiagramConstructionFinishCountLTE != nil {
		predicates = append(predicates, project.DiagramConstructionFinishCountLTE(*i.DiagramConstructionFinishCountLTE))
	}
	if i.DiagramConstructionFinishCountIsNil {
		predicates = append(predicates, project.DiagramConstructionFinishCountIsNil())
	}
	if i.DiagramConstructionFinishCountNotNil {
		predicates = append(predicates, project.DiagramConstructionFinishCountNotNil())
	}
	if i.DiagramConstructionTotalCount != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountEQ(*i.DiagramConstructionTotalCount))
	}
	if i.DiagramConstructionTotalCountNEQ != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountNEQ(*i.DiagramConstructionTotalCountNEQ))
	}
	if len(i.DiagramConstructionTotalCountIn) > 0 {
		predicates = append(predicates, project.DiagramConstructionTotalCountIn(i.DiagramConstructionTotalCountIn...))
	}
	if len(i.DiagramConstructionTotalCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramConstructionTotalCountNotIn(i.DiagramConstructionTotalCountNotIn...))
	}
	if i.DiagramConstructionTotalCountGT != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountGT(*i.DiagramConstructionTotalCountGT))
	}
	if i.DiagramConstructionTotalCountGTE != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountGTE(*i.DiagramConstructionTotalCountGTE))
	}
	if i.DiagramConstructionTotalCountLT != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountLT(*i.DiagramConstructionTotalCountLT))
	}
	if i.DiagramConstructionTotalCountLTE != nil {
		predicates = append(predicates, project.DiagramConstructionTotalCountLTE(*i.DiagramConstructionTotalCountLTE))
	}
	if i.DiagramConstructionTotalCountIsNil {
		predicates = append(predicates, project.DiagramConstructionTotalCountIsNil())
	}
	if i.DiagramConstructionTotalCountNotNil {
		predicates = append(predicates, project.DiagramConstructionTotalCountNotNil())
	}
	if i.DiagramProcessingFinishCount != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountEQ(*i.DiagramProcessingFinishCount))
	}
	if i.DiagramProcessingFinishCountNEQ != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountNEQ(*i.DiagramProcessingFinishCountNEQ))
	}
	if len(i.DiagramProcessingFinishCountIn) > 0 {
		predicates = append(predicates, project.DiagramProcessingFinishCountIn(i.DiagramProcessingFinishCountIn...))
	}
	if len(i.DiagramProcessingFinishCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramProcessingFinishCountNotIn(i.DiagramProcessingFinishCountNotIn...))
	}
	if i.DiagramProcessingFinishCountGT != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountGT(*i.DiagramProcessingFinishCountGT))
	}
	if i.DiagramProcessingFinishCountGTE != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountGTE(*i.DiagramProcessingFinishCountGTE))
	}
	if i.DiagramProcessingFinishCountLT != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountLT(*i.DiagramProcessingFinishCountLT))
	}
	if i.DiagramProcessingFinishCountLTE != nil {
		predicates = append(predicates, project.DiagramProcessingFinishCountLTE(*i.DiagramProcessingFinishCountLTE))
	}
	if i.DiagramProcessingFinishCountIsNil {
		predicates = append(predicates, project.DiagramProcessingFinishCountIsNil())
	}
	if i.DiagramProcessingFinishCountNotNil {
		predicates = append(predicates, project.DiagramProcessingFinishCountNotNil())
	}
	if i.DiagramProcessingTotalCount != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountEQ(*i.DiagramProcessingTotalCount))
	}
	if i.DiagramProcessingTotalCountNEQ != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountNEQ(*i.DiagramProcessingTotalCountNEQ))
	}
	if len(i.DiagramProcessingTotalCountIn) > 0 {
		predicates = append(predicates, project.DiagramProcessingTotalCountIn(i.DiagramProcessingTotalCountIn...))
	}
	if len(i.DiagramProcessingTotalCountNotIn) > 0 {
		predicates = append(predicates, project.DiagramProcessingTotalCountNotIn(i.DiagramProcessingTotalCountNotIn...))
	}
	if i.DiagramProcessingTotalCountGT != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountGT(*i.DiagramProcessingTotalCountGT))
	}
	if i.DiagramProcessingTotalCountGTE != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountGTE(*i.DiagramProcessingTotalCountGTE))
	}
	if i.DiagramProcessingTotalCountLT != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountLT(*i.DiagramProcessingTotalCountLT))
	}
	if i.DiagramProcessingTotalCountLTE != nil {
		predicates = append(predicates, project.DiagramProcessingTotalCountLTE(*i.DiagramProcessingTotalCountLTE))
	}
	if i.DiagramProcessingTotalCountIsNil {
		predicates = append(predicates, project.DiagramProcessingTotalCountIsNil())
	}
	if i.DiagramProcessingTotalCountNotNil {
		predicates = append(predicates, project.DiagramProcessingTotalCountNotNil())
	}
	if i.DiagramCApprovalRatioNumerator != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorEQ(*i.DiagramCApprovalRatioNumerator))
	}
	if i.DiagramCApprovalRatioNumeratorNEQ != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorNEQ(*i.DiagramCApprovalRatioNumeratorNEQ))
	}
	if len(i.DiagramCApprovalRatioNumeratorIn) > 0 {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorIn(i.DiagramCApprovalRatioNumeratorIn...))
	}
	if len(i.DiagramCApprovalRatioNumeratorNotIn) > 0 {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorNotIn(i.DiagramCApprovalRatioNumeratorNotIn...))
	}
	if i.DiagramCApprovalRatioNumeratorGT != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorGT(*i.DiagramCApprovalRatioNumeratorGT))
	}
	if i.DiagramCApprovalRatioNumeratorGTE != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorGTE(*i.DiagramCApprovalRatioNumeratorGTE))
	}
	if i.DiagramCApprovalRatioNumeratorLT != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorLT(*i.DiagramCApprovalRatioNumeratorLT))
	}
	if i.DiagramCApprovalRatioNumeratorLTE != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorLTE(*i.DiagramCApprovalRatioNumeratorLTE))
	}
	if i.DiagramCApprovalRatioNumeratorIsNil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorIsNil())
	}
	if i.DiagramCApprovalRatioNumeratorNotNil {
		predicates = append(predicates, project.DiagramCApprovalRatioNumeratorNotNil())
	}
	if i.DiagramCApprovalRatioDenominator != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorEQ(*i.DiagramCApprovalRatioDenominator))
	}
	if i.DiagramCApprovalRatioDenominatorNEQ != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorNEQ(*i.DiagramCApprovalRatioDenominatorNEQ))
	}
	if len(i.DiagramCApprovalRatioDenominatorIn) > 0 {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorIn(i.DiagramCApprovalRatioDenominatorIn...))
	}
	if len(i.DiagramCApprovalRatioDenominatorNotIn) > 0 {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorNotIn(i.DiagramCApprovalRatioDenominatorNotIn...))
	}
	if i.DiagramCApprovalRatioDenominatorGT != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorGT(*i.DiagramCApprovalRatioDenominatorGT))
	}
	if i.DiagramCApprovalRatioDenominatorGTE != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorGTE(*i.DiagramCApprovalRatioDenominatorGTE))
	}
	if i.DiagramCApprovalRatioDenominatorLT != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorLT(*i.DiagramCApprovalRatioDenominatorLT))
	}
	if i.DiagramCApprovalRatioDenominatorLTE != nil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorLTE(*i.DiagramCApprovalRatioDenominatorLTE))
	}
	if i.DiagramCApprovalRatioDenominatorIsNil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorIsNil())
	}
	if i.DiagramCApprovalRatioDenominatorNotNil {
		predicates = append(predicates, project.DiagramCApprovalRatioDenominatorNotNil())
	}

	if i.HasVos != nil {
		p := project.HasVos()
		if !*i.HasVos {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVosWith) > 0 {
		with := make([]predicate.ProjectVO, 0, len(i.HasVosWith))
		for _, w := range i.HasVosWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVosWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasVosWith(with...))
	}
	if i.HasProjectStaffs != nil {
		p := project.HasProjectStaffs()
		if !*i.HasProjectStaffs {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectStaffsWith) > 0 {
		with := make([]predicate.ProjectStaff, 0, len(i.HasProjectStaffsWith))
		for _, w := range i.HasProjectStaffsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProjectStaffsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectStaffsWith(with...))
	}
	if i.HasUsers != nil {
		p := project.HasUsers()
		if !*i.HasUsers {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProjectWhereInput
	case 1:
		return predicates[0], nil
	default:
		return project.And(predicates...), nil
	}
}

// ProjectStaffWhereInput represents a where input for filtering ProjectStaff queries.
type ProjectStaffWhereInput struct {
	Predicates []predicate.ProjectStaff  `json:"-"`
	Not        *ProjectStaffWhereInput   `json:"not,omitempty"`
	Or         []*ProjectStaffWhereInput `json:"or,omitempty"`
	And        []*ProjectStaffWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "cym" field predicates.
	Cym             *string  `json:"cym,omitempty"`
	CymNEQ          *string  `json:"cymNEQ,omitempty"`
	CymIn           []string `json:"cymIn,omitempty"`
	CymNotIn        []string `json:"cymNotIn,omitempty"`
	CymGT           *string  `json:"cymGT,omitempty"`
	CymGTE          *string  `json:"cymGTE,omitempty"`
	CymLT           *string  `json:"cymLT,omitempty"`
	CymLTE          *string  `json:"cymLTE,omitempty"`
	CymContains     *string  `json:"cymContains,omitempty"`
	CymHasPrefix    *string  `json:"cymHasPrefix,omitempty"`
	CymHasSuffix    *string  `json:"cymHasSuffix,omitempty"`
	CymEqualFold    *string  `json:"cymEqualFold,omitempty"`
	CymContainsFold *string  `json:"cymContainsFold,omitempty"`

	// "installation" field predicates.
	Installation       *float64  `json:"installation,omitempty"`
	InstallationNEQ    *float64  `json:"installationNEQ,omitempty"`
	InstallationIn     []float64 `json:"installationIn,omitempty"`
	InstallationNotIn  []float64 `json:"installationNotIn,omitempty"`
	InstallationGT     *float64  `json:"installationGT,omitempty"`
	InstallationGTE    *float64  `json:"installationGTE,omitempty"`
	InstallationLT     *float64  `json:"installationLT,omitempty"`
	InstallationLTE    *float64  `json:"installationLTE,omitempty"`
	InstallationIsNil  bool      `json:"installationIsNil,omitempty"`
	InstallationNotNil bool      `json:"installationNotNil,omitempty"`

	// "management" field predicates.
	Management       *float64  `json:"management,omitempty"`
	ManagementNEQ    *float64  `json:"managementNEQ,omitempty"`
	ManagementIn     []float64 `json:"managementIn,omitempty"`
	ManagementNotIn  []float64 `json:"managementNotIn,omitempty"`
	ManagementGT     *float64  `json:"managementGT,omitempty"`
	ManagementGTE    *float64  `json:"managementGTE,omitempty"`
	ManagementLT     *float64  `json:"managementLT,omitempty"`
	ManagementLTE    *float64  `json:"managementLTE,omitempty"`
	ManagementIsNil  bool      `json:"managementIsNil,omitempty"`
	ManagementNotNil bool      `json:"managementNotNil,omitempty"`

	// "design" field predicates.
	Design       *float64  `json:"design,omitempty"`
	DesignNEQ    *float64  `json:"designNEQ,omitempty"`
	DesignIn     []float64 `json:"designIn,omitempty"`
	DesignNotIn  []float64 `json:"designNotIn,omitempty"`
	DesignGT     *float64  `json:"designGT,omitempty"`
	DesignGTE    *float64  `json:"designGTE,omitempty"`
	DesignLT     *float64  `json:"designLT,omitempty"`
	DesignLTE    *float64  `json:"designLTE,omitempty"`
	DesignIsNil  bool      `json:"designIsNil,omitempty"`
	DesignNotNil bool      `json:"designNotNil,omitempty"`

	// "project_id" field predicates.
	ProjectID             *xid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *xid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []xid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []xid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *xid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *xid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *xid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *xid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *xid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *xid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *xid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *xid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *xid.ID  `json:"projectIDContainsFold,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProjectStaffWhereInput) AddPredicates(predicates ...predicate.ProjectStaff) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProjectStaffWhereInput filter on the ProjectStaffQuery builder.
func (i *ProjectStaffWhereInput) Filter(q *ProjectStaffQuery) (*ProjectStaffQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProjectStaffWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProjectStaffWhereInput is returned in case the ProjectStaffWhereInput is empty.
var ErrEmptyProjectStaffWhereInput = errors.New("ent: empty predicate ProjectStaffWhereInput")

// P returns a predicate for filtering projectstaffs.
// An error is returned if the input is empty or invalid.
func (i *ProjectStaffWhereInput) P() (predicate.ProjectStaff, error) {
	var predicates []predicate.ProjectStaff
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, projectstaff.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectStaff, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectstaff.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectStaff, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectstaff.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, projectstaff.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectstaff.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectstaff.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectstaff.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectstaff.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectstaff.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectstaff.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectstaff.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectstaff.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectstaff.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectstaff.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectstaff.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectstaff.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectstaff.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectstaff.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectstaff.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectstaff.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectstaff.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectstaff.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectstaff.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectstaff.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectstaff.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectstaff.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectstaff.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Cym != nil {
		predicates = append(predicates, projectstaff.CymEQ(*i.Cym))
	}
	if i.CymNEQ != nil {
		predicates = append(predicates, projectstaff.CymNEQ(*i.CymNEQ))
	}
	if len(i.CymIn) > 0 {
		predicates = append(predicates, projectstaff.CymIn(i.CymIn...))
	}
	if len(i.CymNotIn) > 0 {
		predicates = append(predicates, projectstaff.CymNotIn(i.CymNotIn...))
	}
	if i.CymGT != nil {
		predicates = append(predicates, projectstaff.CymGT(*i.CymGT))
	}
	if i.CymGTE != nil {
		predicates = append(predicates, projectstaff.CymGTE(*i.CymGTE))
	}
	if i.CymLT != nil {
		predicates = append(predicates, projectstaff.CymLT(*i.CymLT))
	}
	if i.CymLTE != nil {
		predicates = append(predicates, projectstaff.CymLTE(*i.CymLTE))
	}
	if i.CymContains != nil {
		predicates = append(predicates, projectstaff.CymContains(*i.CymContains))
	}
	if i.CymHasPrefix != nil {
		predicates = append(predicates, projectstaff.CymHasPrefix(*i.CymHasPrefix))
	}
	if i.CymHasSuffix != nil {
		predicates = append(predicates, projectstaff.CymHasSuffix(*i.CymHasSuffix))
	}
	if i.CymEqualFold != nil {
		predicates = append(predicates, projectstaff.CymEqualFold(*i.CymEqualFold))
	}
	if i.CymContainsFold != nil {
		predicates = append(predicates, projectstaff.CymContainsFold(*i.CymContainsFold))
	}
	if i.Installation != nil {
		predicates = append(predicates, projectstaff.InstallationEQ(*i.Installation))
	}
	if i.InstallationNEQ != nil {
		predicates = append(predicates, projectstaff.InstallationNEQ(*i.InstallationNEQ))
	}
	if len(i.InstallationIn) > 0 {
		predicates = append(predicates, projectstaff.InstallationIn(i.InstallationIn...))
	}
	if len(i.InstallationNotIn) > 0 {
		predicates = append(predicates, projectstaff.InstallationNotIn(i.InstallationNotIn...))
	}
	if i.InstallationGT != nil {
		predicates = append(predicates, projectstaff.InstallationGT(*i.InstallationGT))
	}
	if i.InstallationGTE != nil {
		predicates = append(predicates, projectstaff.InstallationGTE(*i.InstallationGTE))
	}
	if i.InstallationLT != nil {
		predicates = append(predicates, projectstaff.InstallationLT(*i.InstallationLT))
	}
	if i.InstallationLTE != nil {
		predicates = append(predicates, projectstaff.InstallationLTE(*i.InstallationLTE))
	}
	if i.InstallationIsNil {
		predicates = append(predicates, projectstaff.InstallationIsNil())
	}
	if i.InstallationNotNil {
		predicates = append(predicates, projectstaff.InstallationNotNil())
	}
	if i.Management != nil {
		predicates = append(predicates, projectstaff.ManagementEQ(*i.Management))
	}
	if i.ManagementNEQ != nil {
		predicates = append(predicates, projectstaff.ManagementNEQ(*i.ManagementNEQ))
	}
	if len(i.ManagementIn) > 0 {
		predicates = append(predicates, projectstaff.ManagementIn(i.ManagementIn...))
	}
	if len(i.ManagementNotIn) > 0 {
		predicates = append(predicates, projectstaff.ManagementNotIn(i.ManagementNotIn...))
	}
	if i.ManagementGT != nil {
		predicates = append(predicates, projectstaff.ManagementGT(*i.ManagementGT))
	}
	if i.ManagementGTE != nil {
		predicates = append(predicates, projectstaff.ManagementGTE(*i.ManagementGTE))
	}
	if i.ManagementLT != nil {
		predicates = append(predicates, projectstaff.ManagementLT(*i.ManagementLT))
	}
	if i.ManagementLTE != nil {
		predicates = append(predicates, projectstaff.ManagementLTE(*i.ManagementLTE))
	}
	if i.ManagementIsNil {
		predicates = append(predicates, projectstaff.ManagementIsNil())
	}
	if i.ManagementNotNil {
		predicates = append(predicates, projectstaff.ManagementNotNil())
	}
	if i.Design != nil {
		predicates = append(predicates, projectstaff.DesignEQ(*i.Design))
	}
	if i.DesignNEQ != nil {
		predicates = append(predicates, projectstaff.DesignNEQ(*i.DesignNEQ))
	}
	if len(i.DesignIn) > 0 {
		predicates = append(predicates, projectstaff.DesignIn(i.DesignIn...))
	}
	if len(i.DesignNotIn) > 0 {
		predicates = append(predicates, projectstaff.DesignNotIn(i.DesignNotIn...))
	}
	if i.DesignGT != nil {
		predicates = append(predicates, projectstaff.DesignGT(*i.DesignGT))
	}
	if i.DesignGTE != nil {
		predicates = append(predicates, projectstaff.DesignGTE(*i.DesignGTE))
	}
	if i.DesignLT != nil {
		predicates = append(predicates, projectstaff.DesignLT(*i.DesignLT))
	}
	if i.DesignLTE != nil {
		predicates = append(predicates, projectstaff.DesignLTE(*i.DesignLTE))
	}
	if i.DesignIsNil {
		predicates = append(predicates, projectstaff.DesignIsNil())
	}
	if i.DesignNotNil {
		predicates = append(predicates, projectstaff.DesignNotNil())
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projectstaff.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projectstaff.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projectstaff.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projectstaff.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projectstaff.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projectstaff.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projectstaff.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projectstaff.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projectstaff.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projectstaff.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projectstaff.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projectstaff.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projectstaff.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}

	if i.HasProject != nil {
		p := projectstaff.HasProject()
		if !*i.HasProject {
			p = projectstaff.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProjectWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectstaff.HasProjectWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProjectStaffWhereInput
	case 1:
		return predicates[0], nil
	default:
		return projectstaff.And(predicates...), nil
	}
}

// ProjectVOWhereInput represents a where input for filtering ProjectVO queries.
type ProjectVOWhereInput struct {
	Predicates []predicate.ProjectVO  `json:"-"`
	Not        *ProjectVOWhereInput   `json:"not,omitempty"`
	Or         []*ProjectVOWhereInput `json:"or,omitempty"`
	And        []*ProjectVOWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *xid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *xid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []xid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []xid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *xid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *xid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *xid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *xid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *xid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *xid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *xid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *xid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *xid.ID  `json:"projectIDContainsFold,omitempty"`

	// "change_type" field predicates.
	ChangeType      *int  `json:"changeType,omitempty"`
	ChangeTypeNEQ   *int  `json:"changeTypeNEQ,omitempty"`
	ChangeTypeIn    []int `json:"changeTypeIn,omitempty"`
	ChangeTypeNotIn []int `json:"changeTypeNotIn,omitempty"`
	ChangeTypeGT    *int  `json:"changeTypeGT,omitempty"`
	ChangeTypeGTE   *int  `json:"changeTypeGTE,omitempty"`
	ChangeTypeLT    *int  `json:"changeTypeLT,omitempty"`
	ChangeTypeLTE   *int  `json:"changeTypeLTE,omitempty"`

	// "is_approved" field predicates.
	IsApproved    *bool `json:"isApproved,omitempty"`
	IsApprovedNEQ *bool `json:"isApprovedNEQ,omitempty"`

	// "azjd" field predicates.
	Azjd       *float64  `json:"azjd,omitempty"`
	AzjdNEQ    *float64  `json:"azjdNEQ,omitempty"`
	AzjdIn     []float64 `json:"azjdIn,omitempty"`
	AzjdNotIn  []float64 `json:"azjdNotIn,omitempty"`
	AzjdGT     *float64  `json:"azjdGT,omitempty"`
	AzjdGTE    *float64  `json:"azjdGTE,omitempty"`
	AzjdLT     *float64  `json:"azjdLT,omitempty"`
	AzjdLTE    *float64  `json:"azjdLTE,omitempty"`
	AzjdIsNil  bool      `json:"azjdIsNil,omitempty"`
	AzjdNotNil bool      `json:"azjdNotNil,omitempty"`

	// "yxhyze" field predicates.
	Yxhyze       *float64  `json:"yxhyze,omitempty"`
	YxhyzeNEQ    *float64  `json:"yxhyzeNEQ,omitempty"`
	YxhyzeIn     []float64 `json:"yxhyzeIn,omitempty"`
	YxhyzeNotIn  []float64 `json:"yxhyzeNotIn,omitempty"`
	YxhyzeGT     *float64  `json:"yxhyzeGT,omitempty"`
	YxhyzeGTE    *float64  `json:"yxhyzeGTE,omitempty"`
	YxhyzeLT     *float64  `json:"yxhyzeLT,omitempty"`
	YxhyzeLTE    *float64  `json:"yxhyzeLTE,omitempty"`
	YxhyzeIsNil  bool      `json:"yxhyzeIsNil,omitempty"`
	YxhyzeNotNil bool      `json:"yxhyzeNotNil,omitempty"`

	// "apply_amount" field predicates.
	ApplyAmount       *float64  `json:"applyAmount,omitempty"`
	ApplyAmountNEQ    *float64  `json:"applyAmountNEQ,omitempty"`
	ApplyAmountIn     []float64 `json:"applyAmountIn,omitempty"`
	ApplyAmountNotIn  []float64 `json:"applyAmountNotIn,omitempty"`
	ApplyAmountGT     *float64  `json:"applyAmountGT,omitempty"`
	ApplyAmountGTE    *float64  `json:"applyAmountGTE,omitempty"`
	ApplyAmountLT     *float64  `json:"applyAmountLT,omitempty"`
	ApplyAmountLTE    *float64  `json:"applyAmountLTE,omitempty"`
	ApplyAmountIsNil  bool      `json:"applyAmountIsNil,omitempty"`
	ApplyAmountNotNil bool      `json:"applyAmountNotNil,omitempty"`

	// "approve_amount" field predicates.
	ApproveAmount       *float64  `json:"approveAmount,omitempty"`
	ApproveAmountNEQ    *float64  `json:"approveAmountNEQ,omitempty"`
	ApproveAmountIn     []float64 `json:"approveAmountIn,omitempty"`
	ApproveAmountNotIn  []float64 `json:"approveAmountNotIn,omitempty"`
	ApproveAmountGT     *float64  `json:"approveAmountGT,omitempty"`
	ApproveAmountGTE    *float64  `json:"approveAmountGTE,omitempty"`
	ApproveAmountLT     *float64  `json:"approveAmountLT,omitempty"`
	ApproveAmountLTE    *float64  `json:"approveAmountLTE,omitempty"`
	ApproveAmountIsNil  bool      `json:"approveAmountIsNil,omitempty"`
	ApproveAmountNotNil bool      `json:"approveAmountNotNil,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProjectVOWhereInput) AddPredicates(predicates ...predicate.ProjectVO) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProjectVOWhereInput filter on the ProjectVOQuery builder.
func (i *ProjectVOWhereInput) Filter(q *ProjectVOQuery) (*ProjectVOQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProjectVOWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProjectVOWhereInput is returned in case the ProjectVOWhereInput is empty.
var ErrEmptyProjectVOWhereInput = errors.New("ent: empty predicate ProjectVOWhereInput")

// P returns a predicate for filtering projectvos.
// An error is returned if the input is empty or invalid.
func (i *ProjectVOWhereInput) P() (predicate.ProjectVO, error) {
	var predicates []predicate.ProjectVO
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, projectvo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectVO, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectvo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectVO, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectvo.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, projectvo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectvo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectvo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectvo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectvo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectvo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectvo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectvo.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectvo.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectvo.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectvo.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectvo.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectvo.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectvo.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectvo.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectvo.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectvo.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectvo.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectvo.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectvo.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectvo.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectvo.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectvo.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectvo.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projectvo.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projectvo.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projectvo.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projectvo.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projectvo.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projectvo.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projectvo.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projectvo.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projectvo.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projectvo.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projectvo.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projectvo.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projectvo.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.ChangeType != nil {
		predicates = append(predicates, projectvo.ChangeTypeEQ(*i.ChangeType))
	}
	if i.ChangeTypeNEQ != nil {
		predicates = append(predicates, projectvo.ChangeTypeNEQ(*i.ChangeTypeNEQ))
	}
	if len(i.ChangeTypeIn) > 0 {
		predicates = append(predicates, projectvo.ChangeTypeIn(i.ChangeTypeIn...))
	}
	if len(i.ChangeTypeNotIn) > 0 {
		predicates = append(predicates, projectvo.ChangeTypeNotIn(i.ChangeTypeNotIn...))
	}
	if i.ChangeTypeGT != nil {
		predicates = append(predicates, projectvo.ChangeTypeGT(*i.ChangeTypeGT))
	}
	if i.ChangeTypeGTE != nil {
		predicates = append(predicates, projectvo.ChangeTypeGTE(*i.ChangeTypeGTE))
	}
	if i.ChangeTypeLT != nil {
		predicates = append(predicates, projectvo.ChangeTypeLT(*i.ChangeTypeLT))
	}
	if i.ChangeTypeLTE != nil {
		predicates = append(predicates, projectvo.ChangeTypeLTE(*i.ChangeTypeLTE))
	}
	if i.IsApproved != nil {
		predicates = append(predicates, projectvo.IsApprovedEQ(*i.IsApproved))
	}
	if i.IsApprovedNEQ != nil {
		predicates = append(predicates, projectvo.IsApprovedNEQ(*i.IsApprovedNEQ))
	}
	if i.Azjd != nil {
		predicates = append(predicates, projectvo.AzjdEQ(*i.Azjd))
	}
	if i.AzjdNEQ != nil {
		predicates = append(predicates, projectvo.AzjdNEQ(*i.AzjdNEQ))
	}
	if len(i.AzjdIn) > 0 {
		predicates = append(predicates, projectvo.AzjdIn(i.AzjdIn...))
	}
	if len(i.AzjdNotIn) > 0 {
		predicates = append(predicates, projectvo.AzjdNotIn(i.AzjdNotIn...))
	}
	if i.AzjdGT != nil {
		predicates = append(predicates, projectvo.AzjdGT(*i.AzjdGT))
	}
	if i.AzjdGTE != nil {
		predicates = append(predicates, projectvo.AzjdGTE(*i.AzjdGTE))
	}
	if i.AzjdLT != nil {
		predicates = append(predicates, projectvo.AzjdLT(*i.AzjdLT))
	}
	if i.AzjdLTE != nil {
		predicates = append(predicates, projectvo.AzjdLTE(*i.AzjdLTE))
	}
	if i.AzjdIsNil {
		predicates = append(predicates, projectvo.AzjdIsNil())
	}
	if i.AzjdNotNil {
		predicates = append(predicates, projectvo.AzjdNotNil())
	}
	if i.Yxhyze != nil {
		predicates = append(predicates, projectvo.YxhyzeEQ(*i.Yxhyze))
	}
	if i.YxhyzeNEQ != nil {
		predicates = append(predicates, projectvo.YxhyzeNEQ(*i.YxhyzeNEQ))
	}
	if len(i.YxhyzeIn) > 0 {
		predicates = append(predicates, projectvo.YxhyzeIn(i.YxhyzeIn...))
	}
	if len(i.YxhyzeNotIn) > 0 {
		predicates = append(predicates, projectvo.YxhyzeNotIn(i.YxhyzeNotIn...))
	}
	if i.YxhyzeGT != nil {
		predicates = append(predicates, projectvo.YxhyzeGT(*i.YxhyzeGT))
	}
	if i.YxhyzeGTE != nil {
		predicates = append(predicates, projectvo.YxhyzeGTE(*i.YxhyzeGTE))
	}
	if i.YxhyzeLT != nil {
		predicates = append(predicates, projectvo.YxhyzeLT(*i.YxhyzeLT))
	}
	if i.YxhyzeLTE != nil {
		predicates = append(predicates, projectvo.YxhyzeLTE(*i.YxhyzeLTE))
	}
	if i.YxhyzeIsNil {
		predicates = append(predicates, projectvo.YxhyzeIsNil())
	}
	if i.YxhyzeNotNil {
		predicates = append(predicates, projectvo.YxhyzeNotNil())
	}
	if i.ApplyAmount != nil {
		predicates = append(predicates, projectvo.ApplyAmountEQ(*i.ApplyAmount))
	}
	if i.ApplyAmountNEQ != nil {
		predicates = append(predicates, projectvo.ApplyAmountNEQ(*i.ApplyAmountNEQ))
	}
	if len(i.ApplyAmountIn) > 0 {
		predicates = append(predicates, projectvo.ApplyAmountIn(i.ApplyAmountIn...))
	}
	if len(i.ApplyAmountNotIn) > 0 {
		predicates = append(predicates, projectvo.ApplyAmountNotIn(i.ApplyAmountNotIn...))
	}
	if i.ApplyAmountGT != nil {
		predicates = append(predicates, projectvo.ApplyAmountGT(*i.ApplyAmountGT))
	}
	if i.ApplyAmountGTE != nil {
		predicates = append(predicates, projectvo.ApplyAmountGTE(*i.ApplyAmountGTE))
	}
	if i.ApplyAmountLT != nil {
		predicates = append(predicates, projectvo.ApplyAmountLT(*i.ApplyAmountLT))
	}
	if i.ApplyAmountLTE != nil {
		predicates = append(predicates, projectvo.ApplyAmountLTE(*i.ApplyAmountLTE))
	}
	if i.ApplyAmountIsNil {
		predicates = append(predicates, projectvo.ApplyAmountIsNil())
	}
	if i.ApplyAmountNotNil {
		predicates = append(predicates, projectvo.ApplyAmountNotNil())
	}
	if i.ApproveAmount != nil {
		predicates = append(predicates, projectvo.ApproveAmountEQ(*i.ApproveAmount))
	}
	if i.ApproveAmountNEQ != nil {
		predicates = append(predicates, projectvo.ApproveAmountNEQ(*i.ApproveAmountNEQ))
	}
	if len(i.ApproveAmountIn) > 0 {
		predicates = append(predicates, projectvo.ApproveAmountIn(i.ApproveAmountIn...))
	}
	if len(i.ApproveAmountNotIn) > 0 {
		predicates = append(predicates, projectvo.ApproveAmountNotIn(i.ApproveAmountNotIn...))
	}
	if i.ApproveAmountGT != nil {
		predicates = append(predicates, projectvo.ApproveAmountGT(*i.ApproveAmountGT))
	}
	if i.ApproveAmountGTE != nil {
		predicates = append(predicates, projectvo.ApproveAmountGTE(*i.ApproveAmountGTE))
	}
	if i.ApproveAmountLT != nil {
		predicates = append(predicates, projectvo.ApproveAmountLT(*i.ApproveAmountLT))
	}
	if i.ApproveAmountLTE != nil {
		predicates = append(predicates, projectvo.ApproveAmountLTE(*i.ApproveAmountLTE))
	}
	if i.ApproveAmountIsNil {
		predicates = append(predicates, projectvo.ApproveAmountIsNil())
	}
	if i.ApproveAmountNotNil {
		predicates = append(predicates, projectvo.ApproveAmountNotNil())
	}

	if i.HasProject != nil {
		p := projectvo.HasProject()
		if !*i.HasProject {
			p = projectvo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProjectWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectvo.HasProjectWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProjectVOWhereInput
	case 1:
		return predicates[0], nil
	default:
		return projectvo.And(predicates...), nil
	}
}

// ProvinceWhereInput represents a where input for filtering Province queries.
type ProvinceWhereInput struct {
	Predicates []predicate.Province  `json:"-"`
	Not        *ProvinceWhereInput   `json:"not,omitempty"`
	Or         []*ProvinceWhereInput `json:"or,omitempty"`
	And        []*ProvinceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "adcode" field predicates.
	Adcode      *int  `json:"adcode,omitempty"`
	AdcodeNEQ   *int  `json:"adcodeNEQ,omitempty"`
	AdcodeIn    []int `json:"adcodeIn,omitempty"`
	AdcodeNotIn []int `json:"adcodeNotIn,omitempty"`
	AdcodeGT    *int  `json:"adcodeGT,omitempty"`
	AdcodeGTE   *int  `json:"adcodeGTE,omitempty"`
	AdcodeLT    *int  `json:"adcodeLT,omitempty"`
	AdcodeLTE   *int  `json:"adcodeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "country_id" field predicates.
	CountryID             *xid.ID  `json:"countryID,omitempty"`
	CountryIDNEQ          *xid.ID  `json:"countryIDNEQ,omitempty"`
	CountryIDIn           []xid.ID `json:"countryIDIn,omitempty"`
	CountryIDNotIn        []xid.ID `json:"countryIDNotIn,omitempty"`
	CountryIDGT           *xid.ID  `json:"countryIDGT,omitempty"`
	CountryIDGTE          *xid.ID  `json:"countryIDGTE,omitempty"`
	CountryIDLT           *xid.ID  `json:"countryIDLT,omitempty"`
	CountryIDLTE          *xid.ID  `json:"countryIDLTE,omitempty"`
	CountryIDContains     *xid.ID  `json:"countryIDContains,omitempty"`
	CountryIDHasPrefix    *xid.ID  `json:"countryIDHasPrefix,omitempty"`
	CountryIDHasSuffix    *xid.ID  `json:"countryIDHasSuffix,omitempty"`
	CountryIDEqualFold    *xid.ID  `json:"countryIDEqualFold,omitempty"`
	CountryIDContainsFold *xid.ID  `json:"countryIDContainsFold,omitempty"`

	// "area_id" field predicates.
	AreaID             *xid.ID  `json:"areaID,omitempty"`
	AreaIDNEQ          *xid.ID  `json:"areaIDNEQ,omitempty"`
	AreaIDIn           []xid.ID `json:"areaIDIn,omitempty"`
	AreaIDNotIn        []xid.ID `json:"areaIDNotIn,omitempty"`
	AreaIDGT           *xid.ID  `json:"areaIDGT,omitempty"`
	AreaIDGTE          *xid.ID  `json:"areaIDGTE,omitempty"`
	AreaIDLT           *xid.ID  `json:"areaIDLT,omitempty"`
	AreaIDLTE          *xid.ID  `json:"areaIDLTE,omitempty"`
	AreaIDContains     *xid.ID  `json:"areaIDContains,omitempty"`
	AreaIDHasPrefix    *xid.ID  `json:"areaIDHasPrefix,omitempty"`
	AreaIDHasSuffix    *xid.ID  `json:"areaIDHasSuffix,omitempty"`
	AreaIDIsNil        bool     `json:"areaIDIsNil,omitempty"`
	AreaIDNotNil       bool     `json:"areaIDNotNil,omitempty"`
	AreaIDEqualFold    *xid.ID  `json:"areaIDEqualFold,omitempty"`
	AreaIDContainsFold *xid.ID  `json:"areaIDContainsFold,omitempty"`

	// "districts" edge predicates.
	HasDistricts     *bool                 `json:"hasDistricts,omitempty"`
	HasDistrictsWith []*DistrictWhereInput `json:"hasDistrictsWith,omitempty"`

	// "cities" edge predicates.
	HasCities     *bool             `json:"hasCities,omitempty"`
	HasCitiesWith []*CityWhereInput `json:"hasCitiesWith,omitempty"`

	// "country" edge predicates.
	HasCountry     *bool                `json:"hasCountry,omitempty"`
	HasCountryWith []*CountryWhereInput `json:"hasCountryWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "area" edge predicates.
	HasArea     *bool             `json:"hasArea,omitempty"`
	HasAreaWith []*AreaWhereInput `json:"hasAreaWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProvinceWhereInput) AddPredicates(predicates ...predicate.Province) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProvinceWhereInput filter on the ProvinceQuery builder.
func (i *ProvinceWhereInput) Filter(q *ProvinceQuery) (*ProvinceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProvinceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProvinceWhereInput is returned in case the ProvinceWhereInput is empty.
var ErrEmptyProvinceWhereInput = errors.New("ent: empty predicate ProvinceWhereInput")

// P returns a predicate for filtering provinces.
// An error is returned if the input is empty or invalid.
func (i *ProvinceWhereInput) P() (predicate.Province, error) {
	var predicates []predicate.Province
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, province.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Province, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, province.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Province, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, province.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, province.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, province.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, province.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, province.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, province.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, province.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, province.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, province.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, province.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, province.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, province.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, province.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, province.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, province.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, province.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, province.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, province.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, province.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, province.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, province.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, province.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, province.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, province.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, province.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Adcode != nil {
		predicates = append(predicates, province.AdcodeEQ(*i.Adcode))
	}
	if i.AdcodeNEQ != nil {
		predicates = append(predicates, province.AdcodeNEQ(*i.AdcodeNEQ))
	}
	if len(i.AdcodeIn) > 0 {
		predicates = append(predicates, province.AdcodeIn(i.AdcodeIn...))
	}
	if len(i.AdcodeNotIn) > 0 {
		predicates = append(predicates, province.AdcodeNotIn(i.AdcodeNotIn...))
	}
	if i.AdcodeGT != nil {
		predicates = append(predicates, province.AdcodeGT(*i.AdcodeGT))
	}
	if i.AdcodeGTE != nil {
		predicates = append(predicates, province.AdcodeGTE(*i.AdcodeGTE))
	}
	if i.AdcodeLT != nil {
		predicates = append(predicates, province.AdcodeLT(*i.AdcodeLT))
	}
	if i.AdcodeLTE != nil {
		predicates = append(predicates, province.AdcodeLTE(*i.AdcodeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, province.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, province.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, province.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, province.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, province.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, province.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, province.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, province.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, province.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, province.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, province.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, province.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, province.NameContainsFold(*i.NameContainsFold))
	}
	if i.CountryID != nil {
		predicates = append(predicates, province.CountryIDEQ(*i.CountryID))
	}
	if i.CountryIDNEQ != nil {
		predicates = append(predicates, province.CountryIDNEQ(*i.CountryIDNEQ))
	}
	if len(i.CountryIDIn) > 0 {
		predicates = append(predicates, province.CountryIDIn(i.CountryIDIn...))
	}
	if len(i.CountryIDNotIn) > 0 {
		predicates = append(predicates, province.CountryIDNotIn(i.CountryIDNotIn...))
	}
	if i.CountryIDGT != nil {
		predicates = append(predicates, province.CountryIDGT(*i.CountryIDGT))
	}
	if i.CountryIDGTE != nil {
		predicates = append(predicates, province.CountryIDGTE(*i.CountryIDGTE))
	}
	if i.CountryIDLT != nil {
		predicates = append(predicates, province.CountryIDLT(*i.CountryIDLT))
	}
	if i.CountryIDLTE != nil {
		predicates = append(predicates, province.CountryIDLTE(*i.CountryIDLTE))
	}
	if i.CountryIDContains != nil {
		predicates = append(predicates, province.CountryIDContains(*i.CountryIDContains))
	}
	if i.CountryIDHasPrefix != nil {
		predicates = append(predicates, province.CountryIDHasPrefix(*i.CountryIDHasPrefix))
	}
	if i.CountryIDHasSuffix != nil {
		predicates = append(predicates, province.CountryIDHasSuffix(*i.CountryIDHasSuffix))
	}
	if i.CountryIDEqualFold != nil {
		predicates = append(predicates, province.CountryIDEqualFold(*i.CountryIDEqualFold))
	}
	if i.CountryIDContainsFold != nil {
		predicates = append(predicates, province.CountryIDContainsFold(*i.CountryIDContainsFold))
	}
	if i.AreaID != nil {
		predicates = append(predicates, province.AreaIDEQ(*i.AreaID))
	}
	if i.AreaIDNEQ != nil {
		predicates = append(predicates, province.AreaIDNEQ(*i.AreaIDNEQ))
	}
	if len(i.AreaIDIn) > 0 {
		predicates = append(predicates, province.AreaIDIn(i.AreaIDIn...))
	}
	if len(i.AreaIDNotIn) > 0 {
		predicates = append(predicates, province.AreaIDNotIn(i.AreaIDNotIn...))
	}
	if i.AreaIDGT != nil {
		predicates = append(predicates, province.AreaIDGT(*i.AreaIDGT))
	}
	if i.AreaIDGTE != nil {
		predicates = append(predicates, province.AreaIDGTE(*i.AreaIDGTE))
	}
	if i.AreaIDLT != nil {
		predicates = append(predicates, province.AreaIDLT(*i.AreaIDLT))
	}
	if i.AreaIDLTE != nil {
		predicates = append(predicates, province.AreaIDLTE(*i.AreaIDLTE))
	}
	if i.AreaIDContains != nil {
		predicates = append(predicates, province.AreaIDContains(*i.AreaIDContains))
	}
	if i.AreaIDHasPrefix != nil {
		predicates = append(predicates, province.AreaIDHasPrefix(*i.AreaIDHasPrefix))
	}
	if i.AreaIDHasSuffix != nil {
		predicates = append(predicates, province.AreaIDHasSuffix(*i.AreaIDHasSuffix))
	}
	if i.AreaIDIsNil {
		predicates = append(predicates, province.AreaIDIsNil())
	}
	if i.AreaIDNotNil {
		predicates = append(predicates, province.AreaIDNotNil())
	}
	if i.AreaIDEqualFold != nil {
		predicates = append(predicates, province.AreaIDEqualFold(*i.AreaIDEqualFold))
	}
	if i.AreaIDContainsFold != nil {
		predicates = append(predicates, province.AreaIDContainsFold(*i.AreaIDContainsFold))
	}

	if i.HasDistricts != nil {
		p := province.HasDistricts()
		if !*i.HasDistricts {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictsWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictsWith))
		for _, w := range i.HasDistrictsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasDistrictsWith(with...))
	}
	if i.HasCities != nil {
		p := province.HasCities()
		if !*i.HasCities {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCitiesWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCitiesWith))
		for _, w := range i.HasCitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasCitiesWith(with...))
	}
	if i.HasCountry != nil {
		p := province.HasCountry()
		if !*i.HasCountry {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCountryWith) > 0 {
		with := make([]predicate.Country, 0, len(i.HasCountryWith))
		for _, w := range i.HasCountryWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCountryWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasCountryWith(with...))
	}
	if i.HasTenders != nil {
		p := province.HasTenders()
		if !*i.HasTenders {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasTendersWith(with...))
	}
	if i.HasArea != nil {
		p := province.HasArea()
		if !*i.HasArea {
			p = province.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreaWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreaWith))
		for _, w := range i.HasAreaWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreaWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, province.HasAreaWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProvinceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return province.And(predicates...), nil
	}
}

// TenderWhereInput represents a where input for filtering Tender queries.
type TenderWhereInput struct {
	Predicates []predicate.Tender  `json:"-"`
	Not        *TenderWhereInput   `json:"not,omitempty"`
	Or         []*TenderWhereInput `json:"or,omitempty"`
	And        []*TenderWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "status" field predicates.
	Status      *int  `json:"status,omitempty"`
	StatusNEQ   *int  `json:"statusNEQ,omitempty"`
	StatusIn    []int `json:"statusIn,omitempty"`
	StatusNotIn []int `json:"statusNotIn,omitempty"`
	StatusGT    *int  `json:"statusGT,omitempty"`
	StatusGTE   *int  `json:"statusGTE,omitempty"`
	StatusLT    *int  `json:"statusLT,omitempty"`
	StatusLTE   *int  `json:"statusLTE,omitempty"`

	// "is_approved" field predicates.
	IsApproved    *bool `json:"isApproved,omitempty"`
	IsApprovedNEQ *bool `json:"isApprovedNEQ,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "estimated_amount" field predicates.
	EstimatedAmount       *float64  `json:"estimatedAmount,omitempty"`
	EstimatedAmountNEQ    *float64  `json:"estimatedAmountNEQ,omitempty"`
	EstimatedAmountIn     []float64 `json:"estimatedAmountIn,omitempty"`
	EstimatedAmountNotIn  []float64 `json:"estimatedAmountNotIn,omitempty"`
	EstimatedAmountGT     *float64  `json:"estimatedAmountGT,omitempty"`
	EstimatedAmountGTE    *float64  `json:"estimatedAmountGTE,omitempty"`
	EstimatedAmountLT     *float64  `json:"estimatedAmountLT,omitempty"`
	EstimatedAmountLTE    *float64  `json:"estimatedAmountLTE,omitempty"`
	EstimatedAmountIsNil  bool      `json:"estimatedAmountIsNil,omitempty"`
	EstimatedAmountNotNil bool      `json:"estimatedAmountNotNil,omitempty"`

	// "tender_date" field predicates.
	TenderDate       *time.Time  `json:"tenderDate,omitempty"`
	TenderDateNEQ    *time.Time  `json:"tenderDateNEQ,omitempty"`
	TenderDateIn     []time.Time `json:"tenderDateIn,omitempty"`
	TenderDateNotIn  []time.Time `json:"tenderDateNotIn,omitempty"`
	TenderDateGT     *time.Time  `json:"tenderDateGT,omitempty"`
	TenderDateGTE    *time.Time  `json:"tenderDateGTE,omitempty"`
	TenderDateLT     *time.Time  `json:"tenderDateLT,omitempty"`
	TenderDateLTE    *time.Time  `json:"tenderDateLTE,omitempty"`
	TenderDateIsNil  bool        `json:"tenderDateIsNil,omitempty"`
	TenderDateNotNil bool        `json:"tenderDateNotNil,omitempty"`

	// "classify" field predicates.
	Classify       *int  `json:"classify,omitempty"`
	ClassifyNEQ    *int  `json:"classifyNEQ,omitempty"`
	ClassifyIn     []int `json:"classifyIn,omitempty"`
	ClassifyNotIn  []int `json:"classifyNotIn,omitempty"`
	ClassifyGT     *int  `json:"classifyGT,omitempty"`
	ClassifyGTE    *int  `json:"classifyGTE,omitempty"`
	ClassifyLT     *int  `json:"classifyLT,omitempty"`
	ClassifyLTE    *int  `json:"classifyLTE,omitempty"`
	ClassifyIsNil  bool  `json:"classifyIsNil,omitempty"`
	ClassifyNotNil bool  `json:"classifyNotNil,omitempty"`

	// "discovery_date" field predicates.
	DiscoveryDate      *time.Time  `json:"discoveryDate,omitempty"`
	DiscoveryDateNEQ   *time.Time  `json:"discoveryDateNEQ,omitempty"`
	DiscoveryDateIn    []time.Time `json:"discoveryDateIn,omitempty"`
	DiscoveryDateNotIn []time.Time `json:"discoveryDateNotIn,omitempty"`
	DiscoveryDateGT    *time.Time  `json:"discoveryDateGT,omitempty"`
	DiscoveryDateGTE   *time.Time  `json:"discoveryDateGTE,omitempty"`
	DiscoveryDateLT    *time.Time  `json:"discoveryDateLT,omitempty"`
	DiscoveryDateLTE   *time.Time  `json:"discoveryDateLTE,omitempty"`

	// "address" field predicates.
	Address             *string  `json:"address,omitempty"`
	AddressNEQ          *string  `json:"addressNEQ,omitempty"`
	AddressIn           []string `json:"addressIn,omitempty"`
	AddressNotIn        []string `json:"addressNotIn,omitempty"`
	AddressGT           *string  `json:"addressGT,omitempty"`
	AddressGTE          *string  `json:"addressGTE,omitempty"`
	AddressLT           *string  `json:"addressLT,omitempty"`
	AddressLTE          *string  `json:"addressLTE,omitempty"`
	AddressContains     *string  `json:"addressContains,omitempty"`
	AddressHasPrefix    *string  `json:"addressHasPrefix,omitempty"`
	AddressHasSuffix    *string  `json:"addressHasSuffix,omitempty"`
	AddressIsNil        bool     `json:"addressIsNil,omitempty"`
	AddressNotNil       bool     `json:"addressNotNil,omitempty"`
	AddressEqualFold    *string  `json:"addressEqualFold,omitempty"`
	AddressContainsFold *string  `json:"addressContainsFold,omitempty"`

	// "full_address" field predicates.
	FullAddress             *string  `json:"fullAddress,omitempty"`
	FullAddressNEQ          *string  `json:"fullAddressNEQ,omitempty"`
	FullAddressIn           []string `json:"fullAddressIn,omitempty"`
	FullAddressNotIn        []string `json:"fullAddressNotIn,omitempty"`
	FullAddressGT           *string  `json:"fullAddressGT,omitempty"`
	FullAddressGTE          *string  `json:"fullAddressGTE,omitempty"`
	FullAddressLT           *string  `json:"fullAddressLT,omitempty"`
	FullAddressLTE          *string  `json:"fullAddressLTE,omitempty"`
	FullAddressContains     *string  `json:"fullAddressContains,omitempty"`
	FullAddressHasPrefix    *string  `json:"fullAddressHasPrefix,omitempty"`
	FullAddressHasSuffix    *string  `json:"fullAddressHasSuffix,omitempty"`
	FullAddressIsNil        bool     `json:"fullAddressIsNil,omitempty"`
	FullAddressNotNil       bool     `json:"fullAddressNotNil,omitempty"`
	FullAddressEqualFold    *string  `json:"fullAddressEqualFold,omitempty"`
	FullAddressContainsFold *string  `json:"fullAddressContainsFold,omitempty"`

	// "contractor" field predicates.
	Contractor             *string  `json:"contractor,omitempty"`
	ContractorNEQ          *string  `json:"contractorNEQ,omitempty"`
	ContractorIn           []string `json:"contractorIn,omitempty"`
	ContractorNotIn        []string `json:"contractorNotIn,omitempty"`
	ContractorGT           *string  `json:"contractorGT,omitempty"`
	ContractorGTE          *string  `json:"contractorGTE,omitempty"`
	ContractorLT           *string  `json:"contractorLT,omitempty"`
	ContractorLTE          *string  `json:"contractorLTE,omitempty"`
	ContractorContains     *string  `json:"contractorContains,omitempty"`
	ContractorHasPrefix    *string  `json:"contractorHasPrefix,omitempty"`
	ContractorHasSuffix    *string  `json:"contractorHasSuffix,omitempty"`
	ContractorIsNil        bool     `json:"contractorIsNil,omitempty"`
	ContractorNotNil       bool     `json:"contractorNotNil,omitempty"`
	ContractorEqualFold    *string  `json:"contractorEqualFold,omitempty"`
	ContractorContainsFold *string  `json:"contractorContainsFold,omitempty"`

	// "level_involved" field predicates.
	LevelInvolved       *int  `json:"levelInvolved,omitempty"`
	LevelInvolvedNEQ    *int  `json:"levelInvolvedNEQ,omitempty"`
	LevelInvolvedIn     []int `json:"levelInvolvedIn,omitempty"`
	LevelInvolvedNotIn  []int `json:"levelInvolvedNotIn,omitempty"`
	LevelInvolvedGT     *int  `json:"levelInvolvedGT,omitempty"`
	LevelInvolvedGTE    *int  `json:"levelInvolvedGTE,omitempty"`
	LevelInvolvedLT     *int  `json:"levelInvolvedLT,omitempty"`
	LevelInvolvedLTE    *int  `json:"levelInvolvedLTE,omitempty"`
	LevelInvolvedIsNil  bool  `json:"levelInvolvedIsNil,omitempty"`
	LevelInvolvedNotNil bool  `json:"levelInvolvedNotNil,omitempty"`

	// "size_and_value_rating" field predicates.
	SizeAndValueRating       *int  `json:"sizeAndValueRating,omitempty"`
	SizeAndValueRatingNEQ    *int  `json:"sizeAndValueRatingNEQ,omitempty"`
	SizeAndValueRatingIn     []int `json:"sizeAndValueRatingIn,omitempty"`
	SizeAndValueRatingNotIn  []int `json:"sizeAndValueRatingNotIn,omitempty"`
	SizeAndValueRatingGT     *int  `json:"sizeAndValueRatingGT,omitempty"`
	SizeAndValueRatingGTE    *int  `json:"sizeAndValueRatingGTE,omitempty"`
	SizeAndValueRatingLT     *int  `json:"sizeAndValueRatingLT,omitempty"`
	SizeAndValueRatingLTE    *int  `json:"sizeAndValueRatingLTE,omitempty"`
	SizeAndValueRatingIsNil  bool  `json:"sizeAndValueRatingIsNil,omitempty"`
	SizeAndValueRatingNotNil bool  `json:"sizeAndValueRatingNotNil,omitempty"`

	// "size_and_value_rating_overview" field predicates.
	SizeAndValueRatingOverview             *string  `json:"sizeAndValueRatingOverview,omitempty"`
	SizeAndValueRatingOverviewNEQ          *string  `json:"sizeAndValueRatingOverviewNEQ,omitempty"`
	SizeAndValueRatingOverviewIn           []string `json:"sizeAndValueRatingOverviewIn,omitempty"`
	SizeAndValueRatingOverviewNotIn        []string `json:"sizeAndValueRatingOverviewNotIn,omitempty"`
	SizeAndValueRatingOverviewGT           *string  `json:"sizeAndValueRatingOverviewGT,omitempty"`
	SizeAndValueRatingOverviewGTE          *string  `json:"sizeAndValueRatingOverviewGTE,omitempty"`
	SizeAndValueRatingOverviewLT           *string  `json:"sizeAndValueRatingOverviewLT,omitempty"`
	SizeAndValueRatingOverviewLTE          *string  `json:"sizeAndValueRatingOverviewLTE,omitempty"`
	SizeAndValueRatingOverviewContains     *string  `json:"sizeAndValueRatingOverviewContains,omitempty"`
	SizeAndValueRatingOverviewHasPrefix    *string  `json:"sizeAndValueRatingOverviewHasPrefix,omitempty"`
	SizeAndValueRatingOverviewHasSuffix    *string  `json:"sizeAndValueRatingOverviewHasSuffix,omitempty"`
	SizeAndValueRatingOverviewIsNil        bool     `json:"sizeAndValueRatingOverviewIsNil,omitempty"`
	SizeAndValueRatingOverviewNotNil       bool     `json:"sizeAndValueRatingOverviewNotNil,omitempty"`
	SizeAndValueRatingOverviewEqualFold    *string  `json:"sizeAndValueRatingOverviewEqualFold,omitempty"`
	SizeAndValueRatingOverviewContainsFold *string  `json:"sizeAndValueRatingOverviewContainsFold,omitempty"`

	// "credit_and_payment_rating" field predicates.
	CreditAndPaymentRating       *int  `json:"creditAndPaymentRating,omitempty"`
	CreditAndPaymentRatingNEQ    *int  `json:"creditAndPaymentRatingNEQ,omitempty"`
	CreditAndPaymentRatingIn     []int `json:"creditAndPaymentRatingIn,omitempty"`
	CreditAndPaymentRatingNotIn  []int `json:"creditAndPaymentRatingNotIn,omitempty"`
	CreditAndPaymentRatingGT     *int  `json:"creditAndPaymentRatingGT,omitempty"`
	CreditAndPaymentRatingGTE    *int  `json:"creditAndPaymentRatingGTE,omitempty"`
	CreditAndPaymentRatingLT     *int  `json:"creditAndPaymentRatingLT,omitempty"`
	CreditAndPaymentRatingLTE    *int  `json:"creditAndPaymentRatingLTE,omitempty"`
	CreditAndPaymentRatingIsNil  bool  `json:"creditAndPaymentRatingIsNil,omitempty"`
	CreditAndPaymentRatingNotNil bool  `json:"creditAndPaymentRatingNotNil,omitempty"`

	// "credit_and_payment_rating_overview" field predicates.
	CreditAndPaymentRatingOverview             *string  `json:"creditAndPaymentRatingOverview,omitempty"`
	CreditAndPaymentRatingOverviewNEQ          *string  `json:"creditAndPaymentRatingOverviewNEQ,omitempty"`
	CreditAndPaymentRatingOverviewIn           []string `json:"creditAndPaymentRatingOverviewIn,omitempty"`
	CreditAndPaymentRatingOverviewNotIn        []string `json:"creditAndPaymentRatingOverviewNotIn,omitempty"`
	CreditAndPaymentRatingOverviewGT           *string  `json:"creditAndPaymentRatingOverviewGT,omitempty"`
	CreditAndPaymentRatingOverviewGTE          *string  `json:"creditAndPaymentRatingOverviewGTE,omitempty"`
	CreditAndPaymentRatingOverviewLT           *string  `json:"creditAndPaymentRatingOverviewLT,omitempty"`
	CreditAndPaymentRatingOverviewLTE          *string  `json:"creditAndPaymentRatingOverviewLTE,omitempty"`
	CreditAndPaymentRatingOverviewContains     *string  `json:"creditAndPaymentRatingOverviewContains,omitempty"`
	CreditAndPaymentRatingOverviewHasPrefix    *string  `json:"creditAndPaymentRatingOverviewHasPrefix,omitempty"`
	CreditAndPaymentRatingOverviewHasSuffix    *string  `json:"creditAndPaymentRatingOverviewHasSuffix,omitempty"`
	CreditAndPaymentRatingOverviewIsNil        bool     `json:"creditAndPaymentRatingOverviewIsNil,omitempty"`
	CreditAndPaymentRatingOverviewNotNil       bool     `json:"creditAndPaymentRatingOverviewNotNil,omitempty"`
	CreditAndPaymentRatingOverviewEqualFold    *string  `json:"creditAndPaymentRatingOverviewEqualFold,omitempty"`
	CreditAndPaymentRatingOverviewContainsFold *string  `json:"creditAndPaymentRatingOverviewContainsFold,omitempty"`

	// "time_limit_rating" field predicates.
	TimeLimitRating       *int  `json:"timeLimitRating,omitempty"`
	TimeLimitRatingNEQ    *int  `json:"timeLimitRatingNEQ,omitempty"`
	TimeLimitRatingIn     []int `json:"timeLimitRatingIn,omitempty"`
	TimeLimitRatingNotIn  []int `json:"timeLimitRatingNotIn,omitempty"`
	TimeLimitRatingGT     *int  `json:"timeLimitRatingGT,omitempty"`
	TimeLimitRatingGTE    *int  `json:"timeLimitRatingGTE,omitempty"`
	TimeLimitRatingLT     *int  `json:"timeLimitRatingLT,omitempty"`
	TimeLimitRatingLTE    *int  `json:"timeLimitRatingLTE,omitempty"`
	TimeLimitRatingIsNil  bool  `json:"timeLimitRatingIsNil,omitempty"`
	TimeLimitRatingNotNil bool  `json:"timeLimitRatingNotNil,omitempty"`

	// "time_limit_rating_overview" field predicates.
	TimeLimitRatingOverview             *string  `json:"timeLimitRatingOverview,omitempty"`
	TimeLimitRatingOverviewNEQ          *string  `json:"timeLimitRatingOverviewNEQ,omitempty"`
	TimeLimitRatingOverviewIn           []string `json:"timeLimitRatingOverviewIn,omitempty"`
	TimeLimitRatingOverviewNotIn        []string `json:"timeLimitRatingOverviewNotIn,omitempty"`
	TimeLimitRatingOverviewGT           *string  `json:"timeLimitRatingOverviewGT,omitempty"`
	TimeLimitRatingOverviewGTE          *string  `json:"timeLimitRatingOverviewGTE,omitempty"`
	TimeLimitRatingOverviewLT           *string  `json:"timeLimitRatingOverviewLT,omitempty"`
	TimeLimitRatingOverviewLTE          *string  `json:"timeLimitRatingOverviewLTE,omitempty"`
	TimeLimitRatingOverviewContains     *string  `json:"timeLimitRatingOverviewContains,omitempty"`
	TimeLimitRatingOverviewHasPrefix    *string  `json:"timeLimitRatingOverviewHasPrefix,omitempty"`
	TimeLimitRatingOverviewHasSuffix    *string  `json:"timeLimitRatingOverviewHasSuffix,omitempty"`
	TimeLimitRatingOverviewIsNil        bool     `json:"timeLimitRatingOverviewIsNil,omitempty"`
	TimeLimitRatingOverviewNotNil       bool     `json:"timeLimitRatingOverviewNotNil,omitempty"`
	TimeLimitRatingOverviewEqualFold    *string  `json:"timeLimitRatingOverviewEqualFold,omitempty"`
	TimeLimitRatingOverviewContainsFold *string  `json:"timeLimitRatingOverviewContainsFold,omitempty"`

	// "customer_relationship_rating" field predicates.
	CustomerRelationshipRating       *int  `json:"customerRelationshipRating,omitempty"`
	CustomerRelationshipRatingNEQ    *int  `json:"customerRelationshipRatingNEQ,omitempty"`
	CustomerRelationshipRatingIn     []int `json:"customerRelationshipRatingIn,omitempty"`
	CustomerRelationshipRatingNotIn  []int `json:"customerRelationshipRatingNotIn,omitempty"`
	CustomerRelationshipRatingGT     *int  `json:"customerRelationshipRatingGT,omitempty"`
	CustomerRelationshipRatingGTE    *int  `json:"customerRelationshipRatingGTE,omitempty"`
	CustomerRelationshipRatingLT     *int  `json:"customerRelationshipRatingLT,omitempty"`
	CustomerRelationshipRatingLTE    *int  `json:"customerRelationshipRatingLTE,omitempty"`
	CustomerRelationshipRatingIsNil  bool  `json:"customerRelationshipRatingIsNil,omitempty"`
	CustomerRelationshipRatingNotNil bool  `json:"customerRelationshipRatingNotNil,omitempty"`

	// "customer_relationship_rating_overview" field predicates.
	CustomerRelationshipRatingOverview             *string  `json:"customerRelationshipRatingOverview,omitempty"`
	CustomerRelationshipRatingOverviewNEQ          *string  `json:"customerRelationshipRatingOverviewNEQ,omitempty"`
	CustomerRelationshipRatingOverviewIn           []string `json:"customerRelationshipRatingOverviewIn,omitempty"`
	CustomerRelationshipRatingOverviewNotIn        []string `json:"customerRelationshipRatingOverviewNotIn,omitempty"`
	CustomerRelationshipRatingOverviewGT           *string  `json:"customerRelationshipRatingOverviewGT,omitempty"`
	CustomerRelationshipRatingOverviewGTE          *string  `json:"customerRelationshipRatingOverviewGTE,omitempty"`
	CustomerRelationshipRatingOverviewLT           *string  `json:"customerRelationshipRatingOverviewLT,omitempty"`
	CustomerRelationshipRatingOverviewLTE          *string  `json:"customerRelationshipRatingOverviewLTE,omitempty"`
	CustomerRelationshipRatingOverviewContains     *string  `json:"customerRelationshipRatingOverviewContains,omitempty"`
	CustomerRelationshipRatingOverviewHasPrefix    *string  `json:"customerRelationshipRatingOverviewHasPrefix,omitempty"`
	CustomerRelationshipRatingOverviewHasSuffix    *string  `json:"customerRelationshipRatingOverviewHasSuffix,omitempty"`
	CustomerRelationshipRatingOverviewIsNil        bool     `json:"customerRelationshipRatingOverviewIsNil,omitempty"`
	CustomerRelationshipRatingOverviewNotNil       bool     `json:"customerRelationshipRatingOverviewNotNil,omitempty"`
	CustomerRelationshipRatingOverviewEqualFold    *string  `json:"customerRelationshipRatingOverviewEqualFold,omitempty"`
	CustomerRelationshipRatingOverviewContainsFold *string  `json:"customerRelationshipRatingOverviewContainsFold,omitempty"`

	// "competitive_partnership_rating" field predicates.
	CompetitivePartnershipRating       *int  `json:"competitivePartnershipRating,omitempty"`
	CompetitivePartnershipRatingNEQ    *int  `json:"competitivePartnershipRatingNEQ,omitempty"`
	CompetitivePartnershipRatingIn     []int `json:"competitivePartnershipRatingIn,omitempty"`
	CompetitivePartnershipRatingNotIn  []int `json:"competitivePartnershipRatingNotIn,omitempty"`
	CompetitivePartnershipRatingGT     *int  `json:"competitivePartnershipRatingGT,omitempty"`
	CompetitivePartnershipRatingGTE    *int  `json:"competitivePartnershipRatingGTE,omitempty"`
	CompetitivePartnershipRatingLT     *int  `json:"competitivePartnershipRatingLT,omitempty"`
	CompetitivePartnershipRatingLTE    *int  `json:"competitivePartnershipRatingLTE,omitempty"`
	CompetitivePartnershipRatingIsNil  bool  `json:"competitivePartnershipRatingIsNil,omitempty"`
	CompetitivePartnershipRatingNotNil bool  `json:"competitivePartnershipRatingNotNil,omitempty"`

	// "competitive_partnership_rating_overview" field predicates.
	CompetitivePartnershipRatingOverview             *string  `json:"competitivePartnershipRatingOverview,omitempty"`
	CompetitivePartnershipRatingOverviewNEQ          *string  `json:"competitivePartnershipRatingOverviewNEQ,omitempty"`
	CompetitivePartnershipRatingOverviewIn           []string `json:"competitivePartnershipRatingOverviewIn,omitempty"`
	CompetitivePartnershipRatingOverviewNotIn        []string `json:"competitivePartnershipRatingOverviewNotIn,omitempty"`
	CompetitivePartnershipRatingOverviewGT           *string  `json:"competitivePartnershipRatingOverviewGT,omitempty"`
	CompetitivePartnershipRatingOverviewGTE          *string  `json:"competitivePartnershipRatingOverviewGTE,omitempty"`
	CompetitivePartnershipRatingOverviewLT           *string  `json:"competitivePartnershipRatingOverviewLT,omitempty"`
	CompetitivePartnershipRatingOverviewLTE          *string  `json:"competitivePartnershipRatingOverviewLTE,omitempty"`
	CompetitivePartnershipRatingOverviewContains     *string  `json:"competitivePartnershipRatingOverviewContains,omitempty"`
	CompetitivePartnershipRatingOverviewHasPrefix    *string  `json:"competitivePartnershipRatingOverviewHasPrefix,omitempty"`
	CompetitivePartnershipRatingOverviewHasSuffix    *string  `json:"competitivePartnershipRatingOverviewHasSuffix,omitempty"`
	CompetitivePartnershipRatingOverviewIsNil        bool     `json:"competitivePartnershipRatingOverviewIsNil,omitempty"`
	CompetitivePartnershipRatingOverviewNotNil       bool     `json:"competitivePartnershipRatingOverviewNotNil,omitempty"`
	CompetitivePartnershipRatingOverviewEqualFold    *string  `json:"competitivePartnershipRatingOverviewEqualFold,omitempty"`
	CompetitivePartnershipRatingOverviewContainsFold *string  `json:"competitivePartnershipRatingOverviewContainsFold,omitempty"`

	// "prepare_to_bid" field predicates.
	PrepareToBid    *bool `json:"prepareToBid,omitempty"`
	PrepareToBidNEQ *bool `json:"prepareToBidNEQ,omitempty"`

	// "project_code" field predicates.
	ProjectCode             *string  `json:"projectCode,omitempty"`
	ProjectCodeNEQ          *string  `json:"projectCodeNEQ,omitempty"`
	ProjectCodeIn           []string `json:"projectCodeIn,omitempty"`
	ProjectCodeNotIn        []string `json:"projectCodeNotIn,omitempty"`
	ProjectCodeGT           *string  `json:"projectCodeGT,omitempty"`
	ProjectCodeGTE          *string  `json:"projectCodeGTE,omitempty"`
	ProjectCodeLT           *string  `json:"projectCodeLT,omitempty"`
	ProjectCodeLTE          *string  `json:"projectCodeLTE,omitempty"`
	ProjectCodeContains     *string  `json:"projectCodeContains,omitempty"`
	ProjectCodeHasPrefix    *string  `json:"projectCodeHasPrefix,omitempty"`
	ProjectCodeHasSuffix    *string  `json:"projectCodeHasSuffix,omitempty"`
	ProjectCodeIsNil        bool     `json:"projectCodeIsNil,omitempty"`
	ProjectCodeNotNil       bool     `json:"projectCodeNotNil,omitempty"`
	ProjectCodeEqualFold    *string  `json:"projectCodeEqualFold,omitempty"`
	ProjectCodeContainsFold *string  `json:"projectCodeContainsFold,omitempty"`

	// "project_type" field predicates.
	ProjectType             *string  `json:"projectType,omitempty"`
	ProjectTypeNEQ          *string  `json:"projectTypeNEQ,omitempty"`
	ProjectTypeIn           []string `json:"projectTypeIn,omitempty"`
	ProjectTypeNotIn        []string `json:"projectTypeNotIn,omitempty"`
	ProjectTypeGT           *string  `json:"projectTypeGT,omitempty"`
	ProjectTypeGTE          *string  `json:"projectTypeGTE,omitempty"`
	ProjectTypeLT           *string  `json:"projectTypeLT,omitempty"`
	ProjectTypeLTE          *string  `json:"projectTypeLTE,omitempty"`
	ProjectTypeContains     *string  `json:"projectTypeContains,omitempty"`
	ProjectTypeHasPrefix    *string  `json:"projectTypeHasPrefix,omitempty"`
	ProjectTypeHasSuffix    *string  `json:"projectTypeHasSuffix,omitempty"`
	ProjectTypeIsNil        bool     `json:"projectTypeIsNil,omitempty"`
	ProjectTypeNotNil       bool     `json:"projectTypeNotNil,omitempty"`
	ProjectTypeEqualFold    *string  `json:"projectTypeEqualFold,omitempty"`
	ProjectTypeContainsFold *string  `json:"projectTypeContainsFold,omitempty"`

	// "project_definition" field predicates.
	ProjectDefinition             *string  `json:"projectDefinition,omitempty"`
	ProjectDefinitionNEQ          *string  `json:"projectDefinitionNEQ,omitempty"`
	ProjectDefinitionIn           []string `json:"projectDefinitionIn,omitempty"`
	ProjectDefinitionNotIn        []string `json:"projectDefinitionNotIn,omitempty"`
	ProjectDefinitionGT           *string  `json:"projectDefinitionGT,omitempty"`
	ProjectDefinitionGTE          *string  `json:"projectDefinitionGTE,omitempty"`
	ProjectDefinitionLT           *string  `json:"projectDefinitionLT,omitempty"`
	ProjectDefinitionLTE          *string  `json:"projectDefinitionLTE,omitempty"`
	ProjectDefinitionContains     *string  `json:"projectDefinitionContains,omitempty"`
	ProjectDefinitionHasPrefix    *string  `json:"projectDefinitionHasPrefix,omitempty"`
	ProjectDefinitionHasSuffix    *string  `json:"projectDefinitionHasSuffix,omitempty"`
	ProjectDefinitionIsNil        bool     `json:"projectDefinitionIsNil,omitempty"`
	ProjectDefinitionNotNil       bool     `json:"projectDefinitionNotNil,omitempty"`
	ProjectDefinitionEqualFold    *string  `json:"projectDefinitionEqualFold,omitempty"`
	ProjectDefinitionContainsFold *string  `json:"projectDefinitionContainsFold,omitempty"`

	// "estimated_project_start_date" field predicates.
	EstimatedProjectStartDate       *time.Time  `json:"estimatedProjectStartDate,omitempty"`
	EstimatedProjectStartDateNEQ    *time.Time  `json:"estimatedProjectStartDateNEQ,omitempty"`
	EstimatedProjectStartDateIn     []time.Time `json:"estimatedProjectStartDateIn,omitempty"`
	EstimatedProjectStartDateNotIn  []time.Time `json:"estimatedProjectStartDateNotIn,omitempty"`
	EstimatedProjectStartDateGT     *time.Time  `json:"estimatedProjectStartDateGT,omitempty"`
	EstimatedProjectStartDateGTE    *time.Time  `json:"estimatedProjectStartDateGTE,omitempty"`
	EstimatedProjectStartDateLT     *time.Time  `json:"estimatedProjectStartDateLT,omitempty"`
	EstimatedProjectStartDateLTE    *time.Time  `json:"estimatedProjectStartDateLTE,omitempty"`
	EstimatedProjectStartDateIsNil  bool        `json:"estimatedProjectStartDateIsNil,omitempty"`
	EstimatedProjectStartDateNotNil bool        `json:"estimatedProjectStartDateNotNil,omitempty"`

	// "estimated_project_end_date" field predicates.
	EstimatedProjectEndDate       *time.Time  `json:"estimatedProjectEndDate,omitempty"`
	EstimatedProjectEndDateNEQ    *time.Time  `json:"estimatedProjectEndDateNEQ,omitempty"`
	EstimatedProjectEndDateIn     []time.Time `json:"estimatedProjectEndDateIn,omitempty"`
	EstimatedProjectEndDateNotIn  []time.Time `json:"estimatedProjectEndDateNotIn,omitempty"`
	EstimatedProjectEndDateGT     *time.Time  `json:"estimatedProjectEndDateGT,omitempty"`
	EstimatedProjectEndDateGTE    *time.Time  `json:"estimatedProjectEndDateGTE,omitempty"`
	EstimatedProjectEndDateLT     *time.Time  `json:"estimatedProjectEndDateLT,omitempty"`
	EstimatedProjectEndDateLTE    *time.Time  `json:"estimatedProjectEndDateLTE,omitempty"`
	EstimatedProjectEndDateIsNil  bool        `json:"estimatedProjectEndDateIsNil,omitempty"`
	EstimatedProjectEndDateNotNil bool        `json:"estimatedProjectEndDateNotNil,omitempty"`

	// "remark" field predicates.
	Remark             *string  `json:"remark,omitempty"`
	RemarkNEQ          *string  `json:"remarkNEQ,omitempty"`
	RemarkIn           []string `json:"remarkIn,omitempty"`
	RemarkNotIn        []string `json:"remarkNotIn,omitempty"`
	RemarkGT           *string  `json:"remarkGT,omitempty"`
	RemarkGTE          *string  `json:"remarkGTE,omitempty"`
	RemarkLT           *string  `json:"remarkLT,omitempty"`
	RemarkLTE          *string  `json:"remarkLTE,omitempty"`
	RemarkContains     *string  `json:"remarkContains,omitempty"`
	RemarkHasPrefix    *string  `json:"remarkHasPrefix,omitempty"`
	RemarkHasSuffix    *string  `json:"remarkHasSuffix,omitempty"`
	RemarkIsNil        bool     `json:"remarkIsNil,omitempty"`
	RemarkNotNil       bool     `json:"remarkNotNil,omitempty"`
	RemarkEqualFold    *string  `json:"remarkEqualFold,omitempty"`
	RemarkContainsFold *string  `json:"remarkContainsFold,omitempty"`

	// "tender_situations" field predicates.
	TenderSituations             *string  `json:"tenderSituations,omitempty"`
	TenderSituationsNEQ          *string  `json:"tenderSituationsNEQ,omitempty"`
	TenderSituationsIn           []string `json:"tenderSituationsIn,omitempty"`
	TenderSituationsNotIn        []string `json:"tenderSituationsNotIn,omitempty"`
	TenderSituationsGT           *string  `json:"tenderSituationsGT,omitempty"`
	TenderSituationsGTE          *string  `json:"tenderSituationsGTE,omitempty"`
	TenderSituationsLT           *string  `json:"tenderSituationsLT,omitempty"`
	TenderSituationsLTE          *string  `json:"tenderSituationsLTE,omitempty"`
	TenderSituationsContains     *string  `json:"tenderSituationsContains,omitempty"`
	TenderSituationsHasPrefix    *string  `json:"tenderSituationsHasPrefix,omitempty"`
	TenderSituationsHasSuffix    *string  `json:"tenderSituationsHasSuffix,omitempty"`
	TenderSituationsIsNil        bool     `json:"tenderSituationsIsNil,omitempty"`
	TenderSituationsNotNil       bool     `json:"tenderSituationsNotNil,omitempty"`
	TenderSituationsEqualFold    *string  `json:"tenderSituationsEqualFold,omitempty"`
	TenderSituationsContainsFold *string  `json:"tenderSituationsContainsFold,omitempty"`

	// "owner_situations" field predicates.
	OwnerSituations             *string  `json:"ownerSituations,omitempty"`
	OwnerSituationsNEQ          *string  `json:"ownerSituationsNEQ,omitempty"`
	OwnerSituationsIn           []string `json:"ownerSituationsIn,omitempty"`
	OwnerSituationsNotIn        []string `json:"ownerSituationsNotIn,omitempty"`
	OwnerSituationsGT           *string  `json:"ownerSituationsGT,omitempty"`
	OwnerSituationsGTE          *string  `json:"ownerSituationsGTE,omitempty"`
	OwnerSituationsLT           *string  `json:"ownerSituationsLT,omitempty"`
	OwnerSituationsLTE          *string  `json:"ownerSituationsLTE,omitempty"`
	OwnerSituationsContains     *string  `json:"ownerSituationsContains,omitempty"`
	OwnerSituationsHasPrefix    *string  `json:"ownerSituationsHasPrefix,omitempty"`
	OwnerSituationsHasSuffix    *string  `json:"ownerSituationsHasSuffix,omitempty"`
	OwnerSituationsIsNil        bool     `json:"ownerSituationsIsNil,omitempty"`
	OwnerSituationsNotNil       bool     `json:"ownerSituationsNotNil,omitempty"`
	OwnerSituationsEqualFold    *string  `json:"ownerSituationsEqualFold,omitempty"`
	OwnerSituationsContainsFold *string  `json:"ownerSituationsContainsFold,omitempty"`

	// "bidding_instructions" field predicates.
	BiddingInstructions             *string  `json:"biddingInstructions,omitempty"`
	BiddingInstructionsNEQ          *string  `json:"biddingInstructionsNEQ,omitempty"`
	BiddingInstructionsIn           []string `json:"biddingInstructionsIn,omitempty"`
	BiddingInstructionsNotIn        []string `json:"biddingInstructionsNotIn,omitempty"`
	BiddingInstructionsGT           *string  `json:"biddingInstructionsGT,omitempty"`
	BiddingInstructionsGTE          *string  `json:"biddingInstructionsGTE,omitempty"`
	BiddingInstructionsLT           *string  `json:"biddingInstructionsLT,omitempty"`
	BiddingInstructionsLTE          *string  `json:"biddingInstructionsLTE,omitempty"`
	BiddingInstructionsContains     *string  `json:"biddingInstructionsContains,omitempty"`
	BiddingInstructionsHasPrefix    *string  `json:"biddingInstructionsHasPrefix,omitempty"`
	BiddingInstructionsHasSuffix    *string  `json:"biddingInstructionsHasSuffix,omitempty"`
	BiddingInstructionsIsNil        bool     `json:"biddingInstructionsIsNil,omitempty"`
	BiddingInstructionsNotNil       bool     `json:"biddingInstructionsNotNil,omitempty"`
	BiddingInstructionsEqualFold    *string  `json:"biddingInstructionsEqualFold,omitempty"`
	BiddingInstructionsContainsFold *string  `json:"biddingInstructionsContainsFold,omitempty"`

	// "competitor_situations" field predicates.
	CompetitorSituations             *string  `json:"competitorSituations,omitempty"`
	CompetitorSituationsNEQ          *string  `json:"competitorSituationsNEQ,omitempty"`
	CompetitorSituationsIn           []string `json:"competitorSituationsIn,omitempty"`
	CompetitorSituationsNotIn        []string `json:"competitorSituationsNotIn,omitempty"`
	CompetitorSituationsGT           *string  `json:"competitorSituationsGT,omitempty"`
	CompetitorSituationsGTE          *string  `json:"competitorSituationsGTE,omitempty"`
	CompetitorSituationsLT           *string  `json:"competitorSituationsLT,omitempty"`
	CompetitorSituationsLTE          *string  `json:"competitorSituationsLTE,omitempty"`
	CompetitorSituationsContains     *string  `json:"competitorSituationsContains,omitempty"`
	CompetitorSituationsHasPrefix    *string  `json:"competitorSituationsHasPrefix,omitempty"`
	CompetitorSituationsHasSuffix    *string  `json:"competitorSituationsHasSuffix,omitempty"`
	CompetitorSituationsIsNil        bool     `json:"competitorSituationsIsNil,omitempty"`
	CompetitorSituationsNotNil       bool     `json:"competitorSituationsNotNil,omitempty"`
	CompetitorSituationsEqualFold    *string  `json:"competitorSituationsEqualFold,omitempty"`
	CompetitorSituationsContainsFold *string  `json:"competitorSituationsContainsFold,omitempty"`

	// "cost_engineer" field predicates.
	CostEngineer             *string  `json:"costEngineer,omitempty"`
	CostEngineerNEQ          *string  `json:"costEngineerNEQ,omitempty"`
	CostEngineerIn           []string `json:"costEngineerIn,omitempty"`
	CostEngineerNotIn        []string `json:"costEngineerNotIn,omitempty"`
	CostEngineerGT           *string  `json:"costEngineerGT,omitempty"`
	CostEngineerGTE          *string  `json:"costEngineerGTE,omitempty"`
	CostEngineerLT           *string  `json:"costEngineerLT,omitempty"`
	CostEngineerLTE          *string  `json:"costEngineerLTE,omitempty"`
	CostEngineerContains     *string  `json:"costEngineerContains,omitempty"`
	CostEngineerHasPrefix    *string  `json:"costEngineerHasPrefix,omitempty"`
	CostEngineerHasSuffix    *string  `json:"costEngineerHasSuffix,omitempty"`
	CostEngineerIsNil        bool     `json:"costEngineerIsNil,omitempty"`
	CostEngineerNotNil       bool     `json:"costEngineerNotNil,omitempty"`
	CostEngineerEqualFold    *string  `json:"costEngineerEqualFold,omitempty"`
	CostEngineerContainsFold *string  `json:"costEngineerContainsFold,omitempty"`

	// "tender_form" field predicates.
	TenderForm             *string  `json:"tenderForm,omitempty"`
	TenderFormNEQ          *string  `json:"tenderFormNEQ,omitempty"`
	TenderFormIn           []string `json:"tenderFormIn,omitempty"`
	TenderFormNotIn        []string `json:"tenderFormNotIn,omitempty"`
	TenderFormGT           *string  `json:"tenderFormGT,omitempty"`
	TenderFormGTE          *string  `json:"tenderFormGTE,omitempty"`
	TenderFormLT           *string  `json:"tenderFormLT,omitempty"`
	TenderFormLTE          *string  `json:"tenderFormLTE,omitempty"`
	TenderFormContains     *string  `json:"tenderFormContains,omitempty"`
	TenderFormHasPrefix    *string  `json:"tenderFormHasPrefix,omitempty"`
	TenderFormHasSuffix    *string  `json:"tenderFormHasSuffix,omitempty"`
	TenderFormIsNil        bool     `json:"tenderFormIsNil,omitempty"`
	TenderFormNotNil       bool     `json:"tenderFormNotNil,omitempty"`
	TenderFormEqualFold    *string  `json:"tenderFormEqualFold,omitempty"`
	TenderFormContainsFold *string  `json:"tenderFormContainsFold,omitempty"`

	// "contract_form" field predicates.
	ContractForm             *string  `json:"contractForm,omitempty"`
	ContractFormNEQ          *string  `json:"contractFormNEQ,omitempty"`
	ContractFormIn           []string `json:"contractFormIn,omitempty"`
	ContractFormNotIn        []string `json:"contractFormNotIn,omitempty"`
	ContractFormGT           *string  `json:"contractFormGT,omitempty"`
	ContractFormGTE          *string  `json:"contractFormGTE,omitempty"`
	ContractFormLT           *string  `json:"contractFormLT,omitempty"`
	ContractFormLTE          *string  `json:"contractFormLTE,omitempty"`
	ContractFormContains     *string  `json:"contractFormContains,omitempty"`
	ContractFormHasPrefix    *string  `json:"contractFormHasPrefix,omitempty"`
	ContractFormHasSuffix    *string  `json:"contractFormHasSuffix,omitempty"`
	ContractFormIsNil        bool     `json:"contractFormIsNil,omitempty"`
	ContractFormNotNil       bool     `json:"contractFormNotNil,omitempty"`
	ContractFormEqualFold    *string  `json:"contractFormEqualFold,omitempty"`
	ContractFormContainsFold *string  `json:"contractFormContainsFold,omitempty"`

	// "management_company" field predicates.
	ManagementCompany             *string  `json:"managementCompany,omitempty"`
	ManagementCompanyNEQ          *string  `json:"managementCompanyNEQ,omitempty"`
	ManagementCompanyIn           []string `json:"managementCompanyIn,omitempty"`
	ManagementCompanyNotIn        []string `json:"managementCompanyNotIn,omitempty"`
	ManagementCompanyGT           *string  `json:"managementCompanyGT,omitempty"`
	ManagementCompanyGTE          *string  `json:"managementCompanyGTE,omitempty"`
	ManagementCompanyLT           *string  `json:"managementCompanyLT,omitempty"`
	ManagementCompanyLTE          *string  `json:"managementCompanyLTE,omitempty"`
	ManagementCompanyContains     *string  `json:"managementCompanyContains,omitempty"`
	ManagementCompanyHasPrefix    *string  `json:"managementCompanyHasPrefix,omitempty"`
	ManagementCompanyHasSuffix    *string  `json:"managementCompanyHasSuffix,omitempty"`
	ManagementCompanyIsNil        bool     `json:"managementCompanyIsNil,omitempty"`
	ManagementCompanyNotNil       bool     `json:"managementCompanyNotNil,omitempty"`
	ManagementCompanyEqualFold    *string  `json:"managementCompanyEqualFold,omitempty"`
	ManagementCompanyContainsFold *string  `json:"managementCompanyContainsFold,omitempty"`

	// "tendering_agency" field predicates.
	TenderingAgency             *string  `json:"tenderingAgency,omitempty"`
	TenderingAgencyNEQ          *string  `json:"tenderingAgencyNEQ,omitempty"`
	TenderingAgencyIn           []string `json:"tenderingAgencyIn,omitempty"`
	TenderingAgencyNotIn        []string `json:"tenderingAgencyNotIn,omitempty"`
	TenderingAgencyGT           *string  `json:"tenderingAgencyGT,omitempty"`
	TenderingAgencyGTE          *string  `json:"tenderingAgencyGTE,omitempty"`
	TenderingAgencyLT           *string  `json:"tenderingAgencyLT,omitempty"`
	TenderingAgencyLTE          *string  `json:"tenderingAgencyLTE,omitempty"`
	TenderingAgencyContains     *string  `json:"tenderingAgencyContains,omitempty"`
	TenderingAgencyHasPrefix    *string  `json:"tenderingAgencyHasPrefix,omitempty"`
	TenderingAgencyHasSuffix    *string  `json:"tenderingAgencyHasSuffix,omitempty"`
	TenderingAgencyIsNil        bool     `json:"tenderingAgencyIsNil,omitempty"`
	TenderingAgencyNotNil       bool     `json:"tenderingAgencyNotNil,omitempty"`
	TenderingAgencyEqualFold    *string  `json:"tenderingAgencyEqualFold,omitempty"`
	TenderingAgencyContainsFold *string  `json:"tenderingAgencyContainsFold,omitempty"`

	// "bidding_date" field predicates.
	BiddingDate       *time.Time  `json:"biddingDate,omitempty"`
	BiddingDateNEQ    *time.Time  `json:"biddingDateNEQ,omitempty"`
	BiddingDateIn     []time.Time `json:"biddingDateIn,omitempty"`
	BiddingDateNotIn  []time.Time `json:"biddingDateNotIn,omitempty"`
	BiddingDateGT     *time.Time  `json:"biddingDateGT,omitempty"`
	BiddingDateGTE    *time.Time  `json:"biddingDateGTE,omitempty"`
	BiddingDateLT     *time.Time  `json:"biddingDateLT,omitempty"`
	BiddingDateLTE    *time.Time  `json:"biddingDateLTE,omitempty"`
	BiddingDateIsNil  bool        `json:"biddingDateIsNil,omitempty"`
	BiddingDateNotNil bool        `json:"biddingDateNotNil,omitempty"`

	// "facade_consultant" field predicates.
	FacadeConsultant             *string  `json:"facadeConsultant,omitempty"`
	FacadeConsultantNEQ          *string  `json:"facadeConsultantNEQ,omitempty"`
	FacadeConsultantIn           []string `json:"facadeConsultantIn,omitempty"`
	FacadeConsultantNotIn        []string `json:"facadeConsultantNotIn,omitempty"`
	FacadeConsultantGT           *string  `json:"facadeConsultantGT,omitempty"`
	FacadeConsultantGTE          *string  `json:"facadeConsultantGTE,omitempty"`
	FacadeConsultantLT           *string  `json:"facadeConsultantLT,omitempty"`
	FacadeConsultantLTE          *string  `json:"facadeConsultantLTE,omitempty"`
	FacadeConsultantContains     *string  `json:"facadeConsultantContains,omitempty"`
	FacadeConsultantHasPrefix    *string  `json:"facadeConsultantHasPrefix,omitempty"`
	FacadeConsultantHasSuffix    *string  `json:"facadeConsultantHasSuffix,omitempty"`
	FacadeConsultantIsNil        bool     `json:"facadeConsultantIsNil,omitempty"`
	FacadeConsultantNotNil       bool     `json:"facadeConsultantNotNil,omitempty"`
	FacadeConsultantEqualFold    *string  `json:"facadeConsultantEqualFold,omitempty"`
	FacadeConsultantContainsFold *string  `json:"facadeConsultantContainsFold,omitempty"`

	// "design_unit" field predicates.
	DesignUnit             *string  `json:"designUnit,omitempty"`
	DesignUnitNEQ          *string  `json:"designUnitNEQ,omitempty"`
	DesignUnitIn           []string `json:"designUnitIn,omitempty"`
	DesignUnitNotIn        []string `json:"designUnitNotIn,omitempty"`
	DesignUnitGT           *string  `json:"designUnitGT,omitempty"`
	DesignUnitGTE          *string  `json:"designUnitGTE,omitempty"`
	DesignUnitLT           *string  `json:"designUnitLT,omitempty"`
	DesignUnitLTE          *string  `json:"designUnitLTE,omitempty"`
	DesignUnitContains     *string  `json:"designUnitContains,omitempty"`
	DesignUnitHasPrefix    *string  `json:"designUnitHasPrefix,omitempty"`
	DesignUnitHasSuffix    *string  `json:"designUnitHasSuffix,omitempty"`
	DesignUnitIsNil        bool     `json:"designUnitIsNil,omitempty"`
	DesignUnitNotNil       bool     `json:"designUnitNotNil,omitempty"`
	DesignUnitEqualFold    *string  `json:"designUnitEqualFold,omitempty"`
	DesignUnitContainsFold *string  `json:"designUnitContainsFold,omitempty"`

	// "consulting_firm" field predicates.
	ConsultingFirm             *string  `json:"consultingFirm,omitempty"`
	ConsultingFirmNEQ          *string  `json:"consultingFirmNEQ,omitempty"`
	ConsultingFirmIn           []string `json:"consultingFirmIn,omitempty"`
	ConsultingFirmNotIn        []string `json:"consultingFirmNotIn,omitempty"`
	ConsultingFirmGT           *string  `json:"consultingFirmGT,omitempty"`
	ConsultingFirmGTE          *string  `json:"consultingFirmGTE,omitempty"`
	ConsultingFirmLT           *string  `json:"consultingFirmLT,omitempty"`
	ConsultingFirmLTE          *string  `json:"consultingFirmLTE,omitempty"`
	ConsultingFirmContains     *string  `json:"consultingFirmContains,omitempty"`
	ConsultingFirmHasPrefix    *string  `json:"consultingFirmHasPrefix,omitempty"`
	ConsultingFirmHasSuffix    *string  `json:"consultingFirmHasSuffix,omitempty"`
	ConsultingFirmIsNil        bool     `json:"consultingFirmIsNil,omitempty"`
	ConsultingFirmNotNil       bool     `json:"consultingFirmNotNil,omitempty"`
	ConsultingFirmEqualFold    *string  `json:"consultingFirmEqualFold,omitempty"`
	ConsultingFirmContainsFold *string  `json:"consultingFirmContainsFold,omitempty"`

	// "key_project" field predicates.
	KeyProject    *bool `json:"keyProject,omitempty"`
	KeyProjectNEQ *bool `json:"keyProjectNEQ,omitempty"`

	// "current_progress" field predicates.
	CurrentProgress             *string  `json:"currentProgress,omitempty"`
	CurrentProgressNEQ          *string  `json:"currentProgressNEQ,omitempty"`
	CurrentProgressIn           []string `json:"currentProgressIn,omitempty"`
	CurrentProgressNotIn        []string `json:"currentProgressNotIn,omitempty"`
	CurrentProgressGT           *string  `json:"currentProgressGT,omitempty"`
	CurrentProgressGTE          *string  `json:"currentProgressGTE,omitempty"`
	CurrentProgressLT           *string  `json:"currentProgressLT,omitempty"`
	CurrentProgressLTE          *string  `json:"currentProgressLTE,omitempty"`
	CurrentProgressContains     *string  `json:"currentProgressContains,omitempty"`
	CurrentProgressHasPrefix    *string  `json:"currentProgressHasPrefix,omitempty"`
	CurrentProgressHasSuffix    *string  `json:"currentProgressHasSuffix,omitempty"`
	CurrentProgressIsNil        bool     `json:"currentProgressIsNil,omitempty"`
	CurrentProgressNotNil       bool     `json:"currentProgressNotNil,omitempty"`
	CurrentProgressEqualFold    *string  `json:"currentProgressEqualFold,omitempty"`
	CurrentProgressContainsFold *string  `json:"currentProgressContainsFold,omitempty"`

	// "tender_win_company" field predicates.
	TenderWinCompany             *string  `json:"tenderWinCompany,omitempty"`
	TenderWinCompanyNEQ          *string  `json:"tenderWinCompanyNEQ,omitempty"`
	TenderWinCompanyIn           []string `json:"tenderWinCompanyIn,omitempty"`
	TenderWinCompanyNotIn        []string `json:"tenderWinCompanyNotIn,omitempty"`
	TenderWinCompanyGT           *string  `json:"tenderWinCompanyGT,omitempty"`
	TenderWinCompanyGTE          *string  `json:"tenderWinCompanyGTE,omitempty"`
	TenderWinCompanyLT           *string  `json:"tenderWinCompanyLT,omitempty"`
	TenderWinCompanyLTE          *string  `json:"tenderWinCompanyLTE,omitempty"`
	TenderWinCompanyContains     *string  `json:"tenderWinCompanyContains,omitempty"`
	TenderWinCompanyHasPrefix    *string  `json:"tenderWinCompanyHasPrefix,omitempty"`
	TenderWinCompanyHasSuffix    *string  `json:"tenderWinCompanyHasSuffix,omitempty"`
	TenderWinCompanyIsNil        bool     `json:"tenderWinCompanyIsNil,omitempty"`
	TenderWinCompanyNotNil       bool     `json:"tenderWinCompanyNotNil,omitempty"`
	TenderWinCompanyEqualFold    *string  `json:"tenderWinCompanyEqualFold,omitempty"`
	TenderWinCompanyContainsFold *string  `json:"tenderWinCompanyContainsFold,omitempty"`

	// "tender_code" field predicates.
	TenderCode             *string  `json:"tenderCode,omitempty"`
	TenderCodeNEQ          *string  `json:"tenderCodeNEQ,omitempty"`
	TenderCodeIn           []string `json:"tenderCodeIn,omitempty"`
	TenderCodeNotIn        []string `json:"tenderCodeNotIn,omitempty"`
	TenderCodeGT           *string  `json:"tenderCodeGT,omitempty"`
	TenderCodeGTE          *string  `json:"tenderCodeGTE,omitempty"`
	TenderCodeLT           *string  `json:"tenderCodeLT,omitempty"`
	TenderCodeLTE          *string  `json:"tenderCodeLTE,omitempty"`
	TenderCodeContains     *string  `json:"tenderCodeContains,omitempty"`
	TenderCodeHasPrefix    *string  `json:"tenderCodeHasPrefix,omitempty"`
	TenderCodeHasSuffix    *string  `json:"tenderCodeHasSuffix,omitempty"`
	TenderCodeIsNil        bool     `json:"tenderCodeIsNil,omitempty"`
	TenderCodeNotNil       bool     `json:"tenderCodeNotNil,omitempty"`
	TenderCodeEqualFold    *string  `json:"tenderCodeEqualFold,omitempty"`
	TenderCodeContainsFold *string  `json:"tenderCodeContainsFold,omitempty"`

	// "architect" field predicates.
	Architect             *string  `json:"architect,omitempty"`
	ArchitectNEQ          *string  `json:"architectNEQ,omitempty"`
	ArchitectIn           []string `json:"architectIn,omitempty"`
	ArchitectNotIn        []string `json:"architectNotIn,omitempty"`
	ArchitectGT           *string  `json:"architectGT,omitempty"`
	ArchitectGTE          *string  `json:"architectGTE,omitempty"`
	ArchitectLT           *string  `json:"architectLT,omitempty"`
	ArchitectLTE          *string  `json:"architectLTE,omitempty"`
	ArchitectContains     *string  `json:"architectContains,omitempty"`
	ArchitectHasPrefix    *string  `json:"architectHasPrefix,omitempty"`
	ArchitectHasSuffix    *string  `json:"architectHasSuffix,omitempty"`
	ArchitectIsNil        bool     `json:"architectIsNil,omitempty"`
	ArchitectNotNil       bool     `json:"architectNotNil,omitempty"`
	ArchitectEqualFold    *string  `json:"architectEqualFold,omitempty"`
	ArchitectContainsFold *string  `json:"architectContainsFold,omitempty"`

	// "developer" field predicates.
	Developer             *string  `json:"developer,omitempty"`
	DeveloperNEQ          *string  `json:"developerNEQ,omitempty"`
	DeveloperIn           []string `json:"developerIn,omitempty"`
	DeveloperNotIn        []string `json:"developerNotIn,omitempty"`
	DeveloperGT           *string  `json:"developerGT,omitempty"`
	DeveloperGTE          *string  `json:"developerGTE,omitempty"`
	DeveloperLT           *string  `json:"developerLT,omitempty"`
	DeveloperLTE          *string  `json:"developerLTE,omitempty"`
	DeveloperContains     *string  `json:"developerContains,omitempty"`
	DeveloperHasPrefix    *string  `json:"developerHasPrefix,omitempty"`
	DeveloperHasSuffix    *string  `json:"developerHasSuffix,omitempty"`
	DeveloperIsNil        bool     `json:"developerIsNil,omitempty"`
	DeveloperNotNil       bool     `json:"developerNotNil,omitempty"`
	DeveloperEqualFold    *string  `json:"developerEqualFold,omitempty"`
	DeveloperContainsFold *string  `json:"developerContainsFold,omitempty"`

	// "tender_closing_date" field predicates.
	TenderClosingDate       *time.Time  `json:"tenderClosingDate,omitempty"`
	TenderClosingDateNEQ    *time.Time  `json:"tenderClosingDateNEQ,omitempty"`
	TenderClosingDateIn     []time.Time `json:"tenderClosingDateIn,omitempty"`
	TenderClosingDateNotIn  []time.Time `json:"tenderClosingDateNotIn,omitempty"`
	TenderClosingDateGT     *time.Time  `json:"tenderClosingDateGT,omitempty"`
	TenderClosingDateGTE    *time.Time  `json:"tenderClosingDateGTE,omitempty"`
	TenderClosingDateLT     *time.Time  `json:"tenderClosingDateLT,omitempty"`
	TenderClosingDateLTE    *time.Time  `json:"tenderClosingDateLTE,omitempty"`
	TenderClosingDateIsNil  bool        `json:"tenderClosingDateIsNil,omitempty"`
	TenderClosingDateNotNil bool        `json:"tenderClosingDateNotNil,omitempty"`

	// "construction_area" field predicates.
	ConstructionArea             *string  `json:"constructionArea,omitempty"`
	ConstructionAreaNEQ          *string  `json:"constructionAreaNEQ,omitempty"`
	ConstructionAreaIn           []string `json:"constructionAreaIn,omitempty"`
	ConstructionAreaNotIn        []string `json:"constructionAreaNotIn,omitempty"`
	ConstructionAreaGT           *string  `json:"constructionAreaGT,omitempty"`
	ConstructionAreaGTE          *string  `json:"constructionAreaGTE,omitempty"`
	ConstructionAreaLT           *string  `json:"constructionAreaLT,omitempty"`
	ConstructionAreaLTE          *string  `json:"constructionAreaLTE,omitempty"`
	ConstructionAreaContains     *string  `json:"constructionAreaContains,omitempty"`
	ConstructionAreaHasPrefix    *string  `json:"constructionAreaHasPrefix,omitempty"`
	ConstructionAreaHasSuffix    *string  `json:"constructionAreaHasSuffix,omitempty"`
	ConstructionAreaIsNil        bool     `json:"constructionAreaIsNil,omitempty"`
	ConstructionAreaNotNil       bool     `json:"constructionAreaNotNil,omitempty"`
	ConstructionAreaEqualFold    *string  `json:"constructionAreaEqualFold,omitempty"`
	ConstructionAreaContainsFold *string  `json:"constructionAreaContainsFold,omitempty"`

	// "tender_win_date" field predicates.
	TenderWinDate       *time.Time  `json:"tenderWinDate,omitempty"`
	TenderWinDateNEQ    *time.Time  `json:"tenderWinDateNEQ,omitempty"`
	TenderWinDateIn     []time.Time `json:"tenderWinDateIn,omitempty"`
	TenderWinDateNotIn  []time.Time `json:"tenderWinDateNotIn,omitempty"`
	TenderWinDateGT     *time.Time  `json:"tenderWinDateGT,omitempty"`
	TenderWinDateGTE    *time.Time  `json:"tenderWinDateGTE,omitempty"`
	TenderWinDateLT     *time.Time  `json:"tenderWinDateLT,omitempty"`
	TenderWinDateLTE    *time.Time  `json:"tenderWinDateLTE,omitempty"`
	TenderWinDateIsNil  bool        `json:"tenderWinDateIsNil,omitempty"`
	TenderWinDateNotNil bool        `json:"tenderWinDateNotNil,omitempty"`

	// "tender_win_amount" field predicates.
	TenderWinAmount       *float64  `json:"tenderWinAmount,omitempty"`
	TenderWinAmountNEQ    *float64  `json:"tenderWinAmountNEQ,omitempty"`
	TenderWinAmountIn     []float64 `json:"tenderWinAmountIn,omitempty"`
	TenderWinAmountNotIn  []float64 `json:"tenderWinAmountNotIn,omitempty"`
	TenderWinAmountGT     *float64  `json:"tenderWinAmountGT,omitempty"`
	TenderWinAmountGTE    *float64  `json:"tenderWinAmountGTE,omitempty"`
	TenderWinAmountLT     *float64  `json:"tenderWinAmountLT,omitempty"`
	TenderWinAmountLTE    *float64  `json:"tenderWinAmountLTE,omitempty"`
	TenderWinAmountIsNil  bool      `json:"tenderWinAmountIsNil,omitempty"`
	TenderWinAmountNotNil bool      `json:"tenderWinAmountNotNil,omitempty"`

	// "last_tender_amount" field predicates.
	LastTenderAmount       *float64  `json:"lastTenderAmount,omitempty"`
	LastTenderAmountNEQ    *float64  `json:"lastTenderAmountNEQ,omitempty"`
	LastTenderAmountIn     []float64 `json:"lastTenderAmountIn,omitempty"`
	LastTenderAmountNotIn  []float64 `json:"lastTenderAmountNotIn,omitempty"`
	LastTenderAmountGT     *float64  `json:"lastTenderAmountGT,omitempty"`
	LastTenderAmountGTE    *float64  `json:"lastTenderAmountGTE,omitempty"`
	LastTenderAmountLT     *float64  `json:"lastTenderAmountLT,omitempty"`
	LastTenderAmountLTE    *float64  `json:"lastTenderAmountLTE,omitempty"`
	LastTenderAmountIsNil  bool      `json:"lastTenderAmountIsNil,omitempty"`
	LastTenderAmountNotNil bool      `json:"lastTenderAmountNotNil,omitempty"`

	// "area_id" field predicates.
	AreaID             *xid.ID  `json:"areaID,omitempty"`
	AreaIDNEQ          *xid.ID  `json:"areaIDNEQ,omitempty"`
	AreaIDIn           []xid.ID `json:"areaIDIn,omitempty"`
	AreaIDNotIn        []xid.ID `json:"areaIDNotIn,omitempty"`
	AreaIDGT           *xid.ID  `json:"areaIDGT,omitempty"`
	AreaIDGTE          *xid.ID  `json:"areaIDGTE,omitempty"`
	AreaIDLT           *xid.ID  `json:"areaIDLT,omitempty"`
	AreaIDLTE          *xid.ID  `json:"areaIDLTE,omitempty"`
	AreaIDContains     *xid.ID  `json:"areaIDContains,omitempty"`
	AreaIDHasPrefix    *xid.ID  `json:"areaIDHasPrefix,omitempty"`
	AreaIDHasSuffix    *xid.ID  `json:"areaIDHasSuffix,omitempty"`
	AreaIDEqualFold    *xid.ID  `json:"areaIDEqualFold,omitempty"`
	AreaIDContainsFold *xid.ID  `json:"areaIDContainsFold,omitempty"`

	// "province_id" field predicates.
	ProvinceID             *xid.ID  `json:"provinceID,omitempty"`
	ProvinceIDNEQ          *xid.ID  `json:"provinceIDNEQ,omitempty"`
	ProvinceIDIn           []xid.ID `json:"provinceIDIn,omitempty"`
	ProvinceIDNotIn        []xid.ID `json:"provinceIDNotIn,omitempty"`
	ProvinceIDGT           *xid.ID  `json:"provinceIDGT,omitempty"`
	ProvinceIDGTE          *xid.ID  `json:"provinceIDGTE,omitempty"`
	ProvinceIDLT           *xid.ID  `json:"provinceIDLT,omitempty"`
	ProvinceIDLTE          *xid.ID  `json:"provinceIDLTE,omitempty"`
	ProvinceIDContains     *xid.ID  `json:"provinceIDContains,omitempty"`
	ProvinceIDHasPrefix    *xid.ID  `json:"provinceIDHasPrefix,omitempty"`
	ProvinceIDHasSuffix    *xid.ID  `json:"provinceIDHasSuffix,omitempty"`
	ProvinceIDIsNil        bool     `json:"provinceIDIsNil,omitempty"`
	ProvinceIDNotNil       bool     `json:"provinceIDNotNil,omitempty"`
	ProvinceIDEqualFold    *xid.ID  `json:"provinceIDEqualFold,omitempty"`
	ProvinceIDContainsFold *xid.ID  `json:"provinceIDContainsFold,omitempty"`

	// "city_id" field predicates.
	CityID             *xid.ID  `json:"cityID,omitempty"`
	CityIDNEQ          *xid.ID  `json:"cityIDNEQ,omitempty"`
	CityIDIn           []xid.ID `json:"cityIDIn,omitempty"`
	CityIDNotIn        []xid.ID `json:"cityIDNotIn,omitempty"`
	CityIDGT           *xid.ID  `json:"cityIDGT,omitempty"`
	CityIDGTE          *xid.ID  `json:"cityIDGTE,omitempty"`
	CityIDLT           *xid.ID  `json:"cityIDLT,omitempty"`
	CityIDLTE          *xid.ID  `json:"cityIDLTE,omitempty"`
	CityIDContains     *xid.ID  `json:"cityIDContains,omitempty"`
	CityIDHasPrefix    *xid.ID  `json:"cityIDHasPrefix,omitempty"`
	CityIDHasSuffix    *xid.ID  `json:"cityIDHasSuffix,omitempty"`
	CityIDIsNil        bool     `json:"cityIDIsNil,omitempty"`
	CityIDNotNil       bool     `json:"cityIDNotNil,omitempty"`
	CityIDEqualFold    *xid.ID  `json:"cityIDEqualFold,omitempty"`
	CityIDContainsFold *xid.ID  `json:"cityIDContainsFold,omitempty"`

	// "district_id" field predicates.
	DistrictID             *xid.ID  `json:"districtID,omitempty"`
	DistrictIDNEQ          *xid.ID  `json:"districtIDNEQ,omitempty"`
	DistrictIDIn           []xid.ID `json:"districtIDIn,omitempty"`
	DistrictIDNotIn        []xid.ID `json:"districtIDNotIn,omitempty"`
	DistrictIDGT           *xid.ID  `json:"districtIDGT,omitempty"`
	DistrictIDGTE          *xid.ID  `json:"districtIDGTE,omitempty"`
	DistrictIDLT           *xid.ID  `json:"districtIDLT,omitempty"`
	DistrictIDLTE          *xid.ID  `json:"districtIDLTE,omitempty"`
	DistrictIDContains     *xid.ID  `json:"districtIDContains,omitempty"`
	DistrictIDHasPrefix    *xid.ID  `json:"districtIDHasPrefix,omitempty"`
	DistrictIDHasSuffix    *xid.ID  `json:"districtIDHasSuffix,omitempty"`
	DistrictIDIsNil        bool     `json:"districtIDIsNil,omitempty"`
	DistrictIDNotNil       bool     `json:"districtIDNotNil,omitempty"`
	DistrictIDEqualFold    *xid.ID  `json:"districtIDEqualFold,omitempty"`
	DistrictIDContainsFold *xid.ID  `json:"districtIDContainsFold,omitempty"`

	// "customer_id" field predicates.
	CustomerID             *xid.ID  `json:"customerID,omitempty"`
	CustomerIDNEQ          *xid.ID  `json:"customerIDNEQ,omitempty"`
	CustomerIDIn           []xid.ID `json:"customerIDIn,omitempty"`
	CustomerIDNotIn        []xid.ID `json:"customerIDNotIn,omitempty"`
	CustomerIDGT           *xid.ID  `json:"customerIDGT,omitempty"`
	CustomerIDGTE          *xid.ID  `json:"customerIDGTE,omitempty"`
	CustomerIDLT           *xid.ID  `json:"customerIDLT,omitempty"`
	CustomerIDLTE          *xid.ID  `json:"customerIDLTE,omitempty"`
	CustomerIDContains     *xid.ID  `json:"customerIDContains,omitempty"`
	CustomerIDHasPrefix    *xid.ID  `json:"customerIDHasPrefix,omitempty"`
	CustomerIDHasSuffix    *xid.ID  `json:"customerIDHasSuffix,omitempty"`
	CustomerIDIsNil        bool     `json:"customerIDIsNil,omitempty"`
	CustomerIDNotNil       bool     `json:"customerIDNotNil,omitempty"`
	CustomerIDEqualFold    *xid.ID  `json:"customerIDEqualFold,omitempty"`
	CustomerIDContainsFold *xid.ID  `json:"customerIDContainsFold,omitempty"`

	// "finder_id" field predicates.
	FinderID             *xid.ID  `json:"finderID,omitempty"`
	FinderIDNEQ          *xid.ID  `json:"finderIDNEQ,omitempty"`
	FinderIDIn           []xid.ID `json:"finderIDIn,omitempty"`
	FinderIDNotIn        []xid.ID `json:"finderIDNotIn,omitempty"`
	FinderIDGT           *xid.ID  `json:"finderIDGT,omitempty"`
	FinderIDGTE          *xid.ID  `json:"finderIDGTE,omitempty"`
	FinderIDLT           *xid.ID  `json:"finderIDLT,omitempty"`
	FinderIDLTE          *xid.ID  `json:"finderIDLTE,omitempty"`
	FinderIDContains     *xid.ID  `json:"finderIDContains,omitempty"`
	FinderIDHasPrefix    *xid.ID  `json:"finderIDHasPrefix,omitempty"`
	FinderIDHasSuffix    *xid.ID  `json:"finderIDHasSuffix,omitempty"`
	FinderIDIsNil        bool     `json:"finderIDIsNil,omitempty"`
	FinderIDNotNil       bool     `json:"finderIDNotNil,omitempty"`
	FinderIDEqualFold    *xid.ID  `json:"finderIDEqualFold,omitempty"`
	FinderIDContainsFold *xid.ID  `json:"finderIDContainsFold,omitempty"`

	// "created_by_id" field predicates.
	CreatedByID             *xid.ID  `json:"createdByID,omitempty"`
	CreatedByIDNEQ          *xid.ID  `json:"createdByIDNEQ,omitempty"`
	CreatedByIDIn           []xid.ID `json:"createdByIDIn,omitempty"`
	CreatedByIDNotIn        []xid.ID `json:"createdByIDNotIn,omitempty"`
	CreatedByIDGT           *xid.ID  `json:"createdByIDGT,omitempty"`
	CreatedByIDGTE          *xid.ID  `json:"createdByIDGTE,omitempty"`
	CreatedByIDLT           *xid.ID  `json:"createdByIDLT,omitempty"`
	CreatedByIDLTE          *xid.ID  `json:"createdByIDLTE,omitempty"`
	CreatedByIDContains     *xid.ID  `json:"createdByIDContains,omitempty"`
	CreatedByIDHasPrefix    *xid.ID  `json:"createdByIDHasPrefix,omitempty"`
	CreatedByIDHasSuffix    *xid.ID  `json:"createdByIDHasSuffix,omitempty"`
	CreatedByIDIsNil        bool     `json:"createdByIDIsNil,omitempty"`
	CreatedByIDNotNil       bool     `json:"createdByIDNotNil,omitempty"`
	CreatedByIDEqualFold    *xid.ID  `json:"createdByIDEqualFold,omitempty"`
	CreatedByIDContainsFold *xid.ID  `json:"createdByIDContainsFold,omitempty"`

	// "competitor_id" field predicates.
	CompetitorID             *xid.ID  `json:"competitorID,omitempty"`
	CompetitorIDNEQ          *xid.ID  `json:"competitorIDNEQ,omitempty"`
	CompetitorIDIn           []xid.ID `json:"competitorIDIn,omitempty"`
	CompetitorIDNotIn        []xid.ID `json:"competitorIDNotIn,omitempty"`
	CompetitorIDGT           *xid.ID  `json:"competitorIDGT,omitempty"`
	CompetitorIDGTE          *xid.ID  `json:"competitorIDGTE,omitempty"`
	CompetitorIDLT           *xid.ID  `json:"competitorIDLT,omitempty"`
	CompetitorIDLTE          *xid.ID  `json:"competitorIDLTE,omitempty"`
	CompetitorIDContains     *xid.ID  `json:"competitorIDContains,omitempty"`
	CompetitorIDHasPrefix    *xid.ID  `json:"competitorIDHasPrefix,omitempty"`
	CompetitorIDHasSuffix    *xid.ID  `json:"competitorIDHasSuffix,omitempty"`
	CompetitorIDIsNil        bool     `json:"competitorIDIsNil,omitempty"`
	CompetitorIDNotNil       bool     `json:"competitorIDNotNil,omitempty"`
	CompetitorIDEqualFold    *xid.ID  `json:"competitorIDEqualFold,omitempty"`
	CompetitorIDContainsFold *xid.ID  `json:"competitorIDContainsFold,omitempty"`

	// "approver_id" field predicates.
	ApproverID             *xid.ID  `json:"approverID,omitempty"`
	ApproverIDNEQ          *xid.ID  `json:"approverIDNEQ,omitempty"`
	ApproverIDIn           []xid.ID `json:"approverIDIn,omitempty"`
	ApproverIDNotIn        []xid.ID `json:"approverIDNotIn,omitempty"`
	ApproverIDGT           *xid.ID  `json:"approverIDGT,omitempty"`
	ApproverIDGTE          *xid.ID  `json:"approverIDGTE,omitempty"`
	ApproverIDLT           *xid.ID  `json:"approverIDLT,omitempty"`
	ApproverIDLTE          *xid.ID  `json:"approverIDLTE,omitempty"`
	ApproverIDContains     *xid.ID  `json:"approverIDContains,omitempty"`
	ApproverIDHasPrefix    *xid.ID  `json:"approverIDHasPrefix,omitempty"`
	ApproverIDHasSuffix    *xid.ID  `json:"approverIDHasSuffix,omitempty"`
	ApproverIDIsNil        bool     `json:"approverIDIsNil,omitempty"`
	ApproverIDNotNil       bool     `json:"approverIDNotNil,omitempty"`
	ApproverIDEqualFold    *xid.ID  `json:"approverIDEqualFold,omitempty"`
	ApproverIDContainsFold *xid.ID  `json:"approverIDContainsFold,omitempty"`

	// "area" edge predicates.
	HasArea     *bool             `json:"hasArea,omitempty"`
	HasAreaWith []*AreaWhereInput `json:"hasAreaWith,omitempty"`

	// "customer" edge predicates.
	HasCustomer     *bool                 `json:"hasCustomer,omitempty"`
	HasCustomerWith []*CustomerWhereInput `json:"hasCustomerWith,omitempty"`

	// "finder" edge predicates.
	HasFinder     *bool             `json:"hasFinder,omitempty"`
	HasFinderWith []*UserWhereInput `json:"hasFinderWith,omitempty"`

	// "created_by" edge predicates.
	HasCreatedBy     *bool             `json:"hasCreatedBy,omitempty"`
	HasCreatedByWith []*UserWhereInput `json:"hasCreatedByWith,omitempty"`

	// "following_sales" edge predicates.
	HasFollowingSales     *bool             `json:"hasFollowingSales,omitempty"`
	HasFollowingSalesWith []*UserWhereInput `json:"hasFollowingSalesWith,omitempty"`

	// "province" edge predicates.
	HasProvince     *bool                 `json:"hasProvince,omitempty"`
	HasProvinceWith []*ProvinceWhereInput `json:"hasProvinceWith,omitempty"`

	// "city" edge predicates.
	HasCity     *bool             `json:"hasCity,omitempty"`
	HasCityWith []*CityWhereInput `json:"hasCityWith,omitempty"`

	// "district" edge predicates.
	HasDistrict     *bool                 `json:"hasDistrict,omitempty"`
	HasDistrictWith []*DistrictWhereInput `json:"hasDistrictWith,omitempty"`

	// "visit_records" edge predicates.
	HasVisitRecords     *bool                    `json:"hasVisitRecords,omitempty"`
	HasVisitRecordsWith []*VisitRecordWhereInput `json:"hasVisitRecordsWith,omitempty"`

	// "competitor" edge predicates.
	HasCompetitor     *bool                   `json:"hasCompetitor,omitempty"`
	HasCompetitorWith []*CompetitorWhereInput `json:"hasCompetitorWith,omitempty"`

	// "approver" edge predicates.
	HasApprover     *bool             `json:"hasApprover,omitempty"`
	HasApproverWith []*UserWhereInput `json:"hasApproverWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TenderWhereInput) AddPredicates(predicates ...predicate.Tender) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TenderWhereInput filter on the TenderQuery builder.
func (i *TenderWhereInput) Filter(q *TenderQuery) (*TenderQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTenderWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTenderWhereInput is returned in case the TenderWhereInput is empty.
var ErrEmptyTenderWhereInput = errors.New("ent: empty predicate TenderWhereInput")

// P returns a predicate for filtering tenders.
// An error is returned if the input is empty or invalid.
func (i *TenderWhereInput) P() (predicate.Tender, error) {
	var predicates []predicate.Tender
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tender.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tender, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tender.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tender, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tender.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tender.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tender.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tender.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tender.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tender.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tender.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tender.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tender.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tender.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tender.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tender.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tender.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tender.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tender.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tender.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tender.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tender.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tender.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tender.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tender.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tender.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tender.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tender.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tender.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Code != nil {
		predicates = append(predicates, tender.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, tender.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, tender.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, tender.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, tender.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, tender.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, tender.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, tender.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, tender.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, tender.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, tender.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, tender.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, tender.CodeContainsFold(*i.CodeContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, tender.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, tender.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, tender.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, tender.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, tender.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, tender.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, tender.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, tender.StatusLTE(*i.StatusLTE))
	}
	if i.IsApproved != nil {
		predicates = append(predicates, tender.IsApprovedEQ(*i.IsApproved))
	}
	if i.IsApprovedNEQ != nil {
		predicates = append(predicates, tender.IsApprovedNEQ(*i.IsApprovedNEQ))
	}
	if i.Name != nil {
		predicates = append(predicates, tender.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tender.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tender.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tender.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tender.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tender.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tender.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tender.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tender.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tender.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tender.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tender.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tender.NameContainsFold(*i.NameContainsFold))
	}
	if i.EstimatedAmount != nil {
		predicates = append(predicates, tender.EstimatedAmountEQ(*i.EstimatedAmount))
	}
	if i.EstimatedAmountNEQ != nil {
		predicates = append(predicates, tender.EstimatedAmountNEQ(*i.EstimatedAmountNEQ))
	}
	if len(i.EstimatedAmountIn) > 0 {
		predicates = append(predicates, tender.EstimatedAmountIn(i.EstimatedAmountIn...))
	}
	if len(i.EstimatedAmountNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedAmountNotIn(i.EstimatedAmountNotIn...))
	}
	if i.EstimatedAmountGT != nil {
		predicates = append(predicates, tender.EstimatedAmountGT(*i.EstimatedAmountGT))
	}
	if i.EstimatedAmountGTE != nil {
		predicates = append(predicates, tender.EstimatedAmountGTE(*i.EstimatedAmountGTE))
	}
	if i.EstimatedAmountLT != nil {
		predicates = append(predicates, tender.EstimatedAmountLT(*i.EstimatedAmountLT))
	}
	if i.EstimatedAmountLTE != nil {
		predicates = append(predicates, tender.EstimatedAmountLTE(*i.EstimatedAmountLTE))
	}
	if i.EstimatedAmountIsNil {
		predicates = append(predicates, tender.EstimatedAmountIsNil())
	}
	if i.EstimatedAmountNotNil {
		predicates = append(predicates, tender.EstimatedAmountNotNil())
	}
	if i.TenderDate != nil {
		predicates = append(predicates, tender.TenderDateEQ(*i.TenderDate))
	}
	if i.TenderDateNEQ != nil {
		predicates = append(predicates, tender.TenderDateNEQ(*i.TenderDateNEQ))
	}
	if len(i.TenderDateIn) > 0 {
		predicates = append(predicates, tender.TenderDateIn(i.TenderDateIn...))
	}
	if len(i.TenderDateNotIn) > 0 {
		predicates = append(predicates, tender.TenderDateNotIn(i.TenderDateNotIn...))
	}
	if i.TenderDateGT != nil {
		predicates = append(predicates, tender.TenderDateGT(*i.TenderDateGT))
	}
	if i.TenderDateGTE != nil {
		predicates = append(predicates, tender.TenderDateGTE(*i.TenderDateGTE))
	}
	if i.TenderDateLT != nil {
		predicates = append(predicates, tender.TenderDateLT(*i.TenderDateLT))
	}
	if i.TenderDateLTE != nil {
		predicates = append(predicates, tender.TenderDateLTE(*i.TenderDateLTE))
	}
	if i.TenderDateIsNil {
		predicates = append(predicates, tender.TenderDateIsNil())
	}
	if i.TenderDateNotNil {
		predicates = append(predicates, tender.TenderDateNotNil())
	}
	if i.Classify != nil {
		predicates = append(predicates, tender.ClassifyEQ(*i.Classify))
	}
	if i.ClassifyNEQ != nil {
		predicates = append(predicates, tender.ClassifyNEQ(*i.ClassifyNEQ))
	}
	if len(i.ClassifyIn) > 0 {
		predicates = append(predicates, tender.ClassifyIn(i.ClassifyIn...))
	}
	if len(i.ClassifyNotIn) > 0 {
		predicates = append(predicates, tender.ClassifyNotIn(i.ClassifyNotIn...))
	}
	if i.ClassifyGT != nil {
		predicates = append(predicates, tender.ClassifyGT(*i.ClassifyGT))
	}
	if i.ClassifyGTE != nil {
		predicates = append(predicates, tender.ClassifyGTE(*i.ClassifyGTE))
	}
	if i.ClassifyLT != nil {
		predicates = append(predicates, tender.ClassifyLT(*i.ClassifyLT))
	}
	if i.ClassifyLTE != nil {
		predicates = append(predicates, tender.ClassifyLTE(*i.ClassifyLTE))
	}
	if i.ClassifyIsNil {
		predicates = append(predicates, tender.ClassifyIsNil())
	}
	if i.ClassifyNotNil {
		predicates = append(predicates, tender.ClassifyNotNil())
	}
	if i.DiscoveryDate != nil {
		predicates = append(predicates, tender.DiscoveryDateEQ(*i.DiscoveryDate))
	}
	if i.DiscoveryDateNEQ != nil {
		predicates = append(predicates, tender.DiscoveryDateNEQ(*i.DiscoveryDateNEQ))
	}
	if len(i.DiscoveryDateIn) > 0 {
		predicates = append(predicates, tender.DiscoveryDateIn(i.DiscoveryDateIn...))
	}
	if len(i.DiscoveryDateNotIn) > 0 {
		predicates = append(predicates, tender.DiscoveryDateNotIn(i.DiscoveryDateNotIn...))
	}
	if i.DiscoveryDateGT != nil {
		predicates = append(predicates, tender.DiscoveryDateGT(*i.DiscoveryDateGT))
	}
	if i.DiscoveryDateGTE != nil {
		predicates = append(predicates, tender.DiscoveryDateGTE(*i.DiscoveryDateGTE))
	}
	if i.DiscoveryDateLT != nil {
		predicates = append(predicates, tender.DiscoveryDateLT(*i.DiscoveryDateLT))
	}
	if i.DiscoveryDateLTE != nil {
		predicates = append(predicates, tender.DiscoveryDateLTE(*i.DiscoveryDateLTE))
	}
	if i.Address != nil {
		predicates = append(predicates, tender.AddressEQ(*i.Address))
	}
	if i.AddressNEQ != nil {
		predicates = append(predicates, tender.AddressNEQ(*i.AddressNEQ))
	}
	if len(i.AddressIn) > 0 {
		predicates = append(predicates, tender.AddressIn(i.AddressIn...))
	}
	if len(i.AddressNotIn) > 0 {
		predicates = append(predicates, tender.AddressNotIn(i.AddressNotIn...))
	}
	if i.AddressGT != nil {
		predicates = append(predicates, tender.AddressGT(*i.AddressGT))
	}
	if i.AddressGTE != nil {
		predicates = append(predicates, tender.AddressGTE(*i.AddressGTE))
	}
	if i.AddressLT != nil {
		predicates = append(predicates, tender.AddressLT(*i.AddressLT))
	}
	if i.AddressLTE != nil {
		predicates = append(predicates, tender.AddressLTE(*i.AddressLTE))
	}
	if i.AddressContains != nil {
		predicates = append(predicates, tender.AddressContains(*i.AddressContains))
	}
	if i.AddressHasPrefix != nil {
		predicates = append(predicates, tender.AddressHasPrefix(*i.AddressHasPrefix))
	}
	if i.AddressHasSuffix != nil {
		predicates = append(predicates, tender.AddressHasSuffix(*i.AddressHasSuffix))
	}
	if i.AddressIsNil {
		predicates = append(predicates, tender.AddressIsNil())
	}
	if i.AddressNotNil {
		predicates = append(predicates, tender.AddressNotNil())
	}
	if i.AddressEqualFold != nil {
		predicates = append(predicates, tender.AddressEqualFold(*i.AddressEqualFold))
	}
	if i.AddressContainsFold != nil {
		predicates = append(predicates, tender.AddressContainsFold(*i.AddressContainsFold))
	}
	if i.FullAddress != nil {
		predicates = append(predicates, tender.FullAddressEQ(*i.FullAddress))
	}
	if i.FullAddressNEQ != nil {
		predicates = append(predicates, tender.FullAddressNEQ(*i.FullAddressNEQ))
	}
	if len(i.FullAddressIn) > 0 {
		predicates = append(predicates, tender.FullAddressIn(i.FullAddressIn...))
	}
	if len(i.FullAddressNotIn) > 0 {
		predicates = append(predicates, tender.FullAddressNotIn(i.FullAddressNotIn...))
	}
	if i.FullAddressGT != nil {
		predicates = append(predicates, tender.FullAddressGT(*i.FullAddressGT))
	}
	if i.FullAddressGTE != nil {
		predicates = append(predicates, tender.FullAddressGTE(*i.FullAddressGTE))
	}
	if i.FullAddressLT != nil {
		predicates = append(predicates, tender.FullAddressLT(*i.FullAddressLT))
	}
	if i.FullAddressLTE != nil {
		predicates = append(predicates, tender.FullAddressLTE(*i.FullAddressLTE))
	}
	if i.FullAddressContains != nil {
		predicates = append(predicates, tender.FullAddressContains(*i.FullAddressContains))
	}
	if i.FullAddressHasPrefix != nil {
		predicates = append(predicates, tender.FullAddressHasPrefix(*i.FullAddressHasPrefix))
	}
	if i.FullAddressHasSuffix != nil {
		predicates = append(predicates, tender.FullAddressHasSuffix(*i.FullAddressHasSuffix))
	}
	if i.FullAddressIsNil {
		predicates = append(predicates, tender.FullAddressIsNil())
	}
	if i.FullAddressNotNil {
		predicates = append(predicates, tender.FullAddressNotNil())
	}
	if i.FullAddressEqualFold != nil {
		predicates = append(predicates, tender.FullAddressEqualFold(*i.FullAddressEqualFold))
	}
	if i.FullAddressContainsFold != nil {
		predicates = append(predicates, tender.FullAddressContainsFold(*i.FullAddressContainsFold))
	}
	if i.Contractor != nil {
		predicates = append(predicates, tender.ContractorEQ(*i.Contractor))
	}
	if i.ContractorNEQ != nil {
		predicates = append(predicates, tender.ContractorNEQ(*i.ContractorNEQ))
	}
	if len(i.ContractorIn) > 0 {
		predicates = append(predicates, tender.ContractorIn(i.ContractorIn...))
	}
	if len(i.ContractorNotIn) > 0 {
		predicates = append(predicates, tender.ContractorNotIn(i.ContractorNotIn...))
	}
	if i.ContractorGT != nil {
		predicates = append(predicates, tender.ContractorGT(*i.ContractorGT))
	}
	if i.ContractorGTE != nil {
		predicates = append(predicates, tender.ContractorGTE(*i.ContractorGTE))
	}
	if i.ContractorLT != nil {
		predicates = append(predicates, tender.ContractorLT(*i.ContractorLT))
	}
	if i.ContractorLTE != nil {
		predicates = append(predicates, tender.ContractorLTE(*i.ContractorLTE))
	}
	if i.ContractorContains != nil {
		predicates = append(predicates, tender.ContractorContains(*i.ContractorContains))
	}
	if i.ContractorHasPrefix != nil {
		predicates = append(predicates, tender.ContractorHasPrefix(*i.ContractorHasPrefix))
	}
	if i.ContractorHasSuffix != nil {
		predicates = append(predicates, tender.ContractorHasSuffix(*i.ContractorHasSuffix))
	}
	if i.ContractorIsNil {
		predicates = append(predicates, tender.ContractorIsNil())
	}
	if i.ContractorNotNil {
		predicates = append(predicates, tender.ContractorNotNil())
	}
	if i.ContractorEqualFold != nil {
		predicates = append(predicates, tender.ContractorEqualFold(*i.ContractorEqualFold))
	}
	if i.ContractorContainsFold != nil {
		predicates = append(predicates, tender.ContractorContainsFold(*i.ContractorContainsFold))
	}
	if i.LevelInvolved != nil {
		predicates = append(predicates, tender.LevelInvolvedEQ(*i.LevelInvolved))
	}
	if i.LevelInvolvedNEQ != nil {
		predicates = append(predicates, tender.LevelInvolvedNEQ(*i.LevelInvolvedNEQ))
	}
	if len(i.LevelInvolvedIn) > 0 {
		predicates = append(predicates, tender.LevelInvolvedIn(i.LevelInvolvedIn...))
	}
	if len(i.LevelInvolvedNotIn) > 0 {
		predicates = append(predicates, tender.LevelInvolvedNotIn(i.LevelInvolvedNotIn...))
	}
	if i.LevelInvolvedGT != nil {
		predicates = append(predicates, tender.LevelInvolvedGT(*i.LevelInvolvedGT))
	}
	if i.LevelInvolvedGTE != nil {
		predicates = append(predicates, tender.LevelInvolvedGTE(*i.LevelInvolvedGTE))
	}
	if i.LevelInvolvedLT != nil {
		predicates = append(predicates, tender.LevelInvolvedLT(*i.LevelInvolvedLT))
	}
	if i.LevelInvolvedLTE != nil {
		predicates = append(predicates, tender.LevelInvolvedLTE(*i.LevelInvolvedLTE))
	}
	if i.LevelInvolvedIsNil {
		predicates = append(predicates, tender.LevelInvolvedIsNil())
	}
	if i.LevelInvolvedNotNil {
		predicates = append(predicates, tender.LevelInvolvedNotNil())
	}
	if i.SizeAndValueRating != nil {
		predicates = append(predicates, tender.SizeAndValueRatingEQ(*i.SizeAndValueRating))
	}
	if i.SizeAndValueRatingNEQ != nil {
		predicates = append(predicates, tender.SizeAndValueRatingNEQ(*i.SizeAndValueRatingNEQ))
	}
	if len(i.SizeAndValueRatingIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingIn(i.SizeAndValueRatingIn...))
	}
	if len(i.SizeAndValueRatingNotIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingNotIn(i.SizeAndValueRatingNotIn...))
	}
	if i.SizeAndValueRatingGT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingGT(*i.SizeAndValueRatingGT))
	}
	if i.SizeAndValueRatingGTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingGTE(*i.SizeAndValueRatingGTE))
	}
	if i.SizeAndValueRatingLT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingLT(*i.SizeAndValueRatingLT))
	}
	if i.SizeAndValueRatingLTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingLTE(*i.SizeAndValueRatingLTE))
	}
	if i.SizeAndValueRatingIsNil {
		predicates = append(predicates, tender.SizeAndValueRatingIsNil())
	}
	if i.SizeAndValueRatingNotNil {
		predicates = append(predicates, tender.SizeAndValueRatingNotNil())
	}
	if i.SizeAndValueRatingOverview != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewEQ(*i.SizeAndValueRatingOverview))
	}
	if i.SizeAndValueRatingOverviewNEQ != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewNEQ(*i.SizeAndValueRatingOverviewNEQ))
	}
	if len(i.SizeAndValueRatingOverviewIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewIn(i.SizeAndValueRatingOverviewIn...))
	}
	if len(i.SizeAndValueRatingOverviewNotIn) > 0 {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewNotIn(i.SizeAndValueRatingOverviewNotIn...))
	}
	if i.SizeAndValueRatingOverviewGT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewGT(*i.SizeAndValueRatingOverviewGT))
	}
	if i.SizeAndValueRatingOverviewGTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewGTE(*i.SizeAndValueRatingOverviewGTE))
	}
	if i.SizeAndValueRatingOverviewLT != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewLT(*i.SizeAndValueRatingOverviewLT))
	}
	if i.SizeAndValueRatingOverviewLTE != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewLTE(*i.SizeAndValueRatingOverviewLTE))
	}
	if i.SizeAndValueRatingOverviewContains != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewContains(*i.SizeAndValueRatingOverviewContains))
	}
	if i.SizeAndValueRatingOverviewHasPrefix != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewHasPrefix(*i.SizeAndValueRatingOverviewHasPrefix))
	}
	if i.SizeAndValueRatingOverviewHasSuffix != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewHasSuffix(*i.SizeAndValueRatingOverviewHasSuffix))
	}
	if i.SizeAndValueRatingOverviewIsNil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewIsNil())
	}
	if i.SizeAndValueRatingOverviewNotNil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewNotNil())
	}
	if i.SizeAndValueRatingOverviewEqualFold != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewEqualFold(*i.SizeAndValueRatingOverviewEqualFold))
	}
	if i.SizeAndValueRatingOverviewContainsFold != nil {
		predicates = append(predicates, tender.SizeAndValueRatingOverviewContainsFold(*i.SizeAndValueRatingOverviewContainsFold))
	}
	if i.CreditAndPaymentRating != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingEQ(*i.CreditAndPaymentRating))
	}
	if i.CreditAndPaymentRatingNEQ != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingNEQ(*i.CreditAndPaymentRatingNEQ))
	}
	if len(i.CreditAndPaymentRatingIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingIn(i.CreditAndPaymentRatingIn...))
	}
	if len(i.CreditAndPaymentRatingNotIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingNotIn(i.CreditAndPaymentRatingNotIn...))
	}
	if i.CreditAndPaymentRatingGT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingGT(*i.CreditAndPaymentRatingGT))
	}
	if i.CreditAndPaymentRatingGTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingGTE(*i.CreditAndPaymentRatingGTE))
	}
	if i.CreditAndPaymentRatingLT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingLT(*i.CreditAndPaymentRatingLT))
	}
	if i.CreditAndPaymentRatingLTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingLTE(*i.CreditAndPaymentRatingLTE))
	}
	if i.CreditAndPaymentRatingIsNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingIsNil())
	}
	if i.CreditAndPaymentRatingNotNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingNotNil())
	}
	if i.CreditAndPaymentRatingOverview != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewEQ(*i.CreditAndPaymentRatingOverview))
	}
	if i.CreditAndPaymentRatingOverviewNEQ != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewNEQ(*i.CreditAndPaymentRatingOverviewNEQ))
	}
	if len(i.CreditAndPaymentRatingOverviewIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewIn(i.CreditAndPaymentRatingOverviewIn...))
	}
	if len(i.CreditAndPaymentRatingOverviewNotIn) > 0 {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewNotIn(i.CreditAndPaymentRatingOverviewNotIn...))
	}
	if i.CreditAndPaymentRatingOverviewGT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewGT(*i.CreditAndPaymentRatingOverviewGT))
	}
	if i.CreditAndPaymentRatingOverviewGTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewGTE(*i.CreditAndPaymentRatingOverviewGTE))
	}
	if i.CreditAndPaymentRatingOverviewLT != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewLT(*i.CreditAndPaymentRatingOverviewLT))
	}
	if i.CreditAndPaymentRatingOverviewLTE != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewLTE(*i.CreditAndPaymentRatingOverviewLTE))
	}
	if i.CreditAndPaymentRatingOverviewContains != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewContains(*i.CreditAndPaymentRatingOverviewContains))
	}
	if i.CreditAndPaymentRatingOverviewHasPrefix != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewHasPrefix(*i.CreditAndPaymentRatingOverviewHasPrefix))
	}
	if i.CreditAndPaymentRatingOverviewHasSuffix != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewHasSuffix(*i.CreditAndPaymentRatingOverviewHasSuffix))
	}
	if i.CreditAndPaymentRatingOverviewIsNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewIsNil())
	}
	if i.CreditAndPaymentRatingOverviewNotNil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewNotNil())
	}
	if i.CreditAndPaymentRatingOverviewEqualFold != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewEqualFold(*i.CreditAndPaymentRatingOverviewEqualFold))
	}
	if i.CreditAndPaymentRatingOverviewContainsFold != nil {
		predicates = append(predicates, tender.CreditAndPaymentRatingOverviewContainsFold(*i.CreditAndPaymentRatingOverviewContainsFold))
	}
	if i.TimeLimitRating != nil {
		predicates = append(predicates, tender.TimeLimitRatingEQ(*i.TimeLimitRating))
	}
	if i.TimeLimitRatingNEQ != nil {
		predicates = append(predicates, tender.TimeLimitRatingNEQ(*i.TimeLimitRatingNEQ))
	}
	if len(i.TimeLimitRatingIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingIn(i.TimeLimitRatingIn...))
	}
	if len(i.TimeLimitRatingNotIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingNotIn(i.TimeLimitRatingNotIn...))
	}
	if i.TimeLimitRatingGT != nil {
		predicates = append(predicates, tender.TimeLimitRatingGT(*i.TimeLimitRatingGT))
	}
	if i.TimeLimitRatingGTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingGTE(*i.TimeLimitRatingGTE))
	}
	if i.TimeLimitRatingLT != nil {
		predicates = append(predicates, tender.TimeLimitRatingLT(*i.TimeLimitRatingLT))
	}
	if i.TimeLimitRatingLTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingLTE(*i.TimeLimitRatingLTE))
	}
	if i.TimeLimitRatingIsNil {
		predicates = append(predicates, tender.TimeLimitRatingIsNil())
	}
	if i.TimeLimitRatingNotNil {
		predicates = append(predicates, tender.TimeLimitRatingNotNil())
	}
	if i.TimeLimitRatingOverview != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewEQ(*i.TimeLimitRatingOverview))
	}
	if i.TimeLimitRatingOverviewNEQ != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewNEQ(*i.TimeLimitRatingOverviewNEQ))
	}
	if len(i.TimeLimitRatingOverviewIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingOverviewIn(i.TimeLimitRatingOverviewIn...))
	}
	if len(i.TimeLimitRatingOverviewNotIn) > 0 {
		predicates = append(predicates, tender.TimeLimitRatingOverviewNotIn(i.TimeLimitRatingOverviewNotIn...))
	}
	if i.TimeLimitRatingOverviewGT != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewGT(*i.TimeLimitRatingOverviewGT))
	}
	if i.TimeLimitRatingOverviewGTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewGTE(*i.TimeLimitRatingOverviewGTE))
	}
	if i.TimeLimitRatingOverviewLT != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewLT(*i.TimeLimitRatingOverviewLT))
	}
	if i.TimeLimitRatingOverviewLTE != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewLTE(*i.TimeLimitRatingOverviewLTE))
	}
	if i.TimeLimitRatingOverviewContains != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewContains(*i.TimeLimitRatingOverviewContains))
	}
	if i.TimeLimitRatingOverviewHasPrefix != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewHasPrefix(*i.TimeLimitRatingOverviewHasPrefix))
	}
	if i.TimeLimitRatingOverviewHasSuffix != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewHasSuffix(*i.TimeLimitRatingOverviewHasSuffix))
	}
	if i.TimeLimitRatingOverviewIsNil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewIsNil())
	}
	if i.TimeLimitRatingOverviewNotNil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewNotNil())
	}
	if i.TimeLimitRatingOverviewEqualFold != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewEqualFold(*i.TimeLimitRatingOverviewEqualFold))
	}
	if i.TimeLimitRatingOverviewContainsFold != nil {
		predicates = append(predicates, tender.TimeLimitRatingOverviewContainsFold(*i.TimeLimitRatingOverviewContainsFold))
	}
	if i.CustomerRelationshipRating != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingEQ(*i.CustomerRelationshipRating))
	}
	if i.CustomerRelationshipRatingNEQ != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingNEQ(*i.CustomerRelationshipRatingNEQ))
	}
	if len(i.CustomerRelationshipRatingIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingIn(i.CustomerRelationshipRatingIn...))
	}
	if len(i.CustomerRelationshipRatingNotIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingNotIn(i.CustomerRelationshipRatingNotIn...))
	}
	if i.CustomerRelationshipRatingGT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingGT(*i.CustomerRelationshipRatingGT))
	}
	if i.CustomerRelationshipRatingGTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingGTE(*i.CustomerRelationshipRatingGTE))
	}
	if i.CustomerRelationshipRatingLT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingLT(*i.CustomerRelationshipRatingLT))
	}
	if i.CustomerRelationshipRatingLTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingLTE(*i.CustomerRelationshipRatingLTE))
	}
	if i.CustomerRelationshipRatingIsNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingIsNil())
	}
	if i.CustomerRelationshipRatingNotNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingNotNil())
	}
	if i.CustomerRelationshipRatingOverview != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewEQ(*i.CustomerRelationshipRatingOverview))
	}
	if i.CustomerRelationshipRatingOverviewNEQ != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewNEQ(*i.CustomerRelationshipRatingOverviewNEQ))
	}
	if len(i.CustomerRelationshipRatingOverviewIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewIn(i.CustomerRelationshipRatingOverviewIn...))
	}
	if len(i.CustomerRelationshipRatingOverviewNotIn) > 0 {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewNotIn(i.CustomerRelationshipRatingOverviewNotIn...))
	}
	if i.CustomerRelationshipRatingOverviewGT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewGT(*i.CustomerRelationshipRatingOverviewGT))
	}
	if i.CustomerRelationshipRatingOverviewGTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewGTE(*i.CustomerRelationshipRatingOverviewGTE))
	}
	if i.CustomerRelationshipRatingOverviewLT != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewLT(*i.CustomerRelationshipRatingOverviewLT))
	}
	if i.CustomerRelationshipRatingOverviewLTE != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewLTE(*i.CustomerRelationshipRatingOverviewLTE))
	}
	if i.CustomerRelationshipRatingOverviewContains != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewContains(*i.CustomerRelationshipRatingOverviewContains))
	}
	if i.CustomerRelationshipRatingOverviewHasPrefix != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewHasPrefix(*i.CustomerRelationshipRatingOverviewHasPrefix))
	}
	if i.CustomerRelationshipRatingOverviewHasSuffix != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewHasSuffix(*i.CustomerRelationshipRatingOverviewHasSuffix))
	}
	if i.CustomerRelationshipRatingOverviewIsNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewIsNil())
	}
	if i.CustomerRelationshipRatingOverviewNotNil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewNotNil())
	}
	if i.CustomerRelationshipRatingOverviewEqualFold != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewEqualFold(*i.CustomerRelationshipRatingOverviewEqualFold))
	}
	if i.CustomerRelationshipRatingOverviewContainsFold != nil {
		predicates = append(predicates, tender.CustomerRelationshipRatingOverviewContainsFold(*i.CustomerRelationshipRatingOverviewContainsFold))
	}
	if i.CompetitivePartnershipRating != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingEQ(*i.CompetitivePartnershipRating))
	}
	if i.CompetitivePartnershipRatingNEQ != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNEQ(*i.CompetitivePartnershipRatingNEQ))
	}
	if len(i.CompetitivePartnershipRatingIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingIn(i.CompetitivePartnershipRatingIn...))
	}
	if len(i.CompetitivePartnershipRatingNotIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNotIn(i.CompetitivePartnershipRatingNotIn...))
	}
	if i.CompetitivePartnershipRatingGT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingGT(*i.CompetitivePartnershipRatingGT))
	}
	if i.CompetitivePartnershipRatingGTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingGTE(*i.CompetitivePartnershipRatingGTE))
	}
	if i.CompetitivePartnershipRatingLT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingLT(*i.CompetitivePartnershipRatingLT))
	}
	if i.CompetitivePartnershipRatingLTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingLTE(*i.CompetitivePartnershipRatingLTE))
	}
	if i.CompetitivePartnershipRatingIsNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingIsNil())
	}
	if i.CompetitivePartnershipRatingNotNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingNotNil())
	}
	if i.CompetitivePartnershipRatingOverview != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewEQ(*i.CompetitivePartnershipRatingOverview))
	}
	if i.CompetitivePartnershipRatingOverviewNEQ != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewNEQ(*i.CompetitivePartnershipRatingOverviewNEQ))
	}
	if len(i.CompetitivePartnershipRatingOverviewIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewIn(i.CompetitivePartnershipRatingOverviewIn...))
	}
	if len(i.CompetitivePartnershipRatingOverviewNotIn) > 0 {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewNotIn(i.CompetitivePartnershipRatingOverviewNotIn...))
	}
	if i.CompetitivePartnershipRatingOverviewGT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewGT(*i.CompetitivePartnershipRatingOverviewGT))
	}
	if i.CompetitivePartnershipRatingOverviewGTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewGTE(*i.CompetitivePartnershipRatingOverviewGTE))
	}
	if i.CompetitivePartnershipRatingOverviewLT != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewLT(*i.CompetitivePartnershipRatingOverviewLT))
	}
	if i.CompetitivePartnershipRatingOverviewLTE != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewLTE(*i.CompetitivePartnershipRatingOverviewLTE))
	}
	if i.CompetitivePartnershipRatingOverviewContains != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewContains(*i.CompetitivePartnershipRatingOverviewContains))
	}
	if i.CompetitivePartnershipRatingOverviewHasPrefix != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewHasPrefix(*i.CompetitivePartnershipRatingOverviewHasPrefix))
	}
	if i.CompetitivePartnershipRatingOverviewHasSuffix != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewHasSuffix(*i.CompetitivePartnershipRatingOverviewHasSuffix))
	}
	if i.CompetitivePartnershipRatingOverviewIsNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewIsNil())
	}
	if i.CompetitivePartnershipRatingOverviewNotNil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewNotNil())
	}
	if i.CompetitivePartnershipRatingOverviewEqualFold != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewEqualFold(*i.CompetitivePartnershipRatingOverviewEqualFold))
	}
	if i.CompetitivePartnershipRatingOverviewContainsFold != nil {
		predicates = append(predicates, tender.CompetitivePartnershipRatingOverviewContainsFold(*i.CompetitivePartnershipRatingOverviewContainsFold))
	}
	if i.PrepareToBid != nil {
		predicates = append(predicates, tender.PrepareToBidEQ(*i.PrepareToBid))
	}
	if i.PrepareToBidNEQ != nil {
		predicates = append(predicates, tender.PrepareToBidNEQ(*i.PrepareToBidNEQ))
	}
	if i.ProjectCode != nil {
		predicates = append(predicates, tender.ProjectCodeEQ(*i.ProjectCode))
	}
	if i.ProjectCodeNEQ != nil {
		predicates = append(predicates, tender.ProjectCodeNEQ(*i.ProjectCodeNEQ))
	}
	if len(i.ProjectCodeIn) > 0 {
		predicates = append(predicates, tender.ProjectCodeIn(i.ProjectCodeIn...))
	}
	if len(i.ProjectCodeNotIn) > 0 {
		predicates = append(predicates, tender.ProjectCodeNotIn(i.ProjectCodeNotIn...))
	}
	if i.ProjectCodeGT != nil {
		predicates = append(predicates, tender.ProjectCodeGT(*i.ProjectCodeGT))
	}
	if i.ProjectCodeGTE != nil {
		predicates = append(predicates, tender.ProjectCodeGTE(*i.ProjectCodeGTE))
	}
	if i.ProjectCodeLT != nil {
		predicates = append(predicates, tender.ProjectCodeLT(*i.ProjectCodeLT))
	}
	if i.ProjectCodeLTE != nil {
		predicates = append(predicates, tender.ProjectCodeLTE(*i.ProjectCodeLTE))
	}
	if i.ProjectCodeContains != nil {
		predicates = append(predicates, tender.ProjectCodeContains(*i.ProjectCodeContains))
	}
	if i.ProjectCodeHasPrefix != nil {
		predicates = append(predicates, tender.ProjectCodeHasPrefix(*i.ProjectCodeHasPrefix))
	}
	if i.ProjectCodeHasSuffix != nil {
		predicates = append(predicates, tender.ProjectCodeHasSuffix(*i.ProjectCodeHasSuffix))
	}
	if i.ProjectCodeIsNil {
		predicates = append(predicates, tender.ProjectCodeIsNil())
	}
	if i.ProjectCodeNotNil {
		predicates = append(predicates, tender.ProjectCodeNotNil())
	}
	if i.ProjectCodeEqualFold != nil {
		predicates = append(predicates, tender.ProjectCodeEqualFold(*i.ProjectCodeEqualFold))
	}
	if i.ProjectCodeContainsFold != nil {
		predicates = append(predicates, tender.ProjectCodeContainsFold(*i.ProjectCodeContainsFold))
	}
	if i.ProjectType != nil {
		predicates = append(predicates, tender.ProjectTypeEQ(*i.ProjectType))
	}
	if i.ProjectTypeNEQ != nil {
		predicates = append(predicates, tender.ProjectTypeNEQ(*i.ProjectTypeNEQ))
	}
	if len(i.ProjectTypeIn) > 0 {
		predicates = append(predicates, tender.ProjectTypeIn(i.ProjectTypeIn...))
	}
	if len(i.ProjectTypeNotIn) > 0 {
		predicates = append(predicates, tender.ProjectTypeNotIn(i.ProjectTypeNotIn...))
	}
	if i.ProjectTypeGT != nil {
		predicates = append(predicates, tender.ProjectTypeGT(*i.ProjectTypeGT))
	}
	if i.ProjectTypeGTE != nil {
		predicates = append(predicates, tender.ProjectTypeGTE(*i.ProjectTypeGTE))
	}
	if i.ProjectTypeLT != nil {
		predicates = append(predicates, tender.ProjectTypeLT(*i.ProjectTypeLT))
	}
	if i.ProjectTypeLTE != nil {
		predicates = append(predicates, tender.ProjectTypeLTE(*i.ProjectTypeLTE))
	}
	if i.ProjectTypeContains != nil {
		predicates = append(predicates, tender.ProjectTypeContains(*i.ProjectTypeContains))
	}
	if i.ProjectTypeHasPrefix != nil {
		predicates = append(predicates, tender.ProjectTypeHasPrefix(*i.ProjectTypeHasPrefix))
	}
	if i.ProjectTypeHasSuffix != nil {
		predicates = append(predicates, tender.ProjectTypeHasSuffix(*i.ProjectTypeHasSuffix))
	}
	if i.ProjectTypeIsNil {
		predicates = append(predicates, tender.ProjectTypeIsNil())
	}
	if i.ProjectTypeNotNil {
		predicates = append(predicates, tender.ProjectTypeNotNil())
	}
	if i.ProjectTypeEqualFold != nil {
		predicates = append(predicates, tender.ProjectTypeEqualFold(*i.ProjectTypeEqualFold))
	}
	if i.ProjectTypeContainsFold != nil {
		predicates = append(predicates, tender.ProjectTypeContainsFold(*i.ProjectTypeContainsFold))
	}
	if i.ProjectDefinition != nil {
		predicates = append(predicates, tender.ProjectDefinitionEQ(*i.ProjectDefinition))
	}
	if i.ProjectDefinitionNEQ != nil {
		predicates = append(predicates, tender.ProjectDefinitionNEQ(*i.ProjectDefinitionNEQ))
	}
	if len(i.ProjectDefinitionIn) > 0 {
		predicates = append(predicates, tender.ProjectDefinitionIn(i.ProjectDefinitionIn...))
	}
	if len(i.ProjectDefinitionNotIn) > 0 {
		predicates = append(predicates, tender.ProjectDefinitionNotIn(i.ProjectDefinitionNotIn...))
	}
	if i.ProjectDefinitionGT != nil {
		predicates = append(predicates, tender.ProjectDefinitionGT(*i.ProjectDefinitionGT))
	}
	if i.ProjectDefinitionGTE != nil {
		predicates = append(predicates, tender.ProjectDefinitionGTE(*i.ProjectDefinitionGTE))
	}
	if i.ProjectDefinitionLT != nil {
		predicates = append(predicates, tender.ProjectDefinitionLT(*i.ProjectDefinitionLT))
	}
	if i.ProjectDefinitionLTE != nil {
		predicates = append(predicates, tender.ProjectDefinitionLTE(*i.ProjectDefinitionLTE))
	}
	if i.ProjectDefinitionContains != nil {
		predicates = append(predicates, tender.ProjectDefinitionContains(*i.ProjectDefinitionContains))
	}
	if i.ProjectDefinitionHasPrefix != nil {
		predicates = append(predicates, tender.ProjectDefinitionHasPrefix(*i.ProjectDefinitionHasPrefix))
	}
	if i.ProjectDefinitionHasSuffix != nil {
		predicates = append(predicates, tender.ProjectDefinitionHasSuffix(*i.ProjectDefinitionHasSuffix))
	}
	if i.ProjectDefinitionIsNil {
		predicates = append(predicates, tender.ProjectDefinitionIsNil())
	}
	if i.ProjectDefinitionNotNil {
		predicates = append(predicates, tender.ProjectDefinitionNotNil())
	}
	if i.ProjectDefinitionEqualFold != nil {
		predicates = append(predicates, tender.ProjectDefinitionEqualFold(*i.ProjectDefinitionEqualFold))
	}
	if i.ProjectDefinitionContainsFold != nil {
		predicates = append(predicates, tender.ProjectDefinitionContainsFold(*i.ProjectDefinitionContainsFold))
	}
	if i.EstimatedProjectStartDate != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateEQ(*i.EstimatedProjectStartDate))
	}
	if i.EstimatedProjectStartDateNEQ != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateNEQ(*i.EstimatedProjectStartDateNEQ))
	}
	if len(i.EstimatedProjectStartDateIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectStartDateIn(i.EstimatedProjectStartDateIn...))
	}
	if len(i.EstimatedProjectStartDateNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectStartDateNotIn(i.EstimatedProjectStartDateNotIn...))
	}
	if i.EstimatedProjectStartDateGT != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateGT(*i.EstimatedProjectStartDateGT))
	}
	if i.EstimatedProjectStartDateGTE != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateGTE(*i.EstimatedProjectStartDateGTE))
	}
	if i.EstimatedProjectStartDateLT != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateLT(*i.EstimatedProjectStartDateLT))
	}
	if i.EstimatedProjectStartDateLTE != nil {
		predicates = append(predicates, tender.EstimatedProjectStartDateLTE(*i.EstimatedProjectStartDateLTE))
	}
	if i.EstimatedProjectStartDateIsNil {
		predicates = append(predicates, tender.EstimatedProjectStartDateIsNil())
	}
	if i.EstimatedProjectStartDateNotNil {
		predicates = append(predicates, tender.EstimatedProjectStartDateNotNil())
	}
	if i.EstimatedProjectEndDate != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateEQ(*i.EstimatedProjectEndDate))
	}
	if i.EstimatedProjectEndDateNEQ != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateNEQ(*i.EstimatedProjectEndDateNEQ))
	}
	if len(i.EstimatedProjectEndDateIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectEndDateIn(i.EstimatedProjectEndDateIn...))
	}
	if len(i.EstimatedProjectEndDateNotIn) > 0 {
		predicates = append(predicates, tender.EstimatedProjectEndDateNotIn(i.EstimatedProjectEndDateNotIn...))
	}
	if i.EstimatedProjectEndDateGT != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateGT(*i.EstimatedProjectEndDateGT))
	}
	if i.EstimatedProjectEndDateGTE != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateGTE(*i.EstimatedProjectEndDateGTE))
	}
	if i.EstimatedProjectEndDateLT != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateLT(*i.EstimatedProjectEndDateLT))
	}
	if i.EstimatedProjectEndDateLTE != nil {
		predicates = append(predicates, tender.EstimatedProjectEndDateLTE(*i.EstimatedProjectEndDateLTE))
	}
	if i.EstimatedProjectEndDateIsNil {
		predicates = append(predicates, tender.EstimatedProjectEndDateIsNil())
	}
	if i.EstimatedProjectEndDateNotNil {
		predicates = append(predicates, tender.EstimatedProjectEndDateNotNil())
	}
	if i.Remark != nil {
		predicates = append(predicates, tender.RemarkEQ(*i.Remark))
	}
	if i.RemarkNEQ != nil {
		predicates = append(predicates, tender.RemarkNEQ(*i.RemarkNEQ))
	}
	if len(i.RemarkIn) > 0 {
		predicates = append(predicates, tender.RemarkIn(i.RemarkIn...))
	}
	if len(i.RemarkNotIn) > 0 {
		predicates = append(predicates, tender.RemarkNotIn(i.RemarkNotIn...))
	}
	if i.RemarkGT != nil {
		predicates = append(predicates, tender.RemarkGT(*i.RemarkGT))
	}
	if i.RemarkGTE != nil {
		predicates = append(predicates, tender.RemarkGTE(*i.RemarkGTE))
	}
	if i.RemarkLT != nil {
		predicates = append(predicates, tender.RemarkLT(*i.RemarkLT))
	}
	if i.RemarkLTE != nil {
		predicates = append(predicates, tender.RemarkLTE(*i.RemarkLTE))
	}
	if i.RemarkContains != nil {
		predicates = append(predicates, tender.RemarkContains(*i.RemarkContains))
	}
	if i.RemarkHasPrefix != nil {
		predicates = append(predicates, tender.RemarkHasPrefix(*i.RemarkHasPrefix))
	}
	if i.RemarkHasSuffix != nil {
		predicates = append(predicates, tender.RemarkHasSuffix(*i.RemarkHasSuffix))
	}
	if i.RemarkIsNil {
		predicates = append(predicates, tender.RemarkIsNil())
	}
	if i.RemarkNotNil {
		predicates = append(predicates, tender.RemarkNotNil())
	}
	if i.RemarkEqualFold != nil {
		predicates = append(predicates, tender.RemarkEqualFold(*i.RemarkEqualFold))
	}
	if i.RemarkContainsFold != nil {
		predicates = append(predicates, tender.RemarkContainsFold(*i.RemarkContainsFold))
	}
	if i.TenderSituations != nil {
		predicates = append(predicates, tender.TenderSituationsEQ(*i.TenderSituations))
	}
	if i.TenderSituationsNEQ != nil {
		predicates = append(predicates, tender.TenderSituationsNEQ(*i.TenderSituationsNEQ))
	}
	if len(i.TenderSituationsIn) > 0 {
		predicates = append(predicates, tender.TenderSituationsIn(i.TenderSituationsIn...))
	}
	if len(i.TenderSituationsNotIn) > 0 {
		predicates = append(predicates, tender.TenderSituationsNotIn(i.TenderSituationsNotIn...))
	}
	if i.TenderSituationsGT != nil {
		predicates = append(predicates, tender.TenderSituationsGT(*i.TenderSituationsGT))
	}
	if i.TenderSituationsGTE != nil {
		predicates = append(predicates, tender.TenderSituationsGTE(*i.TenderSituationsGTE))
	}
	if i.TenderSituationsLT != nil {
		predicates = append(predicates, tender.TenderSituationsLT(*i.TenderSituationsLT))
	}
	if i.TenderSituationsLTE != nil {
		predicates = append(predicates, tender.TenderSituationsLTE(*i.TenderSituationsLTE))
	}
	if i.TenderSituationsContains != nil {
		predicates = append(predicates, tender.TenderSituationsContains(*i.TenderSituationsContains))
	}
	if i.TenderSituationsHasPrefix != nil {
		predicates = append(predicates, tender.TenderSituationsHasPrefix(*i.TenderSituationsHasPrefix))
	}
	if i.TenderSituationsHasSuffix != nil {
		predicates = append(predicates, tender.TenderSituationsHasSuffix(*i.TenderSituationsHasSuffix))
	}
	if i.TenderSituationsIsNil {
		predicates = append(predicates, tender.TenderSituationsIsNil())
	}
	if i.TenderSituationsNotNil {
		predicates = append(predicates, tender.TenderSituationsNotNil())
	}
	if i.TenderSituationsEqualFold != nil {
		predicates = append(predicates, tender.TenderSituationsEqualFold(*i.TenderSituationsEqualFold))
	}
	if i.TenderSituationsContainsFold != nil {
		predicates = append(predicates, tender.TenderSituationsContainsFold(*i.TenderSituationsContainsFold))
	}
	if i.OwnerSituations != nil {
		predicates = append(predicates, tender.OwnerSituationsEQ(*i.OwnerSituations))
	}
	if i.OwnerSituationsNEQ != nil {
		predicates = append(predicates, tender.OwnerSituationsNEQ(*i.OwnerSituationsNEQ))
	}
	if len(i.OwnerSituationsIn) > 0 {
		predicates = append(predicates, tender.OwnerSituationsIn(i.OwnerSituationsIn...))
	}
	if len(i.OwnerSituationsNotIn) > 0 {
		predicates = append(predicates, tender.OwnerSituationsNotIn(i.OwnerSituationsNotIn...))
	}
	if i.OwnerSituationsGT != nil {
		predicates = append(predicates, tender.OwnerSituationsGT(*i.OwnerSituationsGT))
	}
	if i.OwnerSituationsGTE != nil {
		predicates = append(predicates, tender.OwnerSituationsGTE(*i.OwnerSituationsGTE))
	}
	if i.OwnerSituationsLT != nil {
		predicates = append(predicates, tender.OwnerSituationsLT(*i.OwnerSituationsLT))
	}
	if i.OwnerSituationsLTE != nil {
		predicates = append(predicates, tender.OwnerSituationsLTE(*i.OwnerSituationsLTE))
	}
	if i.OwnerSituationsContains != nil {
		predicates = append(predicates, tender.OwnerSituationsContains(*i.OwnerSituationsContains))
	}
	if i.OwnerSituationsHasPrefix != nil {
		predicates = append(predicates, tender.OwnerSituationsHasPrefix(*i.OwnerSituationsHasPrefix))
	}
	if i.OwnerSituationsHasSuffix != nil {
		predicates = append(predicates, tender.OwnerSituationsHasSuffix(*i.OwnerSituationsHasSuffix))
	}
	if i.OwnerSituationsIsNil {
		predicates = append(predicates, tender.OwnerSituationsIsNil())
	}
	if i.OwnerSituationsNotNil {
		predicates = append(predicates, tender.OwnerSituationsNotNil())
	}
	if i.OwnerSituationsEqualFold != nil {
		predicates = append(predicates, tender.OwnerSituationsEqualFold(*i.OwnerSituationsEqualFold))
	}
	if i.OwnerSituationsContainsFold != nil {
		predicates = append(predicates, tender.OwnerSituationsContainsFold(*i.OwnerSituationsContainsFold))
	}
	if i.BiddingInstructions != nil {
		predicates = append(predicates, tender.BiddingInstructionsEQ(*i.BiddingInstructions))
	}
	if i.BiddingInstructionsNEQ != nil {
		predicates = append(predicates, tender.BiddingInstructionsNEQ(*i.BiddingInstructionsNEQ))
	}
	if len(i.BiddingInstructionsIn) > 0 {
		predicates = append(predicates, tender.BiddingInstructionsIn(i.BiddingInstructionsIn...))
	}
	if len(i.BiddingInstructionsNotIn) > 0 {
		predicates = append(predicates, tender.BiddingInstructionsNotIn(i.BiddingInstructionsNotIn...))
	}
	if i.BiddingInstructionsGT != nil {
		predicates = append(predicates, tender.BiddingInstructionsGT(*i.BiddingInstructionsGT))
	}
	if i.BiddingInstructionsGTE != nil {
		predicates = append(predicates, tender.BiddingInstructionsGTE(*i.BiddingInstructionsGTE))
	}
	if i.BiddingInstructionsLT != nil {
		predicates = append(predicates, tender.BiddingInstructionsLT(*i.BiddingInstructionsLT))
	}
	if i.BiddingInstructionsLTE != nil {
		predicates = append(predicates, tender.BiddingInstructionsLTE(*i.BiddingInstructionsLTE))
	}
	if i.BiddingInstructionsContains != nil {
		predicates = append(predicates, tender.BiddingInstructionsContains(*i.BiddingInstructionsContains))
	}
	if i.BiddingInstructionsHasPrefix != nil {
		predicates = append(predicates, tender.BiddingInstructionsHasPrefix(*i.BiddingInstructionsHasPrefix))
	}
	if i.BiddingInstructionsHasSuffix != nil {
		predicates = append(predicates, tender.BiddingInstructionsHasSuffix(*i.BiddingInstructionsHasSuffix))
	}
	if i.BiddingInstructionsIsNil {
		predicates = append(predicates, tender.BiddingInstructionsIsNil())
	}
	if i.BiddingInstructionsNotNil {
		predicates = append(predicates, tender.BiddingInstructionsNotNil())
	}
	if i.BiddingInstructionsEqualFold != nil {
		predicates = append(predicates, tender.BiddingInstructionsEqualFold(*i.BiddingInstructionsEqualFold))
	}
	if i.BiddingInstructionsContainsFold != nil {
		predicates = append(predicates, tender.BiddingInstructionsContainsFold(*i.BiddingInstructionsContainsFold))
	}
	if i.CompetitorSituations != nil {
		predicates = append(predicates, tender.CompetitorSituationsEQ(*i.CompetitorSituations))
	}
	if i.CompetitorSituationsNEQ != nil {
		predicates = append(predicates, tender.CompetitorSituationsNEQ(*i.CompetitorSituationsNEQ))
	}
	if len(i.CompetitorSituationsIn) > 0 {
		predicates = append(predicates, tender.CompetitorSituationsIn(i.CompetitorSituationsIn...))
	}
	if len(i.CompetitorSituationsNotIn) > 0 {
		predicates = append(predicates, tender.CompetitorSituationsNotIn(i.CompetitorSituationsNotIn...))
	}
	if i.CompetitorSituationsGT != nil {
		predicates = append(predicates, tender.CompetitorSituationsGT(*i.CompetitorSituationsGT))
	}
	if i.CompetitorSituationsGTE != nil {
		predicates = append(predicates, tender.CompetitorSituationsGTE(*i.CompetitorSituationsGTE))
	}
	if i.CompetitorSituationsLT != nil {
		predicates = append(predicates, tender.CompetitorSituationsLT(*i.CompetitorSituationsLT))
	}
	if i.CompetitorSituationsLTE != nil {
		predicates = append(predicates, tender.CompetitorSituationsLTE(*i.CompetitorSituationsLTE))
	}
	if i.CompetitorSituationsContains != nil {
		predicates = append(predicates, tender.CompetitorSituationsContains(*i.CompetitorSituationsContains))
	}
	if i.CompetitorSituationsHasPrefix != nil {
		predicates = append(predicates, tender.CompetitorSituationsHasPrefix(*i.CompetitorSituationsHasPrefix))
	}
	if i.CompetitorSituationsHasSuffix != nil {
		predicates = append(predicates, tender.CompetitorSituationsHasSuffix(*i.CompetitorSituationsHasSuffix))
	}
	if i.CompetitorSituationsIsNil {
		predicates = append(predicates, tender.CompetitorSituationsIsNil())
	}
	if i.CompetitorSituationsNotNil {
		predicates = append(predicates, tender.CompetitorSituationsNotNil())
	}
	if i.CompetitorSituationsEqualFold != nil {
		predicates = append(predicates, tender.CompetitorSituationsEqualFold(*i.CompetitorSituationsEqualFold))
	}
	if i.CompetitorSituationsContainsFold != nil {
		predicates = append(predicates, tender.CompetitorSituationsContainsFold(*i.CompetitorSituationsContainsFold))
	}
	if i.CostEngineer != nil {
		predicates = append(predicates, tender.CostEngineerEQ(*i.CostEngineer))
	}
	if i.CostEngineerNEQ != nil {
		predicates = append(predicates, tender.CostEngineerNEQ(*i.CostEngineerNEQ))
	}
	if len(i.CostEngineerIn) > 0 {
		predicates = append(predicates, tender.CostEngineerIn(i.CostEngineerIn...))
	}
	if len(i.CostEngineerNotIn) > 0 {
		predicates = append(predicates, tender.CostEngineerNotIn(i.CostEngineerNotIn...))
	}
	if i.CostEngineerGT != nil {
		predicates = append(predicates, tender.CostEngineerGT(*i.CostEngineerGT))
	}
	if i.CostEngineerGTE != nil {
		predicates = append(predicates, tender.CostEngineerGTE(*i.CostEngineerGTE))
	}
	if i.CostEngineerLT != nil {
		predicates = append(predicates, tender.CostEngineerLT(*i.CostEngineerLT))
	}
	if i.CostEngineerLTE != nil {
		predicates = append(predicates, tender.CostEngineerLTE(*i.CostEngineerLTE))
	}
	if i.CostEngineerContains != nil {
		predicates = append(predicates, tender.CostEngineerContains(*i.CostEngineerContains))
	}
	if i.CostEngineerHasPrefix != nil {
		predicates = append(predicates, tender.CostEngineerHasPrefix(*i.CostEngineerHasPrefix))
	}
	if i.CostEngineerHasSuffix != nil {
		predicates = append(predicates, tender.CostEngineerHasSuffix(*i.CostEngineerHasSuffix))
	}
	if i.CostEngineerIsNil {
		predicates = append(predicates, tender.CostEngineerIsNil())
	}
	if i.CostEngineerNotNil {
		predicates = append(predicates, tender.CostEngineerNotNil())
	}
	if i.CostEngineerEqualFold != nil {
		predicates = append(predicates, tender.CostEngineerEqualFold(*i.CostEngineerEqualFold))
	}
	if i.CostEngineerContainsFold != nil {
		predicates = append(predicates, tender.CostEngineerContainsFold(*i.CostEngineerContainsFold))
	}
	if i.TenderForm != nil {
		predicates = append(predicates, tender.TenderFormEQ(*i.TenderForm))
	}
	if i.TenderFormNEQ != nil {
		predicates = append(predicates, tender.TenderFormNEQ(*i.TenderFormNEQ))
	}
	if len(i.TenderFormIn) > 0 {
		predicates = append(predicates, tender.TenderFormIn(i.TenderFormIn...))
	}
	if len(i.TenderFormNotIn) > 0 {
		predicates = append(predicates, tender.TenderFormNotIn(i.TenderFormNotIn...))
	}
	if i.TenderFormGT != nil {
		predicates = append(predicates, tender.TenderFormGT(*i.TenderFormGT))
	}
	if i.TenderFormGTE != nil {
		predicates = append(predicates, tender.TenderFormGTE(*i.TenderFormGTE))
	}
	if i.TenderFormLT != nil {
		predicates = append(predicates, tender.TenderFormLT(*i.TenderFormLT))
	}
	if i.TenderFormLTE != nil {
		predicates = append(predicates, tender.TenderFormLTE(*i.TenderFormLTE))
	}
	if i.TenderFormContains != nil {
		predicates = append(predicates, tender.TenderFormContains(*i.TenderFormContains))
	}
	if i.TenderFormHasPrefix != nil {
		predicates = append(predicates, tender.TenderFormHasPrefix(*i.TenderFormHasPrefix))
	}
	if i.TenderFormHasSuffix != nil {
		predicates = append(predicates, tender.TenderFormHasSuffix(*i.TenderFormHasSuffix))
	}
	if i.TenderFormIsNil {
		predicates = append(predicates, tender.TenderFormIsNil())
	}
	if i.TenderFormNotNil {
		predicates = append(predicates, tender.TenderFormNotNil())
	}
	if i.TenderFormEqualFold != nil {
		predicates = append(predicates, tender.TenderFormEqualFold(*i.TenderFormEqualFold))
	}
	if i.TenderFormContainsFold != nil {
		predicates = append(predicates, tender.TenderFormContainsFold(*i.TenderFormContainsFold))
	}
	if i.ContractForm != nil {
		predicates = append(predicates, tender.ContractFormEQ(*i.ContractForm))
	}
	if i.ContractFormNEQ != nil {
		predicates = append(predicates, tender.ContractFormNEQ(*i.ContractFormNEQ))
	}
	if len(i.ContractFormIn) > 0 {
		predicates = append(predicates, tender.ContractFormIn(i.ContractFormIn...))
	}
	if len(i.ContractFormNotIn) > 0 {
		predicates = append(predicates, tender.ContractFormNotIn(i.ContractFormNotIn...))
	}
	if i.ContractFormGT != nil {
		predicates = append(predicates, tender.ContractFormGT(*i.ContractFormGT))
	}
	if i.ContractFormGTE != nil {
		predicates = append(predicates, tender.ContractFormGTE(*i.ContractFormGTE))
	}
	if i.ContractFormLT != nil {
		predicates = append(predicates, tender.ContractFormLT(*i.ContractFormLT))
	}
	if i.ContractFormLTE != nil {
		predicates = append(predicates, tender.ContractFormLTE(*i.ContractFormLTE))
	}
	if i.ContractFormContains != nil {
		predicates = append(predicates, tender.ContractFormContains(*i.ContractFormContains))
	}
	if i.ContractFormHasPrefix != nil {
		predicates = append(predicates, tender.ContractFormHasPrefix(*i.ContractFormHasPrefix))
	}
	if i.ContractFormHasSuffix != nil {
		predicates = append(predicates, tender.ContractFormHasSuffix(*i.ContractFormHasSuffix))
	}
	if i.ContractFormIsNil {
		predicates = append(predicates, tender.ContractFormIsNil())
	}
	if i.ContractFormNotNil {
		predicates = append(predicates, tender.ContractFormNotNil())
	}
	if i.ContractFormEqualFold != nil {
		predicates = append(predicates, tender.ContractFormEqualFold(*i.ContractFormEqualFold))
	}
	if i.ContractFormContainsFold != nil {
		predicates = append(predicates, tender.ContractFormContainsFold(*i.ContractFormContainsFold))
	}
	if i.ManagementCompany != nil {
		predicates = append(predicates, tender.ManagementCompanyEQ(*i.ManagementCompany))
	}
	if i.ManagementCompanyNEQ != nil {
		predicates = append(predicates, tender.ManagementCompanyNEQ(*i.ManagementCompanyNEQ))
	}
	if len(i.ManagementCompanyIn) > 0 {
		predicates = append(predicates, tender.ManagementCompanyIn(i.ManagementCompanyIn...))
	}
	if len(i.ManagementCompanyNotIn) > 0 {
		predicates = append(predicates, tender.ManagementCompanyNotIn(i.ManagementCompanyNotIn...))
	}
	if i.ManagementCompanyGT != nil {
		predicates = append(predicates, tender.ManagementCompanyGT(*i.ManagementCompanyGT))
	}
	if i.ManagementCompanyGTE != nil {
		predicates = append(predicates, tender.ManagementCompanyGTE(*i.ManagementCompanyGTE))
	}
	if i.ManagementCompanyLT != nil {
		predicates = append(predicates, tender.ManagementCompanyLT(*i.ManagementCompanyLT))
	}
	if i.ManagementCompanyLTE != nil {
		predicates = append(predicates, tender.ManagementCompanyLTE(*i.ManagementCompanyLTE))
	}
	if i.ManagementCompanyContains != nil {
		predicates = append(predicates, tender.ManagementCompanyContains(*i.ManagementCompanyContains))
	}
	if i.ManagementCompanyHasPrefix != nil {
		predicates = append(predicates, tender.ManagementCompanyHasPrefix(*i.ManagementCompanyHasPrefix))
	}
	if i.ManagementCompanyHasSuffix != nil {
		predicates = append(predicates, tender.ManagementCompanyHasSuffix(*i.ManagementCompanyHasSuffix))
	}
	if i.ManagementCompanyIsNil {
		predicates = append(predicates, tender.ManagementCompanyIsNil())
	}
	if i.ManagementCompanyNotNil {
		predicates = append(predicates, tender.ManagementCompanyNotNil())
	}
	if i.ManagementCompanyEqualFold != nil {
		predicates = append(predicates, tender.ManagementCompanyEqualFold(*i.ManagementCompanyEqualFold))
	}
	if i.ManagementCompanyContainsFold != nil {
		predicates = append(predicates, tender.ManagementCompanyContainsFold(*i.ManagementCompanyContainsFold))
	}
	if i.TenderingAgency != nil {
		predicates = append(predicates, tender.TenderingAgencyEQ(*i.TenderingAgency))
	}
	if i.TenderingAgencyNEQ != nil {
		predicates = append(predicates, tender.TenderingAgencyNEQ(*i.TenderingAgencyNEQ))
	}
	if len(i.TenderingAgencyIn) > 0 {
		predicates = append(predicates, tender.TenderingAgencyIn(i.TenderingAgencyIn...))
	}
	if len(i.TenderingAgencyNotIn) > 0 {
		predicates = append(predicates, tender.TenderingAgencyNotIn(i.TenderingAgencyNotIn...))
	}
	if i.TenderingAgencyGT != nil {
		predicates = append(predicates, tender.TenderingAgencyGT(*i.TenderingAgencyGT))
	}
	if i.TenderingAgencyGTE != nil {
		predicates = append(predicates, tender.TenderingAgencyGTE(*i.TenderingAgencyGTE))
	}
	if i.TenderingAgencyLT != nil {
		predicates = append(predicates, tender.TenderingAgencyLT(*i.TenderingAgencyLT))
	}
	if i.TenderingAgencyLTE != nil {
		predicates = append(predicates, tender.TenderingAgencyLTE(*i.TenderingAgencyLTE))
	}
	if i.TenderingAgencyContains != nil {
		predicates = append(predicates, tender.TenderingAgencyContains(*i.TenderingAgencyContains))
	}
	if i.TenderingAgencyHasPrefix != nil {
		predicates = append(predicates, tender.TenderingAgencyHasPrefix(*i.TenderingAgencyHasPrefix))
	}
	if i.TenderingAgencyHasSuffix != nil {
		predicates = append(predicates, tender.TenderingAgencyHasSuffix(*i.TenderingAgencyHasSuffix))
	}
	if i.TenderingAgencyIsNil {
		predicates = append(predicates, tender.TenderingAgencyIsNil())
	}
	if i.TenderingAgencyNotNil {
		predicates = append(predicates, tender.TenderingAgencyNotNil())
	}
	if i.TenderingAgencyEqualFold != nil {
		predicates = append(predicates, tender.TenderingAgencyEqualFold(*i.TenderingAgencyEqualFold))
	}
	if i.TenderingAgencyContainsFold != nil {
		predicates = append(predicates, tender.TenderingAgencyContainsFold(*i.TenderingAgencyContainsFold))
	}
	if i.BiddingDate != nil {
		predicates = append(predicates, tender.BiddingDateEQ(*i.BiddingDate))
	}
	if i.BiddingDateNEQ != nil {
		predicates = append(predicates, tender.BiddingDateNEQ(*i.BiddingDateNEQ))
	}
	if len(i.BiddingDateIn) > 0 {
		predicates = append(predicates, tender.BiddingDateIn(i.BiddingDateIn...))
	}
	if len(i.BiddingDateNotIn) > 0 {
		predicates = append(predicates, tender.BiddingDateNotIn(i.BiddingDateNotIn...))
	}
	if i.BiddingDateGT != nil {
		predicates = append(predicates, tender.BiddingDateGT(*i.BiddingDateGT))
	}
	if i.BiddingDateGTE != nil {
		predicates = append(predicates, tender.BiddingDateGTE(*i.BiddingDateGTE))
	}
	if i.BiddingDateLT != nil {
		predicates = append(predicates, tender.BiddingDateLT(*i.BiddingDateLT))
	}
	if i.BiddingDateLTE != nil {
		predicates = append(predicates, tender.BiddingDateLTE(*i.BiddingDateLTE))
	}
	if i.BiddingDateIsNil {
		predicates = append(predicates, tender.BiddingDateIsNil())
	}
	if i.BiddingDateNotNil {
		predicates = append(predicates, tender.BiddingDateNotNil())
	}
	if i.FacadeConsultant != nil {
		predicates = append(predicates, tender.FacadeConsultantEQ(*i.FacadeConsultant))
	}
	if i.FacadeConsultantNEQ != nil {
		predicates = append(predicates, tender.FacadeConsultantNEQ(*i.FacadeConsultantNEQ))
	}
	if len(i.FacadeConsultantIn) > 0 {
		predicates = append(predicates, tender.FacadeConsultantIn(i.FacadeConsultantIn...))
	}
	if len(i.FacadeConsultantNotIn) > 0 {
		predicates = append(predicates, tender.FacadeConsultantNotIn(i.FacadeConsultantNotIn...))
	}
	if i.FacadeConsultantGT != nil {
		predicates = append(predicates, tender.FacadeConsultantGT(*i.FacadeConsultantGT))
	}
	if i.FacadeConsultantGTE != nil {
		predicates = append(predicates, tender.FacadeConsultantGTE(*i.FacadeConsultantGTE))
	}
	if i.FacadeConsultantLT != nil {
		predicates = append(predicates, tender.FacadeConsultantLT(*i.FacadeConsultantLT))
	}
	if i.FacadeConsultantLTE != nil {
		predicates = append(predicates, tender.FacadeConsultantLTE(*i.FacadeConsultantLTE))
	}
	if i.FacadeConsultantContains != nil {
		predicates = append(predicates, tender.FacadeConsultantContains(*i.FacadeConsultantContains))
	}
	if i.FacadeConsultantHasPrefix != nil {
		predicates = append(predicates, tender.FacadeConsultantHasPrefix(*i.FacadeConsultantHasPrefix))
	}
	if i.FacadeConsultantHasSuffix != nil {
		predicates = append(predicates, tender.FacadeConsultantHasSuffix(*i.FacadeConsultantHasSuffix))
	}
	if i.FacadeConsultantIsNil {
		predicates = append(predicates, tender.FacadeConsultantIsNil())
	}
	if i.FacadeConsultantNotNil {
		predicates = append(predicates, tender.FacadeConsultantNotNil())
	}
	if i.FacadeConsultantEqualFold != nil {
		predicates = append(predicates, tender.FacadeConsultantEqualFold(*i.FacadeConsultantEqualFold))
	}
	if i.FacadeConsultantContainsFold != nil {
		predicates = append(predicates, tender.FacadeConsultantContainsFold(*i.FacadeConsultantContainsFold))
	}
	if i.DesignUnit != nil {
		predicates = append(predicates, tender.DesignUnitEQ(*i.DesignUnit))
	}
	if i.DesignUnitNEQ != nil {
		predicates = append(predicates, tender.DesignUnitNEQ(*i.DesignUnitNEQ))
	}
	if len(i.DesignUnitIn) > 0 {
		predicates = append(predicates, tender.DesignUnitIn(i.DesignUnitIn...))
	}
	if len(i.DesignUnitNotIn) > 0 {
		predicates = append(predicates, tender.DesignUnitNotIn(i.DesignUnitNotIn...))
	}
	if i.DesignUnitGT != nil {
		predicates = append(predicates, tender.DesignUnitGT(*i.DesignUnitGT))
	}
	if i.DesignUnitGTE != nil {
		predicates = append(predicates, tender.DesignUnitGTE(*i.DesignUnitGTE))
	}
	if i.DesignUnitLT != nil {
		predicates = append(predicates, tender.DesignUnitLT(*i.DesignUnitLT))
	}
	if i.DesignUnitLTE != nil {
		predicates = append(predicates, tender.DesignUnitLTE(*i.DesignUnitLTE))
	}
	if i.DesignUnitContains != nil {
		predicates = append(predicates, tender.DesignUnitContains(*i.DesignUnitContains))
	}
	if i.DesignUnitHasPrefix != nil {
		predicates = append(predicates, tender.DesignUnitHasPrefix(*i.DesignUnitHasPrefix))
	}
	if i.DesignUnitHasSuffix != nil {
		predicates = append(predicates, tender.DesignUnitHasSuffix(*i.DesignUnitHasSuffix))
	}
	if i.DesignUnitIsNil {
		predicates = append(predicates, tender.DesignUnitIsNil())
	}
	if i.DesignUnitNotNil {
		predicates = append(predicates, tender.DesignUnitNotNil())
	}
	if i.DesignUnitEqualFold != nil {
		predicates = append(predicates, tender.DesignUnitEqualFold(*i.DesignUnitEqualFold))
	}
	if i.DesignUnitContainsFold != nil {
		predicates = append(predicates, tender.DesignUnitContainsFold(*i.DesignUnitContainsFold))
	}
	if i.ConsultingFirm != nil {
		predicates = append(predicates, tender.ConsultingFirmEQ(*i.ConsultingFirm))
	}
	if i.ConsultingFirmNEQ != nil {
		predicates = append(predicates, tender.ConsultingFirmNEQ(*i.ConsultingFirmNEQ))
	}
	if len(i.ConsultingFirmIn) > 0 {
		predicates = append(predicates, tender.ConsultingFirmIn(i.ConsultingFirmIn...))
	}
	if len(i.ConsultingFirmNotIn) > 0 {
		predicates = append(predicates, tender.ConsultingFirmNotIn(i.ConsultingFirmNotIn...))
	}
	if i.ConsultingFirmGT != nil {
		predicates = append(predicates, tender.ConsultingFirmGT(*i.ConsultingFirmGT))
	}
	if i.ConsultingFirmGTE != nil {
		predicates = append(predicates, tender.ConsultingFirmGTE(*i.ConsultingFirmGTE))
	}
	if i.ConsultingFirmLT != nil {
		predicates = append(predicates, tender.ConsultingFirmLT(*i.ConsultingFirmLT))
	}
	if i.ConsultingFirmLTE != nil {
		predicates = append(predicates, tender.ConsultingFirmLTE(*i.ConsultingFirmLTE))
	}
	if i.ConsultingFirmContains != nil {
		predicates = append(predicates, tender.ConsultingFirmContains(*i.ConsultingFirmContains))
	}
	if i.ConsultingFirmHasPrefix != nil {
		predicates = append(predicates, tender.ConsultingFirmHasPrefix(*i.ConsultingFirmHasPrefix))
	}
	if i.ConsultingFirmHasSuffix != nil {
		predicates = append(predicates, tender.ConsultingFirmHasSuffix(*i.ConsultingFirmHasSuffix))
	}
	if i.ConsultingFirmIsNil {
		predicates = append(predicates, tender.ConsultingFirmIsNil())
	}
	if i.ConsultingFirmNotNil {
		predicates = append(predicates, tender.ConsultingFirmNotNil())
	}
	if i.ConsultingFirmEqualFold != nil {
		predicates = append(predicates, tender.ConsultingFirmEqualFold(*i.ConsultingFirmEqualFold))
	}
	if i.ConsultingFirmContainsFold != nil {
		predicates = append(predicates, tender.ConsultingFirmContainsFold(*i.ConsultingFirmContainsFold))
	}
	if i.KeyProject != nil {
		predicates = append(predicates, tender.KeyProjectEQ(*i.KeyProject))
	}
	if i.KeyProjectNEQ != nil {
		predicates = append(predicates, tender.KeyProjectNEQ(*i.KeyProjectNEQ))
	}
	if i.CurrentProgress != nil {
		predicates = append(predicates, tender.CurrentProgressEQ(*i.CurrentProgress))
	}
	if i.CurrentProgressNEQ != nil {
		predicates = append(predicates, tender.CurrentProgressNEQ(*i.CurrentProgressNEQ))
	}
	if len(i.CurrentProgressIn) > 0 {
		predicates = append(predicates, tender.CurrentProgressIn(i.CurrentProgressIn...))
	}
	if len(i.CurrentProgressNotIn) > 0 {
		predicates = append(predicates, tender.CurrentProgressNotIn(i.CurrentProgressNotIn...))
	}
	if i.CurrentProgressGT != nil {
		predicates = append(predicates, tender.CurrentProgressGT(*i.CurrentProgressGT))
	}
	if i.CurrentProgressGTE != nil {
		predicates = append(predicates, tender.CurrentProgressGTE(*i.CurrentProgressGTE))
	}
	if i.CurrentProgressLT != nil {
		predicates = append(predicates, tender.CurrentProgressLT(*i.CurrentProgressLT))
	}
	if i.CurrentProgressLTE != nil {
		predicates = append(predicates, tender.CurrentProgressLTE(*i.CurrentProgressLTE))
	}
	if i.CurrentProgressContains != nil {
		predicates = append(predicates, tender.CurrentProgressContains(*i.CurrentProgressContains))
	}
	if i.CurrentProgressHasPrefix != nil {
		predicates = append(predicates, tender.CurrentProgressHasPrefix(*i.CurrentProgressHasPrefix))
	}
	if i.CurrentProgressHasSuffix != nil {
		predicates = append(predicates, tender.CurrentProgressHasSuffix(*i.CurrentProgressHasSuffix))
	}
	if i.CurrentProgressIsNil {
		predicates = append(predicates, tender.CurrentProgressIsNil())
	}
	if i.CurrentProgressNotNil {
		predicates = append(predicates, tender.CurrentProgressNotNil())
	}
	if i.CurrentProgressEqualFold != nil {
		predicates = append(predicates, tender.CurrentProgressEqualFold(*i.CurrentProgressEqualFold))
	}
	if i.CurrentProgressContainsFold != nil {
		predicates = append(predicates, tender.CurrentProgressContainsFold(*i.CurrentProgressContainsFold))
	}
	if i.TenderWinCompany != nil {
		predicates = append(predicates, tender.TenderWinCompanyEQ(*i.TenderWinCompany))
	}
	if i.TenderWinCompanyNEQ != nil {
		predicates = append(predicates, tender.TenderWinCompanyNEQ(*i.TenderWinCompanyNEQ))
	}
	if len(i.TenderWinCompanyIn) > 0 {
		predicates = append(predicates, tender.TenderWinCompanyIn(i.TenderWinCompanyIn...))
	}
	if len(i.TenderWinCompanyNotIn) > 0 {
		predicates = append(predicates, tender.TenderWinCompanyNotIn(i.TenderWinCompanyNotIn...))
	}
	if i.TenderWinCompanyGT != nil {
		predicates = append(predicates, tender.TenderWinCompanyGT(*i.TenderWinCompanyGT))
	}
	if i.TenderWinCompanyGTE != nil {
		predicates = append(predicates, tender.TenderWinCompanyGTE(*i.TenderWinCompanyGTE))
	}
	if i.TenderWinCompanyLT != nil {
		predicates = append(predicates, tender.TenderWinCompanyLT(*i.TenderWinCompanyLT))
	}
	if i.TenderWinCompanyLTE != nil {
		predicates = append(predicates, tender.TenderWinCompanyLTE(*i.TenderWinCompanyLTE))
	}
	if i.TenderWinCompanyContains != nil {
		predicates = append(predicates, tender.TenderWinCompanyContains(*i.TenderWinCompanyContains))
	}
	if i.TenderWinCompanyHasPrefix != nil {
		predicates = append(predicates, tender.TenderWinCompanyHasPrefix(*i.TenderWinCompanyHasPrefix))
	}
	if i.TenderWinCompanyHasSuffix != nil {
		predicates = append(predicates, tender.TenderWinCompanyHasSuffix(*i.TenderWinCompanyHasSuffix))
	}
	if i.TenderWinCompanyIsNil {
		predicates = append(predicates, tender.TenderWinCompanyIsNil())
	}
	if i.TenderWinCompanyNotNil {
		predicates = append(predicates, tender.TenderWinCompanyNotNil())
	}
	if i.TenderWinCompanyEqualFold != nil {
		predicates = append(predicates, tender.TenderWinCompanyEqualFold(*i.TenderWinCompanyEqualFold))
	}
	if i.TenderWinCompanyContainsFold != nil {
		predicates = append(predicates, tender.TenderWinCompanyContainsFold(*i.TenderWinCompanyContainsFold))
	}
	if i.TenderCode != nil {
		predicates = append(predicates, tender.TenderCodeEQ(*i.TenderCode))
	}
	if i.TenderCodeNEQ != nil {
		predicates = append(predicates, tender.TenderCodeNEQ(*i.TenderCodeNEQ))
	}
	if len(i.TenderCodeIn) > 0 {
		predicates = append(predicates, tender.TenderCodeIn(i.TenderCodeIn...))
	}
	if len(i.TenderCodeNotIn) > 0 {
		predicates = append(predicates, tender.TenderCodeNotIn(i.TenderCodeNotIn...))
	}
	if i.TenderCodeGT != nil {
		predicates = append(predicates, tender.TenderCodeGT(*i.TenderCodeGT))
	}
	if i.TenderCodeGTE != nil {
		predicates = append(predicates, tender.TenderCodeGTE(*i.TenderCodeGTE))
	}
	if i.TenderCodeLT != nil {
		predicates = append(predicates, tender.TenderCodeLT(*i.TenderCodeLT))
	}
	if i.TenderCodeLTE != nil {
		predicates = append(predicates, tender.TenderCodeLTE(*i.TenderCodeLTE))
	}
	if i.TenderCodeContains != nil {
		predicates = append(predicates, tender.TenderCodeContains(*i.TenderCodeContains))
	}
	if i.TenderCodeHasPrefix != nil {
		predicates = append(predicates, tender.TenderCodeHasPrefix(*i.TenderCodeHasPrefix))
	}
	if i.TenderCodeHasSuffix != nil {
		predicates = append(predicates, tender.TenderCodeHasSuffix(*i.TenderCodeHasSuffix))
	}
	if i.TenderCodeIsNil {
		predicates = append(predicates, tender.TenderCodeIsNil())
	}
	if i.TenderCodeNotNil {
		predicates = append(predicates, tender.TenderCodeNotNil())
	}
	if i.TenderCodeEqualFold != nil {
		predicates = append(predicates, tender.TenderCodeEqualFold(*i.TenderCodeEqualFold))
	}
	if i.TenderCodeContainsFold != nil {
		predicates = append(predicates, tender.TenderCodeContainsFold(*i.TenderCodeContainsFold))
	}
	if i.Architect != nil {
		predicates = append(predicates, tender.ArchitectEQ(*i.Architect))
	}
	if i.ArchitectNEQ != nil {
		predicates = append(predicates, tender.ArchitectNEQ(*i.ArchitectNEQ))
	}
	if len(i.ArchitectIn) > 0 {
		predicates = append(predicates, tender.ArchitectIn(i.ArchitectIn...))
	}
	if len(i.ArchitectNotIn) > 0 {
		predicates = append(predicates, tender.ArchitectNotIn(i.ArchitectNotIn...))
	}
	if i.ArchitectGT != nil {
		predicates = append(predicates, tender.ArchitectGT(*i.ArchitectGT))
	}
	if i.ArchitectGTE != nil {
		predicates = append(predicates, tender.ArchitectGTE(*i.ArchitectGTE))
	}
	if i.ArchitectLT != nil {
		predicates = append(predicates, tender.ArchitectLT(*i.ArchitectLT))
	}
	if i.ArchitectLTE != nil {
		predicates = append(predicates, tender.ArchitectLTE(*i.ArchitectLTE))
	}
	if i.ArchitectContains != nil {
		predicates = append(predicates, tender.ArchitectContains(*i.ArchitectContains))
	}
	if i.ArchitectHasPrefix != nil {
		predicates = append(predicates, tender.ArchitectHasPrefix(*i.ArchitectHasPrefix))
	}
	if i.ArchitectHasSuffix != nil {
		predicates = append(predicates, tender.ArchitectHasSuffix(*i.ArchitectHasSuffix))
	}
	if i.ArchitectIsNil {
		predicates = append(predicates, tender.ArchitectIsNil())
	}
	if i.ArchitectNotNil {
		predicates = append(predicates, tender.ArchitectNotNil())
	}
	if i.ArchitectEqualFold != nil {
		predicates = append(predicates, tender.ArchitectEqualFold(*i.ArchitectEqualFold))
	}
	if i.ArchitectContainsFold != nil {
		predicates = append(predicates, tender.ArchitectContainsFold(*i.ArchitectContainsFold))
	}
	if i.Developer != nil {
		predicates = append(predicates, tender.DeveloperEQ(*i.Developer))
	}
	if i.DeveloperNEQ != nil {
		predicates = append(predicates, tender.DeveloperNEQ(*i.DeveloperNEQ))
	}
	if len(i.DeveloperIn) > 0 {
		predicates = append(predicates, tender.DeveloperIn(i.DeveloperIn...))
	}
	if len(i.DeveloperNotIn) > 0 {
		predicates = append(predicates, tender.DeveloperNotIn(i.DeveloperNotIn...))
	}
	if i.DeveloperGT != nil {
		predicates = append(predicates, tender.DeveloperGT(*i.DeveloperGT))
	}
	if i.DeveloperGTE != nil {
		predicates = append(predicates, tender.DeveloperGTE(*i.DeveloperGTE))
	}
	if i.DeveloperLT != nil {
		predicates = append(predicates, tender.DeveloperLT(*i.DeveloperLT))
	}
	if i.DeveloperLTE != nil {
		predicates = append(predicates, tender.DeveloperLTE(*i.DeveloperLTE))
	}
	if i.DeveloperContains != nil {
		predicates = append(predicates, tender.DeveloperContains(*i.DeveloperContains))
	}
	if i.DeveloperHasPrefix != nil {
		predicates = append(predicates, tender.DeveloperHasPrefix(*i.DeveloperHasPrefix))
	}
	if i.DeveloperHasSuffix != nil {
		predicates = append(predicates, tender.DeveloperHasSuffix(*i.DeveloperHasSuffix))
	}
	if i.DeveloperIsNil {
		predicates = append(predicates, tender.DeveloperIsNil())
	}
	if i.DeveloperNotNil {
		predicates = append(predicates, tender.DeveloperNotNil())
	}
	if i.DeveloperEqualFold != nil {
		predicates = append(predicates, tender.DeveloperEqualFold(*i.DeveloperEqualFold))
	}
	if i.DeveloperContainsFold != nil {
		predicates = append(predicates, tender.DeveloperContainsFold(*i.DeveloperContainsFold))
	}
	if i.TenderClosingDate != nil {
		predicates = append(predicates, tender.TenderClosingDateEQ(*i.TenderClosingDate))
	}
	if i.TenderClosingDateNEQ != nil {
		predicates = append(predicates, tender.TenderClosingDateNEQ(*i.TenderClosingDateNEQ))
	}
	if len(i.TenderClosingDateIn) > 0 {
		predicates = append(predicates, tender.TenderClosingDateIn(i.TenderClosingDateIn...))
	}
	if len(i.TenderClosingDateNotIn) > 0 {
		predicates = append(predicates, tender.TenderClosingDateNotIn(i.TenderClosingDateNotIn...))
	}
	if i.TenderClosingDateGT != nil {
		predicates = append(predicates, tender.TenderClosingDateGT(*i.TenderClosingDateGT))
	}
	if i.TenderClosingDateGTE != nil {
		predicates = append(predicates, tender.TenderClosingDateGTE(*i.TenderClosingDateGTE))
	}
	if i.TenderClosingDateLT != nil {
		predicates = append(predicates, tender.TenderClosingDateLT(*i.TenderClosingDateLT))
	}
	if i.TenderClosingDateLTE != nil {
		predicates = append(predicates, tender.TenderClosingDateLTE(*i.TenderClosingDateLTE))
	}
	if i.TenderClosingDateIsNil {
		predicates = append(predicates, tender.TenderClosingDateIsNil())
	}
	if i.TenderClosingDateNotNil {
		predicates = append(predicates, tender.TenderClosingDateNotNil())
	}
	if i.ConstructionArea != nil {
		predicates = append(predicates, tender.ConstructionAreaEQ(*i.ConstructionArea))
	}
	if i.ConstructionAreaNEQ != nil {
		predicates = append(predicates, tender.ConstructionAreaNEQ(*i.ConstructionAreaNEQ))
	}
	if len(i.ConstructionAreaIn) > 0 {
		predicates = append(predicates, tender.ConstructionAreaIn(i.ConstructionAreaIn...))
	}
	if len(i.ConstructionAreaNotIn) > 0 {
		predicates = append(predicates, tender.ConstructionAreaNotIn(i.ConstructionAreaNotIn...))
	}
	if i.ConstructionAreaGT != nil {
		predicates = append(predicates, tender.ConstructionAreaGT(*i.ConstructionAreaGT))
	}
	if i.ConstructionAreaGTE != nil {
		predicates = append(predicates, tender.ConstructionAreaGTE(*i.ConstructionAreaGTE))
	}
	if i.ConstructionAreaLT != nil {
		predicates = append(predicates, tender.ConstructionAreaLT(*i.ConstructionAreaLT))
	}
	if i.ConstructionAreaLTE != nil {
		predicates = append(predicates, tender.ConstructionAreaLTE(*i.ConstructionAreaLTE))
	}
	if i.ConstructionAreaContains != nil {
		predicates = append(predicates, tender.ConstructionAreaContains(*i.ConstructionAreaContains))
	}
	if i.ConstructionAreaHasPrefix != nil {
		predicates = append(predicates, tender.ConstructionAreaHasPrefix(*i.ConstructionAreaHasPrefix))
	}
	if i.ConstructionAreaHasSuffix != nil {
		predicates = append(predicates, tender.ConstructionAreaHasSuffix(*i.ConstructionAreaHasSuffix))
	}
	if i.ConstructionAreaIsNil {
		predicates = append(predicates, tender.ConstructionAreaIsNil())
	}
	if i.ConstructionAreaNotNil {
		predicates = append(predicates, tender.ConstructionAreaNotNil())
	}
	if i.ConstructionAreaEqualFold != nil {
		predicates = append(predicates, tender.ConstructionAreaEqualFold(*i.ConstructionAreaEqualFold))
	}
	if i.ConstructionAreaContainsFold != nil {
		predicates = append(predicates, tender.ConstructionAreaContainsFold(*i.ConstructionAreaContainsFold))
	}
	if i.TenderWinDate != nil {
		predicates = append(predicates, tender.TenderWinDateEQ(*i.TenderWinDate))
	}
	if i.TenderWinDateNEQ != nil {
		predicates = append(predicates, tender.TenderWinDateNEQ(*i.TenderWinDateNEQ))
	}
	if len(i.TenderWinDateIn) > 0 {
		predicates = append(predicates, tender.TenderWinDateIn(i.TenderWinDateIn...))
	}
	if len(i.TenderWinDateNotIn) > 0 {
		predicates = append(predicates, tender.TenderWinDateNotIn(i.TenderWinDateNotIn...))
	}
	if i.TenderWinDateGT != nil {
		predicates = append(predicates, tender.TenderWinDateGT(*i.TenderWinDateGT))
	}
	if i.TenderWinDateGTE != nil {
		predicates = append(predicates, tender.TenderWinDateGTE(*i.TenderWinDateGTE))
	}
	if i.TenderWinDateLT != nil {
		predicates = append(predicates, tender.TenderWinDateLT(*i.TenderWinDateLT))
	}
	if i.TenderWinDateLTE != nil {
		predicates = append(predicates, tender.TenderWinDateLTE(*i.TenderWinDateLTE))
	}
	if i.TenderWinDateIsNil {
		predicates = append(predicates, tender.TenderWinDateIsNil())
	}
	if i.TenderWinDateNotNil {
		predicates = append(predicates, tender.TenderWinDateNotNil())
	}
	if i.TenderWinAmount != nil {
		predicates = append(predicates, tender.TenderWinAmountEQ(*i.TenderWinAmount))
	}
	if i.TenderWinAmountNEQ != nil {
		predicates = append(predicates, tender.TenderWinAmountNEQ(*i.TenderWinAmountNEQ))
	}
	if len(i.TenderWinAmountIn) > 0 {
		predicates = append(predicates, tender.TenderWinAmountIn(i.TenderWinAmountIn...))
	}
	if len(i.TenderWinAmountNotIn) > 0 {
		predicates = append(predicates, tender.TenderWinAmountNotIn(i.TenderWinAmountNotIn...))
	}
	if i.TenderWinAmountGT != nil {
		predicates = append(predicates, tender.TenderWinAmountGT(*i.TenderWinAmountGT))
	}
	if i.TenderWinAmountGTE != nil {
		predicates = append(predicates, tender.TenderWinAmountGTE(*i.TenderWinAmountGTE))
	}
	if i.TenderWinAmountLT != nil {
		predicates = append(predicates, tender.TenderWinAmountLT(*i.TenderWinAmountLT))
	}
	if i.TenderWinAmountLTE != nil {
		predicates = append(predicates, tender.TenderWinAmountLTE(*i.TenderWinAmountLTE))
	}
	if i.TenderWinAmountIsNil {
		predicates = append(predicates, tender.TenderWinAmountIsNil())
	}
	if i.TenderWinAmountNotNil {
		predicates = append(predicates, tender.TenderWinAmountNotNil())
	}
	if i.LastTenderAmount != nil {
		predicates = append(predicates, tender.LastTenderAmountEQ(*i.LastTenderAmount))
	}
	if i.LastTenderAmountNEQ != nil {
		predicates = append(predicates, tender.LastTenderAmountNEQ(*i.LastTenderAmountNEQ))
	}
	if len(i.LastTenderAmountIn) > 0 {
		predicates = append(predicates, tender.LastTenderAmountIn(i.LastTenderAmountIn...))
	}
	if len(i.LastTenderAmountNotIn) > 0 {
		predicates = append(predicates, tender.LastTenderAmountNotIn(i.LastTenderAmountNotIn...))
	}
	if i.LastTenderAmountGT != nil {
		predicates = append(predicates, tender.LastTenderAmountGT(*i.LastTenderAmountGT))
	}
	if i.LastTenderAmountGTE != nil {
		predicates = append(predicates, tender.LastTenderAmountGTE(*i.LastTenderAmountGTE))
	}
	if i.LastTenderAmountLT != nil {
		predicates = append(predicates, tender.LastTenderAmountLT(*i.LastTenderAmountLT))
	}
	if i.LastTenderAmountLTE != nil {
		predicates = append(predicates, tender.LastTenderAmountLTE(*i.LastTenderAmountLTE))
	}
	if i.LastTenderAmountIsNil {
		predicates = append(predicates, tender.LastTenderAmountIsNil())
	}
	if i.LastTenderAmountNotNil {
		predicates = append(predicates, tender.LastTenderAmountNotNil())
	}
	if i.AreaID != nil {
		predicates = append(predicates, tender.AreaIDEQ(*i.AreaID))
	}
	if i.AreaIDNEQ != nil {
		predicates = append(predicates, tender.AreaIDNEQ(*i.AreaIDNEQ))
	}
	if len(i.AreaIDIn) > 0 {
		predicates = append(predicates, tender.AreaIDIn(i.AreaIDIn...))
	}
	if len(i.AreaIDNotIn) > 0 {
		predicates = append(predicates, tender.AreaIDNotIn(i.AreaIDNotIn...))
	}
	if i.AreaIDGT != nil {
		predicates = append(predicates, tender.AreaIDGT(*i.AreaIDGT))
	}
	if i.AreaIDGTE != nil {
		predicates = append(predicates, tender.AreaIDGTE(*i.AreaIDGTE))
	}
	if i.AreaIDLT != nil {
		predicates = append(predicates, tender.AreaIDLT(*i.AreaIDLT))
	}
	if i.AreaIDLTE != nil {
		predicates = append(predicates, tender.AreaIDLTE(*i.AreaIDLTE))
	}
	if i.AreaIDContains != nil {
		predicates = append(predicates, tender.AreaIDContains(*i.AreaIDContains))
	}
	if i.AreaIDHasPrefix != nil {
		predicates = append(predicates, tender.AreaIDHasPrefix(*i.AreaIDHasPrefix))
	}
	if i.AreaIDHasSuffix != nil {
		predicates = append(predicates, tender.AreaIDHasSuffix(*i.AreaIDHasSuffix))
	}
	if i.AreaIDEqualFold != nil {
		predicates = append(predicates, tender.AreaIDEqualFold(*i.AreaIDEqualFold))
	}
	if i.AreaIDContainsFold != nil {
		predicates = append(predicates, tender.AreaIDContainsFold(*i.AreaIDContainsFold))
	}
	if i.ProvinceID != nil {
		predicates = append(predicates, tender.ProvinceIDEQ(*i.ProvinceID))
	}
	if i.ProvinceIDNEQ != nil {
		predicates = append(predicates, tender.ProvinceIDNEQ(*i.ProvinceIDNEQ))
	}
	if len(i.ProvinceIDIn) > 0 {
		predicates = append(predicates, tender.ProvinceIDIn(i.ProvinceIDIn...))
	}
	if len(i.ProvinceIDNotIn) > 0 {
		predicates = append(predicates, tender.ProvinceIDNotIn(i.ProvinceIDNotIn...))
	}
	if i.ProvinceIDGT != nil {
		predicates = append(predicates, tender.ProvinceIDGT(*i.ProvinceIDGT))
	}
	if i.ProvinceIDGTE != nil {
		predicates = append(predicates, tender.ProvinceIDGTE(*i.ProvinceIDGTE))
	}
	if i.ProvinceIDLT != nil {
		predicates = append(predicates, tender.ProvinceIDLT(*i.ProvinceIDLT))
	}
	if i.ProvinceIDLTE != nil {
		predicates = append(predicates, tender.ProvinceIDLTE(*i.ProvinceIDLTE))
	}
	if i.ProvinceIDContains != nil {
		predicates = append(predicates, tender.ProvinceIDContains(*i.ProvinceIDContains))
	}
	if i.ProvinceIDHasPrefix != nil {
		predicates = append(predicates, tender.ProvinceIDHasPrefix(*i.ProvinceIDHasPrefix))
	}
	if i.ProvinceIDHasSuffix != nil {
		predicates = append(predicates, tender.ProvinceIDHasSuffix(*i.ProvinceIDHasSuffix))
	}
	if i.ProvinceIDIsNil {
		predicates = append(predicates, tender.ProvinceIDIsNil())
	}
	if i.ProvinceIDNotNil {
		predicates = append(predicates, tender.ProvinceIDNotNil())
	}
	if i.ProvinceIDEqualFold != nil {
		predicates = append(predicates, tender.ProvinceIDEqualFold(*i.ProvinceIDEqualFold))
	}
	if i.ProvinceIDContainsFold != nil {
		predicates = append(predicates, tender.ProvinceIDContainsFold(*i.ProvinceIDContainsFold))
	}
	if i.CityID != nil {
		predicates = append(predicates, tender.CityIDEQ(*i.CityID))
	}
	if i.CityIDNEQ != nil {
		predicates = append(predicates, tender.CityIDNEQ(*i.CityIDNEQ))
	}
	if len(i.CityIDIn) > 0 {
		predicates = append(predicates, tender.CityIDIn(i.CityIDIn...))
	}
	if len(i.CityIDNotIn) > 0 {
		predicates = append(predicates, tender.CityIDNotIn(i.CityIDNotIn...))
	}
	if i.CityIDGT != nil {
		predicates = append(predicates, tender.CityIDGT(*i.CityIDGT))
	}
	if i.CityIDGTE != nil {
		predicates = append(predicates, tender.CityIDGTE(*i.CityIDGTE))
	}
	if i.CityIDLT != nil {
		predicates = append(predicates, tender.CityIDLT(*i.CityIDLT))
	}
	if i.CityIDLTE != nil {
		predicates = append(predicates, tender.CityIDLTE(*i.CityIDLTE))
	}
	if i.CityIDContains != nil {
		predicates = append(predicates, tender.CityIDContains(*i.CityIDContains))
	}
	if i.CityIDHasPrefix != nil {
		predicates = append(predicates, tender.CityIDHasPrefix(*i.CityIDHasPrefix))
	}
	if i.CityIDHasSuffix != nil {
		predicates = append(predicates, tender.CityIDHasSuffix(*i.CityIDHasSuffix))
	}
	if i.CityIDIsNil {
		predicates = append(predicates, tender.CityIDIsNil())
	}
	if i.CityIDNotNil {
		predicates = append(predicates, tender.CityIDNotNil())
	}
	if i.CityIDEqualFold != nil {
		predicates = append(predicates, tender.CityIDEqualFold(*i.CityIDEqualFold))
	}
	if i.CityIDContainsFold != nil {
		predicates = append(predicates, tender.CityIDContainsFold(*i.CityIDContainsFold))
	}
	if i.DistrictID != nil {
		predicates = append(predicates, tender.DistrictIDEQ(*i.DistrictID))
	}
	if i.DistrictIDNEQ != nil {
		predicates = append(predicates, tender.DistrictIDNEQ(*i.DistrictIDNEQ))
	}
	if len(i.DistrictIDIn) > 0 {
		predicates = append(predicates, tender.DistrictIDIn(i.DistrictIDIn...))
	}
	if len(i.DistrictIDNotIn) > 0 {
		predicates = append(predicates, tender.DistrictIDNotIn(i.DistrictIDNotIn...))
	}
	if i.DistrictIDGT != nil {
		predicates = append(predicates, tender.DistrictIDGT(*i.DistrictIDGT))
	}
	if i.DistrictIDGTE != nil {
		predicates = append(predicates, tender.DistrictIDGTE(*i.DistrictIDGTE))
	}
	if i.DistrictIDLT != nil {
		predicates = append(predicates, tender.DistrictIDLT(*i.DistrictIDLT))
	}
	if i.DistrictIDLTE != nil {
		predicates = append(predicates, tender.DistrictIDLTE(*i.DistrictIDLTE))
	}
	if i.DistrictIDContains != nil {
		predicates = append(predicates, tender.DistrictIDContains(*i.DistrictIDContains))
	}
	if i.DistrictIDHasPrefix != nil {
		predicates = append(predicates, tender.DistrictIDHasPrefix(*i.DistrictIDHasPrefix))
	}
	if i.DistrictIDHasSuffix != nil {
		predicates = append(predicates, tender.DistrictIDHasSuffix(*i.DistrictIDHasSuffix))
	}
	if i.DistrictIDIsNil {
		predicates = append(predicates, tender.DistrictIDIsNil())
	}
	if i.DistrictIDNotNil {
		predicates = append(predicates, tender.DistrictIDNotNil())
	}
	if i.DistrictIDEqualFold != nil {
		predicates = append(predicates, tender.DistrictIDEqualFold(*i.DistrictIDEqualFold))
	}
	if i.DistrictIDContainsFold != nil {
		predicates = append(predicates, tender.DistrictIDContainsFold(*i.DistrictIDContainsFold))
	}
	if i.CustomerID != nil {
		predicates = append(predicates, tender.CustomerIDEQ(*i.CustomerID))
	}
	if i.CustomerIDNEQ != nil {
		predicates = append(predicates, tender.CustomerIDNEQ(*i.CustomerIDNEQ))
	}
	if len(i.CustomerIDIn) > 0 {
		predicates = append(predicates, tender.CustomerIDIn(i.CustomerIDIn...))
	}
	if len(i.CustomerIDNotIn) > 0 {
		predicates = append(predicates, tender.CustomerIDNotIn(i.CustomerIDNotIn...))
	}
	if i.CustomerIDGT != nil {
		predicates = append(predicates, tender.CustomerIDGT(*i.CustomerIDGT))
	}
	if i.CustomerIDGTE != nil {
		predicates = append(predicates, tender.CustomerIDGTE(*i.CustomerIDGTE))
	}
	if i.CustomerIDLT != nil {
		predicates = append(predicates, tender.CustomerIDLT(*i.CustomerIDLT))
	}
	if i.CustomerIDLTE != nil {
		predicates = append(predicates, tender.CustomerIDLTE(*i.CustomerIDLTE))
	}
	if i.CustomerIDContains != nil {
		predicates = append(predicates, tender.CustomerIDContains(*i.CustomerIDContains))
	}
	if i.CustomerIDHasPrefix != nil {
		predicates = append(predicates, tender.CustomerIDHasPrefix(*i.CustomerIDHasPrefix))
	}
	if i.CustomerIDHasSuffix != nil {
		predicates = append(predicates, tender.CustomerIDHasSuffix(*i.CustomerIDHasSuffix))
	}
	if i.CustomerIDIsNil {
		predicates = append(predicates, tender.CustomerIDIsNil())
	}
	if i.CustomerIDNotNil {
		predicates = append(predicates, tender.CustomerIDNotNil())
	}
	if i.CustomerIDEqualFold != nil {
		predicates = append(predicates, tender.CustomerIDEqualFold(*i.CustomerIDEqualFold))
	}
	if i.CustomerIDContainsFold != nil {
		predicates = append(predicates, tender.CustomerIDContainsFold(*i.CustomerIDContainsFold))
	}
	if i.FinderID != nil {
		predicates = append(predicates, tender.FinderIDEQ(*i.FinderID))
	}
	if i.FinderIDNEQ != nil {
		predicates = append(predicates, tender.FinderIDNEQ(*i.FinderIDNEQ))
	}
	if len(i.FinderIDIn) > 0 {
		predicates = append(predicates, tender.FinderIDIn(i.FinderIDIn...))
	}
	if len(i.FinderIDNotIn) > 0 {
		predicates = append(predicates, tender.FinderIDNotIn(i.FinderIDNotIn...))
	}
	if i.FinderIDGT != nil {
		predicates = append(predicates, tender.FinderIDGT(*i.FinderIDGT))
	}
	if i.FinderIDGTE != nil {
		predicates = append(predicates, tender.FinderIDGTE(*i.FinderIDGTE))
	}
	if i.FinderIDLT != nil {
		predicates = append(predicates, tender.FinderIDLT(*i.FinderIDLT))
	}
	if i.FinderIDLTE != nil {
		predicates = append(predicates, tender.FinderIDLTE(*i.FinderIDLTE))
	}
	if i.FinderIDContains != nil {
		predicates = append(predicates, tender.FinderIDContains(*i.FinderIDContains))
	}
	if i.FinderIDHasPrefix != nil {
		predicates = append(predicates, tender.FinderIDHasPrefix(*i.FinderIDHasPrefix))
	}
	if i.FinderIDHasSuffix != nil {
		predicates = append(predicates, tender.FinderIDHasSuffix(*i.FinderIDHasSuffix))
	}
	if i.FinderIDIsNil {
		predicates = append(predicates, tender.FinderIDIsNil())
	}
	if i.FinderIDNotNil {
		predicates = append(predicates, tender.FinderIDNotNil())
	}
	if i.FinderIDEqualFold != nil {
		predicates = append(predicates, tender.FinderIDEqualFold(*i.FinderIDEqualFold))
	}
	if i.FinderIDContainsFold != nil {
		predicates = append(predicates, tender.FinderIDContainsFold(*i.FinderIDContainsFold))
	}
	if i.CreatedByID != nil {
		predicates = append(predicates, tender.CreatedByIDEQ(*i.CreatedByID))
	}
	if i.CreatedByIDNEQ != nil {
		predicates = append(predicates, tender.CreatedByIDNEQ(*i.CreatedByIDNEQ))
	}
	if len(i.CreatedByIDIn) > 0 {
		predicates = append(predicates, tender.CreatedByIDIn(i.CreatedByIDIn...))
	}
	if len(i.CreatedByIDNotIn) > 0 {
		predicates = append(predicates, tender.CreatedByIDNotIn(i.CreatedByIDNotIn...))
	}
	if i.CreatedByIDGT != nil {
		predicates = append(predicates, tender.CreatedByIDGT(*i.CreatedByIDGT))
	}
	if i.CreatedByIDGTE != nil {
		predicates = append(predicates, tender.CreatedByIDGTE(*i.CreatedByIDGTE))
	}
	if i.CreatedByIDLT != nil {
		predicates = append(predicates, tender.CreatedByIDLT(*i.CreatedByIDLT))
	}
	if i.CreatedByIDLTE != nil {
		predicates = append(predicates, tender.CreatedByIDLTE(*i.CreatedByIDLTE))
	}
	if i.CreatedByIDContains != nil {
		predicates = append(predicates, tender.CreatedByIDContains(*i.CreatedByIDContains))
	}
	if i.CreatedByIDHasPrefix != nil {
		predicates = append(predicates, tender.CreatedByIDHasPrefix(*i.CreatedByIDHasPrefix))
	}
	if i.CreatedByIDHasSuffix != nil {
		predicates = append(predicates, tender.CreatedByIDHasSuffix(*i.CreatedByIDHasSuffix))
	}
	if i.CreatedByIDIsNil {
		predicates = append(predicates, tender.CreatedByIDIsNil())
	}
	if i.CreatedByIDNotNil {
		predicates = append(predicates, tender.CreatedByIDNotNil())
	}
	if i.CreatedByIDEqualFold != nil {
		predicates = append(predicates, tender.CreatedByIDEqualFold(*i.CreatedByIDEqualFold))
	}
	if i.CreatedByIDContainsFold != nil {
		predicates = append(predicates, tender.CreatedByIDContainsFold(*i.CreatedByIDContainsFold))
	}
	if i.CompetitorID != nil {
		predicates = append(predicates, tender.CompetitorIDEQ(*i.CompetitorID))
	}
	if i.CompetitorIDNEQ != nil {
		predicates = append(predicates, tender.CompetitorIDNEQ(*i.CompetitorIDNEQ))
	}
	if len(i.CompetitorIDIn) > 0 {
		predicates = append(predicates, tender.CompetitorIDIn(i.CompetitorIDIn...))
	}
	if len(i.CompetitorIDNotIn) > 0 {
		predicates = append(predicates, tender.CompetitorIDNotIn(i.CompetitorIDNotIn...))
	}
	if i.CompetitorIDGT != nil {
		predicates = append(predicates, tender.CompetitorIDGT(*i.CompetitorIDGT))
	}
	if i.CompetitorIDGTE != nil {
		predicates = append(predicates, tender.CompetitorIDGTE(*i.CompetitorIDGTE))
	}
	if i.CompetitorIDLT != nil {
		predicates = append(predicates, tender.CompetitorIDLT(*i.CompetitorIDLT))
	}
	if i.CompetitorIDLTE != nil {
		predicates = append(predicates, tender.CompetitorIDLTE(*i.CompetitorIDLTE))
	}
	if i.CompetitorIDContains != nil {
		predicates = append(predicates, tender.CompetitorIDContains(*i.CompetitorIDContains))
	}
	if i.CompetitorIDHasPrefix != nil {
		predicates = append(predicates, tender.CompetitorIDHasPrefix(*i.CompetitorIDHasPrefix))
	}
	if i.CompetitorIDHasSuffix != nil {
		predicates = append(predicates, tender.CompetitorIDHasSuffix(*i.CompetitorIDHasSuffix))
	}
	if i.CompetitorIDIsNil {
		predicates = append(predicates, tender.CompetitorIDIsNil())
	}
	if i.CompetitorIDNotNil {
		predicates = append(predicates, tender.CompetitorIDNotNil())
	}
	if i.CompetitorIDEqualFold != nil {
		predicates = append(predicates, tender.CompetitorIDEqualFold(*i.CompetitorIDEqualFold))
	}
	if i.CompetitorIDContainsFold != nil {
		predicates = append(predicates, tender.CompetitorIDContainsFold(*i.CompetitorIDContainsFold))
	}
	if i.ApproverID != nil {
		predicates = append(predicates, tender.ApproverIDEQ(*i.ApproverID))
	}
	if i.ApproverIDNEQ != nil {
		predicates = append(predicates, tender.ApproverIDNEQ(*i.ApproverIDNEQ))
	}
	if len(i.ApproverIDIn) > 0 {
		predicates = append(predicates, tender.ApproverIDIn(i.ApproverIDIn...))
	}
	if len(i.ApproverIDNotIn) > 0 {
		predicates = append(predicates, tender.ApproverIDNotIn(i.ApproverIDNotIn...))
	}
	if i.ApproverIDGT != nil {
		predicates = append(predicates, tender.ApproverIDGT(*i.ApproverIDGT))
	}
	if i.ApproverIDGTE != nil {
		predicates = append(predicates, tender.ApproverIDGTE(*i.ApproverIDGTE))
	}
	if i.ApproverIDLT != nil {
		predicates = append(predicates, tender.ApproverIDLT(*i.ApproverIDLT))
	}
	if i.ApproverIDLTE != nil {
		predicates = append(predicates, tender.ApproverIDLTE(*i.ApproverIDLTE))
	}
	if i.ApproverIDContains != nil {
		predicates = append(predicates, tender.ApproverIDContains(*i.ApproverIDContains))
	}
	if i.ApproverIDHasPrefix != nil {
		predicates = append(predicates, tender.ApproverIDHasPrefix(*i.ApproverIDHasPrefix))
	}
	if i.ApproverIDHasSuffix != nil {
		predicates = append(predicates, tender.ApproverIDHasSuffix(*i.ApproverIDHasSuffix))
	}
	if i.ApproverIDIsNil {
		predicates = append(predicates, tender.ApproverIDIsNil())
	}
	if i.ApproverIDNotNil {
		predicates = append(predicates, tender.ApproverIDNotNil())
	}
	if i.ApproverIDEqualFold != nil {
		predicates = append(predicates, tender.ApproverIDEqualFold(*i.ApproverIDEqualFold))
	}
	if i.ApproverIDContainsFold != nil {
		predicates = append(predicates, tender.ApproverIDContainsFold(*i.ApproverIDContainsFold))
	}

	if i.HasArea != nil {
		p := tender.HasArea()
		if !*i.HasArea {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreaWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreaWith))
		for _, w := range i.HasAreaWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreaWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasAreaWith(with...))
	}
	if i.HasCustomer != nil {
		p := tender.HasCustomer()
		if !*i.HasCustomer {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomerWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomerWith))
		for _, w := range i.HasCustomerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasCustomerWith(with...))
	}
	if i.HasFinder != nil {
		p := tender.HasFinder()
		if !*i.HasFinder {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFinderWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFinderWith))
		for _, w := range i.HasFinderWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFinderWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasFinderWith(with...))
	}
	if i.HasCreatedBy != nil {
		p := tender.HasCreatedBy()
		if !*i.HasCreatedBy {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCreatedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasCreatedByWith))
		for _, w := range i.HasCreatedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCreatedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasCreatedByWith(with...))
	}
	if i.HasFollowingSales != nil {
		p := tender.HasFollowingSales()
		if !*i.HasFollowingSales {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowingSalesWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowingSalesWith))
		for _, w := range i.HasFollowingSalesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowingSalesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasFollowingSalesWith(with...))
	}
	if i.HasProvince != nil {
		p := tender.HasProvince()
		if !*i.HasProvince {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProvinceWith) > 0 {
		with := make([]predicate.Province, 0, len(i.HasProvinceWith))
		for _, w := range i.HasProvinceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProvinceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasProvinceWith(with...))
	}
	if i.HasCity != nil {
		p := tender.HasCity()
		if !*i.HasCity {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCityWith) > 0 {
		with := make([]predicate.City, 0, len(i.HasCityWith))
		for _, w := range i.HasCityWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCityWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasCityWith(with...))
	}
	if i.HasDistrict != nil {
		p := tender.HasDistrict()
		if !*i.HasDistrict {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDistrictWith) > 0 {
		with := make([]predicate.District, 0, len(i.HasDistrictWith))
		for _, w := range i.HasDistrictWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDistrictWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasDistrictWith(with...))
	}
	if i.HasVisitRecords != nil {
		p := tender.HasVisitRecords()
		if !*i.HasVisitRecords {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVisitRecordsWith) > 0 {
		with := make([]predicate.VisitRecord, 0, len(i.HasVisitRecordsWith))
		for _, w := range i.HasVisitRecordsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVisitRecordsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasVisitRecordsWith(with...))
	}
	if i.HasCompetitor != nil {
		p := tender.HasCompetitor()
		if !*i.HasCompetitor {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCompetitorWith) > 0 {
		with := make([]predicate.Competitor, 0, len(i.HasCompetitorWith))
		for _, w := range i.HasCompetitorWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCompetitorWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasCompetitorWith(with...))
	}
	if i.HasApprover != nil {
		p := tender.HasApprover()
		if !*i.HasApprover {
			p = tender.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasApproverWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasApproverWith))
		for _, w := range i.HasApproverWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasApproverWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tender.HasApproverWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTenderWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tender.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "open_id" field predicates.
	OpenID             *string  `json:"openID,omitempty"`
	OpenIDNEQ          *string  `json:"openIDNEQ,omitempty"`
	OpenIDIn           []string `json:"openIDIn,omitempty"`
	OpenIDNotIn        []string `json:"openIDNotIn,omitempty"`
	OpenIDGT           *string  `json:"openIDGT,omitempty"`
	OpenIDGTE          *string  `json:"openIDGTE,omitempty"`
	OpenIDLT           *string  `json:"openIDLT,omitempty"`
	OpenIDLTE          *string  `json:"openIDLTE,omitempty"`
	OpenIDContains     *string  `json:"openIDContains,omitempty"`
	OpenIDHasPrefix    *string  `json:"openIDHasPrefix,omitempty"`
	OpenIDHasSuffix    *string  `json:"openIDHasSuffix,omitempty"`
	OpenIDEqualFold    *string  `json:"openIDEqualFold,omitempty"`
	OpenIDContainsFold *string  `json:"openIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameIsNil        bool     `json:"usernameIsNil,omitempty"`
	UsernameNotNil       bool     `json:"usernameNotNil,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLIsNil        bool     `json:"avatarURLIsNil,omitempty"`
	AvatarURLNotNil       bool     `json:"avatarURLNotNil,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "is_admin" field predicates.
	IsAdmin    *bool `json:"isAdmin,omitempty"`
	IsAdminNEQ *bool `json:"isAdminNEQ,omitempty"`

	// "is_ceo" field predicates.
	IsCeo    *bool `json:"isCeo,omitempty"`
	IsCeoNEQ *bool `json:"isCeoNEQ,omitempty"`

	// "is_super_admin" field predicates.
	IsSuperAdmin    *bool `json:"isSuperAdmin,omitempty"`
	IsSuperAdminNEQ *bool `json:"isSuperAdminNEQ,omitempty"`

	// "has_map_access" field predicates.
	HasMapAccess    *bool `json:"hasMapAccess,omitempty"`
	HasMapAccessNEQ *bool `json:"hasMapAccessNEQ,omitempty"`

	// "has_edit_access" field predicates.
	HasEditAccess    *bool `json:"hasEditAccess,omitempty"`
	HasEditAccessNEQ *bool `json:"hasEditAccessNEQ,omitempty"`

	// "leader_id" field predicates.
	LeaderID             *xid.ID  `json:"leaderID,omitempty"`
	LeaderIDNEQ          *xid.ID  `json:"leaderIDNEQ,omitempty"`
	LeaderIDIn           []xid.ID `json:"leaderIDIn,omitempty"`
	LeaderIDNotIn        []xid.ID `json:"leaderIDNotIn,omitempty"`
	LeaderIDGT           *xid.ID  `json:"leaderIDGT,omitempty"`
	LeaderIDGTE          *xid.ID  `json:"leaderIDGTE,omitempty"`
	LeaderIDLT           *xid.ID  `json:"leaderIDLT,omitempty"`
	LeaderIDLTE          *xid.ID  `json:"leaderIDLTE,omitempty"`
	LeaderIDContains     *xid.ID  `json:"leaderIDContains,omitempty"`
	LeaderIDHasPrefix    *xid.ID  `json:"leaderIDHasPrefix,omitempty"`
	LeaderIDHasSuffix    *xid.ID  `json:"leaderIDHasSuffix,omitempty"`
	LeaderIDIsNil        bool     `json:"leaderIDIsNil,omitempty"`
	LeaderIDNotNil       bool     `json:"leaderIDNotNil,omitempty"`
	LeaderIDEqualFold    *xid.ID  `json:"leaderIDEqualFold,omitempty"`
	LeaderIDContainsFold *xid.ID  `json:"leaderIDContainsFold,omitempty"`

	// "areas" edge predicates.
	HasAreas     *bool             `json:"hasAreas,omitempty"`
	HasAreasWith []*AreaWhereInput `json:"hasAreasWith,omitempty"`

	// "customers" edge predicates.
	HasCustomers     *bool                 `json:"hasCustomers,omitempty"`
	HasCustomersWith []*CustomerWhereInput `json:"hasCustomersWith,omitempty"`

	// "leader" edge predicates.
	HasLeader     *bool             `json:"hasLeader,omitempty"`
	HasLeaderWith []*UserWhereInput `json:"hasLeaderWith,omitempty"`

	// "team_members" edge predicates.
	HasTeamMembers     *bool             `json:"hasTeamMembers,omitempty"`
	HasTeamMembersWith []*UserWhereInput `json:"hasTeamMembersWith,omitempty"`

	// "tenders" edge predicates.
	HasTenders     *bool               `json:"hasTenders,omitempty"`
	HasTendersWith []*TenderWhereInput `json:"hasTendersWith,omitempty"`

	// "visit_records" edge predicates.
	HasVisitRecords     *bool                    `json:"hasVisitRecords,omitempty"`
	HasVisitRecordsWith []*VisitRecordWhereInput `json:"hasVisitRecordsWith,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.OpenID != nil {
		predicates = append(predicates, user.OpenIDEQ(*i.OpenID))
	}
	if i.OpenIDNEQ != nil {
		predicates = append(predicates, user.OpenIDNEQ(*i.OpenIDNEQ))
	}
	if len(i.OpenIDIn) > 0 {
		predicates = append(predicates, user.OpenIDIn(i.OpenIDIn...))
	}
	if len(i.OpenIDNotIn) > 0 {
		predicates = append(predicates, user.OpenIDNotIn(i.OpenIDNotIn...))
	}
	if i.OpenIDGT != nil {
		predicates = append(predicates, user.OpenIDGT(*i.OpenIDGT))
	}
	if i.OpenIDGTE != nil {
		predicates = append(predicates, user.OpenIDGTE(*i.OpenIDGTE))
	}
	if i.OpenIDLT != nil {
		predicates = append(predicates, user.OpenIDLT(*i.OpenIDLT))
	}
	if i.OpenIDLTE != nil {
		predicates = append(predicates, user.OpenIDLTE(*i.OpenIDLTE))
	}
	if i.OpenIDContains != nil {
		predicates = append(predicates, user.OpenIDContains(*i.OpenIDContains))
	}
	if i.OpenIDHasPrefix != nil {
		predicates = append(predicates, user.OpenIDHasPrefix(*i.OpenIDHasPrefix))
	}
	if i.OpenIDHasSuffix != nil {
		predicates = append(predicates, user.OpenIDHasSuffix(*i.OpenIDHasSuffix))
	}
	if i.OpenIDEqualFold != nil {
		predicates = append(predicates, user.OpenIDEqualFold(*i.OpenIDEqualFold))
	}
	if i.OpenIDContainsFold != nil {
		predicates = append(predicates, user.OpenIDContainsFold(*i.OpenIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, user.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, user.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, user.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, user.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameIsNil {
		predicates = append(predicates, user.UsernameIsNil())
	}
	if i.UsernameNotNil {
		predicates = append(predicates, user.UsernameNotNil())
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLIsNil {
		predicates = append(predicates, user.AvatarURLIsNil())
	}
	if i.AvatarURLNotNil {
		predicates = append(predicates, user.AvatarURLNotNil())
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, user.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, user.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.IsAdmin != nil {
		predicates = append(predicates, user.IsAdminEQ(*i.IsAdmin))
	}
	if i.IsAdminNEQ != nil {
		predicates = append(predicates, user.IsAdminNEQ(*i.IsAdminNEQ))
	}
	if i.IsCeo != nil {
		predicates = append(predicates, user.IsCeoEQ(*i.IsCeo))
	}
	if i.IsCeoNEQ != nil {
		predicates = append(predicates, user.IsCeoNEQ(*i.IsCeoNEQ))
	}
	if i.IsSuperAdmin != nil {
		predicates = append(predicates, user.IsSuperAdminEQ(*i.IsSuperAdmin))
	}
	if i.IsSuperAdminNEQ != nil {
		predicates = append(predicates, user.IsSuperAdminNEQ(*i.IsSuperAdminNEQ))
	}
	if i.HasMapAccess != nil {
		predicates = append(predicates, user.HasMapAccessEQ(*i.HasMapAccess))
	}
	if i.HasMapAccessNEQ != nil {
		predicates = append(predicates, user.HasMapAccessNEQ(*i.HasMapAccessNEQ))
	}
	if i.HasEditAccess != nil {
		predicates = append(predicates, user.HasEditAccessEQ(*i.HasEditAccess))
	}
	if i.HasEditAccessNEQ != nil {
		predicates = append(predicates, user.HasEditAccessNEQ(*i.HasEditAccessNEQ))
	}
	if i.LeaderID != nil {
		predicates = append(predicates, user.LeaderIDEQ(*i.LeaderID))
	}
	if i.LeaderIDNEQ != nil {
		predicates = append(predicates, user.LeaderIDNEQ(*i.LeaderIDNEQ))
	}
	if len(i.LeaderIDIn) > 0 {
		predicates = append(predicates, user.LeaderIDIn(i.LeaderIDIn...))
	}
	if len(i.LeaderIDNotIn) > 0 {
		predicates = append(predicates, user.LeaderIDNotIn(i.LeaderIDNotIn...))
	}
	if i.LeaderIDGT != nil {
		predicates = append(predicates, user.LeaderIDGT(*i.LeaderIDGT))
	}
	if i.LeaderIDGTE != nil {
		predicates = append(predicates, user.LeaderIDGTE(*i.LeaderIDGTE))
	}
	if i.LeaderIDLT != nil {
		predicates = append(predicates, user.LeaderIDLT(*i.LeaderIDLT))
	}
	if i.LeaderIDLTE != nil {
		predicates = append(predicates, user.LeaderIDLTE(*i.LeaderIDLTE))
	}
	if i.LeaderIDContains != nil {
		predicates = append(predicates, user.LeaderIDContains(*i.LeaderIDContains))
	}
	if i.LeaderIDHasPrefix != nil {
		predicates = append(predicates, user.LeaderIDHasPrefix(*i.LeaderIDHasPrefix))
	}
	if i.LeaderIDHasSuffix != nil {
		predicates = append(predicates, user.LeaderIDHasSuffix(*i.LeaderIDHasSuffix))
	}
	if i.LeaderIDIsNil {
		predicates = append(predicates, user.LeaderIDIsNil())
	}
	if i.LeaderIDNotNil {
		predicates = append(predicates, user.LeaderIDNotNil())
	}
	if i.LeaderIDEqualFold != nil {
		predicates = append(predicates, user.LeaderIDEqualFold(*i.LeaderIDEqualFold))
	}
	if i.LeaderIDContainsFold != nil {
		predicates = append(predicates, user.LeaderIDContainsFold(*i.LeaderIDContainsFold))
	}

	if i.HasAreas != nil {
		p := user.HasAreas()
		if !*i.HasAreas {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAreasWith) > 0 {
		with := make([]predicate.Area, 0, len(i.HasAreasWith))
		for _, w := range i.HasAreasWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAreasWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasAreasWith(with...))
	}
	if i.HasCustomers != nil {
		p := user.HasCustomers()
		if !*i.HasCustomers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomersWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomersWith))
		for _, w := range i.HasCustomersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCustomersWith(with...))
	}
	if i.HasLeader != nil {
		p := user.HasLeader()
		if !*i.HasLeader {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLeaderWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLeaderWith))
		for _, w := range i.HasLeaderWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLeaderWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLeaderWith(with...))
	}
	if i.HasTeamMembers != nil {
		p := user.HasTeamMembers()
		if !*i.HasTeamMembers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeamMembersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasTeamMembersWith))
		for _, w := range i.HasTeamMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTeamMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTeamMembersWith(with...))
	}
	if i.HasTenders != nil {
		p := user.HasTenders()
		if !*i.HasTenders {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTendersWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTendersWith))
		for _, w := range i.HasTendersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTendersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTendersWith(with...))
	}
	if i.HasVisitRecords != nil {
		p := user.HasVisitRecords()
		if !*i.HasVisitRecords {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVisitRecordsWith) > 0 {
		with := make([]predicate.VisitRecord, 0, len(i.HasVisitRecordsWith))
		for _, w := range i.HasVisitRecordsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVisitRecordsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasVisitRecordsWith(with...))
	}
	if i.HasProjects != nil {
		p := user.HasProjects()
		if !*i.HasProjects {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProjectsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasProjectsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// VisitRecordWhereInput represents a where input for filtering VisitRecord queries.
type VisitRecordWhereInput struct {
	Predicates []predicate.VisitRecord  `json:"-"`
	Not        *VisitRecordWhereInput   `json:"not,omitempty"`
	Or         []*VisitRecordWhereInput `json:"or,omitempty"`
	And        []*VisitRecordWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *xid.ID  `json:"id,omitempty"`
	IDNEQ   *xid.ID  `json:"idNEQ,omitempty"`
	IDIn    []xid.ID `json:"idIn,omitempty"`
	IDNotIn []xid.ID `json:"idNotIn,omitempty"`
	IDGT    *xid.ID  `json:"idGT,omitempty"`
	IDGTE   *xid.ID  `json:"idGTE,omitempty"`
	IDLT    *xid.ID  `json:"idLT,omitempty"`
	IDLTE   *xid.ID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "visit_type" field predicates.
	VisitType      *int  `json:"visitType,omitempty"`
	VisitTypeNEQ   *int  `json:"visitTypeNEQ,omitempty"`
	VisitTypeIn    []int `json:"visitTypeIn,omitempty"`
	VisitTypeNotIn []int `json:"visitTypeNotIn,omitempty"`
	VisitTypeGT    *int  `json:"visitTypeGT,omitempty"`
	VisitTypeGTE   *int  `json:"visitTypeGTE,omitempty"`
	VisitTypeLT    *int  `json:"visitTypeLT,omitempty"`
	VisitTypeLTE   *int  `json:"visitTypeLTE,omitempty"`

	// "comm_people" field predicates.
	CommPeople             *string  `json:"commPeople,omitempty"`
	CommPeopleNEQ          *string  `json:"commPeopleNEQ,omitempty"`
	CommPeopleIn           []string `json:"commPeopleIn,omitempty"`
	CommPeopleNotIn        []string `json:"commPeopleNotIn,omitempty"`
	CommPeopleGT           *string  `json:"commPeopleGT,omitempty"`
	CommPeopleGTE          *string  `json:"commPeopleGTE,omitempty"`
	CommPeopleLT           *string  `json:"commPeopleLT,omitempty"`
	CommPeopleLTE          *string  `json:"commPeopleLTE,omitempty"`
	CommPeopleContains     *string  `json:"commPeopleContains,omitempty"`
	CommPeopleHasPrefix    *string  `json:"commPeopleHasPrefix,omitempty"`
	CommPeopleHasSuffix    *string  `json:"commPeopleHasSuffix,omitempty"`
	CommPeopleEqualFold    *string  `json:"commPeopleEqualFold,omitempty"`
	CommPeopleContainsFold *string  `json:"commPeopleContainsFold,omitempty"`

	// "comm_content" field predicates.
	CommContent             *string  `json:"commContent,omitempty"`
	CommContentNEQ          *string  `json:"commContentNEQ,omitempty"`
	CommContentIn           []string `json:"commContentIn,omitempty"`
	CommContentNotIn        []string `json:"commContentNotIn,omitempty"`
	CommContentGT           *string  `json:"commContentGT,omitempty"`
	CommContentGTE          *string  `json:"commContentGTE,omitempty"`
	CommContentLT           *string  `json:"commContentLT,omitempty"`
	CommContentLTE          *string  `json:"commContentLTE,omitempty"`
	CommContentContains     *string  `json:"commContentContains,omitempty"`
	CommContentHasPrefix    *string  `json:"commContentHasPrefix,omitempty"`
	CommContentHasSuffix    *string  `json:"commContentHasSuffix,omitempty"`
	CommContentEqualFold    *string  `json:"commContentEqualFold,omitempty"`
	CommContentContainsFold *string  `json:"commContentContainsFold,omitempty"`

	// "next_step" field predicates.
	NextStep             *string  `json:"nextStep,omitempty"`
	NextStepNEQ          *string  `json:"nextStepNEQ,omitempty"`
	NextStepIn           []string `json:"nextStepIn,omitempty"`
	NextStepNotIn        []string `json:"nextStepNotIn,omitempty"`
	NextStepGT           *string  `json:"nextStepGT,omitempty"`
	NextStepGTE          *string  `json:"nextStepGTE,omitempty"`
	NextStepLT           *string  `json:"nextStepLT,omitempty"`
	NextStepLTE          *string  `json:"nextStepLTE,omitempty"`
	NextStepContains     *string  `json:"nextStepContains,omitempty"`
	NextStepHasPrefix    *string  `json:"nextStepHasPrefix,omitempty"`
	NextStepHasSuffix    *string  `json:"nextStepHasSuffix,omitempty"`
	NextStepIsNil        bool     `json:"nextStepIsNil,omitempty"`
	NextStepNotNil       bool     `json:"nextStepNotNil,omitempty"`
	NextStepEqualFold    *string  `json:"nextStepEqualFold,omitempty"`
	NextStepContainsFold *string  `json:"nextStepContainsFold,omitempty"`

	// "date" field predicates.
	Date      *time.Time  `json:"date,omitempty"`
	DateNEQ   *time.Time  `json:"dateNEQ,omitempty"`
	DateIn    []time.Time `json:"dateIn,omitempty"`
	DateNotIn []time.Time `json:"dateNotIn,omitempty"`
	DateGT    *time.Time  `json:"dateGT,omitempty"`
	DateGTE   *time.Time  `json:"dateGTE,omitempty"`
	DateLT    *time.Time  `json:"dateLT,omitempty"`
	DateLTE   *time.Time  `json:"dateLTE,omitempty"`

	// "tender_id" field predicates.
	TenderID             *xid.ID  `json:"tenderID,omitempty"`
	TenderIDNEQ          *xid.ID  `json:"tenderIDNEQ,omitempty"`
	TenderIDIn           []xid.ID `json:"tenderIDIn,omitempty"`
	TenderIDNotIn        []xid.ID `json:"tenderIDNotIn,omitempty"`
	TenderIDGT           *xid.ID  `json:"tenderIDGT,omitempty"`
	TenderIDGTE          *xid.ID  `json:"tenderIDGTE,omitempty"`
	TenderIDLT           *xid.ID  `json:"tenderIDLT,omitempty"`
	TenderIDLTE          *xid.ID  `json:"tenderIDLTE,omitempty"`
	TenderIDContains     *xid.ID  `json:"tenderIDContains,omitempty"`
	TenderIDHasPrefix    *xid.ID  `json:"tenderIDHasPrefix,omitempty"`
	TenderIDHasSuffix    *xid.ID  `json:"tenderIDHasSuffix,omitempty"`
	TenderIDIsNil        bool     `json:"tenderIDIsNil,omitempty"`
	TenderIDNotNil       bool     `json:"tenderIDNotNil,omitempty"`
	TenderIDEqualFold    *xid.ID  `json:"tenderIDEqualFold,omitempty"`
	TenderIDContainsFold *xid.ID  `json:"tenderIDContainsFold,omitempty"`

	// "customer_id" field predicates.
	CustomerID             *xid.ID  `json:"customerID,omitempty"`
	CustomerIDNEQ          *xid.ID  `json:"customerIDNEQ,omitempty"`
	CustomerIDIn           []xid.ID `json:"customerIDIn,omitempty"`
	CustomerIDNotIn        []xid.ID `json:"customerIDNotIn,omitempty"`
	CustomerIDGT           *xid.ID  `json:"customerIDGT,omitempty"`
	CustomerIDGTE          *xid.ID  `json:"customerIDGTE,omitempty"`
	CustomerIDLT           *xid.ID  `json:"customerIDLT,omitempty"`
	CustomerIDLTE          *xid.ID  `json:"customerIDLTE,omitempty"`
	CustomerIDContains     *xid.ID  `json:"customerIDContains,omitempty"`
	CustomerIDHasPrefix    *xid.ID  `json:"customerIDHasPrefix,omitempty"`
	CustomerIDHasSuffix    *xid.ID  `json:"customerIDHasSuffix,omitempty"`
	CustomerIDEqualFold    *xid.ID  `json:"customerIDEqualFold,omitempty"`
	CustomerIDContainsFold *xid.ID  `json:"customerIDContainsFold,omitempty"`

	// "tender" edge predicates.
	HasTender     *bool               `json:"hasTender,omitempty"`
	HasTenderWith []*TenderWhereInput `json:"hasTenderWith,omitempty"`

	// "customer" edge predicates.
	HasCustomer     *bool                 `json:"hasCustomer,omitempty"`
	HasCustomerWith []*CustomerWhereInput `json:"hasCustomerWith,omitempty"`

	// "followUpBys" edge predicates.
	HasFollowUpBys     *bool             `json:"hasFollowUpBys,omitempty"`
	HasFollowUpBysWith []*UserWhereInput `json:"hasFollowUpBysWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *VisitRecordWhereInput) AddPredicates(predicates ...predicate.VisitRecord) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the VisitRecordWhereInput filter on the VisitRecordQuery builder.
func (i *VisitRecordWhereInput) Filter(q *VisitRecordQuery) (*VisitRecordQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyVisitRecordWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyVisitRecordWhereInput is returned in case the VisitRecordWhereInput is empty.
var ErrEmptyVisitRecordWhereInput = errors.New("ent: empty predicate VisitRecordWhereInput")

// P returns a predicate for filtering visitrecords.
// An error is returned if the input is empty or invalid.
func (i *VisitRecordWhereInput) P() (predicate.VisitRecord, error) {
	var predicates []predicate.VisitRecord
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, visitrecord.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.VisitRecord, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, visitrecord.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.VisitRecord, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, visitrecord.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, visitrecord.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, visitrecord.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, visitrecord.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, visitrecord.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, visitrecord.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, visitrecord.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, visitrecord.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, visitrecord.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, visitrecord.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, visitrecord.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, visitrecord.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, visitrecord.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, visitrecord.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, visitrecord.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, visitrecord.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, visitrecord.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, visitrecord.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, visitrecord.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, visitrecord.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, visitrecord.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, visitrecord.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, visitrecord.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, visitrecord.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, visitrecord.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.VisitType != nil {
		predicates = append(predicates, visitrecord.VisitTypeEQ(*i.VisitType))
	}
	if i.VisitTypeNEQ != nil {
		predicates = append(predicates, visitrecord.VisitTypeNEQ(*i.VisitTypeNEQ))
	}
	if len(i.VisitTypeIn) > 0 {
		predicates = append(predicates, visitrecord.VisitTypeIn(i.VisitTypeIn...))
	}
	if len(i.VisitTypeNotIn) > 0 {
		predicates = append(predicates, visitrecord.VisitTypeNotIn(i.VisitTypeNotIn...))
	}
	if i.VisitTypeGT != nil {
		predicates = append(predicates, visitrecord.VisitTypeGT(*i.VisitTypeGT))
	}
	if i.VisitTypeGTE != nil {
		predicates = append(predicates, visitrecord.VisitTypeGTE(*i.VisitTypeGTE))
	}
	if i.VisitTypeLT != nil {
		predicates = append(predicates, visitrecord.VisitTypeLT(*i.VisitTypeLT))
	}
	if i.VisitTypeLTE != nil {
		predicates = append(predicates, visitrecord.VisitTypeLTE(*i.VisitTypeLTE))
	}
	if i.CommPeople != nil {
		predicates = append(predicates, visitrecord.CommPeopleEQ(*i.CommPeople))
	}
	if i.CommPeopleNEQ != nil {
		predicates = append(predicates, visitrecord.CommPeopleNEQ(*i.CommPeopleNEQ))
	}
	if len(i.CommPeopleIn) > 0 {
		predicates = append(predicates, visitrecord.CommPeopleIn(i.CommPeopleIn...))
	}
	if len(i.CommPeopleNotIn) > 0 {
		predicates = append(predicates, visitrecord.CommPeopleNotIn(i.CommPeopleNotIn...))
	}
	if i.CommPeopleGT != nil {
		predicates = append(predicates, visitrecord.CommPeopleGT(*i.CommPeopleGT))
	}
	if i.CommPeopleGTE != nil {
		predicates = append(predicates, visitrecord.CommPeopleGTE(*i.CommPeopleGTE))
	}
	if i.CommPeopleLT != nil {
		predicates = append(predicates, visitrecord.CommPeopleLT(*i.CommPeopleLT))
	}
	if i.CommPeopleLTE != nil {
		predicates = append(predicates, visitrecord.CommPeopleLTE(*i.CommPeopleLTE))
	}
	if i.CommPeopleContains != nil {
		predicates = append(predicates, visitrecord.CommPeopleContains(*i.CommPeopleContains))
	}
	if i.CommPeopleHasPrefix != nil {
		predicates = append(predicates, visitrecord.CommPeopleHasPrefix(*i.CommPeopleHasPrefix))
	}
	if i.CommPeopleHasSuffix != nil {
		predicates = append(predicates, visitrecord.CommPeopleHasSuffix(*i.CommPeopleHasSuffix))
	}
	if i.CommPeopleEqualFold != nil {
		predicates = append(predicates, visitrecord.CommPeopleEqualFold(*i.CommPeopleEqualFold))
	}
	if i.CommPeopleContainsFold != nil {
		predicates = append(predicates, visitrecord.CommPeopleContainsFold(*i.CommPeopleContainsFold))
	}
	if i.CommContent != nil {
		predicates = append(predicates, visitrecord.CommContentEQ(*i.CommContent))
	}
	if i.CommContentNEQ != nil {
		predicates = append(predicates, visitrecord.CommContentNEQ(*i.CommContentNEQ))
	}
	if len(i.CommContentIn) > 0 {
		predicates = append(predicates, visitrecord.CommContentIn(i.CommContentIn...))
	}
	if len(i.CommContentNotIn) > 0 {
		predicates = append(predicates, visitrecord.CommContentNotIn(i.CommContentNotIn...))
	}
	if i.CommContentGT != nil {
		predicates = append(predicates, visitrecord.CommContentGT(*i.CommContentGT))
	}
	if i.CommContentGTE != nil {
		predicates = append(predicates, visitrecord.CommContentGTE(*i.CommContentGTE))
	}
	if i.CommContentLT != nil {
		predicates = append(predicates, visitrecord.CommContentLT(*i.CommContentLT))
	}
	if i.CommContentLTE != nil {
		predicates = append(predicates, visitrecord.CommContentLTE(*i.CommContentLTE))
	}
	if i.CommContentContains != nil {
		predicates = append(predicates, visitrecord.CommContentContains(*i.CommContentContains))
	}
	if i.CommContentHasPrefix != nil {
		predicates = append(predicates, visitrecord.CommContentHasPrefix(*i.CommContentHasPrefix))
	}
	if i.CommContentHasSuffix != nil {
		predicates = append(predicates, visitrecord.CommContentHasSuffix(*i.CommContentHasSuffix))
	}
	if i.CommContentEqualFold != nil {
		predicates = append(predicates, visitrecord.CommContentEqualFold(*i.CommContentEqualFold))
	}
	if i.CommContentContainsFold != nil {
		predicates = append(predicates, visitrecord.CommContentContainsFold(*i.CommContentContainsFold))
	}
	if i.NextStep != nil {
		predicates = append(predicates, visitrecord.NextStepEQ(*i.NextStep))
	}
	if i.NextStepNEQ != nil {
		predicates = append(predicates, visitrecord.NextStepNEQ(*i.NextStepNEQ))
	}
	if len(i.NextStepIn) > 0 {
		predicates = append(predicates, visitrecord.NextStepIn(i.NextStepIn...))
	}
	if len(i.NextStepNotIn) > 0 {
		predicates = append(predicates, visitrecord.NextStepNotIn(i.NextStepNotIn...))
	}
	if i.NextStepGT != nil {
		predicates = append(predicates, visitrecord.NextStepGT(*i.NextStepGT))
	}
	if i.NextStepGTE != nil {
		predicates = append(predicates, visitrecord.NextStepGTE(*i.NextStepGTE))
	}
	if i.NextStepLT != nil {
		predicates = append(predicates, visitrecord.NextStepLT(*i.NextStepLT))
	}
	if i.NextStepLTE != nil {
		predicates = append(predicates, visitrecord.NextStepLTE(*i.NextStepLTE))
	}
	if i.NextStepContains != nil {
		predicates = append(predicates, visitrecord.NextStepContains(*i.NextStepContains))
	}
	if i.NextStepHasPrefix != nil {
		predicates = append(predicates, visitrecord.NextStepHasPrefix(*i.NextStepHasPrefix))
	}
	if i.NextStepHasSuffix != nil {
		predicates = append(predicates, visitrecord.NextStepHasSuffix(*i.NextStepHasSuffix))
	}
	if i.NextStepIsNil {
		predicates = append(predicates, visitrecord.NextStepIsNil())
	}
	if i.NextStepNotNil {
		predicates = append(predicates, visitrecord.NextStepNotNil())
	}
	if i.NextStepEqualFold != nil {
		predicates = append(predicates, visitrecord.NextStepEqualFold(*i.NextStepEqualFold))
	}
	if i.NextStepContainsFold != nil {
		predicates = append(predicates, visitrecord.NextStepContainsFold(*i.NextStepContainsFold))
	}
	if i.Date != nil {
		predicates = append(predicates, visitrecord.DateEQ(*i.Date))
	}
	if i.DateNEQ != nil {
		predicates = append(predicates, visitrecord.DateNEQ(*i.DateNEQ))
	}
	if len(i.DateIn) > 0 {
		predicates = append(predicates, visitrecord.DateIn(i.DateIn...))
	}
	if len(i.DateNotIn) > 0 {
		predicates = append(predicates, visitrecord.DateNotIn(i.DateNotIn...))
	}
	if i.DateGT != nil {
		predicates = append(predicates, visitrecord.DateGT(*i.DateGT))
	}
	if i.DateGTE != nil {
		predicates = append(predicates, visitrecord.DateGTE(*i.DateGTE))
	}
	if i.DateLT != nil {
		predicates = append(predicates, visitrecord.DateLT(*i.DateLT))
	}
	if i.DateLTE != nil {
		predicates = append(predicates, visitrecord.DateLTE(*i.DateLTE))
	}
	if i.TenderID != nil {
		predicates = append(predicates, visitrecord.TenderIDEQ(*i.TenderID))
	}
	if i.TenderIDNEQ != nil {
		predicates = append(predicates, visitrecord.TenderIDNEQ(*i.TenderIDNEQ))
	}
	if len(i.TenderIDIn) > 0 {
		predicates = append(predicates, visitrecord.TenderIDIn(i.TenderIDIn...))
	}
	if len(i.TenderIDNotIn) > 0 {
		predicates = append(predicates, visitrecord.TenderIDNotIn(i.TenderIDNotIn...))
	}
	if i.TenderIDGT != nil {
		predicates = append(predicates, visitrecord.TenderIDGT(*i.TenderIDGT))
	}
	if i.TenderIDGTE != nil {
		predicates = append(predicates, visitrecord.TenderIDGTE(*i.TenderIDGTE))
	}
	if i.TenderIDLT != nil {
		predicates = append(predicates, visitrecord.TenderIDLT(*i.TenderIDLT))
	}
	if i.TenderIDLTE != nil {
		predicates = append(predicates, visitrecord.TenderIDLTE(*i.TenderIDLTE))
	}
	if i.TenderIDContains != nil {
		predicates = append(predicates, visitrecord.TenderIDContains(*i.TenderIDContains))
	}
	if i.TenderIDHasPrefix != nil {
		predicates = append(predicates, visitrecord.TenderIDHasPrefix(*i.TenderIDHasPrefix))
	}
	if i.TenderIDHasSuffix != nil {
		predicates = append(predicates, visitrecord.TenderIDHasSuffix(*i.TenderIDHasSuffix))
	}
	if i.TenderIDIsNil {
		predicates = append(predicates, visitrecord.TenderIDIsNil())
	}
	if i.TenderIDNotNil {
		predicates = append(predicates, visitrecord.TenderIDNotNil())
	}
	if i.TenderIDEqualFold != nil {
		predicates = append(predicates, visitrecord.TenderIDEqualFold(*i.TenderIDEqualFold))
	}
	if i.TenderIDContainsFold != nil {
		predicates = append(predicates, visitrecord.TenderIDContainsFold(*i.TenderIDContainsFold))
	}
	if i.CustomerID != nil {
		predicates = append(predicates, visitrecord.CustomerIDEQ(*i.CustomerID))
	}
	if i.CustomerIDNEQ != nil {
		predicates = append(predicates, visitrecord.CustomerIDNEQ(*i.CustomerIDNEQ))
	}
	if len(i.CustomerIDIn) > 0 {
		predicates = append(predicates, visitrecord.CustomerIDIn(i.CustomerIDIn...))
	}
	if len(i.CustomerIDNotIn) > 0 {
		predicates = append(predicates, visitrecord.CustomerIDNotIn(i.CustomerIDNotIn...))
	}
	if i.CustomerIDGT != nil {
		predicates = append(predicates, visitrecord.CustomerIDGT(*i.CustomerIDGT))
	}
	if i.CustomerIDGTE != nil {
		predicates = append(predicates, visitrecord.CustomerIDGTE(*i.CustomerIDGTE))
	}
	if i.CustomerIDLT != nil {
		predicates = append(predicates, visitrecord.CustomerIDLT(*i.CustomerIDLT))
	}
	if i.CustomerIDLTE != nil {
		predicates = append(predicates, visitrecord.CustomerIDLTE(*i.CustomerIDLTE))
	}
	if i.CustomerIDContains != nil {
		predicates = append(predicates, visitrecord.CustomerIDContains(*i.CustomerIDContains))
	}
	if i.CustomerIDHasPrefix != nil {
		predicates = append(predicates, visitrecord.CustomerIDHasPrefix(*i.CustomerIDHasPrefix))
	}
	if i.CustomerIDHasSuffix != nil {
		predicates = append(predicates, visitrecord.CustomerIDHasSuffix(*i.CustomerIDHasSuffix))
	}
	if i.CustomerIDEqualFold != nil {
		predicates = append(predicates, visitrecord.CustomerIDEqualFold(*i.CustomerIDEqualFold))
	}
	if i.CustomerIDContainsFold != nil {
		predicates = append(predicates, visitrecord.CustomerIDContainsFold(*i.CustomerIDContainsFold))
	}

	if i.HasTender != nil {
		p := visitrecord.HasTender()
		if !*i.HasTender {
			p = visitrecord.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTenderWith) > 0 {
		with := make([]predicate.Tender, 0, len(i.HasTenderWith))
		for _, w := range i.HasTenderWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTenderWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, visitrecord.HasTenderWith(with...))
	}
	if i.HasCustomer != nil {
		p := visitrecord.HasCustomer()
		if !*i.HasCustomer {
			p = visitrecord.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomerWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomerWith))
		for _, w := range i.HasCustomerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, visitrecord.HasCustomerWith(with...))
	}
	if i.HasFollowUpBys != nil {
		p := visitrecord.HasFollowUpBys()
		if !*i.HasFollowUpBys {
			p = visitrecord.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowUpBysWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowUpBysWith))
		for _, w := range i.HasFollowUpBysWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowUpBysWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, visitrecord.HasFollowUpBysWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyVisitRecordWhereInput
	case 1:
		return predicates[0], nil
	default:
		return visitrecord.And(predicates...), nil
	}
}
