// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Province is the model entity for the Province schema.
type Province struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Adcode holds the value of the "adcode" field.
	Adcode int `json:"adcode,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Center holds the value of the "center" field.
	Center *geo.GeoJson `json:"center,omitempty"`
	// CountryID holds the value of the "country_id" field.
	CountryID xid.ID `json:"country_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvinceQuery when eager-loading is set.
	Edges        ProvinceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProvinceEdges holds the relations/edges for other nodes in the graph.
type ProvinceEdges struct {
	// Districts holds the value of the districts edge.
	Districts []*District `json:"districts,omitempty"`
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Tenders holds the value of the tenders edge.
	Tenders []*Tender `json:"tenders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDistricts map[string][]*District
	namedCities    map[string][]*City
	namedTenders   map[string][]*Tender
}

// DistrictsOrErr returns the Districts value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) DistrictsOrErr() ([]*District, error) {
	if e.loadedTypes[0] {
		return e.Districts, nil
	}
	return nil, &NotLoadedError{edge: "districts"}
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[1] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvinceEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// TendersOrErr returns the Tenders value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) TendersOrErr() ([]*Tender, error) {
	if e.loadedTypes[3] {
		return e.Tenders, nil
	}
	return nil, &NotLoadedError{edge: "tenders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Province) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case province.FieldCenter:
			values[i] = new(geo.GeoJson)
		case province.FieldAdcode:
			values[i] = new(sql.NullInt64)
		case province.FieldName:
			values[i] = new(sql.NullString)
		case province.FieldCreatedAt, province.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case province.FieldID, province.FieldCountryID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Province fields.
func (pr *Province) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case province.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case province.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case province.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case province.FieldAdcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field adcode", values[i])
			} else if value.Valid {
				pr.Adcode = int(value.Int64)
			}
		case province.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case province.FieldCenter:
			if value, ok := values[i].(*geo.GeoJson); !ok {
				return fmt.Errorf("unexpected type %T for field center", values[i])
			} else if value != nil {
				pr.Center = value
			}
		case province.FieldCountryID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field country_id", values[i])
			} else if value != nil {
				pr.CountryID = *value
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Province.
// This includes values selected through modifiers, order, etc.
func (pr *Province) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryDistricts queries the "districts" edge of the Province entity.
func (pr *Province) QueryDistricts() *DistrictQuery {
	return NewProvinceClient(pr.config).QueryDistricts(pr)
}

// QueryCities queries the "cities" edge of the Province entity.
func (pr *Province) QueryCities() *CityQuery {
	return NewProvinceClient(pr.config).QueryCities(pr)
}

// QueryCountry queries the "country" edge of the Province entity.
func (pr *Province) QueryCountry() *CountryQuery {
	return NewProvinceClient(pr.config).QueryCountry(pr)
}

// QueryTenders queries the "tenders" edge of the Province entity.
func (pr *Province) QueryTenders() *TenderQuery {
	return NewProvinceClient(pr.config).QueryTenders(pr)
}

// Update returns a builder for updating this Province.
// Note that you need to call Province.Unwrap() before calling this method if this Province
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Province) Update() *ProvinceUpdateOne {
	return NewProvinceClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Province entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Province) Unwrap() *Province {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Province is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Province) String() string {
	var builder strings.Builder
	builder.WriteString("Province(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("adcode=")
	builder.WriteString(fmt.Sprintf("%v", pr.Adcode))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("center=")
	builder.WriteString(fmt.Sprintf("%v", pr.Center))
	builder.WriteString(", ")
	builder.WriteString("country_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CountryID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDistricts returns the Districts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Province) NamedDistricts(name string) ([]*District, error) {
	if pr.Edges.namedDistricts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedDistricts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Province) appendNamedDistricts(name string, edges ...*District) {
	if pr.Edges.namedDistricts == nil {
		pr.Edges.namedDistricts = make(map[string][]*District)
	}
	if len(edges) == 0 {
		pr.Edges.namedDistricts[name] = []*District{}
	} else {
		pr.Edges.namedDistricts[name] = append(pr.Edges.namedDistricts[name], edges...)
	}
}

// NamedCities returns the Cities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Province) NamedCities(name string) ([]*City, error) {
	if pr.Edges.namedCities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedCities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Province) appendNamedCities(name string, edges ...*City) {
	if pr.Edges.namedCities == nil {
		pr.Edges.namedCities = make(map[string][]*City)
	}
	if len(edges) == 0 {
		pr.Edges.namedCities[name] = []*City{}
	} else {
		pr.Edges.namedCities[name] = append(pr.Edges.namedCities[name], edges...)
	}
}

// NamedTenders returns the Tenders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Province) NamedTenders(name string) ([]*Tender, error) {
	if pr.Edges.namedTenders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedTenders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Province) appendNamedTenders(name string, edges ...*Tender) {
	if pr.Edges.namedTenders == nil {
		pr.Edges.namedTenders = make(map[string][]*Tender)
	}
	if len(edges) == 0 {
		pr.Edges.namedTenders[name] = []*Tender{}
	} else {
		pr.Edges.namedTenders[name] = append(pr.Edges.namedTenders[name], edges...)
	}
}

// Provinces is a parsable slice of Province.
type Provinces []*Province
