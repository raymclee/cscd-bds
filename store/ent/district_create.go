// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DistrictCreate is the builder for creating a District entity.
type DistrictCreate struct {
	config
	mutation *DistrictMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DistrictCreate) SetCreatedAt(t time.Time) *DistrictCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DistrictCreate) SetNillableCreatedAt(t *time.Time) *DistrictCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DistrictCreate) SetUpdatedAt(t time.Time) *DistrictCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DistrictCreate) SetNillableUpdatedAt(t *time.Time) *DistrictCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetAdcode sets the "adcode" field.
func (dc *DistrictCreate) SetAdcode(i int) *DistrictCreate {
	dc.mutation.SetAdcode(i)
	return dc
}

// SetProvCode sets the "prov_code" field.
func (dc *DistrictCreate) SetProvCode(i int) *DistrictCreate {
	dc.mutation.SetProvCode(i)
	return dc
}

// SetCityCode sets the "city_code" field.
func (dc *DistrictCreate) SetCityCode(i int) *DistrictCreate {
	dc.mutation.SetCityCode(i)
	return dc
}

// SetName sets the "name" field.
func (dc *DistrictCreate) SetName(s string) *DistrictCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetCenter sets the "center" field.
func (dc *DistrictCreate) SetCenter(gj *geo.GeoJson) *DistrictCreate {
	dc.mutation.SetCenter(gj)
	return dc
}

// SetProvinceID sets the "province_id" field.
func (dc *DistrictCreate) SetProvinceID(x xid.ID) *DistrictCreate {
	dc.mutation.SetProvinceID(x)
	return dc
}

// SetCityID sets the "city_id" field.
func (dc *DistrictCreate) SetCityID(x xid.ID) *DistrictCreate {
	dc.mutation.SetCityID(x)
	return dc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (dc *DistrictCreate) SetNillableCityID(x *xid.ID) *DistrictCreate {
	if x != nil {
		dc.SetCityID(*x)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DistrictCreate) SetID(x xid.ID) *DistrictCreate {
	dc.mutation.SetID(x)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DistrictCreate) SetNillableID(x *xid.ID) *DistrictCreate {
	if x != nil {
		dc.SetID(*x)
	}
	return dc
}

// SetProvince sets the "province" edge to the Province entity.
func (dc *DistrictCreate) SetProvince(p *Province) *DistrictCreate {
	return dc.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (dc *DistrictCreate) SetCity(c *City) *DistrictCreate {
	return dc.SetCityID(c.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (dc *DistrictCreate) AddTenderIDs(ids ...xid.ID) *DistrictCreate {
	dc.mutation.AddTenderIDs(ids...)
	return dc
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (dc *DistrictCreate) AddTenders(t ...*Tender) *DistrictCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTenderIDs(ids...)
}

// AddPlotIDs adds the "plots" edge to the Plot entity by IDs.
func (dc *DistrictCreate) AddPlotIDs(ids ...xid.ID) *DistrictCreate {
	dc.mutation.AddPlotIDs(ids...)
	return dc
}

// AddPlots adds the "plots" edges to the Plot entity.
func (dc *DistrictCreate) AddPlots(p ...*Plot) *DistrictCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dc.AddPlotIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (dc *DistrictCreate) Mutation() *DistrictMutation {
	return dc.mutation
}

// Save creates the District in the database.
func (dc *DistrictCreate) Save(ctx context.Context) (*District, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DistrictCreate) SaveX(ctx context.Context) *District {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DistrictCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DistrictCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DistrictCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := district.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := district.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := district.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DistrictCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "District.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "District.updated_at"`)}
	}
	if _, ok := dc.mutation.Adcode(); !ok {
		return &ValidationError{Name: "adcode", err: errors.New(`ent: missing required field "District.adcode"`)}
	}
	if _, ok := dc.mutation.ProvCode(); !ok {
		return &ValidationError{Name: "prov_code", err: errors.New(`ent: missing required field "District.prov_code"`)}
	}
	if _, ok := dc.mutation.CityCode(); !ok {
		return &ValidationError{Name: "city_code", err: errors.New(`ent: missing required field "District.city_code"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "District.name"`)}
	}
	if _, ok := dc.mutation.Center(); !ok {
		return &ValidationError{Name: "center", err: errors.New(`ent: missing required field "District.center"`)}
	}
	if _, ok := dc.mutation.ProvinceID(); !ok {
		return &ValidationError{Name: "province_id", err: errors.New(`ent: missing required field "District.province_id"`)}
	}
	if len(dc.mutation.ProvinceIDs()) == 0 {
		return &ValidationError{Name: "province", err: errors.New(`ent: missing required edge "District.province"`)}
	}
	return nil
}

func (dc *DistrictCreate) sqlSave(ctx context.Context) (*District, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DistrictCreate) createSpec() (*District, *sqlgraph.CreateSpec) {
	var (
		_node = &District{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(district.Table, sqlgraph.NewFieldSpec(district.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(district.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(district.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Adcode(); ok {
		_spec.SetField(district.FieldAdcode, field.TypeInt, value)
		_node.Adcode = value
	}
	if value, ok := dc.mutation.ProvCode(); ok {
		_spec.SetField(district.FieldProvCode, field.TypeInt, value)
		_node.ProvCode = value
	}
	if value, ok := dc.mutation.CityCode(); ok {
		_spec.SetField(district.FieldCityCode, field.TypeInt, value)
		_node.CityCode = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(district.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Center(); ok {
		_spec.SetField(district.FieldCenter, field.TypeOther, value)
		_node.Center = value
	}
	if nodes := dc.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.ProvinceTable,
			Columns: []string{district.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProvinceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.CityTable,
			Columns: []string{district.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.TendersTable,
			Columns: []string{district.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PlotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.PlotsTable,
			Columns: []string{district.PlotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plot.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.District.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DistrictUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dc *DistrictCreate) OnConflict(opts ...sql.ConflictOption) *DistrictUpsertOne {
	dc.conflict = opts
	return &DistrictUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.District.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DistrictCreate) OnConflictColumns(columns ...string) *DistrictUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DistrictUpsertOne{
		create: dc,
	}
}

type (
	// DistrictUpsertOne is the builder for "upsert"-ing
	//  one District node.
	DistrictUpsertOne struct {
		create *DistrictCreate
	}

	// DistrictUpsert is the "OnConflict" setter.
	DistrictUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DistrictUpsert) SetUpdatedAt(v time.Time) *DistrictUpsert {
	u.Set(district.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateUpdatedAt() *DistrictUpsert {
	u.SetExcluded(district.FieldUpdatedAt)
	return u
}

// SetAdcode sets the "adcode" field.
func (u *DistrictUpsert) SetAdcode(v int) *DistrictUpsert {
	u.Set(district.FieldAdcode, v)
	return u
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateAdcode() *DistrictUpsert {
	u.SetExcluded(district.FieldAdcode)
	return u
}

// AddAdcode adds v to the "adcode" field.
func (u *DistrictUpsert) AddAdcode(v int) *DistrictUpsert {
	u.Add(district.FieldAdcode, v)
	return u
}

// SetProvCode sets the "prov_code" field.
func (u *DistrictUpsert) SetProvCode(v int) *DistrictUpsert {
	u.Set(district.FieldProvCode, v)
	return u
}

// UpdateProvCode sets the "prov_code" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateProvCode() *DistrictUpsert {
	u.SetExcluded(district.FieldProvCode)
	return u
}

// AddProvCode adds v to the "prov_code" field.
func (u *DistrictUpsert) AddProvCode(v int) *DistrictUpsert {
	u.Add(district.FieldProvCode, v)
	return u
}

// SetCityCode sets the "city_code" field.
func (u *DistrictUpsert) SetCityCode(v int) *DistrictUpsert {
	u.Set(district.FieldCityCode, v)
	return u
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateCityCode() *DistrictUpsert {
	u.SetExcluded(district.FieldCityCode)
	return u
}

// AddCityCode adds v to the "city_code" field.
func (u *DistrictUpsert) AddCityCode(v int) *DistrictUpsert {
	u.Add(district.FieldCityCode, v)
	return u
}

// SetName sets the "name" field.
func (u *DistrictUpsert) SetName(v string) *DistrictUpsert {
	u.Set(district.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateName() *DistrictUpsert {
	u.SetExcluded(district.FieldName)
	return u
}

// SetCenter sets the "center" field.
func (u *DistrictUpsert) SetCenter(v *geo.GeoJson) *DistrictUpsert {
	u.Set(district.FieldCenter, v)
	return u
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateCenter() *DistrictUpsert {
	u.SetExcluded(district.FieldCenter)
	return u
}

// SetProvinceID sets the "province_id" field.
func (u *DistrictUpsert) SetProvinceID(v xid.ID) *DistrictUpsert {
	u.Set(district.FieldProvinceID, v)
	return u
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateProvinceID() *DistrictUpsert {
	u.SetExcluded(district.FieldProvinceID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *DistrictUpsert) SetCityID(v xid.ID) *DistrictUpsert {
	u.Set(district.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *DistrictUpsert) UpdateCityID() *DistrictUpsert {
	u.SetExcluded(district.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *DistrictUpsert) ClearCityID() *DistrictUpsert {
	u.SetNull(district.FieldCityID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.District.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(district.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DistrictUpsertOne) UpdateNewValues() *DistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(district.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(district.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.District.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DistrictUpsertOne) Ignore() *DistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DistrictUpsertOne) DoNothing() *DistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DistrictCreate.OnConflict
// documentation for more info.
func (u *DistrictUpsertOne) Update(set func(*DistrictUpsert)) *DistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DistrictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DistrictUpsertOne) SetUpdatedAt(v time.Time) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateUpdatedAt() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAdcode sets the "adcode" field.
func (u *DistrictUpsertOne) SetAdcode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetAdcode(v)
	})
}

// AddAdcode adds v to the "adcode" field.
func (u *DistrictUpsertOne) AddAdcode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.AddAdcode(v)
	})
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateAdcode() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateAdcode()
	})
}

// SetProvCode sets the "prov_code" field.
func (u *DistrictUpsertOne) SetProvCode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetProvCode(v)
	})
}

// AddProvCode adds v to the "prov_code" field.
func (u *DistrictUpsertOne) AddProvCode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.AddProvCode(v)
	})
}

// UpdateProvCode sets the "prov_code" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateProvCode() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateProvCode()
	})
}

// SetCityCode sets the "city_code" field.
func (u *DistrictUpsertOne) SetCityCode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCityCode(v)
	})
}

// AddCityCode adds v to the "city_code" field.
func (u *DistrictUpsertOne) AddCityCode(v int) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.AddCityCode(v)
	})
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateCityCode() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCityCode()
	})
}

// SetName sets the "name" field.
func (u *DistrictUpsertOne) SetName(v string) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateName() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateName()
	})
}

// SetCenter sets the "center" field.
func (u *DistrictUpsertOne) SetCenter(v *geo.GeoJson) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCenter(v)
	})
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateCenter() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCenter()
	})
}

// SetProvinceID sets the "province_id" field.
func (u *DistrictUpsertOne) SetProvinceID(v xid.ID) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetProvinceID(v)
	})
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateProvinceID() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateProvinceID()
	})
}

// SetCityID sets the "city_id" field.
func (u *DistrictUpsertOne) SetCityID(v xid.ID) *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *DistrictUpsertOne) UpdateCityID() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *DistrictUpsertOne) ClearCityID() *DistrictUpsertOne {
	return u.Update(func(s *DistrictUpsert) {
		s.ClearCityID()
	})
}

// Exec executes the query.
func (u *DistrictUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DistrictCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DistrictUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DistrictUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DistrictUpsertOne.ID is not supported by MySQL driver. Use DistrictUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DistrictUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DistrictCreateBulk is the builder for creating many District entities in bulk.
type DistrictCreateBulk struct {
	config
	err      error
	builders []*DistrictCreate
	conflict []sql.ConflictOption
}

// Save creates the District entities in the database.
func (dcb *DistrictCreateBulk) Save(ctx context.Context) ([]*District, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*District, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DistrictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DistrictCreateBulk) SaveX(ctx context.Context) []*District {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DistrictCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DistrictCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.District.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DistrictUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dcb *DistrictCreateBulk) OnConflict(opts ...sql.ConflictOption) *DistrictUpsertBulk {
	dcb.conflict = opts
	return &DistrictUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.District.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DistrictCreateBulk) OnConflictColumns(columns ...string) *DistrictUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DistrictUpsertBulk{
		create: dcb,
	}
}

// DistrictUpsertBulk is the builder for "upsert"-ing
// a bulk of District nodes.
type DistrictUpsertBulk struct {
	create *DistrictCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.District.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(district.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DistrictUpsertBulk) UpdateNewValues() *DistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(district.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(district.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.District.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DistrictUpsertBulk) Ignore() *DistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DistrictUpsertBulk) DoNothing() *DistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DistrictCreateBulk.OnConflict
// documentation for more info.
func (u *DistrictUpsertBulk) Update(set func(*DistrictUpsert)) *DistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DistrictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DistrictUpsertBulk) SetUpdatedAt(v time.Time) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateUpdatedAt() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAdcode sets the "adcode" field.
func (u *DistrictUpsertBulk) SetAdcode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetAdcode(v)
	})
}

// AddAdcode adds v to the "adcode" field.
func (u *DistrictUpsertBulk) AddAdcode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.AddAdcode(v)
	})
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateAdcode() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateAdcode()
	})
}

// SetProvCode sets the "prov_code" field.
func (u *DistrictUpsertBulk) SetProvCode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetProvCode(v)
	})
}

// AddProvCode adds v to the "prov_code" field.
func (u *DistrictUpsertBulk) AddProvCode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.AddProvCode(v)
	})
}

// UpdateProvCode sets the "prov_code" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateProvCode() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateProvCode()
	})
}

// SetCityCode sets the "city_code" field.
func (u *DistrictUpsertBulk) SetCityCode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCityCode(v)
	})
}

// AddCityCode adds v to the "city_code" field.
func (u *DistrictUpsertBulk) AddCityCode(v int) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.AddCityCode(v)
	})
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateCityCode() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCityCode()
	})
}

// SetName sets the "name" field.
func (u *DistrictUpsertBulk) SetName(v string) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateName() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateName()
	})
}

// SetCenter sets the "center" field.
func (u *DistrictUpsertBulk) SetCenter(v *geo.GeoJson) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCenter(v)
	})
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateCenter() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCenter()
	})
}

// SetProvinceID sets the "province_id" field.
func (u *DistrictUpsertBulk) SetProvinceID(v xid.ID) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetProvinceID(v)
	})
}

// UpdateProvinceID sets the "province_id" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateProvinceID() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateProvinceID()
	})
}

// SetCityID sets the "city_id" field.
func (u *DistrictUpsertBulk) SetCityID(v xid.ID) *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *DistrictUpsertBulk) UpdateCityID() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *DistrictUpsertBulk) ClearCityID() *DistrictUpsertBulk {
	return u.Update(func(s *DistrictUpsert) {
		s.ClearCityID()
	})
}

// Exec executes the query.
func (u *DistrictUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DistrictCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DistrictCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DistrictUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
