// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Area is the model entity for the Area schema.
type Area struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Center holds the value of the "center" field.
	Center *geo.GeoJson `json:"center,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AreaQuery when eager-loading is set.
	Edges        AreaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AreaEdges holds the relations/edges for other nodes in the graph.
type AreaEdges struct {
	// Customers holds the value of the customers edge.
	Customers []*Customer `json:"customers,omitempty"`
	// Tenders holds the value of the tenders edge.
	Tenders []*Tender `json:"tenders,omitempty"`
	// Sales holds the value of the sales edge.
	Sales []*User `json:"sales,omitempty"`
	// Provinces holds the value of the provinces edge.
	Provinces []*Province `json:"provinces,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedCustomers map[string][]*Customer
	namedTenders   map[string][]*Tender
	namedSales     map[string][]*User
	namedProvinces map[string][]*Province
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e AreaEdges) CustomersOrErr() ([]*Customer, error) {
	if e.loadedTypes[0] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// TendersOrErr returns the Tenders value or an error if the edge
// was not loaded in eager-loading.
func (e AreaEdges) TendersOrErr() ([]*Tender, error) {
	if e.loadedTypes[1] {
		return e.Tenders, nil
	}
	return nil, &NotLoadedError{edge: "tenders"}
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading.
func (e AreaEdges) SalesOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Sales, nil
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// ProvincesOrErr returns the Provinces value or an error if the edge
// was not loaded in eager-loading.
func (e AreaEdges) ProvincesOrErr() ([]*Province, error) {
	if e.loadedTypes[3] {
		return e.Provinces, nil
	}
	return nil, &NotLoadedError{edge: "provinces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Area) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case area.FieldCenter:
			values[i] = new(geo.GeoJson)
		case area.FieldName, area.FieldCode:
			values[i] = new(sql.NullString)
		case area.FieldCreatedAt, area.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case area.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Area fields.
func (a *Area) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case area.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case area.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case area.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case area.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case area.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				a.Code = value.String
			}
		case area.FieldCenter:
			if value, ok := values[i].(*geo.GeoJson); !ok {
				return fmt.Errorf("unexpected type %T for field center", values[i])
			} else if value != nil {
				a.Center = value
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Area.
// This includes values selected through modifiers, order, etc.
func (a *Area) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryCustomers queries the "customers" edge of the Area entity.
func (a *Area) QueryCustomers() *CustomerQuery {
	return NewAreaClient(a.config).QueryCustomers(a)
}

// QueryTenders queries the "tenders" edge of the Area entity.
func (a *Area) QueryTenders() *TenderQuery {
	return NewAreaClient(a.config).QueryTenders(a)
}

// QuerySales queries the "sales" edge of the Area entity.
func (a *Area) QuerySales() *UserQuery {
	return NewAreaClient(a.config).QuerySales(a)
}

// QueryProvinces queries the "provinces" edge of the Area entity.
func (a *Area) QueryProvinces() *ProvinceQuery {
	return NewAreaClient(a.config).QueryProvinces(a)
}

// Update returns a builder for updating this Area.
// Note that you need to call Area.Unwrap() before calling this method if this Area
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Area) Update() *AreaUpdateOne {
	return NewAreaClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Area entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Area) Unwrap() *Area {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Area is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Area) String() string {
	var builder strings.Builder
	builder.WriteString("Area(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(a.Code)
	builder.WriteString(", ")
	builder.WriteString("center=")
	builder.WriteString(fmt.Sprintf("%v", a.Center))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCustomers returns the Customers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Area) NamedCustomers(name string) ([]*Customer, error) {
	if a.Edges.namedCustomers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedCustomers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Area) appendNamedCustomers(name string, edges ...*Customer) {
	if a.Edges.namedCustomers == nil {
		a.Edges.namedCustomers = make(map[string][]*Customer)
	}
	if len(edges) == 0 {
		a.Edges.namedCustomers[name] = []*Customer{}
	} else {
		a.Edges.namedCustomers[name] = append(a.Edges.namedCustomers[name], edges...)
	}
}

// NamedTenders returns the Tenders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Area) NamedTenders(name string) ([]*Tender, error) {
	if a.Edges.namedTenders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedTenders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Area) appendNamedTenders(name string, edges ...*Tender) {
	if a.Edges.namedTenders == nil {
		a.Edges.namedTenders = make(map[string][]*Tender)
	}
	if len(edges) == 0 {
		a.Edges.namedTenders[name] = []*Tender{}
	} else {
		a.Edges.namedTenders[name] = append(a.Edges.namedTenders[name], edges...)
	}
}

// NamedSales returns the Sales named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Area) NamedSales(name string) ([]*User, error) {
	if a.Edges.namedSales == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedSales[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Area) appendNamedSales(name string, edges ...*User) {
	if a.Edges.namedSales == nil {
		a.Edges.namedSales = make(map[string][]*User)
	}
	if len(edges) == 0 {
		a.Edges.namedSales[name] = []*User{}
	} else {
		a.Edges.namedSales[name] = append(a.Edges.namedSales[name], edges...)
	}
}

// NamedProvinces returns the Provinces named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Area) NamedProvinces(name string) ([]*Province, error) {
	if a.Edges.namedProvinces == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedProvinces[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Area) appendNamedProvinces(name string, edges ...*Province) {
	if a.Edges.namedProvinces == nil {
		a.Edges.namedProvinces = make(map[string][]*Province)
	}
	if len(edges) == 0 {
		a.Edges.namedProvinces[name] = []*Province{}
	} else {
		a.Edges.namedProvinces[name] = append(a.Edges.namedProvinces[name], edges...)
	}
}

// Areas is a parsable slice of Area.
type Areas []*Area
