// Code generated by ent, DO NOT EDIT.

package province

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the province type in the database.
	Label = "province"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAdcode holds the string denoting the adcode field in the database.
	FieldAdcode = "adcode"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCenter holds the string denoting the center field in the database.
	FieldCenter = "center"
	// FieldCountryID holds the string denoting the country_id field in the database.
	FieldCountryID = "country_id"
	// EdgeDistricts holds the string denoting the districts edge name in mutations.
	EdgeDistricts = "districts"
	// EdgeCities holds the string denoting the cities edge name in mutations.
	EdgeCities = "cities"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// Table holds the table name of the province in the database.
	Table = "provinces"
	// DistrictsTable is the table that holds the districts relation/edge.
	DistrictsTable = "districts"
	// DistrictsInverseTable is the table name for the District entity.
	// It exists in this package in order to avoid circular dependency with the "district" package.
	DistrictsInverseTable = "districts"
	// DistrictsColumn is the table column denoting the districts relation/edge.
	DistrictsColumn = "province_id"
	// CitiesTable is the table that holds the cities relation/edge.
	CitiesTable = "cities"
	// CitiesInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CitiesInverseTable = "cities"
	// CitiesColumn is the table column denoting the cities relation/edge.
	CitiesColumn = "province_id"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "provinces"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_id"
)

// Columns holds all SQL columns for province fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAdcode,
	FieldName,
	FieldCenter,
	FieldCountryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Province queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAdcode orders the results by the adcode field.
func ByAdcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdcode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCenter orders the results by the center field.
func ByCenter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenter, opts...).ToFunc()
}

// ByCountryID orders the results by the country_id field.
func ByCountryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryID, opts...).ToFunc()
}

// ByDistrictsCount orders the results by districts count.
func ByDistrictsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDistrictsStep(), opts...)
	}
}

// ByDistricts orders the results by districts terms.
func ByDistricts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDistrictsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCitiesCount orders the results by cities count.
func ByCitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCitiesStep(), opts...)
	}
}

// ByCities orders the results by cities terms.
func ByCities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}
func newDistrictsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DistrictsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DistrictsTable, DistrictsColumn),
	)
}
func newCitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CitiesTable, CitiesColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
	)
}
