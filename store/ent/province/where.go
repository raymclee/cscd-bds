// Code generated by ent, DO NOT EDIT.

package province

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldUpdatedAt, v))
}

// Adcode applies equality check predicate on the "adcode" field. It's identical to AdcodeEQ.
func Adcode(v int) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldAdcode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldName, v))
}

// Center applies equality check predicate on the "center" field. It's identical to CenterEQ.
func Center(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCenter, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCountryID, v))
}

// AreaID applies equality check predicate on the "area_id" field. It's identical to AreaIDEQ.
func AreaID(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldAreaID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldUpdatedAt, v))
}

// AdcodeEQ applies the EQ predicate on the "adcode" field.
func AdcodeEQ(v int) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldAdcode, v))
}

// AdcodeNEQ applies the NEQ predicate on the "adcode" field.
func AdcodeNEQ(v int) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldAdcode, v))
}

// AdcodeIn applies the In predicate on the "adcode" field.
func AdcodeIn(vs ...int) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldAdcode, vs...))
}

// AdcodeNotIn applies the NotIn predicate on the "adcode" field.
func AdcodeNotIn(vs ...int) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldAdcode, vs...))
}

// AdcodeGT applies the GT predicate on the "adcode" field.
func AdcodeGT(v int) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldAdcode, v))
}

// AdcodeGTE applies the GTE predicate on the "adcode" field.
func AdcodeGTE(v int) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldAdcode, v))
}

// AdcodeLT applies the LT predicate on the "adcode" field.
func AdcodeLT(v int) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldAdcode, v))
}

// AdcodeLTE applies the LTE predicate on the "adcode" field.
func AdcodeLTE(v int) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldAdcode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Province {
	return predicate.Province(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Province {
	return predicate.Province(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Province {
	return predicate.Province(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Province {
	return predicate.Province(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Province {
	return predicate.Province(sql.FieldContainsFold(FieldName, v))
}

// CenterEQ applies the EQ predicate on the "center" field.
func CenterEQ(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCenter, v))
}

// CenterNEQ applies the NEQ predicate on the "center" field.
func CenterNEQ(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldCenter, v))
}

// CenterIn applies the In predicate on the "center" field.
func CenterIn(vs ...*geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldCenter, vs...))
}

// CenterNotIn applies the NotIn predicate on the "center" field.
func CenterNotIn(vs ...*geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldCenter, vs...))
}

// CenterGT applies the GT predicate on the "center" field.
func CenterGT(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldCenter, v))
}

// CenterGTE applies the GTE predicate on the "center" field.
func CenterGTE(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldCenter, v))
}

// CenterLT applies the LT predicate on the "center" field.
func CenterLT(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldCenter, v))
}

// CenterLTE applies the LTE predicate on the "center" field.
func CenterLTE(v *geo.GeoJson) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldCenter, v))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDGT applies the GT predicate on the "country_id" field.
func CountryIDGT(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldCountryID, v))
}

// CountryIDGTE applies the GTE predicate on the "country_id" field.
func CountryIDGTE(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldCountryID, v))
}

// CountryIDLT applies the LT predicate on the "country_id" field.
func CountryIDLT(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldCountryID, v))
}

// CountryIDLTE applies the LTE predicate on the "country_id" field.
func CountryIDLTE(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldCountryID, v))
}

// CountryIDContains applies the Contains predicate on the "country_id" field.
func CountryIDContains(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldContains(FieldCountryID, vc))
}

// CountryIDHasPrefix applies the HasPrefix predicate on the "country_id" field.
func CountryIDHasPrefix(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldHasPrefix(FieldCountryID, vc))
}

// CountryIDHasSuffix applies the HasSuffix predicate on the "country_id" field.
func CountryIDHasSuffix(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldHasSuffix(FieldCountryID, vc))
}

// CountryIDEqualFold applies the EqualFold predicate on the "country_id" field.
func CountryIDEqualFold(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldEqualFold(FieldCountryID, vc))
}

// CountryIDContainsFold applies the ContainsFold predicate on the "country_id" field.
func CountryIDContainsFold(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldContainsFold(FieldCountryID, vc))
}

// AreaIDEQ applies the EQ predicate on the "area_id" field.
func AreaIDEQ(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldEQ(FieldAreaID, v))
}

// AreaIDNEQ applies the NEQ predicate on the "area_id" field.
func AreaIDNEQ(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNEQ(FieldAreaID, v))
}

// AreaIDIn applies the In predicate on the "area_id" field.
func AreaIDIn(vs ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldIn(FieldAreaID, vs...))
}

// AreaIDNotIn applies the NotIn predicate on the "area_id" field.
func AreaIDNotIn(vs ...xid.ID) predicate.Province {
	return predicate.Province(sql.FieldNotIn(FieldAreaID, vs...))
}

// AreaIDGT applies the GT predicate on the "area_id" field.
func AreaIDGT(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGT(FieldAreaID, v))
}

// AreaIDGTE applies the GTE predicate on the "area_id" field.
func AreaIDGTE(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldGTE(FieldAreaID, v))
}

// AreaIDLT applies the LT predicate on the "area_id" field.
func AreaIDLT(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLT(FieldAreaID, v))
}

// AreaIDLTE applies the LTE predicate on the "area_id" field.
func AreaIDLTE(v xid.ID) predicate.Province {
	return predicate.Province(sql.FieldLTE(FieldAreaID, v))
}

// AreaIDContains applies the Contains predicate on the "area_id" field.
func AreaIDContains(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldContains(FieldAreaID, vc))
}

// AreaIDHasPrefix applies the HasPrefix predicate on the "area_id" field.
func AreaIDHasPrefix(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldHasPrefix(FieldAreaID, vc))
}

// AreaIDHasSuffix applies the HasSuffix predicate on the "area_id" field.
func AreaIDHasSuffix(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldHasSuffix(FieldAreaID, vc))
}

// AreaIDIsNil applies the IsNil predicate on the "area_id" field.
func AreaIDIsNil() predicate.Province {
	return predicate.Province(sql.FieldIsNull(FieldAreaID))
}

// AreaIDNotNil applies the NotNil predicate on the "area_id" field.
func AreaIDNotNil() predicate.Province {
	return predicate.Province(sql.FieldNotNull(FieldAreaID))
}

// AreaIDEqualFold applies the EqualFold predicate on the "area_id" field.
func AreaIDEqualFold(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldEqualFold(FieldAreaID, vc))
}

// AreaIDContainsFold applies the ContainsFold predicate on the "area_id" field.
func AreaIDContainsFold(v xid.ID) predicate.Province {
	vc := string(v)
	return predicate.Province(sql.FieldContainsFold(FieldAreaID, vc))
}

// HasDistricts applies the HasEdge predicate on the "districts" edge.
func HasDistricts() predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DistrictsTable, DistrictsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictsWith applies the HasEdge predicate on the "districts" edge with a given conditions (other predicates).
func HasDistrictsWith(preds ...predicate.District) predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := newDistrictsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCities applies the HasEdge predicate on the "cities" edge.
func HasCities() predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CitiesTable, CitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCitiesWith applies the HasEdge predicate on the "cities" edge with a given conditions (other predicates).
func HasCitiesWith(preds ...predicate.City) predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := newCitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenders applies the HasEdge predicate on the "tenders" edge.
func HasTenders() predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTendersWith applies the HasEdge predicate on the "tenders" edge with a given conditions (other predicates).
func HasTendersWith(preds ...predicate.Tender) predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := newTendersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArea applies the HasEdge predicate on the "area" edge.
func HasArea() predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaWith applies the HasEdge predicate on the "area" edge with a given conditions (other predicates).
func HasAreaWith(preds ...predicate.Area) predicate.Province {
	return predicate.Province(func(s *sql.Selector) {
		step := newAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Province) predicate.Province {
	return predicate.Province(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Province) predicate.Province {
	return predicate.Province(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Province) predicate.Province {
	return predicate.Province(sql.NotPredicates(p))
}
