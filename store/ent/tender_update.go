// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TenderUpdate is the builder for updating Tender entities.
type TenderUpdate struct {
	config
	hooks    []Hook
	mutation *TenderMutation
}

// Where appends a list predicates to the TenderUpdate builder.
func (tu *TenderUpdate) Where(ps ...predicate.Tender) *TenderUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenderUpdate) SetUpdatedAt(t time.Time) *TenderUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetCode sets the "code" field.
func (tu *TenderUpdate) SetCode(s string) *TenderUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCode(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TenderUpdate) SetStatus(i int8) *TenderUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableStatus(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TenderUpdate) AddStatus(i int8) *TenderUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetName sets the "name" field.
func (tu *TenderUpdate) SetName(s string) *TenderUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableName(s *string) *TenderUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tu *TenderUpdate) SetEstimatedAmount(f float64) *TenderUpdate {
	tu.mutation.ResetEstimatedAmount()
	tu.mutation.SetEstimatedAmount(f)
	return tu
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableEstimatedAmount(f *float64) *TenderUpdate {
	if f != nil {
		tu.SetEstimatedAmount(*f)
	}
	return tu
}

// AddEstimatedAmount adds f to the "estimated_amount" field.
func (tu *TenderUpdate) AddEstimatedAmount(f float64) *TenderUpdate {
	tu.mutation.AddEstimatedAmount(f)
	return tu
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (tu *TenderUpdate) ClearEstimatedAmount() *TenderUpdate {
	tu.mutation.ClearEstimatedAmount()
	return tu
}

// SetTenderDate sets the "tender_date" field.
func (tu *TenderUpdate) SetTenderDate(t time.Time) *TenderUpdate {
	tu.mutation.SetTenderDate(t)
	return tu
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTenderDate(t *time.Time) *TenderUpdate {
	if t != nil {
		tu.SetTenderDate(*t)
	}
	return tu
}

// ClearTenderDate clears the value of the "tender_date" field.
func (tu *TenderUpdate) ClearTenderDate() *TenderUpdate {
	tu.mutation.ClearTenderDate()
	return tu
}

// SetDiscoveryDate sets the "discovery_date" field.
func (tu *TenderUpdate) SetDiscoveryDate(t time.Time) *TenderUpdate {
	tu.mutation.SetDiscoveryDate(t)
	return tu
}

// SetNillableDiscoveryDate sets the "discovery_date" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableDiscoveryDate(t *time.Time) *TenderUpdate {
	if t != nil {
		tu.SetDiscoveryDate(*t)
	}
	return tu
}

// SetAddress sets the "address" field.
func (tu *TenderUpdate) SetAddress(s string) *TenderUpdate {
	tu.mutation.SetAddress(s)
	return tu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableAddress(s *string) *TenderUpdate {
	if s != nil {
		tu.SetAddress(*s)
	}
	return tu
}

// ClearAddress clears the value of the "address" field.
func (tu *TenderUpdate) ClearAddress() *TenderUpdate {
	tu.mutation.ClearAddress()
	return tu
}

// SetFullAddress sets the "full_address" field.
func (tu *TenderUpdate) SetFullAddress(s string) *TenderUpdate {
	tu.mutation.SetFullAddress(s)
	return tu
}

// SetNillableFullAddress sets the "full_address" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableFullAddress(s *string) *TenderUpdate {
	if s != nil {
		tu.SetFullAddress(*s)
	}
	return tu
}

// ClearFullAddress clears the value of the "full_address" field.
func (tu *TenderUpdate) ClearFullAddress() *TenderUpdate {
	tu.mutation.ClearFullAddress()
	return tu
}

// SetContractor sets the "contractor" field.
func (tu *TenderUpdate) SetContractor(s string) *TenderUpdate {
	tu.mutation.SetContractor(s)
	return tu
}

// SetNillableContractor sets the "contractor" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableContractor(s *string) *TenderUpdate {
	if s != nil {
		tu.SetContractor(*s)
	}
	return tu
}

// ClearContractor clears the value of the "contractor" field.
func (tu *TenderUpdate) ClearContractor() *TenderUpdate {
	tu.mutation.ClearContractor()
	return tu
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tu *TenderUpdate) SetSizeAndValueRating(i int8) *TenderUpdate {
	tu.mutation.ResetSizeAndValueRating()
	tu.mutation.SetSizeAndValueRating(i)
	return tu
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableSizeAndValueRating(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetSizeAndValueRating(*i)
	}
	return tu
}

// AddSizeAndValueRating adds i to the "size_and_value_rating" field.
func (tu *TenderUpdate) AddSizeAndValueRating(i int8) *TenderUpdate {
	tu.mutation.AddSizeAndValueRating(i)
	return tu
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (tu *TenderUpdate) ClearSizeAndValueRating() *TenderUpdate {
	tu.mutation.ClearSizeAndValueRating()
	return tu
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (tu *TenderUpdate) SetSizeAndValueRatingOverview(s string) *TenderUpdate {
	tu.mutation.SetSizeAndValueRatingOverview(s)
	return tu
}

// SetNillableSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableSizeAndValueRatingOverview(s *string) *TenderUpdate {
	if s != nil {
		tu.SetSizeAndValueRatingOverview(*s)
	}
	return tu
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (tu *TenderUpdate) ClearSizeAndValueRatingOverview() *TenderUpdate {
	tu.mutation.ClearSizeAndValueRatingOverview()
	return tu
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tu *TenderUpdate) SetCreditAndPaymentRating(i int8) *TenderUpdate {
	tu.mutation.ResetCreditAndPaymentRating()
	tu.mutation.SetCreditAndPaymentRating(i)
	return tu
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCreditAndPaymentRating(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetCreditAndPaymentRating(*i)
	}
	return tu
}

// AddCreditAndPaymentRating adds i to the "credit_and_payment_rating" field.
func (tu *TenderUpdate) AddCreditAndPaymentRating(i int8) *TenderUpdate {
	tu.mutation.AddCreditAndPaymentRating(i)
	return tu
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (tu *TenderUpdate) ClearCreditAndPaymentRating() *TenderUpdate {
	tu.mutation.ClearCreditAndPaymentRating()
	return tu
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (tu *TenderUpdate) SetCreditAndPaymentRatingOverview(s string) *TenderUpdate {
	tu.mutation.SetCreditAndPaymentRatingOverview(s)
	return tu
}

// SetNillableCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCreditAndPaymentRatingOverview(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCreditAndPaymentRatingOverview(*s)
	}
	return tu
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (tu *TenderUpdate) ClearCreditAndPaymentRatingOverview() *TenderUpdate {
	tu.mutation.ClearCreditAndPaymentRatingOverview()
	return tu
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tu *TenderUpdate) SetTimeLimitRating(i int8) *TenderUpdate {
	tu.mutation.ResetTimeLimitRating()
	tu.mutation.SetTimeLimitRating(i)
	return tu
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTimeLimitRating(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetTimeLimitRating(*i)
	}
	return tu
}

// AddTimeLimitRating adds i to the "time_limit_rating" field.
func (tu *TenderUpdate) AddTimeLimitRating(i int8) *TenderUpdate {
	tu.mutation.AddTimeLimitRating(i)
	return tu
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (tu *TenderUpdate) ClearTimeLimitRating() *TenderUpdate {
	tu.mutation.ClearTimeLimitRating()
	return tu
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (tu *TenderUpdate) SetTimeLimitRatingOverview(s string) *TenderUpdate {
	tu.mutation.SetTimeLimitRatingOverview(s)
	return tu
}

// SetNillableTimeLimitRatingOverview sets the "time_limit_rating_overview" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTimeLimitRatingOverview(s *string) *TenderUpdate {
	if s != nil {
		tu.SetTimeLimitRatingOverview(*s)
	}
	return tu
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (tu *TenderUpdate) ClearTimeLimitRatingOverview() *TenderUpdate {
	tu.mutation.ClearTimeLimitRatingOverview()
	return tu
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tu *TenderUpdate) SetCustomerRelationshipRating(i int8) *TenderUpdate {
	tu.mutation.ResetCustomerRelationshipRating()
	tu.mutation.SetCustomerRelationshipRating(i)
	return tu
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCustomerRelationshipRating(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetCustomerRelationshipRating(*i)
	}
	return tu
}

// AddCustomerRelationshipRating adds i to the "customer_relationship_rating" field.
func (tu *TenderUpdate) AddCustomerRelationshipRating(i int8) *TenderUpdate {
	tu.mutation.AddCustomerRelationshipRating(i)
	return tu
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (tu *TenderUpdate) ClearCustomerRelationshipRating() *TenderUpdate {
	tu.mutation.ClearCustomerRelationshipRating()
	return tu
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (tu *TenderUpdate) SetCustomerRelationshipRatingOverview(s string) *TenderUpdate {
	tu.mutation.SetCustomerRelationshipRatingOverview(s)
	return tu
}

// SetNillableCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCustomerRelationshipRatingOverview(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCustomerRelationshipRatingOverview(*s)
	}
	return tu
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (tu *TenderUpdate) ClearCustomerRelationshipRatingOverview() *TenderUpdate {
	tu.mutation.ClearCustomerRelationshipRatingOverview()
	return tu
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tu *TenderUpdate) SetCompetitivePartnershipRating(i int8) *TenderUpdate {
	tu.mutation.ResetCompetitivePartnershipRating()
	tu.mutation.SetCompetitivePartnershipRating(i)
	return tu
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCompetitivePartnershipRating(i *int8) *TenderUpdate {
	if i != nil {
		tu.SetCompetitivePartnershipRating(*i)
	}
	return tu
}

// AddCompetitivePartnershipRating adds i to the "competitive_partnership_rating" field.
func (tu *TenderUpdate) AddCompetitivePartnershipRating(i int8) *TenderUpdate {
	tu.mutation.AddCompetitivePartnershipRating(i)
	return tu
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (tu *TenderUpdate) ClearCompetitivePartnershipRating() *TenderUpdate {
	tu.mutation.ClearCompetitivePartnershipRating()
	return tu
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (tu *TenderUpdate) SetCompetitivePartnershipRatingOverview(s string) *TenderUpdate {
	tu.mutation.SetCompetitivePartnershipRatingOverview(s)
	return tu
}

// SetNillableCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCompetitivePartnershipRatingOverview(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCompetitivePartnershipRatingOverview(*s)
	}
	return tu
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (tu *TenderUpdate) ClearCompetitivePartnershipRatingOverview() *TenderUpdate {
	tu.mutation.ClearCompetitivePartnershipRatingOverview()
	return tu
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tu *TenderUpdate) SetPrepareToBid(b bool) *TenderUpdate {
	tu.mutation.SetPrepareToBid(b)
	return tu
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tu *TenderUpdate) SetNillablePrepareToBid(b *bool) *TenderUpdate {
	if b != nil {
		tu.SetPrepareToBid(*b)
	}
	return tu
}

// SetProjectCode sets the "project_code" field.
func (tu *TenderUpdate) SetProjectCode(s string) *TenderUpdate {
	tu.mutation.SetProjectCode(s)
	return tu
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableProjectCode(s *string) *TenderUpdate {
	if s != nil {
		tu.SetProjectCode(*s)
	}
	return tu
}

// ClearProjectCode clears the value of the "project_code" field.
func (tu *TenderUpdate) ClearProjectCode() *TenderUpdate {
	tu.mutation.ClearProjectCode()
	return tu
}

// SetProjectDefinition sets the "project_definition" field.
func (tu *TenderUpdate) SetProjectDefinition(s string) *TenderUpdate {
	tu.mutation.SetProjectDefinition(s)
	return tu
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableProjectDefinition(s *string) *TenderUpdate {
	if s != nil {
		tu.SetProjectDefinition(*s)
	}
	return tu
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (tu *TenderUpdate) ClearProjectDefinition() *TenderUpdate {
	tu.mutation.ClearProjectDefinition()
	return tu
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tu *TenderUpdate) SetEstimatedProjectStartDate(t time.Time) *TenderUpdate {
	tu.mutation.SetEstimatedProjectStartDate(t)
	return tu
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderUpdate {
	if t != nil {
		tu.SetEstimatedProjectStartDate(*t)
	}
	return tu
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (tu *TenderUpdate) ClearEstimatedProjectStartDate() *TenderUpdate {
	tu.mutation.ClearEstimatedProjectStartDate()
	return tu
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tu *TenderUpdate) SetEstimatedProjectEndDate(t time.Time) *TenderUpdate {
	tu.mutation.SetEstimatedProjectEndDate(t)
	return tu
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderUpdate {
	if t != nil {
		tu.SetEstimatedProjectEndDate(*t)
	}
	return tu
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (tu *TenderUpdate) ClearEstimatedProjectEndDate() *TenderUpdate {
	tu.mutation.ClearEstimatedProjectEndDate()
	return tu
}

// SetProjectType sets the "project_type" field.
func (tu *TenderUpdate) SetProjectType(s string) *TenderUpdate {
	tu.mutation.SetProjectType(s)
	return tu
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableProjectType(s *string) *TenderUpdate {
	if s != nil {
		tu.SetProjectType(*s)
	}
	return tu
}

// ClearProjectType clears the value of the "project_type" field.
func (tu *TenderUpdate) ClearProjectType() *TenderUpdate {
	tu.mutation.ClearProjectType()
	return tu
}

// SetAttachements sets the "attachements" field.
func (tu *TenderUpdate) SetAttachements(s []string) *TenderUpdate {
	tu.mutation.SetAttachements(s)
	return tu
}

// AppendAttachements appends s to the "attachements" field.
func (tu *TenderUpdate) AppendAttachements(s []string) *TenderUpdate {
	tu.mutation.AppendAttachements(s)
	return tu
}

// ClearAttachements clears the value of the "attachements" field.
func (tu *TenderUpdate) ClearAttachements() *TenderUpdate {
	tu.mutation.ClearAttachements()
	return tu
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tu *TenderUpdate) SetGeoCoordinate(gj *geo.GeoJson) *TenderUpdate {
	tu.mutation.SetGeoCoordinate(gj)
	return tu
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (tu *TenderUpdate) ClearGeoCoordinate() *TenderUpdate {
	tu.mutation.ClearGeoCoordinate()
	return tu
}

// SetRemark sets the "remark" field.
func (tu *TenderUpdate) SetRemark(s string) *TenderUpdate {
	tu.mutation.SetRemark(s)
	return tu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableRemark(s *string) *TenderUpdate {
	if s != nil {
		tu.SetRemark(*s)
	}
	return tu
}

// ClearRemark clears the value of the "remark" field.
func (tu *TenderUpdate) ClearRemark() *TenderUpdate {
	tu.mutation.ClearRemark()
	return tu
}

// SetImages sets the "images" field.
func (tu *TenderUpdate) SetImages(s []string) *TenderUpdate {
	tu.mutation.SetImages(s)
	return tu
}

// AppendImages appends s to the "images" field.
func (tu *TenderUpdate) AppendImages(s []string) *TenderUpdate {
	tu.mutation.AppendImages(s)
	return tu
}

// ClearImages clears the value of the "images" field.
func (tu *TenderUpdate) ClearImages() *TenderUpdate {
	tu.mutation.ClearImages()
	return tu
}

// SetTenderSituations sets the "tender_situations" field.
func (tu *TenderUpdate) SetTenderSituations(s string) *TenderUpdate {
	tu.mutation.SetTenderSituations(s)
	return tu
}

// SetNillableTenderSituations sets the "tender_situations" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTenderSituations(s *string) *TenderUpdate {
	if s != nil {
		tu.SetTenderSituations(*s)
	}
	return tu
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (tu *TenderUpdate) ClearTenderSituations() *TenderUpdate {
	tu.mutation.ClearTenderSituations()
	return tu
}

// SetOwnerSituations sets the "owner_situations" field.
func (tu *TenderUpdate) SetOwnerSituations(s string) *TenderUpdate {
	tu.mutation.SetOwnerSituations(s)
	return tu
}

// SetNillableOwnerSituations sets the "owner_situations" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableOwnerSituations(s *string) *TenderUpdate {
	if s != nil {
		tu.SetOwnerSituations(*s)
	}
	return tu
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (tu *TenderUpdate) ClearOwnerSituations() *TenderUpdate {
	tu.mutation.ClearOwnerSituations()
	return tu
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (tu *TenderUpdate) SetBiddingInstructions(s string) *TenderUpdate {
	tu.mutation.SetBiddingInstructions(s)
	return tu
}

// SetNillableBiddingInstructions sets the "bidding_instructions" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableBiddingInstructions(s *string) *TenderUpdate {
	if s != nil {
		tu.SetBiddingInstructions(*s)
	}
	return tu
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (tu *TenderUpdate) ClearBiddingInstructions() *TenderUpdate {
	tu.mutation.ClearBiddingInstructions()
	return tu
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (tu *TenderUpdate) SetCompetitorSituations(s string) *TenderUpdate {
	tu.mutation.SetCompetitorSituations(s)
	return tu
}

// SetNillableCompetitorSituations sets the "competitor_situations" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCompetitorSituations(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCompetitorSituations(*s)
	}
	return tu
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (tu *TenderUpdate) ClearCompetitorSituations() *TenderUpdate {
	tu.mutation.ClearCompetitorSituations()
	return tu
}

// SetCostEngineer sets the "cost_engineer" field.
func (tu *TenderUpdate) SetCostEngineer(s string) *TenderUpdate {
	tu.mutation.SetCostEngineer(s)
	return tu
}

// SetNillableCostEngineer sets the "cost_engineer" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCostEngineer(s *string) *TenderUpdate {
	if s != nil {
		tu.SetCostEngineer(*s)
	}
	return tu
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (tu *TenderUpdate) ClearCostEngineer() *TenderUpdate {
	tu.mutation.ClearCostEngineer()
	return tu
}

// SetTenderForm sets the "tender_form" field.
func (tu *TenderUpdate) SetTenderForm(s string) *TenderUpdate {
	tu.mutation.SetTenderForm(s)
	return tu
}

// SetNillableTenderForm sets the "tender_form" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTenderForm(s *string) *TenderUpdate {
	if s != nil {
		tu.SetTenderForm(*s)
	}
	return tu
}

// ClearTenderForm clears the value of the "tender_form" field.
func (tu *TenderUpdate) ClearTenderForm() *TenderUpdate {
	tu.mutation.ClearTenderForm()
	return tu
}

// SetContractForm sets the "contract_form" field.
func (tu *TenderUpdate) SetContractForm(s string) *TenderUpdate {
	tu.mutation.SetContractForm(s)
	return tu
}

// SetNillableContractForm sets the "contract_form" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableContractForm(s *string) *TenderUpdate {
	if s != nil {
		tu.SetContractForm(*s)
	}
	return tu
}

// ClearContractForm clears the value of the "contract_form" field.
func (tu *TenderUpdate) ClearContractForm() *TenderUpdate {
	tu.mutation.ClearContractForm()
	return tu
}

// SetManagementCompany sets the "management_company" field.
func (tu *TenderUpdate) SetManagementCompany(s string) *TenderUpdate {
	tu.mutation.SetManagementCompany(s)
	return tu
}

// SetNillableManagementCompany sets the "management_company" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableManagementCompany(s *string) *TenderUpdate {
	if s != nil {
		tu.SetManagementCompany(*s)
	}
	return tu
}

// ClearManagementCompany clears the value of the "management_company" field.
func (tu *TenderUpdate) ClearManagementCompany() *TenderUpdate {
	tu.mutation.ClearManagementCompany()
	return tu
}

// SetTenderingAgency sets the "tendering_agency" field.
func (tu *TenderUpdate) SetTenderingAgency(s string) *TenderUpdate {
	tu.mutation.SetTenderingAgency(s)
	return tu
}

// SetNillableTenderingAgency sets the "tendering_agency" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableTenderingAgency(s *string) *TenderUpdate {
	if s != nil {
		tu.SetTenderingAgency(*s)
	}
	return tu
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (tu *TenderUpdate) ClearTenderingAgency() *TenderUpdate {
	tu.mutation.ClearTenderingAgency()
	return tu
}

// SetBiddingDate sets the "bidding_date" field.
func (tu *TenderUpdate) SetBiddingDate(t time.Time) *TenderUpdate {
	tu.mutation.SetBiddingDate(t)
	return tu
}

// SetNillableBiddingDate sets the "bidding_date" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableBiddingDate(t *time.Time) *TenderUpdate {
	if t != nil {
		tu.SetBiddingDate(*t)
	}
	return tu
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (tu *TenderUpdate) ClearBiddingDate() *TenderUpdate {
	tu.mutation.ClearBiddingDate()
	return tu
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (tu *TenderUpdate) SetFacadeConsultant(s string) *TenderUpdate {
	tu.mutation.SetFacadeConsultant(s)
	return tu
}

// SetNillableFacadeConsultant sets the "facade_consultant" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableFacadeConsultant(s *string) *TenderUpdate {
	if s != nil {
		tu.SetFacadeConsultant(*s)
	}
	return tu
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (tu *TenderUpdate) ClearFacadeConsultant() *TenderUpdate {
	tu.mutation.ClearFacadeConsultant()
	return tu
}

// SetDesignUnit sets the "design_unit" field.
func (tu *TenderUpdate) SetDesignUnit(s string) *TenderUpdate {
	tu.mutation.SetDesignUnit(s)
	return tu
}

// SetNillableDesignUnit sets the "design_unit" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableDesignUnit(s *string) *TenderUpdate {
	if s != nil {
		tu.SetDesignUnit(*s)
	}
	return tu
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (tu *TenderUpdate) ClearDesignUnit() *TenderUpdate {
	tu.mutation.ClearDesignUnit()
	return tu
}

// SetConsultingFirm sets the "consulting_firm" field.
func (tu *TenderUpdate) SetConsultingFirm(s string) *TenderUpdate {
	tu.mutation.SetConsultingFirm(s)
	return tu
}

// SetNillableConsultingFirm sets the "consulting_firm" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableConsultingFirm(s *string) *TenderUpdate {
	if s != nil {
		tu.SetConsultingFirm(*s)
	}
	return tu
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (tu *TenderUpdate) ClearConsultingFirm() *TenderUpdate {
	tu.mutation.ClearConsultingFirm()
	return tu
}

// SetKeyProject sets the "key_project" field.
func (tu *TenderUpdate) SetKeyProject(b bool) *TenderUpdate {
	tu.mutation.SetKeyProject(b)
	return tu
}

// SetNillableKeyProject sets the "key_project" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableKeyProject(b *bool) *TenderUpdate {
	if b != nil {
		tu.SetKeyProject(*b)
	}
	return tu
}

// SetAreaID sets the "area_id" field.
func (tu *TenderUpdate) SetAreaID(x xid.ID) *TenderUpdate {
	tu.mutation.SetAreaID(x)
	return tu
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableAreaID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetAreaID(*x)
	}
	return tu
}

// SetProvinceID sets the "province_id" field.
func (tu *TenderUpdate) SetProvinceID(x xid.ID) *TenderUpdate {
	tu.mutation.SetProvinceID(x)
	return tu
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableProvinceID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetProvinceID(*x)
	}
	return tu
}

// SetCityID sets the "city_id" field.
func (tu *TenderUpdate) SetCityID(x xid.ID) *TenderUpdate {
	tu.mutation.SetCityID(x)
	return tu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCityID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetCityID(*x)
	}
	return tu
}

// ClearCityID clears the value of the "city_id" field.
func (tu *TenderUpdate) ClearCityID() *TenderUpdate {
	tu.mutation.ClearCityID()
	return tu
}

// SetDistrictID sets the "district_id" field.
func (tu *TenderUpdate) SetDistrictID(x xid.ID) *TenderUpdate {
	tu.mutation.SetDistrictID(x)
	return tu
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableDistrictID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetDistrictID(*x)
	}
	return tu
}

// SetCustomerID sets the "customer_id" field.
func (tu *TenderUpdate) SetCustomerID(x xid.ID) *TenderUpdate {
	tu.mutation.SetCustomerID(x)
	return tu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCustomerID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetCustomerID(*x)
	}
	return tu
}

// SetFinderID sets the "finder_id" field.
func (tu *TenderUpdate) SetFinderID(x xid.ID) *TenderUpdate {
	tu.mutation.SetFinderID(x)
	return tu
}

// SetNillableFinderID sets the "finder_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableFinderID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetFinderID(*x)
	}
	return tu
}

// SetCreatedByID sets the "created_by_id" field.
func (tu *TenderUpdate) SetCreatedByID(x xid.ID) *TenderUpdate {
	tu.mutation.SetCreatedByID(x)
	return tu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (tu *TenderUpdate) SetNillableCreatedByID(x *xid.ID) *TenderUpdate {
	if x != nil {
		tu.SetCreatedByID(*x)
	}
	return tu
}

// SetArea sets the "area" edge to the Area entity.
func (tu *TenderUpdate) SetArea(a *Area) *TenderUpdate {
	return tu.SetAreaID(a.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tu *TenderUpdate) SetCustomer(c *Customer) *TenderUpdate {
	return tu.SetCustomerID(c.ID)
}

// SetFinder sets the "finder" edge to the User entity.
func (tu *TenderUpdate) SetFinder(u *User) *TenderUpdate {
	return tu.SetFinderID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tu *TenderUpdate) SetCreatedBy(u *User) *TenderUpdate {
	return tu.SetCreatedByID(u.ID)
}

// AddFollowingSaleIDs adds the "following_sales" edge to the User entity by IDs.
func (tu *TenderUpdate) AddFollowingSaleIDs(ids ...xid.ID) *TenderUpdate {
	tu.mutation.AddFollowingSaleIDs(ids...)
	return tu
}

// AddFollowingSales adds the "following_sales" edges to the User entity.
func (tu *TenderUpdate) AddFollowingSales(u ...*User) *TenderUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddFollowingSaleIDs(ids...)
}

// SetProvince sets the "province" edge to the Province entity.
func (tu *TenderUpdate) SetProvince(p *Province) *TenderUpdate {
	return tu.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tu *TenderUpdate) SetCity(c *City) *TenderUpdate {
	return tu.SetCityID(c.ID)
}

// SetDistrict sets the "district" edge to the District entity.
func (tu *TenderUpdate) SetDistrict(d *District) *TenderUpdate {
	return tu.SetDistrictID(d.ID)
}

// Mutation returns the TenderMutation object of the builder.
func (tu *TenderUpdate) Mutation() *TenderMutation {
	return tu.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (tu *TenderUpdate) ClearArea() *TenderUpdate {
	tu.mutation.ClearArea()
	return tu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (tu *TenderUpdate) ClearCustomer() *TenderUpdate {
	tu.mutation.ClearCustomer()
	return tu
}

// ClearFinder clears the "finder" edge to the User entity.
func (tu *TenderUpdate) ClearFinder() *TenderUpdate {
	tu.mutation.ClearFinder()
	return tu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tu *TenderUpdate) ClearCreatedBy() *TenderUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// ClearFollowingSales clears all "following_sales" edges to the User entity.
func (tu *TenderUpdate) ClearFollowingSales() *TenderUpdate {
	tu.mutation.ClearFollowingSales()
	return tu
}

// RemoveFollowingSaleIDs removes the "following_sales" edge to User entities by IDs.
func (tu *TenderUpdate) RemoveFollowingSaleIDs(ids ...xid.ID) *TenderUpdate {
	tu.mutation.RemoveFollowingSaleIDs(ids...)
	return tu
}

// RemoveFollowingSales removes "following_sales" edges to User entities.
func (tu *TenderUpdate) RemoveFollowingSales(u ...*User) *TenderUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveFollowingSaleIDs(ids...)
}

// ClearProvince clears the "province" edge to the Province entity.
func (tu *TenderUpdate) ClearProvince() *TenderUpdate {
	tu.mutation.ClearProvince()
	return tu
}

// ClearCity clears the "city" edge to the City entity.
func (tu *TenderUpdate) ClearCity() *TenderUpdate {
	tu.mutation.ClearCity()
	return tu
}

// ClearDistrict clears the "district" edge to the District entity.
func (tu *TenderUpdate) ClearDistrict() *TenderUpdate {
	tu.mutation.ClearDistrict()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenderUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenderUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenderUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenderUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenderUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tender.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenderUpdate) check() error {
	if v, ok := tu.mutation.SizeAndValueRating(); ok {
		if err := tender.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CreditAndPaymentRating(); ok {
		if err := tender.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TimeLimitRating(); ok {
		if err := tender.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CustomerRelationshipRating(); ok {
		if err := tender.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CompetitivePartnershipRating(); ok {
		if err := tender.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.competitive_partnership_rating": %w`, err)}
		}
	}
	if tu.mutation.AreaCleared() && len(tu.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.area"`)
	}
	if tu.mutation.CustomerCleared() && len(tu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.customer"`)
	}
	if tu.mutation.FinderCleared() && len(tu.mutation.FinderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.finder"`)
	}
	if tu.mutation.CreatedByCleared() && len(tu.mutation.CreatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.created_by"`)
	}
	if tu.mutation.ProvinceCleared() && len(tu.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.province"`)
	}
	if tu.mutation.DistrictCleared() && len(tu.mutation.DistrictIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.district"`)
	}
	return nil
}

func (tu *TenderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tender.Table, tender.Columns, sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tender.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(tender.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(tender.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(tender.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tender.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.EstimatedAmount(); ok {
		_spec.SetField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedEstimatedAmount(); ok {
		_spec.AddField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if tu.mutation.EstimatedAmountCleared() {
		_spec.ClearField(tender.FieldEstimatedAmount, field.TypeFloat64)
	}
	if value, ok := tu.mutation.TenderDate(); ok {
		_spec.SetField(tender.FieldTenderDate, field.TypeTime, value)
	}
	if tu.mutation.TenderDateCleared() {
		_spec.ClearField(tender.FieldTenderDate, field.TypeTime)
	}
	if value, ok := tu.mutation.DiscoveryDate(); ok {
		_spec.SetField(tender.FieldDiscoveryDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Address(); ok {
		_spec.SetField(tender.FieldAddress, field.TypeString, value)
	}
	if tu.mutation.AddressCleared() {
		_spec.ClearField(tender.FieldAddress, field.TypeString)
	}
	if value, ok := tu.mutation.FullAddress(); ok {
		_spec.SetField(tender.FieldFullAddress, field.TypeString, value)
	}
	if tu.mutation.FullAddressCleared() {
		_spec.ClearField(tender.FieldFullAddress, field.TypeString)
	}
	if value, ok := tu.mutation.Contractor(); ok {
		_spec.SetField(tender.FieldContractor, field.TypeString, value)
	}
	if tu.mutation.ContractorCleared() {
		_spec.ClearField(tender.FieldContractor, field.TypeString)
	}
	if value, ok := tu.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tender.FieldSizeAndValueRating, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedSizeAndValueRating(); ok {
		_spec.AddField(tender.FieldSizeAndValueRating, field.TypeInt8, value)
	}
	if tu.mutation.SizeAndValueRatingCleared() {
		_spec.ClearField(tender.FieldSizeAndValueRating, field.TypeInt8)
	}
	if value, ok := tu.mutation.SizeAndValueRatingOverview(); ok {
		_spec.SetField(tender.FieldSizeAndValueRatingOverview, field.TypeString, value)
	}
	if tu.mutation.SizeAndValueRatingOverviewCleared() {
		_spec.ClearField(tender.FieldSizeAndValueRatingOverview, field.TypeString)
	}
	if value, ok := tu.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRating, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedCreditAndPaymentRating(); ok {
		_spec.AddField(tender.FieldCreditAndPaymentRating, field.TypeInt8, value)
	}
	if tu.mutation.CreditAndPaymentRatingCleared() {
		_spec.ClearField(tender.FieldCreditAndPaymentRating, field.TypeInt8)
	}
	if value, ok := tu.mutation.CreditAndPaymentRatingOverview(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRatingOverview, field.TypeString, value)
	}
	if tu.mutation.CreditAndPaymentRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCreditAndPaymentRatingOverview, field.TypeString)
	}
	if value, ok := tu.mutation.TimeLimitRating(); ok {
		_spec.SetField(tender.FieldTimeLimitRating, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedTimeLimitRating(); ok {
		_spec.AddField(tender.FieldTimeLimitRating, field.TypeInt8, value)
	}
	if tu.mutation.TimeLimitRatingCleared() {
		_spec.ClearField(tender.FieldTimeLimitRating, field.TypeInt8)
	}
	if value, ok := tu.mutation.TimeLimitRatingOverview(); ok {
		_spec.SetField(tender.FieldTimeLimitRatingOverview, field.TypeString, value)
	}
	if tu.mutation.TimeLimitRatingOverviewCleared() {
		_spec.ClearField(tender.FieldTimeLimitRatingOverview, field.TypeString)
	}
	if value, ok := tu.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRating, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedCustomerRelationshipRating(); ok {
		_spec.AddField(tender.FieldCustomerRelationshipRating, field.TypeInt8, value)
	}
	if tu.mutation.CustomerRelationshipRatingCleared() {
		_spec.ClearField(tender.FieldCustomerRelationshipRating, field.TypeInt8)
	}
	if value, ok := tu.mutation.CustomerRelationshipRatingOverview(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRatingOverview, field.TypeString, value)
	}
	if tu.mutation.CustomerRelationshipRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCustomerRelationshipRatingOverview, field.TypeString)
	}
	if value, ok := tu.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRating, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedCompetitivePartnershipRating(); ok {
		_spec.AddField(tender.FieldCompetitivePartnershipRating, field.TypeInt8, value)
	}
	if tu.mutation.CompetitivePartnershipRatingCleared() {
		_spec.ClearField(tender.FieldCompetitivePartnershipRating, field.TypeInt8)
	}
	if value, ok := tu.mutation.CompetitivePartnershipRatingOverview(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRatingOverview, field.TypeString, value)
	}
	if tu.mutation.CompetitivePartnershipRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCompetitivePartnershipRatingOverview, field.TypeString)
	}
	if value, ok := tu.mutation.PrepareToBid(); ok {
		_spec.SetField(tender.FieldPrepareToBid, field.TypeBool, value)
	}
	if value, ok := tu.mutation.ProjectCode(); ok {
		_spec.SetField(tender.FieldProjectCode, field.TypeString, value)
	}
	if tu.mutation.ProjectCodeCleared() {
		_spec.ClearField(tender.FieldProjectCode, field.TypeString)
	}
	if value, ok := tu.mutation.ProjectDefinition(); ok {
		_spec.SetField(tender.FieldProjectDefinition, field.TypeString, value)
	}
	if tu.mutation.ProjectDefinitionCleared() {
		_spec.ClearField(tender.FieldProjectDefinition, field.TypeString)
	}
	if value, ok := tu.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectStartDate, field.TypeTime, value)
	}
	if tu.mutation.EstimatedProjectStartDateCleared() {
		_spec.ClearField(tender.FieldEstimatedProjectStartDate, field.TypeTime)
	}
	if value, ok := tu.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectEndDate, field.TypeTime, value)
	}
	if tu.mutation.EstimatedProjectEndDateCleared() {
		_spec.ClearField(tender.FieldEstimatedProjectEndDate, field.TypeTime)
	}
	if value, ok := tu.mutation.ProjectType(); ok {
		_spec.SetField(tender.FieldProjectType, field.TypeString, value)
	}
	if tu.mutation.ProjectTypeCleared() {
		_spec.ClearField(tender.FieldProjectType, field.TypeString)
	}
	if value, ok := tu.mutation.Attachements(); ok {
		_spec.SetField(tender.FieldAttachements, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedAttachements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tender.FieldAttachements, value)
		})
	}
	if tu.mutation.AttachementsCleared() {
		_spec.ClearField(tender.FieldAttachements, field.TypeJSON)
	}
	if value, ok := tu.mutation.GeoCoordinate(); ok {
		_spec.SetField(tender.FieldGeoCoordinate, field.TypeOther, value)
	}
	if tu.mutation.GeoCoordinateCleared() {
		_spec.ClearField(tender.FieldGeoCoordinate, field.TypeOther)
	}
	if value, ok := tu.mutation.Remark(); ok {
		_spec.SetField(tender.FieldRemark, field.TypeString, value)
	}
	if tu.mutation.RemarkCleared() {
		_spec.ClearField(tender.FieldRemark, field.TypeString)
	}
	if value, ok := tu.mutation.Images(); ok {
		_spec.SetField(tender.FieldImages, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tender.FieldImages, value)
		})
	}
	if tu.mutation.ImagesCleared() {
		_spec.ClearField(tender.FieldImages, field.TypeJSON)
	}
	if value, ok := tu.mutation.TenderSituations(); ok {
		_spec.SetField(tender.FieldTenderSituations, field.TypeString, value)
	}
	if tu.mutation.TenderSituationsCleared() {
		_spec.ClearField(tender.FieldTenderSituations, field.TypeString)
	}
	if value, ok := tu.mutation.OwnerSituations(); ok {
		_spec.SetField(tender.FieldOwnerSituations, field.TypeString, value)
	}
	if tu.mutation.OwnerSituationsCleared() {
		_spec.ClearField(tender.FieldOwnerSituations, field.TypeString)
	}
	if value, ok := tu.mutation.BiddingInstructions(); ok {
		_spec.SetField(tender.FieldBiddingInstructions, field.TypeString, value)
	}
	if tu.mutation.BiddingInstructionsCleared() {
		_spec.ClearField(tender.FieldBiddingInstructions, field.TypeString)
	}
	if value, ok := tu.mutation.CompetitorSituations(); ok {
		_spec.SetField(tender.FieldCompetitorSituations, field.TypeString, value)
	}
	if tu.mutation.CompetitorSituationsCleared() {
		_spec.ClearField(tender.FieldCompetitorSituations, field.TypeString)
	}
	if value, ok := tu.mutation.CostEngineer(); ok {
		_spec.SetField(tender.FieldCostEngineer, field.TypeString, value)
	}
	if tu.mutation.CostEngineerCleared() {
		_spec.ClearField(tender.FieldCostEngineer, field.TypeString)
	}
	if value, ok := tu.mutation.TenderForm(); ok {
		_spec.SetField(tender.FieldTenderForm, field.TypeString, value)
	}
	if tu.mutation.TenderFormCleared() {
		_spec.ClearField(tender.FieldTenderForm, field.TypeString)
	}
	if value, ok := tu.mutation.ContractForm(); ok {
		_spec.SetField(tender.FieldContractForm, field.TypeString, value)
	}
	if tu.mutation.ContractFormCleared() {
		_spec.ClearField(tender.FieldContractForm, field.TypeString)
	}
	if value, ok := tu.mutation.ManagementCompany(); ok {
		_spec.SetField(tender.FieldManagementCompany, field.TypeString, value)
	}
	if tu.mutation.ManagementCompanyCleared() {
		_spec.ClearField(tender.FieldManagementCompany, field.TypeString)
	}
	if value, ok := tu.mutation.TenderingAgency(); ok {
		_spec.SetField(tender.FieldTenderingAgency, field.TypeString, value)
	}
	if tu.mutation.TenderingAgencyCleared() {
		_spec.ClearField(tender.FieldTenderingAgency, field.TypeString)
	}
	if value, ok := tu.mutation.BiddingDate(); ok {
		_spec.SetField(tender.FieldBiddingDate, field.TypeTime, value)
	}
	if tu.mutation.BiddingDateCleared() {
		_spec.ClearField(tender.FieldBiddingDate, field.TypeTime)
	}
	if value, ok := tu.mutation.FacadeConsultant(); ok {
		_spec.SetField(tender.FieldFacadeConsultant, field.TypeString, value)
	}
	if tu.mutation.FacadeConsultantCleared() {
		_spec.ClearField(tender.FieldFacadeConsultant, field.TypeString)
	}
	if value, ok := tu.mutation.DesignUnit(); ok {
		_spec.SetField(tender.FieldDesignUnit, field.TypeString, value)
	}
	if tu.mutation.DesignUnitCleared() {
		_spec.ClearField(tender.FieldDesignUnit, field.TypeString)
	}
	if value, ok := tu.mutation.ConsultingFirm(); ok {
		_spec.SetField(tender.FieldConsultingFirm, field.TypeString, value)
	}
	if tu.mutation.ConsultingFirmCleared() {
		_spec.ClearField(tender.FieldConsultingFirm, field.TypeString)
	}
	if value, ok := tu.mutation.KeyProject(); ok {
		_spec.SetField(tender.FieldKeyProject, field.TypeBool, value)
	}
	if tu.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FinderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FinderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FollowingSalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFollowingSalesIDs(); len(nodes) > 0 && !tu.mutation.FollowingSalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FollowingSalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tender.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenderUpdateOne is the builder for updating a single Tender entity.
type TenderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenderUpdateOne) SetUpdatedAt(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TenderUpdateOne) SetCode(s string) *TenderUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCode(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TenderUpdateOne) SetStatus(i int8) *TenderUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableStatus(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TenderUpdateOne) AddStatus(i int8) *TenderUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TenderUpdateOne) SetName(s string) *TenderUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableName(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tuo *TenderUpdateOne) SetEstimatedAmount(f float64) *TenderUpdateOne {
	tuo.mutation.ResetEstimatedAmount()
	tuo.mutation.SetEstimatedAmount(f)
	return tuo
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableEstimatedAmount(f *float64) *TenderUpdateOne {
	if f != nil {
		tuo.SetEstimatedAmount(*f)
	}
	return tuo
}

// AddEstimatedAmount adds f to the "estimated_amount" field.
func (tuo *TenderUpdateOne) AddEstimatedAmount(f float64) *TenderUpdateOne {
	tuo.mutation.AddEstimatedAmount(f)
	return tuo
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (tuo *TenderUpdateOne) ClearEstimatedAmount() *TenderUpdateOne {
	tuo.mutation.ClearEstimatedAmount()
	return tuo
}

// SetTenderDate sets the "tender_date" field.
func (tuo *TenderUpdateOne) SetTenderDate(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetTenderDate(t)
	return tuo
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTenderDate(t *time.Time) *TenderUpdateOne {
	if t != nil {
		tuo.SetTenderDate(*t)
	}
	return tuo
}

// ClearTenderDate clears the value of the "tender_date" field.
func (tuo *TenderUpdateOne) ClearTenderDate() *TenderUpdateOne {
	tuo.mutation.ClearTenderDate()
	return tuo
}

// SetDiscoveryDate sets the "discovery_date" field.
func (tuo *TenderUpdateOne) SetDiscoveryDate(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetDiscoveryDate(t)
	return tuo
}

// SetNillableDiscoveryDate sets the "discovery_date" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableDiscoveryDate(t *time.Time) *TenderUpdateOne {
	if t != nil {
		tuo.SetDiscoveryDate(*t)
	}
	return tuo
}

// SetAddress sets the "address" field.
func (tuo *TenderUpdateOne) SetAddress(s string) *TenderUpdateOne {
	tuo.mutation.SetAddress(s)
	return tuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableAddress(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetAddress(*s)
	}
	return tuo
}

// ClearAddress clears the value of the "address" field.
func (tuo *TenderUpdateOne) ClearAddress() *TenderUpdateOne {
	tuo.mutation.ClearAddress()
	return tuo
}

// SetFullAddress sets the "full_address" field.
func (tuo *TenderUpdateOne) SetFullAddress(s string) *TenderUpdateOne {
	tuo.mutation.SetFullAddress(s)
	return tuo
}

// SetNillableFullAddress sets the "full_address" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableFullAddress(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetFullAddress(*s)
	}
	return tuo
}

// ClearFullAddress clears the value of the "full_address" field.
func (tuo *TenderUpdateOne) ClearFullAddress() *TenderUpdateOne {
	tuo.mutation.ClearFullAddress()
	return tuo
}

// SetContractor sets the "contractor" field.
func (tuo *TenderUpdateOne) SetContractor(s string) *TenderUpdateOne {
	tuo.mutation.SetContractor(s)
	return tuo
}

// SetNillableContractor sets the "contractor" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableContractor(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetContractor(*s)
	}
	return tuo
}

// ClearContractor clears the value of the "contractor" field.
func (tuo *TenderUpdateOne) ClearContractor() *TenderUpdateOne {
	tuo.mutation.ClearContractor()
	return tuo
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tuo *TenderUpdateOne) SetSizeAndValueRating(i int8) *TenderUpdateOne {
	tuo.mutation.ResetSizeAndValueRating()
	tuo.mutation.SetSizeAndValueRating(i)
	return tuo
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableSizeAndValueRating(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetSizeAndValueRating(*i)
	}
	return tuo
}

// AddSizeAndValueRating adds i to the "size_and_value_rating" field.
func (tuo *TenderUpdateOne) AddSizeAndValueRating(i int8) *TenderUpdateOne {
	tuo.mutation.AddSizeAndValueRating(i)
	return tuo
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (tuo *TenderUpdateOne) ClearSizeAndValueRating() *TenderUpdateOne {
	tuo.mutation.ClearSizeAndValueRating()
	return tuo
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (tuo *TenderUpdateOne) SetSizeAndValueRatingOverview(s string) *TenderUpdateOne {
	tuo.mutation.SetSizeAndValueRatingOverview(s)
	return tuo
}

// SetNillableSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableSizeAndValueRatingOverview(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetSizeAndValueRatingOverview(*s)
	}
	return tuo
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (tuo *TenderUpdateOne) ClearSizeAndValueRatingOverview() *TenderUpdateOne {
	tuo.mutation.ClearSizeAndValueRatingOverview()
	return tuo
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tuo *TenderUpdateOne) SetCreditAndPaymentRating(i int8) *TenderUpdateOne {
	tuo.mutation.ResetCreditAndPaymentRating()
	tuo.mutation.SetCreditAndPaymentRating(i)
	return tuo
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCreditAndPaymentRating(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetCreditAndPaymentRating(*i)
	}
	return tuo
}

// AddCreditAndPaymentRating adds i to the "credit_and_payment_rating" field.
func (tuo *TenderUpdateOne) AddCreditAndPaymentRating(i int8) *TenderUpdateOne {
	tuo.mutation.AddCreditAndPaymentRating(i)
	return tuo
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (tuo *TenderUpdateOne) ClearCreditAndPaymentRating() *TenderUpdateOne {
	tuo.mutation.ClearCreditAndPaymentRating()
	return tuo
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (tuo *TenderUpdateOne) SetCreditAndPaymentRatingOverview(s string) *TenderUpdateOne {
	tuo.mutation.SetCreditAndPaymentRatingOverview(s)
	return tuo
}

// SetNillableCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCreditAndPaymentRatingOverview(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCreditAndPaymentRatingOverview(*s)
	}
	return tuo
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (tuo *TenderUpdateOne) ClearCreditAndPaymentRatingOverview() *TenderUpdateOne {
	tuo.mutation.ClearCreditAndPaymentRatingOverview()
	return tuo
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tuo *TenderUpdateOne) SetTimeLimitRating(i int8) *TenderUpdateOne {
	tuo.mutation.ResetTimeLimitRating()
	tuo.mutation.SetTimeLimitRating(i)
	return tuo
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTimeLimitRating(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetTimeLimitRating(*i)
	}
	return tuo
}

// AddTimeLimitRating adds i to the "time_limit_rating" field.
func (tuo *TenderUpdateOne) AddTimeLimitRating(i int8) *TenderUpdateOne {
	tuo.mutation.AddTimeLimitRating(i)
	return tuo
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (tuo *TenderUpdateOne) ClearTimeLimitRating() *TenderUpdateOne {
	tuo.mutation.ClearTimeLimitRating()
	return tuo
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (tuo *TenderUpdateOne) SetTimeLimitRatingOverview(s string) *TenderUpdateOne {
	tuo.mutation.SetTimeLimitRatingOverview(s)
	return tuo
}

// SetNillableTimeLimitRatingOverview sets the "time_limit_rating_overview" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTimeLimitRatingOverview(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetTimeLimitRatingOverview(*s)
	}
	return tuo
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (tuo *TenderUpdateOne) ClearTimeLimitRatingOverview() *TenderUpdateOne {
	tuo.mutation.ClearTimeLimitRatingOverview()
	return tuo
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tuo *TenderUpdateOne) SetCustomerRelationshipRating(i int8) *TenderUpdateOne {
	tuo.mutation.ResetCustomerRelationshipRating()
	tuo.mutation.SetCustomerRelationshipRating(i)
	return tuo
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCustomerRelationshipRating(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetCustomerRelationshipRating(*i)
	}
	return tuo
}

// AddCustomerRelationshipRating adds i to the "customer_relationship_rating" field.
func (tuo *TenderUpdateOne) AddCustomerRelationshipRating(i int8) *TenderUpdateOne {
	tuo.mutation.AddCustomerRelationshipRating(i)
	return tuo
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (tuo *TenderUpdateOne) ClearCustomerRelationshipRating() *TenderUpdateOne {
	tuo.mutation.ClearCustomerRelationshipRating()
	return tuo
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (tuo *TenderUpdateOne) SetCustomerRelationshipRatingOverview(s string) *TenderUpdateOne {
	tuo.mutation.SetCustomerRelationshipRatingOverview(s)
	return tuo
}

// SetNillableCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCustomerRelationshipRatingOverview(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCustomerRelationshipRatingOverview(*s)
	}
	return tuo
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (tuo *TenderUpdateOne) ClearCustomerRelationshipRatingOverview() *TenderUpdateOne {
	tuo.mutation.ClearCustomerRelationshipRatingOverview()
	return tuo
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tuo *TenderUpdateOne) SetCompetitivePartnershipRating(i int8) *TenderUpdateOne {
	tuo.mutation.ResetCompetitivePartnershipRating()
	tuo.mutation.SetCompetitivePartnershipRating(i)
	return tuo
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCompetitivePartnershipRating(i *int8) *TenderUpdateOne {
	if i != nil {
		tuo.SetCompetitivePartnershipRating(*i)
	}
	return tuo
}

// AddCompetitivePartnershipRating adds i to the "competitive_partnership_rating" field.
func (tuo *TenderUpdateOne) AddCompetitivePartnershipRating(i int8) *TenderUpdateOne {
	tuo.mutation.AddCompetitivePartnershipRating(i)
	return tuo
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (tuo *TenderUpdateOne) ClearCompetitivePartnershipRating() *TenderUpdateOne {
	tuo.mutation.ClearCompetitivePartnershipRating()
	return tuo
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (tuo *TenderUpdateOne) SetCompetitivePartnershipRatingOverview(s string) *TenderUpdateOne {
	tuo.mutation.SetCompetitivePartnershipRatingOverview(s)
	return tuo
}

// SetNillableCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCompetitivePartnershipRatingOverview(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCompetitivePartnershipRatingOverview(*s)
	}
	return tuo
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (tuo *TenderUpdateOne) ClearCompetitivePartnershipRatingOverview() *TenderUpdateOne {
	tuo.mutation.ClearCompetitivePartnershipRatingOverview()
	return tuo
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tuo *TenderUpdateOne) SetPrepareToBid(b bool) *TenderUpdateOne {
	tuo.mutation.SetPrepareToBid(b)
	return tuo
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillablePrepareToBid(b *bool) *TenderUpdateOne {
	if b != nil {
		tuo.SetPrepareToBid(*b)
	}
	return tuo
}

// SetProjectCode sets the "project_code" field.
func (tuo *TenderUpdateOne) SetProjectCode(s string) *TenderUpdateOne {
	tuo.mutation.SetProjectCode(s)
	return tuo
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableProjectCode(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetProjectCode(*s)
	}
	return tuo
}

// ClearProjectCode clears the value of the "project_code" field.
func (tuo *TenderUpdateOne) ClearProjectCode() *TenderUpdateOne {
	tuo.mutation.ClearProjectCode()
	return tuo
}

// SetProjectDefinition sets the "project_definition" field.
func (tuo *TenderUpdateOne) SetProjectDefinition(s string) *TenderUpdateOne {
	tuo.mutation.SetProjectDefinition(s)
	return tuo
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableProjectDefinition(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetProjectDefinition(*s)
	}
	return tuo
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (tuo *TenderUpdateOne) ClearProjectDefinition() *TenderUpdateOne {
	tuo.mutation.ClearProjectDefinition()
	return tuo
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tuo *TenderUpdateOne) SetEstimatedProjectStartDate(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetEstimatedProjectStartDate(t)
	return tuo
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderUpdateOne {
	if t != nil {
		tuo.SetEstimatedProjectStartDate(*t)
	}
	return tuo
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (tuo *TenderUpdateOne) ClearEstimatedProjectStartDate() *TenderUpdateOne {
	tuo.mutation.ClearEstimatedProjectStartDate()
	return tuo
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tuo *TenderUpdateOne) SetEstimatedProjectEndDate(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetEstimatedProjectEndDate(t)
	return tuo
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderUpdateOne {
	if t != nil {
		tuo.SetEstimatedProjectEndDate(*t)
	}
	return tuo
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (tuo *TenderUpdateOne) ClearEstimatedProjectEndDate() *TenderUpdateOne {
	tuo.mutation.ClearEstimatedProjectEndDate()
	return tuo
}

// SetProjectType sets the "project_type" field.
func (tuo *TenderUpdateOne) SetProjectType(s string) *TenderUpdateOne {
	tuo.mutation.SetProjectType(s)
	return tuo
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableProjectType(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetProjectType(*s)
	}
	return tuo
}

// ClearProjectType clears the value of the "project_type" field.
func (tuo *TenderUpdateOne) ClearProjectType() *TenderUpdateOne {
	tuo.mutation.ClearProjectType()
	return tuo
}

// SetAttachements sets the "attachements" field.
func (tuo *TenderUpdateOne) SetAttachements(s []string) *TenderUpdateOne {
	tuo.mutation.SetAttachements(s)
	return tuo
}

// AppendAttachements appends s to the "attachements" field.
func (tuo *TenderUpdateOne) AppendAttachements(s []string) *TenderUpdateOne {
	tuo.mutation.AppendAttachements(s)
	return tuo
}

// ClearAttachements clears the value of the "attachements" field.
func (tuo *TenderUpdateOne) ClearAttachements() *TenderUpdateOne {
	tuo.mutation.ClearAttachements()
	return tuo
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tuo *TenderUpdateOne) SetGeoCoordinate(gj *geo.GeoJson) *TenderUpdateOne {
	tuo.mutation.SetGeoCoordinate(gj)
	return tuo
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (tuo *TenderUpdateOne) ClearGeoCoordinate() *TenderUpdateOne {
	tuo.mutation.ClearGeoCoordinate()
	return tuo
}

// SetRemark sets the "remark" field.
func (tuo *TenderUpdateOne) SetRemark(s string) *TenderUpdateOne {
	tuo.mutation.SetRemark(s)
	return tuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableRemark(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetRemark(*s)
	}
	return tuo
}

// ClearRemark clears the value of the "remark" field.
func (tuo *TenderUpdateOne) ClearRemark() *TenderUpdateOne {
	tuo.mutation.ClearRemark()
	return tuo
}

// SetImages sets the "images" field.
func (tuo *TenderUpdateOne) SetImages(s []string) *TenderUpdateOne {
	tuo.mutation.SetImages(s)
	return tuo
}

// AppendImages appends s to the "images" field.
func (tuo *TenderUpdateOne) AppendImages(s []string) *TenderUpdateOne {
	tuo.mutation.AppendImages(s)
	return tuo
}

// ClearImages clears the value of the "images" field.
func (tuo *TenderUpdateOne) ClearImages() *TenderUpdateOne {
	tuo.mutation.ClearImages()
	return tuo
}

// SetTenderSituations sets the "tender_situations" field.
func (tuo *TenderUpdateOne) SetTenderSituations(s string) *TenderUpdateOne {
	tuo.mutation.SetTenderSituations(s)
	return tuo
}

// SetNillableTenderSituations sets the "tender_situations" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTenderSituations(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetTenderSituations(*s)
	}
	return tuo
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (tuo *TenderUpdateOne) ClearTenderSituations() *TenderUpdateOne {
	tuo.mutation.ClearTenderSituations()
	return tuo
}

// SetOwnerSituations sets the "owner_situations" field.
func (tuo *TenderUpdateOne) SetOwnerSituations(s string) *TenderUpdateOne {
	tuo.mutation.SetOwnerSituations(s)
	return tuo
}

// SetNillableOwnerSituations sets the "owner_situations" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableOwnerSituations(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetOwnerSituations(*s)
	}
	return tuo
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (tuo *TenderUpdateOne) ClearOwnerSituations() *TenderUpdateOne {
	tuo.mutation.ClearOwnerSituations()
	return tuo
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (tuo *TenderUpdateOne) SetBiddingInstructions(s string) *TenderUpdateOne {
	tuo.mutation.SetBiddingInstructions(s)
	return tuo
}

// SetNillableBiddingInstructions sets the "bidding_instructions" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableBiddingInstructions(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetBiddingInstructions(*s)
	}
	return tuo
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (tuo *TenderUpdateOne) ClearBiddingInstructions() *TenderUpdateOne {
	tuo.mutation.ClearBiddingInstructions()
	return tuo
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (tuo *TenderUpdateOne) SetCompetitorSituations(s string) *TenderUpdateOne {
	tuo.mutation.SetCompetitorSituations(s)
	return tuo
}

// SetNillableCompetitorSituations sets the "competitor_situations" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCompetitorSituations(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCompetitorSituations(*s)
	}
	return tuo
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (tuo *TenderUpdateOne) ClearCompetitorSituations() *TenderUpdateOne {
	tuo.mutation.ClearCompetitorSituations()
	return tuo
}

// SetCostEngineer sets the "cost_engineer" field.
func (tuo *TenderUpdateOne) SetCostEngineer(s string) *TenderUpdateOne {
	tuo.mutation.SetCostEngineer(s)
	return tuo
}

// SetNillableCostEngineer sets the "cost_engineer" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCostEngineer(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetCostEngineer(*s)
	}
	return tuo
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (tuo *TenderUpdateOne) ClearCostEngineer() *TenderUpdateOne {
	tuo.mutation.ClearCostEngineer()
	return tuo
}

// SetTenderForm sets the "tender_form" field.
func (tuo *TenderUpdateOne) SetTenderForm(s string) *TenderUpdateOne {
	tuo.mutation.SetTenderForm(s)
	return tuo
}

// SetNillableTenderForm sets the "tender_form" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTenderForm(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetTenderForm(*s)
	}
	return tuo
}

// ClearTenderForm clears the value of the "tender_form" field.
func (tuo *TenderUpdateOne) ClearTenderForm() *TenderUpdateOne {
	tuo.mutation.ClearTenderForm()
	return tuo
}

// SetContractForm sets the "contract_form" field.
func (tuo *TenderUpdateOne) SetContractForm(s string) *TenderUpdateOne {
	tuo.mutation.SetContractForm(s)
	return tuo
}

// SetNillableContractForm sets the "contract_form" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableContractForm(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetContractForm(*s)
	}
	return tuo
}

// ClearContractForm clears the value of the "contract_form" field.
func (tuo *TenderUpdateOne) ClearContractForm() *TenderUpdateOne {
	tuo.mutation.ClearContractForm()
	return tuo
}

// SetManagementCompany sets the "management_company" field.
func (tuo *TenderUpdateOne) SetManagementCompany(s string) *TenderUpdateOne {
	tuo.mutation.SetManagementCompany(s)
	return tuo
}

// SetNillableManagementCompany sets the "management_company" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableManagementCompany(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetManagementCompany(*s)
	}
	return tuo
}

// ClearManagementCompany clears the value of the "management_company" field.
func (tuo *TenderUpdateOne) ClearManagementCompany() *TenderUpdateOne {
	tuo.mutation.ClearManagementCompany()
	return tuo
}

// SetTenderingAgency sets the "tendering_agency" field.
func (tuo *TenderUpdateOne) SetTenderingAgency(s string) *TenderUpdateOne {
	tuo.mutation.SetTenderingAgency(s)
	return tuo
}

// SetNillableTenderingAgency sets the "tendering_agency" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableTenderingAgency(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetTenderingAgency(*s)
	}
	return tuo
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (tuo *TenderUpdateOne) ClearTenderingAgency() *TenderUpdateOne {
	tuo.mutation.ClearTenderingAgency()
	return tuo
}

// SetBiddingDate sets the "bidding_date" field.
func (tuo *TenderUpdateOne) SetBiddingDate(t time.Time) *TenderUpdateOne {
	tuo.mutation.SetBiddingDate(t)
	return tuo
}

// SetNillableBiddingDate sets the "bidding_date" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableBiddingDate(t *time.Time) *TenderUpdateOne {
	if t != nil {
		tuo.SetBiddingDate(*t)
	}
	return tuo
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (tuo *TenderUpdateOne) ClearBiddingDate() *TenderUpdateOne {
	tuo.mutation.ClearBiddingDate()
	return tuo
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (tuo *TenderUpdateOne) SetFacadeConsultant(s string) *TenderUpdateOne {
	tuo.mutation.SetFacadeConsultant(s)
	return tuo
}

// SetNillableFacadeConsultant sets the "facade_consultant" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableFacadeConsultant(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetFacadeConsultant(*s)
	}
	return tuo
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (tuo *TenderUpdateOne) ClearFacadeConsultant() *TenderUpdateOne {
	tuo.mutation.ClearFacadeConsultant()
	return tuo
}

// SetDesignUnit sets the "design_unit" field.
func (tuo *TenderUpdateOne) SetDesignUnit(s string) *TenderUpdateOne {
	tuo.mutation.SetDesignUnit(s)
	return tuo
}

// SetNillableDesignUnit sets the "design_unit" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableDesignUnit(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetDesignUnit(*s)
	}
	return tuo
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (tuo *TenderUpdateOne) ClearDesignUnit() *TenderUpdateOne {
	tuo.mutation.ClearDesignUnit()
	return tuo
}

// SetConsultingFirm sets the "consulting_firm" field.
func (tuo *TenderUpdateOne) SetConsultingFirm(s string) *TenderUpdateOne {
	tuo.mutation.SetConsultingFirm(s)
	return tuo
}

// SetNillableConsultingFirm sets the "consulting_firm" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableConsultingFirm(s *string) *TenderUpdateOne {
	if s != nil {
		tuo.SetConsultingFirm(*s)
	}
	return tuo
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (tuo *TenderUpdateOne) ClearConsultingFirm() *TenderUpdateOne {
	tuo.mutation.ClearConsultingFirm()
	return tuo
}

// SetKeyProject sets the "key_project" field.
func (tuo *TenderUpdateOne) SetKeyProject(b bool) *TenderUpdateOne {
	tuo.mutation.SetKeyProject(b)
	return tuo
}

// SetNillableKeyProject sets the "key_project" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableKeyProject(b *bool) *TenderUpdateOne {
	if b != nil {
		tuo.SetKeyProject(*b)
	}
	return tuo
}

// SetAreaID sets the "area_id" field.
func (tuo *TenderUpdateOne) SetAreaID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetAreaID(x)
	return tuo
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableAreaID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetAreaID(*x)
	}
	return tuo
}

// SetProvinceID sets the "province_id" field.
func (tuo *TenderUpdateOne) SetProvinceID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetProvinceID(x)
	return tuo
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableProvinceID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetProvinceID(*x)
	}
	return tuo
}

// SetCityID sets the "city_id" field.
func (tuo *TenderUpdateOne) SetCityID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetCityID(x)
	return tuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCityID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetCityID(*x)
	}
	return tuo
}

// ClearCityID clears the value of the "city_id" field.
func (tuo *TenderUpdateOne) ClearCityID() *TenderUpdateOne {
	tuo.mutation.ClearCityID()
	return tuo
}

// SetDistrictID sets the "district_id" field.
func (tuo *TenderUpdateOne) SetDistrictID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetDistrictID(x)
	return tuo
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableDistrictID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetDistrictID(*x)
	}
	return tuo
}

// SetCustomerID sets the "customer_id" field.
func (tuo *TenderUpdateOne) SetCustomerID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetCustomerID(x)
	return tuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCustomerID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetCustomerID(*x)
	}
	return tuo
}

// SetFinderID sets the "finder_id" field.
func (tuo *TenderUpdateOne) SetFinderID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetFinderID(x)
	return tuo
}

// SetNillableFinderID sets the "finder_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableFinderID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetFinderID(*x)
	}
	return tuo
}

// SetCreatedByID sets the "created_by_id" field.
func (tuo *TenderUpdateOne) SetCreatedByID(x xid.ID) *TenderUpdateOne {
	tuo.mutation.SetCreatedByID(x)
	return tuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (tuo *TenderUpdateOne) SetNillableCreatedByID(x *xid.ID) *TenderUpdateOne {
	if x != nil {
		tuo.SetCreatedByID(*x)
	}
	return tuo
}

// SetArea sets the "area" edge to the Area entity.
func (tuo *TenderUpdateOne) SetArea(a *Area) *TenderUpdateOne {
	return tuo.SetAreaID(a.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tuo *TenderUpdateOne) SetCustomer(c *Customer) *TenderUpdateOne {
	return tuo.SetCustomerID(c.ID)
}

// SetFinder sets the "finder" edge to the User entity.
func (tuo *TenderUpdateOne) SetFinder(u *User) *TenderUpdateOne {
	return tuo.SetFinderID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tuo *TenderUpdateOne) SetCreatedBy(u *User) *TenderUpdateOne {
	return tuo.SetCreatedByID(u.ID)
}

// AddFollowingSaleIDs adds the "following_sales" edge to the User entity by IDs.
func (tuo *TenderUpdateOne) AddFollowingSaleIDs(ids ...xid.ID) *TenderUpdateOne {
	tuo.mutation.AddFollowingSaleIDs(ids...)
	return tuo
}

// AddFollowingSales adds the "following_sales" edges to the User entity.
func (tuo *TenderUpdateOne) AddFollowingSales(u ...*User) *TenderUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddFollowingSaleIDs(ids...)
}

// SetProvince sets the "province" edge to the Province entity.
func (tuo *TenderUpdateOne) SetProvince(p *Province) *TenderUpdateOne {
	return tuo.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tuo *TenderUpdateOne) SetCity(c *City) *TenderUpdateOne {
	return tuo.SetCityID(c.ID)
}

// SetDistrict sets the "district" edge to the District entity.
func (tuo *TenderUpdateOne) SetDistrict(d *District) *TenderUpdateOne {
	return tuo.SetDistrictID(d.ID)
}

// Mutation returns the TenderMutation object of the builder.
func (tuo *TenderUpdateOne) Mutation() *TenderMutation {
	return tuo.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (tuo *TenderUpdateOne) ClearArea() *TenderUpdateOne {
	tuo.mutation.ClearArea()
	return tuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (tuo *TenderUpdateOne) ClearCustomer() *TenderUpdateOne {
	tuo.mutation.ClearCustomer()
	return tuo
}

// ClearFinder clears the "finder" edge to the User entity.
func (tuo *TenderUpdateOne) ClearFinder() *TenderUpdateOne {
	tuo.mutation.ClearFinder()
	return tuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tuo *TenderUpdateOne) ClearCreatedBy() *TenderUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// ClearFollowingSales clears all "following_sales" edges to the User entity.
func (tuo *TenderUpdateOne) ClearFollowingSales() *TenderUpdateOne {
	tuo.mutation.ClearFollowingSales()
	return tuo
}

// RemoveFollowingSaleIDs removes the "following_sales" edge to User entities by IDs.
func (tuo *TenderUpdateOne) RemoveFollowingSaleIDs(ids ...xid.ID) *TenderUpdateOne {
	tuo.mutation.RemoveFollowingSaleIDs(ids...)
	return tuo
}

// RemoveFollowingSales removes "following_sales" edges to User entities.
func (tuo *TenderUpdateOne) RemoveFollowingSales(u ...*User) *TenderUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveFollowingSaleIDs(ids...)
}

// ClearProvince clears the "province" edge to the Province entity.
func (tuo *TenderUpdateOne) ClearProvince() *TenderUpdateOne {
	tuo.mutation.ClearProvince()
	return tuo
}

// ClearCity clears the "city" edge to the City entity.
func (tuo *TenderUpdateOne) ClearCity() *TenderUpdateOne {
	tuo.mutation.ClearCity()
	return tuo
}

// ClearDistrict clears the "district" edge to the District entity.
func (tuo *TenderUpdateOne) ClearDistrict() *TenderUpdateOne {
	tuo.mutation.ClearDistrict()
	return tuo
}

// Where appends a list predicates to the TenderUpdate builder.
func (tuo *TenderUpdateOne) Where(ps ...predicate.Tender) *TenderUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenderUpdateOne) Select(field string, fields ...string) *TenderUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tender entity.
func (tuo *TenderUpdateOne) Save(ctx context.Context) (*Tender, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenderUpdateOne) SaveX(ctx context.Context) *Tender {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenderUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenderUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenderUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tender.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenderUpdateOne) check() error {
	if v, ok := tuo.mutation.SizeAndValueRating(); ok {
		if err := tender.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CreditAndPaymentRating(); ok {
		if err := tender.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TimeLimitRating(); ok {
		if err := tender.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CustomerRelationshipRating(); ok {
		if err := tender.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CompetitivePartnershipRating(); ok {
		if err := tender.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "Tender.competitive_partnership_rating": %w`, err)}
		}
	}
	if tuo.mutation.AreaCleared() && len(tuo.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.area"`)
	}
	if tuo.mutation.CustomerCleared() && len(tuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.customer"`)
	}
	if tuo.mutation.FinderCleared() && len(tuo.mutation.FinderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.finder"`)
	}
	if tuo.mutation.CreatedByCleared() && len(tuo.mutation.CreatedByIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.created_by"`)
	}
	if tuo.mutation.ProvinceCleared() && len(tuo.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.province"`)
	}
	if tuo.mutation.DistrictCleared() && len(tuo.mutation.DistrictIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tender.district"`)
	}
	return nil
}

func (tuo *TenderUpdateOne) sqlSave(ctx context.Context) (_node *Tender, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tender.Table, tender.Columns, sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tender.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tender.FieldID)
		for _, f := range fields {
			if !tender.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tender.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tender.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(tender.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(tender.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(tender.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tender.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.EstimatedAmount(); ok {
		_spec.SetField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedEstimatedAmount(); ok {
		_spec.AddField(tender.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if tuo.mutation.EstimatedAmountCleared() {
		_spec.ClearField(tender.FieldEstimatedAmount, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.TenderDate(); ok {
		_spec.SetField(tender.FieldTenderDate, field.TypeTime, value)
	}
	if tuo.mutation.TenderDateCleared() {
		_spec.ClearField(tender.FieldTenderDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.DiscoveryDate(); ok {
		_spec.SetField(tender.FieldDiscoveryDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Address(); ok {
		_spec.SetField(tender.FieldAddress, field.TypeString, value)
	}
	if tuo.mutation.AddressCleared() {
		_spec.ClearField(tender.FieldAddress, field.TypeString)
	}
	if value, ok := tuo.mutation.FullAddress(); ok {
		_spec.SetField(tender.FieldFullAddress, field.TypeString, value)
	}
	if tuo.mutation.FullAddressCleared() {
		_spec.ClearField(tender.FieldFullAddress, field.TypeString)
	}
	if value, ok := tuo.mutation.Contractor(); ok {
		_spec.SetField(tender.FieldContractor, field.TypeString, value)
	}
	if tuo.mutation.ContractorCleared() {
		_spec.ClearField(tender.FieldContractor, field.TypeString)
	}
	if value, ok := tuo.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tender.FieldSizeAndValueRating, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedSizeAndValueRating(); ok {
		_spec.AddField(tender.FieldSizeAndValueRating, field.TypeInt8, value)
	}
	if tuo.mutation.SizeAndValueRatingCleared() {
		_spec.ClearField(tender.FieldSizeAndValueRating, field.TypeInt8)
	}
	if value, ok := tuo.mutation.SizeAndValueRatingOverview(); ok {
		_spec.SetField(tender.FieldSizeAndValueRatingOverview, field.TypeString, value)
	}
	if tuo.mutation.SizeAndValueRatingOverviewCleared() {
		_spec.ClearField(tender.FieldSizeAndValueRatingOverview, field.TypeString)
	}
	if value, ok := tuo.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRating, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedCreditAndPaymentRating(); ok {
		_spec.AddField(tender.FieldCreditAndPaymentRating, field.TypeInt8, value)
	}
	if tuo.mutation.CreditAndPaymentRatingCleared() {
		_spec.ClearField(tender.FieldCreditAndPaymentRating, field.TypeInt8)
	}
	if value, ok := tuo.mutation.CreditAndPaymentRatingOverview(); ok {
		_spec.SetField(tender.FieldCreditAndPaymentRatingOverview, field.TypeString, value)
	}
	if tuo.mutation.CreditAndPaymentRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCreditAndPaymentRatingOverview, field.TypeString)
	}
	if value, ok := tuo.mutation.TimeLimitRating(); ok {
		_spec.SetField(tender.FieldTimeLimitRating, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedTimeLimitRating(); ok {
		_spec.AddField(tender.FieldTimeLimitRating, field.TypeInt8, value)
	}
	if tuo.mutation.TimeLimitRatingCleared() {
		_spec.ClearField(tender.FieldTimeLimitRating, field.TypeInt8)
	}
	if value, ok := tuo.mutation.TimeLimitRatingOverview(); ok {
		_spec.SetField(tender.FieldTimeLimitRatingOverview, field.TypeString, value)
	}
	if tuo.mutation.TimeLimitRatingOverviewCleared() {
		_spec.ClearField(tender.FieldTimeLimitRatingOverview, field.TypeString)
	}
	if value, ok := tuo.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRating, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedCustomerRelationshipRating(); ok {
		_spec.AddField(tender.FieldCustomerRelationshipRating, field.TypeInt8, value)
	}
	if tuo.mutation.CustomerRelationshipRatingCleared() {
		_spec.ClearField(tender.FieldCustomerRelationshipRating, field.TypeInt8)
	}
	if value, ok := tuo.mutation.CustomerRelationshipRatingOverview(); ok {
		_spec.SetField(tender.FieldCustomerRelationshipRatingOverview, field.TypeString, value)
	}
	if tuo.mutation.CustomerRelationshipRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCustomerRelationshipRatingOverview, field.TypeString)
	}
	if value, ok := tuo.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRating, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedCompetitivePartnershipRating(); ok {
		_spec.AddField(tender.FieldCompetitivePartnershipRating, field.TypeInt8, value)
	}
	if tuo.mutation.CompetitivePartnershipRatingCleared() {
		_spec.ClearField(tender.FieldCompetitivePartnershipRating, field.TypeInt8)
	}
	if value, ok := tuo.mutation.CompetitivePartnershipRatingOverview(); ok {
		_spec.SetField(tender.FieldCompetitivePartnershipRatingOverview, field.TypeString, value)
	}
	if tuo.mutation.CompetitivePartnershipRatingOverviewCleared() {
		_spec.ClearField(tender.FieldCompetitivePartnershipRatingOverview, field.TypeString)
	}
	if value, ok := tuo.mutation.PrepareToBid(); ok {
		_spec.SetField(tender.FieldPrepareToBid, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.ProjectCode(); ok {
		_spec.SetField(tender.FieldProjectCode, field.TypeString, value)
	}
	if tuo.mutation.ProjectCodeCleared() {
		_spec.ClearField(tender.FieldProjectCode, field.TypeString)
	}
	if value, ok := tuo.mutation.ProjectDefinition(); ok {
		_spec.SetField(tender.FieldProjectDefinition, field.TypeString, value)
	}
	if tuo.mutation.ProjectDefinitionCleared() {
		_spec.ClearField(tender.FieldProjectDefinition, field.TypeString)
	}
	if value, ok := tuo.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectStartDate, field.TypeTime, value)
	}
	if tuo.mutation.EstimatedProjectStartDateCleared() {
		_spec.ClearField(tender.FieldEstimatedProjectStartDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tender.FieldEstimatedProjectEndDate, field.TypeTime, value)
	}
	if tuo.mutation.EstimatedProjectEndDateCleared() {
		_spec.ClearField(tender.FieldEstimatedProjectEndDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.ProjectType(); ok {
		_spec.SetField(tender.FieldProjectType, field.TypeString, value)
	}
	if tuo.mutation.ProjectTypeCleared() {
		_spec.ClearField(tender.FieldProjectType, field.TypeString)
	}
	if value, ok := tuo.mutation.Attachements(); ok {
		_spec.SetField(tender.FieldAttachements, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedAttachements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tender.FieldAttachements, value)
		})
	}
	if tuo.mutation.AttachementsCleared() {
		_spec.ClearField(tender.FieldAttachements, field.TypeJSON)
	}
	if value, ok := tuo.mutation.GeoCoordinate(); ok {
		_spec.SetField(tender.FieldGeoCoordinate, field.TypeOther, value)
	}
	if tuo.mutation.GeoCoordinateCleared() {
		_spec.ClearField(tender.FieldGeoCoordinate, field.TypeOther)
	}
	if value, ok := tuo.mutation.Remark(); ok {
		_spec.SetField(tender.FieldRemark, field.TypeString, value)
	}
	if tuo.mutation.RemarkCleared() {
		_spec.ClearField(tender.FieldRemark, field.TypeString)
	}
	if value, ok := tuo.mutation.Images(); ok {
		_spec.SetField(tender.FieldImages, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tender.FieldImages, value)
		})
	}
	if tuo.mutation.ImagesCleared() {
		_spec.ClearField(tender.FieldImages, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TenderSituations(); ok {
		_spec.SetField(tender.FieldTenderSituations, field.TypeString, value)
	}
	if tuo.mutation.TenderSituationsCleared() {
		_spec.ClearField(tender.FieldTenderSituations, field.TypeString)
	}
	if value, ok := tuo.mutation.OwnerSituations(); ok {
		_spec.SetField(tender.FieldOwnerSituations, field.TypeString, value)
	}
	if tuo.mutation.OwnerSituationsCleared() {
		_spec.ClearField(tender.FieldOwnerSituations, field.TypeString)
	}
	if value, ok := tuo.mutation.BiddingInstructions(); ok {
		_spec.SetField(tender.FieldBiddingInstructions, field.TypeString, value)
	}
	if tuo.mutation.BiddingInstructionsCleared() {
		_spec.ClearField(tender.FieldBiddingInstructions, field.TypeString)
	}
	if value, ok := tuo.mutation.CompetitorSituations(); ok {
		_spec.SetField(tender.FieldCompetitorSituations, field.TypeString, value)
	}
	if tuo.mutation.CompetitorSituationsCleared() {
		_spec.ClearField(tender.FieldCompetitorSituations, field.TypeString)
	}
	if value, ok := tuo.mutation.CostEngineer(); ok {
		_spec.SetField(tender.FieldCostEngineer, field.TypeString, value)
	}
	if tuo.mutation.CostEngineerCleared() {
		_spec.ClearField(tender.FieldCostEngineer, field.TypeString)
	}
	if value, ok := tuo.mutation.TenderForm(); ok {
		_spec.SetField(tender.FieldTenderForm, field.TypeString, value)
	}
	if tuo.mutation.TenderFormCleared() {
		_spec.ClearField(tender.FieldTenderForm, field.TypeString)
	}
	if value, ok := tuo.mutation.ContractForm(); ok {
		_spec.SetField(tender.FieldContractForm, field.TypeString, value)
	}
	if tuo.mutation.ContractFormCleared() {
		_spec.ClearField(tender.FieldContractForm, field.TypeString)
	}
	if value, ok := tuo.mutation.ManagementCompany(); ok {
		_spec.SetField(tender.FieldManagementCompany, field.TypeString, value)
	}
	if tuo.mutation.ManagementCompanyCleared() {
		_spec.ClearField(tender.FieldManagementCompany, field.TypeString)
	}
	if value, ok := tuo.mutation.TenderingAgency(); ok {
		_spec.SetField(tender.FieldTenderingAgency, field.TypeString, value)
	}
	if tuo.mutation.TenderingAgencyCleared() {
		_spec.ClearField(tender.FieldTenderingAgency, field.TypeString)
	}
	if value, ok := tuo.mutation.BiddingDate(); ok {
		_spec.SetField(tender.FieldBiddingDate, field.TypeTime, value)
	}
	if tuo.mutation.BiddingDateCleared() {
		_spec.ClearField(tender.FieldBiddingDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.FacadeConsultant(); ok {
		_spec.SetField(tender.FieldFacadeConsultant, field.TypeString, value)
	}
	if tuo.mutation.FacadeConsultantCleared() {
		_spec.ClearField(tender.FieldFacadeConsultant, field.TypeString)
	}
	if value, ok := tuo.mutation.DesignUnit(); ok {
		_spec.SetField(tender.FieldDesignUnit, field.TypeString, value)
	}
	if tuo.mutation.DesignUnitCleared() {
		_spec.ClearField(tender.FieldDesignUnit, field.TypeString)
	}
	if value, ok := tuo.mutation.ConsultingFirm(); ok {
		_spec.SetField(tender.FieldConsultingFirm, field.TypeString, value)
	}
	if tuo.mutation.ConsultingFirmCleared() {
		_spec.ClearField(tender.FieldConsultingFirm, field.TypeString)
	}
	if value, ok := tuo.mutation.KeyProject(); ok {
		_spec.SetField(tender.FieldKeyProject, field.TypeBool, value)
	}
	if tuo.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.AreaTable,
			Columns: []string{tender.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CustomerTable,
			Columns: []string{tender.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FinderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FinderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.FinderTable,
			Columns: []string{tender.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tender.CreatedByTable,
			Columns: []string{tender.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FollowingSalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFollowingSalesIDs(); len(nodes) > 0 && !tuo.mutation.FollowingSalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FollowingSalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tender.FollowingSalesTable,
			Columns: tender.FollowingSalesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.ProvinceTable,
			Columns: []string{tender.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.CityTable,
			Columns: []string{tender.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tender.DistrictTable,
			Columns: []string{tender.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tender{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tender.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
