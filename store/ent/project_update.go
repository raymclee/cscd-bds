// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectstaff"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProjectUpdate) SetCode(s string) *ProjectUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCode(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetManager sets the "manager" field.
func (pu *ProjectUpdate) SetManager(s string) *ProjectUpdate {
	pu.mutation.SetManager(s)
	return pu
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableManager(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetManager(*s)
	}
	return pu
}

// ClearManager clears the value of the "manager" field.
func (pu *ProjectUpdate) ClearManager() *ProjectUpdate {
	pu.mutation.ClearManager()
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProjectUpdate) ClearName() *ProjectUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetOwner sets the "owner" field.
func (pu *ProjectUpdate) SetOwner(s string) *ProjectUpdate {
	pu.mutation.SetOwner(s)
	return pu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwner(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetOwner(*s)
	}
	return pu
}

// ClearOwner clears the value of the "owner" field.
func (pu *ProjectUpdate) ClearOwner() *ProjectUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// SetJzs sets the "jzs" field.
func (pu *ProjectUpdate) SetJzs(s string) *ProjectUpdate {
	pu.mutation.SetJzs(s)
	return pu
}

// SetNillableJzs sets the "jzs" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableJzs(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetJzs(*s)
	}
	return pu
}

// ClearJzs clears the value of the "jzs" field.
func (pu *ProjectUpdate) ClearJzs() *ProjectUpdate {
	pu.mutation.ClearJzs()
	return pu
}

// SetMcn sets the "mcn" field.
func (pu *ProjectUpdate) SetMcn(s string) *ProjectUpdate {
	pu.mutation.SetMcn(s)
	return pu
}

// SetNillableMcn sets the "mcn" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMcn(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetMcn(*s)
	}
	return pu
}

// ClearMcn clears the value of the "mcn" field.
func (pu *ProjectUpdate) ClearMcn() *ProjectUpdate {
	pu.mutation.ClearMcn()
	return pu
}

// SetConsultant sets the "consultant" field.
func (pu *ProjectUpdate) SetConsultant(s string) *ProjectUpdate {
	pu.mutation.SetConsultant(s)
	return pu
}

// SetNillableConsultant sets the "consultant" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableConsultant(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetConsultant(*s)
	}
	return pu
}

// ClearConsultant clears the value of the "consultant" field.
func (pu *ProjectUpdate) ClearConsultant() *ProjectUpdate {
	pu.mutation.ClearConsultant()
	return pu
}

// SetAreas sets the "areas" field.
func (pu *ProjectUpdate) SetAreas(s string) *ProjectUpdate {
	pu.mutation.SetAreas(s)
	return pu
}

// SetNillableAreas sets the "areas" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAreas(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAreas(*s)
	}
	return pu
}

// ClearAreas clears the value of the "areas" field.
func (pu *ProjectUpdate) ClearAreas() *ProjectUpdate {
	pu.mutation.ClearAreas()
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *ProjectUpdate) SetStartDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStartDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// ClearStartDate clears the value of the "start_date" field.
func (pu *ProjectUpdate) ClearStartDate() *ProjectUpdate {
	pu.mutation.ClearStartDate()
	return pu
}

// SetFsDate sets the "fs_date" field.
func (pu *ProjectUpdate) SetFsDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetFsDate(t)
	return pu
}

// SetNillableFsDate sets the "fs_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableFsDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetFsDate(*t)
	}
	return pu
}

// ClearFsDate clears the value of the "fs_date" field.
func (pu *ProjectUpdate) ClearFsDate() *ProjectUpdate {
	pu.mutation.ClearFsDate()
	return pu
}

// SetOpDate sets the "op_date" field.
func (pu *ProjectUpdate) SetOpDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetOpDate(t)
	return pu
}

// SetNillableOpDate sets the "op_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOpDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetOpDate(*t)
	}
	return pu
}

// ClearOpDate clears the value of the "op_date" field.
func (pu *ProjectUpdate) ClearOpDate() *ProjectUpdate {
	pu.mutation.ClearOpDate()
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *ProjectUpdate) SetEndDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableEndDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// ClearEndDate clears the value of the "end_date" field.
func (pu *ProjectUpdate) ClearEndDate() *ProjectUpdate {
	pu.mutation.ClearEndDate()
	return pu
}

// SetMntyr sets the "mntyr" field.
func (pu *ProjectUpdate) SetMntyr(s string) *ProjectUpdate {
	pu.mutation.SetMntyr(s)
	return pu
}

// SetNillableMntyr sets the "mntyr" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMntyr(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetMntyr(*s)
	}
	return pu
}

// ClearMntyr clears the value of the "mntyr" field.
func (pu *ProjectUpdate) ClearMntyr() *ProjectUpdate {
	pu.mutation.ClearMntyr()
	return pu
}

// SetConType sets the "con_type" field.
func (pu *ProjectUpdate) SetConType(s string) *ProjectUpdate {
	pu.mutation.SetConType(s)
	return pu
}

// SetNillableConType sets the "con_type" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableConType(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetConType(*s)
	}
	return pu
}

// ClearConType clears the value of the "con_type" field.
func (pu *ProjectUpdate) ClearConType() *ProjectUpdate {
	pu.mutation.ClearConType()
	return pu
}

// SetIsFinished sets the "is_finished" field.
func (pu *ProjectUpdate) SetIsFinished(b bool) *ProjectUpdate {
	pu.mutation.SetIsFinished(b)
	return pu
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIsFinished(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetIsFinished(*b)
	}
	return pu
}

// SetCje sets the "cje" field.
func (pu *ProjectUpdate) SetCje(f float64) *ProjectUpdate {
	pu.mutation.ResetCje()
	pu.mutation.SetCje(f)
	return pu
}

// SetNillableCje sets the "cje" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCje(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetCje(*f)
	}
	return pu
}

// AddCje adds f to the "cje" field.
func (pu *ProjectUpdate) AddCje(f float64) *ProjectUpdate {
	pu.mutation.AddCje(f)
	return pu
}

// ClearCje clears the value of the "cje" field.
func (pu *ProjectUpdate) ClearCje() *ProjectUpdate {
	pu.mutation.ClearCje()
	return pu
}

// SetYye sets the "yye" field.
func (pu *ProjectUpdate) SetYye(f float64) *ProjectUpdate {
	pu.mutation.ResetYye()
	pu.mutation.SetYye(f)
	return pu
}

// SetNillableYye sets the "yye" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableYye(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetYye(*f)
	}
	return pu
}

// AddYye adds f to the "yye" field.
func (pu *ProjectUpdate) AddYye(f float64) *ProjectUpdate {
	pu.mutation.AddYye(f)
	return pu
}

// ClearYye clears the value of the "yye" field.
func (pu *ProjectUpdate) ClearYye() *ProjectUpdate {
	pu.mutation.ClearYye()
	return pu
}

// SetXjl sets the "xjl" field.
func (pu *ProjectUpdate) SetXjl(f float64) *ProjectUpdate {
	pu.mutation.ResetXjl()
	pu.mutation.SetXjl(f)
	return pu
}

// SetNillableXjl sets the "xjl" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXjl(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXjl(*f)
	}
	return pu
}

// AddXjl adds f to the "xjl" field.
func (pu *ProjectUpdate) AddXjl(f float64) *ProjectUpdate {
	pu.mutation.AddXjl(f)
	return pu
}

// ClearXjl clears the value of the "xjl" field.
func (pu *ProjectUpdate) ClearXjl() *ProjectUpdate {
	pu.mutation.ClearXjl()
	return pu
}

// SetXmglfYs sets the "xmglf_ys" field.
func (pu *ProjectUpdate) SetXmglfYs(f float64) *ProjectUpdate {
	pu.mutation.ResetXmglfYs()
	pu.mutation.SetXmglfYs(f)
	return pu
}

// SetNillableXmglfYs sets the "xmglf_ys" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmglfYs(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmglfYs(*f)
	}
	return pu
}

// AddXmglfYs adds f to the "xmglf_ys" field.
func (pu *ProjectUpdate) AddXmglfYs(f float64) *ProjectUpdate {
	pu.mutation.AddXmglfYs(f)
	return pu
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (pu *ProjectUpdate) ClearXmglfYs() *ProjectUpdate {
	pu.mutation.ClearXmglfYs()
	return pu
}

// SetXmglfLj sets the "xmglf_lj" field.
func (pu *ProjectUpdate) SetXmglfLj(f float64) *ProjectUpdate {
	pu.mutation.ResetXmglfLj()
	pu.mutation.SetXmglfLj(f)
	return pu
}

// SetNillableXmglfLj sets the "xmglf_lj" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmglfLj(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmglfLj(*f)
	}
	return pu
}

// AddXmglfLj adds f to the "xmglf_lj" field.
func (pu *ProjectUpdate) AddXmglfLj(f float64) *ProjectUpdate {
	pu.mutation.AddXmglfLj(f)
	return pu
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (pu *ProjectUpdate) ClearXmglfLj() *ProjectUpdate {
	pu.mutation.ClearXmglfLj()
	return pu
}

// SetXmsjf sets the "xmsjf" field.
func (pu *ProjectUpdate) SetXmsjf(f float64) *ProjectUpdate {
	pu.mutation.ResetXmsjf()
	pu.mutation.SetXmsjf(f)
	return pu
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmsjf(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmsjf(*f)
	}
	return pu
}

// AddXmsjf adds f to the "xmsjf" field.
func (pu *ProjectUpdate) AddXmsjf(f float64) *ProjectUpdate {
	pu.mutation.AddXmsjf(f)
	return pu
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (pu *ProjectUpdate) ClearXmsjf() *ProjectUpdate {
	pu.mutation.ClearXmsjf()
	return pu
}

// SetXmfzr sets the "xmfzr" field.
func (pu *ProjectUpdate) SetXmfzr(s string) *ProjectUpdate {
	pu.mutation.SetXmfzr(s)
	return pu
}

// SetNillableXmfzr sets the "xmfzr" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmfzr(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetXmfzr(*s)
	}
	return pu
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (pu *ProjectUpdate) ClearXmfzr() *ProjectUpdate {
	pu.mutation.ClearXmfzr()
	return pu
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (pu *ProjectUpdate) SetOwnerApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetOwnerApplyAmount()
	pu.mutation.SetOwnerApplyAmount(f)
	return pu
}

// SetNillableOwnerApplyAmount sets the "owner_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetOwnerApplyAmount(*f)
	}
	return pu
}

// AddOwnerApplyAmount adds f to the "owner_apply_amount" field.
func (pu *ProjectUpdate) AddOwnerApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddOwnerApplyAmount(f)
	return pu
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (pu *ProjectUpdate) ClearOwnerApplyAmount() *ProjectUpdate {
	pu.mutation.ClearOwnerApplyAmount()
	return pu
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (pu *ProjectUpdate) SetOwnerApplyCount(i int) *ProjectUpdate {
	pu.mutation.ResetOwnerApplyCount()
	pu.mutation.SetOwnerApplyCount(i)
	return pu
}

// SetNillableOwnerApplyCount sets the "owner_apply_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApplyCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOwnerApplyCount(*i)
	}
	return pu
}

// AddOwnerApplyCount adds i to the "owner_apply_count" field.
func (pu *ProjectUpdate) AddOwnerApplyCount(i int) *ProjectUpdate {
	pu.mutation.AddOwnerApplyCount(i)
	return pu
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (pu *ProjectUpdate) ClearOwnerApplyCount() *ProjectUpdate {
	pu.mutation.ClearOwnerApplyCount()
	return pu
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (pu *ProjectUpdate) SetOwnerApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetOwnerApproveAmount()
	pu.mutation.SetOwnerApproveAmount(f)
	return pu
}

// SetNillableOwnerApproveAmount sets the "owner_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetOwnerApproveAmount(*f)
	}
	return pu
}

// AddOwnerApproveAmount adds f to the "owner_approve_amount" field.
func (pu *ProjectUpdate) AddOwnerApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddOwnerApproveAmount(f)
	return pu
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (pu *ProjectUpdate) ClearOwnerApproveAmount() *ProjectUpdate {
	pu.mutation.ClearOwnerApproveAmount()
	return pu
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (pu *ProjectUpdate) SetOwnerApproveCount(i int) *ProjectUpdate {
	pu.mutation.ResetOwnerApproveCount()
	pu.mutation.SetOwnerApproveCount(i)
	return pu
}

// SetNillableOwnerApproveCount sets the "owner_approve_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApproveCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOwnerApproveCount(*i)
	}
	return pu
}

// AddOwnerApproveCount adds i to the "owner_approve_count" field.
func (pu *ProjectUpdate) AddOwnerApproveCount(i int) *ProjectUpdate {
	pu.mutation.AddOwnerApproveCount(i)
	return pu
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (pu *ProjectUpdate) ClearOwnerApproveCount() *ProjectUpdate {
	pu.mutation.ClearOwnerApproveCount()
	return pu
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (pu *ProjectUpdate) SetContractorApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetContractorApplyAmount()
	pu.mutation.SetContractorApplyAmount(f)
	return pu
}

// SetNillableContractorApplyAmount sets the "contractor_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetContractorApplyAmount(*f)
	}
	return pu
}

// AddContractorApplyAmount adds f to the "contractor_apply_amount" field.
func (pu *ProjectUpdate) AddContractorApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddContractorApplyAmount(f)
	return pu
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (pu *ProjectUpdate) ClearContractorApplyAmount() *ProjectUpdate {
	pu.mutation.ClearContractorApplyAmount()
	return pu
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (pu *ProjectUpdate) SetContractorApplyCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractorApplyCount()
	pu.mutation.SetContractorApplyCount(i)
	return pu
}

// SetNillableContractorApplyCount sets the "contractor_apply_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApplyCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractorApplyCount(*i)
	}
	return pu
}

// AddContractorApplyCount adds i to the "contractor_apply_count" field.
func (pu *ProjectUpdate) AddContractorApplyCount(i int) *ProjectUpdate {
	pu.mutation.AddContractorApplyCount(i)
	return pu
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (pu *ProjectUpdate) ClearContractorApplyCount() *ProjectUpdate {
	pu.mutation.ClearContractorApplyCount()
	return pu
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (pu *ProjectUpdate) SetContractorApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetContractorApproveAmount()
	pu.mutation.SetContractorApproveAmount(f)
	return pu
}

// SetNillableContractorApproveAmount sets the "contractor_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetContractorApproveAmount(*f)
	}
	return pu
}

// AddContractorApproveAmount adds f to the "contractor_approve_amount" field.
func (pu *ProjectUpdate) AddContractorApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddContractorApproveAmount(f)
	return pu
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (pu *ProjectUpdate) ClearContractorApproveAmount() *ProjectUpdate {
	pu.mutation.ClearContractorApproveAmount()
	return pu
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (pu *ProjectUpdate) SetContractorApproveCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractorApproveCount()
	pu.mutation.SetContractorApproveCount(i)
	return pu
}

// SetNillableContractorApproveCount sets the "contractor_approve_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApproveCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractorApproveCount(*i)
	}
	return pu
}

// AddContractorApproveCount adds i to the "contractor_approve_count" field.
func (pu *ProjectUpdate) AddContractorApproveCount(i int) *ProjectUpdate {
	pu.mutation.AddContractorApproveCount(i)
	return pu
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (pu *ProjectUpdate) ClearContractorApproveCount() *ProjectUpdate {
	pu.mutation.ClearContractorApproveCount()
	return pu
}

// SetInstallProgress sets the "install_progress" field.
func (pu *ProjectUpdate) SetInstallProgress(f float64) *ProjectUpdate {
	pu.mutation.ResetInstallProgress()
	pu.mutation.SetInstallProgress(f)
	return pu
}

// SetNillableInstallProgress sets the "install_progress" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableInstallProgress(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetInstallProgress(*f)
	}
	return pu
}

// AddInstallProgress adds f to the "install_progress" field.
func (pu *ProjectUpdate) AddInstallProgress(f float64) *ProjectUpdate {
	pu.mutation.AddInstallProgress(f)
	return pu
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (pu *ProjectUpdate) ClearInstallProgress() *ProjectUpdate {
	pu.mutation.ClearInstallProgress()
	return pu
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (pu *ProjectUpdate) SetEffectiveContractAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetEffectiveContractAmount()
	pu.mutation.SetEffectiveContractAmount(f)
	return pu
}

// SetNillableEffectiveContractAmount sets the "effective_contract_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableEffectiveContractAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetEffectiveContractAmount(*f)
	}
	return pu
}

// AddEffectiveContractAmount adds f to the "effective_contract_amount" field.
func (pu *ProjectUpdate) AddEffectiveContractAmount(f float64) *ProjectUpdate {
	pu.mutation.AddEffectiveContractAmount(f)
	return pu
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (pu *ProjectUpdate) ClearEffectiveContractAmount() *ProjectUpdate {
	pu.mutation.ClearEffectiveContractAmount()
	return pu
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (pu *ProjectUpdate) SetVaApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetVaApplyAmount()
	pu.mutation.SetVaApplyAmount(f)
	return pu
}

// SetNillableVaApplyAmount sets the "va_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableVaApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetVaApplyAmount(*f)
	}
	return pu
}

// AddVaApplyAmount adds f to the "va_apply_amount" field.
func (pu *ProjectUpdate) AddVaApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddVaApplyAmount(f)
	return pu
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (pu *ProjectUpdate) ClearVaApplyAmount() *ProjectUpdate {
	pu.mutation.ClearVaApplyAmount()
	return pu
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (pu *ProjectUpdate) SetVaApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetVaApproveAmount()
	pu.mutation.SetVaApproveAmount(f)
	return pu
}

// SetNillableVaApproveAmount sets the "va_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableVaApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetVaApproveAmount(*f)
	}
	return pu
}

// AddVaApproveAmount adds f to the "va_approve_amount" field.
func (pu *ProjectUpdate) AddVaApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddVaApproveAmount(f)
	return pu
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (pu *ProjectUpdate) ClearVaApproveAmount() *ProjectUpdate {
	pu.mutation.ClearVaApproveAmount()
	return pu
}

// SetAccumulatedStatutoryDeductions sets the "accumulated_statutory_deductions" field.
func (pu *ProjectUpdate) SetAccumulatedStatutoryDeductions(f float64) *ProjectUpdate {
	pu.mutation.ResetAccumulatedStatutoryDeductions()
	pu.mutation.SetAccumulatedStatutoryDeductions(f)
	return pu
}

// SetNillableAccumulatedStatutoryDeductions sets the "accumulated_statutory_deductions" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAccumulatedStatutoryDeductions(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAccumulatedStatutoryDeductions(*f)
	}
	return pu
}

// AddAccumulatedStatutoryDeductions adds f to the "accumulated_statutory_deductions" field.
func (pu *ProjectUpdate) AddAccumulatedStatutoryDeductions(f float64) *ProjectUpdate {
	pu.mutation.AddAccumulatedStatutoryDeductions(f)
	return pu
}

// ClearAccumulatedStatutoryDeductions clears the value of the "accumulated_statutory_deductions" field.
func (pu *ProjectUpdate) ClearAccumulatedStatutoryDeductions() *ProjectUpdate {
	pu.mutation.ClearAccumulatedStatutoryDeductions()
	return pu
}

// SetAccumulatedNonStatutoryDeductions sets the "accumulated_non_statutory_deductions" field.
func (pu *ProjectUpdate) SetAccumulatedNonStatutoryDeductions(f float64) *ProjectUpdate {
	pu.mutation.ResetAccumulatedNonStatutoryDeductions()
	pu.mutation.SetAccumulatedNonStatutoryDeductions(f)
	return pu
}

// SetNillableAccumulatedNonStatutoryDeductions sets the "accumulated_non_statutory_deductions" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAccumulatedNonStatutoryDeductions(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAccumulatedNonStatutoryDeductions(*f)
	}
	return pu
}

// AddAccumulatedNonStatutoryDeductions adds f to the "accumulated_non_statutory_deductions" field.
func (pu *ProjectUpdate) AddAccumulatedNonStatutoryDeductions(f float64) *ProjectUpdate {
	pu.mutation.AddAccumulatedNonStatutoryDeductions(f)
	return pu
}

// ClearAccumulatedNonStatutoryDeductions clears the value of the "accumulated_non_statutory_deductions" field.
func (pu *ProjectUpdate) ClearAccumulatedNonStatutoryDeductions() *ProjectUpdate {
	pu.mutation.ClearAccumulatedNonStatutoryDeductions()
	return pu
}

// SetAccumulatedStatutoryDeductionsPeriod sets the "accumulated_statutory_deductions_period" field.
func (pu *ProjectUpdate) SetAccumulatedStatutoryDeductionsPeriod(f float64) *ProjectUpdate {
	pu.mutation.ResetAccumulatedStatutoryDeductionsPeriod()
	pu.mutation.SetAccumulatedStatutoryDeductionsPeriod(f)
	return pu
}

// SetNillableAccumulatedStatutoryDeductionsPeriod sets the "accumulated_statutory_deductions_period" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAccumulatedStatutoryDeductionsPeriod(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAccumulatedStatutoryDeductionsPeriod(*f)
	}
	return pu
}

// AddAccumulatedStatutoryDeductionsPeriod adds f to the "accumulated_statutory_deductions_period" field.
func (pu *ProjectUpdate) AddAccumulatedStatutoryDeductionsPeriod(f float64) *ProjectUpdate {
	pu.mutation.AddAccumulatedStatutoryDeductionsPeriod(f)
	return pu
}

// ClearAccumulatedStatutoryDeductionsPeriod clears the value of the "accumulated_statutory_deductions_period" field.
func (pu *ProjectUpdate) ClearAccumulatedStatutoryDeductionsPeriod() *ProjectUpdate {
	pu.mutation.ClearAccumulatedStatutoryDeductionsPeriod()
	return pu
}

// SetAccumulatedNonStatutoryDeductionsPeriod sets the "accumulated_non_statutory_deductions_period" field.
func (pu *ProjectUpdate) SetAccumulatedNonStatutoryDeductionsPeriod(f float64) *ProjectUpdate {
	pu.mutation.ResetAccumulatedNonStatutoryDeductionsPeriod()
	pu.mutation.SetAccumulatedNonStatutoryDeductionsPeriod(f)
	return pu
}

// SetNillableAccumulatedNonStatutoryDeductionsPeriod sets the "accumulated_non_statutory_deductions_period" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAccumulatedNonStatutoryDeductionsPeriod(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAccumulatedNonStatutoryDeductionsPeriod(*f)
	}
	return pu
}

// AddAccumulatedNonStatutoryDeductionsPeriod adds f to the "accumulated_non_statutory_deductions_period" field.
func (pu *ProjectUpdate) AddAccumulatedNonStatutoryDeductionsPeriod(f float64) *ProjectUpdate {
	pu.mutation.AddAccumulatedNonStatutoryDeductionsPeriod(f)
	return pu
}

// ClearAccumulatedNonStatutoryDeductionsPeriod clears the value of the "accumulated_non_statutory_deductions_period" field.
func (pu *ProjectUpdate) ClearAccumulatedNonStatutoryDeductionsPeriod() *ProjectUpdate {
	pu.mutation.ClearAccumulatedNonStatutoryDeductionsPeriod()
	return pu
}

// SetTotalContractAmount sets the "total_contract_amount" field.
func (pu *ProjectUpdate) SetTotalContractAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetTotalContractAmount()
	pu.mutation.SetTotalContractAmount(f)
	return pu
}

// SetNillableTotalContractAmount sets the "total_contract_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTotalContractAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetTotalContractAmount(*f)
	}
	return pu
}

// AddTotalContractAmount adds f to the "total_contract_amount" field.
func (pu *ProjectUpdate) AddTotalContractAmount(f float64) *ProjectUpdate {
	pu.mutation.AddTotalContractAmount(f)
	return pu
}

// ClearTotalContractAmount clears the value of the "total_contract_amount" field.
func (pu *ProjectUpdate) ClearTotalContractAmount() *ProjectUpdate {
	pu.mutation.ClearTotalContractAmount()
	return pu
}

// SetAluminumPlateBudgetPercentage sets the "aluminum_plate_budget_percentage" field.
func (pu *ProjectUpdate) SetAluminumPlateBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.ResetAluminumPlateBudgetPercentage()
	pu.mutation.SetAluminumPlateBudgetPercentage(f)
	return pu
}

// SetNillableAluminumPlateBudgetPercentage sets the "aluminum_plate_budget_percentage" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAluminumPlateBudgetPercentage(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAluminumPlateBudgetPercentage(*f)
	}
	return pu
}

// AddAluminumPlateBudgetPercentage adds f to the "aluminum_plate_budget_percentage" field.
func (pu *ProjectUpdate) AddAluminumPlateBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.AddAluminumPlateBudgetPercentage(f)
	return pu
}

// ClearAluminumPlateBudgetPercentage clears the value of the "aluminum_plate_budget_percentage" field.
func (pu *ProjectUpdate) ClearAluminumPlateBudgetPercentage() *ProjectUpdate {
	pu.mutation.ClearAluminumPlateBudgetPercentage()
	return pu
}

// SetAluminumBudgetPercentage sets the "aluminum_budget_percentage" field.
func (pu *ProjectUpdate) SetAluminumBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.ResetAluminumBudgetPercentage()
	pu.mutation.SetAluminumBudgetPercentage(f)
	return pu
}

// SetNillableAluminumBudgetPercentage sets the "aluminum_budget_percentage" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAluminumBudgetPercentage(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAluminumBudgetPercentage(*f)
	}
	return pu
}

// AddAluminumBudgetPercentage adds f to the "aluminum_budget_percentage" field.
func (pu *ProjectUpdate) AddAluminumBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.AddAluminumBudgetPercentage(f)
	return pu
}

// ClearAluminumBudgetPercentage clears the value of the "aluminum_budget_percentage" field.
func (pu *ProjectUpdate) ClearAluminumBudgetPercentage() *ProjectUpdate {
	pu.mutation.ClearAluminumBudgetPercentage()
	return pu
}

// SetGlassBudgetPercentage sets the "glass_budget_percentage" field.
func (pu *ProjectUpdate) SetGlassBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.ResetGlassBudgetPercentage()
	pu.mutation.SetGlassBudgetPercentage(f)
	return pu
}

// SetNillableGlassBudgetPercentage sets the "glass_budget_percentage" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGlassBudgetPercentage(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetGlassBudgetPercentage(*f)
	}
	return pu
}

// AddGlassBudgetPercentage adds f to the "glass_budget_percentage" field.
func (pu *ProjectUpdate) AddGlassBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.AddGlassBudgetPercentage(f)
	return pu
}

// ClearGlassBudgetPercentage clears the value of the "glass_budget_percentage" field.
func (pu *ProjectUpdate) ClearGlassBudgetPercentage() *ProjectUpdate {
	pu.mutation.ClearGlassBudgetPercentage()
	return pu
}

// SetIronBudgetPercentage sets the "iron_budget_percentage" field.
func (pu *ProjectUpdate) SetIronBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.ResetIronBudgetPercentage()
	pu.mutation.SetIronBudgetPercentage(f)
	return pu
}

// SetNillableIronBudgetPercentage sets the "iron_budget_percentage" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIronBudgetPercentage(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetIronBudgetPercentage(*f)
	}
	return pu
}

// AddIronBudgetPercentage adds f to the "iron_budget_percentage" field.
func (pu *ProjectUpdate) AddIronBudgetPercentage(f float64) *ProjectUpdate {
	pu.mutation.AddIronBudgetPercentage(f)
	return pu
}

// ClearIronBudgetPercentage clears the value of the "iron_budget_percentage" field.
func (pu *ProjectUpdate) ClearIronBudgetPercentage() *ProjectUpdate {
	pu.mutation.ClearIronBudgetPercentage()
	return pu
}

// SetMilestonePlanYear sets the "milestone_plan_year" field.
func (pu *ProjectUpdate) SetMilestonePlanYear(i int) *ProjectUpdate {
	pu.mutation.ResetMilestonePlanYear()
	pu.mutation.SetMilestonePlanYear(i)
	return pu
}

// SetNillableMilestonePlanYear sets the "milestone_plan_year" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMilestonePlanYear(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetMilestonePlanYear(*i)
	}
	return pu
}

// AddMilestonePlanYear adds i to the "milestone_plan_year" field.
func (pu *ProjectUpdate) AddMilestonePlanYear(i int) *ProjectUpdate {
	pu.mutation.AddMilestonePlanYear(i)
	return pu
}

// ClearMilestonePlanYear clears the value of the "milestone_plan_year" field.
func (pu *ProjectUpdate) ClearMilestonePlanYear() *ProjectUpdate {
	pu.mutation.ClearMilestonePlanYear()
	return pu
}

// SetMilestonePlanMonth sets the "milestone_plan_month" field.
func (pu *ProjectUpdate) SetMilestonePlanMonth(i int) *ProjectUpdate {
	pu.mutation.ResetMilestonePlanMonth()
	pu.mutation.SetMilestonePlanMonth(i)
	return pu
}

// SetNillableMilestonePlanMonth sets the "milestone_plan_month" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMilestonePlanMonth(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetMilestonePlanMonth(*i)
	}
	return pu
}

// AddMilestonePlanMonth adds i to the "milestone_plan_month" field.
func (pu *ProjectUpdate) AddMilestonePlanMonth(i int) *ProjectUpdate {
	pu.mutation.AddMilestonePlanMonth(i)
	return pu
}

// ClearMilestonePlanMonth clears the value of the "milestone_plan_month" field.
func (pu *ProjectUpdate) ClearMilestonePlanMonth() *ProjectUpdate {
	pu.mutation.ClearMilestonePlanMonth()
	return pu
}

// SetMilestoneDoneYear sets the "milestone_done_year" field.
func (pu *ProjectUpdate) SetMilestoneDoneYear(i int) *ProjectUpdate {
	pu.mutation.ResetMilestoneDoneYear()
	pu.mutation.SetMilestoneDoneYear(i)
	return pu
}

// SetNillableMilestoneDoneYear sets the "milestone_done_year" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMilestoneDoneYear(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetMilestoneDoneYear(*i)
	}
	return pu
}

// AddMilestoneDoneYear adds i to the "milestone_done_year" field.
func (pu *ProjectUpdate) AddMilestoneDoneYear(i int) *ProjectUpdate {
	pu.mutation.AddMilestoneDoneYear(i)
	return pu
}

// ClearMilestoneDoneYear clears the value of the "milestone_done_year" field.
func (pu *ProjectUpdate) ClearMilestoneDoneYear() *ProjectUpdate {
	pu.mutation.ClearMilestoneDoneYear()
	return pu
}

// SetMilestoneDoneMonth sets the "milestone_done_month" field.
func (pu *ProjectUpdate) SetMilestoneDoneMonth(i int) *ProjectUpdate {
	pu.mutation.ResetMilestoneDoneMonth()
	pu.mutation.SetMilestoneDoneMonth(i)
	return pu
}

// SetNillableMilestoneDoneMonth sets the "milestone_done_month" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMilestoneDoneMonth(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetMilestoneDoneMonth(*i)
	}
	return pu
}

// AddMilestoneDoneMonth adds i to the "milestone_done_month" field.
func (pu *ProjectUpdate) AddMilestoneDoneMonth(i int) *ProjectUpdate {
	pu.mutation.AddMilestoneDoneMonth(i)
	return pu
}

// ClearMilestoneDoneMonth clears the value of the "milestone_done_month" field.
func (pu *ProjectUpdate) ClearMilestoneDoneMonth() *ProjectUpdate {
	pu.mutation.ClearMilestoneDoneMonth()
	return pu
}

// SetPmArea sets the "pm_area" field.
func (pu *ProjectUpdate) SetPmArea(f float64) *ProjectUpdate {
	pu.mutation.ResetPmArea()
	pu.mutation.SetPmArea(f)
	return pu
}

// SetNillablePmArea sets the "pm_area" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmArea(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmArea(*f)
	}
	return pu
}

// AddPmArea adds f to the "pm_area" field.
func (pu *ProjectUpdate) AddPmArea(f float64) *ProjectUpdate {
	pu.mutation.AddPmArea(f)
	return pu
}

// ClearPmArea clears the value of the "pm_area" field.
func (pu *ProjectUpdate) ClearPmArea() *ProjectUpdate {
	pu.mutation.ClearPmArea()
	return pu
}

// SetPmYearTarget sets the "pm_year_target" field.
func (pu *ProjectUpdate) SetPmYearTarget(f float64) *ProjectUpdate {
	pu.mutation.ResetPmYearTarget()
	pu.mutation.SetPmYearTarget(f)
	return pu
}

// SetNillablePmYearTarget sets the "pm_year_target" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmYearTarget(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmYearTarget(*f)
	}
	return pu
}

// AddPmYearTarget adds f to the "pm_year_target" field.
func (pu *ProjectUpdate) AddPmYearTarget(f float64) *ProjectUpdate {
	pu.mutation.AddPmYearTarget(f)
	return pu
}

// ClearPmYearTarget clears the value of the "pm_year_target" field.
func (pu *ProjectUpdate) ClearPmYearTarget() *ProjectUpdate {
	pu.mutation.ClearPmYearTarget()
	return pu
}

// SetPmMonthTarget sets the "pm_month_target" field.
func (pu *ProjectUpdate) SetPmMonthTarget(f float64) *ProjectUpdate {
	pu.mutation.ResetPmMonthTarget()
	pu.mutation.SetPmMonthTarget(f)
	return pu
}

// SetNillablePmMonthTarget sets the "pm_month_target" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmMonthTarget(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmMonthTarget(*f)
	}
	return pu
}

// AddPmMonthTarget adds f to the "pm_month_target" field.
func (pu *ProjectUpdate) AddPmMonthTarget(f float64) *ProjectUpdate {
	pu.mutation.AddPmMonthTarget(f)
	return pu
}

// ClearPmMonthTarget clears the value of the "pm_month_target" field.
func (pu *ProjectUpdate) ClearPmMonthTarget() *ProjectUpdate {
	pu.mutation.ClearPmMonthTarget()
	return pu
}

// SetPmYearActual sets the "pm_year_actual" field.
func (pu *ProjectUpdate) SetPmYearActual(f float64) *ProjectUpdate {
	pu.mutation.ResetPmYearActual()
	pu.mutation.SetPmYearActual(f)
	return pu
}

// SetNillablePmYearActual sets the "pm_year_actual" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmYearActual(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmYearActual(*f)
	}
	return pu
}

// AddPmYearActual adds f to the "pm_year_actual" field.
func (pu *ProjectUpdate) AddPmYearActual(f float64) *ProjectUpdate {
	pu.mutation.AddPmYearActual(f)
	return pu
}

// ClearPmYearActual clears the value of the "pm_year_actual" field.
func (pu *ProjectUpdate) ClearPmYearActual() *ProjectUpdate {
	pu.mutation.ClearPmYearActual()
	return pu
}

// SetPmMonthActual sets the "pm_month_actual" field.
func (pu *ProjectUpdate) SetPmMonthActual(f float64) *ProjectUpdate {
	pu.mutation.ResetPmMonthActual()
	pu.mutation.SetPmMonthActual(f)
	return pu
}

// SetNillablePmMonthActual sets the "pm_month_actual" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmMonthActual(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmMonthActual(*f)
	}
	return pu
}

// AddPmMonthActual adds f to the "pm_month_actual" field.
func (pu *ProjectUpdate) AddPmMonthActual(f float64) *ProjectUpdate {
	pu.mutation.AddPmMonthActual(f)
	return pu
}

// ClearPmMonthActual clears the value of the "pm_month_actual" field.
func (pu *ProjectUpdate) ClearPmMonthActual() *ProjectUpdate {
	pu.mutation.ClearPmMonthActual()
	return pu
}

// SetPmTotal sets the "pm_total" field.
func (pu *ProjectUpdate) SetPmTotal(f float64) *ProjectUpdate {
	pu.mutation.ResetPmTotal()
	pu.mutation.SetPmTotal(f)
	return pu
}

// SetNillablePmTotal sets the "pm_total" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmTotal(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmTotal(*f)
	}
	return pu
}

// AddPmTotal adds f to the "pm_total" field.
func (pu *ProjectUpdate) AddPmTotal(f float64) *ProjectUpdate {
	pu.mutation.AddPmTotal(f)
	return pu
}

// ClearPmTotal clears the value of the "pm_total" field.
func (pu *ProjectUpdate) ClearPmTotal() *ProjectUpdate {
	pu.mutation.ClearPmTotal()
	return pu
}

// SetPmYesterday sets the "pm_yesterday" field.
func (pu *ProjectUpdate) SetPmYesterday(f float64) *ProjectUpdate {
	pu.mutation.ResetPmYesterday()
	pu.mutation.SetPmYesterday(f)
	return pu
}

// SetNillablePmYesterday sets the "pm_yesterday" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePmYesterday(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPmYesterday(*f)
	}
	return pu
}

// AddPmYesterday adds f to the "pm_yesterday" field.
func (pu *ProjectUpdate) AddPmYesterday(f float64) *ProjectUpdate {
	pu.mutation.AddPmYesterday(f)
	return pu
}

// ClearPmYesterday clears the value of the "pm_yesterday" field.
func (pu *ProjectUpdate) ClearPmYesterday() *ProjectUpdate {
	pu.mutation.ClearPmYesterday()
	return pu
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (pu *ProjectUpdate) SetUnitInventoryTotal(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitInventoryTotal()
	pu.mutation.SetUnitInventoryTotal(f)
	return pu
}

// SetNillableUnitInventoryTotal sets the "unit_inventory_total" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitInventoryTotal(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitInventoryTotal(*f)
	}
	return pu
}

// AddUnitInventoryTotal adds f to the "unit_inventory_total" field.
func (pu *ProjectUpdate) AddUnitInventoryTotal(f float64) *ProjectUpdate {
	pu.mutation.AddUnitInventoryTotal(f)
	return pu
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (pu *ProjectUpdate) ClearUnitInventoryTotal() *ProjectUpdate {
	pu.mutation.ClearUnitInventoryTotal()
	return pu
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (pu *ProjectUpdate) SetUnitComponentTotal(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentTotal()
	pu.mutation.SetUnitComponentTotal(f)
	return pu
}

// SetNillableUnitComponentTotal sets the "unit_component_total" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentTotal(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentTotal(*f)
	}
	return pu
}

// AddUnitComponentTotal adds f to the "unit_component_total" field.
func (pu *ProjectUpdate) AddUnitComponentTotal(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentTotal(f)
	return pu
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (pu *ProjectUpdate) ClearUnitComponentTotal() *ProjectUpdate {
	pu.mutation.ClearUnitComponentTotal()
	return pu
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (pu *ProjectUpdate) SetUnitComponentProduction(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentProduction()
	pu.mutation.SetUnitComponentProduction(f)
	return pu
}

// SetNillableUnitComponentProduction sets the "unit_component_production" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentProduction(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentProduction(*f)
	}
	return pu
}

// AddUnitComponentProduction adds f to the "unit_component_production" field.
func (pu *ProjectUpdate) AddUnitComponentProduction(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentProduction(f)
	return pu
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (pu *ProjectUpdate) ClearUnitComponentProduction() *ProjectUpdate {
	pu.mutation.ClearUnitComponentProduction()
	return pu
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (pu *ProjectUpdate) SetUnitComponentInstallation(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentInstallation()
	pu.mutation.SetUnitComponentInstallation(f)
	return pu
}

// SetNillableUnitComponentInstallation sets the "unit_component_installation" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentInstallation(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentInstallation(*f)
	}
	return pu
}

// AddUnitComponentInstallation adds f to the "unit_component_installation" field.
func (pu *ProjectUpdate) AddUnitComponentInstallation(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentInstallation(f)
	return pu
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (pu *ProjectUpdate) ClearUnitComponentInstallation() *ProjectUpdate {
	pu.mutation.ClearUnitComponentInstallation()
	return pu
}

// SetMaterialLoss sets the "material_loss" field.
func (pu *ProjectUpdate) SetMaterialLoss(f float64) *ProjectUpdate {
	pu.mutation.ResetMaterialLoss()
	pu.mutation.SetMaterialLoss(f)
	return pu
}

// SetNillableMaterialLoss sets the "material_loss" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMaterialLoss(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetMaterialLoss(*f)
	}
	return pu
}

// AddMaterialLoss adds f to the "material_loss" field.
func (pu *ProjectUpdate) AddMaterialLoss(f float64) *ProjectUpdate {
	pu.mutation.AddMaterialLoss(f)
	return pu
}

// ClearMaterialLoss clears the value of the "material_loss" field.
func (pu *ProjectUpdate) ClearMaterialLoss() *ProjectUpdate {
	pu.mutation.ClearMaterialLoss()
	return pu
}

// SetDesignRatedWeight sets the "design_rated_weight" field.
func (pu *ProjectUpdate) SetDesignRatedWeight(f float64) *ProjectUpdate {
	pu.mutation.ResetDesignRatedWeight()
	pu.mutation.SetDesignRatedWeight(f)
	return pu
}

// SetNillableDesignRatedWeight sets the "design_rated_weight" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDesignRatedWeight(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetDesignRatedWeight(*f)
	}
	return pu
}

// AddDesignRatedWeight adds f to the "design_rated_weight" field.
func (pu *ProjectUpdate) AddDesignRatedWeight(f float64) *ProjectUpdate {
	pu.mutation.AddDesignRatedWeight(f)
	return pu
}

// ClearDesignRatedWeight clears the value of the "design_rated_weight" field.
func (pu *ProjectUpdate) ClearDesignRatedWeight() *ProjectUpdate {
	pu.mutation.ClearDesignRatedWeight()
	return pu
}

// SetProcessingWeight sets the "processing_weight" field.
func (pu *ProjectUpdate) SetProcessingWeight(f float64) *ProjectUpdate {
	pu.mutation.ResetProcessingWeight()
	pu.mutation.SetProcessingWeight(f)
	return pu
}

// SetNillableProcessingWeight sets the "processing_weight" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableProcessingWeight(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetProcessingWeight(*f)
	}
	return pu
}

// AddProcessingWeight adds f to the "processing_weight" field.
func (pu *ProjectUpdate) AddProcessingWeight(f float64) *ProjectUpdate {
	pu.mutation.AddProcessingWeight(f)
	return pu
}

// ClearProcessingWeight clears the value of the "processing_weight" field.
func (pu *ProjectUpdate) ClearProcessingWeight() *ProjectUpdate {
	pu.mutation.ClearProcessingWeight()
	return pu
}

// SetItemStockWeight sets the "item_stock_weight" field.
func (pu *ProjectUpdate) SetItemStockWeight(f float64) *ProjectUpdate {
	pu.mutation.ResetItemStockWeight()
	pu.mutation.SetItemStockWeight(f)
	return pu
}

// SetNillableItemStockWeight sets the "item_stock_weight" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableItemStockWeight(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetItemStockWeight(*f)
	}
	return pu
}

// AddItemStockWeight adds f to the "item_stock_weight" field.
func (pu *ProjectUpdate) AddItemStockWeight(f float64) *ProjectUpdate {
	pu.mutation.AddItemStockWeight(f)
	return pu
}

// ClearItemStockWeight clears the value of the "item_stock_weight" field.
func (pu *ProjectUpdate) ClearItemStockWeight() *ProjectUpdate {
	pu.mutation.ClearItemStockWeight()
	return pu
}

// SetPalletsInStock sets the "pallets_in_stock" field.
func (pu *ProjectUpdate) SetPalletsInStock(f float64) *ProjectUpdate {
	pu.mutation.ResetPalletsInStock()
	pu.mutation.SetPalletsInStock(f)
	return pu
}

// SetNillablePalletsInStock sets the "pallets_in_stock" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePalletsInStock(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPalletsInStock(*f)
	}
	return pu
}

// AddPalletsInStock adds f to the "pallets_in_stock" field.
func (pu *ProjectUpdate) AddPalletsInStock(f float64) *ProjectUpdate {
	pu.mutation.AddPalletsInStock(f)
	return pu
}

// ClearPalletsInStock clears the value of the "pallets_in_stock" field.
func (pu *ProjectUpdate) ClearPalletsInStock() *ProjectUpdate {
	pu.mutation.ClearPalletsInStock()
	return pu
}

// SetPartsInStock sets the "parts_in_stock" field.
func (pu *ProjectUpdate) SetPartsInStock(f float64) *ProjectUpdate {
	pu.mutation.ResetPartsInStock()
	pu.mutation.SetPartsInStock(f)
	return pu
}

// SetNillablePartsInStock sets the "parts_in_stock" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePartsInStock(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetPartsInStock(*f)
	}
	return pu
}

// AddPartsInStock adds f to the "parts_in_stock" field.
func (pu *ProjectUpdate) AddPartsInStock(f float64) *ProjectUpdate {
	pu.mutation.AddPartsInStock(f)
	return pu
}

// ClearPartsInStock clears the value of the "parts_in_stock" field.
func (pu *ProjectUpdate) ClearPartsInStock() *ProjectUpdate {
	pu.mutation.ClearPartsInStock()
	return pu
}

// SetQualityScore sets the "quality_score" field.
func (pu *ProjectUpdate) SetQualityScore(f float64) *ProjectUpdate {
	pu.mutation.ResetQualityScore()
	pu.mutation.SetQualityScore(f)
	return pu
}

// SetNillableQualityScore sets the "quality_score" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQualityScore(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetQualityScore(*f)
	}
	return pu
}

// AddQualityScore adds f to the "quality_score" field.
func (pu *ProjectUpdate) AddQualityScore(f float64) *ProjectUpdate {
	pu.mutation.AddQualityScore(f)
	return pu
}

// ClearQualityScore clears the value of the "quality_score" field.
func (pu *ProjectUpdate) ClearQualityScore() *ProjectUpdate {
	pu.mutation.ClearQualityScore()
	return pu
}

// SetQualityRanking sets the "quality_ranking" field.
func (pu *ProjectUpdate) SetQualityRanking(f float64) *ProjectUpdate {
	pu.mutation.ResetQualityRanking()
	pu.mutation.SetQualityRanking(f)
	return pu
}

// SetNillableQualityRanking sets the "quality_ranking" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQualityRanking(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetQualityRanking(*f)
	}
	return pu
}

// AddQualityRanking adds f to the "quality_ranking" field.
func (pu *ProjectUpdate) AddQualityRanking(f float64) *ProjectUpdate {
	pu.mutation.AddQualityRanking(f)
	return pu
}

// ClearQualityRanking clears the value of the "quality_ranking" field.
func (pu *ProjectUpdate) ClearQualityRanking() *ProjectUpdate {
	pu.mutation.ClearQualityRanking()
	return pu
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsTotalOrderQuantity()
	pu.mutation.SetBulkMaterialsTotalOrderQuantity(f)
	return pu
}

// SetNillableBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsTotalOrderQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsTotalOrderQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsTotalOrderQuantity adds f to the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsTotalOrderQuantity(f)
	return pu
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsTotalOrderQuantity()
	return pu
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsCompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsCompletedQuantity()
	pu.mutation.SetBulkMaterialsCompletedQuantity(f)
	return pu
}

// SetNillableBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsCompletedQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsCompletedQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsCompletedQuantity adds f to the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsCompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsCompletedQuantity(f)
	return pu
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsCompletedQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsCompletedQuantity()
	return pu
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsUncompletedQuantity()
	pu.mutation.SetBulkMaterialsUncompletedQuantity(f)
	return pu
}

// SetNillableBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsUncompletedQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsUncompletedQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsUncompletedQuantity adds f to the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsUncompletedQuantity(f)
	return pu
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsUncompletedQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsUncompletedQuantity()
	return pu
}

// SetPlanTotalCount sets the "plan_total_count" field.
func (pu *ProjectUpdate) SetPlanTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetPlanTotalCount()
	pu.mutation.SetPlanTotalCount(i)
	return pu
}

// SetNillablePlanTotalCount sets the "plan_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePlanTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetPlanTotalCount(*i)
	}
	return pu
}

// AddPlanTotalCount adds i to the "plan_total_count" field.
func (pu *ProjectUpdate) AddPlanTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddPlanTotalCount(i)
	return pu
}

// ClearPlanTotalCount clears the value of the "plan_total_count" field.
func (pu *ProjectUpdate) ClearPlanTotalCount() *ProjectUpdate {
	pu.mutation.ClearPlanTotalCount()
	return pu
}

// SetPlanOverdueCount sets the "plan_overdue_count" field.
func (pu *ProjectUpdate) SetPlanOverdueCount(i int) *ProjectUpdate {
	pu.mutation.ResetPlanOverdueCount()
	pu.mutation.SetPlanOverdueCount(i)
	return pu
}

// SetNillablePlanOverdueCount sets the "plan_overdue_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePlanOverdueCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetPlanOverdueCount(*i)
	}
	return pu
}

// AddPlanOverdueCount adds i to the "plan_overdue_count" field.
func (pu *ProjectUpdate) AddPlanOverdueCount(i int) *ProjectUpdate {
	pu.mutation.AddPlanOverdueCount(i)
	return pu
}

// ClearPlanOverdueCount clears the value of the "plan_overdue_count" field.
func (pu *ProjectUpdate) ClearPlanOverdueCount() *ProjectUpdate {
	pu.mutation.ClearPlanOverdueCount()
	return pu
}

// SetPlanOverdueMonthCount sets the "plan_overdue_month_count" field.
func (pu *ProjectUpdate) SetPlanOverdueMonthCount(i int) *ProjectUpdate {
	pu.mutation.ResetPlanOverdueMonthCount()
	pu.mutation.SetPlanOverdueMonthCount(i)
	return pu
}

// SetNillablePlanOverdueMonthCount sets the "plan_overdue_month_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePlanOverdueMonthCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetPlanOverdueMonthCount(*i)
	}
	return pu
}

// AddPlanOverdueMonthCount adds i to the "plan_overdue_month_count" field.
func (pu *ProjectUpdate) AddPlanOverdueMonthCount(i int) *ProjectUpdate {
	pu.mutation.AddPlanOverdueMonthCount(i)
	return pu
}

// ClearPlanOverdueMonthCount clears the value of the "plan_overdue_month_count" field.
func (pu *ProjectUpdate) ClearPlanOverdueMonthCount() *ProjectUpdate {
	pu.mutation.ClearPlanOverdueMonthCount()
	return pu
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) SetDiagramBdFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramBdFinishCount()
	pu.mutation.SetDiagramBdFinishCount(i)
	return pu
}

// SetNillableDiagramBdFinishCount sets the "diagram_bd_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramBdFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramBdFinishCount(*i)
	}
	return pu
}

// AddDiagramBdFinishCount adds i to the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) AddDiagramBdFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramBdFinishCount(i)
	return pu
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramBdFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramBdFinishCount()
	return pu
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) SetDiagramBdTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramBdTotalCount()
	pu.mutation.SetDiagramBdTotalCount(i)
	return pu
}

// SetNillableDiagramBdTotalCount sets the "diagram_bd_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramBdTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramBdTotalCount(*i)
	}
	return pu
}

// AddDiagramBdTotalCount adds i to the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) AddDiagramBdTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramBdTotalCount(i)
	return pu
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) ClearDiagramBdTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramBdTotalCount()
	return pu
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) SetDiagramConstructionFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramConstructionFinishCount()
	pu.mutation.SetDiagramConstructionFinishCount(i)
	return pu
}

// SetNillableDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramConstructionFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramConstructionFinishCount(*i)
	}
	return pu
}

// AddDiagramConstructionFinishCount adds i to the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) AddDiagramConstructionFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramConstructionFinishCount(i)
	return pu
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramConstructionFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramConstructionFinishCount()
	return pu
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) SetDiagramConstructionTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramConstructionTotalCount()
	pu.mutation.SetDiagramConstructionTotalCount(i)
	return pu
}

// SetNillableDiagramConstructionTotalCount sets the "diagram_construction_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramConstructionTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramConstructionTotalCount(*i)
	}
	return pu
}

// AddDiagramConstructionTotalCount adds i to the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) AddDiagramConstructionTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramConstructionTotalCount(i)
	return pu
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) ClearDiagramConstructionTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramConstructionTotalCount()
	return pu
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) SetDiagramProcessingFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramProcessingFinishCount()
	pu.mutation.SetDiagramProcessingFinishCount(i)
	return pu
}

// SetNillableDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramProcessingFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramProcessingFinishCount(*i)
	}
	return pu
}

// AddDiagramProcessingFinishCount adds i to the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) AddDiagramProcessingFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramProcessingFinishCount(i)
	return pu
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramProcessingFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramProcessingFinishCount()
	return pu
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) SetDiagramProcessingTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramProcessingTotalCount()
	pu.mutation.SetDiagramProcessingTotalCount(i)
	return pu
}

// SetNillableDiagramProcessingTotalCount sets the "diagram_processing_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramProcessingTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramProcessingTotalCount(*i)
	}
	return pu
}

// AddDiagramProcessingTotalCount adds i to the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) AddDiagramProcessingTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramProcessingTotalCount(i)
	return pu
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) ClearDiagramProcessingTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramProcessingTotalCount()
	return pu
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) SetDiagramCApprovalRatioNumerator(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramCApprovalRatioNumerator()
	pu.mutation.SetDiagramCApprovalRatioNumerator(i)
	return pu
}

// SetNillableDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramCApprovalRatioNumerator(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramCApprovalRatioNumerator(*i)
	}
	return pu
}

// AddDiagramCApprovalRatioNumerator adds i to the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) AddDiagramCApprovalRatioNumerator(i int) *ProjectUpdate {
	pu.mutation.AddDiagramCApprovalRatioNumerator(i)
	return pu
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) ClearDiagramCApprovalRatioNumerator() *ProjectUpdate {
	pu.mutation.ClearDiagramCApprovalRatioNumerator()
	return pu
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) SetDiagramCApprovalRatioDenominator(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramCApprovalRatioDenominator()
	pu.mutation.SetDiagramCApprovalRatioDenominator(i)
	return pu
}

// SetNillableDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramCApprovalRatioDenominator(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramCApprovalRatioDenominator(*i)
	}
	return pu
}

// AddDiagramCApprovalRatioDenominator adds i to the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) AddDiagramCApprovalRatioDenominator(i int) *ProjectUpdate {
	pu.mutation.AddDiagramCApprovalRatioDenominator(i)
	return pu
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) ClearDiagramCApprovalRatioDenominator() *ProjectUpdate {
	pu.mutation.ClearDiagramCApprovalRatioDenominator()
	return pu
}

// AddVoIDs adds the "vos" edge to the ProjectVO entity by IDs.
func (pu *ProjectUpdate) AddVoIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.AddVoIDs(ids...)
	return pu
}

// AddVos adds the "vos" edges to the ProjectVO entity.
func (pu *ProjectUpdate) AddVos(p ...*ProjectVO) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddVoIDs(ids...)
}

// AddProjectStaffIDs adds the "project_staffs" edge to the ProjectStaff entity by IDs.
func (pu *ProjectUpdate) AddProjectStaffIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.AddProjectStaffIDs(ids...)
	return pu
}

// AddProjectStaffs adds the "project_staffs" edges to the ProjectStaff entity.
func (pu *ProjectUpdate) AddProjectStaffs(p ...*ProjectStaff) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProjectStaffIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddUserIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUsers adds the "users" edges to the User entity.
func (pu *ProjectUpdate) AddUsers(u ...*User) *ProjectUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearVos clears all "vos" edges to the ProjectVO entity.
func (pu *ProjectUpdate) ClearVos() *ProjectUpdate {
	pu.mutation.ClearVos()
	return pu
}

// RemoveVoIDs removes the "vos" edge to ProjectVO entities by IDs.
func (pu *ProjectUpdate) RemoveVoIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.RemoveVoIDs(ids...)
	return pu
}

// RemoveVos removes "vos" edges to ProjectVO entities.
func (pu *ProjectUpdate) RemoveVos(p ...*ProjectVO) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveVoIDs(ids...)
}

// ClearProjectStaffs clears all "project_staffs" edges to the ProjectStaff entity.
func (pu *ProjectUpdate) ClearProjectStaffs() *ProjectUpdate {
	pu.mutation.ClearProjectStaffs()
	return pu
}

// RemoveProjectStaffIDs removes the "project_staffs" edge to ProjectStaff entities by IDs.
func (pu *ProjectUpdate) RemoveProjectStaffIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.RemoveProjectStaffIDs(ids...)
	return pu
}

// RemoveProjectStaffs removes "project_staffs" edges to ProjectStaff entities.
func (pu *ProjectUpdate) RemoveProjectStaffs(p ...*ProjectStaff) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProjectStaffIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (pu *ProjectUpdate) ClearUsers() *ProjectUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveUserIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUsers removes "users" edges to User entities.
func (pu *ProjectUpdate) RemoveUsers(u ...*User) *ProjectUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Manager(); ok {
		_spec.SetField(project.FieldManager, field.TypeString, value)
	}
	if pu.mutation.ManagerCleared() {
		_spec.ClearField(project.FieldManager, field.TypeString)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(project.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if pu.mutation.OwnerCleared() {
		_spec.ClearField(project.FieldOwner, field.TypeString)
	}
	if value, ok := pu.mutation.Jzs(); ok {
		_spec.SetField(project.FieldJzs, field.TypeString, value)
	}
	if pu.mutation.JzsCleared() {
		_spec.ClearField(project.FieldJzs, field.TypeString)
	}
	if value, ok := pu.mutation.Mcn(); ok {
		_spec.SetField(project.FieldMcn, field.TypeString, value)
	}
	if pu.mutation.McnCleared() {
		_spec.ClearField(project.FieldMcn, field.TypeString)
	}
	if value, ok := pu.mutation.Consultant(); ok {
		_spec.SetField(project.FieldConsultant, field.TypeString, value)
	}
	if pu.mutation.ConsultantCleared() {
		_spec.ClearField(project.FieldConsultant, field.TypeString)
	}
	if value, ok := pu.mutation.Areas(); ok {
		_spec.SetField(project.FieldAreas, field.TypeString, value)
	}
	if pu.mutation.AreasCleared() {
		_spec.ClearField(project.FieldAreas, field.TypeString)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(project.FieldStartDate, field.TypeTime, value)
	}
	if pu.mutation.StartDateCleared() {
		_spec.ClearField(project.FieldStartDate, field.TypeTime)
	}
	if value, ok := pu.mutation.FsDate(); ok {
		_spec.SetField(project.FieldFsDate, field.TypeTime, value)
	}
	if pu.mutation.FsDateCleared() {
		_spec.ClearField(project.FieldFsDate, field.TypeTime)
	}
	if value, ok := pu.mutation.OpDate(); ok {
		_spec.SetField(project.FieldOpDate, field.TypeTime, value)
	}
	if pu.mutation.OpDateCleared() {
		_spec.ClearField(project.FieldOpDate, field.TypeTime)
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.SetField(project.FieldEndDate, field.TypeTime, value)
	}
	if pu.mutation.EndDateCleared() {
		_spec.ClearField(project.FieldEndDate, field.TypeTime)
	}
	if value, ok := pu.mutation.Mntyr(); ok {
		_spec.SetField(project.FieldMntyr, field.TypeString, value)
	}
	if pu.mutation.MntyrCleared() {
		_spec.ClearField(project.FieldMntyr, field.TypeString)
	}
	if value, ok := pu.mutation.ConType(); ok {
		_spec.SetField(project.FieldConType, field.TypeString, value)
	}
	if pu.mutation.ConTypeCleared() {
		_spec.ClearField(project.FieldConType, field.TypeString)
	}
	if value, ok := pu.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Cje(); ok {
		_spec.SetField(project.FieldCje, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedCje(); ok {
		_spec.AddField(project.FieldCje, field.TypeFloat64, value)
	}
	if pu.mutation.CjeCleared() {
		_spec.ClearField(project.FieldCje, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Yye(); ok {
		_spec.SetField(project.FieldYye, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedYye(); ok {
		_spec.AddField(project.FieldYye, field.TypeFloat64, value)
	}
	if pu.mutation.YyeCleared() {
		_spec.ClearField(project.FieldYye, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xjl(); ok {
		_spec.SetField(project.FieldXjl, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXjl(); ok {
		_spec.AddField(project.FieldXjl, field.TypeFloat64, value)
	}
	if pu.mutation.XjlCleared() {
		_spec.ClearField(project.FieldXjl, field.TypeFloat64)
	}
	if value, ok := pu.mutation.XmglfYs(); ok {
		_spec.SetField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmglfYs(); ok {
		_spec.AddField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if pu.mutation.XmglfYsCleared() {
		_spec.ClearField(project.FieldXmglfYs, field.TypeFloat64)
	}
	if value, ok := pu.mutation.XmglfLj(); ok {
		_spec.SetField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmglfLj(); ok {
		_spec.AddField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if pu.mutation.XmglfLjCleared() {
		_spec.ClearField(project.FieldXmglfLj, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xmsjf(); ok {
		_spec.SetField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmsjf(); ok {
		_spec.AddField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if pu.mutation.XmsjfCleared() {
		_spec.ClearField(project.FieldXmsjf, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xmfzr(); ok {
		_spec.SetField(project.FieldXmfzr, field.TypeString, value)
	}
	if pu.mutation.XmfzrCleared() {
		_spec.ClearField(project.FieldXmfzr, field.TypeString)
	}
	if value, ok := pu.mutation.OwnerApplyAmount(); ok {
		_spec.SetField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOwnerApplyAmount(); ok {
		_spec.AddField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.OwnerApplyAmountCleared() {
		_spec.ClearField(project.FieldOwnerApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OwnerApplyCount(); ok {
		_spec.SetField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOwnerApplyCount(); ok {
		_spec.AddField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if pu.mutation.OwnerApplyCountCleared() {
		_spec.ClearField(project.FieldOwnerApplyCount, field.TypeInt)
	}
	if value, ok := pu.mutation.OwnerApproveAmount(); ok {
		_spec.SetField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOwnerApproveAmount(); ok {
		_spec.AddField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.OwnerApproveAmountCleared() {
		_spec.ClearField(project.FieldOwnerApproveAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OwnerApproveCount(); ok {
		_spec.SetField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOwnerApproveCount(); ok {
		_spec.AddField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if pu.mutation.OwnerApproveCountCleared() {
		_spec.ClearField(project.FieldOwnerApproveCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractorApplyAmount(); ok {
		_spec.SetField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedContractorApplyAmount(); ok {
		_spec.AddField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.ContractorApplyAmountCleared() {
		_spec.ClearField(project.FieldContractorApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ContractorApplyCount(); ok {
		_spec.SetField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractorApplyCount(); ok {
		_spec.AddField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if pu.mutation.ContractorApplyCountCleared() {
		_spec.ClearField(project.FieldContractorApplyCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractorApproveAmount(); ok {
		_spec.SetField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedContractorApproveAmount(); ok {
		_spec.AddField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.ContractorApproveAmountCleared() {
		_spec.ClearField(project.FieldContractorApproveAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ContractorApproveCount(); ok {
		_spec.SetField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractorApproveCount(); ok {
		_spec.AddField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if pu.mutation.ContractorApproveCountCleared() {
		_spec.ClearField(project.FieldContractorApproveCount, field.TypeInt)
	}
	if value, ok := pu.mutation.InstallProgress(); ok {
		_spec.SetField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedInstallProgress(); ok {
		_spec.AddField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if pu.mutation.InstallProgressCleared() {
		_spec.ClearField(project.FieldInstallProgress, field.TypeFloat64)
	}
	if value, ok := pu.mutation.EffectiveContractAmount(); ok {
		_spec.SetField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedEffectiveContractAmount(); ok {
		_spec.AddField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if pu.mutation.EffectiveContractAmountCleared() {
		_spec.ClearField(project.FieldEffectiveContractAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.VaApplyAmount(); ok {
		_spec.SetField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedVaApplyAmount(); ok {
		_spec.AddField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.VaApplyAmountCleared() {
		_spec.ClearField(project.FieldVaApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.VaApproveAmount(); ok {
		_spec.SetField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedVaApproveAmount(); ok {
		_spec.AddField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.VaApproveAmountCleared() {
		_spec.ClearField(project.FieldVaApproveAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AccumulatedStatutoryDeductions(); ok {
		_spec.SetField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAccumulatedStatutoryDeductions(); ok {
		_spec.AddField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64, value)
	}
	if pu.mutation.AccumulatedStatutoryDeductionsCleared() {
		_spec.ClearField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AccumulatedNonStatutoryDeductions(); ok {
		_spec.SetField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAccumulatedNonStatutoryDeductions(); ok {
		_spec.AddField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64, value)
	}
	if pu.mutation.AccumulatedNonStatutoryDeductionsCleared() {
		_spec.ClearField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AccumulatedStatutoryDeductionsPeriod(); ok {
		_spec.SetField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAccumulatedStatutoryDeductionsPeriod(); ok {
		_spec.AddField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if pu.mutation.AccumulatedStatutoryDeductionsPeriodCleared() {
		_spec.ClearField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AccumulatedNonStatutoryDeductionsPeriod(); ok {
		_spec.SetField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAccumulatedNonStatutoryDeductionsPeriod(); ok {
		_spec.AddField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if pu.mutation.AccumulatedNonStatutoryDeductionsPeriodCleared() {
		_spec.ClearField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64)
	}
	if value, ok := pu.mutation.TotalContractAmount(); ok {
		_spec.SetField(project.FieldTotalContractAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedTotalContractAmount(); ok {
		_spec.AddField(project.FieldTotalContractAmount, field.TypeFloat64, value)
	}
	if pu.mutation.TotalContractAmountCleared() {
		_spec.ClearField(project.FieldTotalContractAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AluminumPlateBudgetPercentage(); ok {
		_spec.SetField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAluminumPlateBudgetPercentage(); ok {
		_spec.AddField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64, value)
	}
	if pu.mutation.AluminumPlateBudgetPercentageCleared() {
		_spec.ClearField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AluminumBudgetPercentage(); ok {
		_spec.SetField(project.FieldAluminumBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAluminumBudgetPercentage(); ok {
		_spec.AddField(project.FieldAluminumBudgetPercentage, field.TypeFloat64, value)
	}
	if pu.mutation.AluminumBudgetPercentageCleared() {
		_spec.ClearField(project.FieldAluminumBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := pu.mutation.GlassBudgetPercentage(); ok {
		_spec.SetField(project.FieldGlassBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedGlassBudgetPercentage(); ok {
		_spec.AddField(project.FieldGlassBudgetPercentage, field.TypeFloat64, value)
	}
	if pu.mutation.GlassBudgetPercentageCleared() {
		_spec.ClearField(project.FieldGlassBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := pu.mutation.IronBudgetPercentage(); ok {
		_spec.SetField(project.FieldIronBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedIronBudgetPercentage(); ok {
		_spec.AddField(project.FieldIronBudgetPercentage, field.TypeFloat64, value)
	}
	if pu.mutation.IronBudgetPercentageCleared() {
		_spec.ClearField(project.FieldIronBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := pu.mutation.MilestonePlanYear(); ok {
		_spec.SetField(project.FieldMilestonePlanYear, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMilestonePlanYear(); ok {
		_spec.AddField(project.FieldMilestonePlanYear, field.TypeInt, value)
	}
	if pu.mutation.MilestonePlanYearCleared() {
		_spec.ClearField(project.FieldMilestonePlanYear, field.TypeInt)
	}
	if value, ok := pu.mutation.MilestonePlanMonth(); ok {
		_spec.SetField(project.FieldMilestonePlanMonth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMilestonePlanMonth(); ok {
		_spec.AddField(project.FieldMilestonePlanMonth, field.TypeInt, value)
	}
	if pu.mutation.MilestonePlanMonthCleared() {
		_spec.ClearField(project.FieldMilestonePlanMonth, field.TypeInt)
	}
	if value, ok := pu.mutation.MilestoneDoneYear(); ok {
		_spec.SetField(project.FieldMilestoneDoneYear, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMilestoneDoneYear(); ok {
		_spec.AddField(project.FieldMilestoneDoneYear, field.TypeInt, value)
	}
	if pu.mutation.MilestoneDoneYearCleared() {
		_spec.ClearField(project.FieldMilestoneDoneYear, field.TypeInt)
	}
	if value, ok := pu.mutation.MilestoneDoneMonth(); ok {
		_spec.SetField(project.FieldMilestoneDoneMonth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMilestoneDoneMonth(); ok {
		_spec.AddField(project.FieldMilestoneDoneMonth, field.TypeInt, value)
	}
	if pu.mutation.MilestoneDoneMonthCleared() {
		_spec.ClearField(project.FieldMilestoneDoneMonth, field.TypeInt)
	}
	if value, ok := pu.mutation.PmArea(); ok {
		_spec.SetField(project.FieldPmArea, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmArea(); ok {
		_spec.AddField(project.FieldPmArea, field.TypeFloat64, value)
	}
	if pu.mutation.PmAreaCleared() {
		_spec.ClearField(project.FieldPmArea, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmYearTarget(); ok {
		_spec.SetField(project.FieldPmYearTarget, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmYearTarget(); ok {
		_spec.AddField(project.FieldPmYearTarget, field.TypeFloat64, value)
	}
	if pu.mutation.PmYearTargetCleared() {
		_spec.ClearField(project.FieldPmYearTarget, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmMonthTarget(); ok {
		_spec.SetField(project.FieldPmMonthTarget, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmMonthTarget(); ok {
		_spec.AddField(project.FieldPmMonthTarget, field.TypeFloat64, value)
	}
	if pu.mutation.PmMonthTargetCleared() {
		_spec.ClearField(project.FieldPmMonthTarget, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmYearActual(); ok {
		_spec.SetField(project.FieldPmYearActual, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmYearActual(); ok {
		_spec.AddField(project.FieldPmYearActual, field.TypeFloat64, value)
	}
	if pu.mutation.PmYearActualCleared() {
		_spec.ClearField(project.FieldPmYearActual, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmMonthActual(); ok {
		_spec.SetField(project.FieldPmMonthActual, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmMonthActual(); ok {
		_spec.AddField(project.FieldPmMonthActual, field.TypeFloat64, value)
	}
	if pu.mutation.PmMonthActualCleared() {
		_spec.ClearField(project.FieldPmMonthActual, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmTotal(); ok {
		_spec.SetField(project.FieldPmTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmTotal(); ok {
		_spec.AddField(project.FieldPmTotal, field.TypeFloat64, value)
	}
	if pu.mutation.PmTotalCleared() {
		_spec.ClearField(project.FieldPmTotal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PmYesterday(); ok {
		_spec.SetField(project.FieldPmYesterday, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPmYesterday(); ok {
		_spec.AddField(project.FieldPmYesterday, field.TypeFloat64, value)
	}
	if pu.mutation.PmYesterdayCleared() {
		_spec.ClearField(project.FieldPmYesterday, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitInventoryTotal(); ok {
		_spec.SetField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitInventoryTotal(); ok {
		_spec.AddField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if pu.mutation.UnitInventoryTotalCleared() {
		_spec.ClearField(project.FieldUnitInventoryTotal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentTotal(); ok {
		_spec.SetField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentTotal(); ok {
		_spec.AddField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentTotalCleared() {
		_spec.ClearField(project.FieldUnitComponentTotal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentProduction(); ok {
		_spec.SetField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentProduction(); ok {
		_spec.AddField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentProductionCleared() {
		_spec.ClearField(project.FieldUnitComponentProduction, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentInstallation(); ok {
		_spec.SetField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentInstallation(); ok {
		_spec.AddField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentInstallationCleared() {
		_spec.ClearField(project.FieldUnitComponentInstallation, field.TypeFloat64)
	}
	if value, ok := pu.mutation.MaterialLoss(); ok {
		_spec.SetField(project.FieldMaterialLoss, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedMaterialLoss(); ok {
		_spec.AddField(project.FieldMaterialLoss, field.TypeFloat64, value)
	}
	if pu.mutation.MaterialLossCleared() {
		_spec.ClearField(project.FieldMaterialLoss, field.TypeFloat64)
	}
	if value, ok := pu.mutation.DesignRatedWeight(); ok {
		_spec.SetField(project.FieldDesignRatedWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDesignRatedWeight(); ok {
		_spec.AddField(project.FieldDesignRatedWeight, field.TypeFloat64, value)
	}
	if pu.mutation.DesignRatedWeightCleared() {
		_spec.ClearField(project.FieldDesignRatedWeight, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ProcessingWeight(); ok {
		_spec.SetField(project.FieldProcessingWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedProcessingWeight(); ok {
		_spec.AddField(project.FieldProcessingWeight, field.TypeFloat64, value)
	}
	if pu.mutation.ProcessingWeightCleared() {
		_spec.ClearField(project.FieldProcessingWeight, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ItemStockWeight(); ok {
		_spec.SetField(project.FieldItemStockWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedItemStockWeight(); ok {
		_spec.AddField(project.FieldItemStockWeight, field.TypeFloat64, value)
	}
	if pu.mutation.ItemStockWeightCleared() {
		_spec.ClearField(project.FieldItemStockWeight, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PalletsInStock(); ok {
		_spec.SetField(project.FieldPalletsInStock, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPalletsInStock(); ok {
		_spec.AddField(project.FieldPalletsInStock, field.TypeFloat64, value)
	}
	if pu.mutation.PalletsInStockCleared() {
		_spec.ClearField(project.FieldPalletsInStock, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PartsInStock(); ok {
		_spec.SetField(project.FieldPartsInStock, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPartsInStock(); ok {
		_spec.AddField(project.FieldPartsInStock, field.TypeFloat64, value)
	}
	if pu.mutation.PartsInStockCleared() {
		_spec.ClearField(project.FieldPartsInStock, field.TypeFloat64)
	}
	if value, ok := pu.mutation.QualityScore(); ok {
		_spec.SetField(project.FieldQualityScore, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedQualityScore(); ok {
		_spec.AddField(project.FieldQualityScore, field.TypeFloat64, value)
	}
	if pu.mutation.QualityScoreCleared() {
		_spec.ClearField(project.FieldQualityScore, field.TypeFloat64)
	}
	if value, ok := pu.mutation.QualityRanking(); ok {
		_spec.SetField(project.FieldQualityRanking, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedQualityRanking(); ok {
		_spec.AddField(project.FieldQualityRanking, field.TypeFloat64, value)
	}
	if pu.mutation.QualityRankingCleared() {
		_spec.ClearField(project.FieldQualityRanking, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsTotalOrderQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsTotalOrderQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsTotalOrderQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsCompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsCompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsCompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsUncompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsUncompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsUncompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PlanTotalCount(); ok {
		_spec.SetField(project.FieldPlanTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPlanTotalCount(); ok {
		_spec.AddField(project.FieldPlanTotalCount, field.TypeInt, value)
	}
	if pu.mutation.PlanTotalCountCleared() {
		_spec.ClearField(project.FieldPlanTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.PlanOverdueCount(); ok {
		_spec.SetField(project.FieldPlanOverdueCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPlanOverdueCount(); ok {
		_spec.AddField(project.FieldPlanOverdueCount, field.TypeInt, value)
	}
	if pu.mutation.PlanOverdueCountCleared() {
		_spec.ClearField(project.FieldPlanOverdueCount, field.TypeInt)
	}
	if value, ok := pu.mutation.PlanOverdueMonthCount(); ok {
		_spec.SetField(project.FieldPlanOverdueMonthCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPlanOverdueMonthCount(); ok {
		_spec.AddField(project.FieldPlanOverdueMonthCount, field.TypeInt, value)
	}
	if pu.mutation.PlanOverdueMonthCountCleared() {
		_spec.ClearField(project.FieldPlanOverdueMonthCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramBdFinishCount(); ok {
		_spec.SetField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramBdFinishCount(); ok {
		_spec.AddField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramBdFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramBdFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramBdTotalCount(); ok {
		_spec.SetField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramBdTotalCount(); ok {
		_spec.AddField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramBdTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramBdTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramConstructionFinishCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramConstructionFinishCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramConstructionFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramConstructionTotalCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramConstructionTotalCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramConstructionTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramProcessingFinishCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramProcessingFinishCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramProcessingFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramProcessingTotalCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramProcessingTotalCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramProcessingTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramCApprovalRatioNumerator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramCApprovalRatioNumerator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if pu.mutation.DiagramCApprovalRatioNumeratorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramCApprovalRatioDenominator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramCApprovalRatioDenominator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if pu.mutation.DiagramCApprovalRatioDenominatorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt)
	}
	if pu.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVosIDs(); len(nodes) > 0 && !pu.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProjectStaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProjectStaffsIDs(); len(nodes) > 0 && !pu.mutation.ProjectStaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProjectStaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCode sets the "code" field.
func (puo *ProjectUpdateOne) SetCode(s string) *ProjectUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCode(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetManager sets the "manager" field.
func (puo *ProjectUpdateOne) SetManager(s string) *ProjectUpdateOne {
	puo.mutation.SetManager(s)
	return puo
}

// SetNillableManager sets the "manager" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableManager(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetManager(*s)
	}
	return puo
}

// ClearManager clears the value of the "manager" field.
func (puo *ProjectUpdateOne) ClearManager() *ProjectUpdateOne {
	puo.mutation.ClearManager()
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProjectUpdateOne) ClearName() *ProjectUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetOwner sets the "owner" field.
func (puo *ProjectUpdateOne) SetOwner(s string) *ProjectUpdateOne {
	puo.mutation.SetOwner(s)
	return puo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwner(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetOwner(*s)
	}
	return puo
}

// ClearOwner clears the value of the "owner" field.
func (puo *ProjectUpdateOne) ClearOwner() *ProjectUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// SetJzs sets the "jzs" field.
func (puo *ProjectUpdateOne) SetJzs(s string) *ProjectUpdateOne {
	puo.mutation.SetJzs(s)
	return puo
}

// SetNillableJzs sets the "jzs" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableJzs(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetJzs(*s)
	}
	return puo
}

// ClearJzs clears the value of the "jzs" field.
func (puo *ProjectUpdateOne) ClearJzs() *ProjectUpdateOne {
	puo.mutation.ClearJzs()
	return puo
}

// SetMcn sets the "mcn" field.
func (puo *ProjectUpdateOne) SetMcn(s string) *ProjectUpdateOne {
	puo.mutation.SetMcn(s)
	return puo
}

// SetNillableMcn sets the "mcn" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMcn(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetMcn(*s)
	}
	return puo
}

// ClearMcn clears the value of the "mcn" field.
func (puo *ProjectUpdateOne) ClearMcn() *ProjectUpdateOne {
	puo.mutation.ClearMcn()
	return puo
}

// SetConsultant sets the "consultant" field.
func (puo *ProjectUpdateOne) SetConsultant(s string) *ProjectUpdateOne {
	puo.mutation.SetConsultant(s)
	return puo
}

// SetNillableConsultant sets the "consultant" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableConsultant(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetConsultant(*s)
	}
	return puo
}

// ClearConsultant clears the value of the "consultant" field.
func (puo *ProjectUpdateOne) ClearConsultant() *ProjectUpdateOne {
	puo.mutation.ClearConsultant()
	return puo
}

// SetAreas sets the "areas" field.
func (puo *ProjectUpdateOne) SetAreas(s string) *ProjectUpdateOne {
	puo.mutation.SetAreas(s)
	return puo
}

// SetNillableAreas sets the "areas" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAreas(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAreas(*s)
	}
	return puo
}

// ClearAreas clears the value of the "areas" field.
func (puo *ProjectUpdateOne) ClearAreas() *ProjectUpdateOne {
	puo.mutation.ClearAreas()
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *ProjectUpdateOne) SetStartDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStartDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// ClearStartDate clears the value of the "start_date" field.
func (puo *ProjectUpdateOne) ClearStartDate() *ProjectUpdateOne {
	puo.mutation.ClearStartDate()
	return puo
}

// SetFsDate sets the "fs_date" field.
func (puo *ProjectUpdateOne) SetFsDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetFsDate(t)
	return puo
}

// SetNillableFsDate sets the "fs_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableFsDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetFsDate(*t)
	}
	return puo
}

// ClearFsDate clears the value of the "fs_date" field.
func (puo *ProjectUpdateOne) ClearFsDate() *ProjectUpdateOne {
	puo.mutation.ClearFsDate()
	return puo
}

// SetOpDate sets the "op_date" field.
func (puo *ProjectUpdateOne) SetOpDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetOpDate(t)
	return puo
}

// SetNillableOpDate sets the "op_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOpDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetOpDate(*t)
	}
	return puo
}

// ClearOpDate clears the value of the "op_date" field.
func (puo *ProjectUpdateOne) ClearOpDate() *ProjectUpdateOne {
	puo.mutation.ClearOpDate()
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *ProjectUpdateOne) SetEndDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableEndDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// ClearEndDate clears the value of the "end_date" field.
func (puo *ProjectUpdateOne) ClearEndDate() *ProjectUpdateOne {
	puo.mutation.ClearEndDate()
	return puo
}

// SetMntyr sets the "mntyr" field.
func (puo *ProjectUpdateOne) SetMntyr(s string) *ProjectUpdateOne {
	puo.mutation.SetMntyr(s)
	return puo
}

// SetNillableMntyr sets the "mntyr" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMntyr(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetMntyr(*s)
	}
	return puo
}

// ClearMntyr clears the value of the "mntyr" field.
func (puo *ProjectUpdateOne) ClearMntyr() *ProjectUpdateOne {
	puo.mutation.ClearMntyr()
	return puo
}

// SetConType sets the "con_type" field.
func (puo *ProjectUpdateOne) SetConType(s string) *ProjectUpdateOne {
	puo.mutation.SetConType(s)
	return puo
}

// SetNillableConType sets the "con_type" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableConType(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetConType(*s)
	}
	return puo
}

// ClearConType clears the value of the "con_type" field.
func (puo *ProjectUpdateOne) ClearConType() *ProjectUpdateOne {
	puo.mutation.ClearConType()
	return puo
}

// SetIsFinished sets the "is_finished" field.
func (puo *ProjectUpdateOne) SetIsFinished(b bool) *ProjectUpdateOne {
	puo.mutation.SetIsFinished(b)
	return puo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIsFinished(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetIsFinished(*b)
	}
	return puo
}

// SetCje sets the "cje" field.
func (puo *ProjectUpdateOne) SetCje(f float64) *ProjectUpdateOne {
	puo.mutation.ResetCje()
	puo.mutation.SetCje(f)
	return puo
}

// SetNillableCje sets the "cje" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCje(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetCje(*f)
	}
	return puo
}

// AddCje adds f to the "cje" field.
func (puo *ProjectUpdateOne) AddCje(f float64) *ProjectUpdateOne {
	puo.mutation.AddCje(f)
	return puo
}

// ClearCje clears the value of the "cje" field.
func (puo *ProjectUpdateOne) ClearCje() *ProjectUpdateOne {
	puo.mutation.ClearCje()
	return puo
}

// SetYye sets the "yye" field.
func (puo *ProjectUpdateOne) SetYye(f float64) *ProjectUpdateOne {
	puo.mutation.ResetYye()
	puo.mutation.SetYye(f)
	return puo
}

// SetNillableYye sets the "yye" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableYye(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetYye(*f)
	}
	return puo
}

// AddYye adds f to the "yye" field.
func (puo *ProjectUpdateOne) AddYye(f float64) *ProjectUpdateOne {
	puo.mutation.AddYye(f)
	return puo
}

// ClearYye clears the value of the "yye" field.
func (puo *ProjectUpdateOne) ClearYye() *ProjectUpdateOne {
	puo.mutation.ClearYye()
	return puo
}

// SetXjl sets the "xjl" field.
func (puo *ProjectUpdateOne) SetXjl(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXjl()
	puo.mutation.SetXjl(f)
	return puo
}

// SetNillableXjl sets the "xjl" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXjl(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXjl(*f)
	}
	return puo
}

// AddXjl adds f to the "xjl" field.
func (puo *ProjectUpdateOne) AddXjl(f float64) *ProjectUpdateOne {
	puo.mutation.AddXjl(f)
	return puo
}

// ClearXjl clears the value of the "xjl" field.
func (puo *ProjectUpdateOne) ClearXjl() *ProjectUpdateOne {
	puo.mutation.ClearXjl()
	return puo
}

// SetXmglfYs sets the "xmglf_ys" field.
func (puo *ProjectUpdateOne) SetXmglfYs(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmglfYs()
	puo.mutation.SetXmglfYs(f)
	return puo
}

// SetNillableXmglfYs sets the "xmglf_ys" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmglfYs(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmglfYs(*f)
	}
	return puo
}

// AddXmglfYs adds f to the "xmglf_ys" field.
func (puo *ProjectUpdateOne) AddXmglfYs(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmglfYs(f)
	return puo
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (puo *ProjectUpdateOne) ClearXmglfYs() *ProjectUpdateOne {
	puo.mutation.ClearXmglfYs()
	return puo
}

// SetXmglfLj sets the "xmglf_lj" field.
func (puo *ProjectUpdateOne) SetXmglfLj(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmglfLj()
	puo.mutation.SetXmglfLj(f)
	return puo
}

// SetNillableXmglfLj sets the "xmglf_lj" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmglfLj(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmglfLj(*f)
	}
	return puo
}

// AddXmglfLj adds f to the "xmglf_lj" field.
func (puo *ProjectUpdateOne) AddXmglfLj(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmglfLj(f)
	return puo
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (puo *ProjectUpdateOne) ClearXmglfLj() *ProjectUpdateOne {
	puo.mutation.ClearXmglfLj()
	return puo
}

// SetXmsjf sets the "xmsjf" field.
func (puo *ProjectUpdateOne) SetXmsjf(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmsjf()
	puo.mutation.SetXmsjf(f)
	return puo
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmsjf(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmsjf(*f)
	}
	return puo
}

// AddXmsjf adds f to the "xmsjf" field.
func (puo *ProjectUpdateOne) AddXmsjf(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmsjf(f)
	return puo
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (puo *ProjectUpdateOne) ClearXmsjf() *ProjectUpdateOne {
	puo.mutation.ClearXmsjf()
	return puo
}

// SetXmfzr sets the "xmfzr" field.
func (puo *ProjectUpdateOne) SetXmfzr(s string) *ProjectUpdateOne {
	puo.mutation.SetXmfzr(s)
	return puo
}

// SetNillableXmfzr sets the "xmfzr" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmfzr(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetXmfzr(*s)
	}
	return puo
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (puo *ProjectUpdateOne) ClearXmfzr() *ProjectUpdateOne {
	puo.mutation.ClearXmfzr()
	return puo
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) SetOwnerApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApplyAmount()
	puo.mutation.SetOwnerApplyAmount(f)
	return puo
}

// SetNillableOwnerApplyAmount sets the "owner_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetOwnerApplyAmount(*f)
	}
	return puo
}

// AddOwnerApplyAmount adds f to the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) AddOwnerApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddOwnerApplyAmount(f)
	return puo
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) ClearOwnerApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApplyAmount()
	return puo
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (puo *ProjectUpdateOne) SetOwnerApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApplyCount()
	puo.mutation.SetOwnerApplyCount(i)
	return puo
}

// SetNillableOwnerApplyCount sets the "owner_apply_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApplyCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOwnerApplyCount(*i)
	}
	return puo
}

// AddOwnerApplyCount adds i to the "owner_apply_count" field.
func (puo *ProjectUpdateOne) AddOwnerApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.AddOwnerApplyCount(i)
	return puo
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (puo *ProjectUpdateOne) ClearOwnerApplyCount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApplyCount()
	return puo
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) SetOwnerApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApproveAmount()
	puo.mutation.SetOwnerApproveAmount(f)
	return puo
}

// SetNillableOwnerApproveAmount sets the "owner_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetOwnerApproveAmount(*f)
	}
	return puo
}

// AddOwnerApproveAmount adds f to the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) AddOwnerApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddOwnerApproveAmount(f)
	return puo
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) ClearOwnerApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApproveAmount()
	return puo
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (puo *ProjectUpdateOne) SetOwnerApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApproveCount()
	puo.mutation.SetOwnerApproveCount(i)
	return puo
}

// SetNillableOwnerApproveCount sets the "owner_approve_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApproveCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOwnerApproveCount(*i)
	}
	return puo
}

// AddOwnerApproveCount adds i to the "owner_approve_count" field.
func (puo *ProjectUpdateOne) AddOwnerApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.AddOwnerApproveCount(i)
	return puo
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (puo *ProjectUpdateOne) ClearOwnerApproveCount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApproveCount()
	return puo
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) SetContractorApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetContractorApplyAmount()
	puo.mutation.SetContractorApplyAmount(f)
	return puo
}

// SetNillableContractorApplyAmount sets the "contractor_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetContractorApplyAmount(*f)
	}
	return puo
}

// AddContractorApplyAmount adds f to the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) AddContractorApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddContractorApplyAmount(f)
	return puo
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) ClearContractorApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApplyAmount()
	return puo
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) SetContractorApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractorApplyCount()
	puo.mutation.SetContractorApplyCount(i)
	return puo
}

// SetNillableContractorApplyCount sets the "contractor_apply_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApplyCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractorApplyCount(*i)
	}
	return puo
}

// AddContractorApplyCount adds i to the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) AddContractorApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractorApplyCount(i)
	return puo
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) ClearContractorApplyCount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApplyCount()
	return puo
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) SetContractorApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetContractorApproveAmount()
	puo.mutation.SetContractorApproveAmount(f)
	return puo
}

// SetNillableContractorApproveAmount sets the "contractor_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetContractorApproveAmount(*f)
	}
	return puo
}

// AddContractorApproveAmount adds f to the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) AddContractorApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddContractorApproveAmount(f)
	return puo
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) ClearContractorApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApproveAmount()
	return puo
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) SetContractorApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractorApproveCount()
	puo.mutation.SetContractorApproveCount(i)
	return puo
}

// SetNillableContractorApproveCount sets the "contractor_approve_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApproveCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractorApproveCount(*i)
	}
	return puo
}

// AddContractorApproveCount adds i to the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) AddContractorApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractorApproveCount(i)
	return puo
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) ClearContractorApproveCount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApproveCount()
	return puo
}

// SetInstallProgress sets the "install_progress" field.
func (puo *ProjectUpdateOne) SetInstallProgress(f float64) *ProjectUpdateOne {
	puo.mutation.ResetInstallProgress()
	puo.mutation.SetInstallProgress(f)
	return puo
}

// SetNillableInstallProgress sets the "install_progress" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableInstallProgress(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetInstallProgress(*f)
	}
	return puo
}

// AddInstallProgress adds f to the "install_progress" field.
func (puo *ProjectUpdateOne) AddInstallProgress(f float64) *ProjectUpdateOne {
	puo.mutation.AddInstallProgress(f)
	return puo
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (puo *ProjectUpdateOne) ClearInstallProgress() *ProjectUpdateOne {
	puo.mutation.ClearInstallProgress()
	return puo
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) SetEffectiveContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetEffectiveContractAmount()
	puo.mutation.SetEffectiveContractAmount(f)
	return puo
}

// SetNillableEffectiveContractAmount sets the "effective_contract_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableEffectiveContractAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetEffectiveContractAmount(*f)
	}
	return puo
}

// AddEffectiveContractAmount adds f to the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) AddEffectiveContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddEffectiveContractAmount(f)
	return puo
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) ClearEffectiveContractAmount() *ProjectUpdateOne {
	puo.mutation.ClearEffectiveContractAmount()
	return puo
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (puo *ProjectUpdateOne) SetVaApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetVaApplyAmount()
	puo.mutation.SetVaApplyAmount(f)
	return puo
}

// SetNillableVaApplyAmount sets the "va_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableVaApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetVaApplyAmount(*f)
	}
	return puo
}

// AddVaApplyAmount adds f to the "va_apply_amount" field.
func (puo *ProjectUpdateOne) AddVaApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddVaApplyAmount(f)
	return puo
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (puo *ProjectUpdateOne) ClearVaApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearVaApplyAmount()
	return puo
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (puo *ProjectUpdateOne) SetVaApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetVaApproveAmount()
	puo.mutation.SetVaApproveAmount(f)
	return puo
}

// SetNillableVaApproveAmount sets the "va_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableVaApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetVaApproveAmount(*f)
	}
	return puo
}

// AddVaApproveAmount adds f to the "va_approve_amount" field.
func (puo *ProjectUpdateOne) AddVaApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddVaApproveAmount(f)
	return puo
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (puo *ProjectUpdateOne) ClearVaApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearVaApproveAmount()
	return puo
}

// SetAccumulatedStatutoryDeductions sets the "accumulated_statutory_deductions" field.
func (puo *ProjectUpdateOne) SetAccumulatedStatutoryDeductions(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAccumulatedStatutoryDeductions()
	puo.mutation.SetAccumulatedStatutoryDeductions(f)
	return puo
}

// SetNillableAccumulatedStatutoryDeductions sets the "accumulated_statutory_deductions" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAccumulatedStatutoryDeductions(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAccumulatedStatutoryDeductions(*f)
	}
	return puo
}

// AddAccumulatedStatutoryDeductions adds f to the "accumulated_statutory_deductions" field.
func (puo *ProjectUpdateOne) AddAccumulatedStatutoryDeductions(f float64) *ProjectUpdateOne {
	puo.mutation.AddAccumulatedStatutoryDeductions(f)
	return puo
}

// ClearAccumulatedStatutoryDeductions clears the value of the "accumulated_statutory_deductions" field.
func (puo *ProjectUpdateOne) ClearAccumulatedStatutoryDeductions() *ProjectUpdateOne {
	puo.mutation.ClearAccumulatedStatutoryDeductions()
	return puo
}

// SetAccumulatedNonStatutoryDeductions sets the "accumulated_non_statutory_deductions" field.
func (puo *ProjectUpdateOne) SetAccumulatedNonStatutoryDeductions(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAccumulatedNonStatutoryDeductions()
	puo.mutation.SetAccumulatedNonStatutoryDeductions(f)
	return puo
}

// SetNillableAccumulatedNonStatutoryDeductions sets the "accumulated_non_statutory_deductions" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAccumulatedNonStatutoryDeductions(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAccumulatedNonStatutoryDeductions(*f)
	}
	return puo
}

// AddAccumulatedNonStatutoryDeductions adds f to the "accumulated_non_statutory_deductions" field.
func (puo *ProjectUpdateOne) AddAccumulatedNonStatutoryDeductions(f float64) *ProjectUpdateOne {
	puo.mutation.AddAccumulatedNonStatutoryDeductions(f)
	return puo
}

// ClearAccumulatedNonStatutoryDeductions clears the value of the "accumulated_non_statutory_deductions" field.
func (puo *ProjectUpdateOne) ClearAccumulatedNonStatutoryDeductions() *ProjectUpdateOne {
	puo.mutation.ClearAccumulatedNonStatutoryDeductions()
	return puo
}

// SetAccumulatedStatutoryDeductionsPeriod sets the "accumulated_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) SetAccumulatedStatutoryDeductionsPeriod(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAccumulatedStatutoryDeductionsPeriod()
	puo.mutation.SetAccumulatedStatutoryDeductionsPeriod(f)
	return puo
}

// SetNillableAccumulatedStatutoryDeductionsPeriod sets the "accumulated_statutory_deductions_period" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAccumulatedStatutoryDeductionsPeriod(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAccumulatedStatutoryDeductionsPeriod(*f)
	}
	return puo
}

// AddAccumulatedStatutoryDeductionsPeriod adds f to the "accumulated_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) AddAccumulatedStatutoryDeductionsPeriod(f float64) *ProjectUpdateOne {
	puo.mutation.AddAccumulatedStatutoryDeductionsPeriod(f)
	return puo
}

// ClearAccumulatedStatutoryDeductionsPeriod clears the value of the "accumulated_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) ClearAccumulatedStatutoryDeductionsPeriod() *ProjectUpdateOne {
	puo.mutation.ClearAccumulatedStatutoryDeductionsPeriod()
	return puo
}

// SetAccumulatedNonStatutoryDeductionsPeriod sets the "accumulated_non_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) SetAccumulatedNonStatutoryDeductionsPeriod(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAccumulatedNonStatutoryDeductionsPeriod()
	puo.mutation.SetAccumulatedNonStatutoryDeductionsPeriod(f)
	return puo
}

// SetNillableAccumulatedNonStatutoryDeductionsPeriod sets the "accumulated_non_statutory_deductions_period" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAccumulatedNonStatutoryDeductionsPeriod(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAccumulatedNonStatutoryDeductionsPeriod(*f)
	}
	return puo
}

// AddAccumulatedNonStatutoryDeductionsPeriod adds f to the "accumulated_non_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) AddAccumulatedNonStatutoryDeductionsPeriod(f float64) *ProjectUpdateOne {
	puo.mutation.AddAccumulatedNonStatutoryDeductionsPeriod(f)
	return puo
}

// ClearAccumulatedNonStatutoryDeductionsPeriod clears the value of the "accumulated_non_statutory_deductions_period" field.
func (puo *ProjectUpdateOne) ClearAccumulatedNonStatutoryDeductionsPeriod() *ProjectUpdateOne {
	puo.mutation.ClearAccumulatedNonStatutoryDeductionsPeriod()
	return puo
}

// SetTotalContractAmount sets the "total_contract_amount" field.
func (puo *ProjectUpdateOne) SetTotalContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetTotalContractAmount()
	puo.mutation.SetTotalContractAmount(f)
	return puo
}

// SetNillableTotalContractAmount sets the "total_contract_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTotalContractAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetTotalContractAmount(*f)
	}
	return puo
}

// AddTotalContractAmount adds f to the "total_contract_amount" field.
func (puo *ProjectUpdateOne) AddTotalContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddTotalContractAmount(f)
	return puo
}

// ClearTotalContractAmount clears the value of the "total_contract_amount" field.
func (puo *ProjectUpdateOne) ClearTotalContractAmount() *ProjectUpdateOne {
	puo.mutation.ClearTotalContractAmount()
	return puo
}

// SetAluminumPlateBudgetPercentage sets the "aluminum_plate_budget_percentage" field.
func (puo *ProjectUpdateOne) SetAluminumPlateBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAluminumPlateBudgetPercentage()
	puo.mutation.SetAluminumPlateBudgetPercentage(f)
	return puo
}

// SetNillableAluminumPlateBudgetPercentage sets the "aluminum_plate_budget_percentage" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAluminumPlateBudgetPercentage(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAluminumPlateBudgetPercentage(*f)
	}
	return puo
}

// AddAluminumPlateBudgetPercentage adds f to the "aluminum_plate_budget_percentage" field.
func (puo *ProjectUpdateOne) AddAluminumPlateBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.AddAluminumPlateBudgetPercentage(f)
	return puo
}

// ClearAluminumPlateBudgetPercentage clears the value of the "aluminum_plate_budget_percentage" field.
func (puo *ProjectUpdateOne) ClearAluminumPlateBudgetPercentage() *ProjectUpdateOne {
	puo.mutation.ClearAluminumPlateBudgetPercentage()
	return puo
}

// SetAluminumBudgetPercentage sets the "aluminum_budget_percentage" field.
func (puo *ProjectUpdateOne) SetAluminumBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAluminumBudgetPercentage()
	puo.mutation.SetAluminumBudgetPercentage(f)
	return puo
}

// SetNillableAluminumBudgetPercentage sets the "aluminum_budget_percentage" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAluminumBudgetPercentage(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAluminumBudgetPercentage(*f)
	}
	return puo
}

// AddAluminumBudgetPercentage adds f to the "aluminum_budget_percentage" field.
func (puo *ProjectUpdateOne) AddAluminumBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.AddAluminumBudgetPercentage(f)
	return puo
}

// ClearAluminumBudgetPercentage clears the value of the "aluminum_budget_percentage" field.
func (puo *ProjectUpdateOne) ClearAluminumBudgetPercentage() *ProjectUpdateOne {
	puo.mutation.ClearAluminumBudgetPercentage()
	return puo
}

// SetGlassBudgetPercentage sets the "glass_budget_percentage" field.
func (puo *ProjectUpdateOne) SetGlassBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.ResetGlassBudgetPercentage()
	puo.mutation.SetGlassBudgetPercentage(f)
	return puo
}

// SetNillableGlassBudgetPercentage sets the "glass_budget_percentage" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGlassBudgetPercentage(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetGlassBudgetPercentage(*f)
	}
	return puo
}

// AddGlassBudgetPercentage adds f to the "glass_budget_percentage" field.
func (puo *ProjectUpdateOne) AddGlassBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.AddGlassBudgetPercentage(f)
	return puo
}

// ClearGlassBudgetPercentage clears the value of the "glass_budget_percentage" field.
func (puo *ProjectUpdateOne) ClearGlassBudgetPercentage() *ProjectUpdateOne {
	puo.mutation.ClearGlassBudgetPercentage()
	return puo
}

// SetIronBudgetPercentage sets the "iron_budget_percentage" field.
func (puo *ProjectUpdateOne) SetIronBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.ResetIronBudgetPercentage()
	puo.mutation.SetIronBudgetPercentage(f)
	return puo
}

// SetNillableIronBudgetPercentage sets the "iron_budget_percentage" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIronBudgetPercentage(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetIronBudgetPercentage(*f)
	}
	return puo
}

// AddIronBudgetPercentage adds f to the "iron_budget_percentage" field.
func (puo *ProjectUpdateOne) AddIronBudgetPercentage(f float64) *ProjectUpdateOne {
	puo.mutation.AddIronBudgetPercentage(f)
	return puo
}

// ClearIronBudgetPercentage clears the value of the "iron_budget_percentage" field.
func (puo *ProjectUpdateOne) ClearIronBudgetPercentage() *ProjectUpdateOne {
	puo.mutation.ClearIronBudgetPercentage()
	return puo
}

// SetMilestonePlanYear sets the "milestone_plan_year" field.
func (puo *ProjectUpdateOne) SetMilestonePlanYear(i int) *ProjectUpdateOne {
	puo.mutation.ResetMilestonePlanYear()
	puo.mutation.SetMilestonePlanYear(i)
	return puo
}

// SetNillableMilestonePlanYear sets the "milestone_plan_year" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMilestonePlanYear(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetMilestonePlanYear(*i)
	}
	return puo
}

// AddMilestonePlanYear adds i to the "milestone_plan_year" field.
func (puo *ProjectUpdateOne) AddMilestonePlanYear(i int) *ProjectUpdateOne {
	puo.mutation.AddMilestonePlanYear(i)
	return puo
}

// ClearMilestonePlanYear clears the value of the "milestone_plan_year" field.
func (puo *ProjectUpdateOne) ClearMilestonePlanYear() *ProjectUpdateOne {
	puo.mutation.ClearMilestonePlanYear()
	return puo
}

// SetMilestonePlanMonth sets the "milestone_plan_month" field.
func (puo *ProjectUpdateOne) SetMilestonePlanMonth(i int) *ProjectUpdateOne {
	puo.mutation.ResetMilestonePlanMonth()
	puo.mutation.SetMilestonePlanMonth(i)
	return puo
}

// SetNillableMilestonePlanMonth sets the "milestone_plan_month" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMilestonePlanMonth(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetMilestonePlanMonth(*i)
	}
	return puo
}

// AddMilestonePlanMonth adds i to the "milestone_plan_month" field.
func (puo *ProjectUpdateOne) AddMilestonePlanMonth(i int) *ProjectUpdateOne {
	puo.mutation.AddMilestonePlanMonth(i)
	return puo
}

// ClearMilestonePlanMonth clears the value of the "milestone_plan_month" field.
func (puo *ProjectUpdateOne) ClearMilestonePlanMonth() *ProjectUpdateOne {
	puo.mutation.ClearMilestonePlanMonth()
	return puo
}

// SetMilestoneDoneYear sets the "milestone_done_year" field.
func (puo *ProjectUpdateOne) SetMilestoneDoneYear(i int) *ProjectUpdateOne {
	puo.mutation.ResetMilestoneDoneYear()
	puo.mutation.SetMilestoneDoneYear(i)
	return puo
}

// SetNillableMilestoneDoneYear sets the "milestone_done_year" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMilestoneDoneYear(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetMilestoneDoneYear(*i)
	}
	return puo
}

// AddMilestoneDoneYear adds i to the "milestone_done_year" field.
func (puo *ProjectUpdateOne) AddMilestoneDoneYear(i int) *ProjectUpdateOne {
	puo.mutation.AddMilestoneDoneYear(i)
	return puo
}

// ClearMilestoneDoneYear clears the value of the "milestone_done_year" field.
func (puo *ProjectUpdateOne) ClearMilestoneDoneYear() *ProjectUpdateOne {
	puo.mutation.ClearMilestoneDoneYear()
	return puo
}

// SetMilestoneDoneMonth sets the "milestone_done_month" field.
func (puo *ProjectUpdateOne) SetMilestoneDoneMonth(i int) *ProjectUpdateOne {
	puo.mutation.ResetMilestoneDoneMonth()
	puo.mutation.SetMilestoneDoneMonth(i)
	return puo
}

// SetNillableMilestoneDoneMonth sets the "milestone_done_month" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMilestoneDoneMonth(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetMilestoneDoneMonth(*i)
	}
	return puo
}

// AddMilestoneDoneMonth adds i to the "milestone_done_month" field.
func (puo *ProjectUpdateOne) AddMilestoneDoneMonth(i int) *ProjectUpdateOne {
	puo.mutation.AddMilestoneDoneMonth(i)
	return puo
}

// ClearMilestoneDoneMonth clears the value of the "milestone_done_month" field.
func (puo *ProjectUpdateOne) ClearMilestoneDoneMonth() *ProjectUpdateOne {
	puo.mutation.ClearMilestoneDoneMonth()
	return puo
}

// SetPmArea sets the "pm_area" field.
func (puo *ProjectUpdateOne) SetPmArea(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmArea()
	puo.mutation.SetPmArea(f)
	return puo
}

// SetNillablePmArea sets the "pm_area" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmArea(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmArea(*f)
	}
	return puo
}

// AddPmArea adds f to the "pm_area" field.
func (puo *ProjectUpdateOne) AddPmArea(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmArea(f)
	return puo
}

// ClearPmArea clears the value of the "pm_area" field.
func (puo *ProjectUpdateOne) ClearPmArea() *ProjectUpdateOne {
	puo.mutation.ClearPmArea()
	return puo
}

// SetPmYearTarget sets the "pm_year_target" field.
func (puo *ProjectUpdateOne) SetPmYearTarget(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmYearTarget()
	puo.mutation.SetPmYearTarget(f)
	return puo
}

// SetNillablePmYearTarget sets the "pm_year_target" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmYearTarget(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmYearTarget(*f)
	}
	return puo
}

// AddPmYearTarget adds f to the "pm_year_target" field.
func (puo *ProjectUpdateOne) AddPmYearTarget(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmYearTarget(f)
	return puo
}

// ClearPmYearTarget clears the value of the "pm_year_target" field.
func (puo *ProjectUpdateOne) ClearPmYearTarget() *ProjectUpdateOne {
	puo.mutation.ClearPmYearTarget()
	return puo
}

// SetPmMonthTarget sets the "pm_month_target" field.
func (puo *ProjectUpdateOne) SetPmMonthTarget(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmMonthTarget()
	puo.mutation.SetPmMonthTarget(f)
	return puo
}

// SetNillablePmMonthTarget sets the "pm_month_target" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmMonthTarget(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmMonthTarget(*f)
	}
	return puo
}

// AddPmMonthTarget adds f to the "pm_month_target" field.
func (puo *ProjectUpdateOne) AddPmMonthTarget(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmMonthTarget(f)
	return puo
}

// ClearPmMonthTarget clears the value of the "pm_month_target" field.
func (puo *ProjectUpdateOne) ClearPmMonthTarget() *ProjectUpdateOne {
	puo.mutation.ClearPmMonthTarget()
	return puo
}

// SetPmYearActual sets the "pm_year_actual" field.
func (puo *ProjectUpdateOne) SetPmYearActual(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmYearActual()
	puo.mutation.SetPmYearActual(f)
	return puo
}

// SetNillablePmYearActual sets the "pm_year_actual" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmYearActual(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmYearActual(*f)
	}
	return puo
}

// AddPmYearActual adds f to the "pm_year_actual" field.
func (puo *ProjectUpdateOne) AddPmYearActual(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmYearActual(f)
	return puo
}

// ClearPmYearActual clears the value of the "pm_year_actual" field.
func (puo *ProjectUpdateOne) ClearPmYearActual() *ProjectUpdateOne {
	puo.mutation.ClearPmYearActual()
	return puo
}

// SetPmMonthActual sets the "pm_month_actual" field.
func (puo *ProjectUpdateOne) SetPmMonthActual(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmMonthActual()
	puo.mutation.SetPmMonthActual(f)
	return puo
}

// SetNillablePmMonthActual sets the "pm_month_actual" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmMonthActual(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmMonthActual(*f)
	}
	return puo
}

// AddPmMonthActual adds f to the "pm_month_actual" field.
func (puo *ProjectUpdateOne) AddPmMonthActual(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmMonthActual(f)
	return puo
}

// ClearPmMonthActual clears the value of the "pm_month_actual" field.
func (puo *ProjectUpdateOne) ClearPmMonthActual() *ProjectUpdateOne {
	puo.mutation.ClearPmMonthActual()
	return puo
}

// SetPmTotal sets the "pm_total" field.
func (puo *ProjectUpdateOne) SetPmTotal(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmTotal()
	puo.mutation.SetPmTotal(f)
	return puo
}

// SetNillablePmTotal sets the "pm_total" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmTotal(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmTotal(*f)
	}
	return puo
}

// AddPmTotal adds f to the "pm_total" field.
func (puo *ProjectUpdateOne) AddPmTotal(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmTotal(f)
	return puo
}

// ClearPmTotal clears the value of the "pm_total" field.
func (puo *ProjectUpdateOne) ClearPmTotal() *ProjectUpdateOne {
	puo.mutation.ClearPmTotal()
	return puo
}

// SetPmYesterday sets the "pm_yesterday" field.
func (puo *ProjectUpdateOne) SetPmYesterday(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPmYesterday()
	puo.mutation.SetPmYesterday(f)
	return puo
}

// SetNillablePmYesterday sets the "pm_yesterday" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePmYesterday(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPmYesterday(*f)
	}
	return puo
}

// AddPmYesterday adds f to the "pm_yesterday" field.
func (puo *ProjectUpdateOne) AddPmYesterday(f float64) *ProjectUpdateOne {
	puo.mutation.AddPmYesterday(f)
	return puo
}

// ClearPmYesterday clears the value of the "pm_yesterday" field.
func (puo *ProjectUpdateOne) ClearPmYesterday() *ProjectUpdateOne {
	puo.mutation.ClearPmYesterday()
	return puo
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) SetUnitInventoryTotal(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitInventoryTotal()
	puo.mutation.SetUnitInventoryTotal(f)
	return puo
}

// SetNillableUnitInventoryTotal sets the "unit_inventory_total" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitInventoryTotal(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitInventoryTotal(*f)
	}
	return puo
}

// AddUnitInventoryTotal adds f to the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) AddUnitInventoryTotal(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitInventoryTotal(f)
	return puo
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) ClearUnitInventoryTotal() *ProjectUpdateOne {
	puo.mutation.ClearUnitInventoryTotal()
	return puo
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (puo *ProjectUpdateOne) SetUnitComponentTotal(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentTotal()
	puo.mutation.SetUnitComponentTotal(f)
	return puo
}

// SetNillableUnitComponentTotal sets the "unit_component_total" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentTotal(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentTotal(*f)
	}
	return puo
}

// AddUnitComponentTotal adds f to the "unit_component_total" field.
func (puo *ProjectUpdateOne) AddUnitComponentTotal(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentTotal(f)
	return puo
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (puo *ProjectUpdateOne) ClearUnitComponentTotal() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentTotal()
	return puo
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (puo *ProjectUpdateOne) SetUnitComponentProduction(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentProduction()
	puo.mutation.SetUnitComponentProduction(f)
	return puo
}

// SetNillableUnitComponentProduction sets the "unit_component_production" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentProduction(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentProduction(*f)
	}
	return puo
}

// AddUnitComponentProduction adds f to the "unit_component_production" field.
func (puo *ProjectUpdateOne) AddUnitComponentProduction(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentProduction(f)
	return puo
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (puo *ProjectUpdateOne) ClearUnitComponentProduction() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentProduction()
	return puo
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (puo *ProjectUpdateOne) SetUnitComponentInstallation(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentInstallation()
	puo.mutation.SetUnitComponentInstallation(f)
	return puo
}

// SetNillableUnitComponentInstallation sets the "unit_component_installation" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentInstallation(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentInstallation(*f)
	}
	return puo
}

// AddUnitComponentInstallation adds f to the "unit_component_installation" field.
func (puo *ProjectUpdateOne) AddUnitComponentInstallation(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentInstallation(f)
	return puo
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (puo *ProjectUpdateOne) ClearUnitComponentInstallation() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentInstallation()
	return puo
}

// SetMaterialLoss sets the "material_loss" field.
func (puo *ProjectUpdateOne) SetMaterialLoss(f float64) *ProjectUpdateOne {
	puo.mutation.ResetMaterialLoss()
	puo.mutation.SetMaterialLoss(f)
	return puo
}

// SetNillableMaterialLoss sets the "material_loss" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMaterialLoss(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetMaterialLoss(*f)
	}
	return puo
}

// AddMaterialLoss adds f to the "material_loss" field.
func (puo *ProjectUpdateOne) AddMaterialLoss(f float64) *ProjectUpdateOne {
	puo.mutation.AddMaterialLoss(f)
	return puo
}

// ClearMaterialLoss clears the value of the "material_loss" field.
func (puo *ProjectUpdateOne) ClearMaterialLoss() *ProjectUpdateOne {
	puo.mutation.ClearMaterialLoss()
	return puo
}

// SetDesignRatedWeight sets the "design_rated_weight" field.
func (puo *ProjectUpdateOne) SetDesignRatedWeight(f float64) *ProjectUpdateOne {
	puo.mutation.ResetDesignRatedWeight()
	puo.mutation.SetDesignRatedWeight(f)
	return puo
}

// SetNillableDesignRatedWeight sets the "design_rated_weight" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDesignRatedWeight(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetDesignRatedWeight(*f)
	}
	return puo
}

// AddDesignRatedWeight adds f to the "design_rated_weight" field.
func (puo *ProjectUpdateOne) AddDesignRatedWeight(f float64) *ProjectUpdateOne {
	puo.mutation.AddDesignRatedWeight(f)
	return puo
}

// ClearDesignRatedWeight clears the value of the "design_rated_weight" field.
func (puo *ProjectUpdateOne) ClearDesignRatedWeight() *ProjectUpdateOne {
	puo.mutation.ClearDesignRatedWeight()
	return puo
}

// SetProcessingWeight sets the "processing_weight" field.
func (puo *ProjectUpdateOne) SetProcessingWeight(f float64) *ProjectUpdateOne {
	puo.mutation.ResetProcessingWeight()
	puo.mutation.SetProcessingWeight(f)
	return puo
}

// SetNillableProcessingWeight sets the "processing_weight" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableProcessingWeight(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetProcessingWeight(*f)
	}
	return puo
}

// AddProcessingWeight adds f to the "processing_weight" field.
func (puo *ProjectUpdateOne) AddProcessingWeight(f float64) *ProjectUpdateOne {
	puo.mutation.AddProcessingWeight(f)
	return puo
}

// ClearProcessingWeight clears the value of the "processing_weight" field.
func (puo *ProjectUpdateOne) ClearProcessingWeight() *ProjectUpdateOne {
	puo.mutation.ClearProcessingWeight()
	return puo
}

// SetItemStockWeight sets the "item_stock_weight" field.
func (puo *ProjectUpdateOne) SetItemStockWeight(f float64) *ProjectUpdateOne {
	puo.mutation.ResetItemStockWeight()
	puo.mutation.SetItemStockWeight(f)
	return puo
}

// SetNillableItemStockWeight sets the "item_stock_weight" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableItemStockWeight(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetItemStockWeight(*f)
	}
	return puo
}

// AddItemStockWeight adds f to the "item_stock_weight" field.
func (puo *ProjectUpdateOne) AddItemStockWeight(f float64) *ProjectUpdateOne {
	puo.mutation.AddItemStockWeight(f)
	return puo
}

// ClearItemStockWeight clears the value of the "item_stock_weight" field.
func (puo *ProjectUpdateOne) ClearItemStockWeight() *ProjectUpdateOne {
	puo.mutation.ClearItemStockWeight()
	return puo
}

// SetPalletsInStock sets the "pallets_in_stock" field.
func (puo *ProjectUpdateOne) SetPalletsInStock(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPalletsInStock()
	puo.mutation.SetPalletsInStock(f)
	return puo
}

// SetNillablePalletsInStock sets the "pallets_in_stock" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePalletsInStock(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPalletsInStock(*f)
	}
	return puo
}

// AddPalletsInStock adds f to the "pallets_in_stock" field.
func (puo *ProjectUpdateOne) AddPalletsInStock(f float64) *ProjectUpdateOne {
	puo.mutation.AddPalletsInStock(f)
	return puo
}

// ClearPalletsInStock clears the value of the "pallets_in_stock" field.
func (puo *ProjectUpdateOne) ClearPalletsInStock() *ProjectUpdateOne {
	puo.mutation.ClearPalletsInStock()
	return puo
}

// SetPartsInStock sets the "parts_in_stock" field.
func (puo *ProjectUpdateOne) SetPartsInStock(f float64) *ProjectUpdateOne {
	puo.mutation.ResetPartsInStock()
	puo.mutation.SetPartsInStock(f)
	return puo
}

// SetNillablePartsInStock sets the "parts_in_stock" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePartsInStock(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetPartsInStock(*f)
	}
	return puo
}

// AddPartsInStock adds f to the "parts_in_stock" field.
func (puo *ProjectUpdateOne) AddPartsInStock(f float64) *ProjectUpdateOne {
	puo.mutation.AddPartsInStock(f)
	return puo
}

// ClearPartsInStock clears the value of the "parts_in_stock" field.
func (puo *ProjectUpdateOne) ClearPartsInStock() *ProjectUpdateOne {
	puo.mutation.ClearPartsInStock()
	return puo
}

// SetQualityScore sets the "quality_score" field.
func (puo *ProjectUpdateOne) SetQualityScore(f float64) *ProjectUpdateOne {
	puo.mutation.ResetQualityScore()
	puo.mutation.SetQualityScore(f)
	return puo
}

// SetNillableQualityScore sets the "quality_score" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQualityScore(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetQualityScore(*f)
	}
	return puo
}

// AddQualityScore adds f to the "quality_score" field.
func (puo *ProjectUpdateOne) AddQualityScore(f float64) *ProjectUpdateOne {
	puo.mutation.AddQualityScore(f)
	return puo
}

// ClearQualityScore clears the value of the "quality_score" field.
func (puo *ProjectUpdateOne) ClearQualityScore() *ProjectUpdateOne {
	puo.mutation.ClearQualityScore()
	return puo
}

// SetQualityRanking sets the "quality_ranking" field.
func (puo *ProjectUpdateOne) SetQualityRanking(f float64) *ProjectUpdateOne {
	puo.mutation.ResetQualityRanking()
	puo.mutation.SetQualityRanking(f)
	return puo
}

// SetNillableQualityRanking sets the "quality_ranking" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQualityRanking(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetQualityRanking(*f)
	}
	return puo
}

// AddQualityRanking adds f to the "quality_ranking" field.
func (puo *ProjectUpdateOne) AddQualityRanking(f float64) *ProjectUpdateOne {
	puo.mutation.AddQualityRanking(f)
	return puo
}

// ClearQualityRanking clears the value of the "quality_ranking" field.
func (puo *ProjectUpdateOne) ClearQualityRanking() *ProjectUpdateOne {
	puo.mutation.ClearQualityRanking()
	return puo
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsTotalOrderQuantity()
	puo.mutation.SetBulkMaterialsTotalOrderQuantity(f)
	return puo
}

// SetNillableBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsTotalOrderQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsTotalOrderQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsTotalOrderQuantity adds f to the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsTotalOrderQuantity(f)
	return puo
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsTotalOrderQuantity()
	return puo
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsCompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsCompletedQuantity()
	puo.mutation.SetBulkMaterialsCompletedQuantity(f)
	return puo
}

// SetNillableBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsCompletedQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsCompletedQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsCompletedQuantity adds f to the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsCompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsCompletedQuantity(f)
	return puo
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsCompletedQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsCompletedQuantity()
	return puo
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsUncompletedQuantity()
	puo.mutation.SetBulkMaterialsUncompletedQuantity(f)
	return puo
}

// SetNillableBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsUncompletedQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsUncompletedQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsUncompletedQuantity adds f to the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsUncompletedQuantity(f)
	return puo
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsUncompletedQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsUncompletedQuantity()
	return puo
}

// SetPlanTotalCount sets the "plan_total_count" field.
func (puo *ProjectUpdateOne) SetPlanTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetPlanTotalCount()
	puo.mutation.SetPlanTotalCount(i)
	return puo
}

// SetNillablePlanTotalCount sets the "plan_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePlanTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetPlanTotalCount(*i)
	}
	return puo
}

// AddPlanTotalCount adds i to the "plan_total_count" field.
func (puo *ProjectUpdateOne) AddPlanTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddPlanTotalCount(i)
	return puo
}

// ClearPlanTotalCount clears the value of the "plan_total_count" field.
func (puo *ProjectUpdateOne) ClearPlanTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearPlanTotalCount()
	return puo
}

// SetPlanOverdueCount sets the "plan_overdue_count" field.
func (puo *ProjectUpdateOne) SetPlanOverdueCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetPlanOverdueCount()
	puo.mutation.SetPlanOverdueCount(i)
	return puo
}

// SetNillablePlanOverdueCount sets the "plan_overdue_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePlanOverdueCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetPlanOverdueCount(*i)
	}
	return puo
}

// AddPlanOverdueCount adds i to the "plan_overdue_count" field.
func (puo *ProjectUpdateOne) AddPlanOverdueCount(i int) *ProjectUpdateOne {
	puo.mutation.AddPlanOverdueCount(i)
	return puo
}

// ClearPlanOverdueCount clears the value of the "plan_overdue_count" field.
func (puo *ProjectUpdateOne) ClearPlanOverdueCount() *ProjectUpdateOne {
	puo.mutation.ClearPlanOverdueCount()
	return puo
}

// SetPlanOverdueMonthCount sets the "plan_overdue_month_count" field.
func (puo *ProjectUpdateOne) SetPlanOverdueMonthCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetPlanOverdueMonthCount()
	puo.mutation.SetPlanOverdueMonthCount(i)
	return puo
}

// SetNillablePlanOverdueMonthCount sets the "plan_overdue_month_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePlanOverdueMonthCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetPlanOverdueMonthCount(*i)
	}
	return puo
}

// AddPlanOverdueMonthCount adds i to the "plan_overdue_month_count" field.
func (puo *ProjectUpdateOne) AddPlanOverdueMonthCount(i int) *ProjectUpdateOne {
	puo.mutation.AddPlanOverdueMonthCount(i)
	return puo
}

// ClearPlanOverdueMonthCount clears the value of the "plan_overdue_month_count" field.
func (puo *ProjectUpdateOne) ClearPlanOverdueMonthCount() *ProjectUpdateOne {
	puo.mutation.ClearPlanOverdueMonthCount()
	return puo
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramBdFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramBdFinishCount()
	puo.mutation.SetDiagramBdFinishCount(i)
	return puo
}

// SetNillableDiagramBdFinishCount sets the "diagram_bd_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramBdFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramBdFinishCount(*i)
	}
	return puo
}

// AddDiagramBdFinishCount adds i to the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramBdFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramBdFinishCount(i)
	return puo
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramBdFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramBdFinishCount()
	return puo
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramBdTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramBdTotalCount()
	puo.mutation.SetDiagramBdTotalCount(i)
	return puo
}

// SetNillableDiagramBdTotalCount sets the "diagram_bd_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramBdTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramBdTotalCount(*i)
	}
	return puo
}

// AddDiagramBdTotalCount adds i to the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramBdTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramBdTotalCount(i)
	return puo
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramBdTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramBdTotalCount()
	return puo
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramConstructionFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramConstructionFinishCount()
	puo.mutation.SetDiagramConstructionFinishCount(i)
	return puo
}

// SetNillableDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramConstructionFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramConstructionFinishCount(*i)
	}
	return puo
}

// AddDiagramConstructionFinishCount adds i to the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramConstructionFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramConstructionFinishCount(i)
	return puo
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramConstructionFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramConstructionFinishCount()
	return puo
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramConstructionTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramConstructionTotalCount()
	puo.mutation.SetDiagramConstructionTotalCount(i)
	return puo
}

// SetNillableDiagramConstructionTotalCount sets the "diagram_construction_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramConstructionTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramConstructionTotalCount(*i)
	}
	return puo
}

// AddDiagramConstructionTotalCount adds i to the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramConstructionTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramConstructionTotalCount(i)
	return puo
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramConstructionTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramConstructionTotalCount()
	return puo
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramProcessingFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramProcessingFinishCount()
	puo.mutation.SetDiagramProcessingFinishCount(i)
	return puo
}

// SetNillableDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramProcessingFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramProcessingFinishCount(*i)
	}
	return puo
}

// AddDiagramProcessingFinishCount adds i to the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramProcessingFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramProcessingFinishCount(i)
	return puo
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramProcessingFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramProcessingFinishCount()
	return puo
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramProcessingTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramProcessingTotalCount()
	puo.mutation.SetDiagramProcessingTotalCount(i)
	return puo
}

// SetNillableDiagramProcessingTotalCount sets the "diagram_processing_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramProcessingTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramProcessingTotalCount(*i)
	}
	return puo
}

// AddDiagramProcessingTotalCount adds i to the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramProcessingTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramProcessingTotalCount(i)
	return puo
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramProcessingTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramProcessingTotalCount()
	return puo
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) SetDiagramCApprovalRatioNumerator(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramCApprovalRatioNumerator()
	puo.mutation.SetDiagramCApprovalRatioNumerator(i)
	return puo
}

// SetNillableDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramCApprovalRatioNumerator(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramCApprovalRatioNumerator(*i)
	}
	return puo
}

// AddDiagramCApprovalRatioNumerator adds i to the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) AddDiagramCApprovalRatioNumerator(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramCApprovalRatioNumerator(i)
	return puo
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) ClearDiagramCApprovalRatioNumerator() *ProjectUpdateOne {
	puo.mutation.ClearDiagramCApprovalRatioNumerator()
	return puo
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) SetDiagramCApprovalRatioDenominator(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramCApprovalRatioDenominator()
	puo.mutation.SetDiagramCApprovalRatioDenominator(i)
	return puo
}

// SetNillableDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramCApprovalRatioDenominator(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramCApprovalRatioDenominator(*i)
	}
	return puo
}

// AddDiagramCApprovalRatioDenominator adds i to the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) AddDiagramCApprovalRatioDenominator(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramCApprovalRatioDenominator(i)
	return puo
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) ClearDiagramCApprovalRatioDenominator() *ProjectUpdateOne {
	puo.mutation.ClearDiagramCApprovalRatioDenominator()
	return puo
}

// AddVoIDs adds the "vos" edge to the ProjectVO entity by IDs.
func (puo *ProjectUpdateOne) AddVoIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.AddVoIDs(ids...)
	return puo
}

// AddVos adds the "vos" edges to the ProjectVO entity.
func (puo *ProjectUpdateOne) AddVos(p ...*ProjectVO) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddVoIDs(ids...)
}

// AddProjectStaffIDs adds the "project_staffs" edge to the ProjectStaff entity by IDs.
func (puo *ProjectUpdateOne) AddProjectStaffIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.AddProjectStaffIDs(ids...)
	return puo
}

// AddProjectStaffs adds the "project_staffs" edges to the ProjectStaff entity.
func (puo *ProjectUpdateOne) AddProjectStaffs(p ...*ProjectStaff) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProjectStaffIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddUserIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUsers adds the "users" edges to the User entity.
func (puo *ProjectUpdateOne) AddUsers(u ...*User) *ProjectUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearVos clears all "vos" edges to the ProjectVO entity.
func (puo *ProjectUpdateOne) ClearVos() *ProjectUpdateOne {
	puo.mutation.ClearVos()
	return puo
}

// RemoveVoIDs removes the "vos" edge to ProjectVO entities by IDs.
func (puo *ProjectUpdateOne) RemoveVoIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.RemoveVoIDs(ids...)
	return puo
}

// RemoveVos removes "vos" edges to ProjectVO entities.
func (puo *ProjectUpdateOne) RemoveVos(p ...*ProjectVO) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveVoIDs(ids...)
}

// ClearProjectStaffs clears all "project_staffs" edges to the ProjectStaff entity.
func (puo *ProjectUpdateOne) ClearProjectStaffs() *ProjectUpdateOne {
	puo.mutation.ClearProjectStaffs()
	return puo
}

// RemoveProjectStaffIDs removes the "project_staffs" edge to ProjectStaff entities by IDs.
func (puo *ProjectUpdateOne) RemoveProjectStaffIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.RemoveProjectStaffIDs(ids...)
	return puo
}

// RemoveProjectStaffs removes "project_staffs" edges to ProjectStaff entities.
func (puo *ProjectUpdateOne) RemoveProjectStaffs(p ...*ProjectStaff) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProjectStaffIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (puo *ProjectUpdateOne) ClearUsers() *ProjectUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveUserIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUsers removes "users" edges to User entities.
func (puo *ProjectUpdateOne) RemoveUsers(u ...*User) *ProjectUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Manager(); ok {
		_spec.SetField(project.FieldManager, field.TypeString, value)
	}
	if puo.mutation.ManagerCleared() {
		_spec.ClearField(project.FieldManager, field.TypeString)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(project.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Owner(); ok {
		_spec.SetField(project.FieldOwner, field.TypeString, value)
	}
	if puo.mutation.OwnerCleared() {
		_spec.ClearField(project.FieldOwner, field.TypeString)
	}
	if value, ok := puo.mutation.Jzs(); ok {
		_spec.SetField(project.FieldJzs, field.TypeString, value)
	}
	if puo.mutation.JzsCleared() {
		_spec.ClearField(project.FieldJzs, field.TypeString)
	}
	if value, ok := puo.mutation.Mcn(); ok {
		_spec.SetField(project.FieldMcn, field.TypeString, value)
	}
	if puo.mutation.McnCleared() {
		_spec.ClearField(project.FieldMcn, field.TypeString)
	}
	if value, ok := puo.mutation.Consultant(); ok {
		_spec.SetField(project.FieldConsultant, field.TypeString, value)
	}
	if puo.mutation.ConsultantCleared() {
		_spec.ClearField(project.FieldConsultant, field.TypeString)
	}
	if value, ok := puo.mutation.Areas(); ok {
		_spec.SetField(project.FieldAreas, field.TypeString, value)
	}
	if puo.mutation.AreasCleared() {
		_spec.ClearField(project.FieldAreas, field.TypeString)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(project.FieldStartDate, field.TypeTime, value)
	}
	if puo.mutation.StartDateCleared() {
		_spec.ClearField(project.FieldStartDate, field.TypeTime)
	}
	if value, ok := puo.mutation.FsDate(); ok {
		_spec.SetField(project.FieldFsDate, field.TypeTime, value)
	}
	if puo.mutation.FsDateCleared() {
		_spec.ClearField(project.FieldFsDate, field.TypeTime)
	}
	if value, ok := puo.mutation.OpDate(); ok {
		_spec.SetField(project.FieldOpDate, field.TypeTime, value)
	}
	if puo.mutation.OpDateCleared() {
		_spec.ClearField(project.FieldOpDate, field.TypeTime)
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.SetField(project.FieldEndDate, field.TypeTime, value)
	}
	if puo.mutation.EndDateCleared() {
		_spec.ClearField(project.FieldEndDate, field.TypeTime)
	}
	if value, ok := puo.mutation.Mntyr(); ok {
		_spec.SetField(project.FieldMntyr, field.TypeString, value)
	}
	if puo.mutation.MntyrCleared() {
		_spec.ClearField(project.FieldMntyr, field.TypeString)
	}
	if value, ok := puo.mutation.ConType(); ok {
		_spec.SetField(project.FieldConType, field.TypeString, value)
	}
	if puo.mutation.ConTypeCleared() {
		_spec.ClearField(project.FieldConType, field.TypeString)
	}
	if value, ok := puo.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Cje(); ok {
		_spec.SetField(project.FieldCje, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedCje(); ok {
		_spec.AddField(project.FieldCje, field.TypeFloat64, value)
	}
	if puo.mutation.CjeCleared() {
		_spec.ClearField(project.FieldCje, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Yye(); ok {
		_spec.SetField(project.FieldYye, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedYye(); ok {
		_spec.AddField(project.FieldYye, field.TypeFloat64, value)
	}
	if puo.mutation.YyeCleared() {
		_spec.ClearField(project.FieldYye, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xjl(); ok {
		_spec.SetField(project.FieldXjl, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXjl(); ok {
		_spec.AddField(project.FieldXjl, field.TypeFloat64, value)
	}
	if puo.mutation.XjlCleared() {
		_spec.ClearField(project.FieldXjl, field.TypeFloat64)
	}
	if value, ok := puo.mutation.XmglfYs(); ok {
		_spec.SetField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmglfYs(); ok {
		_spec.AddField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if puo.mutation.XmglfYsCleared() {
		_spec.ClearField(project.FieldXmglfYs, field.TypeFloat64)
	}
	if value, ok := puo.mutation.XmglfLj(); ok {
		_spec.SetField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmglfLj(); ok {
		_spec.AddField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if puo.mutation.XmglfLjCleared() {
		_spec.ClearField(project.FieldXmglfLj, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xmsjf(); ok {
		_spec.SetField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmsjf(); ok {
		_spec.AddField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if puo.mutation.XmsjfCleared() {
		_spec.ClearField(project.FieldXmsjf, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xmfzr(); ok {
		_spec.SetField(project.FieldXmfzr, field.TypeString, value)
	}
	if puo.mutation.XmfzrCleared() {
		_spec.ClearField(project.FieldXmfzr, field.TypeString)
	}
	if value, ok := puo.mutation.OwnerApplyAmount(); ok {
		_spec.SetField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOwnerApplyAmount(); ok {
		_spec.AddField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.OwnerApplyAmountCleared() {
		_spec.ClearField(project.FieldOwnerApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OwnerApplyCount(); ok {
		_spec.SetField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOwnerApplyCount(); ok {
		_spec.AddField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if puo.mutation.OwnerApplyCountCleared() {
		_spec.ClearField(project.FieldOwnerApplyCount, field.TypeInt)
	}
	if value, ok := puo.mutation.OwnerApproveAmount(); ok {
		_spec.SetField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOwnerApproveAmount(); ok {
		_spec.AddField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.OwnerApproveAmountCleared() {
		_spec.ClearField(project.FieldOwnerApproveAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OwnerApproveCount(); ok {
		_spec.SetField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOwnerApproveCount(); ok {
		_spec.AddField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if puo.mutation.OwnerApproveCountCleared() {
		_spec.ClearField(project.FieldOwnerApproveCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractorApplyAmount(); ok {
		_spec.SetField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedContractorApplyAmount(); ok {
		_spec.AddField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.ContractorApplyAmountCleared() {
		_spec.ClearField(project.FieldContractorApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ContractorApplyCount(); ok {
		_spec.SetField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractorApplyCount(); ok {
		_spec.AddField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if puo.mutation.ContractorApplyCountCleared() {
		_spec.ClearField(project.FieldContractorApplyCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractorApproveAmount(); ok {
		_spec.SetField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedContractorApproveAmount(); ok {
		_spec.AddField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.ContractorApproveAmountCleared() {
		_spec.ClearField(project.FieldContractorApproveAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ContractorApproveCount(); ok {
		_spec.SetField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractorApproveCount(); ok {
		_spec.AddField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if puo.mutation.ContractorApproveCountCleared() {
		_spec.ClearField(project.FieldContractorApproveCount, field.TypeInt)
	}
	if value, ok := puo.mutation.InstallProgress(); ok {
		_spec.SetField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedInstallProgress(); ok {
		_spec.AddField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if puo.mutation.InstallProgressCleared() {
		_spec.ClearField(project.FieldInstallProgress, field.TypeFloat64)
	}
	if value, ok := puo.mutation.EffectiveContractAmount(); ok {
		_spec.SetField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedEffectiveContractAmount(); ok {
		_spec.AddField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if puo.mutation.EffectiveContractAmountCleared() {
		_spec.ClearField(project.FieldEffectiveContractAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.VaApplyAmount(); ok {
		_spec.SetField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedVaApplyAmount(); ok {
		_spec.AddField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.VaApplyAmountCleared() {
		_spec.ClearField(project.FieldVaApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.VaApproveAmount(); ok {
		_spec.SetField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedVaApproveAmount(); ok {
		_spec.AddField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.VaApproveAmountCleared() {
		_spec.ClearField(project.FieldVaApproveAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AccumulatedStatutoryDeductions(); ok {
		_spec.SetField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAccumulatedStatutoryDeductions(); ok {
		_spec.AddField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64, value)
	}
	if puo.mutation.AccumulatedStatutoryDeductionsCleared() {
		_spec.ClearField(project.FieldAccumulatedStatutoryDeductions, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AccumulatedNonStatutoryDeductions(); ok {
		_spec.SetField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAccumulatedNonStatutoryDeductions(); ok {
		_spec.AddField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64, value)
	}
	if puo.mutation.AccumulatedNonStatutoryDeductionsCleared() {
		_spec.ClearField(project.FieldAccumulatedNonStatutoryDeductions, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AccumulatedStatutoryDeductionsPeriod(); ok {
		_spec.SetField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAccumulatedStatutoryDeductionsPeriod(); ok {
		_spec.AddField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if puo.mutation.AccumulatedStatutoryDeductionsPeriodCleared() {
		_spec.ClearField(project.FieldAccumulatedStatutoryDeductionsPeriod, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AccumulatedNonStatutoryDeductionsPeriod(); ok {
		_spec.SetField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAccumulatedNonStatutoryDeductionsPeriod(); ok {
		_spec.AddField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64, value)
	}
	if puo.mutation.AccumulatedNonStatutoryDeductionsPeriodCleared() {
		_spec.ClearField(project.FieldAccumulatedNonStatutoryDeductionsPeriod, field.TypeFloat64)
	}
	if value, ok := puo.mutation.TotalContractAmount(); ok {
		_spec.SetField(project.FieldTotalContractAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedTotalContractAmount(); ok {
		_spec.AddField(project.FieldTotalContractAmount, field.TypeFloat64, value)
	}
	if puo.mutation.TotalContractAmountCleared() {
		_spec.ClearField(project.FieldTotalContractAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AluminumPlateBudgetPercentage(); ok {
		_spec.SetField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAluminumPlateBudgetPercentage(); ok {
		_spec.AddField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64, value)
	}
	if puo.mutation.AluminumPlateBudgetPercentageCleared() {
		_spec.ClearField(project.FieldAluminumPlateBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AluminumBudgetPercentage(); ok {
		_spec.SetField(project.FieldAluminumBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAluminumBudgetPercentage(); ok {
		_spec.AddField(project.FieldAluminumBudgetPercentage, field.TypeFloat64, value)
	}
	if puo.mutation.AluminumBudgetPercentageCleared() {
		_spec.ClearField(project.FieldAluminumBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := puo.mutation.GlassBudgetPercentage(); ok {
		_spec.SetField(project.FieldGlassBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedGlassBudgetPercentage(); ok {
		_spec.AddField(project.FieldGlassBudgetPercentage, field.TypeFloat64, value)
	}
	if puo.mutation.GlassBudgetPercentageCleared() {
		_spec.ClearField(project.FieldGlassBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := puo.mutation.IronBudgetPercentage(); ok {
		_spec.SetField(project.FieldIronBudgetPercentage, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedIronBudgetPercentage(); ok {
		_spec.AddField(project.FieldIronBudgetPercentage, field.TypeFloat64, value)
	}
	if puo.mutation.IronBudgetPercentageCleared() {
		_spec.ClearField(project.FieldIronBudgetPercentage, field.TypeFloat64)
	}
	if value, ok := puo.mutation.MilestonePlanYear(); ok {
		_spec.SetField(project.FieldMilestonePlanYear, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMilestonePlanYear(); ok {
		_spec.AddField(project.FieldMilestonePlanYear, field.TypeInt, value)
	}
	if puo.mutation.MilestonePlanYearCleared() {
		_spec.ClearField(project.FieldMilestonePlanYear, field.TypeInt)
	}
	if value, ok := puo.mutation.MilestonePlanMonth(); ok {
		_spec.SetField(project.FieldMilestonePlanMonth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMilestonePlanMonth(); ok {
		_spec.AddField(project.FieldMilestonePlanMonth, field.TypeInt, value)
	}
	if puo.mutation.MilestonePlanMonthCleared() {
		_spec.ClearField(project.FieldMilestonePlanMonth, field.TypeInt)
	}
	if value, ok := puo.mutation.MilestoneDoneYear(); ok {
		_spec.SetField(project.FieldMilestoneDoneYear, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMilestoneDoneYear(); ok {
		_spec.AddField(project.FieldMilestoneDoneYear, field.TypeInt, value)
	}
	if puo.mutation.MilestoneDoneYearCleared() {
		_spec.ClearField(project.FieldMilestoneDoneYear, field.TypeInt)
	}
	if value, ok := puo.mutation.MilestoneDoneMonth(); ok {
		_spec.SetField(project.FieldMilestoneDoneMonth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMilestoneDoneMonth(); ok {
		_spec.AddField(project.FieldMilestoneDoneMonth, field.TypeInt, value)
	}
	if puo.mutation.MilestoneDoneMonthCleared() {
		_spec.ClearField(project.FieldMilestoneDoneMonth, field.TypeInt)
	}
	if value, ok := puo.mutation.PmArea(); ok {
		_spec.SetField(project.FieldPmArea, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmArea(); ok {
		_spec.AddField(project.FieldPmArea, field.TypeFloat64, value)
	}
	if puo.mutation.PmAreaCleared() {
		_spec.ClearField(project.FieldPmArea, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmYearTarget(); ok {
		_spec.SetField(project.FieldPmYearTarget, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmYearTarget(); ok {
		_spec.AddField(project.FieldPmYearTarget, field.TypeFloat64, value)
	}
	if puo.mutation.PmYearTargetCleared() {
		_spec.ClearField(project.FieldPmYearTarget, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmMonthTarget(); ok {
		_spec.SetField(project.FieldPmMonthTarget, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmMonthTarget(); ok {
		_spec.AddField(project.FieldPmMonthTarget, field.TypeFloat64, value)
	}
	if puo.mutation.PmMonthTargetCleared() {
		_spec.ClearField(project.FieldPmMonthTarget, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmYearActual(); ok {
		_spec.SetField(project.FieldPmYearActual, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmYearActual(); ok {
		_spec.AddField(project.FieldPmYearActual, field.TypeFloat64, value)
	}
	if puo.mutation.PmYearActualCleared() {
		_spec.ClearField(project.FieldPmYearActual, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmMonthActual(); ok {
		_spec.SetField(project.FieldPmMonthActual, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmMonthActual(); ok {
		_spec.AddField(project.FieldPmMonthActual, field.TypeFloat64, value)
	}
	if puo.mutation.PmMonthActualCleared() {
		_spec.ClearField(project.FieldPmMonthActual, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmTotal(); ok {
		_spec.SetField(project.FieldPmTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmTotal(); ok {
		_spec.AddField(project.FieldPmTotal, field.TypeFloat64, value)
	}
	if puo.mutation.PmTotalCleared() {
		_spec.ClearField(project.FieldPmTotal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PmYesterday(); ok {
		_spec.SetField(project.FieldPmYesterday, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPmYesterday(); ok {
		_spec.AddField(project.FieldPmYesterday, field.TypeFloat64, value)
	}
	if puo.mutation.PmYesterdayCleared() {
		_spec.ClearField(project.FieldPmYesterday, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitInventoryTotal(); ok {
		_spec.SetField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitInventoryTotal(); ok {
		_spec.AddField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if puo.mutation.UnitInventoryTotalCleared() {
		_spec.ClearField(project.FieldUnitInventoryTotal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentTotal(); ok {
		_spec.SetField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentTotal(); ok {
		_spec.AddField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentTotalCleared() {
		_spec.ClearField(project.FieldUnitComponentTotal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentProduction(); ok {
		_spec.SetField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentProduction(); ok {
		_spec.AddField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentProductionCleared() {
		_spec.ClearField(project.FieldUnitComponentProduction, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentInstallation(); ok {
		_spec.SetField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentInstallation(); ok {
		_spec.AddField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentInstallationCleared() {
		_spec.ClearField(project.FieldUnitComponentInstallation, field.TypeFloat64)
	}
	if value, ok := puo.mutation.MaterialLoss(); ok {
		_spec.SetField(project.FieldMaterialLoss, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedMaterialLoss(); ok {
		_spec.AddField(project.FieldMaterialLoss, field.TypeFloat64, value)
	}
	if puo.mutation.MaterialLossCleared() {
		_spec.ClearField(project.FieldMaterialLoss, field.TypeFloat64)
	}
	if value, ok := puo.mutation.DesignRatedWeight(); ok {
		_spec.SetField(project.FieldDesignRatedWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDesignRatedWeight(); ok {
		_spec.AddField(project.FieldDesignRatedWeight, field.TypeFloat64, value)
	}
	if puo.mutation.DesignRatedWeightCleared() {
		_spec.ClearField(project.FieldDesignRatedWeight, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ProcessingWeight(); ok {
		_spec.SetField(project.FieldProcessingWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedProcessingWeight(); ok {
		_spec.AddField(project.FieldProcessingWeight, field.TypeFloat64, value)
	}
	if puo.mutation.ProcessingWeightCleared() {
		_spec.ClearField(project.FieldProcessingWeight, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ItemStockWeight(); ok {
		_spec.SetField(project.FieldItemStockWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedItemStockWeight(); ok {
		_spec.AddField(project.FieldItemStockWeight, field.TypeFloat64, value)
	}
	if puo.mutation.ItemStockWeightCleared() {
		_spec.ClearField(project.FieldItemStockWeight, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PalletsInStock(); ok {
		_spec.SetField(project.FieldPalletsInStock, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPalletsInStock(); ok {
		_spec.AddField(project.FieldPalletsInStock, field.TypeFloat64, value)
	}
	if puo.mutation.PalletsInStockCleared() {
		_spec.ClearField(project.FieldPalletsInStock, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PartsInStock(); ok {
		_spec.SetField(project.FieldPartsInStock, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPartsInStock(); ok {
		_spec.AddField(project.FieldPartsInStock, field.TypeFloat64, value)
	}
	if puo.mutation.PartsInStockCleared() {
		_spec.ClearField(project.FieldPartsInStock, field.TypeFloat64)
	}
	if value, ok := puo.mutation.QualityScore(); ok {
		_spec.SetField(project.FieldQualityScore, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedQualityScore(); ok {
		_spec.AddField(project.FieldQualityScore, field.TypeFloat64, value)
	}
	if puo.mutation.QualityScoreCleared() {
		_spec.ClearField(project.FieldQualityScore, field.TypeFloat64)
	}
	if value, ok := puo.mutation.QualityRanking(); ok {
		_spec.SetField(project.FieldQualityRanking, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedQualityRanking(); ok {
		_spec.AddField(project.FieldQualityRanking, field.TypeFloat64, value)
	}
	if puo.mutation.QualityRankingCleared() {
		_spec.ClearField(project.FieldQualityRanking, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsTotalOrderQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsTotalOrderQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsTotalOrderQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsCompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsCompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsCompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsUncompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsUncompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsUncompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PlanTotalCount(); ok {
		_spec.SetField(project.FieldPlanTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPlanTotalCount(); ok {
		_spec.AddField(project.FieldPlanTotalCount, field.TypeInt, value)
	}
	if puo.mutation.PlanTotalCountCleared() {
		_spec.ClearField(project.FieldPlanTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.PlanOverdueCount(); ok {
		_spec.SetField(project.FieldPlanOverdueCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPlanOverdueCount(); ok {
		_spec.AddField(project.FieldPlanOverdueCount, field.TypeInt, value)
	}
	if puo.mutation.PlanOverdueCountCleared() {
		_spec.ClearField(project.FieldPlanOverdueCount, field.TypeInt)
	}
	if value, ok := puo.mutation.PlanOverdueMonthCount(); ok {
		_spec.SetField(project.FieldPlanOverdueMonthCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPlanOverdueMonthCount(); ok {
		_spec.AddField(project.FieldPlanOverdueMonthCount, field.TypeInt, value)
	}
	if puo.mutation.PlanOverdueMonthCountCleared() {
		_spec.ClearField(project.FieldPlanOverdueMonthCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramBdFinishCount(); ok {
		_spec.SetField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramBdFinishCount(); ok {
		_spec.AddField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramBdFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramBdFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramBdTotalCount(); ok {
		_spec.SetField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramBdTotalCount(); ok {
		_spec.AddField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramBdTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramBdTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramConstructionFinishCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramConstructionFinishCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramConstructionFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramConstructionTotalCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramConstructionTotalCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramConstructionTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramProcessingFinishCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramProcessingFinishCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramProcessingFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramProcessingTotalCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramProcessingTotalCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramProcessingTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramCApprovalRatioNumerator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramCApprovalRatioNumerator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if puo.mutation.DiagramCApprovalRatioNumeratorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramCApprovalRatioDenominator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramCApprovalRatioDenominator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if puo.mutation.DiagramCApprovalRatioDenominatorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt)
	}
	if puo.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVosIDs(); len(nodes) > 0 && !puo.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProjectStaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProjectStaffsIDs(); len(nodes) > 0 && !puo.mutation.ProjectStaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProjectStaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectStaffsTable,
			Columns: []string{project.ProjectStaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
