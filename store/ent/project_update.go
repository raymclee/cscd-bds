// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProjectUpdate) SetCode(s string) *ProjectUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCode(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetIsFinished sets the "is_finished" field.
func (pu *ProjectUpdate) SetIsFinished(b bool) *ProjectUpdate {
	pu.mutation.SetIsFinished(b)
	return pu
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIsFinished(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetIsFinished(*b)
	}
	return pu
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (pu *ProjectUpdate) SetRevenueKpi(f float64) *ProjectUpdate {
	pu.mutation.ResetRevenueKpi()
	pu.mutation.SetRevenueKpi(f)
	return pu
}

// SetNillableRevenueKpi sets the "revenue_kpi" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRevenueKpi(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetRevenueKpi(*f)
	}
	return pu
}

// AddRevenueKpi adds f to the "revenue_kpi" field.
func (pu *ProjectUpdate) AddRevenueKpi(f float64) *ProjectUpdate {
	pu.mutation.AddRevenueKpi(f)
	return pu
}

// ClearRevenueKpi clears the value of the "revenue_kpi" field.
func (pu *ProjectUpdate) ClearRevenueKpi() *ProjectUpdate {
	pu.mutation.ClearRevenueKpi()
	return pu
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (pu *ProjectUpdate) SetRevenueCurrentYearCompleted(f float64) *ProjectUpdate {
	pu.mutation.ResetRevenueCurrentYearCompleted()
	pu.mutation.SetRevenueCurrentYearCompleted(f)
	return pu
}

// SetNillableRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRevenueCurrentYearCompleted(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetRevenueCurrentYearCompleted(*f)
	}
	return pu
}

// AddRevenueCurrentYearCompleted adds f to the "revenue_current_year_completed" field.
func (pu *ProjectUpdate) AddRevenueCurrentYearCompleted(f float64) *ProjectUpdate {
	pu.mutation.AddRevenueCurrentYearCompleted(f)
	return pu
}

// ClearRevenueCurrentYearCompleted clears the value of the "revenue_current_year_completed" field.
func (pu *ProjectUpdate) ClearRevenueCurrentYearCompleted() *ProjectUpdate {
	pu.mutation.ClearRevenueCurrentYearCompleted()
	return pu
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (pu *ProjectUpdate) SetRevenueAccumulatedCompleted(f float64) *ProjectUpdate {
	pu.mutation.ResetRevenueAccumulatedCompleted()
	pu.mutation.SetRevenueAccumulatedCompleted(f)
	return pu
}

// SetNillableRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRevenueAccumulatedCompleted(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetRevenueAccumulatedCompleted(*f)
	}
	return pu
}

// AddRevenueAccumulatedCompleted adds f to the "revenue_accumulated_completed" field.
func (pu *ProjectUpdate) AddRevenueAccumulatedCompleted(f float64) *ProjectUpdate {
	pu.mutation.AddRevenueAccumulatedCompleted(f)
	return pu
}

// ClearRevenueAccumulatedCompleted clears the value of the "revenue_accumulated_completed" field.
func (pu *ProjectUpdate) ClearRevenueAccumulatedCompleted() *ProjectUpdate {
	pu.mutation.ClearRevenueAccumulatedCompleted()
	return pu
}

// SetPayDate sets the "pay_date" field.
func (pu *ProjectUpdate) SetPayDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetPayDate(t)
	return pu
}

// SetNillablePayDate sets the "pay_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePayDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetPayDate(*t)
	}
	return pu
}

// ClearPayDate clears the value of the "pay_date" field.
func (pu *ProjectUpdate) ClearPayDate() *ProjectUpdate {
	pu.mutation.ClearPayDate()
	return pu
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (pu *ProjectUpdate) SetOwnerVoCount(i int) *ProjectUpdate {
	pu.mutation.ResetOwnerVoCount()
	pu.mutation.SetOwnerVoCount(i)
	return pu
}

// SetNillableOwnerVoCount sets the "owner_vo_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerVoCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOwnerVoCount(*i)
	}
	return pu
}

// AddOwnerVoCount adds i to the "owner_vo_count" field.
func (pu *ProjectUpdate) AddOwnerVoCount(i int) *ProjectUpdate {
	pu.mutation.AddOwnerVoCount(i)
	return pu
}

// ClearOwnerVoCount clears the value of the "owner_vo_count" field.
func (pu *ProjectUpdate) ClearOwnerVoCount() *ProjectUpdate {
	pu.mutation.ClearOwnerVoCount()
	return pu
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (pu *ProjectUpdate) SetContractorVoCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractorVoCount()
	pu.mutation.SetContractorVoCount(i)
	return pu
}

// SetNillableContractorVoCount sets the "contractor_vo_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorVoCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractorVoCount(*i)
	}
	return pu
}

// AddContractorVoCount adds i to the "contractor_vo_count" field.
func (pu *ProjectUpdate) AddContractorVoCount(i int) *ProjectUpdate {
	pu.mutation.AddContractorVoCount(i)
	return pu
}

// ClearContractorVoCount clears the value of the "contractor_vo_count" field.
func (pu *ProjectUpdate) ClearContractorVoCount() *ProjectUpdate {
	pu.mutation.ClearContractorVoCount()
	return pu
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (pu *ProjectUpdate) SetAccumulateDeduction(f float64) *ProjectUpdate {
	pu.mutation.ResetAccumulateDeduction()
	pu.mutation.SetAccumulateDeduction(f)
	return pu
}

// SetNillableAccumulateDeduction sets the "accumulate_deduction" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAccumulateDeduction(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetAccumulateDeduction(*f)
	}
	return pu
}

// AddAccumulateDeduction adds f to the "accumulate_deduction" field.
func (pu *ProjectUpdate) AddAccumulateDeduction(f float64) *ProjectUpdate {
	pu.mutation.AddAccumulateDeduction(f)
	return pu
}

// ClearAccumulateDeduction clears the value of the "accumulate_deduction" field.
func (pu *ProjectUpdate) ClearAccumulateDeduction() *ProjectUpdate {
	pu.mutation.ClearAccumulateDeduction()
	return pu
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (pu *ProjectUpdate) SetSubcontractorVaCount(i int) *ProjectUpdate {
	pu.mutation.ResetSubcontractorVaCount()
	pu.mutation.SetSubcontractorVaCount(i)
	return pu
}

// SetNillableSubcontractorVaCount sets the "subcontractor_va_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSubcontractorVaCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetSubcontractorVaCount(*i)
	}
	return pu
}

// AddSubcontractorVaCount adds i to the "subcontractor_va_count" field.
func (pu *ProjectUpdate) AddSubcontractorVaCount(i int) *ProjectUpdate {
	pu.mutation.AddSubcontractorVaCount(i)
	return pu
}

// ClearSubcontractorVaCount clears the value of the "subcontractor_va_count" field.
func (pu *ProjectUpdate) ClearSubcontractorVaCount() *ProjectUpdate {
	pu.mutation.ClearSubcontractorVaCount()
	return pu
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (pu *ProjectUpdate) SetContractSupplementaryCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractSupplementaryCount()
	pu.mutation.SetContractSupplementaryCount(i)
	return pu
}

// SetNillableContractSupplementaryCount sets the "contract_supplementary_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractSupplementaryCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractSupplementaryCount(*i)
	}
	return pu
}

// AddContractSupplementaryCount adds i to the "contract_supplementary_count" field.
func (pu *ProjectUpdate) AddContractSupplementaryCount(i int) *ProjectUpdate {
	pu.mutation.AddContractSupplementaryCount(i)
	return pu
}

// ClearContractSupplementaryCount clears the value of the "contract_supplementary_count" field.
func (pu *ProjectUpdate) ClearContractSupplementaryCount() *ProjectUpdate {
	pu.mutation.ClearContractSupplementaryCount()
	return pu
}

// SetRepairFee sets the "repair_fee" field.
func (pu *ProjectUpdate) SetRepairFee(f float64) *ProjectUpdate {
	pu.mutation.ResetRepairFee()
	pu.mutation.SetRepairFee(f)
	return pu
}

// SetNillableRepairFee sets the "repair_fee" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRepairFee(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetRepairFee(*f)
	}
	return pu
}

// AddRepairFee adds f to the "repair_fee" field.
func (pu *ProjectUpdate) AddRepairFee(f float64) *ProjectUpdate {
	pu.mutation.AddRepairFee(f)
	return pu
}

// ClearRepairFee clears the value of the "repair_fee" field.
func (pu *ProjectUpdate) ClearRepairFee() *ProjectUpdate {
	pu.mutation.ClearRepairFee()
	return pu
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (pu *ProjectUpdate) SetUnitInventoryTotal(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitInventoryTotal()
	pu.mutation.SetUnitInventoryTotal(f)
	return pu
}

// SetNillableUnitInventoryTotal sets the "unit_inventory_total" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitInventoryTotal(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitInventoryTotal(*f)
	}
	return pu
}

// AddUnitInventoryTotal adds f to the "unit_inventory_total" field.
func (pu *ProjectUpdate) AddUnitInventoryTotal(f float64) *ProjectUpdate {
	pu.mutation.AddUnitInventoryTotal(f)
	return pu
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (pu *ProjectUpdate) ClearUnitInventoryTotal() *ProjectUpdate {
	pu.mutation.ClearUnitInventoryTotal()
	return pu
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (pu *ProjectUpdate) SetUnitComponentTotal(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentTotal()
	pu.mutation.SetUnitComponentTotal(f)
	return pu
}

// SetNillableUnitComponentTotal sets the "unit_component_total" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentTotal(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentTotal(*f)
	}
	return pu
}

// AddUnitComponentTotal adds f to the "unit_component_total" field.
func (pu *ProjectUpdate) AddUnitComponentTotal(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentTotal(f)
	return pu
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (pu *ProjectUpdate) ClearUnitComponentTotal() *ProjectUpdate {
	pu.mutation.ClearUnitComponentTotal()
	return pu
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (pu *ProjectUpdate) SetUnitComponentProduction(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentProduction()
	pu.mutation.SetUnitComponentProduction(f)
	return pu
}

// SetNillableUnitComponentProduction sets the "unit_component_production" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentProduction(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentProduction(*f)
	}
	return pu
}

// AddUnitComponentProduction adds f to the "unit_component_production" field.
func (pu *ProjectUpdate) AddUnitComponentProduction(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentProduction(f)
	return pu
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (pu *ProjectUpdate) ClearUnitComponentProduction() *ProjectUpdate {
	pu.mutation.ClearUnitComponentProduction()
	return pu
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (pu *ProjectUpdate) SetUnitComponentInstallation(f float64) *ProjectUpdate {
	pu.mutation.ResetUnitComponentInstallation()
	pu.mutation.SetUnitComponentInstallation(f)
	return pu
}

// SetNillableUnitComponentInstallation sets the "unit_component_installation" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUnitComponentInstallation(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetUnitComponentInstallation(*f)
	}
	return pu
}

// AddUnitComponentInstallation adds f to the "unit_component_installation" field.
func (pu *ProjectUpdate) AddUnitComponentInstallation(f float64) *ProjectUpdate {
	pu.mutation.AddUnitComponentInstallation(f)
	return pu
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (pu *ProjectUpdate) ClearUnitComponentInstallation() *ProjectUpdate {
	pu.mutation.ClearUnitComponentInstallation()
	return pu
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsTotalOrderQuantity()
	pu.mutation.SetBulkMaterialsTotalOrderQuantity(f)
	return pu
}

// SetNillableBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsTotalOrderQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsTotalOrderQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsTotalOrderQuantity adds f to the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsTotalOrderQuantity(f)
	return pu
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsTotalOrderQuantity()
	return pu
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsCompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsCompletedQuantity()
	pu.mutation.SetBulkMaterialsCompletedQuantity(f)
	return pu
}

// SetNillableBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsCompletedQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsCompletedQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsCompletedQuantity adds f to the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsCompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsCompletedQuantity(f)
	return pu
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsCompletedQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsCompletedQuantity()
	return pu
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) SetBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.ResetBulkMaterialsUncompletedQuantity()
	pu.mutation.SetBulkMaterialsUncompletedQuantity(f)
	return pu
}

// SetNillableBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBulkMaterialsUncompletedQuantity(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetBulkMaterialsUncompletedQuantity(*f)
	}
	return pu
}

// AddBulkMaterialsUncompletedQuantity adds f to the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) AddBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdate {
	pu.mutation.AddBulkMaterialsUncompletedQuantity(f)
	return pu
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (pu *ProjectUpdate) ClearBulkMaterialsUncompletedQuantity() *ProjectUpdate {
	pu.mutation.ClearBulkMaterialsUncompletedQuantity()
	return pu
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) SetDiagramBdFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramBdFinishCount()
	pu.mutation.SetDiagramBdFinishCount(i)
	return pu
}

// SetNillableDiagramBdFinishCount sets the "diagram_bd_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramBdFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramBdFinishCount(*i)
	}
	return pu
}

// AddDiagramBdFinishCount adds i to the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) AddDiagramBdFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramBdFinishCount(i)
	return pu
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramBdFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramBdFinishCount()
	return pu
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) SetDiagramBdTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramBdTotalCount()
	pu.mutation.SetDiagramBdTotalCount(i)
	return pu
}

// SetNillableDiagramBdTotalCount sets the "diagram_bd_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramBdTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramBdTotalCount(*i)
	}
	return pu
}

// AddDiagramBdTotalCount adds i to the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) AddDiagramBdTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramBdTotalCount(i)
	return pu
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (pu *ProjectUpdate) ClearDiagramBdTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramBdTotalCount()
	return pu
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) SetDiagramConstructionFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramConstructionFinishCount()
	pu.mutation.SetDiagramConstructionFinishCount(i)
	return pu
}

// SetNillableDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramConstructionFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramConstructionFinishCount(*i)
	}
	return pu
}

// AddDiagramConstructionFinishCount adds i to the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) AddDiagramConstructionFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramConstructionFinishCount(i)
	return pu
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramConstructionFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramConstructionFinishCount()
	return pu
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) SetDiagramConstructionTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramConstructionTotalCount()
	pu.mutation.SetDiagramConstructionTotalCount(i)
	return pu
}

// SetNillableDiagramConstructionTotalCount sets the "diagram_construction_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramConstructionTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramConstructionTotalCount(*i)
	}
	return pu
}

// AddDiagramConstructionTotalCount adds i to the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) AddDiagramConstructionTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramConstructionTotalCount(i)
	return pu
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (pu *ProjectUpdate) ClearDiagramConstructionTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramConstructionTotalCount()
	return pu
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) SetDiagramProcessingFinishCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramProcessingFinishCount()
	pu.mutation.SetDiagramProcessingFinishCount(i)
	return pu
}

// SetNillableDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramProcessingFinishCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramProcessingFinishCount(*i)
	}
	return pu
}

// AddDiagramProcessingFinishCount adds i to the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) AddDiagramProcessingFinishCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramProcessingFinishCount(i)
	return pu
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (pu *ProjectUpdate) ClearDiagramProcessingFinishCount() *ProjectUpdate {
	pu.mutation.ClearDiagramProcessingFinishCount()
	return pu
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) SetDiagramProcessingTotalCount(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramProcessingTotalCount()
	pu.mutation.SetDiagramProcessingTotalCount(i)
	return pu
}

// SetNillableDiagramProcessingTotalCount sets the "diagram_processing_total_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramProcessingTotalCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramProcessingTotalCount(*i)
	}
	return pu
}

// AddDiagramProcessingTotalCount adds i to the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) AddDiagramProcessingTotalCount(i int) *ProjectUpdate {
	pu.mutation.AddDiagramProcessingTotalCount(i)
	return pu
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (pu *ProjectUpdate) ClearDiagramProcessingTotalCount() *ProjectUpdate {
	pu.mutation.ClearDiagramProcessingTotalCount()
	return pu
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) SetDiagramCApprovalRatioNumerator(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramCApprovalRatioNumerator()
	pu.mutation.SetDiagramCApprovalRatioNumerator(i)
	return pu
}

// SetNillableDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramCApprovalRatioNumerator(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramCApprovalRatioNumerator(*i)
	}
	return pu
}

// AddDiagramCApprovalRatioNumerator adds i to the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) AddDiagramCApprovalRatioNumerator(i int) *ProjectUpdate {
	pu.mutation.AddDiagramCApprovalRatioNumerator(i)
	return pu
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (pu *ProjectUpdate) ClearDiagramCApprovalRatioNumerator() *ProjectUpdate {
	pu.mutation.ClearDiagramCApprovalRatioNumerator()
	return pu
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) SetDiagramCApprovalRatioDenominator(i int) *ProjectUpdate {
	pu.mutation.ResetDiagramCApprovalRatioDenominator()
	pu.mutation.SetDiagramCApprovalRatioDenominator(i)
	return pu
}

// SetNillableDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDiagramCApprovalRatioDenominator(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetDiagramCApprovalRatioDenominator(*i)
	}
	return pu
}

// AddDiagramCApprovalRatioDenominator adds i to the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) AddDiagramCApprovalRatioDenominator(i int) *ProjectUpdate {
	pu.mutation.AddDiagramCApprovalRatioDenominator(i)
	return pu
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (pu *ProjectUpdate) ClearDiagramCApprovalRatioDenominator() *ProjectUpdate {
	pu.mutation.ClearDiagramCApprovalRatioDenominator()
	return pu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddUserIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUsers adds the "users" edges to the User entity.
func (pu *ProjectUpdate) AddUsers(u ...*User) *ProjectUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (pu *ProjectUpdate) ClearUsers() *ProjectUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveUserIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUsers removes "users" edges to User entities.
func (pu *ProjectUpdate) RemoveUsers(u ...*User) *ProjectUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := pu.mutation.RevenueKpi(); ok {
		_spec.SetField(project.FieldRevenueKpi, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRevenueKpi(); ok {
		_spec.AddField(project.FieldRevenueKpi, field.TypeFloat64, value)
	}
	if pu.mutation.RevenueKpiCleared() {
		_spec.ClearField(project.FieldRevenueKpi, field.TypeFloat64)
	}
	if value, ok := pu.mutation.RevenueCurrentYearCompleted(); ok {
		_spec.SetField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRevenueCurrentYearCompleted(); ok {
		_spec.AddField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64, value)
	}
	if pu.mutation.RevenueCurrentYearCompletedCleared() {
		_spec.ClearField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64)
	}
	if value, ok := pu.mutation.RevenueAccumulatedCompleted(); ok {
		_spec.SetField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRevenueAccumulatedCompleted(); ok {
		_spec.AddField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64, value)
	}
	if pu.mutation.RevenueAccumulatedCompletedCleared() {
		_spec.ClearField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64)
	}
	if value, ok := pu.mutation.PayDate(); ok {
		_spec.SetField(project.FieldPayDate, field.TypeTime, value)
	}
	if pu.mutation.PayDateCleared() {
		_spec.ClearField(project.FieldPayDate, field.TypeTime)
	}
	if value, ok := pu.mutation.OwnerVoCount(); ok {
		_spec.SetField(project.FieldOwnerVoCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOwnerVoCount(); ok {
		_spec.AddField(project.FieldOwnerVoCount, field.TypeInt, value)
	}
	if pu.mutation.OwnerVoCountCleared() {
		_spec.ClearField(project.FieldOwnerVoCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractorVoCount(); ok {
		_spec.SetField(project.FieldContractorVoCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractorVoCount(); ok {
		_spec.AddField(project.FieldContractorVoCount, field.TypeInt, value)
	}
	if pu.mutation.ContractorVoCountCleared() {
		_spec.ClearField(project.FieldContractorVoCount, field.TypeInt)
	}
	if value, ok := pu.mutation.AccumulateDeduction(); ok {
		_spec.SetField(project.FieldAccumulateDeduction, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAccumulateDeduction(); ok {
		_spec.AddField(project.FieldAccumulateDeduction, field.TypeFloat64, value)
	}
	if pu.mutation.AccumulateDeductionCleared() {
		_spec.ClearField(project.FieldAccumulateDeduction, field.TypeFloat64)
	}
	if value, ok := pu.mutation.SubcontractorVaCount(); ok {
		_spec.SetField(project.FieldSubcontractorVaCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSubcontractorVaCount(); ok {
		_spec.AddField(project.FieldSubcontractorVaCount, field.TypeInt, value)
	}
	if pu.mutation.SubcontractorVaCountCleared() {
		_spec.ClearField(project.FieldSubcontractorVaCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractSupplementaryCount(); ok {
		_spec.SetField(project.FieldContractSupplementaryCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractSupplementaryCount(); ok {
		_spec.AddField(project.FieldContractSupplementaryCount, field.TypeInt, value)
	}
	if pu.mutation.ContractSupplementaryCountCleared() {
		_spec.ClearField(project.FieldContractSupplementaryCount, field.TypeInt)
	}
	if value, ok := pu.mutation.RepairFee(); ok {
		_spec.SetField(project.FieldRepairFee, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRepairFee(); ok {
		_spec.AddField(project.FieldRepairFee, field.TypeFloat64, value)
	}
	if pu.mutation.RepairFeeCleared() {
		_spec.ClearField(project.FieldRepairFee, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitInventoryTotal(); ok {
		_spec.SetField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitInventoryTotal(); ok {
		_spec.AddField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if pu.mutation.UnitInventoryTotalCleared() {
		_spec.ClearField(project.FieldUnitInventoryTotal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentTotal(); ok {
		_spec.SetField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentTotal(); ok {
		_spec.AddField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentTotalCleared() {
		_spec.ClearField(project.FieldUnitComponentTotal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentProduction(); ok {
		_spec.SetField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentProduction(); ok {
		_spec.AddField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentProductionCleared() {
		_spec.ClearField(project.FieldUnitComponentProduction, field.TypeFloat64)
	}
	if value, ok := pu.mutation.UnitComponentInstallation(); ok {
		_spec.SetField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedUnitComponentInstallation(); ok {
		_spec.AddField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if pu.mutation.UnitComponentInstallationCleared() {
		_spec.ClearField(project.FieldUnitComponentInstallation, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsTotalOrderQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsTotalOrderQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsTotalOrderQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsCompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsCompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsCompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.BulkMaterialsUncompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedBulkMaterialsUncompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if pu.mutation.BulkMaterialsUncompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64)
	}
	if value, ok := pu.mutation.DiagramBdFinishCount(); ok {
		_spec.SetField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramBdFinishCount(); ok {
		_spec.AddField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramBdFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramBdFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramBdTotalCount(); ok {
		_spec.SetField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramBdTotalCount(); ok {
		_spec.AddField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramBdTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramBdTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramConstructionFinishCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramConstructionFinishCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramConstructionFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramConstructionTotalCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramConstructionTotalCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramConstructionTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramProcessingFinishCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramProcessingFinishCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramProcessingFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingFinishCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramProcessingTotalCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramProcessingTotalCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if pu.mutation.DiagramProcessingTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingTotalCount, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramCApprovalRatioNumerator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramCApprovalRatioNumerator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if pu.mutation.DiagramCApprovalRatioNumeratorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt)
	}
	if value, ok := pu.mutation.DiagramCApprovalRatioDenominator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDiagramCApprovalRatioDenominator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if pu.mutation.DiagramCApprovalRatioDenominatorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCode sets the "code" field.
func (puo *ProjectUpdateOne) SetCode(s string) *ProjectUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCode(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetIsFinished sets the "is_finished" field.
func (puo *ProjectUpdateOne) SetIsFinished(b bool) *ProjectUpdateOne {
	puo.mutation.SetIsFinished(b)
	return puo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIsFinished(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetIsFinished(*b)
	}
	return puo
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (puo *ProjectUpdateOne) SetRevenueKpi(f float64) *ProjectUpdateOne {
	puo.mutation.ResetRevenueKpi()
	puo.mutation.SetRevenueKpi(f)
	return puo
}

// SetNillableRevenueKpi sets the "revenue_kpi" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRevenueKpi(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetRevenueKpi(*f)
	}
	return puo
}

// AddRevenueKpi adds f to the "revenue_kpi" field.
func (puo *ProjectUpdateOne) AddRevenueKpi(f float64) *ProjectUpdateOne {
	puo.mutation.AddRevenueKpi(f)
	return puo
}

// ClearRevenueKpi clears the value of the "revenue_kpi" field.
func (puo *ProjectUpdateOne) ClearRevenueKpi() *ProjectUpdateOne {
	puo.mutation.ClearRevenueKpi()
	return puo
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (puo *ProjectUpdateOne) SetRevenueCurrentYearCompleted(f float64) *ProjectUpdateOne {
	puo.mutation.ResetRevenueCurrentYearCompleted()
	puo.mutation.SetRevenueCurrentYearCompleted(f)
	return puo
}

// SetNillableRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRevenueCurrentYearCompleted(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetRevenueCurrentYearCompleted(*f)
	}
	return puo
}

// AddRevenueCurrentYearCompleted adds f to the "revenue_current_year_completed" field.
func (puo *ProjectUpdateOne) AddRevenueCurrentYearCompleted(f float64) *ProjectUpdateOne {
	puo.mutation.AddRevenueCurrentYearCompleted(f)
	return puo
}

// ClearRevenueCurrentYearCompleted clears the value of the "revenue_current_year_completed" field.
func (puo *ProjectUpdateOne) ClearRevenueCurrentYearCompleted() *ProjectUpdateOne {
	puo.mutation.ClearRevenueCurrentYearCompleted()
	return puo
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (puo *ProjectUpdateOne) SetRevenueAccumulatedCompleted(f float64) *ProjectUpdateOne {
	puo.mutation.ResetRevenueAccumulatedCompleted()
	puo.mutation.SetRevenueAccumulatedCompleted(f)
	return puo
}

// SetNillableRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRevenueAccumulatedCompleted(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetRevenueAccumulatedCompleted(*f)
	}
	return puo
}

// AddRevenueAccumulatedCompleted adds f to the "revenue_accumulated_completed" field.
func (puo *ProjectUpdateOne) AddRevenueAccumulatedCompleted(f float64) *ProjectUpdateOne {
	puo.mutation.AddRevenueAccumulatedCompleted(f)
	return puo
}

// ClearRevenueAccumulatedCompleted clears the value of the "revenue_accumulated_completed" field.
func (puo *ProjectUpdateOne) ClearRevenueAccumulatedCompleted() *ProjectUpdateOne {
	puo.mutation.ClearRevenueAccumulatedCompleted()
	return puo
}

// SetPayDate sets the "pay_date" field.
func (puo *ProjectUpdateOne) SetPayDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetPayDate(t)
	return puo
}

// SetNillablePayDate sets the "pay_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePayDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetPayDate(*t)
	}
	return puo
}

// ClearPayDate clears the value of the "pay_date" field.
func (puo *ProjectUpdateOne) ClearPayDate() *ProjectUpdateOne {
	puo.mutation.ClearPayDate()
	return puo
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (puo *ProjectUpdateOne) SetOwnerVoCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetOwnerVoCount()
	puo.mutation.SetOwnerVoCount(i)
	return puo
}

// SetNillableOwnerVoCount sets the "owner_vo_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerVoCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOwnerVoCount(*i)
	}
	return puo
}

// AddOwnerVoCount adds i to the "owner_vo_count" field.
func (puo *ProjectUpdateOne) AddOwnerVoCount(i int) *ProjectUpdateOne {
	puo.mutation.AddOwnerVoCount(i)
	return puo
}

// ClearOwnerVoCount clears the value of the "owner_vo_count" field.
func (puo *ProjectUpdateOne) ClearOwnerVoCount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerVoCount()
	return puo
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (puo *ProjectUpdateOne) SetContractorVoCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractorVoCount()
	puo.mutation.SetContractorVoCount(i)
	return puo
}

// SetNillableContractorVoCount sets the "contractor_vo_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorVoCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractorVoCount(*i)
	}
	return puo
}

// AddContractorVoCount adds i to the "contractor_vo_count" field.
func (puo *ProjectUpdateOne) AddContractorVoCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractorVoCount(i)
	return puo
}

// ClearContractorVoCount clears the value of the "contractor_vo_count" field.
func (puo *ProjectUpdateOne) ClearContractorVoCount() *ProjectUpdateOne {
	puo.mutation.ClearContractorVoCount()
	return puo
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (puo *ProjectUpdateOne) SetAccumulateDeduction(f float64) *ProjectUpdateOne {
	puo.mutation.ResetAccumulateDeduction()
	puo.mutation.SetAccumulateDeduction(f)
	return puo
}

// SetNillableAccumulateDeduction sets the "accumulate_deduction" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAccumulateDeduction(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetAccumulateDeduction(*f)
	}
	return puo
}

// AddAccumulateDeduction adds f to the "accumulate_deduction" field.
func (puo *ProjectUpdateOne) AddAccumulateDeduction(f float64) *ProjectUpdateOne {
	puo.mutation.AddAccumulateDeduction(f)
	return puo
}

// ClearAccumulateDeduction clears the value of the "accumulate_deduction" field.
func (puo *ProjectUpdateOne) ClearAccumulateDeduction() *ProjectUpdateOne {
	puo.mutation.ClearAccumulateDeduction()
	return puo
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (puo *ProjectUpdateOne) SetSubcontractorVaCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetSubcontractorVaCount()
	puo.mutation.SetSubcontractorVaCount(i)
	return puo
}

// SetNillableSubcontractorVaCount sets the "subcontractor_va_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSubcontractorVaCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetSubcontractorVaCount(*i)
	}
	return puo
}

// AddSubcontractorVaCount adds i to the "subcontractor_va_count" field.
func (puo *ProjectUpdateOne) AddSubcontractorVaCount(i int) *ProjectUpdateOne {
	puo.mutation.AddSubcontractorVaCount(i)
	return puo
}

// ClearSubcontractorVaCount clears the value of the "subcontractor_va_count" field.
func (puo *ProjectUpdateOne) ClearSubcontractorVaCount() *ProjectUpdateOne {
	puo.mutation.ClearSubcontractorVaCount()
	return puo
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (puo *ProjectUpdateOne) SetContractSupplementaryCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractSupplementaryCount()
	puo.mutation.SetContractSupplementaryCount(i)
	return puo
}

// SetNillableContractSupplementaryCount sets the "contract_supplementary_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractSupplementaryCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractSupplementaryCount(*i)
	}
	return puo
}

// AddContractSupplementaryCount adds i to the "contract_supplementary_count" field.
func (puo *ProjectUpdateOne) AddContractSupplementaryCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractSupplementaryCount(i)
	return puo
}

// ClearContractSupplementaryCount clears the value of the "contract_supplementary_count" field.
func (puo *ProjectUpdateOne) ClearContractSupplementaryCount() *ProjectUpdateOne {
	puo.mutation.ClearContractSupplementaryCount()
	return puo
}

// SetRepairFee sets the "repair_fee" field.
func (puo *ProjectUpdateOne) SetRepairFee(f float64) *ProjectUpdateOne {
	puo.mutation.ResetRepairFee()
	puo.mutation.SetRepairFee(f)
	return puo
}

// SetNillableRepairFee sets the "repair_fee" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRepairFee(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetRepairFee(*f)
	}
	return puo
}

// AddRepairFee adds f to the "repair_fee" field.
func (puo *ProjectUpdateOne) AddRepairFee(f float64) *ProjectUpdateOne {
	puo.mutation.AddRepairFee(f)
	return puo
}

// ClearRepairFee clears the value of the "repair_fee" field.
func (puo *ProjectUpdateOne) ClearRepairFee() *ProjectUpdateOne {
	puo.mutation.ClearRepairFee()
	return puo
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) SetUnitInventoryTotal(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitInventoryTotal()
	puo.mutation.SetUnitInventoryTotal(f)
	return puo
}

// SetNillableUnitInventoryTotal sets the "unit_inventory_total" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitInventoryTotal(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitInventoryTotal(*f)
	}
	return puo
}

// AddUnitInventoryTotal adds f to the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) AddUnitInventoryTotal(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitInventoryTotal(f)
	return puo
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (puo *ProjectUpdateOne) ClearUnitInventoryTotal() *ProjectUpdateOne {
	puo.mutation.ClearUnitInventoryTotal()
	return puo
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (puo *ProjectUpdateOne) SetUnitComponentTotal(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentTotal()
	puo.mutation.SetUnitComponentTotal(f)
	return puo
}

// SetNillableUnitComponentTotal sets the "unit_component_total" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentTotal(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentTotal(*f)
	}
	return puo
}

// AddUnitComponentTotal adds f to the "unit_component_total" field.
func (puo *ProjectUpdateOne) AddUnitComponentTotal(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentTotal(f)
	return puo
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (puo *ProjectUpdateOne) ClearUnitComponentTotal() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentTotal()
	return puo
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (puo *ProjectUpdateOne) SetUnitComponentProduction(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentProduction()
	puo.mutation.SetUnitComponentProduction(f)
	return puo
}

// SetNillableUnitComponentProduction sets the "unit_component_production" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentProduction(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentProduction(*f)
	}
	return puo
}

// AddUnitComponentProduction adds f to the "unit_component_production" field.
func (puo *ProjectUpdateOne) AddUnitComponentProduction(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentProduction(f)
	return puo
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (puo *ProjectUpdateOne) ClearUnitComponentProduction() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentProduction()
	return puo
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (puo *ProjectUpdateOne) SetUnitComponentInstallation(f float64) *ProjectUpdateOne {
	puo.mutation.ResetUnitComponentInstallation()
	puo.mutation.SetUnitComponentInstallation(f)
	return puo
}

// SetNillableUnitComponentInstallation sets the "unit_component_installation" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUnitComponentInstallation(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetUnitComponentInstallation(*f)
	}
	return puo
}

// AddUnitComponentInstallation adds f to the "unit_component_installation" field.
func (puo *ProjectUpdateOne) AddUnitComponentInstallation(f float64) *ProjectUpdateOne {
	puo.mutation.AddUnitComponentInstallation(f)
	return puo
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (puo *ProjectUpdateOne) ClearUnitComponentInstallation() *ProjectUpdateOne {
	puo.mutation.ClearUnitComponentInstallation()
	return puo
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsTotalOrderQuantity()
	puo.mutation.SetBulkMaterialsTotalOrderQuantity(f)
	return puo
}

// SetNillableBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsTotalOrderQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsTotalOrderQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsTotalOrderQuantity adds f to the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsTotalOrderQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsTotalOrderQuantity(f)
	return puo
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsTotalOrderQuantity()
	return puo
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsCompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsCompletedQuantity()
	puo.mutation.SetBulkMaterialsCompletedQuantity(f)
	return puo
}

// SetNillableBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsCompletedQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsCompletedQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsCompletedQuantity adds f to the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsCompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsCompletedQuantity(f)
	return puo
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsCompletedQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsCompletedQuantity()
	return puo
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) SetBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.ResetBulkMaterialsUncompletedQuantity()
	puo.mutation.SetBulkMaterialsUncompletedQuantity(f)
	return puo
}

// SetNillableBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBulkMaterialsUncompletedQuantity(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetBulkMaterialsUncompletedQuantity(*f)
	}
	return puo
}

// AddBulkMaterialsUncompletedQuantity adds f to the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) AddBulkMaterialsUncompletedQuantity(f float64) *ProjectUpdateOne {
	puo.mutation.AddBulkMaterialsUncompletedQuantity(f)
	return puo
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (puo *ProjectUpdateOne) ClearBulkMaterialsUncompletedQuantity() *ProjectUpdateOne {
	puo.mutation.ClearBulkMaterialsUncompletedQuantity()
	return puo
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramBdFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramBdFinishCount()
	puo.mutation.SetDiagramBdFinishCount(i)
	return puo
}

// SetNillableDiagramBdFinishCount sets the "diagram_bd_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramBdFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramBdFinishCount(*i)
	}
	return puo
}

// AddDiagramBdFinishCount adds i to the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramBdFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramBdFinishCount(i)
	return puo
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramBdFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramBdFinishCount()
	return puo
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramBdTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramBdTotalCount()
	puo.mutation.SetDiagramBdTotalCount(i)
	return puo
}

// SetNillableDiagramBdTotalCount sets the "diagram_bd_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramBdTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramBdTotalCount(*i)
	}
	return puo
}

// AddDiagramBdTotalCount adds i to the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramBdTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramBdTotalCount(i)
	return puo
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramBdTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramBdTotalCount()
	return puo
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramConstructionFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramConstructionFinishCount()
	puo.mutation.SetDiagramConstructionFinishCount(i)
	return puo
}

// SetNillableDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramConstructionFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramConstructionFinishCount(*i)
	}
	return puo
}

// AddDiagramConstructionFinishCount adds i to the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramConstructionFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramConstructionFinishCount(i)
	return puo
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramConstructionFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramConstructionFinishCount()
	return puo
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramConstructionTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramConstructionTotalCount()
	puo.mutation.SetDiagramConstructionTotalCount(i)
	return puo
}

// SetNillableDiagramConstructionTotalCount sets the "diagram_construction_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramConstructionTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramConstructionTotalCount(*i)
	}
	return puo
}

// AddDiagramConstructionTotalCount adds i to the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramConstructionTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramConstructionTotalCount(i)
	return puo
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramConstructionTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramConstructionTotalCount()
	return puo
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) SetDiagramProcessingFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramProcessingFinishCount()
	puo.mutation.SetDiagramProcessingFinishCount(i)
	return puo
}

// SetNillableDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramProcessingFinishCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramProcessingFinishCount(*i)
	}
	return puo
}

// AddDiagramProcessingFinishCount adds i to the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) AddDiagramProcessingFinishCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramProcessingFinishCount(i)
	return puo
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (puo *ProjectUpdateOne) ClearDiagramProcessingFinishCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramProcessingFinishCount()
	return puo
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) SetDiagramProcessingTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramProcessingTotalCount()
	puo.mutation.SetDiagramProcessingTotalCount(i)
	return puo
}

// SetNillableDiagramProcessingTotalCount sets the "diagram_processing_total_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramProcessingTotalCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramProcessingTotalCount(*i)
	}
	return puo
}

// AddDiagramProcessingTotalCount adds i to the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) AddDiagramProcessingTotalCount(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramProcessingTotalCount(i)
	return puo
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (puo *ProjectUpdateOne) ClearDiagramProcessingTotalCount() *ProjectUpdateOne {
	puo.mutation.ClearDiagramProcessingTotalCount()
	return puo
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) SetDiagramCApprovalRatioNumerator(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramCApprovalRatioNumerator()
	puo.mutation.SetDiagramCApprovalRatioNumerator(i)
	return puo
}

// SetNillableDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramCApprovalRatioNumerator(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramCApprovalRatioNumerator(*i)
	}
	return puo
}

// AddDiagramCApprovalRatioNumerator adds i to the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) AddDiagramCApprovalRatioNumerator(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramCApprovalRatioNumerator(i)
	return puo
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (puo *ProjectUpdateOne) ClearDiagramCApprovalRatioNumerator() *ProjectUpdateOne {
	puo.mutation.ClearDiagramCApprovalRatioNumerator()
	return puo
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) SetDiagramCApprovalRatioDenominator(i int) *ProjectUpdateOne {
	puo.mutation.ResetDiagramCApprovalRatioDenominator()
	puo.mutation.SetDiagramCApprovalRatioDenominator(i)
	return puo
}

// SetNillableDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDiagramCApprovalRatioDenominator(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetDiagramCApprovalRatioDenominator(*i)
	}
	return puo
}

// AddDiagramCApprovalRatioDenominator adds i to the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) AddDiagramCApprovalRatioDenominator(i int) *ProjectUpdateOne {
	puo.mutation.AddDiagramCApprovalRatioDenominator(i)
	return puo
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (puo *ProjectUpdateOne) ClearDiagramCApprovalRatioDenominator() *ProjectUpdateOne {
	puo.mutation.ClearDiagramCApprovalRatioDenominator()
	return puo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddUserIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUsers adds the "users" edges to the User entity.
func (puo *ProjectUpdateOne) AddUsers(u ...*User) *ProjectUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (puo *ProjectUpdateOne) ClearUsers() *ProjectUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveUserIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUsers removes "users" edges to User entities.
func (puo *ProjectUpdateOne) RemoveUsers(u ...*User) *ProjectUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := puo.mutation.RevenueKpi(); ok {
		_spec.SetField(project.FieldRevenueKpi, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRevenueKpi(); ok {
		_spec.AddField(project.FieldRevenueKpi, field.TypeFloat64, value)
	}
	if puo.mutation.RevenueKpiCleared() {
		_spec.ClearField(project.FieldRevenueKpi, field.TypeFloat64)
	}
	if value, ok := puo.mutation.RevenueCurrentYearCompleted(); ok {
		_spec.SetField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRevenueCurrentYearCompleted(); ok {
		_spec.AddField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64, value)
	}
	if puo.mutation.RevenueCurrentYearCompletedCleared() {
		_spec.ClearField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64)
	}
	if value, ok := puo.mutation.RevenueAccumulatedCompleted(); ok {
		_spec.SetField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRevenueAccumulatedCompleted(); ok {
		_spec.AddField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64, value)
	}
	if puo.mutation.RevenueAccumulatedCompletedCleared() {
		_spec.ClearField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64)
	}
	if value, ok := puo.mutation.PayDate(); ok {
		_spec.SetField(project.FieldPayDate, field.TypeTime, value)
	}
	if puo.mutation.PayDateCleared() {
		_spec.ClearField(project.FieldPayDate, field.TypeTime)
	}
	if value, ok := puo.mutation.OwnerVoCount(); ok {
		_spec.SetField(project.FieldOwnerVoCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOwnerVoCount(); ok {
		_spec.AddField(project.FieldOwnerVoCount, field.TypeInt, value)
	}
	if puo.mutation.OwnerVoCountCleared() {
		_spec.ClearField(project.FieldOwnerVoCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractorVoCount(); ok {
		_spec.SetField(project.FieldContractorVoCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractorVoCount(); ok {
		_spec.AddField(project.FieldContractorVoCount, field.TypeInt, value)
	}
	if puo.mutation.ContractorVoCountCleared() {
		_spec.ClearField(project.FieldContractorVoCount, field.TypeInt)
	}
	if value, ok := puo.mutation.AccumulateDeduction(); ok {
		_spec.SetField(project.FieldAccumulateDeduction, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAccumulateDeduction(); ok {
		_spec.AddField(project.FieldAccumulateDeduction, field.TypeFloat64, value)
	}
	if puo.mutation.AccumulateDeductionCleared() {
		_spec.ClearField(project.FieldAccumulateDeduction, field.TypeFloat64)
	}
	if value, ok := puo.mutation.SubcontractorVaCount(); ok {
		_spec.SetField(project.FieldSubcontractorVaCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSubcontractorVaCount(); ok {
		_spec.AddField(project.FieldSubcontractorVaCount, field.TypeInt, value)
	}
	if puo.mutation.SubcontractorVaCountCleared() {
		_spec.ClearField(project.FieldSubcontractorVaCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractSupplementaryCount(); ok {
		_spec.SetField(project.FieldContractSupplementaryCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractSupplementaryCount(); ok {
		_spec.AddField(project.FieldContractSupplementaryCount, field.TypeInt, value)
	}
	if puo.mutation.ContractSupplementaryCountCleared() {
		_spec.ClearField(project.FieldContractSupplementaryCount, field.TypeInt)
	}
	if value, ok := puo.mutation.RepairFee(); ok {
		_spec.SetField(project.FieldRepairFee, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRepairFee(); ok {
		_spec.AddField(project.FieldRepairFee, field.TypeFloat64, value)
	}
	if puo.mutation.RepairFeeCleared() {
		_spec.ClearField(project.FieldRepairFee, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitInventoryTotal(); ok {
		_spec.SetField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitInventoryTotal(); ok {
		_spec.AddField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
	}
	if puo.mutation.UnitInventoryTotalCleared() {
		_spec.ClearField(project.FieldUnitInventoryTotal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentTotal(); ok {
		_spec.SetField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentTotal(); ok {
		_spec.AddField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentTotalCleared() {
		_spec.ClearField(project.FieldUnitComponentTotal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentProduction(); ok {
		_spec.SetField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentProduction(); ok {
		_spec.AddField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentProductionCleared() {
		_spec.ClearField(project.FieldUnitComponentProduction, field.TypeFloat64)
	}
	if value, ok := puo.mutation.UnitComponentInstallation(); ok {
		_spec.SetField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedUnitComponentInstallation(); ok {
		_spec.AddField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
	}
	if puo.mutation.UnitComponentInstallationCleared() {
		_spec.ClearField(project.FieldUnitComponentInstallation, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsTotalOrderQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsTotalOrderQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsTotalOrderQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsCompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsCompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsCompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.BulkMaterialsUncompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedBulkMaterialsUncompletedQuantity(); ok {
		_spec.AddField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
	}
	if puo.mutation.BulkMaterialsUncompletedQuantityCleared() {
		_spec.ClearField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64)
	}
	if value, ok := puo.mutation.DiagramBdFinishCount(); ok {
		_spec.SetField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramBdFinishCount(); ok {
		_spec.AddField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramBdFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramBdFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramBdTotalCount(); ok {
		_spec.SetField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramBdTotalCount(); ok {
		_spec.AddField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramBdTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramBdTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramConstructionFinishCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramConstructionFinishCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramConstructionFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramConstructionTotalCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramConstructionTotalCount(); ok {
		_spec.AddField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramConstructionTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramConstructionTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramProcessingFinishCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramProcessingFinishCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramProcessingFinishCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingFinishCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramProcessingTotalCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramProcessingTotalCount(); ok {
		_spec.AddField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
	}
	if puo.mutation.DiagramProcessingTotalCountCleared() {
		_spec.ClearField(project.FieldDiagramProcessingTotalCount, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramCApprovalRatioNumerator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramCApprovalRatioNumerator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
	}
	if puo.mutation.DiagramCApprovalRatioNumeratorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt)
	}
	if value, ok := puo.mutation.DiagramCApprovalRatioDenominator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDiagramCApprovalRatioDenominator(); ok {
		_spec.AddField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
	}
	if puo.mutation.DiagramCApprovalRatioDenominatorCleared() {
		_spec.ClearField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
