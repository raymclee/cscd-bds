// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProjectUpdate) SetCode(s string) *ProjectUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCode(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProjectUpdate) ClearName() *ProjectUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetIsFinished sets the "is_finished" field.
func (pu *ProjectUpdate) SetIsFinished(b bool) *ProjectUpdate {
	pu.mutation.SetIsFinished(b)
	return pu
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIsFinished(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetIsFinished(*b)
	}
	return pu
}

// SetCje sets the "cje" field.
func (pu *ProjectUpdate) SetCje(f float64) *ProjectUpdate {
	pu.mutation.ResetCje()
	pu.mutation.SetCje(f)
	return pu
}

// SetNillableCje sets the "cje" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCje(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetCje(*f)
	}
	return pu
}

// AddCje adds f to the "cje" field.
func (pu *ProjectUpdate) AddCje(f float64) *ProjectUpdate {
	pu.mutation.AddCje(f)
	return pu
}

// ClearCje clears the value of the "cje" field.
func (pu *ProjectUpdate) ClearCje() *ProjectUpdate {
	pu.mutation.ClearCje()
	return pu
}

// SetYye sets the "yye" field.
func (pu *ProjectUpdate) SetYye(f float64) *ProjectUpdate {
	pu.mutation.ResetYye()
	pu.mutation.SetYye(f)
	return pu
}

// SetNillableYye sets the "yye" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableYye(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetYye(*f)
	}
	return pu
}

// AddYye adds f to the "yye" field.
func (pu *ProjectUpdate) AddYye(f float64) *ProjectUpdate {
	pu.mutation.AddYye(f)
	return pu
}

// ClearYye clears the value of the "yye" field.
func (pu *ProjectUpdate) ClearYye() *ProjectUpdate {
	pu.mutation.ClearYye()
	return pu
}

// SetXjl sets the "xjl" field.
func (pu *ProjectUpdate) SetXjl(f float64) *ProjectUpdate {
	pu.mutation.ResetXjl()
	pu.mutation.SetXjl(f)
	return pu
}

// SetNillableXjl sets the "xjl" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXjl(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXjl(*f)
	}
	return pu
}

// AddXjl adds f to the "xjl" field.
func (pu *ProjectUpdate) AddXjl(f float64) *ProjectUpdate {
	pu.mutation.AddXjl(f)
	return pu
}

// ClearXjl clears the value of the "xjl" field.
func (pu *ProjectUpdate) ClearXjl() *ProjectUpdate {
	pu.mutation.ClearXjl()
	return pu
}

// SetXmglfYs sets the "xmglf_ys" field.
func (pu *ProjectUpdate) SetXmglfYs(f float64) *ProjectUpdate {
	pu.mutation.ResetXmglfYs()
	pu.mutation.SetXmglfYs(f)
	return pu
}

// SetNillableXmglfYs sets the "xmglf_ys" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmglfYs(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmglfYs(*f)
	}
	return pu
}

// AddXmglfYs adds f to the "xmglf_ys" field.
func (pu *ProjectUpdate) AddXmglfYs(f float64) *ProjectUpdate {
	pu.mutation.AddXmglfYs(f)
	return pu
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (pu *ProjectUpdate) ClearXmglfYs() *ProjectUpdate {
	pu.mutation.ClearXmglfYs()
	return pu
}

// SetXmglfLj sets the "xmglf_lj" field.
func (pu *ProjectUpdate) SetXmglfLj(f float64) *ProjectUpdate {
	pu.mutation.ResetXmglfLj()
	pu.mutation.SetXmglfLj(f)
	return pu
}

// SetNillableXmglfLj sets the "xmglf_lj" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmglfLj(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmglfLj(*f)
	}
	return pu
}

// AddXmglfLj adds f to the "xmglf_lj" field.
func (pu *ProjectUpdate) AddXmglfLj(f float64) *ProjectUpdate {
	pu.mutation.AddXmglfLj(f)
	return pu
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (pu *ProjectUpdate) ClearXmglfLj() *ProjectUpdate {
	pu.mutation.ClearXmglfLj()
	return pu
}

// SetXmsjf sets the "xmsjf" field.
func (pu *ProjectUpdate) SetXmsjf(f float64) *ProjectUpdate {
	pu.mutation.ResetXmsjf()
	pu.mutation.SetXmsjf(f)
	return pu
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmsjf(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetXmsjf(*f)
	}
	return pu
}

// AddXmsjf adds f to the "xmsjf" field.
func (pu *ProjectUpdate) AddXmsjf(f float64) *ProjectUpdate {
	pu.mutation.AddXmsjf(f)
	return pu
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (pu *ProjectUpdate) ClearXmsjf() *ProjectUpdate {
	pu.mutation.ClearXmsjf()
	return pu
}

// SetXmfzr sets the "xmfzr" field.
func (pu *ProjectUpdate) SetXmfzr(s string) *ProjectUpdate {
	pu.mutation.SetXmfzr(s)
	return pu
}

// SetNillableXmfzr sets the "xmfzr" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableXmfzr(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetXmfzr(*s)
	}
	return pu
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (pu *ProjectUpdate) ClearXmfzr() *ProjectUpdate {
	pu.mutation.ClearXmfzr()
	return pu
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (pu *ProjectUpdate) SetOwnerApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetOwnerApplyAmount()
	pu.mutation.SetOwnerApplyAmount(f)
	return pu
}

// SetNillableOwnerApplyAmount sets the "owner_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetOwnerApplyAmount(*f)
	}
	return pu
}

// AddOwnerApplyAmount adds f to the "owner_apply_amount" field.
func (pu *ProjectUpdate) AddOwnerApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddOwnerApplyAmount(f)
	return pu
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (pu *ProjectUpdate) ClearOwnerApplyAmount() *ProjectUpdate {
	pu.mutation.ClearOwnerApplyAmount()
	return pu
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (pu *ProjectUpdate) SetOwnerApplyCount(i int) *ProjectUpdate {
	pu.mutation.ResetOwnerApplyCount()
	pu.mutation.SetOwnerApplyCount(i)
	return pu
}

// SetNillableOwnerApplyCount sets the "owner_apply_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApplyCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOwnerApplyCount(*i)
	}
	return pu
}

// AddOwnerApplyCount adds i to the "owner_apply_count" field.
func (pu *ProjectUpdate) AddOwnerApplyCount(i int) *ProjectUpdate {
	pu.mutation.AddOwnerApplyCount(i)
	return pu
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (pu *ProjectUpdate) ClearOwnerApplyCount() *ProjectUpdate {
	pu.mutation.ClearOwnerApplyCount()
	return pu
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (pu *ProjectUpdate) SetOwnerApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetOwnerApproveAmount()
	pu.mutation.SetOwnerApproveAmount(f)
	return pu
}

// SetNillableOwnerApproveAmount sets the "owner_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetOwnerApproveAmount(*f)
	}
	return pu
}

// AddOwnerApproveAmount adds f to the "owner_approve_amount" field.
func (pu *ProjectUpdate) AddOwnerApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddOwnerApproveAmount(f)
	return pu
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (pu *ProjectUpdate) ClearOwnerApproveAmount() *ProjectUpdate {
	pu.mutation.ClearOwnerApproveAmount()
	return pu
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (pu *ProjectUpdate) SetOwnerApproveCount(i int) *ProjectUpdate {
	pu.mutation.ResetOwnerApproveCount()
	pu.mutation.SetOwnerApproveCount(i)
	return pu
}

// SetNillableOwnerApproveCount sets the "owner_approve_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOwnerApproveCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOwnerApproveCount(*i)
	}
	return pu
}

// AddOwnerApproveCount adds i to the "owner_approve_count" field.
func (pu *ProjectUpdate) AddOwnerApproveCount(i int) *ProjectUpdate {
	pu.mutation.AddOwnerApproveCount(i)
	return pu
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (pu *ProjectUpdate) ClearOwnerApproveCount() *ProjectUpdate {
	pu.mutation.ClearOwnerApproveCount()
	return pu
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (pu *ProjectUpdate) SetContractorApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetContractorApplyAmount()
	pu.mutation.SetContractorApplyAmount(f)
	return pu
}

// SetNillableContractorApplyAmount sets the "contractor_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetContractorApplyAmount(*f)
	}
	return pu
}

// AddContractorApplyAmount adds f to the "contractor_apply_amount" field.
func (pu *ProjectUpdate) AddContractorApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddContractorApplyAmount(f)
	return pu
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (pu *ProjectUpdate) ClearContractorApplyAmount() *ProjectUpdate {
	pu.mutation.ClearContractorApplyAmount()
	return pu
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (pu *ProjectUpdate) SetContractorApplyCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractorApplyCount()
	pu.mutation.SetContractorApplyCount(i)
	return pu
}

// SetNillableContractorApplyCount sets the "contractor_apply_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApplyCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractorApplyCount(*i)
	}
	return pu
}

// AddContractorApplyCount adds i to the "contractor_apply_count" field.
func (pu *ProjectUpdate) AddContractorApplyCount(i int) *ProjectUpdate {
	pu.mutation.AddContractorApplyCount(i)
	return pu
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (pu *ProjectUpdate) ClearContractorApplyCount() *ProjectUpdate {
	pu.mutation.ClearContractorApplyCount()
	return pu
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (pu *ProjectUpdate) SetContractorApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetContractorApproveAmount()
	pu.mutation.SetContractorApproveAmount(f)
	return pu
}

// SetNillableContractorApproveAmount sets the "contractor_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetContractorApproveAmount(*f)
	}
	return pu
}

// AddContractorApproveAmount adds f to the "contractor_approve_amount" field.
func (pu *ProjectUpdate) AddContractorApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddContractorApproveAmount(f)
	return pu
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (pu *ProjectUpdate) ClearContractorApproveAmount() *ProjectUpdate {
	pu.mutation.ClearContractorApproveAmount()
	return pu
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (pu *ProjectUpdate) SetContractorApproveCount(i int) *ProjectUpdate {
	pu.mutation.ResetContractorApproveCount()
	pu.mutation.SetContractorApproveCount(i)
	return pu
}

// SetNillableContractorApproveCount sets the "contractor_approve_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableContractorApproveCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetContractorApproveCount(*i)
	}
	return pu
}

// AddContractorApproveCount adds i to the "contractor_approve_count" field.
func (pu *ProjectUpdate) AddContractorApproveCount(i int) *ProjectUpdate {
	pu.mutation.AddContractorApproveCount(i)
	return pu
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (pu *ProjectUpdate) ClearContractorApproveCount() *ProjectUpdate {
	pu.mutation.ClearContractorApproveCount()
	return pu
}

// SetInstallProgress sets the "install_progress" field.
func (pu *ProjectUpdate) SetInstallProgress(f float64) *ProjectUpdate {
	pu.mutation.ResetInstallProgress()
	pu.mutation.SetInstallProgress(f)
	return pu
}

// SetNillableInstallProgress sets the "install_progress" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableInstallProgress(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetInstallProgress(*f)
	}
	return pu
}

// AddInstallProgress adds f to the "install_progress" field.
func (pu *ProjectUpdate) AddInstallProgress(f float64) *ProjectUpdate {
	pu.mutation.AddInstallProgress(f)
	return pu
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (pu *ProjectUpdate) ClearInstallProgress() *ProjectUpdate {
	pu.mutation.ClearInstallProgress()
	return pu
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (pu *ProjectUpdate) SetEffectiveContractAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetEffectiveContractAmount()
	pu.mutation.SetEffectiveContractAmount(f)
	return pu
}

// SetNillableEffectiveContractAmount sets the "effective_contract_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableEffectiveContractAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetEffectiveContractAmount(*f)
	}
	return pu
}

// AddEffectiveContractAmount adds f to the "effective_contract_amount" field.
func (pu *ProjectUpdate) AddEffectiveContractAmount(f float64) *ProjectUpdate {
	pu.mutation.AddEffectiveContractAmount(f)
	return pu
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (pu *ProjectUpdate) ClearEffectiveContractAmount() *ProjectUpdate {
	pu.mutation.ClearEffectiveContractAmount()
	return pu
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (pu *ProjectUpdate) SetVaApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetVaApplyAmount()
	pu.mutation.SetVaApplyAmount(f)
	return pu
}

// SetNillableVaApplyAmount sets the "va_apply_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableVaApplyAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetVaApplyAmount(*f)
	}
	return pu
}

// AddVaApplyAmount adds f to the "va_apply_amount" field.
func (pu *ProjectUpdate) AddVaApplyAmount(f float64) *ProjectUpdate {
	pu.mutation.AddVaApplyAmount(f)
	return pu
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (pu *ProjectUpdate) ClearVaApplyAmount() *ProjectUpdate {
	pu.mutation.ClearVaApplyAmount()
	return pu
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (pu *ProjectUpdate) SetVaApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.ResetVaApproveAmount()
	pu.mutation.SetVaApproveAmount(f)
	return pu
}

// SetNillableVaApproveAmount sets the "va_approve_amount" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableVaApproveAmount(f *float64) *ProjectUpdate {
	if f != nil {
		pu.SetVaApproveAmount(*f)
	}
	return pu
}

// AddVaApproveAmount adds f to the "va_approve_amount" field.
func (pu *ProjectUpdate) AddVaApproveAmount(f float64) *ProjectUpdate {
	pu.mutation.AddVaApproveAmount(f)
	return pu
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (pu *ProjectUpdate) ClearVaApproveAmount() *ProjectUpdate {
	pu.mutation.ClearVaApproveAmount()
	return pu
}

// AddVoIDs adds the "vos" edge to the ProjectVO entity by IDs.
func (pu *ProjectUpdate) AddVoIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.AddVoIDs(ids...)
	return pu
}

// AddVos adds the "vos" edges to the ProjectVO entity.
func (pu *ProjectUpdate) AddVos(p ...*ProjectVO) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddVoIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearVos clears all "vos" edges to the ProjectVO entity.
func (pu *ProjectUpdate) ClearVos() *ProjectUpdate {
	pu.mutation.ClearVos()
	return pu
}

// RemoveVoIDs removes the "vos" edge to ProjectVO entities by IDs.
func (pu *ProjectUpdate) RemoveVoIDs(ids ...xid.ID) *ProjectUpdate {
	pu.mutation.RemoveVoIDs(ids...)
	return pu
}

// RemoveVos removes "vos" edges to ProjectVO entities.
func (pu *ProjectUpdate) RemoveVos(p ...*ProjectVO) *ProjectUpdate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveVoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(project.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Cje(); ok {
		_spec.SetField(project.FieldCje, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedCje(); ok {
		_spec.AddField(project.FieldCje, field.TypeFloat64, value)
	}
	if pu.mutation.CjeCleared() {
		_spec.ClearField(project.FieldCje, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Yye(); ok {
		_spec.SetField(project.FieldYye, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedYye(); ok {
		_spec.AddField(project.FieldYye, field.TypeFloat64, value)
	}
	if pu.mutation.YyeCleared() {
		_spec.ClearField(project.FieldYye, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xjl(); ok {
		_spec.SetField(project.FieldXjl, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXjl(); ok {
		_spec.AddField(project.FieldXjl, field.TypeFloat64, value)
	}
	if pu.mutation.XjlCleared() {
		_spec.ClearField(project.FieldXjl, field.TypeFloat64)
	}
	if value, ok := pu.mutation.XmglfYs(); ok {
		_spec.SetField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmglfYs(); ok {
		_spec.AddField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if pu.mutation.XmglfYsCleared() {
		_spec.ClearField(project.FieldXmglfYs, field.TypeFloat64)
	}
	if value, ok := pu.mutation.XmglfLj(); ok {
		_spec.SetField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmglfLj(); ok {
		_spec.AddField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if pu.mutation.XmglfLjCleared() {
		_spec.ClearField(project.FieldXmglfLj, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xmsjf(); ok {
		_spec.SetField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedXmsjf(); ok {
		_spec.AddField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if pu.mutation.XmsjfCleared() {
		_spec.ClearField(project.FieldXmsjf, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Xmfzr(); ok {
		_spec.SetField(project.FieldXmfzr, field.TypeString, value)
	}
	if pu.mutation.XmfzrCleared() {
		_spec.ClearField(project.FieldXmfzr, field.TypeString)
	}
	if value, ok := pu.mutation.OwnerApplyAmount(); ok {
		_spec.SetField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOwnerApplyAmount(); ok {
		_spec.AddField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.OwnerApplyAmountCleared() {
		_spec.ClearField(project.FieldOwnerApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OwnerApplyCount(); ok {
		_spec.SetField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOwnerApplyCount(); ok {
		_spec.AddField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if pu.mutation.OwnerApplyCountCleared() {
		_spec.ClearField(project.FieldOwnerApplyCount, field.TypeInt)
	}
	if value, ok := pu.mutation.OwnerApproveAmount(); ok {
		_spec.SetField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOwnerApproveAmount(); ok {
		_spec.AddField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.OwnerApproveAmountCleared() {
		_spec.ClearField(project.FieldOwnerApproveAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OwnerApproveCount(); ok {
		_spec.SetField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOwnerApproveCount(); ok {
		_spec.AddField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if pu.mutation.OwnerApproveCountCleared() {
		_spec.ClearField(project.FieldOwnerApproveCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractorApplyAmount(); ok {
		_spec.SetField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedContractorApplyAmount(); ok {
		_spec.AddField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.ContractorApplyAmountCleared() {
		_spec.ClearField(project.FieldContractorApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ContractorApplyCount(); ok {
		_spec.SetField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractorApplyCount(); ok {
		_spec.AddField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if pu.mutation.ContractorApplyCountCleared() {
		_spec.ClearField(project.FieldContractorApplyCount, field.TypeInt)
	}
	if value, ok := pu.mutation.ContractorApproveAmount(); ok {
		_spec.SetField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedContractorApproveAmount(); ok {
		_spec.AddField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.ContractorApproveAmountCleared() {
		_spec.ClearField(project.FieldContractorApproveAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ContractorApproveCount(); ok {
		_spec.SetField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContractorApproveCount(); ok {
		_spec.AddField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if pu.mutation.ContractorApproveCountCleared() {
		_spec.ClearField(project.FieldContractorApproveCount, field.TypeInt)
	}
	if value, ok := pu.mutation.InstallProgress(); ok {
		_spec.SetField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedInstallProgress(); ok {
		_spec.AddField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if pu.mutation.InstallProgressCleared() {
		_spec.ClearField(project.FieldInstallProgress, field.TypeFloat64)
	}
	if value, ok := pu.mutation.EffectiveContractAmount(); ok {
		_spec.SetField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedEffectiveContractAmount(); ok {
		_spec.AddField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if pu.mutation.EffectiveContractAmountCleared() {
		_spec.ClearField(project.FieldEffectiveContractAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.VaApplyAmount(); ok {
		_spec.SetField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedVaApplyAmount(); ok {
		_spec.AddField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if pu.mutation.VaApplyAmountCleared() {
		_spec.ClearField(project.FieldVaApplyAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.VaApproveAmount(); ok {
		_spec.SetField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedVaApproveAmount(); ok {
		_spec.AddField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if pu.mutation.VaApproveAmountCleared() {
		_spec.ClearField(project.FieldVaApproveAmount, field.TypeFloat64)
	}
	if pu.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVosIDs(); len(nodes) > 0 && !pu.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCode sets the "code" field.
func (puo *ProjectUpdateOne) SetCode(s string) *ProjectUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCode(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProjectUpdateOne) ClearName() *ProjectUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetIsFinished sets the "is_finished" field.
func (puo *ProjectUpdateOne) SetIsFinished(b bool) *ProjectUpdateOne {
	puo.mutation.SetIsFinished(b)
	return puo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIsFinished(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetIsFinished(*b)
	}
	return puo
}

// SetCje sets the "cje" field.
func (puo *ProjectUpdateOne) SetCje(f float64) *ProjectUpdateOne {
	puo.mutation.ResetCje()
	puo.mutation.SetCje(f)
	return puo
}

// SetNillableCje sets the "cje" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCje(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetCje(*f)
	}
	return puo
}

// AddCje adds f to the "cje" field.
func (puo *ProjectUpdateOne) AddCje(f float64) *ProjectUpdateOne {
	puo.mutation.AddCje(f)
	return puo
}

// ClearCje clears the value of the "cje" field.
func (puo *ProjectUpdateOne) ClearCje() *ProjectUpdateOne {
	puo.mutation.ClearCje()
	return puo
}

// SetYye sets the "yye" field.
func (puo *ProjectUpdateOne) SetYye(f float64) *ProjectUpdateOne {
	puo.mutation.ResetYye()
	puo.mutation.SetYye(f)
	return puo
}

// SetNillableYye sets the "yye" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableYye(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetYye(*f)
	}
	return puo
}

// AddYye adds f to the "yye" field.
func (puo *ProjectUpdateOne) AddYye(f float64) *ProjectUpdateOne {
	puo.mutation.AddYye(f)
	return puo
}

// ClearYye clears the value of the "yye" field.
func (puo *ProjectUpdateOne) ClearYye() *ProjectUpdateOne {
	puo.mutation.ClearYye()
	return puo
}

// SetXjl sets the "xjl" field.
func (puo *ProjectUpdateOne) SetXjl(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXjl()
	puo.mutation.SetXjl(f)
	return puo
}

// SetNillableXjl sets the "xjl" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXjl(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXjl(*f)
	}
	return puo
}

// AddXjl adds f to the "xjl" field.
func (puo *ProjectUpdateOne) AddXjl(f float64) *ProjectUpdateOne {
	puo.mutation.AddXjl(f)
	return puo
}

// ClearXjl clears the value of the "xjl" field.
func (puo *ProjectUpdateOne) ClearXjl() *ProjectUpdateOne {
	puo.mutation.ClearXjl()
	return puo
}

// SetXmglfYs sets the "xmglf_ys" field.
func (puo *ProjectUpdateOne) SetXmglfYs(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmglfYs()
	puo.mutation.SetXmglfYs(f)
	return puo
}

// SetNillableXmglfYs sets the "xmglf_ys" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmglfYs(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmglfYs(*f)
	}
	return puo
}

// AddXmglfYs adds f to the "xmglf_ys" field.
func (puo *ProjectUpdateOne) AddXmglfYs(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmglfYs(f)
	return puo
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (puo *ProjectUpdateOne) ClearXmglfYs() *ProjectUpdateOne {
	puo.mutation.ClearXmglfYs()
	return puo
}

// SetXmglfLj sets the "xmglf_lj" field.
func (puo *ProjectUpdateOne) SetXmglfLj(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmglfLj()
	puo.mutation.SetXmglfLj(f)
	return puo
}

// SetNillableXmglfLj sets the "xmglf_lj" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmglfLj(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmglfLj(*f)
	}
	return puo
}

// AddXmglfLj adds f to the "xmglf_lj" field.
func (puo *ProjectUpdateOne) AddXmglfLj(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmglfLj(f)
	return puo
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (puo *ProjectUpdateOne) ClearXmglfLj() *ProjectUpdateOne {
	puo.mutation.ClearXmglfLj()
	return puo
}

// SetXmsjf sets the "xmsjf" field.
func (puo *ProjectUpdateOne) SetXmsjf(f float64) *ProjectUpdateOne {
	puo.mutation.ResetXmsjf()
	puo.mutation.SetXmsjf(f)
	return puo
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmsjf(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetXmsjf(*f)
	}
	return puo
}

// AddXmsjf adds f to the "xmsjf" field.
func (puo *ProjectUpdateOne) AddXmsjf(f float64) *ProjectUpdateOne {
	puo.mutation.AddXmsjf(f)
	return puo
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (puo *ProjectUpdateOne) ClearXmsjf() *ProjectUpdateOne {
	puo.mutation.ClearXmsjf()
	return puo
}

// SetXmfzr sets the "xmfzr" field.
func (puo *ProjectUpdateOne) SetXmfzr(s string) *ProjectUpdateOne {
	puo.mutation.SetXmfzr(s)
	return puo
}

// SetNillableXmfzr sets the "xmfzr" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableXmfzr(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetXmfzr(*s)
	}
	return puo
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (puo *ProjectUpdateOne) ClearXmfzr() *ProjectUpdateOne {
	puo.mutation.ClearXmfzr()
	return puo
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) SetOwnerApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApplyAmount()
	puo.mutation.SetOwnerApplyAmount(f)
	return puo
}

// SetNillableOwnerApplyAmount sets the "owner_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetOwnerApplyAmount(*f)
	}
	return puo
}

// AddOwnerApplyAmount adds f to the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) AddOwnerApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddOwnerApplyAmount(f)
	return puo
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (puo *ProjectUpdateOne) ClearOwnerApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApplyAmount()
	return puo
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (puo *ProjectUpdateOne) SetOwnerApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApplyCount()
	puo.mutation.SetOwnerApplyCount(i)
	return puo
}

// SetNillableOwnerApplyCount sets the "owner_apply_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApplyCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOwnerApplyCount(*i)
	}
	return puo
}

// AddOwnerApplyCount adds i to the "owner_apply_count" field.
func (puo *ProjectUpdateOne) AddOwnerApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.AddOwnerApplyCount(i)
	return puo
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (puo *ProjectUpdateOne) ClearOwnerApplyCount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApplyCount()
	return puo
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) SetOwnerApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApproveAmount()
	puo.mutation.SetOwnerApproveAmount(f)
	return puo
}

// SetNillableOwnerApproveAmount sets the "owner_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetOwnerApproveAmount(*f)
	}
	return puo
}

// AddOwnerApproveAmount adds f to the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) AddOwnerApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddOwnerApproveAmount(f)
	return puo
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (puo *ProjectUpdateOne) ClearOwnerApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApproveAmount()
	return puo
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (puo *ProjectUpdateOne) SetOwnerApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetOwnerApproveCount()
	puo.mutation.SetOwnerApproveCount(i)
	return puo
}

// SetNillableOwnerApproveCount sets the "owner_approve_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOwnerApproveCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOwnerApproveCount(*i)
	}
	return puo
}

// AddOwnerApproveCount adds i to the "owner_approve_count" field.
func (puo *ProjectUpdateOne) AddOwnerApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.AddOwnerApproveCount(i)
	return puo
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (puo *ProjectUpdateOne) ClearOwnerApproveCount() *ProjectUpdateOne {
	puo.mutation.ClearOwnerApproveCount()
	return puo
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) SetContractorApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetContractorApplyAmount()
	puo.mutation.SetContractorApplyAmount(f)
	return puo
}

// SetNillableContractorApplyAmount sets the "contractor_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetContractorApplyAmount(*f)
	}
	return puo
}

// AddContractorApplyAmount adds f to the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) AddContractorApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddContractorApplyAmount(f)
	return puo
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (puo *ProjectUpdateOne) ClearContractorApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApplyAmount()
	return puo
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) SetContractorApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractorApplyCount()
	puo.mutation.SetContractorApplyCount(i)
	return puo
}

// SetNillableContractorApplyCount sets the "contractor_apply_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApplyCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractorApplyCount(*i)
	}
	return puo
}

// AddContractorApplyCount adds i to the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) AddContractorApplyCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractorApplyCount(i)
	return puo
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (puo *ProjectUpdateOne) ClearContractorApplyCount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApplyCount()
	return puo
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) SetContractorApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetContractorApproveAmount()
	puo.mutation.SetContractorApproveAmount(f)
	return puo
}

// SetNillableContractorApproveAmount sets the "contractor_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetContractorApproveAmount(*f)
	}
	return puo
}

// AddContractorApproveAmount adds f to the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) AddContractorApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddContractorApproveAmount(f)
	return puo
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (puo *ProjectUpdateOne) ClearContractorApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApproveAmount()
	return puo
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) SetContractorApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetContractorApproveCount()
	puo.mutation.SetContractorApproveCount(i)
	return puo
}

// SetNillableContractorApproveCount sets the "contractor_approve_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableContractorApproveCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetContractorApproveCount(*i)
	}
	return puo
}

// AddContractorApproveCount adds i to the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) AddContractorApproveCount(i int) *ProjectUpdateOne {
	puo.mutation.AddContractorApproveCount(i)
	return puo
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (puo *ProjectUpdateOne) ClearContractorApproveCount() *ProjectUpdateOne {
	puo.mutation.ClearContractorApproveCount()
	return puo
}

// SetInstallProgress sets the "install_progress" field.
func (puo *ProjectUpdateOne) SetInstallProgress(f float64) *ProjectUpdateOne {
	puo.mutation.ResetInstallProgress()
	puo.mutation.SetInstallProgress(f)
	return puo
}

// SetNillableInstallProgress sets the "install_progress" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableInstallProgress(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetInstallProgress(*f)
	}
	return puo
}

// AddInstallProgress adds f to the "install_progress" field.
func (puo *ProjectUpdateOne) AddInstallProgress(f float64) *ProjectUpdateOne {
	puo.mutation.AddInstallProgress(f)
	return puo
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (puo *ProjectUpdateOne) ClearInstallProgress() *ProjectUpdateOne {
	puo.mutation.ClearInstallProgress()
	return puo
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) SetEffectiveContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetEffectiveContractAmount()
	puo.mutation.SetEffectiveContractAmount(f)
	return puo
}

// SetNillableEffectiveContractAmount sets the "effective_contract_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableEffectiveContractAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetEffectiveContractAmount(*f)
	}
	return puo
}

// AddEffectiveContractAmount adds f to the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) AddEffectiveContractAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddEffectiveContractAmount(f)
	return puo
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (puo *ProjectUpdateOne) ClearEffectiveContractAmount() *ProjectUpdateOne {
	puo.mutation.ClearEffectiveContractAmount()
	return puo
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (puo *ProjectUpdateOne) SetVaApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetVaApplyAmount()
	puo.mutation.SetVaApplyAmount(f)
	return puo
}

// SetNillableVaApplyAmount sets the "va_apply_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableVaApplyAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetVaApplyAmount(*f)
	}
	return puo
}

// AddVaApplyAmount adds f to the "va_apply_amount" field.
func (puo *ProjectUpdateOne) AddVaApplyAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddVaApplyAmount(f)
	return puo
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (puo *ProjectUpdateOne) ClearVaApplyAmount() *ProjectUpdateOne {
	puo.mutation.ClearVaApplyAmount()
	return puo
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (puo *ProjectUpdateOne) SetVaApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.ResetVaApproveAmount()
	puo.mutation.SetVaApproveAmount(f)
	return puo
}

// SetNillableVaApproveAmount sets the "va_approve_amount" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableVaApproveAmount(f *float64) *ProjectUpdateOne {
	if f != nil {
		puo.SetVaApproveAmount(*f)
	}
	return puo
}

// AddVaApproveAmount adds f to the "va_approve_amount" field.
func (puo *ProjectUpdateOne) AddVaApproveAmount(f float64) *ProjectUpdateOne {
	puo.mutation.AddVaApproveAmount(f)
	return puo
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (puo *ProjectUpdateOne) ClearVaApproveAmount() *ProjectUpdateOne {
	puo.mutation.ClearVaApproveAmount()
	return puo
}

// AddVoIDs adds the "vos" edge to the ProjectVO entity by IDs.
func (puo *ProjectUpdateOne) AddVoIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.AddVoIDs(ids...)
	return puo
}

// AddVos adds the "vos" edges to the ProjectVO entity.
func (puo *ProjectUpdateOne) AddVos(p ...*ProjectVO) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddVoIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearVos clears all "vos" edges to the ProjectVO entity.
func (puo *ProjectUpdateOne) ClearVos() *ProjectUpdateOne {
	puo.mutation.ClearVos()
	return puo
}

// RemoveVoIDs removes the "vos" edge to ProjectVO entities by IDs.
func (puo *ProjectUpdateOne) RemoveVoIDs(ids ...xid.ID) *ProjectUpdateOne {
	puo.mutation.RemoveVoIDs(ids...)
	return puo
}

// RemoveVos removes "vos" edges to ProjectVO entities.
func (puo *ProjectUpdateOne) RemoveVos(p ...*ProjectVO) *ProjectUpdateOne {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveVoIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(project.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Cje(); ok {
		_spec.SetField(project.FieldCje, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedCje(); ok {
		_spec.AddField(project.FieldCje, field.TypeFloat64, value)
	}
	if puo.mutation.CjeCleared() {
		_spec.ClearField(project.FieldCje, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Yye(); ok {
		_spec.SetField(project.FieldYye, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedYye(); ok {
		_spec.AddField(project.FieldYye, field.TypeFloat64, value)
	}
	if puo.mutation.YyeCleared() {
		_spec.ClearField(project.FieldYye, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xjl(); ok {
		_spec.SetField(project.FieldXjl, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXjl(); ok {
		_spec.AddField(project.FieldXjl, field.TypeFloat64, value)
	}
	if puo.mutation.XjlCleared() {
		_spec.ClearField(project.FieldXjl, field.TypeFloat64)
	}
	if value, ok := puo.mutation.XmglfYs(); ok {
		_spec.SetField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmglfYs(); ok {
		_spec.AddField(project.FieldXmglfYs, field.TypeFloat64, value)
	}
	if puo.mutation.XmglfYsCleared() {
		_spec.ClearField(project.FieldXmglfYs, field.TypeFloat64)
	}
	if value, ok := puo.mutation.XmglfLj(); ok {
		_spec.SetField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmglfLj(); ok {
		_spec.AddField(project.FieldXmglfLj, field.TypeFloat64, value)
	}
	if puo.mutation.XmglfLjCleared() {
		_spec.ClearField(project.FieldXmglfLj, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xmsjf(); ok {
		_spec.SetField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedXmsjf(); ok {
		_spec.AddField(project.FieldXmsjf, field.TypeFloat64, value)
	}
	if puo.mutation.XmsjfCleared() {
		_spec.ClearField(project.FieldXmsjf, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Xmfzr(); ok {
		_spec.SetField(project.FieldXmfzr, field.TypeString, value)
	}
	if puo.mutation.XmfzrCleared() {
		_spec.ClearField(project.FieldXmfzr, field.TypeString)
	}
	if value, ok := puo.mutation.OwnerApplyAmount(); ok {
		_spec.SetField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOwnerApplyAmount(); ok {
		_spec.AddField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.OwnerApplyAmountCleared() {
		_spec.ClearField(project.FieldOwnerApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OwnerApplyCount(); ok {
		_spec.SetField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOwnerApplyCount(); ok {
		_spec.AddField(project.FieldOwnerApplyCount, field.TypeInt, value)
	}
	if puo.mutation.OwnerApplyCountCleared() {
		_spec.ClearField(project.FieldOwnerApplyCount, field.TypeInt)
	}
	if value, ok := puo.mutation.OwnerApproveAmount(); ok {
		_spec.SetField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOwnerApproveAmount(); ok {
		_spec.AddField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.OwnerApproveAmountCleared() {
		_spec.ClearField(project.FieldOwnerApproveAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OwnerApproveCount(); ok {
		_spec.SetField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOwnerApproveCount(); ok {
		_spec.AddField(project.FieldOwnerApproveCount, field.TypeInt, value)
	}
	if puo.mutation.OwnerApproveCountCleared() {
		_spec.ClearField(project.FieldOwnerApproveCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractorApplyAmount(); ok {
		_spec.SetField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedContractorApplyAmount(); ok {
		_spec.AddField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.ContractorApplyAmountCleared() {
		_spec.ClearField(project.FieldContractorApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ContractorApplyCount(); ok {
		_spec.SetField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractorApplyCount(); ok {
		_spec.AddField(project.FieldContractorApplyCount, field.TypeInt, value)
	}
	if puo.mutation.ContractorApplyCountCleared() {
		_spec.ClearField(project.FieldContractorApplyCount, field.TypeInt)
	}
	if value, ok := puo.mutation.ContractorApproveAmount(); ok {
		_spec.SetField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedContractorApproveAmount(); ok {
		_spec.AddField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.ContractorApproveAmountCleared() {
		_spec.ClearField(project.FieldContractorApproveAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ContractorApproveCount(); ok {
		_spec.SetField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContractorApproveCount(); ok {
		_spec.AddField(project.FieldContractorApproveCount, field.TypeInt, value)
	}
	if puo.mutation.ContractorApproveCountCleared() {
		_spec.ClearField(project.FieldContractorApproveCount, field.TypeInt)
	}
	if value, ok := puo.mutation.InstallProgress(); ok {
		_spec.SetField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedInstallProgress(); ok {
		_spec.AddField(project.FieldInstallProgress, field.TypeFloat64, value)
	}
	if puo.mutation.InstallProgressCleared() {
		_spec.ClearField(project.FieldInstallProgress, field.TypeFloat64)
	}
	if value, ok := puo.mutation.EffectiveContractAmount(); ok {
		_spec.SetField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedEffectiveContractAmount(); ok {
		_spec.AddField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
	}
	if puo.mutation.EffectiveContractAmountCleared() {
		_spec.ClearField(project.FieldEffectiveContractAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.VaApplyAmount(); ok {
		_spec.SetField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedVaApplyAmount(); ok {
		_spec.AddField(project.FieldVaApplyAmount, field.TypeFloat64, value)
	}
	if puo.mutation.VaApplyAmountCleared() {
		_spec.ClearField(project.FieldVaApplyAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.VaApproveAmount(); ok {
		_spec.SetField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedVaApproveAmount(); ok {
		_spec.AddField(project.FieldVaApproveAmount, field.TypeFloat64, value)
	}
	if puo.mutation.VaApproveAmountCleared() {
		_spec.ClearField(project.FieldVaApproveAmount, field.TypeFloat64)
	}
	if puo.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVosIDs(); len(nodes) > 0 && !puo.mutation.VosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
