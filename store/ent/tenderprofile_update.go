// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TenderProfileUpdate is the builder for updating TenderProfile entities.
type TenderProfileUpdate struct {
	config
	hooks    []Hook
	mutation *TenderProfileMutation
}

// Where appends a list predicates to the TenderProfileUpdate builder.
func (tpu *TenderProfileUpdate) Where(ps ...predicate.TenderProfile) *TenderProfileUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tpu *TenderProfileUpdate) SetUpdatedAt(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetUpdatedAt(t)
	return tpu
}

// SetStatus sets the "status" field.
func (tpu *TenderProfileUpdate) SetStatus(i int) *TenderProfileUpdate {
	tpu.mutation.ResetStatus()
	tpu.mutation.SetStatus(i)
	return tpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableStatus(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetStatus(*i)
	}
	return tpu
}

// AddStatus adds i to the "status" field.
func (tpu *TenderProfileUpdate) AddStatus(i int) *TenderProfileUpdate {
	tpu.mutation.AddStatus(i)
	return tpu
}

// SetApprovalStatus sets the "approval_status" field.
func (tpu *TenderProfileUpdate) SetApprovalStatus(i int) *TenderProfileUpdate {
	tpu.mutation.ResetApprovalStatus()
	tpu.mutation.SetApprovalStatus(i)
	return tpu
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableApprovalStatus(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetApprovalStatus(*i)
	}
	return tpu
}

// AddApprovalStatus adds i to the "approval_status" field.
func (tpu *TenderProfileUpdate) AddApprovalStatus(i int) *TenderProfileUpdate {
	tpu.mutation.AddApprovalStatus(i)
	return tpu
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (tpu *TenderProfileUpdate) SetApprovalMsgID(s string) *TenderProfileUpdate {
	tpu.mutation.SetApprovalMsgID(s)
	return tpu
}

// SetNillableApprovalMsgID sets the "approval_msg_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableApprovalMsgID(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetApprovalMsgID(*s)
	}
	return tpu
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (tpu *TenderProfileUpdate) ClearApprovalMsgID() *TenderProfileUpdate {
	tpu.mutation.ClearApprovalMsgID()
	return tpu
}

// SetName sets the "name" field.
func (tpu *TenderProfileUpdate) SetName(s string) *TenderProfileUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableName(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetName(*s)
	}
	return tpu
}

// ClearName clears the value of the "name" field.
func (tpu *TenderProfileUpdate) ClearName() *TenderProfileUpdate {
	tpu.mutation.ClearName()
	return tpu
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tpu *TenderProfileUpdate) SetEstimatedAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.ResetEstimatedAmount()
	tpu.mutation.SetEstimatedAmount(f)
	return tpu
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableEstimatedAmount(f *float64) *TenderProfileUpdate {
	if f != nil {
		tpu.SetEstimatedAmount(*f)
	}
	return tpu
}

// AddEstimatedAmount adds f to the "estimated_amount" field.
func (tpu *TenderProfileUpdate) AddEstimatedAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.AddEstimatedAmount(f)
	return tpu
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (tpu *TenderProfileUpdate) ClearEstimatedAmount() *TenderProfileUpdate {
	tpu.mutation.ClearEstimatedAmount()
	return tpu
}

// SetTenderDate sets the "tender_date" field.
func (tpu *TenderProfileUpdate) SetTenderDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetTenderDate(t)
	return tpu
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetTenderDate(*t)
	}
	return tpu
}

// ClearTenderDate clears the value of the "tender_date" field.
func (tpu *TenderProfileUpdate) ClearTenderDate() *TenderProfileUpdate {
	tpu.mutation.ClearTenderDate()
	return tpu
}

// SetClassify sets the "classify" field.
func (tpu *TenderProfileUpdate) SetClassify(i int) *TenderProfileUpdate {
	tpu.mutation.ResetClassify()
	tpu.mutation.SetClassify(i)
	return tpu
}

// SetNillableClassify sets the "classify" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableClassify(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetClassify(*i)
	}
	return tpu
}

// AddClassify adds i to the "classify" field.
func (tpu *TenderProfileUpdate) AddClassify(i int) *TenderProfileUpdate {
	tpu.mutation.AddClassify(i)
	return tpu
}

// ClearClassify clears the value of the "classify" field.
func (tpu *TenderProfileUpdate) ClearClassify() *TenderProfileUpdate {
	tpu.mutation.ClearClassify()
	return tpu
}

// SetDiscoveryDate sets the "discovery_date" field.
func (tpu *TenderProfileUpdate) SetDiscoveryDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetDiscoveryDate(t)
	return tpu
}

// SetNillableDiscoveryDate sets the "discovery_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableDiscoveryDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetDiscoveryDate(*t)
	}
	return tpu
}

// ClearDiscoveryDate clears the value of the "discovery_date" field.
func (tpu *TenderProfileUpdate) ClearDiscoveryDate() *TenderProfileUpdate {
	tpu.mutation.ClearDiscoveryDate()
	return tpu
}

// SetAddress sets the "address" field.
func (tpu *TenderProfileUpdate) SetAddress(s string) *TenderProfileUpdate {
	tpu.mutation.SetAddress(s)
	return tpu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableAddress(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetAddress(*s)
	}
	return tpu
}

// ClearAddress clears the value of the "address" field.
func (tpu *TenderProfileUpdate) ClearAddress() *TenderProfileUpdate {
	tpu.mutation.ClearAddress()
	return tpu
}

// SetFullAddress sets the "full_address" field.
func (tpu *TenderProfileUpdate) SetFullAddress(s string) *TenderProfileUpdate {
	tpu.mutation.SetFullAddress(s)
	return tpu
}

// SetNillableFullAddress sets the "full_address" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableFullAddress(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetFullAddress(*s)
	}
	return tpu
}

// ClearFullAddress clears the value of the "full_address" field.
func (tpu *TenderProfileUpdate) ClearFullAddress() *TenderProfileUpdate {
	tpu.mutation.ClearFullAddress()
	return tpu
}

// SetContractor sets the "contractor" field.
func (tpu *TenderProfileUpdate) SetContractor(s string) *TenderProfileUpdate {
	tpu.mutation.SetContractor(s)
	return tpu
}

// SetNillableContractor sets the "contractor" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableContractor(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetContractor(*s)
	}
	return tpu
}

// ClearContractor clears the value of the "contractor" field.
func (tpu *TenderProfileUpdate) ClearContractor() *TenderProfileUpdate {
	tpu.mutation.ClearContractor()
	return tpu
}

// SetLevelInvolved sets the "level_involved" field.
func (tpu *TenderProfileUpdate) SetLevelInvolved(i int) *TenderProfileUpdate {
	tpu.mutation.ResetLevelInvolved()
	tpu.mutation.SetLevelInvolved(i)
	return tpu
}

// SetNillableLevelInvolved sets the "level_involved" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableLevelInvolved(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetLevelInvolved(*i)
	}
	return tpu
}

// AddLevelInvolved adds i to the "level_involved" field.
func (tpu *TenderProfileUpdate) AddLevelInvolved(i int) *TenderProfileUpdate {
	tpu.mutation.AddLevelInvolved(i)
	return tpu
}

// ClearLevelInvolved clears the value of the "level_involved" field.
func (tpu *TenderProfileUpdate) ClearLevelInvolved() *TenderProfileUpdate {
	tpu.mutation.ClearLevelInvolved()
	return tpu
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tpu *TenderProfileUpdate) SetSizeAndValueRating(i int) *TenderProfileUpdate {
	tpu.mutation.ResetSizeAndValueRating()
	tpu.mutation.SetSizeAndValueRating(i)
	return tpu
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableSizeAndValueRating(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetSizeAndValueRating(*i)
	}
	return tpu
}

// AddSizeAndValueRating adds i to the "size_and_value_rating" field.
func (tpu *TenderProfileUpdate) AddSizeAndValueRating(i int) *TenderProfileUpdate {
	tpu.mutation.AddSizeAndValueRating(i)
	return tpu
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (tpu *TenderProfileUpdate) ClearSizeAndValueRating() *TenderProfileUpdate {
	tpu.mutation.ClearSizeAndValueRating()
	return tpu
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (tpu *TenderProfileUpdate) SetSizeAndValueRatingOverview(s string) *TenderProfileUpdate {
	tpu.mutation.SetSizeAndValueRatingOverview(s)
	return tpu
}

// SetNillableSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableSizeAndValueRatingOverview(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetSizeAndValueRatingOverview(*s)
	}
	return tpu
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (tpu *TenderProfileUpdate) ClearSizeAndValueRatingOverview() *TenderProfileUpdate {
	tpu.mutation.ClearSizeAndValueRatingOverview()
	return tpu
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tpu *TenderProfileUpdate) SetCreditAndPaymentRating(i int) *TenderProfileUpdate {
	tpu.mutation.ResetCreditAndPaymentRating()
	tpu.mutation.SetCreditAndPaymentRating(i)
	return tpu
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCreditAndPaymentRating(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetCreditAndPaymentRating(*i)
	}
	return tpu
}

// AddCreditAndPaymentRating adds i to the "credit_and_payment_rating" field.
func (tpu *TenderProfileUpdate) AddCreditAndPaymentRating(i int) *TenderProfileUpdate {
	tpu.mutation.AddCreditAndPaymentRating(i)
	return tpu
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (tpu *TenderProfileUpdate) ClearCreditAndPaymentRating() *TenderProfileUpdate {
	tpu.mutation.ClearCreditAndPaymentRating()
	return tpu
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (tpu *TenderProfileUpdate) SetCreditAndPaymentRatingOverview(s string) *TenderProfileUpdate {
	tpu.mutation.SetCreditAndPaymentRatingOverview(s)
	return tpu
}

// SetNillableCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCreditAndPaymentRatingOverview(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCreditAndPaymentRatingOverview(*s)
	}
	return tpu
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (tpu *TenderProfileUpdate) ClearCreditAndPaymentRatingOverview() *TenderProfileUpdate {
	tpu.mutation.ClearCreditAndPaymentRatingOverview()
	return tpu
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tpu *TenderProfileUpdate) SetTimeLimitRating(i int) *TenderProfileUpdate {
	tpu.mutation.ResetTimeLimitRating()
	tpu.mutation.SetTimeLimitRating(i)
	return tpu
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTimeLimitRating(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetTimeLimitRating(*i)
	}
	return tpu
}

// AddTimeLimitRating adds i to the "time_limit_rating" field.
func (tpu *TenderProfileUpdate) AddTimeLimitRating(i int) *TenderProfileUpdate {
	tpu.mutation.AddTimeLimitRating(i)
	return tpu
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (tpu *TenderProfileUpdate) ClearTimeLimitRating() *TenderProfileUpdate {
	tpu.mutation.ClearTimeLimitRating()
	return tpu
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (tpu *TenderProfileUpdate) SetTimeLimitRatingOverview(s string) *TenderProfileUpdate {
	tpu.mutation.SetTimeLimitRatingOverview(s)
	return tpu
}

// SetNillableTimeLimitRatingOverview sets the "time_limit_rating_overview" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTimeLimitRatingOverview(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTimeLimitRatingOverview(*s)
	}
	return tpu
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (tpu *TenderProfileUpdate) ClearTimeLimitRatingOverview() *TenderProfileUpdate {
	tpu.mutation.ClearTimeLimitRatingOverview()
	return tpu
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tpu *TenderProfileUpdate) SetCustomerRelationshipRating(i int) *TenderProfileUpdate {
	tpu.mutation.ResetCustomerRelationshipRating()
	tpu.mutation.SetCustomerRelationshipRating(i)
	return tpu
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCustomerRelationshipRating(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetCustomerRelationshipRating(*i)
	}
	return tpu
}

// AddCustomerRelationshipRating adds i to the "customer_relationship_rating" field.
func (tpu *TenderProfileUpdate) AddCustomerRelationshipRating(i int) *TenderProfileUpdate {
	tpu.mutation.AddCustomerRelationshipRating(i)
	return tpu
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (tpu *TenderProfileUpdate) ClearCustomerRelationshipRating() *TenderProfileUpdate {
	tpu.mutation.ClearCustomerRelationshipRating()
	return tpu
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (tpu *TenderProfileUpdate) SetCustomerRelationshipRatingOverview(s string) *TenderProfileUpdate {
	tpu.mutation.SetCustomerRelationshipRatingOverview(s)
	return tpu
}

// SetNillableCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCustomerRelationshipRatingOverview(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCustomerRelationshipRatingOverview(*s)
	}
	return tpu
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (tpu *TenderProfileUpdate) ClearCustomerRelationshipRatingOverview() *TenderProfileUpdate {
	tpu.mutation.ClearCustomerRelationshipRatingOverview()
	return tpu
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tpu *TenderProfileUpdate) SetCompetitivePartnershipRating(i int) *TenderProfileUpdate {
	tpu.mutation.ResetCompetitivePartnershipRating()
	tpu.mutation.SetCompetitivePartnershipRating(i)
	return tpu
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCompetitivePartnershipRating(i *int) *TenderProfileUpdate {
	if i != nil {
		tpu.SetCompetitivePartnershipRating(*i)
	}
	return tpu
}

// AddCompetitivePartnershipRating adds i to the "competitive_partnership_rating" field.
func (tpu *TenderProfileUpdate) AddCompetitivePartnershipRating(i int) *TenderProfileUpdate {
	tpu.mutation.AddCompetitivePartnershipRating(i)
	return tpu
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (tpu *TenderProfileUpdate) ClearCompetitivePartnershipRating() *TenderProfileUpdate {
	tpu.mutation.ClearCompetitivePartnershipRating()
	return tpu
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (tpu *TenderProfileUpdate) SetCompetitivePartnershipRatingOverview(s string) *TenderProfileUpdate {
	tpu.mutation.SetCompetitivePartnershipRatingOverview(s)
	return tpu
}

// SetNillableCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCompetitivePartnershipRatingOverview(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCompetitivePartnershipRatingOverview(*s)
	}
	return tpu
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (tpu *TenderProfileUpdate) ClearCompetitivePartnershipRatingOverview() *TenderProfileUpdate {
	tpu.mutation.ClearCompetitivePartnershipRatingOverview()
	return tpu
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tpu *TenderProfileUpdate) SetPrepareToBid(b bool) *TenderProfileUpdate {
	tpu.mutation.SetPrepareToBid(b)
	return tpu
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillablePrepareToBid(b *bool) *TenderProfileUpdate {
	if b != nil {
		tpu.SetPrepareToBid(*b)
	}
	return tpu
}

// SetProjectCode sets the "project_code" field.
func (tpu *TenderProfileUpdate) SetProjectCode(s string) *TenderProfileUpdate {
	tpu.mutation.SetProjectCode(s)
	return tpu
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableProjectCode(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetProjectCode(*s)
	}
	return tpu
}

// ClearProjectCode clears the value of the "project_code" field.
func (tpu *TenderProfileUpdate) ClearProjectCode() *TenderProfileUpdate {
	tpu.mutation.ClearProjectCode()
	return tpu
}

// SetProjectType sets the "project_type" field.
func (tpu *TenderProfileUpdate) SetProjectType(s string) *TenderProfileUpdate {
	tpu.mutation.SetProjectType(s)
	return tpu
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableProjectType(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetProjectType(*s)
	}
	return tpu
}

// ClearProjectType clears the value of the "project_type" field.
func (tpu *TenderProfileUpdate) ClearProjectType() *TenderProfileUpdate {
	tpu.mutation.ClearProjectType()
	return tpu
}

// SetProjectDefinition sets the "project_definition" field.
func (tpu *TenderProfileUpdate) SetProjectDefinition(s string) *TenderProfileUpdate {
	tpu.mutation.SetProjectDefinition(s)
	return tpu
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableProjectDefinition(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetProjectDefinition(*s)
	}
	return tpu
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (tpu *TenderProfileUpdate) ClearProjectDefinition() *TenderProfileUpdate {
	tpu.mutation.ClearProjectDefinition()
	return tpu
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tpu *TenderProfileUpdate) SetEstimatedProjectStartDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetEstimatedProjectStartDate(t)
	return tpu
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetEstimatedProjectStartDate(*t)
	}
	return tpu
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (tpu *TenderProfileUpdate) ClearEstimatedProjectStartDate() *TenderProfileUpdate {
	tpu.mutation.ClearEstimatedProjectStartDate()
	return tpu
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tpu *TenderProfileUpdate) SetEstimatedProjectEndDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetEstimatedProjectEndDate(t)
	return tpu
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetEstimatedProjectEndDate(*t)
	}
	return tpu
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (tpu *TenderProfileUpdate) ClearEstimatedProjectEndDate() *TenderProfileUpdate {
	tpu.mutation.ClearEstimatedProjectEndDate()
	return tpu
}

// SetAttachments sets the "attachments" field.
func (tpu *TenderProfileUpdate) SetAttachments(s []string) *TenderProfileUpdate {
	tpu.mutation.SetAttachments(s)
	return tpu
}

// AppendAttachments appends s to the "attachments" field.
func (tpu *TenderProfileUpdate) AppendAttachments(s []string) *TenderProfileUpdate {
	tpu.mutation.AppendAttachments(s)
	return tpu
}

// ClearAttachments clears the value of the "attachments" field.
func (tpu *TenderProfileUpdate) ClearAttachments() *TenderProfileUpdate {
	tpu.mutation.ClearAttachments()
	return tpu
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tpu *TenderProfileUpdate) SetGeoCoordinate(f []float64) *TenderProfileUpdate {
	tpu.mutation.SetGeoCoordinate(f)
	return tpu
}

// AppendGeoCoordinate appends f to the "geo_coordinate" field.
func (tpu *TenderProfileUpdate) AppendGeoCoordinate(f []float64) *TenderProfileUpdate {
	tpu.mutation.AppendGeoCoordinate(f)
	return tpu
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (tpu *TenderProfileUpdate) ClearGeoCoordinate() *TenderProfileUpdate {
	tpu.mutation.ClearGeoCoordinate()
	return tpu
}

// SetGeoBounds sets the "geo_bounds" field.
func (tpu *TenderProfileUpdate) SetGeoBounds(f [][]float64) *TenderProfileUpdate {
	tpu.mutation.SetGeoBounds(f)
	return tpu
}

// AppendGeoBounds appends f to the "geo_bounds" field.
func (tpu *TenderProfileUpdate) AppendGeoBounds(f [][]float64) *TenderProfileUpdate {
	tpu.mutation.AppendGeoBounds(f)
	return tpu
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (tpu *TenderProfileUpdate) ClearGeoBounds() *TenderProfileUpdate {
	tpu.mutation.ClearGeoBounds()
	return tpu
}

// SetRemark sets the "remark" field.
func (tpu *TenderProfileUpdate) SetRemark(s string) *TenderProfileUpdate {
	tpu.mutation.SetRemark(s)
	return tpu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableRemark(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetRemark(*s)
	}
	return tpu
}

// ClearRemark clears the value of the "remark" field.
func (tpu *TenderProfileUpdate) ClearRemark() *TenderProfileUpdate {
	tpu.mutation.ClearRemark()
	return tpu
}

// SetImages sets the "images" field.
func (tpu *TenderProfileUpdate) SetImages(s []string) *TenderProfileUpdate {
	tpu.mutation.SetImages(s)
	return tpu
}

// AppendImages appends s to the "images" field.
func (tpu *TenderProfileUpdate) AppendImages(s []string) *TenderProfileUpdate {
	tpu.mutation.AppendImages(s)
	return tpu
}

// ClearImages clears the value of the "images" field.
func (tpu *TenderProfileUpdate) ClearImages() *TenderProfileUpdate {
	tpu.mutation.ClearImages()
	return tpu
}

// SetTenderSituations sets the "tender_situations" field.
func (tpu *TenderProfileUpdate) SetTenderSituations(s string) *TenderProfileUpdate {
	tpu.mutation.SetTenderSituations(s)
	return tpu
}

// SetNillableTenderSituations sets the "tender_situations" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderSituations(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTenderSituations(*s)
	}
	return tpu
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (tpu *TenderProfileUpdate) ClearTenderSituations() *TenderProfileUpdate {
	tpu.mutation.ClearTenderSituations()
	return tpu
}

// SetOwnerSituations sets the "owner_situations" field.
func (tpu *TenderProfileUpdate) SetOwnerSituations(s string) *TenderProfileUpdate {
	tpu.mutation.SetOwnerSituations(s)
	return tpu
}

// SetNillableOwnerSituations sets the "owner_situations" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableOwnerSituations(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetOwnerSituations(*s)
	}
	return tpu
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (tpu *TenderProfileUpdate) ClearOwnerSituations() *TenderProfileUpdate {
	tpu.mutation.ClearOwnerSituations()
	return tpu
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (tpu *TenderProfileUpdate) SetBiddingInstructions(s string) *TenderProfileUpdate {
	tpu.mutation.SetBiddingInstructions(s)
	return tpu
}

// SetNillableBiddingInstructions sets the "bidding_instructions" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableBiddingInstructions(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetBiddingInstructions(*s)
	}
	return tpu
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (tpu *TenderProfileUpdate) ClearBiddingInstructions() *TenderProfileUpdate {
	tpu.mutation.ClearBiddingInstructions()
	return tpu
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (tpu *TenderProfileUpdate) SetCompetitorSituations(s string) *TenderProfileUpdate {
	tpu.mutation.SetCompetitorSituations(s)
	return tpu
}

// SetNillableCompetitorSituations sets the "competitor_situations" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCompetitorSituations(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCompetitorSituations(*s)
	}
	return tpu
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (tpu *TenderProfileUpdate) ClearCompetitorSituations() *TenderProfileUpdate {
	tpu.mutation.ClearCompetitorSituations()
	return tpu
}

// SetCostEngineer sets the "cost_engineer" field.
func (tpu *TenderProfileUpdate) SetCostEngineer(s string) *TenderProfileUpdate {
	tpu.mutation.SetCostEngineer(s)
	return tpu
}

// SetNillableCostEngineer sets the "cost_engineer" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCostEngineer(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCostEngineer(*s)
	}
	return tpu
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (tpu *TenderProfileUpdate) ClearCostEngineer() *TenderProfileUpdate {
	tpu.mutation.ClearCostEngineer()
	return tpu
}

// SetTenderForm sets the "tender_form" field.
func (tpu *TenderProfileUpdate) SetTenderForm(s string) *TenderProfileUpdate {
	tpu.mutation.SetTenderForm(s)
	return tpu
}

// SetNillableTenderForm sets the "tender_form" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderForm(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTenderForm(*s)
	}
	return tpu
}

// ClearTenderForm clears the value of the "tender_form" field.
func (tpu *TenderProfileUpdate) ClearTenderForm() *TenderProfileUpdate {
	tpu.mutation.ClearTenderForm()
	return tpu
}

// SetContractForm sets the "contract_form" field.
func (tpu *TenderProfileUpdate) SetContractForm(s string) *TenderProfileUpdate {
	tpu.mutation.SetContractForm(s)
	return tpu
}

// SetNillableContractForm sets the "contract_form" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableContractForm(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetContractForm(*s)
	}
	return tpu
}

// ClearContractForm clears the value of the "contract_form" field.
func (tpu *TenderProfileUpdate) ClearContractForm() *TenderProfileUpdate {
	tpu.mutation.ClearContractForm()
	return tpu
}

// SetManagementCompany sets the "management_company" field.
func (tpu *TenderProfileUpdate) SetManagementCompany(s string) *TenderProfileUpdate {
	tpu.mutation.SetManagementCompany(s)
	return tpu
}

// SetNillableManagementCompany sets the "management_company" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableManagementCompany(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetManagementCompany(*s)
	}
	return tpu
}

// ClearManagementCompany clears the value of the "management_company" field.
func (tpu *TenderProfileUpdate) ClearManagementCompany() *TenderProfileUpdate {
	tpu.mutation.ClearManagementCompany()
	return tpu
}

// SetTenderingAgency sets the "tendering_agency" field.
func (tpu *TenderProfileUpdate) SetTenderingAgency(s string) *TenderProfileUpdate {
	tpu.mutation.SetTenderingAgency(s)
	return tpu
}

// SetNillableTenderingAgency sets the "tendering_agency" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderingAgency(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTenderingAgency(*s)
	}
	return tpu
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (tpu *TenderProfileUpdate) ClearTenderingAgency() *TenderProfileUpdate {
	tpu.mutation.ClearTenderingAgency()
	return tpu
}

// SetBiddingDate sets the "bidding_date" field.
func (tpu *TenderProfileUpdate) SetBiddingDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetBiddingDate(t)
	return tpu
}

// SetNillableBiddingDate sets the "bidding_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableBiddingDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetBiddingDate(*t)
	}
	return tpu
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (tpu *TenderProfileUpdate) ClearBiddingDate() *TenderProfileUpdate {
	tpu.mutation.ClearBiddingDate()
	return tpu
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (tpu *TenderProfileUpdate) SetFacadeConsultant(s string) *TenderProfileUpdate {
	tpu.mutation.SetFacadeConsultant(s)
	return tpu
}

// SetNillableFacadeConsultant sets the "facade_consultant" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableFacadeConsultant(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetFacadeConsultant(*s)
	}
	return tpu
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (tpu *TenderProfileUpdate) ClearFacadeConsultant() *TenderProfileUpdate {
	tpu.mutation.ClearFacadeConsultant()
	return tpu
}

// SetDesignUnit sets the "design_unit" field.
func (tpu *TenderProfileUpdate) SetDesignUnit(s string) *TenderProfileUpdate {
	tpu.mutation.SetDesignUnit(s)
	return tpu
}

// SetNillableDesignUnit sets the "design_unit" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableDesignUnit(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetDesignUnit(*s)
	}
	return tpu
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (tpu *TenderProfileUpdate) ClearDesignUnit() *TenderProfileUpdate {
	tpu.mutation.ClearDesignUnit()
	return tpu
}

// SetConsultingFirm sets the "consulting_firm" field.
func (tpu *TenderProfileUpdate) SetConsultingFirm(s string) *TenderProfileUpdate {
	tpu.mutation.SetConsultingFirm(s)
	return tpu
}

// SetNillableConsultingFirm sets the "consulting_firm" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableConsultingFirm(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetConsultingFirm(*s)
	}
	return tpu
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (tpu *TenderProfileUpdate) ClearConsultingFirm() *TenderProfileUpdate {
	tpu.mutation.ClearConsultingFirm()
	return tpu
}

// SetKeyProject sets the "key_project" field.
func (tpu *TenderProfileUpdate) SetKeyProject(b bool) *TenderProfileUpdate {
	tpu.mutation.SetKeyProject(b)
	return tpu
}

// SetNillableKeyProject sets the "key_project" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableKeyProject(b *bool) *TenderProfileUpdate {
	if b != nil {
		tpu.SetKeyProject(*b)
	}
	return tpu
}

// SetCurrentProgress sets the "current_progress" field.
func (tpu *TenderProfileUpdate) SetCurrentProgress(s string) *TenderProfileUpdate {
	tpu.mutation.SetCurrentProgress(s)
	return tpu
}

// SetNillableCurrentProgress sets the "current_progress" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCurrentProgress(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetCurrentProgress(*s)
	}
	return tpu
}

// ClearCurrentProgress clears the value of the "current_progress" field.
func (tpu *TenderProfileUpdate) ClearCurrentProgress() *TenderProfileUpdate {
	tpu.mutation.ClearCurrentProgress()
	return tpu
}

// SetTenderWinCompany sets the "tender_win_company" field.
func (tpu *TenderProfileUpdate) SetTenderWinCompany(s string) *TenderProfileUpdate {
	tpu.mutation.SetTenderWinCompany(s)
	return tpu
}

// SetNillableTenderWinCompany sets the "tender_win_company" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderWinCompany(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTenderWinCompany(*s)
	}
	return tpu
}

// ClearTenderWinCompany clears the value of the "tender_win_company" field.
func (tpu *TenderProfileUpdate) ClearTenderWinCompany() *TenderProfileUpdate {
	tpu.mutation.ClearTenderWinCompany()
	return tpu
}

// SetTenderCode sets the "tender_code" field.
func (tpu *TenderProfileUpdate) SetTenderCode(s string) *TenderProfileUpdate {
	tpu.mutation.SetTenderCode(s)
	return tpu
}

// SetNillableTenderCode sets the "tender_code" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderCode(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetTenderCode(*s)
	}
	return tpu
}

// ClearTenderCode clears the value of the "tender_code" field.
func (tpu *TenderProfileUpdate) ClearTenderCode() *TenderProfileUpdate {
	tpu.mutation.ClearTenderCode()
	return tpu
}

// SetArchitect sets the "architect" field.
func (tpu *TenderProfileUpdate) SetArchitect(s string) *TenderProfileUpdate {
	tpu.mutation.SetArchitect(s)
	return tpu
}

// SetNillableArchitect sets the "architect" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableArchitect(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetArchitect(*s)
	}
	return tpu
}

// ClearArchitect clears the value of the "architect" field.
func (tpu *TenderProfileUpdate) ClearArchitect() *TenderProfileUpdate {
	tpu.mutation.ClearArchitect()
	return tpu
}

// SetDeveloper sets the "developer" field.
func (tpu *TenderProfileUpdate) SetDeveloper(s string) *TenderProfileUpdate {
	tpu.mutation.SetDeveloper(s)
	return tpu
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableDeveloper(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetDeveloper(*s)
	}
	return tpu
}

// ClearDeveloper clears the value of the "developer" field.
func (tpu *TenderProfileUpdate) ClearDeveloper() *TenderProfileUpdate {
	tpu.mutation.ClearDeveloper()
	return tpu
}

// SetTenderClosingDate sets the "tender_closing_date" field.
func (tpu *TenderProfileUpdate) SetTenderClosingDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetTenderClosingDate(t)
	return tpu
}

// SetNillableTenderClosingDate sets the "tender_closing_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderClosingDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetTenderClosingDate(*t)
	}
	return tpu
}

// ClearTenderClosingDate clears the value of the "tender_closing_date" field.
func (tpu *TenderProfileUpdate) ClearTenderClosingDate() *TenderProfileUpdate {
	tpu.mutation.ClearTenderClosingDate()
	return tpu
}

// SetConstructionArea sets the "construction_area" field.
func (tpu *TenderProfileUpdate) SetConstructionArea(s string) *TenderProfileUpdate {
	tpu.mutation.SetConstructionArea(s)
	return tpu
}

// SetNillableConstructionArea sets the "construction_area" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableConstructionArea(s *string) *TenderProfileUpdate {
	if s != nil {
		tpu.SetConstructionArea(*s)
	}
	return tpu
}

// ClearConstructionArea clears the value of the "construction_area" field.
func (tpu *TenderProfileUpdate) ClearConstructionArea() *TenderProfileUpdate {
	tpu.mutation.ClearConstructionArea()
	return tpu
}

// SetTenderWinDate sets the "tender_win_date" field.
func (tpu *TenderProfileUpdate) SetTenderWinDate(t time.Time) *TenderProfileUpdate {
	tpu.mutation.SetTenderWinDate(t)
	return tpu
}

// SetNillableTenderWinDate sets the "tender_win_date" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderWinDate(t *time.Time) *TenderProfileUpdate {
	if t != nil {
		tpu.SetTenderWinDate(*t)
	}
	return tpu
}

// ClearTenderWinDate clears the value of the "tender_win_date" field.
func (tpu *TenderProfileUpdate) ClearTenderWinDate() *TenderProfileUpdate {
	tpu.mutation.ClearTenderWinDate()
	return tpu
}

// SetTenderWinAmount sets the "tender_win_amount" field.
func (tpu *TenderProfileUpdate) SetTenderWinAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.ResetTenderWinAmount()
	tpu.mutation.SetTenderWinAmount(f)
	return tpu
}

// SetNillableTenderWinAmount sets the "tender_win_amount" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderWinAmount(f *float64) *TenderProfileUpdate {
	if f != nil {
		tpu.SetTenderWinAmount(*f)
	}
	return tpu
}

// AddTenderWinAmount adds f to the "tender_win_amount" field.
func (tpu *TenderProfileUpdate) AddTenderWinAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.AddTenderWinAmount(f)
	return tpu
}

// ClearTenderWinAmount clears the value of the "tender_win_amount" field.
func (tpu *TenderProfileUpdate) ClearTenderWinAmount() *TenderProfileUpdate {
	tpu.mutation.ClearTenderWinAmount()
	return tpu
}

// SetLastTenderAmount sets the "last_tender_amount" field.
func (tpu *TenderProfileUpdate) SetLastTenderAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.ResetLastTenderAmount()
	tpu.mutation.SetLastTenderAmount(f)
	return tpu
}

// SetNillableLastTenderAmount sets the "last_tender_amount" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableLastTenderAmount(f *float64) *TenderProfileUpdate {
	if f != nil {
		tpu.SetLastTenderAmount(*f)
	}
	return tpu
}

// AddLastTenderAmount adds f to the "last_tender_amount" field.
func (tpu *TenderProfileUpdate) AddLastTenderAmount(f float64) *TenderProfileUpdate {
	tpu.mutation.AddLastTenderAmount(f)
	return tpu
}

// ClearLastTenderAmount clears the value of the "last_tender_amount" field.
func (tpu *TenderProfileUpdate) ClearLastTenderAmount() *TenderProfileUpdate {
	tpu.mutation.ClearLastTenderAmount()
	return tpu
}

// SetTenderID sets the "tender_id" field.
func (tpu *TenderProfileUpdate) SetTenderID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetTenderID(x)
	return tpu
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableTenderID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetTenderID(*x)
	}
	return tpu
}

// SetProvinceID sets the "province_id" field.
func (tpu *TenderProfileUpdate) SetProvinceID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetProvinceID(x)
	return tpu
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableProvinceID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetProvinceID(*x)
	}
	return tpu
}

// ClearProvinceID clears the value of the "province_id" field.
func (tpu *TenderProfileUpdate) ClearProvinceID() *TenderProfileUpdate {
	tpu.mutation.ClearProvinceID()
	return tpu
}

// SetCityID sets the "city_id" field.
func (tpu *TenderProfileUpdate) SetCityID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetCityID(x)
	return tpu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCityID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetCityID(*x)
	}
	return tpu
}

// ClearCityID clears the value of the "city_id" field.
func (tpu *TenderProfileUpdate) ClearCityID() *TenderProfileUpdate {
	tpu.mutation.ClearCityID()
	return tpu
}

// SetDistrictID sets the "district_id" field.
func (tpu *TenderProfileUpdate) SetDistrictID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetDistrictID(x)
	return tpu
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableDistrictID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetDistrictID(*x)
	}
	return tpu
}

// ClearDistrictID clears the value of the "district_id" field.
func (tpu *TenderProfileUpdate) ClearDistrictID() *TenderProfileUpdate {
	tpu.mutation.ClearDistrictID()
	return tpu
}

// SetCustomerID sets the "customer_id" field.
func (tpu *TenderProfileUpdate) SetCustomerID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetCustomerID(x)
	return tpu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCustomerID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetCustomerID(*x)
	}
	return tpu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (tpu *TenderProfileUpdate) ClearCustomerID() *TenderProfileUpdate {
	tpu.mutation.ClearCustomerID()
	return tpu
}

// SetFinderID sets the "finder_id" field.
func (tpu *TenderProfileUpdate) SetFinderID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetFinderID(x)
	return tpu
}

// SetNillableFinderID sets the "finder_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableFinderID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetFinderID(*x)
	}
	return tpu
}

// ClearFinderID clears the value of the "finder_id" field.
func (tpu *TenderProfileUpdate) ClearFinderID() *TenderProfileUpdate {
	tpu.mutation.ClearFinderID()
	return tpu
}

// SetCreatedByID sets the "created_by_id" field.
func (tpu *TenderProfileUpdate) SetCreatedByID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetCreatedByID(x)
	return tpu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableCreatedByID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetCreatedByID(*x)
	}
	return tpu
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (tpu *TenderProfileUpdate) ClearCreatedByID() *TenderProfileUpdate {
	tpu.mutation.ClearCreatedByID()
	return tpu
}

// SetApproverID sets the "approver_id" field.
func (tpu *TenderProfileUpdate) SetApproverID(x xid.ID) *TenderProfileUpdate {
	tpu.mutation.SetApproverID(x)
	return tpu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (tpu *TenderProfileUpdate) SetNillableApproverID(x *xid.ID) *TenderProfileUpdate {
	if x != nil {
		tpu.SetApproverID(*x)
	}
	return tpu
}

// ClearApproverID clears the value of the "approver_id" field.
func (tpu *TenderProfileUpdate) ClearApproverID() *TenderProfileUpdate {
	tpu.mutation.ClearApproverID()
	return tpu
}

// SetTender sets the "tender" edge to the Tender entity.
func (tpu *TenderProfileUpdate) SetTender(t *Tender) *TenderProfileUpdate {
	return tpu.SetTenderID(t.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tpu *TenderProfileUpdate) SetCustomer(c *Customer) *TenderProfileUpdate {
	return tpu.SetCustomerID(c.ID)
}

// SetFinder sets the "finder" edge to the User entity.
func (tpu *TenderProfileUpdate) SetFinder(u *User) *TenderProfileUpdate {
	return tpu.SetFinderID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tpu *TenderProfileUpdate) SetCreatedBy(u *User) *TenderProfileUpdate {
	return tpu.SetCreatedByID(u.ID)
}

// SetProvince sets the "province" edge to the Province entity.
func (tpu *TenderProfileUpdate) SetProvince(p *Province) *TenderProfileUpdate {
	return tpu.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tpu *TenderProfileUpdate) SetCity(c *City) *TenderProfileUpdate {
	return tpu.SetCityID(c.ID)
}

// SetDistrict sets the "district" edge to the District entity.
func (tpu *TenderProfileUpdate) SetDistrict(d *District) *TenderProfileUpdate {
	return tpu.SetDistrictID(d.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (tpu *TenderProfileUpdate) SetApprover(u *User) *TenderProfileUpdate {
	return tpu.SetApproverID(u.ID)
}

// Mutation returns the TenderProfileMutation object of the builder.
func (tpu *TenderProfileUpdate) Mutation() *TenderProfileMutation {
	return tpu.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (tpu *TenderProfileUpdate) ClearTender() *TenderProfileUpdate {
	tpu.mutation.ClearTender()
	return tpu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (tpu *TenderProfileUpdate) ClearCustomer() *TenderProfileUpdate {
	tpu.mutation.ClearCustomer()
	return tpu
}

// ClearFinder clears the "finder" edge to the User entity.
func (tpu *TenderProfileUpdate) ClearFinder() *TenderProfileUpdate {
	tpu.mutation.ClearFinder()
	return tpu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tpu *TenderProfileUpdate) ClearCreatedBy() *TenderProfileUpdate {
	tpu.mutation.ClearCreatedBy()
	return tpu
}

// ClearProvince clears the "province" edge to the Province entity.
func (tpu *TenderProfileUpdate) ClearProvince() *TenderProfileUpdate {
	tpu.mutation.ClearProvince()
	return tpu
}

// ClearCity clears the "city" edge to the City entity.
func (tpu *TenderProfileUpdate) ClearCity() *TenderProfileUpdate {
	tpu.mutation.ClearCity()
	return tpu
}

// ClearDistrict clears the "district" edge to the District entity.
func (tpu *TenderProfileUpdate) ClearDistrict() *TenderProfileUpdate {
	tpu.mutation.ClearDistrict()
	return tpu
}

// ClearApprover clears the "approver" edge to the User entity.
func (tpu *TenderProfileUpdate) ClearApprover() *TenderProfileUpdate {
	tpu.mutation.ClearApprover()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TenderProfileUpdate) Save(ctx context.Context) (int, error) {
	tpu.defaults()
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TenderProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TenderProfileUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TenderProfileUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *TenderProfileUpdate) defaults() {
	if _, ok := tpu.mutation.UpdatedAt(); !ok {
		v := tenderprofile.UpdateDefaultUpdatedAt()
		tpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TenderProfileUpdate) check() error {
	if v, ok := tpu.mutation.ApprovalStatus(); ok {
		if err := tenderprofile.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.approval_status": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.Name(); ok {
		if err := tenderprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.name": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.Classify(); ok {
		if err := tenderprofile.ClassifyValidator(v); err != nil {
			return &ValidationError{Name: "classify", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.classify": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.LevelInvolved(); ok {
		if err := tenderprofile.LevelInvolvedValidator(v); err != nil {
			return &ValidationError{Name: "level_involved", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.level_involved": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.SizeAndValueRating(); ok {
		if err := tenderprofile.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.CreditAndPaymentRating(); ok {
		if err := tenderprofile.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.TimeLimitRating(); ok {
		if err := tenderprofile.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.CustomerRelationshipRating(); ok {
		if err := tenderprofile.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.CompetitivePartnershipRating(); ok {
		if err := tenderprofile.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.competitive_partnership_rating": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.TenderWinAmount(); ok {
		if err := tenderprofile.TenderWinAmountValidator(v); err != nil {
			return &ValidationError{Name: "tender_win_amount", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.tender_win_amount": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.LastTenderAmount(); ok {
		if err := tenderprofile.LastTenderAmountValidator(v); err != nil {
			return &ValidationError{Name: "last_tender_amount", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.last_tender_amount": %w`, err)}
		}
	}
	if tpu.mutation.TenderCleared() && len(tpu.mutation.TenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderProfile.tender"`)
	}
	return nil
}

func (tpu *TenderProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenderprofile.Table, tenderprofile.Columns, sqlgraph.NewFieldSpec(tenderprofile.FieldID, field.TypeString))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenderprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tpu.mutation.Status(); ok {
		_spec.SetField(tenderprofile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedStatus(); ok {
		_spec.AddField(tenderprofile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.ApprovalStatus(); ok {
		_spec.SetField(tenderprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(tenderprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.ApprovalMsgID(); ok {
		_spec.SetField(tenderprofile.FieldApprovalMsgID, field.TypeString, value)
	}
	if tpu.mutation.ApprovalMsgIDCleared() {
		_spec.ClearField(tenderprofile.FieldApprovalMsgID, field.TypeString)
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.SetField(tenderprofile.FieldName, field.TypeString, value)
	}
	if tpu.mutation.NameCleared() {
		_spec.ClearField(tenderprofile.FieldName, field.TypeString)
	}
	if value, ok := tpu.mutation.EstimatedAmount(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if value, ok := tpu.mutation.AddedEstimatedAmount(); ok {
		_spec.AddField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if tpu.mutation.EstimatedAmountCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64)
	}
	if value, ok := tpu.mutation.TenderDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderDate, field.TypeTime, value)
	}
	if tpu.mutation.TenderDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.Classify(); ok {
		_spec.SetField(tenderprofile.FieldClassify, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedClassify(); ok {
		_spec.AddField(tenderprofile.FieldClassify, field.TypeInt, value)
	}
	if tpu.mutation.ClassifyCleared() {
		_spec.ClearField(tenderprofile.FieldClassify, field.TypeInt)
	}
	if value, ok := tpu.mutation.DiscoveryDate(); ok {
		_spec.SetField(tenderprofile.FieldDiscoveryDate, field.TypeTime, value)
	}
	if tpu.mutation.DiscoveryDateCleared() {
		_spec.ClearField(tenderprofile.FieldDiscoveryDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.Address(); ok {
		_spec.SetField(tenderprofile.FieldAddress, field.TypeString, value)
	}
	if tpu.mutation.AddressCleared() {
		_spec.ClearField(tenderprofile.FieldAddress, field.TypeString)
	}
	if value, ok := tpu.mutation.FullAddress(); ok {
		_spec.SetField(tenderprofile.FieldFullAddress, field.TypeString, value)
	}
	if tpu.mutation.FullAddressCleared() {
		_spec.ClearField(tenderprofile.FieldFullAddress, field.TypeString)
	}
	if value, ok := tpu.mutation.Contractor(); ok {
		_spec.SetField(tenderprofile.FieldContractor, field.TypeString, value)
	}
	if tpu.mutation.ContractorCleared() {
		_spec.ClearField(tenderprofile.FieldContractor, field.TypeString)
	}
	if value, ok := tpu.mutation.LevelInvolved(); ok {
		_spec.SetField(tenderprofile.FieldLevelInvolved, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedLevelInvolved(); ok {
		_spec.AddField(tenderprofile.FieldLevelInvolved, field.TypeInt, value)
	}
	if tpu.mutation.LevelInvolvedCleared() {
		_spec.ClearField(tenderprofile.FieldLevelInvolved, field.TypeInt)
	}
	if value, ok := tpu.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tenderprofile.FieldSizeAndValueRating, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedSizeAndValueRating(); ok {
		_spec.AddField(tenderprofile.FieldSizeAndValueRating, field.TypeInt, value)
	}
	if tpu.mutation.SizeAndValueRatingCleared() {
		_spec.ClearField(tenderprofile.FieldSizeAndValueRating, field.TypeInt)
	}
	if value, ok := tpu.mutation.SizeAndValueRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldSizeAndValueRatingOverview, field.TypeString, value)
	}
	if tpu.mutation.SizeAndValueRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldSizeAndValueRatingOverview, field.TypeString)
	}
	if value, ok := tpu.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedCreditAndPaymentRating(); ok {
		_spec.AddField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt, value)
	}
	if tpu.mutation.CreditAndPaymentRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt)
	}
	if value, ok := tpu.mutation.CreditAndPaymentRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCreditAndPaymentRatingOverview, field.TypeString, value)
	}
	if tpu.mutation.CreditAndPaymentRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCreditAndPaymentRatingOverview, field.TypeString)
	}
	if value, ok := tpu.mutation.TimeLimitRating(); ok {
		_spec.SetField(tenderprofile.FieldTimeLimitRating, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedTimeLimitRating(); ok {
		_spec.AddField(tenderprofile.FieldTimeLimitRating, field.TypeInt, value)
	}
	if tpu.mutation.TimeLimitRatingCleared() {
		_spec.ClearField(tenderprofile.FieldTimeLimitRating, field.TypeInt)
	}
	if value, ok := tpu.mutation.TimeLimitRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldTimeLimitRatingOverview, field.TypeString, value)
	}
	if tpu.mutation.TimeLimitRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldTimeLimitRatingOverview, field.TypeString)
	}
	if value, ok := tpu.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedCustomerRelationshipRating(); ok {
		_spec.AddField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt, value)
	}
	if tpu.mutation.CustomerRelationshipRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt)
	}
	if value, ok := tpu.mutation.CustomerRelationshipRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCustomerRelationshipRatingOverview, field.TypeString, value)
	}
	if tpu.mutation.CustomerRelationshipRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCustomerRelationshipRatingOverview, field.TypeString)
	}
	if value, ok := tpu.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedCompetitivePartnershipRating(); ok {
		_spec.AddField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt, value)
	}
	if tpu.mutation.CompetitivePartnershipRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt)
	}
	if value, ok := tpu.mutation.CompetitivePartnershipRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCompetitivePartnershipRatingOverview, field.TypeString, value)
	}
	if tpu.mutation.CompetitivePartnershipRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitivePartnershipRatingOverview, field.TypeString)
	}
	if value, ok := tpu.mutation.PrepareToBid(); ok {
		_spec.SetField(tenderprofile.FieldPrepareToBid, field.TypeBool, value)
	}
	if value, ok := tpu.mutation.ProjectCode(); ok {
		_spec.SetField(tenderprofile.FieldProjectCode, field.TypeString, value)
	}
	if tpu.mutation.ProjectCodeCleared() {
		_spec.ClearField(tenderprofile.FieldProjectCode, field.TypeString)
	}
	if value, ok := tpu.mutation.ProjectType(); ok {
		_spec.SetField(tenderprofile.FieldProjectType, field.TypeString, value)
	}
	if tpu.mutation.ProjectTypeCleared() {
		_spec.ClearField(tenderprofile.FieldProjectType, field.TypeString)
	}
	if value, ok := tpu.mutation.ProjectDefinition(); ok {
		_spec.SetField(tenderprofile.FieldProjectDefinition, field.TypeString, value)
	}
	if tpu.mutation.ProjectDefinitionCleared() {
		_spec.ClearField(tenderprofile.FieldProjectDefinition, field.TypeString)
	}
	if value, ok := tpu.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedProjectStartDate, field.TypeTime, value)
	}
	if tpu.mutation.EstimatedProjectStartDateCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedProjectStartDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedProjectEndDate, field.TypeTime, value)
	}
	if tpu.mutation.EstimatedProjectEndDateCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedProjectEndDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.Attachments(); ok {
		_spec.SetField(tenderprofile.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := tpu.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldAttachments, value)
		})
	}
	if tpu.mutation.AttachmentsCleared() {
		_spec.ClearField(tenderprofile.FieldAttachments, field.TypeJSON)
	}
	if value, ok := tpu.mutation.GeoCoordinate(); ok {
		_spec.SetField(tenderprofile.FieldGeoCoordinate, field.TypeJSON, value)
	}
	if value, ok := tpu.mutation.AppendedGeoCoordinate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldGeoCoordinate, value)
		})
	}
	if tpu.mutation.GeoCoordinateCleared() {
		_spec.ClearField(tenderprofile.FieldGeoCoordinate, field.TypeJSON)
	}
	if value, ok := tpu.mutation.GeoBounds(); ok {
		_spec.SetField(tenderprofile.FieldGeoBounds, field.TypeJSON, value)
	}
	if value, ok := tpu.mutation.AppendedGeoBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldGeoBounds, value)
		})
	}
	if tpu.mutation.GeoBoundsCleared() {
		_spec.ClearField(tenderprofile.FieldGeoBounds, field.TypeJSON)
	}
	if value, ok := tpu.mutation.Remark(); ok {
		_spec.SetField(tenderprofile.FieldRemark, field.TypeString, value)
	}
	if tpu.mutation.RemarkCleared() {
		_spec.ClearField(tenderprofile.FieldRemark, field.TypeString)
	}
	if value, ok := tpu.mutation.Images(); ok {
		_spec.SetField(tenderprofile.FieldImages, field.TypeJSON, value)
	}
	if value, ok := tpu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldImages, value)
		})
	}
	if tpu.mutation.ImagesCleared() {
		_spec.ClearField(tenderprofile.FieldImages, field.TypeJSON)
	}
	if value, ok := tpu.mutation.TenderSituations(); ok {
		_spec.SetField(tenderprofile.FieldTenderSituations, field.TypeString, value)
	}
	if tpu.mutation.TenderSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldTenderSituations, field.TypeString)
	}
	if value, ok := tpu.mutation.OwnerSituations(); ok {
		_spec.SetField(tenderprofile.FieldOwnerSituations, field.TypeString, value)
	}
	if tpu.mutation.OwnerSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldOwnerSituations, field.TypeString)
	}
	if value, ok := tpu.mutation.BiddingInstructions(); ok {
		_spec.SetField(tenderprofile.FieldBiddingInstructions, field.TypeString, value)
	}
	if tpu.mutation.BiddingInstructionsCleared() {
		_spec.ClearField(tenderprofile.FieldBiddingInstructions, field.TypeString)
	}
	if value, ok := tpu.mutation.CompetitorSituations(); ok {
		_spec.SetField(tenderprofile.FieldCompetitorSituations, field.TypeString, value)
	}
	if tpu.mutation.CompetitorSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitorSituations, field.TypeString)
	}
	if value, ok := tpu.mutation.CostEngineer(); ok {
		_spec.SetField(tenderprofile.FieldCostEngineer, field.TypeString, value)
	}
	if tpu.mutation.CostEngineerCleared() {
		_spec.ClearField(tenderprofile.FieldCostEngineer, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderForm(); ok {
		_spec.SetField(tenderprofile.FieldTenderForm, field.TypeString, value)
	}
	if tpu.mutation.TenderFormCleared() {
		_spec.ClearField(tenderprofile.FieldTenderForm, field.TypeString)
	}
	if value, ok := tpu.mutation.ContractForm(); ok {
		_spec.SetField(tenderprofile.FieldContractForm, field.TypeString, value)
	}
	if tpu.mutation.ContractFormCleared() {
		_spec.ClearField(tenderprofile.FieldContractForm, field.TypeString)
	}
	if value, ok := tpu.mutation.ManagementCompany(); ok {
		_spec.SetField(tenderprofile.FieldManagementCompany, field.TypeString, value)
	}
	if tpu.mutation.ManagementCompanyCleared() {
		_spec.ClearField(tenderprofile.FieldManagementCompany, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderingAgency(); ok {
		_spec.SetField(tenderprofile.FieldTenderingAgency, field.TypeString, value)
	}
	if tpu.mutation.TenderingAgencyCleared() {
		_spec.ClearField(tenderprofile.FieldTenderingAgency, field.TypeString)
	}
	if value, ok := tpu.mutation.BiddingDate(); ok {
		_spec.SetField(tenderprofile.FieldBiddingDate, field.TypeTime, value)
	}
	if tpu.mutation.BiddingDateCleared() {
		_spec.ClearField(tenderprofile.FieldBiddingDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.FacadeConsultant(); ok {
		_spec.SetField(tenderprofile.FieldFacadeConsultant, field.TypeString, value)
	}
	if tpu.mutation.FacadeConsultantCleared() {
		_spec.ClearField(tenderprofile.FieldFacadeConsultant, field.TypeString)
	}
	if value, ok := tpu.mutation.DesignUnit(); ok {
		_spec.SetField(tenderprofile.FieldDesignUnit, field.TypeString, value)
	}
	if tpu.mutation.DesignUnitCleared() {
		_spec.ClearField(tenderprofile.FieldDesignUnit, field.TypeString)
	}
	if value, ok := tpu.mutation.ConsultingFirm(); ok {
		_spec.SetField(tenderprofile.FieldConsultingFirm, field.TypeString, value)
	}
	if tpu.mutation.ConsultingFirmCleared() {
		_spec.ClearField(tenderprofile.FieldConsultingFirm, field.TypeString)
	}
	if value, ok := tpu.mutation.KeyProject(); ok {
		_spec.SetField(tenderprofile.FieldKeyProject, field.TypeBool, value)
	}
	if value, ok := tpu.mutation.CurrentProgress(); ok {
		_spec.SetField(tenderprofile.FieldCurrentProgress, field.TypeString, value)
	}
	if tpu.mutation.CurrentProgressCleared() {
		_spec.ClearField(tenderprofile.FieldCurrentProgress, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderWinCompany(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinCompany, field.TypeString, value)
	}
	if tpu.mutation.TenderWinCompanyCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinCompany, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderCode(); ok {
		_spec.SetField(tenderprofile.FieldTenderCode, field.TypeString, value)
	}
	if tpu.mutation.TenderCodeCleared() {
		_spec.ClearField(tenderprofile.FieldTenderCode, field.TypeString)
	}
	if value, ok := tpu.mutation.Architect(); ok {
		_spec.SetField(tenderprofile.FieldArchitect, field.TypeString, value)
	}
	if tpu.mutation.ArchitectCleared() {
		_spec.ClearField(tenderprofile.FieldArchitect, field.TypeString)
	}
	if value, ok := tpu.mutation.Developer(); ok {
		_spec.SetField(tenderprofile.FieldDeveloper, field.TypeString, value)
	}
	if tpu.mutation.DeveloperCleared() {
		_spec.ClearField(tenderprofile.FieldDeveloper, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderClosingDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderClosingDate, field.TypeTime, value)
	}
	if tpu.mutation.TenderClosingDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderClosingDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.ConstructionArea(); ok {
		_spec.SetField(tenderprofile.FieldConstructionArea, field.TypeString, value)
	}
	if tpu.mutation.ConstructionAreaCleared() {
		_spec.ClearField(tenderprofile.FieldConstructionArea, field.TypeString)
	}
	if value, ok := tpu.mutation.TenderWinDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinDate, field.TypeTime, value)
	}
	if tpu.mutation.TenderWinDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinDate, field.TypeTime)
	}
	if value, ok := tpu.mutation.TenderWinAmount(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64, value)
	}
	if value, ok := tpu.mutation.AddedTenderWinAmount(); ok {
		_spec.AddField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64, value)
	}
	if tpu.mutation.TenderWinAmountCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64)
	}
	if value, ok := tpu.mutation.LastTenderAmount(); ok {
		_spec.SetField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64, value)
	}
	if value, ok := tpu.mutation.AddedLastTenderAmount(); ok {
		_spec.AddField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64, value)
	}
	if tpu.mutation.LastTenderAmountCleared() {
		_spec.ClearField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64)
	}
	if tpu.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenderprofile.TenderTable,
			Columns: []string{tenderprofile.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenderprofile.TenderTable,
			Columns: []string{tenderprofile.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CustomerTable,
			Columns: []string{tenderprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CustomerTable,
			Columns: []string{tenderprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.FinderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.FinderTable,
			Columns: []string{tenderprofile.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.FinderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.FinderTable,
			Columns: []string{tenderprofile.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CreatedByTable,
			Columns: []string{tenderprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CreatedByTable,
			Columns: []string{tenderprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ProvinceTable,
			Columns: []string{tenderprofile.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ProvinceTable,
			Columns: []string{tenderprofile.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CityTable,
			Columns: []string{tenderprofile.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CityTable,
			Columns: []string{tenderprofile.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.DistrictTable,
			Columns: []string{tenderprofile.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.DistrictTable,
			Columns: []string{tenderprofile.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ApproverTable,
			Columns: []string{tenderprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ApproverTable,
			Columns: []string{tenderprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenderprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TenderProfileUpdateOne is the builder for updating a single TenderProfile entity.
type TenderProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenderProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tpuo *TenderProfileUpdateOne) SetUpdatedAt(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetUpdatedAt(t)
	return tpuo
}

// SetStatus sets the "status" field.
func (tpuo *TenderProfileUpdateOne) SetStatus(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetStatus()
	tpuo.mutation.SetStatus(i)
	return tpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableStatus(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetStatus(*i)
	}
	return tpuo
}

// AddStatus adds i to the "status" field.
func (tpuo *TenderProfileUpdateOne) AddStatus(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddStatus(i)
	return tpuo
}

// SetApprovalStatus sets the "approval_status" field.
func (tpuo *TenderProfileUpdateOne) SetApprovalStatus(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetApprovalStatus()
	tpuo.mutation.SetApprovalStatus(i)
	return tpuo
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableApprovalStatus(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetApprovalStatus(*i)
	}
	return tpuo
}

// AddApprovalStatus adds i to the "approval_status" field.
func (tpuo *TenderProfileUpdateOne) AddApprovalStatus(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddApprovalStatus(i)
	return tpuo
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (tpuo *TenderProfileUpdateOne) SetApprovalMsgID(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetApprovalMsgID(s)
	return tpuo
}

// SetNillableApprovalMsgID sets the "approval_msg_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableApprovalMsgID(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetApprovalMsgID(*s)
	}
	return tpuo
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (tpuo *TenderProfileUpdateOne) ClearApprovalMsgID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearApprovalMsgID()
	return tpuo
}

// SetName sets the "name" field.
func (tpuo *TenderProfileUpdateOne) SetName(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableName(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetName(*s)
	}
	return tpuo
}

// ClearName clears the value of the "name" field.
func (tpuo *TenderProfileUpdateOne) ClearName() *TenderProfileUpdateOne {
	tpuo.mutation.ClearName()
	return tpuo
}

// SetEstimatedAmount sets the "estimated_amount" field.
func (tpuo *TenderProfileUpdateOne) SetEstimatedAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.ResetEstimatedAmount()
	tpuo.mutation.SetEstimatedAmount(f)
	return tpuo
}

// SetNillableEstimatedAmount sets the "estimated_amount" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableEstimatedAmount(f *float64) *TenderProfileUpdateOne {
	if f != nil {
		tpuo.SetEstimatedAmount(*f)
	}
	return tpuo
}

// AddEstimatedAmount adds f to the "estimated_amount" field.
func (tpuo *TenderProfileUpdateOne) AddEstimatedAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.AddEstimatedAmount(f)
	return tpuo
}

// ClearEstimatedAmount clears the value of the "estimated_amount" field.
func (tpuo *TenderProfileUpdateOne) ClearEstimatedAmount() *TenderProfileUpdateOne {
	tpuo.mutation.ClearEstimatedAmount()
	return tpuo
}

// SetTenderDate sets the "tender_date" field.
func (tpuo *TenderProfileUpdateOne) SetTenderDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderDate(t)
	return tpuo
}

// SetNillableTenderDate sets the "tender_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetTenderDate(*t)
	}
	return tpuo
}

// ClearTenderDate clears the value of the "tender_date" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderDate()
	return tpuo
}

// SetClassify sets the "classify" field.
func (tpuo *TenderProfileUpdateOne) SetClassify(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetClassify()
	tpuo.mutation.SetClassify(i)
	return tpuo
}

// SetNillableClassify sets the "classify" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableClassify(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetClassify(*i)
	}
	return tpuo
}

// AddClassify adds i to the "classify" field.
func (tpuo *TenderProfileUpdateOne) AddClassify(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddClassify(i)
	return tpuo
}

// ClearClassify clears the value of the "classify" field.
func (tpuo *TenderProfileUpdateOne) ClearClassify() *TenderProfileUpdateOne {
	tpuo.mutation.ClearClassify()
	return tpuo
}

// SetDiscoveryDate sets the "discovery_date" field.
func (tpuo *TenderProfileUpdateOne) SetDiscoveryDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetDiscoveryDate(t)
	return tpuo
}

// SetNillableDiscoveryDate sets the "discovery_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableDiscoveryDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetDiscoveryDate(*t)
	}
	return tpuo
}

// ClearDiscoveryDate clears the value of the "discovery_date" field.
func (tpuo *TenderProfileUpdateOne) ClearDiscoveryDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearDiscoveryDate()
	return tpuo
}

// SetAddress sets the "address" field.
func (tpuo *TenderProfileUpdateOne) SetAddress(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetAddress(s)
	return tpuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableAddress(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetAddress(*s)
	}
	return tpuo
}

// ClearAddress clears the value of the "address" field.
func (tpuo *TenderProfileUpdateOne) ClearAddress() *TenderProfileUpdateOne {
	tpuo.mutation.ClearAddress()
	return tpuo
}

// SetFullAddress sets the "full_address" field.
func (tpuo *TenderProfileUpdateOne) SetFullAddress(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetFullAddress(s)
	return tpuo
}

// SetNillableFullAddress sets the "full_address" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableFullAddress(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetFullAddress(*s)
	}
	return tpuo
}

// ClearFullAddress clears the value of the "full_address" field.
func (tpuo *TenderProfileUpdateOne) ClearFullAddress() *TenderProfileUpdateOne {
	tpuo.mutation.ClearFullAddress()
	return tpuo
}

// SetContractor sets the "contractor" field.
func (tpuo *TenderProfileUpdateOne) SetContractor(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetContractor(s)
	return tpuo
}

// SetNillableContractor sets the "contractor" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableContractor(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetContractor(*s)
	}
	return tpuo
}

// ClearContractor clears the value of the "contractor" field.
func (tpuo *TenderProfileUpdateOne) ClearContractor() *TenderProfileUpdateOne {
	tpuo.mutation.ClearContractor()
	return tpuo
}

// SetLevelInvolved sets the "level_involved" field.
func (tpuo *TenderProfileUpdateOne) SetLevelInvolved(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetLevelInvolved()
	tpuo.mutation.SetLevelInvolved(i)
	return tpuo
}

// SetNillableLevelInvolved sets the "level_involved" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableLevelInvolved(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetLevelInvolved(*i)
	}
	return tpuo
}

// AddLevelInvolved adds i to the "level_involved" field.
func (tpuo *TenderProfileUpdateOne) AddLevelInvolved(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddLevelInvolved(i)
	return tpuo
}

// ClearLevelInvolved clears the value of the "level_involved" field.
func (tpuo *TenderProfileUpdateOne) ClearLevelInvolved() *TenderProfileUpdateOne {
	tpuo.mutation.ClearLevelInvolved()
	return tpuo
}

// SetSizeAndValueRating sets the "size_and_value_rating" field.
func (tpuo *TenderProfileUpdateOne) SetSizeAndValueRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetSizeAndValueRating()
	tpuo.mutation.SetSizeAndValueRating(i)
	return tpuo
}

// SetNillableSizeAndValueRating sets the "size_and_value_rating" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableSizeAndValueRating(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetSizeAndValueRating(*i)
	}
	return tpuo
}

// AddSizeAndValueRating adds i to the "size_and_value_rating" field.
func (tpuo *TenderProfileUpdateOne) AddSizeAndValueRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddSizeAndValueRating(i)
	return tpuo
}

// ClearSizeAndValueRating clears the value of the "size_and_value_rating" field.
func (tpuo *TenderProfileUpdateOne) ClearSizeAndValueRating() *TenderProfileUpdateOne {
	tpuo.mutation.ClearSizeAndValueRating()
	return tpuo
}

// SetSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) SetSizeAndValueRatingOverview(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetSizeAndValueRatingOverview(s)
	return tpuo
}

// SetNillableSizeAndValueRatingOverview sets the "size_and_value_rating_overview" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableSizeAndValueRatingOverview(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetSizeAndValueRatingOverview(*s)
	}
	return tpuo
}

// ClearSizeAndValueRatingOverview clears the value of the "size_and_value_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) ClearSizeAndValueRatingOverview() *TenderProfileUpdateOne {
	tpuo.mutation.ClearSizeAndValueRatingOverview()
	return tpuo
}

// SetCreditAndPaymentRating sets the "credit_and_payment_rating" field.
func (tpuo *TenderProfileUpdateOne) SetCreditAndPaymentRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetCreditAndPaymentRating()
	tpuo.mutation.SetCreditAndPaymentRating(i)
	return tpuo
}

// SetNillableCreditAndPaymentRating sets the "credit_and_payment_rating" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCreditAndPaymentRating(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetCreditAndPaymentRating(*i)
	}
	return tpuo
}

// AddCreditAndPaymentRating adds i to the "credit_and_payment_rating" field.
func (tpuo *TenderProfileUpdateOne) AddCreditAndPaymentRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddCreditAndPaymentRating(i)
	return tpuo
}

// ClearCreditAndPaymentRating clears the value of the "credit_and_payment_rating" field.
func (tpuo *TenderProfileUpdateOne) ClearCreditAndPaymentRating() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCreditAndPaymentRating()
	return tpuo
}

// SetCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) SetCreditAndPaymentRatingOverview(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCreditAndPaymentRatingOverview(s)
	return tpuo
}

// SetNillableCreditAndPaymentRatingOverview sets the "credit_and_payment_rating_overview" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCreditAndPaymentRatingOverview(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCreditAndPaymentRatingOverview(*s)
	}
	return tpuo
}

// ClearCreditAndPaymentRatingOverview clears the value of the "credit_and_payment_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) ClearCreditAndPaymentRatingOverview() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCreditAndPaymentRatingOverview()
	return tpuo
}

// SetTimeLimitRating sets the "time_limit_rating" field.
func (tpuo *TenderProfileUpdateOne) SetTimeLimitRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetTimeLimitRating()
	tpuo.mutation.SetTimeLimitRating(i)
	return tpuo
}

// SetNillableTimeLimitRating sets the "time_limit_rating" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTimeLimitRating(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetTimeLimitRating(*i)
	}
	return tpuo
}

// AddTimeLimitRating adds i to the "time_limit_rating" field.
func (tpuo *TenderProfileUpdateOne) AddTimeLimitRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddTimeLimitRating(i)
	return tpuo
}

// ClearTimeLimitRating clears the value of the "time_limit_rating" field.
func (tpuo *TenderProfileUpdateOne) ClearTimeLimitRating() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTimeLimitRating()
	return tpuo
}

// SetTimeLimitRatingOverview sets the "time_limit_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) SetTimeLimitRatingOverview(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTimeLimitRatingOverview(s)
	return tpuo
}

// SetNillableTimeLimitRatingOverview sets the "time_limit_rating_overview" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTimeLimitRatingOverview(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTimeLimitRatingOverview(*s)
	}
	return tpuo
}

// ClearTimeLimitRatingOverview clears the value of the "time_limit_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) ClearTimeLimitRatingOverview() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTimeLimitRatingOverview()
	return tpuo
}

// SetCustomerRelationshipRating sets the "customer_relationship_rating" field.
func (tpuo *TenderProfileUpdateOne) SetCustomerRelationshipRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetCustomerRelationshipRating()
	tpuo.mutation.SetCustomerRelationshipRating(i)
	return tpuo
}

// SetNillableCustomerRelationshipRating sets the "customer_relationship_rating" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCustomerRelationshipRating(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetCustomerRelationshipRating(*i)
	}
	return tpuo
}

// AddCustomerRelationshipRating adds i to the "customer_relationship_rating" field.
func (tpuo *TenderProfileUpdateOne) AddCustomerRelationshipRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddCustomerRelationshipRating(i)
	return tpuo
}

// ClearCustomerRelationshipRating clears the value of the "customer_relationship_rating" field.
func (tpuo *TenderProfileUpdateOne) ClearCustomerRelationshipRating() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCustomerRelationshipRating()
	return tpuo
}

// SetCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) SetCustomerRelationshipRatingOverview(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCustomerRelationshipRatingOverview(s)
	return tpuo
}

// SetNillableCustomerRelationshipRatingOverview sets the "customer_relationship_rating_overview" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCustomerRelationshipRatingOverview(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCustomerRelationshipRatingOverview(*s)
	}
	return tpuo
}

// ClearCustomerRelationshipRatingOverview clears the value of the "customer_relationship_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) ClearCustomerRelationshipRatingOverview() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCustomerRelationshipRatingOverview()
	return tpuo
}

// SetCompetitivePartnershipRating sets the "competitive_partnership_rating" field.
func (tpuo *TenderProfileUpdateOne) SetCompetitivePartnershipRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.ResetCompetitivePartnershipRating()
	tpuo.mutation.SetCompetitivePartnershipRating(i)
	return tpuo
}

// SetNillableCompetitivePartnershipRating sets the "competitive_partnership_rating" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCompetitivePartnershipRating(i *int) *TenderProfileUpdateOne {
	if i != nil {
		tpuo.SetCompetitivePartnershipRating(*i)
	}
	return tpuo
}

// AddCompetitivePartnershipRating adds i to the "competitive_partnership_rating" field.
func (tpuo *TenderProfileUpdateOne) AddCompetitivePartnershipRating(i int) *TenderProfileUpdateOne {
	tpuo.mutation.AddCompetitivePartnershipRating(i)
	return tpuo
}

// ClearCompetitivePartnershipRating clears the value of the "competitive_partnership_rating" field.
func (tpuo *TenderProfileUpdateOne) ClearCompetitivePartnershipRating() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCompetitivePartnershipRating()
	return tpuo
}

// SetCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) SetCompetitivePartnershipRatingOverview(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCompetitivePartnershipRatingOverview(s)
	return tpuo
}

// SetNillableCompetitivePartnershipRatingOverview sets the "competitive_partnership_rating_overview" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCompetitivePartnershipRatingOverview(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCompetitivePartnershipRatingOverview(*s)
	}
	return tpuo
}

// ClearCompetitivePartnershipRatingOverview clears the value of the "competitive_partnership_rating_overview" field.
func (tpuo *TenderProfileUpdateOne) ClearCompetitivePartnershipRatingOverview() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCompetitivePartnershipRatingOverview()
	return tpuo
}

// SetPrepareToBid sets the "prepare_to_bid" field.
func (tpuo *TenderProfileUpdateOne) SetPrepareToBid(b bool) *TenderProfileUpdateOne {
	tpuo.mutation.SetPrepareToBid(b)
	return tpuo
}

// SetNillablePrepareToBid sets the "prepare_to_bid" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillablePrepareToBid(b *bool) *TenderProfileUpdateOne {
	if b != nil {
		tpuo.SetPrepareToBid(*b)
	}
	return tpuo
}

// SetProjectCode sets the "project_code" field.
func (tpuo *TenderProfileUpdateOne) SetProjectCode(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetProjectCode(s)
	return tpuo
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableProjectCode(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetProjectCode(*s)
	}
	return tpuo
}

// ClearProjectCode clears the value of the "project_code" field.
func (tpuo *TenderProfileUpdateOne) ClearProjectCode() *TenderProfileUpdateOne {
	tpuo.mutation.ClearProjectCode()
	return tpuo
}

// SetProjectType sets the "project_type" field.
func (tpuo *TenderProfileUpdateOne) SetProjectType(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetProjectType(s)
	return tpuo
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableProjectType(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetProjectType(*s)
	}
	return tpuo
}

// ClearProjectType clears the value of the "project_type" field.
func (tpuo *TenderProfileUpdateOne) ClearProjectType() *TenderProfileUpdateOne {
	tpuo.mutation.ClearProjectType()
	return tpuo
}

// SetProjectDefinition sets the "project_definition" field.
func (tpuo *TenderProfileUpdateOne) SetProjectDefinition(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetProjectDefinition(s)
	return tpuo
}

// SetNillableProjectDefinition sets the "project_definition" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableProjectDefinition(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetProjectDefinition(*s)
	}
	return tpuo
}

// ClearProjectDefinition clears the value of the "project_definition" field.
func (tpuo *TenderProfileUpdateOne) ClearProjectDefinition() *TenderProfileUpdateOne {
	tpuo.mutation.ClearProjectDefinition()
	return tpuo
}

// SetEstimatedProjectStartDate sets the "estimated_project_start_date" field.
func (tpuo *TenderProfileUpdateOne) SetEstimatedProjectStartDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetEstimatedProjectStartDate(t)
	return tpuo
}

// SetNillableEstimatedProjectStartDate sets the "estimated_project_start_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableEstimatedProjectStartDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetEstimatedProjectStartDate(*t)
	}
	return tpuo
}

// ClearEstimatedProjectStartDate clears the value of the "estimated_project_start_date" field.
func (tpuo *TenderProfileUpdateOne) ClearEstimatedProjectStartDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearEstimatedProjectStartDate()
	return tpuo
}

// SetEstimatedProjectEndDate sets the "estimated_project_end_date" field.
func (tpuo *TenderProfileUpdateOne) SetEstimatedProjectEndDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetEstimatedProjectEndDate(t)
	return tpuo
}

// SetNillableEstimatedProjectEndDate sets the "estimated_project_end_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableEstimatedProjectEndDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetEstimatedProjectEndDate(*t)
	}
	return tpuo
}

// ClearEstimatedProjectEndDate clears the value of the "estimated_project_end_date" field.
func (tpuo *TenderProfileUpdateOne) ClearEstimatedProjectEndDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearEstimatedProjectEndDate()
	return tpuo
}

// SetAttachments sets the "attachments" field.
func (tpuo *TenderProfileUpdateOne) SetAttachments(s []string) *TenderProfileUpdateOne {
	tpuo.mutation.SetAttachments(s)
	return tpuo
}

// AppendAttachments appends s to the "attachments" field.
func (tpuo *TenderProfileUpdateOne) AppendAttachments(s []string) *TenderProfileUpdateOne {
	tpuo.mutation.AppendAttachments(s)
	return tpuo
}

// ClearAttachments clears the value of the "attachments" field.
func (tpuo *TenderProfileUpdateOne) ClearAttachments() *TenderProfileUpdateOne {
	tpuo.mutation.ClearAttachments()
	return tpuo
}

// SetGeoCoordinate sets the "geo_coordinate" field.
func (tpuo *TenderProfileUpdateOne) SetGeoCoordinate(f []float64) *TenderProfileUpdateOne {
	tpuo.mutation.SetGeoCoordinate(f)
	return tpuo
}

// AppendGeoCoordinate appends f to the "geo_coordinate" field.
func (tpuo *TenderProfileUpdateOne) AppendGeoCoordinate(f []float64) *TenderProfileUpdateOne {
	tpuo.mutation.AppendGeoCoordinate(f)
	return tpuo
}

// ClearGeoCoordinate clears the value of the "geo_coordinate" field.
func (tpuo *TenderProfileUpdateOne) ClearGeoCoordinate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearGeoCoordinate()
	return tpuo
}

// SetGeoBounds sets the "geo_bounds" field.
func (tpuo *TenderProfileUpdateOne) SetGeoBounds(f [][]float64) *TenderProfileUpdateOne {
	tpuo.mutation.SetGeoBounds(f)
	return tpuo
}

// AppendGeoBounds appends f to the "geo_bounds" field.
func (tpuo *TenderProfileUpdateOne) AppendGeoBounds(f [][]float64) *TenderProfileUpdateOne {
	tpuo.mutation.AppendGeoBounds(f)
	return tpuo
}

// ClearGeoBounds clears the value of the "geo_bounds" field.
func (tpuo *TenderProfileUpdateOne) ClearGeoBounds() *TenderProfileUpdateOne {
	tpuo.mutation.ClearGeoBounds()
	return tpuo
}

// SetRemark sets the "remark" field.
func (tpuo *TenderProfileUpdateOne) SetRemark(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetRemark(s)
	return tpuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableRemark(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetRemark(*s)
	}
	return tpuo
}

// ClearRemark clears the value of the "remark" field.
func (tpuo *TenderProfileUpdateOne) ClearRemark() *TenderProfileUpdateOne {
	tpuo.mutation.ClearRemark()
	return tpuo
}

// SetImages sets the "images" field.
func (tpuo *TenderProfileUpdateOne) SetImages(s []string) *TenderProfileUpdateOne {
	tpuo.mutation.SetImages(s)
	return tpuo
}

// AppendImages appends s to the "images" field.
func (tpuo *TenderProfileUpdateOne) AppendImages(s []string) *TenderProfileUpdateOne {
	tpuo.mutation.AppendImages(s)
	return tpuo
}

// ClearImages clears the value of the "images" field.
func (tpuo *TenderProfileUpdateOne) ClearImages() *TenderProfileUpdateOne {
	tpuo.mutation.ClearImages()
	return tpuo
}

// SetTenderSituations sets the "tender_situations" field.
func (tpuo *TenderProfileUpdateOne) SetTenderSituations(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderSituations(s)
	return tpuo
}

// SetNillableTenderSituations sets the "tender_situations" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderSituations(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTenderSituations(*s)
	}
	return tpuo
}

// ClearTenderSituations clears the value of the "tender_situations" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderSituations() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderSituations()
	return tpuo
}

// SetOwnerSituations sets the "owner_situations" field.
func (tpuo *TenderProfileUpdateOne) SetOwnerSituations(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetOwnerSituations(s)
	return tpuo
}

// SetNillableOwnerSituations sets the "owner_situations" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableOwnerSituations(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetOwnerSituations(*s)
	}
	return tpuo
}

// ClearOwnerSituations clears the value of the "owner_situations" field.
func (tpuo *TenderProfileUpdateOne) ClearOwnerSituations() *TenderProfileUpdateOne {
	tpuo.mutation.ClearOwnerSituations()
	return tpuo
}

// SetBiddingInstructions sets the "bidding_instructions" field.
func (tpuo *TenderProfileUpdateOne) SetBiddingInstructions(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetBiddingInstructions(s)
	return tpuo
}

// SetNillableBiddingInstructions sets the "bidding_instructions" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableBiddingInstructions(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetBiddingInstructions(*s)
	}
	return tpuo
}

// ClearBiddingInstructions clears the value of the "bidding_instructions" field.
func (tpuo *TenderProfileUpdateOne) ClearBiddingInstructions() *TenderProfileUpdateOne {
	tpuo.mutation.ClearBiddingInstructions()
	return tpuo
}

// SetCompetitorSituations sets the "competitor_situations" field.
func (tpuo *TenderProfileUpdateOne) SetCompetitorSituations(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCompetitorSituations(s)
	return tpuo
}

// SetNillableCompetitorSituations sets the "competitor_situations" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCompetitorSituations(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCompetitorSituations(*s)
	}
	return tpuo
}

// ClearCompetitorSituations clears the value of the "competitor_situations" field.
func (tpuo *TenderProfileUpdateOne) ClearCompetitorSituations() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCompetitorSituations()
	return tpuo
}

// SetCostEngineer sets the "cost_engineer" field.
func (tpuo *TenderProfileUpdateOne) SetCostEngineer(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCostEngineer(s)
	return tpuo
}

// SetNillableCostEngineer sets the "cost_engineer" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCostEngineer(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCostEngineer(*s)
	}
	return tpuo
}

// ClearCostEngineer clears the value of the "cost_engineer" field.
func (tpuo *TenderProfileUpdateOne) ClearCostEngineer() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCostEngineer()
	return tpuo
}

// SetTenderForm sets the "tender_form" field.
func (tpuo *TenderProfileUpdateOne) SetTenderForm(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderForm(s)
	return tpuo
}

// SetNillableTenderForm sets the "tender_form" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderForm(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTenderForm(*s)
	}
	return tpuo
}

// ClearTenderForm clears the value of the "tender_form" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderForm() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderForm()
	return tpuo
}

// SetContractForm sets the "contract_form" field.
func (tpuo *TenderProfileUpdateOne) SetContractForm(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetContractForm(s)
	return tpuo
}

// SetNillableContractForm sets the "contract_form" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableContractForm(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetContractForm(*s)
	}
	return tpuo
}

// ClearContractForm clears the value of the "contract_form" field.
func (tpuo *TenderProfileUpdateOne) ClearContractForm() *TenderProfileUpdateOne {
	tpuo.mutation.ClearContractForm()
	return tpuo
}

// SetManagementCompany sets the "management_company" field.
func (tpuo *TenderProfileUpdateOne) SetManagementCompany(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetManagementCompany(s)
	return tpuo
}

// SetNillableManagementCompany sets the "management_company" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableManagementCompany(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetManagementCompany(*s)
	}
	return tpuo
}

// ClearManagementCompany clears the value of the "management_company" field.
func (tpuo *TenderProfileUpdateOne) ClearManagementCompany() *TenderProfileUpdateOne {
	tpuo.mutation.ClearManagementCompany()
	return tpuo
}

// SetTenderingAgency sets the "tendering_agency" field.
func (tpuo *TenderProfileUpdateOne) SetTenderingAgency(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderingAgency(s)
	return tpuo
}

// SetNillableTenderingAgency sets the "tendering_agency" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderingAgency(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTenderingAgency(*s)
	}
	return tpuo
}

// ClearTenderingAgency clears the value of the "tendering_agency" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderingAgency() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderingAgency()
	return tpuo
}

// SetBiddingDate sets the "bidding_date" field.
func (tpuo *TenderProfileUpdateOne) SetBiddingDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetBiddingDate(t)
	return tpuo
}

// SetNillableBiddingDate sets the "bidding_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableBiddingDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetBiddingDate(*t)
	}
	return tpuo
}

// ClearBiddingDate clears the value of the "bidding_date" field.
func (tpuo *TenderProfileUpdateOne) ClearBiddingDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearBiddingDate()
	return tpuo
}

// SetFacadeConsultant sets the "facade_consultant" field.
func (tpuo *TenderProfileUpdateOne) SetFacadeConsultant(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetFacadeConsultant(s)
	return tpuo
}

// SetNillableFacadeConsultant sets the "facade_consultant" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableFacadeConsultant(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetFacadeConsultant(*s)
	}
	return tpuo
}

// ClearFacadeConsultant clears the value of the "facade_consultant" field.
func (tpuo *TenderProfileUpdateOne) ClearFacadeConsultant() *TenderProfileUpdateOne {
	tpuo.mutation.ClearFacadeConsultant()
	return tpuo
}

// SetDesignUnit sets the "design_unit" field.
func (tpuo *TenderProfileUpdateOne) SetDesignUnit(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetDesignUnit(s)
	return tpuo
}

// SetNillableDesignUnit sets the "design_unit" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableDesignUnit(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetDesignUnit(*s)
	}
	return tpuo
}

// ClearDesignUnit clears the value of the "design_unit" field.
func (tpuo *TenderProfileUpdateOne) ClearDesignUnit() *TenderProfileUpdateOne {
	tpuo.mutation.ClearDesignUnit()
	return tpuo
}

// SetConsultingFirm sets the "consulting_firm" field.
func (tpuo *TenderProfileUpdateOne) SetConsultingFirm(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetConsultingFirm(s)
	return tpuo
}

// SetNillableConsultingFirm sets the "consulting_firm" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableConsultingFirm(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetConsultingFirm(*s)
	}
	return tpuo
}

// ClearConsultingFirm clears the value of the "consulting_firm" field.
func (tpuo *TenderProfileUpdateOne) ClearConsultingFirm() *TenderProfileUpdateOne {
	tpuo.mutation.ClearConsultingFirm()
	return tpuo
}

// SetKeyProject sets the "key_project" field.
func (tpuo *TenderProfileUpdateOne) SetKeyProject(b bool) *TenderProfileUpdateOne {
	tpuo.mutation.SetKeyProject(b)
	return tpuo
}

// SetNillableKeyProject sets the "key_project" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableKeyProject(b *bool) *TenderProfileUpdateOne {
	if b != nil {
		tpuo.SetKeyProject(*b)
	}
	return tpuo
}

// SetCurrentProgress sets the "current_progress" field.
func (tpuo *TenderProfileUpdateOne) SetCurrentProgress(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetCurrentProgress(s)
	return tpuo
}

// SetNillableCurrentProgress sets the "current_progress" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCurrentProgress(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetCurrentProgress(*s)
	}
	return tpuo
}

// ClearCurrentProgress clears the value of the "current_progress" field.
func (tpuo *TenderProfileUpdateOne) ClearCurrentProgress() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCurrentProgress()
	return tpuo
}

// SetTenderWinCompany sets the "tender_win_company" field.
func (tpuo *TenderProfileUpdateOne) SetTenderWinCompany(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderWinCompany(s)
	return tpuo
}

// SetNillableTenderWinCompany sets the "tender_win_company" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderWinCompany(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTenderWinCompany(*s)
	}
	return tpuo
}

// ClearTenderWinCompany clears the value of the "tender_win_company" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderWinCompany() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderWinCompany()
	return tpuo
}

// SetTenderCode sets the "tender_code" field.
func (tpuo *TenderProfileUpdateOne) SetTenderCode(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderCode(s)
	return tpuo
}

// SetNillableTenderCode sets the "tender_code" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderCode(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetTenderCode(*s)
	}
	return tpuo
}

// ClearTenderCode clears the value of the "tender_code" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderCode() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderCode()
	return tpuo
}

// SetArchitect sets the "architect" field.
func (tpuo *TenderProfileUpdateOne) SetArchitect(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetArchitect(s)
	return tpuo
}

// SetNillableArchitect sets the "architect" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableArchitect(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetArchitect(*s)
	}
	return tpuo
}

// ClearArchitect clears the value of the "architect" field.
func (tpuo *TenderProfileUpdateOne) ClearArchitect() *TenderProfileUpdateOne {
	tpuo.mutation.ClearArchitect()
	return tpuo
}

// SetDeveloper sets the "developer" field.
func (tpuo *TenderProfileUpdateOne) SetDeveloper(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetDeveloper(s)
	return tpuo
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableDeveloper(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetDeveloper(*s)
	}
	return tpuo
}

// ClearDeveloper clears the value of the "developer" field.
func (tpuo *TenderProfileUpdateOne) ClearDeveloper() *TenderProfileUpdateOne {
	tpuo.mutation.ClearDeveloper()
	return tpuo
}

// SetTenderClosingDate sets the "tender_closing_date" field.
func (tpuo *TenderProfileUpdateOne) SetTenderClosingDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderClosingDate(t)
	return tpuo
}

// SetNillableTenderClosingDate sets the "tender_closing_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderClosingDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetTenderClosingDate(*t)
	}
	return tpuo
}

// ClearTenderClosingDate clears the value of the "tender_closing_date" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderClosingDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderClosingDate()
	return tpuo
}

// SetConstructionArea sets the "construction_area" field.
func (tpuo *TenderProfileUpdateOne) SetConstructionArea(s string) *TenderProfileUpdateOne {
	tpuo.mutation.SetConstructionArea(s)
	return tpuo
}

// SetNillableConstructionArea sets the "construction_area" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableConstructionArea(s *string) *TenderProfileUpdateOne {
	if s != nil {
		tpuo.SetConstructionArea(*s)
	}
	return tpuo
}

// ClearConstructionArea clears the value of the "construction_area" field.
func (tpuo *TenderProfileUpdateOne) ClearConstructionArea() *TenderProfileUpdateOne {
	tpuo.mutation.ClearConstructionArea()
	return tpuo
}

// SetTenderWinDate sets the "tender_win_date" field.
func (tpuo *TenderProfileUpdateOne) SetTenderWinDate(t time.Time) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderWinDate(t)
	return tpuo
}

// SetNillableTenderWinDate sets the "tender_win_date" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderWinDate(t *time.Time) *TenderProfileUpdateOne {
	if t != nil {
		tpuo.SetTenderWinDate(*t)
	}
	return tpuo
}

// ClearTenderWinDate clears the value of the "tender_win_date" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderWinDate() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderWinDate()
	return tpuo
}

// SetTenderWinAmount sets the "tender_win_amount" field.
func (tpuo *TenderProfileUpdateOne) SetTenderWinAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.ResetTenderWinAmount()
	tpuo.mutation.SetTenderWinAmount(f)
	return tpuo
}

// SetNillableTenderWinAmount sets the "tender_win_amount" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderWinAmount(f *float64) *TenderProfileUpdateOne {
	if f != nil {
		tpuo.SetTenderWinAmount(*f)
	}
	return tpuo
}

// AddTenderWinAmount adds f to the "tender_win_amount" field.
func (tpuo *TenderProfileUpdateOne) AddTenderWinAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.AddTenderWinAmount(f)
	return tpuo
}

// ClearTenderWinAmount clears the value of the "tender_win_amount" field.
func (tpuo *TenderProfileUpdateOne) ClearTenderWinAmount() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTenderWinAmount()
	return tpuo
}

// SetLastTenderAmount sets the "last_tender_amount" field.
func (tpuo *TenderProfileUpdateOne) SetLastTenderAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.ResetLastTenderAmount()
	tpuo.mutation.SetLastTenderAmount(f)
	return tpuo
}

// SetNillableLastTenderAmount sets the "last_tender_amount" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableLastTenderAmount(f *float64) *TenderProfileUpdateOne {
	if f != nil {
		tpuo.SetLastTenderAmount(*f)
	}
	return tpuo
}

// AddLastTenderAmount adds f to the "last_tender_amount" field.
func (tpuo *TenderProfileUpdateOne) AddLastTenderAmount(f float64) *TenderProfileUpdateOne {
	tpuo.mutation.AddLastTenderAmount(f)
	return tpuo
}

// ClearLastTenderAmount clears the value of the "last_tender_amount" field.
func (tpuo *TenderProfileUpdateOne) ClearLastTenderAmount() *TenderProfileUpdateOne {
	tpuo.mutation.ClearLastTenderAmount()
	return tpuo
}

// SetTenderID sets the "tender_id" field.
func (tpuo *TenderProfileUpdateOne) SetTenderID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetTenderID(x)
	return tpuo
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableTenderID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetTenderID(*x)
	}
	return tpuo
}

// SetProvinceID sets the "province_id" field.
func (tpuo *TenderProfileUpdateOne) SetProvinceID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetProvinceID(x)
	return tpuo
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableProvinceID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetProvinceID(*x)
	}
	return tpuo
}

// ClearProvinceID clears the value of the "province_id" field.
func (tpuo *TenderProfileUpdateOne) ClearProvinceID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearProvinceID()
	return tpuo
}

// SetCityID sets the "city_id" field.
func (tpuo *TenderProfileUpdateOne) SetCityID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetCityID(x)
	return tpuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCityID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetCityID(*x)
	}
	return tpuo
}

// ClearCityID clears the value of the "city_id" field.
func (tpuo *TenderProfileUpdateOne) ClearCityID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCityID()
	return tpuo
}

// SetDistrictID sets the "district_id" field.
func (tpuo *TenderProfileUpdateOne) SetDistrictID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetDistrictID(x)
	return tpuo
}

// SetNillableDistrictID sets the "district_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableDistrictID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetDistrictID(*x)
	}
	return tpuo
}

// ClearDistrictID clears the value of the "district_id" field.
func (tpuo *TenderProfileUpdateOne) ClearDistrictID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearDistrictID()
	return tpuo
}

// SetCustomerID sets the "customer_id" field.
func (tpuo *TenderProfileUpdateOne) SetCustomerID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetCustomerID(x)
	return tpuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCustomerID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetCustomerID(*x)
	}
	return tpuo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (tpuo *TenderProfileUpdateOne) ClearCustomerID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCustomerID()
	return tpuo
}

// SetFinderID sets the "finder_id" field.
func (tpuo *TenderProfileUpdateOne) SetFinderID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetFinderID(x)
	return tpuo
}

// SetNillableFinderID sets the "finder_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableFinderID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetFinderID(*x)
	}
	return tpuo
}

// ClearFinderID clears the value of the "finder_id" field.
func (tpuo *TenderProfileUpdateOne) ClearFinderID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearFinderID()
	return tpuo
}

// SetCreatedByID sets the "created_by_id" field.
func (tpuo *TenderProfileUpdateOne) SetCreatedByID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetCreatedByID(x)
	return tpuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableCreatedByID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetCreatedByID(*x)
	}
	return tpuo
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (tpuo *TenderProfileUpdateOne) ClearCreatedByID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCreatedByID()
	return tpuo
}

// SetApproverID sets the "approver_id" field.
func (tpuo *TenderProfileUpdateOne) SetApproverID(x xid.ID) *TenderProfileUpdateOne {
	tpuo.mutation.SetApproverID(x)
	return tpuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (tpuo *TenderProfileUpdateOne) SetNillableApproverID(x *xid.ID) *TenderProfileUpdateOne {
	if x != nil {
		tpuo.SetApproverID(*x)
	}
	return tpuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (tpuo *TenderProfileUpdateOne) ClearApproverID() *TenderProfileUpdateOne {
	tpuo.mutation.ClearApproverID()
	return tpuo
}

// SetTender sets the "tender" edge to the Tender entity.
func (tpuo *TenderProfileUpdateOne) SetTender(t *Tender) *TenderProfileUpdateOne {
	return tpuo.SetTenderID(t.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (tpuo *TenderProfileUpdateOne) SetCustomer(c *Customer) *TenderProfileUpdateOne {
	return tpuo.SetCustomerID(c.ID)
}

// SetFinder sets the "finder" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) SetFinder(u *User) *TenderProfileUpdateOne {
	return tpuo.SetFinderID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) SetCreatedBy(u *User) *TenderProfileUpdateOne {
	return tpuo.SetCreatedByID(u.ID)
}

// SetProvince sets the "province" edge to the Province entity.
func (tpuo *TenderProfileUpdateOne) SetProvince(p *Province) *TenderProfileUpdateOne {
	return tpuo.SetProvinceID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (tpuo *TenderProfileUpdateOne) SetCity(c *City) *TenderProfileUpdateOne {
	return tpuo.SetCityID(c.ID)
}

// SetDistrict sets the "district" edge to the District entity.
func (tpuo *TenderProfileUpdateOne) SetDistrict(d *District) *TenderProfileUpdateOne {
	return tpuo.SetDistrictID(d.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) SetApprover(u *User) *TenderProfileUpdateOne {
	return tpuo.SetApproverID(u.ID)
}

// Mutation returns the TenderProfileMutation object of the builder.
func (tpuo *TenderProfileUpdateOne) Mutation() *TenderProfileMutation {
	return tpuo.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (tpuo *TenderProfileUpdateOne) ClearTender() *TenderProfileUpdateOne {
	tpuo.mutation.ClearTender()
	return tpuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (tpuo *TenderProfileUpdateOne) ClearCustomer() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCustomer()
	return tpuo
}

// ClearFinder clears the "finder" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) ClearFinder() *TenderProfileUpdateOne {
	tpuo.mutation.ClearFinder()
	return tpuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) ClearCreatedBy() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCreatedBy()
	return tpuo
}

// ClearProvince clears the "province" edge to the Province entity.
func (tpuo *TenderProfileUpdateOne) ClearProvince() *TenderProfileUpdateOne {
	tpuo.mutation.ClearProvince()
	return tpuo
}

// ClearCity clears the "city" edge to the City entity.
func (tpuo *TenderProfileUpdateOne) ClearCity() *TenderProfileUpdateOne {
	tpuo.mutation.ClearCity()
	return tpuo
}

// ClearDistrict clears the "district" edge to the District entity.
func (tpuo *TenderProfileUpdateOne) ClearDistrict() *TenderProfileUpdateOne {
	tpuo.mutation.ClearDistrict()
	return tpuo
}

// ClearApprover clears the "approver" edge to the User entity.
func (tpuo *TenderProfileUpdateOne) ClearApprover() *TenderProfileUpdateOne {
	tpuo.mutation.ClearApprover()
	return tpuo
}

// Where appends a list predicates to the TenderProfileUpdate builder.
func (tpuo *TenderProfileUpdateOne) Where(ps ...predicate.TenderProfile) *TenderProfileUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TenderProfileUpdateOne) Select(field string, fields ...string) *TenderProfileUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TenderProfile entity.
func (tpuo *TenderProfileUpdateOne) Save(ctx context.Context) (*TenderProfile, error) {
	tpuo.defaults()
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TenderProfileUpdateOne) SaveX(ctx context.Context) *TenderProfile {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TenderProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TenderProfileUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *TenderProfileUpdateOne) defaults() {
	if _, ok := tpuo.mutation.UpdatedAt(); !ok {
		v := tenderprofile.UpdateDefaultUpdatedAt()
		tpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TenderProfileUpdateOne) check() error {
	if v, ok := tpuo.mutation.ApprovalStatus(); ok {
		if err := tenderprofile.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.approval_status": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.Name(); ok {
		if err := tenderprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.name": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.Classify(); ok {
		if err := tenderprofile.ClassifyValidator(v); err != nil {
			return &ValidationError{Name: "classify", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.classify": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.LevelInvolved(); ok {
		if err := tenderprofile.LevelInvolvedValidator(v); err != nil {
			return &ValidationError{Name: "level_involved", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.level_involved": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.SizeAndValueRating(); ok {
		if err := tenderprofile.SizeAndValueRatingValidator(v); err != nil {
			return &ValidationError{Name: "size_and_value_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.size_and_value_rating": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.CreditAndPaymentRating(); ok {
		if err := tenderprofile.CreditAndPaymentRatingValidator(v); err != nil {
			return &ValidationError{Name: "credit_and_payment_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.credit_and_payment_rating": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.TimeLimitRating(); ok {
		if err := tenderprofile.TimeLimitRatingValidator(v); err != nil {
			return &ValidationError{Name: "time_limit_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.time_limit_rating": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.CustomerRelationshipRating(); ok {
		if err := tenderprofile.CustomerRelationshipRatingValidator(v); err != nil {
			return &ValidationError{Name: "customer_relationship_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.customer_relationship_rating": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.CompetitivePartnershipRating(); ok {
		if err := tenderprofile.CompetitivePartnershipRatingValidator(v); err != nil {
			return &ValidationError{Name: "competitive_partnership_rating", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.competitive_partnership_rating": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.TenderWinAmount(); ok {
		if err := tenderprofile.TenderWinAmountValidator(v); err != nil {
			return &ValidationError{Name: "tender_win_amount", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.tender_win_amount": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.LastTenderAmount(); ok {
		if err := tenderprofile.LastTenderAmountValidator(v); err != nil {
			return &ValidationError{Name: "last_tender_amount", err: fmt.Errorf(`ent: validator failed for field "TenderProfile.last_tender_amount": %w`, err)}
		}
	}
	if tpuo.mutation.TenderCleared() && len(tpuo.mutation.TenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderProfile.tender"`)
	}
	return nil
}

func (tpuo *TenderProfileUpdateOne) sqlSave(ctx context.Context) (_node *TenderProfile, err error) {
	if err := tpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenderprofile.Table, tenderprofile.Columns, sqlgraph.NewFieldSpec(tenderprofile.FieldID, field.TypeString))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenderProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenderprofile.FieldID)
		for _, f := range fields {
			if !tenderprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenderprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenderprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tpuo.mutation.Status(); ok {
		_spec.SetField(tenderprofile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedStatus(); ok {
		_spec.AddField(tenderprofile.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.ApprovalStatus(); ok {
		_spec.SetField(tenderprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(tenderprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.ApprovalMsgID(); ok {
		_spec.SetField(tenderprofile.FieldApprovalMsgID, field.TypeString, value)
	}
	if tpuo.mutation.ApprovalMsgIDCleared() {
		_spec.ClearField(tenderprofile.FieldApprovalMsgID, field.TypeString)
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.SetField(tenderprofile.FieldName, field.TypeString, value)
	}
	if tpuo.mutation.NameCleared() {
		_spec.ClearField(tenderprofile.FieldName, field.TypeString)
	}
	if value, ok := tpuo.mutation.EstimatedAmount(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if value, ok := tpuo.mutation.AddedEstimatedAmount(); ok {
		_spec.AddField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64, value)
	}
	if tpuo.mutation.EstimatedAmountCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedAmount, field.TypeFloat64)
	}
	if value, ok := tpuo.mutation.TenderDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderDate, field.TypeTime, value)
	}
	if tpuo.mutation.TenderDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.Classify(); ok {
		_spec.SetField(tenderprofile.FieldClassify, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedClassify(); ok {
		_spec.AddField(tenderprofile.FieldClassify, field.TypeInt, value)
	}
	if tpuo.mutation.ClassifyCleared() {
		_spec.ClearField(tenderprofile.FieldClassify, field.TypeInt)
	}
	if value, ok := tpuo.mutation.DiscoveryDate(); ok {
		_spec.SetField(tenderprofile.FieldDiscoveryDate, field.TypeTime, value)
	}
	if tpuo.mutation.DiscoveryDateCleared() {
		_spec.ClearField(tenderprofile.FieldDiscoveryDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.Address(); ok {
		_spec.SetField(tenderprofile.FieldAddress, field.TypeString, value)
	}
	if tpuo.mutation.AddressCleared() {
		_spec.ClearField(tenderprofile.FieldAddress, field.TypeString)
	}
	if value, ok := tpuo.mutation.FullAddress(); ok {
		_spec.SetField(tenderprofile.FieldFullAddress, field.TypeString, value)
	}
	if tpuo.mutation.FullAddressCleared() {
		_spec.ClearField(tenderprofile.FieldFullAddress, field.TypeString)
	}
	if value, ok := tpuo.mutation.Contractor(); ok {
		_spec.SetField(tenderprofile.FieldContractor, field.TypeString, value)
	}
	if tpuo.mutation.ContractorCleared() {
		_spec.ClearField(tenderprofile.FieldContractor, field.TypeString)
	}
	if value, ok := tpuo.mutation.LevelInvolved(); ok {
		_spec.SetField(tenderprofile.FieldLevelInvolved, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedLevelInvolved(); ok {
		_spec.AddField(tenderprofile.FieldLevelInvolved, field.TypeInt, value)
	}
	if tpuo.mutation.LevelInvolvedCleared() {
		_spec.ClearField(tenderprofile.FieldLevelInvolved, field.TypeInt)
	}
	if value, ok := tpuo.mutation.SizeAndValueRating(); ok {
		_spec.SetField(tenderprofile.FieldSizeAndValueRating, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedSizeAndValueRating(); ok {
		_spec.AddField(tenderprofile.FieldSizeAndValueRating, field.TypeInt, value)
	}
	if tpuo.mutation.SizeAndValueRatingCleared() {
		_spec.ClearField(tenderprofile.FieldSizeAndValueRating, field.TypeInt)
	}
	if value, ok := tpuo.mutation.SizeAndValueRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldSizeAndValueRatingOverview, field.TypeString, value)
	}
	if tpuo.mutation.SizeAndValueRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldSizeAndValueRatingOverview, field.TypeString)
	}
	if value, ok := tpuo.mutation.CreditAndPaymentRating(); ok {
		_spec.SetField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedCreditAndPaymentRating(); ok {
		_spec.AddField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt, value)
	}
	if tpuo.mutation.CreditAndPaymentRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCreditAndPaymentRating, field.TypeInt)
	}
	if value, ok := tpuo.mutation.CreditAndPaymentRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCreditAndPaymentRatingOverview, field.TypeString, value)
	}
	if tpuo.mutation.CreditAndPaymentRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCreditAndPaymentRatingOverview, field.TypeString)
	}
	if value, ok := tpuo.mutation.TimeLimitRating(); ok {
		_spec.SetField(tenderprofile.FieldTimeLimitRating, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedTimeLimitRating(); ok {
		_spec.AddField(tenderprofile.FieldTimeLimitRating, field.TypeInt, value)
	}
	if tpuo.mutation.TimeLimitRatingCleared() {
		_spec.ClearField(tenderprofile.FieldTimeLimitRating, field.TypeInt)
	}
	if value, ok := tpuo.mutation.TimeLimitRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldTimeLimitRatingOverview, field.TypeString, value)
	}
	if tpuo.mutation.TimeLimitRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldTimeLimitRatingOverview, field.TypeString)
	}
	if value, ok := tpuo.mutation.CustomerRelationshipRating(); ok {
		_spec.SetField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedCustomerRelationshipRating(); ok {
		_spec.AddField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt, value)
	}
	if tpuo.mutation.CustomerRelationshipRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCustomerRelationshipRating, field.TypeInt)
	}
	if value, ok := tpuo.mutation.CustomerRelationshipRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCustomerRelationshipRatingOverview, field.TypeString, value)
	}
	if tpuo.mutation.CustomerRelationshipRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCustomerRelationshipRatingOverview, field.TypeString)
	}
	if value, ok := tpuo.mutation.CompetitivePartnershipRating(); ok {
		_spec.SetField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedCompetitivePartnershipRating(); ok {
		_spec.AddField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt, value)
	}
	if tpuo.mutation.CompetitivePartnershipRatingCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitivePartnershipRating, field.TypeInt)
	}
	if value, ok := tpuo.mutation.CompetitivePartnershipRatingOverview(); ok {
		_spec.SetField(tenderprofile.FieldCompetitivePartnershipRatingOverview, field.TypeString, value)
	}
	if tpuo.mutation.CompetitivePartnershipRatingOverviewCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitivePartnershipRatingOverview, field.TypeString)
	}
	if value, ok := tpuo.mutation.PrepareToBid(); ok {
		_spec.SetField(tenderprofile.FieldPrepareToBid, field.TypeBool, value)
	}
	if value, ok := tpuo.mutation.ProjectCode(); ok {
		_spec.SetField(tenderprofile.FieldProjectCode, field.TypeString, value)
	}
	if tpuo.mutation.ProjectCodeCleared() {
		_spec.ClearField(tenderprofile.FieldProjectCode, field.TypeString)
	}
	if value, ok := tpuo.mutation.ProjectType(); ok {
		_spec.SetField(tenderprofile.FieldProjectType, field.TypeString, value)
	}
	if tpuo.mutation.ProjectTypeCleared() {
		_spec.ClearField(tenderprofile.FieldProjectType, field.TypeString)
	}
	if value, ok := tpuo.mutation.ProjectDefinition(); ok {
		_spec.SetField(tenderprofile.FieldProjectDefinition, field.TypeString, value)
	}
	if tpuo.mutation.ProjectDefinitionCleared() {
		_spec.ClearField(tenderprofile.FieldProjectDefinition, field.TypeString)
	}
	if value, ok := tpuo.mutation.EstimatedProjectStartDate(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedProjectStartDate, field.TypeTime, value)
	}
	if tpuo.mutation.EstimatedProjectStartDateCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedProjectStartDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.EstimatedProjectEndDate(); ok {
		_spec.SetField(tenderprofile.FieldEstimatedProjectEndDate, field.TypeTime, value)
	}
	if tpuo.mutation.EstimatedProjectEndDateCleared() {
		_spec.ClearField(tenderprofile.FieldEstimatedProjectEndDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.Attachments(); ok {
		_spec.SetField(tenderprofile.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := tpuo.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldAttachments, value)
		})
	}
	if tpuo.mutation.AttachmentsCleared() {
		_spec.ClearField(tenderprofile.FieldAttachments, field.TypeJSON)
	}
	if value, ok := tpuo.mutation.GeoCoordinate(); ok {
		_spec.SetField(tenderprofile.FieldGeoCoordinate, field.TypeJSON, value)
	}
	if value, ok := tpuo.mutation.AppendedGeoCoordinate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldGeoCoordinate, value)
		})
	}
	if tpuo.mutation.GeoCoordinateCleared() {
		_spec.ClearField(tenderprofile.FieldGeoCoordinate, field.TypeJSON)
	}
	if value, ok := tpuo.mutation.GeoBounds(); ok {
		_spec.SetField(tenderprofile.FieldGeoBounds, field.TypeJSON, value)
	}
	if value, ok := tpuo.mutation.AppendedGeoBounds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldGeoBounds, value)
		})
	}
	if tpuo.mutation.GeoBoundsCleared() {
		_spec.ClearField(tenderprofile.FieldGeoBounds, field.TypeJSON)
	}
	if value, ok := tpuo.mutation.Remark(); ok {
		_spec.SetField(tenderprofile.FieldRemark, field.TypeString, value)
	}
	if tpuo.mutation.RemarkCleared() {
		_spec.ClearField(tenderprofile.FieldRemark, field.TypeString)
	}
	if value, ok := tpuo.mutation.Images(); ok {
		_spec.SetField(tenderprofile.FieldImages, field.TypeJSON, value)
	}
	if value, ok := tpuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenderprofile.FieldImages, value)
		})
	}
	if tpuo.mutation.ImagesCleared() {
		_spec.ClearField(tenderprofile.FieldImages, field.TypeJSON)
	}
	if value, ok := tpuo.mutation.TenderSituations(); ok {
		_spec.SetField(tenderprofile.FieldTenderSituations, field.TypeString, value)
	}
	if tpuo.mutation.TenderSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldTenderSituations, field.TypeString)
	}
	if value, ok := tpuo.mutation.OwnerSituations(); ok {
		_spec.SetField(tenderprofile.FieldOwnerSituations, field.TypeString, value)
	}
	if tpuo.mutation.OwnerSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldOwnerSituations, field.TypeString)
	}
	if value, ok := tpuo.mutation.BiddingInstructions(); ok {
		_spec.SetField(tenderprofile.FieldBiddingInstructions, field.TypeString, value)
	}
	if tpuo.mutation.BiddingInstructionsCleared() {
		_spec.ClearField(tenderprofile.FieldBiddingInstructions, field.TypeString)
	}
	if value, ok := tpuo.mutation.CompetitorSituations(); ok {
		_spec.SetField(tenderprofile.FieldCompetitorSituations, field.TypeString, value)
	}
	if tpuo.mutation.CompetitorSituationsCleared() {
		_spec.ClearField(tenderprofile.FieldCompetitorSituations, field.TypeString)
	}
	if value, ok := tpuo.mutation.CostEngineer(); ok {
		_spec.SetField(tenderprofile.FieldCostEngineer, field.TypeString, value)
	}
	if tpuo.mutation.CostEngineerCleared() {
		_spec.ClearField(tenderprofile.FieldCostEngineer, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderForm(); ok {
		_spec.SetField(tenderprofile.FieldTenderForm, field.TypeString, value)
	}
	if tpuo.mutation.TenderFormCleared() {
		_spec.ClearField(tenderprofile.FieldTenderForm, field.TypeString)
	}
	if value, ok := tpuo.mutation.ContractForm(); ok {
		_spec.SetField(tenderprofile.FieldContractForm, field.TypeString, value)
	}
	if tpuo.mutation.ContractFormCleared() {
		_spec.ClearField(tenderprofile.FieldContractForm, field.TypeString)
	}
	if value, ok := tpuo.mutation.ManagementCompany(); ok {
		_spec.SetField(tenderprofile.FieldManagementCompany, field.TypeString, value)
	}
	if tpuo.mutation.ManagementCompanyCleared() {
		_spec.ClearField(tenderprofile.FieldManagementCompany, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderingAgency(); ok {
		_spec.SetField(tenderprofile.FieldTenderingAgency, field.TypeString, value)
	}
	if tpuo.mutation.TenderingAgencyCleared() {
		_spec.ClearField(tenderprofile.FieldTenderingAgency, field.TypeString)
	}
	if value, ok := tpuo.mutation.BiddingDate(); ok {
		_spec.SetField(tenderprofile.FieldBiddingDate, field.TypeTime, value)
	}
	if tpuo.mutation.BiddingDateCleared() {
		_spec.ClearField(tenderprofile.FieldBiddingDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.FacadeConsultant(); ok {
		_spec.SetField(tenderprofile.FieldFacadeConsultant, field.TypeString, value)
	}
	if tpuo.mutation.FacadeConsultantCleared() {
		_spec.ClearField(tenderprofile.FieldFacadeConsultant, field.TypeString)
	}
	if value, ok := tpuo.mutation.DesignUnit(); ok {
		_spec.SetField(tenderprofile.FieldDesignUnit, field.TypeString, value)
	}
	if tpuo.mutation.DesignUnitCleared() {
		_spec.ClearField(tenderprofile.FieldDesignUnit, field.TypeString)
	}
	if value, ok := tpuo.mutation.ConsultingFirm(); ok {
		_spec.SetField(tenderprofile.FieldConsultingFirm, field.TypeString, value)
	}
	if tpuo.mutation.ConsultingFirmCleared() {
		_spec.ClearField(tenderprofile.FieldConsultingFirm, field.TypeString)
	}
	if value, ok := tpuo.mutation.KeyProject(); ok {
		_spec.SetField(tenderprofile.FieldKeyProject, field.TypeBool, value)
	}
	if value, ok := tpuo.mutation.CurrentProgress(); ok {
		_spec.SetField(tenderprofile.FieldCurrentProgress, field.TypeString, value)
	}
	if tpuo.mutation.CurrentProgressCleared() {
		_spec.ClearField(tenderprofile.FieldCurrentProgress, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderWinCompany(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinCompany, field.TypeString, value)
	}
	if tpuo.mutation.TenderWinCompanyCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinCompany, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderCode(); ok {
		_spec.SetField(tenderprofile.FieldTenderCode, field.TypeString, value)
	}
	if tpuo.mutation.TenderCodeCleared() {
		_spec.ClearField(tenderprofile.FieldTenderCode, field.TypeString)
	}
	if value, ok := tpuo.mutation.Architect(); ok {
		_spec.SetField(tenderprofile.FieldArchitect, field.TypeString, value)
	}
	if tpuo.mutation.ArchitectCleared() {
		_spec.ClearField(tenderprofile.FieldArchitect, field.TypeString)
	}
	if value, ok := tpuo.mutation.Developer(); ok {
		_spec.SetField(tenderprofile.FieldDeveloper, field.TypeString, value)
	}
	if tpuo.mutation.DeveloperCleared() {
		_spec.ClearField(tenderprofile.FieldDeveloper, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderClosingDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderClosingDate, field.TypeTime, value)
	}
	if tpuo.mutation.TenderClosingDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderClosingDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.ConstructionArea(); ok {
		_spec.SetField(tenderprofile.FieldConstructionArea, field.TypeString, value)
	}
	if tpuo.mutation.ConstructionAreaCleared() {
		_spec.ClearField(tenderprofile.FieldConstructionArea, field.TypeString)
	}
	if value, ok := tpuo.mutation.TenderWinDate(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinDate, field.TypeTime, value)
	}
	if tpuo.mutation.TenderWinDateCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinDate, field.TypeTime)
	}
	if value, ok := tpuo.mutation.TenderWinAmount(); ok {
		_spec.SetField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64, value)
	}
	if value, ok := tpuo.mutation.AddedTenderWinAmount(); ok {
		_spec.AddField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64, value)
	}
	if tpuo.mutation.TenderWinAmountCleared() {
		_spec.ClearField(tenderprofile.FieldTenderWinAmount, field.TypeFloat64)
	}
	if value, ok := tpuo.mutation.LastTenderAmount(); ok {
		_spec.SetField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64, value)
	}
	if value, ok := tpuo.mutation.AddedLastTenderAmount(); ok {
		_spec.AddField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64, value)
	}
	if tpuo.mutation.LastTenderAmountCleared() {
		_spec.ClearField(tenderprofile.FieldLastTenderAmount, field.TypeFloat64)
	}
	if tpuo.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenderprofile.TenderTable,
			Columns: []string{tenderprofile.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenderprofile.TenderTable,
			Columns: []string{tenderprofile.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CustomerTable,
			Columns: []string{tenderprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CustomerTable,
			Columns: []string{tenderprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.FinderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.FinderTable,
			Columns: []string{tenderprofile.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.FinderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.FinderTable,
			Columns: []string{tenderprofile.FinderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CreatedByTable,
			Columns: []string{tenderprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CreatedByTable,
			Columns: []string{tenderprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ProvinceTable,
			Columns: []string{tenderprofile.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ProvinceTable,
			Columns: []string{tenderprofile.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CityTable,
			Columns: []string{tenderprofile.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.CityTable,
			Columns: []string{tenderprofile.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.DistrictCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.DistrictTable,
			Columns: []string{tenderprofile.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.DistrictTable,
			Columns: []string{tenderprofile.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ApproverTable,
			Columns: []string{tenderprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenderprofile.ApproverTable,
			Columns: []string{tenderprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TenderProfile{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenderprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
