// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectVOCreate is the builder for creating a ProjectVO entity.
type ProjectVOCreate struct {
	config
	mutation *ProjectVOMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProjectVOCreate) SetCreatedAt(t time.Time) *ProjectVOCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableCreatedAt(t *time.Time) *ProjectVOCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *ProjectVOCreate) SetUpdatedAt(t time.Time) *ProjectVOCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableUpdatedAt(t *time.Time) *ProjectVOCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetProjectID sets the "project_id" field.
func (pvc *ProjectVOCreate) SetProjectID(x xid.ID) *ProjectVOCreate {
	pvc.mutation.SetProjectID(x)
	return pvc
}

// SetChangeType sets the "change_type" field.
func (pvc *ProjectVOCreate) SetChangeType(i int) *ProjectVOCreate {
	pvc.mutation.SetChangeType(i)
	return pvc
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableChangeType(i *int) *ProjectVOCreate {
	if i != nil {
		pvc.SetChangeType(*i)
	}
	return pvc
}

// SetIsApproved sets the "is_approved" field.
func (pvc *ProjectVOCreate) SetIsApproved(b bool) *ProjectVOCreate {
	pvc.mutation.SetIsApproved(b)
	return pvc
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableIsApproved(b *bool) *ProjectVOCreate {
	if b != nil {
		pvc.SetIsApproved(*b)
	}
	return pvc
}

// SetAzjd sets the "azjd" field.
func (pvc *ProjectVOCreate) SetAzjd(f float64) *ProjectVOCreate {
	pvc.mutation.SetAzjd(f)
	return pvc
}

// SetNillableAzjd sets the "azjd" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableAzjd(f *float64) *ProjectVOCreate {
	if f != nil {
		pvc.SetAzjd(*f)
	}
	return pvc
}

// SetYxhyze sets the "yxhyze" field.
func (pvc *ProjectVOCreate) SetYxhyze(f float64) *ProjectVOCreate {
	pvc.mutation.SetYxhyze(f)
	return pvc
}

// SetNillableYxhyze sets the "yxhyze" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableYxhyze(f *float64) *ProjectVOCreate {
	if f != nil {
		pvc.SetYxhyze(*f)
	}
	return pvc
}

// SetApplyAmount sets the "apply_amount" field.
func (pvc *ProjectVOCreate) SetApplyAmount(f float64) *ProjectVOCreate {
	pvc.mutation.SetApplyAmount(f)
	return pvc
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableApplyAmount(f *float64) *ProjectVOCreate {
	if f != nil {
		pvc.SetApplyAmount(*f)
	}
	return pvc
}

// SetApproveAmount sets the "approve_amount" field.
func (pvc *ProjectVOCreate) SetApproveAmount(f float64) *ProjectVOCreate {
	pvc.mutation.SetApproveAmount(f)
	return pvc
}

// SetNillableApproveAmount sets the "approve_amount" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableApproveAmount(f *float64) *ProjectVOCreate {
	if f != nil {
		pvc.SetApproveAmount(*f)
	}
	return pvc
}

// SetID sets the "id" field.
func (pvc *ProjectVOCreate) SetID(x xid.ID) *ProjectVOCreate {
	pvc.mutation.SetID(x)
	return pvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pvc *ProjectVOCreate) SetNillableID(x *xid.ID) *ProjectVOCreate {
	if x != nil {
		pvc.SetID(*x)
	}
	return pvc
}

// SetProject sets the "project" edge to the Project entity.
func (pvc *ProjectVOCreate) SetProject(p *Project) *ProjectVOCreate {
	return pvc.SetProjectID(p.ID)
}

// Mutation returns the ProjectVOMutation object of the builder.
func (pvc *ProjectVOCreate) Mutation() *ProjectVOMutation {
	return pvc.mutation
}

// Save creates the ProjectVO in the database.
func (pvc *ProjectVOCreate) Save(ctx context.Context) (*ProjectVO, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProjectVOCreate) SaveX(ctx context.Context) *ProjectVO {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProjectVOCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProjectVOCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *ProjectVOCreate) defaults() {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := projectvo.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		v := projectvo.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pvc.mutation.ChangeType(); !ok {
		v := projectvo.DefaultChangeType
		pvc.mutation.SetChangeType(v)
	}
	if _, ok := pvc.mutation.IsApproved(); !ok {
		v := projectvo.DefaultIsApproved
		pvc.mutation.SetIsApproved(v)
	}
	if _, ok := pvc.mutation.ID(); !ok {
		v := projectvo.DefaultID()
		pvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProjectVOCreate) check() error {
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectVO.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectVO.updated_at"`)}
	}
	if _, ok := pvc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectVO.project_id"`)}
	}
	if _, ok := pvc.mutation.ChangeType(); !ok {
		return &ValidationError{Name: "change_type", err: errors.New(`ent: missing required field "ProjectVO.change_type"`)}
	}
	if _, ok := pvc.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "ProjectVO.is_approved"`)}
	}
	if len(pvc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectVO.project"`)}
	}
	return nil
}

func (pvc *ProjectVOCreate) sqlSave(ctx context.Context) (*ProjectVO, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProjectVOCreate) createSpec() (*ProjectVO, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectVO{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(projectvo.Table, sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString))
	)
	_spec.OnConflict = pvc.conflict
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(projectvo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectvo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pvc.mutation.ChangeType(); ok {
		_spec.SetField(projectvo.FieldChangeType, field.TypeInt, value)
		_node.ChangeType = value
	}
	if value, ok := pvc.mutation.IsApproved(); ok {
		_spec.SetField(projectvo.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := pvc.mutation.Azjd(); ok {
		_spec.SetField(projectvo.FieldAzjd, field.TypeFloat64, value)
		_node.Azjd = &value
	}
	if value, ok := pvc.mutation.Yxhyze(); ok {
		_spec.SetField(projectvo.FieldYxhyze, field.TypeFloat64, value)
		_node.Yxhyze = &value
	}
	if value, ok := pvc.mutation.ApplyAmount(); ok {
		_spec.SetField(projectvo.FieldApplyAmount, field.TypeFloat64, value)
		_node.ApplyAmount = &value
	}
	if value, ok := pvc.mutation.ApproveAmount(); ok {
		_spec.SetField(projectvo.FieldApproveAmount, field.TypeFloat64, value)
		_node.ApproveAmount = &value
	}
	if nodes := pvc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectvo.ProjectTable,
			Columns: []string{projectvo.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectVO.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectVOUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pvc *ProjectVOCreate) OnConflict(opts ...sql.ConflictOption) *ProjectVOUpsertOne {
	pvc.conflict = opts
	return &ProjectVOUpsertOne{
		create: pvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvc *ProjectVOCreate) OnConflictColumns(columns ...string) *ProjectVOUpsertOne {
	pvc.conflict = append(pvc.conflict, sql.ConflictColumns(columns...))
	return &ProjectVOUpsertOne{
		create: pvc,
	}
}

type (
	// ProjectVOUpsertOne is the builder for "upsert"-ing
	//  one ProjectVO node.
	ProjectVOUpsertOne struct {
		create *ProjectVOCreate
	}

	// ProjectVOUpsert is the "OnConflict" setter.
	ProjectVOUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectVOUpsert) SetUpdatedAt(v time.Time) *ProjectVOUpsert {
	u.Set(projectvo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateUpdatedAt() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldUpdatedAt)
	return u
}

// SetProjectID sets the "project_id" field.
func (u *ProjectVOUpsert) SetProjectID(v xid.ID) *ProjectVOUpsert {
	u.Set(projectvo.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateProjectID() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldProjectID)
	return u
}

// SetChangeType sets the "change_type" field.
func (u *ProjectVOUpsert) SetChangeType(v int) *ProjectVOUpsert {
	u.Set(projectvo.FieldChangeType, v)
	return u
}

// UpdateChangeType sets the "change_type" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateChangeType() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldChangeType)
	return u
}

// AddChangeType adds v to the "change_type" field.
func (u *ProjectVOUpsert) AddChangeType(v int) *ProjectVOUpsert {
	u.Add(projectvo.FieldChangeType, v)
	return u
}

// SetIsApproved sets the "is_approved" field.
func (u *ProjectVOUpsert) SetIsApproved(v bool) *ProjectVOUpsert {
	u.Set(projectvo.FieldIsApproved, v)
	return u
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateIsApproved() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldIsApproved)
	return u
}

// SetAzjd sets the "azjd" field.
func (u *ProjectVOUpsert) SetAzjd(v float64) *ProjectVOUpsert {
	u.Set(projectvo.FieldAzjd, v)
	return u
}

// UpdateAzjd sets the "azjd" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateAzjd() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldAzjd)
	return u
}

// AddAzjd adds v to the "azjd" field.
func (u *ProjectVOUpsert) AddAzjd(v float64) *ProjectVOUpsert {
	u.Add(projectvo.FieldAzjd, v)
	return u
}

// ClearAzjd clears the value of the "azjd" field.
func (u *ProjectVOUpsert) ClearAzjd() *ProjectVOUpsert {
	u.SetNull(projectvo.FieldAzjd)
	return u
}

// SetYxhyze sets the "yxhyze" field.
func (u *ProjectVOUpsert) SetYxhyze(v float64) *ProjectVOUpsert {
	u.Set(projectvo.FieldYxhyze, v)
	return u
}

// UpdateYxhyze sets the "yxhyze" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateYxhyze() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldYxhyze)
	return u
}

// AddYxhyze adds v to the "yxhyze" field.
func (u *ProjectVOUpsert) AddYxhyze(v float64) *ProjectVOUpsert {
	u.Add(projectvo.FieldYxhyze, v)
	return u
}

// ClearYxhyze clears the value of the "yxhyze" field.
func (u *ProjectVOUpsert) ClearYxhyze() *ProjectVOUpsert {
	u.SetNull(projectvo.FieldYxhyze)
	return u
}

// SetApplyAmount sets the "apply_amount" field.
func (u *ProjectVOUpsert) SetApplyAmount(v float64) *ProjectVOUpsert {
	u.Set(projectvo.FieldApplyAmount, v)
	return u
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateApplyAmount() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldApplyAmount)
	return u
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *ProjectVOUpsert) AddApplyAmount(v float64) *ProjectVOUpsert {
	u.Add(projectvo.FieldApplyAmount, v)
	return u
}

// ClearApplyAmount clears the value of the "apply_amount" field.
func (u *ProjectVOUpsert) ClearApplyAmount() *ProjectVOUpsert {
	u.SetNull(projectvo.FieldApplyAmount)
	return u
}

// SetApproveAmount sets the "approve_amount" field.
func (u *ProjectVOUpsert) SetApproveAmount(v float64) *ProjectVOUpsert {
	u.Set(projectvo.FieldApproveAmount, v)
	return u
}

// UpdateApproveAmount sets the "approve_amount" field to the value that was provided on create.
func (u *ProjectVOUpsert) UpdateApproveAmount() *ProjectVOUpsert {
	u.SetExcluded(projectvo.FieldApproveAmount)
	return u
}

// AddApproveAmount adds v to the "approve_amount" field.
func (u *ProjectVOUpsert) AddApproveAmount(v float64) *ProjectVOUpsert {
	u.Add(projectvo.FieldApproveAmount, v)
	return u
}

// ClearApproveAmount clears the value of the "approve_amount" field.
func (u *ProjectVOUpsert) ClearApproveAmount() *ProjectVOUpsert {
	u.SetNull(projectvo.FieldApproveAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectvo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectVOUpsertOne) UpdateNewValues() *ProjectVOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(projectvo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(projectvo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectVOUpsertOne) Ignore() *ProjectVOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectVOUpsertOne) DoNothing() *ProjectVOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectVOCreate.OnConflict
// documentation for more info.
func (u *ProjectVOUpsertOne) Update(set func(*ProjectVOUpsert)) *ProjectVOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectVOUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectVOUpsertOne) SetUpdatedAt(v time.Time) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateUpdatedAt() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ProjectVOUpsertOne) SetProjectID(v xid.ID) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateProjectID() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateProjectID()
	})
}

// SetChangeType sets the "change_type" field.
func (u *ProjectVOUpsertOne) SetChangeType(v int) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetChangeType(v)
	})
}

// AddChangeType adds v to the "change_type" field.
func (u *ProjectVOUpsertOne) AddChangeType(v int) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddChangeType(v)
	})
}

// UpdateChangeType sets the "change_type" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateChangeType() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateChangeType()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *ProjectVOUpsertOne) SetIsApproved(v bool) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateIsApproved() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateIsApproved()
	})
}

// SetAzjd sets the "azjd" field.
func (u *ProjectVOUpsertOne) SetAzjd(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetAzjd(v)
	})
}

// AddAzjd adds v to the "azjd" field.
func (u *ProjectVOUpsertOne) AddAzjd(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddAzjd(v)
	})
}

// UpdateAzjd sets the "azjd" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateAzjd() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateAzjd()
	})
}

// ClearAzjd clears the value of the "azjd" field.
func (u *ProjectVOUpsertOne) ClearAzjd() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearAzjd()
	})
}

// SetYxhyze sets the "yxhyze" field.
func (u *ProjectVOUpsertOne) SetYxhyze(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetYxhyze(v)
	})
}

// AddYxhyze adds v to the "yxhyze" field.
func (u *ProjectVOUpsertOne) AddYxhyze(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddYxhyze(v)
	})
}

// UpdateYxhyze sets the "yxhyze" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateYxhyze() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateYxhyze()
	})
}

// ClearYxhyze clears the value of the "yxhyze" field.
func (u *ProjectVOUpsertOne) ClearYxhyze() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearYxhyze()
	})
}

// SetApplyAmount sets the "apply_amount" field.
func (u *ProjectVOUpsertOne) SetApplyAmount(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetApplyAmount(v)
	})
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *ProjectVOUpsertOne) AddApplyAmount(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddApplyAmount(v)
	})
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateApplyAmount() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateApplyAmount()
	})
}

// ClearApplyAmount clears the value of the "apply_amount" field.
func (u *ProjectVOUpsertOne) ClearApplyAmount() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearApplyAmount()
	})
}

// SetApproveAmount sets the "approve_amount" field.
func (u *ProjectVOUpsertOne) SetApproveAmount(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetApproveAmount(v)
	})
}

// AddApproveAmount adds v to the "approve_amount" field.
func (u *ProjectVOUpsertOne) AddApproveAmount(v float64) *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddApproveAmount(v)
	})
}

// UpdateApproveAmount sets the "approve_amount" field to the value that was provided on create.
func (u *ProjectVOUpsertOne) UpdateApproveAmount() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateApproveAmount()
	})
}

// ClearApproveAmount clears the value of the "approve_amount" field.
func (u *ProjectVOUpsertOne) ClearApproveAmount() *ProjectVOUpsertOne {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearApproveAmount()
	})
}

// Exec executes the query.
func (u *ProjectVOUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectVOCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectVOUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectVOUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectVOUpsertOne.ID is not supported by MySQL driver. Use ProjectVOUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectVOUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectVOCreateBulk is the builder for creating many ProjectVO entities in bulk.
type ProjectVOCreateBulk struct {
	config
	err      error
	builders []*ProjectVOCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectVO entities in the database.
func (pvcb *ProjectVOCreateBulk) Save(ctx context.Context) ([]*ProjectVO, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProjectVO, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectVOMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProjectVOCreateBulk) SaveX(ctx context.Context) []*ProjectVO {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProjectVOCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProjectVOCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectVO.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectVOUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pvcb *ProjectVOCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectVOUpsertBulk {
	pvcb.conflict = opts
	return &ProjectVOUpsertBulk{
		create: pvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvcb *ProjectVOCreateBulk) OnConflictColumns(columns ...string) *ProjectVOUpsertBulk {
	pvcb.conflict = append(pvcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectVOUpsertBulk{
		create: pvcb,
	}
}

// ProjectVOUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectVO nodes.
type ProjectVOUpsertBulk struct {
	create *ProjectVOCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectvo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectVOUpsertBulk) UpdateNewValues() *ProjectVOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(projectvo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(projectvo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectVO.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectVOUpsertBulk) Ignore() *ProjectVOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectVOUpsertBulk) DoNothing() *ProjectVOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectVOCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectVOUpsertBulk) Update(set func(*ProjectVOUpsert)) *ProjectVOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectVOUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectVOUpsertBulk) SetUpdatedAt(v time.Time) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateUpdatedAt() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ProjectVOUpsertBulk) SetProjectID(v xid.ID) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateProjectID() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateProjectID()
	})
}

// SetChangeType sets the "change_type" field.
func (u *ProjectVOUpsertBulk) SetChangeType(v int) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetChangeType(v)
	})
}

// AddChangeType adds v to the "change_type" field.
func (u *ProjectVOUpsertBulk) AddChangeType(v int) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddChangeType(v)
	})
}

// UpdateChangeType sets the "change_type" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateChangeType() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateChangeType()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *ProjectVOUpsertBulk) SetIsApproved(v bool) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateIsApproved() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateIsApproved()
	})
}

// SetAzjd sets the "azjd" field.
func (u *ProjectVOUpsertBulk) SetAzjd(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetAzjd(v)
	})
}

// AddAzjd adds v to the "azjd" field.
func (u *ProjectVOUpsertBulk) AddAzjd(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddAzjd(v)
	})
}

// UpdateAzjd sets the "azjd" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateAzjd() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateAzjd()
	})
}

// ClearAzjd clears the value of the "azjd" field.
func (u *ProjectVOUpsertBulk) ClearAzjd() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearAzjd()
	})
}

// SetYxhyze sets the "yxhyze" field.
func (u *ProjectVOUpsertBulk) SetYxhyze(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetYxhyze(v)
	})
}

// AddYxhyze adds v to the "yxhyze" field.
func (u *ProjectVOUpsertBulk) AddYxhyze(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddYxhyze(v)
	})
}

// UpdateYxhyze sets the "yxhyze" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateYxhyze() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateYxhyze()
	})
}

// ClearYxhyze clears the value of the "yxhyze" field.
func (u *ProjectVOUpsertBulk) ClearYxhyze() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearYxhyze()
	})
}

// SetApplyAmount sets the "apply_amount" field.
func (u *ProjectVOUpsertBulk) SetApplyAmount(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetApplyAmount(v)
	})
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *ProjectVOUpsertBulk) AddApplyAmount(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddApplyAmount(v)
	})
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateApplyAmount() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateApplyAmount()
	})
}

// ClearApplyAmount clears the value of the "apply_amount" field.
func (u *ProjectVOUpsertBulk) ClearApplyAmount() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearApplyAmount()
	})
}

// SetApproveAmount sets the "approve_amount" field.
func (u *ProjectVOUpsertBulk) SetApproveAmount(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.SetApproveAmount(v)
	})
}

// AddApproveAmount adds v to the "approve_amount" field.
func (u *ProjectVOUpsertBulk) AddApproveAmount(v float64) *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.AddApproveAmount(v)
	})
}

// UpdateApproveAmount sets the "approve_amount" field to the value that was provided on create.
func (u *ProjectVOUpsertBulk) UpdateApproveAmount() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.UpdateApproveAmount()
	})
}

// ClearApproveAmount clears the value of the "approve_amount" field.
func (u *ProjectVOUpsertBulk) ClearApproveAmount() *ProjectVOUpsertBulk {
	return u.Update(func(s *ProjectVOUpsert) {
		s.ClearApproveAmount()
	})
}

// Exec executes the query.
func (u *ProjectVOUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectVOCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectVOCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectVOUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
