// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerProfileUpdate is the builder for updating CustomerProfile entities.
type CustomerProfileUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerProfileMutation
}

// Where appends a list predicates to the CustomerProfileUpdate builder.
func (cpu *CustomerProfileUpdate) Where(ps ...predicate.CustomerProfile) *CustomerProfileUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpu *CustomerProfileUpdate) SetUpdatedAt(t time.Time) *CustomerProfileUpdate {
	cpu.mutation.SetUpdatedAt(t)
	return cpu
}

// SetName sets the "name" field.
func (cpu *CustomerProfileUpdate) SetName(s string) *CustomerProfileUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableName(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetName(*s)
	}
	return cpu
}

// SetApprovalStatus sets the "approval_status" field.
func (cpu *CustomerProfileUpdate) SetApprovalStatus(i int) *CustomerProfileUpdate {
	cpu.mutation.ResetApprovalStatus()
	cpu.mutation.SetApprovalStatus(i)
	return cpu
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableApprovalStatus(i *int) *CustomerProfileUpdate {
	if i != nil {
		cpu.SetApprovalStatus(*i)
	}
	return cpu
}

// AddApprovalStatus adds i to the "approval_status" field.
func (cpu *CustomerProfileUpdate) AddApprovalStatus(i int) *CustomerProfileUpdate {
	cpu.mutation.AddApprovalStatus(i)
	return cpu
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (cpu *CustomerProfileUpdate) SetApprovalMsgID(s string) *CustomerProfileUpdate {
	cpu.mutation.SetApprovalMsgID(s)
	return cpu
}

// SetNillableApprovalMsgID sets the "approval_msg_id" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableApprovalMsgID(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetApprovalMsgID(*s)
	}
	return cpu
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (cpu *CustomerProfileUpdate) ClearApprovalMsgID() *CustomerProfileUpdate {
	cpu.mutation.ClearApprovalMsgID()
	return cpu
}

// SetApprovalDate sets the "approval_date" field.
func (cpu *CustomerProfileUpdate) SetApprovalDate(t time.Time) *CustomerProfileUpdate {
	cpu.mutation.SetApprovalDate(t)
	return cpu
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableApprovalDate(t *time.Time) *CustomerProfileUpdate {
	if t != nil {
		cpu.SetApprovalDate(*t)
	}
	return cpu
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (cpu *CustomerProfileUpdate) ClearApprovalDate() *CustomerProfileUpdate {
	cpu.mutation.ClearApprovalDate()
	return cpu
}

// SetOwnerType sets the "owner_type" field.
func (cpu *CustomerProfileUpdate) SetOwnerType(i int) *CustomerProfileUpdate {
	cpu.mutation.ResetOwnerType()
	cpu.mutation.SetOwnerType(i)
	return cpu
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableOwnerType(i *int) *CustomerProfileUpdate {
	if i != nil {
		cpu.SetOwnerType(*i)
	}
	return cpu
}

// AddOwnerType adds i to the "owner_type" field.
func (cpu *CustomerProfileUpdate) AddOwnerType(i int) *CustomerProfileUpdate {
	cpu.mutation.AddOwnerType(i)
	return cpu
}

// ClearOwnerType clears the value of the "owner_type" field.
func (cpu *CustomerProfileUpdate) ClearOwnerType() *CustomerProfileUpdate {
	cpu.mutation.ClearOwnerType()
	return cpu
}

// SetIndustry sets the "industry" field.
func (cpu *CustomerProfileUpdate) SetIndustry(i int) *CustomerProfileUpdate {
	cpu.mutation.ResetIndustry()
	cpu.mutation.SetIndustry(i)
	return cpu
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableIndustry(i *int) *CustomerProfileUpdate {
	if i != nil {
		cpu.SetIndustry(*i)
	}
	return cpu
}

// AddIndustry adds i to the "industry" field.
func (cpu *CustomerProfileUpdate) AddIndustry(i int) *CustomerProfileUpdate {
	cpu.mutation.AddIndustry(i)
	return cpu
}

// ClearIndustry clears the value of the "industry" field.
func (cpu *CustomerProfileUpdate) ClearIndustry() *CustomerProfileUpdate {
	cpu.mutation.ClearIndustry()
	return cpu
}

// SetSize sets the "size" field.
func (cpu *CustomerProfileUpdate) SetSize(i int) *CustomerProfileUpdate {
	cpu.mutation.ResetSize()
	cpu.mutation.SetSize(i)
	return cpu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableSize(i *int) *CustomerProfileUpdate {
	if i != nil {
		cpu.SetSize(*i)
	}
	return cpu
}

// AddSize adds i to the "size" field.
func (cpu *CustomerProfileUpdate) AddSize(i int) *CustomerProfileUpdate {
	cpu.mutation.AddSize(i)
	return cpu
}

// ClearSize clears the value of the "size" field.
func (cpu *CustomerProfileUpdate) ClearSize() *CustomerProfileUpdate {
	cpu.mutation.ClearSize()
	return cpu
}

// SetContactPerson sets the "contact_person" field.
func (cpu *CustomerProfileUpdate) SetContactPerson(s string) *CustomerProfileUpdate {
	cpu.mutation.SetContactPerson(s)
	return cpu
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableContactPerson(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetContactPerson(*s)
	}
	return cpu
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cpu *CustomerProfileUpdate) ClearContactPerson() *CustomerProfileUpdate {
	cpu.mutation.ClearContactPerson()
	return cpu
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cpu *CustomerProfileUpdate) SetContactPersonPosition(s string) *CustomerProfileUpdate {
	cpu.mutation.SetContactPersonPosition(s)
	return cpu
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableContactPersonPosition(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetContactPersonPosition(*s)
	}
	return cpu
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (cpu *CustomerProfileUpdate) ClearContactPersonPosition() *CustomerProfileUpdate {
	cpu.mutation.ClearContactPersonPosition()
	return cpu
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cpu *CustomerProfileUpdate) SetContactPersonPhone(s string) *CustomerProfileUpdate {
	cpu.mutation.SetContactPersonPhone(s)
	return cpu
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableContactPersonPhone(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetContactPersonPhone(*s)
	}
	return cpu
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (cpu *CustomerProfileUpdate) ClearContactPersonPhone() *CustomerProfileUpdate {
	cpu.mutation.ClearContactPersonPhone()
	return cpu
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cpu *CustomerProfileUpdate) SetContactPersonEmail(s string) *CustomerProfileUpdate {
	cpu.mutation.SetContactPersonEmail(s)
	return cpu
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableContactPersonEmail(s *string) *CustomerProfileUpdate {
	if s != nil {
		cpu.SetContactPersonEmail(*s)
	}
	return cpu
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (cpu *CustomerProfileUpdate) ClearContactPersonEmail() *CustomerProfileUpdate {
	cpu.mutation.ClearContactPersonEmail()
	return cpu
}

// SetSalesID sets the "sales_id" field.
func (cpu *CustomerProfileUpdate) SetSalesID(x xid.ID) *CustomerProfileUpdate {
	cpu.mutation.SetSalesID(x)
	return cpu
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableSalesID(x *xid.ID) *CustomerProfileUpdate {
	if x != nil {
		cpu.SetSalesID(*x)
	}
	return cpu
}

// ClearSalesID clears the value of the "sales_id" field.
func (cpu *CustomerProfileUpdate) ClearSalesID() *CustomerProfileUpdate {
	cpu.mutation.ClearSalesID()
	return cpu
}

// SetCustomerID sets the "customer_id" field.
func (cpu *CustomerProfileUpdate) SetCustomerID(x xid.ID) *CustomerProfileUpdate {
	cpu.mutation.SetCustomerID(x)
	return cpu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableCustomerID(x *xid.ID) *CustomerProfileUpdate {
	if x != nil {
		cpu.SetCustomerID(*x)
	}
	return cpu
}

// SetCreatedByID sets the "created_by_id" field.
func (cpu *CustomerProfileUpdate) SetCreatedByID(x xid.ID) *CustomerProfileUpdate {
	cpu.mutation.SetCreatedByID(x)
	return cpu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableCreatedByID(x *xid.ID) *CustomerProfileUpdate {
	if x != nil {
		cpu.SetCreatedByID(*x)
	}
	return cpu
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (cpu *CustomerProfileUpdate) ClearCreatedByID() *CustomerProfileUpdate {
	cpu.mutation.ClearCreatedByID()
	return cpu
}

// SetApproverID sets the "approver_id" field.
func (cpu *CustomerProfileUpdate) SetApproverID(x xid.ID) *CustomerProfileUpdate {
	cpu.mutation.SetApproverID(x)
	return cpu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cpu *CustomerProfileUpdate) SetNillableApproverID(x *xid.ID) *CustomerProfileUpdate {
	if x != nil {
		cpu.SetApproverID(*x)
	}
	return cpu
}

// ClearApproverID clears the value of the "approver_id" field.
func (cpu *CustomerProfileUpdate) ClearApproverID() *CustomerProfileUpdate {
	cpu.mutation.ClearApproverID()
	return cpu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cpu *CustomerProfileUpdate) SetCustomer(c *Customer) *CustomerProfileUpdate {
	return cpu.SetCustomerID(c.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cpu *CustomerProfileUpdate) SetCreatedBy(u *User) *CustomerProfileUpdate {
	return cpu.SetCreatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cpu *CustomerProfileUpdate) SetApprover(u *User) *CustomerProfileUpdate {
	return cpu.SetApproverID(u.ID)
}

// SetSales sets the "sales" edge to the User entity.
func (cpu *CustomerProfileUpdate) SetSales(u *User) *CustomerProfileUpdate {
	return cpu.SetSalesID(u.ID)
}

// Mutation returns the CustomerProfileMutation object of the builder.
func (cpu *CustomerProfileUpdate) Mutation() *CustomerProfileMutation {
	return cpu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cpu *CustomerProfileUpdate) ClearCustomer() *CustomerProfileUpdate {
	cpu.mutation.ClearCustomer()
	return cpu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (cpu *CustomerProfileUpdate) ClearCreatedBy() *CustomerProfileUpdate {
	cpu.mutation.ClearCreatedBy()
	return cpu
}

// ClearApprover clears the "approver" edge to the User entity.
func (cpu *CustomerProfileUpdate) ClearApprover() *CustomerProfileUpdate {
	cpu.mutation.ClearApprover()
	return cpu
}

// ClearSales clears the "sales" edge to the User entity.
func (cpu *CustomerProfileUpdate) ClearSales() *CustomerProfileUpdate {
	cpu.mutation.ClearSales()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CustomerProfileUpdate) Save(ctx context.Context) (int, error) {
	cpu.defaults()
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CustomerProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CustomerProfileUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CustomerProfileUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpu *CustomerProfileUpdate) defaults() {
	if _, ok := cpu.mutation.UpdatedAt(); !ok {
		v := customerprofile.UpdateDefaultUpdatedAt()
		cpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CustomerProfileUpdate) check() error {
	if v, ok := cpu.mutation.Name(); ok {
		if err := customerprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.name": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.ApprovalStatus(); ok {
		if err := customerprofile.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.approval_status": %w`, err)}
		}
	}
	if cpu.mutation.CustomerCleared() && len(cpu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CustomerProfile.customer"`)
	}
	return nil
}

func (cpu *CustomerProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerprofile.Table, customerprofile.Columns, sqlgraph.NewFieldSpec(customerprofile.FieldID, field.TypeString))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.SetField(customerprofile.FieldName, field.TypeString, value)
	}
	if value, ok := cpu.mutation.ApprovalStatus(); ok {
		_spec.SetField(customerprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(customerprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.ApprovalMsgID(); ok {
		_spec.SetField(customerprofile.FieldApprovalMsgID, field.TypeString, value)
	}
	if cpu.mutation.ApprovalMsgIDCleared() {
		_spec.ClearField(customerprofile.FieldApprovalMsgID, field.TypeString)
	}
	if value, ok := cpu.mutation.ApprovalDate(); ok {
		_spec.SetField(customerprofile.FieldApprovalDate, field.TypeTime, value)
	}
	if cpu.mutation.ApprovalDateCleared() {
		_spec.ClearField(customerprofile.FieldApprovalDate, field.TypeTime)
	}
	if value, ok := cpu.mutation.OwnerType(); ok {
		_spec.SetField(customerprofile.FieldOwnerType, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedOwnerType(); ok {
		_spec.AddField(customerprofile.FieldOwnerType, field.TypeInt, value)
	}
	if cpu.mutation.OwnerTypeCleared() {
		_spec.ClearField(customerprofile.FieldOwnerType, field.TypeInt)
	}
	if value, ok := cpu.mutation.Industry(); ok {
		_spec.SetField(customerprofile.FieldIndustry, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedIndustry(); ok {
		_spec.AddField(customerprofile.FieldIndustry, field.TypeInt, value)
	}
	if cpu.mutation.IndustryCleared() {
		_spec.ClearField(customerprofile.FieldIndustry, field.TypeInt)
	}
	if value, ok := cpu.mutation.Size(); ok {
		_spec.SetField(customerprofile.FieldSize, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedSize(); ok {
		_spec.AddField(customerprofile.FieldSize, field.TypeInt, value)
	}
	if cpu.mutation.SizeCleared() {
		_spec.ClearField(customerprofile.FieldSize, field.TypeInt)
	}
	if value, ok := cpu.mutation.ContactPerson(); ok {
		_spec.SetField(customerprofile.FieldContactPerson, field.TypeString, value)
	}
	if cpu.mutation.ContactPersonCleared() {
		_spec.ClearField(customerprofile.FieldContactPerson, field.TypeString)
	}
	if value, ok := cpu.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPosition, field.TypeString, value)
	}
	if cpu.mutation.ContactPersonPositionCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonPosition, field.TypeString)
	}
	if value, ok := cpu.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPhone, field.TypeString, value)
	}
	if cpu.mutation.ContactPersonPhoneCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonPhone, field.TypeString)
	}
	if value, ok := cpu.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customerprofile.FieldContactPersonEmail, field.TypeString, value)
	}
	if cpu.mutation.ContactPersonEmailCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonEmail, field.TypeString)
	}
	if cpu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CustomerProfileUpdateOne is the builder for updating a single CustomerProfile entity.
type CustomerProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuo *CustomerProfileUpdateOne) SetUpdatedAt(t time.Time) *CustomerProfileUpdateOne {
	cpuo.mutation.SetUpdatedAt(t)
	return cpuo
}

// SetName sets the "name" field.
func (cpuo *CustomerProfileUpdateOne) SetName(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableName(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetName(*s)
	}
	return cpuo
}

// SetApprovalStatus sets the "approval_status" field.
func (cpuo *CustomerProfileUpdateOne) SetApprovalStatus(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.ResetApprovalStatus()
	cpuo.mutation.SetApprovalStatus(i)
	return cpuo
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableApprovalStatus(i *int) *CustomerProfileUpdateOne {
	if i != nil {
		cpuo.SetApprovalStatus(*i)
	}
	return cpuo
}

// AddApprovalStatus adds i to the "approval_status" field.
func (cpuo *CustomerProfileUpdateOne) AddApprovalStatus(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.AddApprovalStatus(i)
	return cpuo
}

// SetApprovalMsgID sets the "approval_msg_id" field.
func (cpuo *CustomerProfileUpdateOne) SetApprovalMsgID(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetApprovalMsgID(s)
	return cpuo
}

// SetNillableApprovalMsgID sets the "approval_msg_id" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableApprovalMsgID(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetApprovalMsgID(*s)
	}
	return cpuo
}

// ClearApprovalMsgID clears the value of the "approval_msg_id" field.
func (cpuo *CustomerProfileUpdateOne) ClearApprovalMsgID() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearApprovalMsgID()
	return cpuo
}

// SetApprovalDate sets the "approval_date" field.
func (cpuo *CustomerProfileUpdateOne) SetApprovalDate(t time.Time) *CustomerProfileUpdateOne {
	cpuo.mutation.SetApprovalDate(t)
	return cpuo
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableApprovalDate(t *time.Time) *CustomerProfileUpdateOne {
	if t != nil {
		cpuo.SetApprovalDate(*t)
	}
	return cpuo
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (cpuo *CustomerProfileUpdateOne) ClearApprovalDate() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearApprovalDate()
	return cpuo
}

// SetOwnerType sets the "owner_type" field.
func (cpuo *CustomerProfileUpdateOne) SetOwnerType(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.ResetOwnerType()
	cpuo.mutation.SetOwnerType(i)
	return cpuo
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableOwnerType(i *int) *CustomerProfileUpdateOne {
	if i != nil {
		cpuo.SetOwnerType(*i)
	}
	return cpuo
}

// AddOwnerType adds i to the "owner_type" field.
func (cpuo *CustomerProfileUpdateOne) AddOwnerType(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.AddOwnerType(i)
	return cpuo
}

// ClearOwnerType clears the value of the "owner_type" field.
func (cpuo *CustomerProfileUpdateOne) ClearOwnerType() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearOwnerType()
	return cpuo
}

// SetIndustry sets the "industry" field.
func (cpuo *CustomerProfileUpdateOne) SetIndustry(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.ResetIndustry()
	cpuo.mutation.SetIndustry(i)
	return cpuo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableIndustry(i *int) *CustomerProfileUpdateOne {
	if i != nil {
		cpuo.SetIndustry(*i)
	}
	return cpuo
}

// AddIndustry adds i to the "industry" field.
func (cpuo *CustomerProfileUpdateOne) AddIndustry(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.AddIndustry(i)
	return cpuo
}

// ClearIndustry clears the value of the "industry" field.
func (cpuo *CustomerProfileUpdateOne) ClearIndustry() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearIndustry()
	return cpuo
}

// SetSize sets the "size" field.
func (cpuo *CustomerProfileUpdateOne) SetSize(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.ResetSize()
	cpuo.mutation.SetSize(i)
	return cpuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableSize(i *int) *CustomerProfileUpdateOne {
	if i != nil {
		cpuo.SetSize(*i)
	}
	return cpuo
}

// AddSize adds i to the "size" field.
func (cpuo *CustomerProfileUpdateOne) AddSize(i int) *CustomerProfileUpdateOne {
	cpuo.mutation.AddSize(i)
	return cpuo
}

// ClearSize clears the value of the "size" field.
func (cpuo *CustomerProfileUpdateOne) ClearSize() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearSize()
	return cpuo
}

// SetContactPerson sets the "contact_person" field.
func (cpuo *CustomerProfileUpdateOne) SetContactPerson(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetContactPerson(s)
	return cpuo
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableContactPerson(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetContactPerson(*s)
	}
	return cpuo
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cpuo *CustomerProfileUpdateOne) ClearContactPerson() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearContactPerson()
	return cpuo
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cpuo *CustomerProfileUpdateOne) SetContactPersonPosition(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetContactPersonPosition(s)
	return cpuo
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableContactPersonPosition(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetContactPersonPosition(*s)
	}
	return cpuo
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (cpuo *CustomerProfileUpdateOne) ClearContactPersonPosition() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearContactPersonPosition()
	return cpuo
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cpuo *CustomerProfileUpdateOne) SetContactPersonPhone(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetContactPersonPhone(s)
	return cpuo
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableContactPersonPhone(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetContactPersonPhone(*s)
	}
	return cpuo
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (cpuo *CustomerProfileUpdateOne) ClearContactPersonPhone() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearContactPersonPhone()
	return cpuo
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cpuo *CustomerProfileUpdateOne) SetContactPersonEmail(s string) *CustomerProfileUpdateOne {
	cpuo.mutation.SetContactPersonEmail(s)
	return cpuo
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableContactPersonEmail(s *string) *CustomerProfileUpdateOne {
	if s != nil {
		cpuo.SetContactPersonEmail(*s)
	}
	return cpuo
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (cpuo *CustomerProfileUpdateOne) ClearContactPersonEmail() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearContactPersonEmail()
	return cpuo
}

// SetSalesID sets the "sales_id" field.
func (cpuo *CustomerProfileUpdateOne) SetSalesID(x xid.ID) *CustomerProfileUpdateOne {
	cpuo.mutation.SetSalesID(x)
	return cpuo
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableSalesID(x *xid.ID) *CustomerProfileUpdateOne {
	if x != nil {
		cpuo.SetSalesID(*x)
	}
	return cpuo
}

// ClearSalesID clears the value of the "sales_id" field.
func (cpuo *CustomerProfileUpdateOne) ClearSalesID() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearSalesID()
	return cpuo
}

// SetCustomerID sets the "customer_id" field.
func (cpuo *CustomerProfileUpdateOne) SetCustomerID(x xid.ID) *CustomerProfileUpdateOne {
	cpuo.mutation.SetCustomerID(x)
	return cpuo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableCustomerID(x *xid.ID) *CustomerProfileUpdateOne {
	if x != nil {
		cpuo.SetCustomerID(*x)
	}
	return cpuo
}

// SetCreatedByID sets the "created_by_id" field.
func (cpuo *CustomerProfileUpdateOne) SetCreatedByID(x xid.ID) *CustomerProfileUpdateOne {
	cpuo.mutation.SetCreatedByID(x)
	return cpuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableCreatedByID(x *xid.ID) *CustomerProfileUpdateOne {
	if x != nil {
		cpuo.SetCreatedByID(*x)
	}
	return cpuo
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (cpuo *CustomerProfileUpdateOne) ClearCreatedByID() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearCreatedByID()
	return cpuo
}

// SetApproverID sets the "approver_id" field.
func (cpuo *CustomerProfileUpdateOne) SetApproverID(x xid.ID) *CustomerProfileUpdateOne {
	cpuo.mutation.SetApproverID(x)
	return cpuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cpuo *CustomerProfileUpdateOne) SetNillableApproverID(x *xid.ID) *CustomerProfileUpdateOne {
	if x != nil {
		cpuo.SetApproverID(*x)
	}
	return cpuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (cpuo *CustomerProfileUpdateOne) ClearApproverID() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearApproverID()
	return cpuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cpuo *CustomerProfileUpdateOne) SetCustomer(c *Customer) *CustomerProfileUpdateOne {
	return cpuo.SetCustomerID(c.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) SetCreatedBy(u *User) *CustomerProfileUpdateOne {
	return cpuo.SetCreatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) SetApprover(u *User) *CustomerProfileUpdateOne {
	return cpuo.SetApproverID(u.ID)
}

// SetSales sets the "sales" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) SetSales(u *User) *CustomerProfileUpdateOne {
	return cpuo.SetSalesID(u.ID)
}

// Mutation returns the CustomerProfileMutation object of the builder.
func (cpuo *CustomerProfileUpdateOne) Mutation() *CustomerProfileMutation {
	return cpuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cpuo *CustomerProfileUpdateOne) ClearCustomer() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearCustomer()
	return cpuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) ClearCreatedBy() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearCreatedBy()
	return cpuo
}

// ClearApprover clears the "approver" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) ClearApprover() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearApprover()
	return cpuo
}

// ClearSales clears the "sales" edge to the User entity.
func (cpuo *CustomerProfileUpdateOne) ClearSales() *CustomerProfileUpdateOne {
	cpuo.mutation.ClearSales()
	return cpuo
}

// Where appends a list predicates to the CustomerProfileUpdate builder.
func (cpuo *CustomerProfileUpdateOne) Where(ps ...predicate.CustomerProfile) *CustomerProfileUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CustomerProfileUpdateOne) Select(field string, fields ...string) *CustomerProfileUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CustomerProfile entity.
func (cpuo *CustomerProfileUpdateOne) Save(ctx context.Context) (*CustomerProfile, error) {
	cpuo.defaults()
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CustomerProfileUpdateOne) SaveX(ctx context.Context) *CustomerProfile {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CustomerProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CustomerProfileUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuo *CustomerProfileUpdateOne) defaults() {
	if _, ok := cpuo.mutation.UpdatedAt(); !ok {
		v := customerprofile.UpdateDefaultUpdatedAt()
		cpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CustomerProfileUpdateOne) check() error {
	if v, ok := cpuo.mutation.Name(); ok {
		if err := customerprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.name": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.ApprovalStatus(); ok {
		if err := customerprofile.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "CustomerProfile.approval_status": %w`, err)}
		}
	}
	if cpuo.mutation.CustomerCleared() && len(cpuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CustomerProfile.customer"`)
	}
	return nil
}

func (cpuo *CustomerProfileUpdateOne) sqlSave(ctx context.Context) (_node *CustomerProfile, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerprofile.Table, customerprofile.Columns, sqlgraph.NewFieldSpec(customerprofile.FieldID, field.TypeString))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerprofile.FieldID)
		for _, f := range fields {
			if !customerprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.SetField(customerprofile.FieldName, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.ApprovalStatus(); ok {
		_spec.SetField(customerprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(customerprofile.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.ApprovalMsgID(); ok {
		_spec.SetField(customerprofile.FieldApprovalMsgID, field.TypeString, value)
	}
	if cpuo.mutation.ApprovalMsgIDCleared() {
		_spec.ClearField(customerprofile.FieldApprovalMsgID, field.TypeString)
	}
	if value, ok := cpuo.mutation.ApprovalDate(); ok {
		_spec.SetField(customerprofile.FieldApprovalDate, field.TypeTime, value)
	}
	if cpuo.mutation.ApprovalDateCleared() {
		_spec.ClearField(customerprofile.FieldApprovalDate, field.TypeTime)
	}
	if value, ok := cpuo.mutation.OwnerType(); ok {
		_spec.SetField(customerprofile.FieldOwnerType, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedOwnerType(); ok {
		_spec.AddField(customerprofile.FieldOwnerType, field.TypeInt, value)
	}
	if cpuo.mutation.OwnerTypeCleared() {
		_spec.ClearField(customerprofile.FieldOwnerType, field.TypeInt)
	}
	if value, ok := cpuo.mutation.Industry(); ok {
		_spec.SetField(customerprofile.FieldIndustry, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedIndustry(); ok {
		_spec.AddField(customerprofile.FieldIndustry, field.TypeInt, value)
	}
	if cpuo.mutation.IndustryCleared() {
		_spec.ClearField(customerprofile.FieldIndustry, field.TypeInt)
	}
	if value, ok := cpuo.mutation.Size(); ok {
		_spec.SetField(customerprofile.FieldSize, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedSize(); ok {
		_spec.AddField(customerprofile.FieldSize, field.TypeInt, value)
	}
	if cpuo.mutation.SizeCleared() {
		_spec.ClearField(customerprofile.FieldSize, field.TypeInt)
	}
	if value, ok := cpuo.mutation.ContactPerson(); ok {
		_spec.SetField(customerprofile.FieldContactPerson, field.TypeString, value)
	}
	if cpuo.mutation.ContactPersonCleared() {
		_spec.ClearField(customerprofile.FieldContactPerson, field.TypeString)
	}
	if value, ok := cpuo.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPosition, field.TypeString, value)
	}
	if cpuo.mutation.ContactPersonPositionCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonPosition, field.TypeString)
	}
	if value, ok := cpuo.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customerprofile.FieldContactPersonPhone, field.TypeString, value)
	}
	if cpuo.mutation.ContactPersonPhoneCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonPhone, field.TypeString)
	}
	if value, ok := cpuo.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customerprofile.FieldContactPersonEmail, field.TypeString, value)
	}
	if cpuo.mutation.ContactPersonEmailCleared() {
		_spec.ClearField(customerprofile.FieldContactPersonEmail, field.TypeString)
	}
	if cpuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerprofile.CustomerTable,
			Columns: []string{customerprofile.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.CreatedByTable,
			Columns: []string{customerprofile.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.ApproverTable,
			Columns: []string{customerprofile.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerprofile.SalesTable,
			Columns: []string{customerprofile.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerProfile{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
