// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectstaff"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectStaffCreate is the builder for creating a ProjectStaff entity.
type ProjectStaffCreate struct {
	config
	mutation *ProjectStaffMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProjectStaffCreate) SetCreatedAt(t time.Time) *ProjectStaffCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableCreatedAt(t *time.Time) *ProjectStaffCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *ProjectStaffCreate) SetUpdatedAt(t time.Time) *ProjectStaffCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableUpdatedAt(t *time.Time) *ProjectStaffCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetCym sets the "cym" field.
func (psc *ProjectStaffCreate) SetCym(s string) *ProjectStaffCreate {
	psc.mutation.SetCym(s)
	return psc
}

// SetInstallation sets the "installation" field.
func (psc *ProjectStaffCreate) SetInstallation(f float64) *ProjectStaffCreate {
	psc.mutation.SetInstallation(f)
	return psc
}

// SetNillableInstallation sets the "installation" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableInstallation(f *float64) *ProjectStaffCreate {
	if f != nil {
		psc.SetInstallation(*f)
	}
	return psc
}

// SetManagement sets the "management" field.
func (psc *ProjectStaffCreate) SetManagement(f float64) *ProjectStaffCreate {
	psc.mutation.SetManagement(f)
	return psc
}

// SetNillableManagement sets the "management" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableManagement(f *float64) *ProjectStaffCreate {
	if f != nil {
		psc.SetManagement(*f)
	}
	return psc
}

// SetDesign sets the "design" field.
func (psc *ProjectStaffCreate) SetDesign(f float64) *ProjectStaffCreate {
	psc.mutation.SetDesign(f)
	return psc
}

// SetNillableDesign sets the "design" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableDesign(f *float64) *ProjectStaffCreate {
	if f != nil {
		psc.SetDesign(*f)
	}
	return psc
}

// SetProjectID sets the "project_id" field.
func (psc *ProjectStaffCreate) SetProjectID(x xid.ID) *ProjectStaffCreate {
	psc.mutation.SetProjectID(x)
	return psc
}

// SetID sets the "id" field.
func (psc *ProjectStaffCreate) SetID(x xid.ID) *ProjectStaffCreate {
	psc.mutation.SetID(x)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *ProjectStaffCreate) SetNillableID(x *xid.ID) *ProjectStaffCreate {
	if x != nil {
		psc.SetID(*x)
	}
	return psc
}

// SetProject sets the "project" edge to the Project entity.
func (psc *ProjectStaffCreate) SetProject(p *Project) *ProjectStaffCreate {
	return psc.SetProjectID(p.ID)
}

// Mutation returns the ProjectStaffMutation object of the builder.
func (psc *ProjectStaffCreate) Mutation() *ProjectStaffMutation {
	return psc.mutation
}

// Save creates the ProjectStaff in the database.
func (psc *ProjectStaffCreate) Save(ctx context.Context) (*ProjectStaff, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProjectStaffCreate) SaveX(ctx context.Context) *ProjectStaff {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProjectStaffCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProjectStaffCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProjectStaffCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := projectstaff.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := projectstaff.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		v := projectstaff.DefaultID()
		psc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProjectStaffCreate) check() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectStaff.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectStaff.updated_at"`)}
	}
	if _, ok := psc.mutation.Cym(); !ok {
		return &ValidationError{Name: "cym", err: errors.New(`ent: missing required field "ProjectStaff.cym"`)}
	}
	if _, ok := psc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectStaff.project_id"`)}
	}
	if len(psc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectStaff.project"`)}
	}
	return nil
}

func (psc *ProjectStaffCreate) sqlSave(ctx context.Context) (*ProjectStaff, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProjectStaffCreate) createSpec() (*ProjectStaff, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectStaff{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(projectstaff.Table, sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString))
	)
	_spec.OnConflict = psc.conflict
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(projectstaff.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectstaff.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Cym(); ok {
		_spec.SetField(projectstaff.FieldCym, field.TypeString, value)
		_node.Cym = value
	}
	if value, ok := psc.mutation.Installation(); ok {
		_spec.SetField(projectstaff.FieldInstallation, field.TypeFloat64, value)
		_node.Installation = &value
	}
	if value, ok := psc.mutation.Management(); ok {
		_spec.SetField(projectstaff.FieldManagement, field.TypeFloat64, value)
		_node.Management = &value
	}
	if value, ok := psc.mutation.Design(); ok {
		_spec.SetField(projectstaff.FieldDesign, field.TypeFloat64, value)
		_node.Design = &value
	}
	if nodes := psc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectstaff.ProjectTable,
			Columns: []string{projectstaff.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectStaff.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectStaffUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psc *ProjectStaffCreate) OnConflict(opts ...sql.ConflictOption) *ProjectStaffUpsertOne {
	psc.conflict = opts
	return &ProjectStaffUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *ProjectStaffCreate) OnConflictColumns(columns ...string) *ProjectStaffUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &ProjectStaffUpsertOne{
		create: psc,
	}
}

type (
	// ProjectStaffUpsertOne is the builder for "upsert"-ing
	//  one ProjectStaff node.
	ProjectStaffUpsertOne struct {
		create *ProjectStaffCreate
	}

	// ProjectStaffUpsert is the "OnConflict" setter.
	ProjectStaffUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectStaffUpsert) SetUpdatedAt(v time.Time) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateUpdatedAt() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldUpdatedAt)
	return u
}

// SetCym sets the "cym" field.
func (u *ProjectStaffUpsert) SetCym(v string) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldCym, v)
	return u
}

// UpdateCym sets the "cym" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateCym() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldCym)
	return u
}

// SetInstallation sets the "installation" field.
func (u *ProjectStaffUpsert) SetInstallation(v float64) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldInstallation, v)
	return u
}

// UpdateInstallation sets the "installation" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateInstallation() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldInstallation)
	return u
}

// AddInstallation adds v to the "installation" field.
func (u *ProjectStaffUpsert) AddInstallation(v float64) *ProjectStaffUpsert {
	u.Add(projectstaff.FieldInstallation, v)
	return u
}

// ClearInstallation clears the value of the "installation" field.
func (u *ProjectStaffUpsert) ClearInstallation() *ProjectStaffUpsert {
	u.SetNull(projectstaff.FieldInstallation)
	return u
}

// SetManagement sets the "management" field.
func (u *ProjectStaffUpsert) SetManagement(v float64) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldManagement, v)
	return u
}

// UpdateManagement sets the "management" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateManagement() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldManagement)
	return u
}

// AddManagement adds v to the "management" field.
func (u *ProjectStaffUpsert) AddManagement(v float64) *ProjectStaffUpsert {
	u.Add(projectstaff.FieldManagement, v)
	return u
}

// ClearManagement clears the value of the "management" field.
func (u *ProjectStaffUpsert) ClearManagement() *ProjectStaffUpsert {
	u.SetNull(projectstaff.FieldManagement)
	return u
}

// SetDesign sets the "design" field.
func (u *ProjectStaffUpsert) SetDesign(v float64) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldDesign, v)
	return u
}

// UpdateDesign sets the "design" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateDesign() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldDesign)
	return u
}

// AddDesign adds v to the "design" field.
func (u *ProjectStaffUpsert) AddDesign(v float64) *ProjectStaffUpsert {
	u.Add(projectstaff.FieldDesign, v)
	return u
}

// ClearDesign clears the value of the "design" field.
func (u *ProjectStaffUpsert) ClearDesign() *ProjectStaffUpsert {
	u.SetNull(projectstaff.FieldDesign)
	return u
}

// SetProjectID sets the "project_id" field.
func (u *ProjectStaffUpsert) SetProjectID(v xid.ID) *ProjectStaffUpsert {
	u.Set(projectstaff.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectStaffUpsert) UpdateProjectID() *ProjectStaffUpsert {
	u.SetExcluded(projectstaff.FieldProjectID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectstaff.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectStaffUpsertOne) UpdateNewValues() *ProjectStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(projectstaff.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(projectstaff.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectStaffUpsertOne) Ignore() *ProjectStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectStaffUpsertOne) DoNothing() *ProjectStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectStaffCreate.OnConflict
// documentation for more info.
func (u *ProjectStaffUpsertOne) Update(set func(*ProjectStaffUpsert)) *ProjectStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectStaffUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectStaffUpsertOne) SetUpdatedAt(v time.Time) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateUpdatedAt() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCym sets the "cym" field.
func (u *ProjectStaffUpsertOne) SetCym(v string) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetCym(v)
	})
}

// UpdateCym sets the "cym" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateCym() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateCym()
	})
}

// SetInstallation sets the "installation" field.
func (u *ProjectStaffUpsertOne) SetInstallation(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetInstallation(v)
	})
}

// AddInstallation adds v to the "installation" field.
func (u *ProjectStaffUpsertOne) AddInstallation(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddInstallation(v)
	})
}

// UpdateInstallation sets the "installation" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateInstallation() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateInstallation()
	})
}

// ClearInstallation clears the value of the "installation" field.
func (u *ProjectStaffUpsertOne) ClearInstallation() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearInstallation()
	})
}

// SetManagement sets the "management" field.
func (u *ProjectStaffUpsertOne) SetManagement(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetManagement(v)
	})
}

// AddManagement adds v to the "management" field.
func (u *ProjectStaffUpsertOne) AddManagement(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddManagement(v)
	})
}

// UpdateManagement sets the "management" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateManagement() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateManagement()
	})
}

// ClearManagement clears the value of the "management" field.
func (u *ProjectStaffUpsertOne) ClearManagement() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearManagement()
	})
}

// SetDesign sets the "design" field.
func (u *ProjectStaffUpsertOne) SetDesign(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetDesign(v)
	})
}

// AddDesign adds v to the "design" field.
func (u *ProjectStaffUpsertOne) AddDesign(v float64) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddDesign(v)
	})
}

// UpdateDesign sets the "design" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateDesign() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateDesign()
	})
}

// ClearDesign clears the value of the "design" field.
func (u *ProjectStaffUpsertOne) ClearDesign() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearDesign()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ProjectStaffUpsertOne) SetProjectID(v xid.ID) *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectStaffUpsertOne) UpdateProjectID() *ProjectStaffUpsertOne {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateProjectID()
	})
}

// Exec executes the query.
func (u *ProjectStaffUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectStaffCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectStaffUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectStaffUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectStaffUpsertOne.ID is not supported by MySQL driver. Use ProjectStaffUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectStaffUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectStaffCreateBulk is the builder for creating many ProjectStaff entities in bulk.
type ProjectStaffCreateBulk struct {
	config
	err      error
	builders []*ProjectStaffCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectStaff entities in the database.
func (pscb *ProjectStaffCreateBulk) Save(ctx context.Context) ([]*ProjectStaff, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProjectStaff, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectStaffMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProjectStaffCreateBulk) SaveX(ctx context.Context) []*ProjectStaff {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProjectStaffCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProjectStaffCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectStaff.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectStaffUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pscb *ProjectStaffCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectStaffUpsertBulk {
	pscb.conflict = opts
	return &ProjectStaffUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *ProjectStaffCreateBulk) OnConflictColumns(columns ...string) *ProjectStaffUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &ProjectStaffUpsertBulk{
		create: pscb,
	}
}

// ProjectStaffUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectStaff nodes.
type ProjectStaffUpsertBulk struct {
	create *ProjectStaffCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectstaff.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectStaffUpsertBulk) UpdateNewValues() *ProjectStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(projectstaff.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(projectstaff.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectStaff.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectStaffUpsertBulk) Ignore() *ProjectStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectStaffUpsertBulk) DoNothing() *ProjectStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectStaffCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectStaffUpsertBulk) Update(set func(*ProjectStaffUpsert)) *ProjectStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectStaffUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectStaffUpsertBulk) SetUpdatedAt(v time.Time) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateUpdatedAt() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCym sets the "cym" field.
func (u *ProjectStaffUpsertBulk) SetCym(v string) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetCym(v)
	})
}

// UpdateCym sets the "cym" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateCym() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateCym()
	})
}

// SetInstallation sets the "installation" field.
func (u *ProjectStaffUpsertBulk) SetInstallation(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetInstallation(v)
	})
}

// AddInstallation adds v to the "installation" field.
func (u *ProjectStaffUpsertBulk) AddInstallation(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddInstallation(v)
	})
}

// UpdateInstallation sets the "installation" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateInstallation() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateInstallation()
	})
}

// ClearInstallation clears the value of the "installation" field.
func (u *ProjectStaffUpsertBulk) ClearInstallation() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearInstallation()
	})
}

// SetManagement sets the "management" field.
func (u *ProjectStaffUpsertBulk) SetManagement(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetManagement(v)
	})
}

// AddManagement adds v to the "management" field.
func (u *ProjectStaffUpsertBulk) AddManagement(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddManagement(v)
	})
}

// UpdateManagement sets the "management" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateManagement() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateManagement()
	})
}

// ClearManagement clears the value of the "management" field.
func (u *ProjectStaffUpsertBulk) ClearManagement() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearManagement()
	})
}

// SetDesign sets the "design" field.
func (u *ProjectStaffUpsertBulk) SetDesign(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetDesign(v)
	})
}

// AddDesign adds v to the "design" field.
func (u *ProjectStaffUpsertBulk) AddDesign(v float64) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.AddDesign(v)
	})
}

// UpdateDesign sets the "design" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateDesign() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateDesign()
	})
}

// ClearDesign clears the value of the "design" field.
func (u *ProjectStaffUpsertBulk) ClearDesign() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.ClearDesign()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ProjectStaffUpsertBulk) SetProjectID(v xid.ID) *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectStaffUpsertBulk) UpdateProjectID() *ProjectStaffUpsertBulk {
	return u.Update(func(s *ProjectStaffUpsert) {
		s.UpdateProjectID()
	})
}

// Exec executes the query.
func (u *ProjectStaffUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectStaffCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectStaffCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectStaffUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
