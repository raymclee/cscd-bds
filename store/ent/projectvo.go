// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProjectVO is the model entity for the ProjectVO schema.
type ProjectVO struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID xid.ID `json:"project_id,omitempty"`
	// 变更类型
	ChangeType int `json:"change_type,omitempty"`
	// 是否已批复
	IsApproved bool `json:"is_approved,omitempty"`
	// 安装进度
	Azjd *float64 `json:"azjd,omitempty"`
	// 有效合约总额
	Yxhyze *float64 `json:"yxhyze,omitempty"`
	// 申请总额
	ApplyAmount *float64 `json:"apply_amount,omitempty"`
	// 批复总额
	ApproveAmount *float64 `json:"approve_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectVOQuery when eager-loading is set.
	Edges        ProjectVOEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectVOEdges holds the relations/edges for other nodes in the graph.
type ProjectVOEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectVOEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectVO) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectvo.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case projectvo.FieldAzjd, projectvo.FieldYxhyze, projectvo.FieldApplyAmount, projectvo.FieldApproveAmount:
			values[i] = new(sql.NullFloat64)
		case projectvo.FieldChangeType:
			values[i] = new(sql.NullInt64)
		case projectvo.FieldCreatedAt, projectvo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectvo.FieldID, projectvo.FieldProjectID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectVO fields.
func (pv *ProjectVO) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectvo.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pv.ID = *value
			}
		case projectvo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pv.CreatedAt = value.Time
			}
		case projectvo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pv.UpdatedAt = value.Time
			}
		case projectvo.FieldProjectID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pv.ProjectID = *value
			}
		case projectvo.FieldChangeType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field change_type", values[i])
			} else if value.Valid {
				pv.ChangeType = int(value.Int64)
			}
		case projectvo.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				pv.IsApproved = value.Bool
			}
		case projectvo.FieldAzjd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field azjd", values[i])
			} else if value.Valid {
				pv.Azjd = new(float64)
				*pv.Azjd = value.Float64
			}
		case projectvo.FieldYxhyze:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field yxhyze", values[i])
			} else if value.Valid {
				pv.Yxhyze = new(float64)
				*pv.Yxhyze = value.Float64
			}
		case projectvo.FieldApplyAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field apply_amount", values[i])
			} else if value.Valid {
				pv.ApplyAmount = new(float64)
				*pv.ApplyAmount = value.Float64
			}
		case projectvo.FieldApproveAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field approve_amount", values[i])
			} else if value.Valid {
				pv.ApproveAmount = new(float64)
				*pv.ApproveAmount = value.Float64
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectVO.
// This includes values selected through modifiers, order, etc.
func (pv *ProjectVO) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectVO entity.
func (pv *ProjectVO) QueryProject() *ProjectQuery {
	return NewProjectVOClient(pv.config).QueryProject(pv)
}

// Update returns a builder for updating this ProjectVO.
// Note that you need to call ProjectVO.Unwrap() before calling this method if this ProjectVO
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProjectVO) Update() *ProjectVOUpdateOne {
	return NewProjectVOClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProjectVO entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProjectVO) Unwrap() *ProjectVO {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectVO is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProjectVO) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectVO(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("change_type=")
	builder.WriteString(fmt.Sprintf("%v", pv.ChangeType))
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", pv.IsApproved))
	builder.WriteString(", ")
	if v := pv.Azjd; v != nil {
		builder.WriteString("azjd=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.Yxhyze; v != nil {
		builder.WriteString("yxhyze=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.ApplyAmount; v != nil {
		builder.WriteString("apply_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pv.ApproveAmount; v != nil {
		builder.WriteString("approve_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProjectVOs is a parsable slice of ProjectVO.
type ProjectVOs []*ProjectVO
