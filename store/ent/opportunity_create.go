// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/opportunity"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpportunityCreate is the builder for creating a Opportunity entity.
type OpportunityCreate struct {
	config
	mutation *OpportunityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OpportunityCreate) SetCreatedAt(t time.Time) *OpportunityCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OpportunityCreate) SetNillableCreatedAt(t *time.Time) *OpportunityCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OpportunityCreate) SetUpdatedAt(t time.Time) *OpportunityCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OpportunityCreate) SetNillableUpdatedAt(t *time.Time) *OpportunityCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetRegistrationNumber sets the "registration_number" field.
func (oc *OpportunityCreate) SetRegistrationNumber(s string) *OpportunityCreate {
	oc.mutation.SetRegistrationNumber(s)
	return oc
}

// SetID sets the "id" field.
func (oc *OpportunityCreate) SetID(x xid.ID) *OpportunityCreate {
	oc.mutation.SetID(x)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OpportunityCreate) SetNillableID(x *xid.ID) *OpportunityCreate {
	if x != nil {
		oc.SetID(*x)
	}
	return oc
}

// Mutation returns the OpportunityMutation object of the builder.
func (oc *OpportunityCreate) Mutation() *OpportunityMutation {
	return oc.mutation
}

// Save creates the Opportunity in the database.
func (oc *OpportunityCreate) Save(ctx context.Context) (*Opportunity, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OpportunityCreate) SaveX(ctx context.Context) *Opportunity {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OpportunityCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OpportunityCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OpportunityCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := opportunity.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := opportunity.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := opportunity.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OpportunityCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Opportunity.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Opportunity.updated_at"`)}
	}
	if _, ok := oc.mutation.RegistrationNumber(); !ok {
		return &ValidationError{Name: "registration_number", err: errors.New(`ent: missing required field "Opportunity.registration_number"`)}
	}
	return nil
}

func (oc *OpportunityCreate) sqlSave(ctx context.Context) (*Opportunity, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OpportunityCreate) createSpec() (*Opportunity, *sqlgraph.CreateSpec) {
	var (
		_node = &Opportunity{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(opportunity.Table, sqlgraph.NewFieldSpec(opportunity.FieldID, field.TypeString))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(opportunity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(opportunity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.RegistrationNumber(); ok {
		_spec.SetField(opportunity.FieldRegistrationNumber, field.TypeString, value)
		_node.RegistrationNumber = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Opportunity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OpportunityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *OpportunityCreate) OnConflict(opts ...sql.ConflictOption) *OpportunityUpsertOne {
	oc.conflict = opts
	return &OpportunityUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OpportunityCreate) OnConflictColumns(columns ...string) *OpportunityUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OpportunityUpsertOne{
		create: oc,
	}
}

type (
	// OpportunityUpsertOne is the builder for "upsert"-ing
	//  one Opportunity node.
	OpportunityUpsertOne struct {
		create *OpportunityCreate
	}

	// OpportunityUpsert is the "OnConflict" setter.
	OpportunityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OpportunityUpsert) SetUpdatedAt(v time.Time) *OpportunityUpsert {
	u.Set(opportunity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpportunityUpsert) UpdateUpdatedAt() *OpportunityUpsert {
	u.SetExcluded(opportunity.FieldUpdatedAt)
	return u
}

// SetRegistrationNumber sets the "registration_number" field.
func (u *OpportunityUpsert) SetRegistrationNumber(v string) *OpportunityUpsert {
	u.Set(opportunity.FieldRegistrationNumber, v)
	return u
}

// UpdateRegistrationNumber sets the "registration_number" field to the value that was provided on create.
func (u *OpportunityUpsert) UpdateRegistrationNumber() *OpportunityUpsert {
	u.SetExcluded(opportunity.FieldRegistrationNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(opportunity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OpportunityUpsertOne) UpdateNewValues() *OpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(opportunity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(opportunity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OpportunityUpsertOne) Ignore() *OpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OpportunityUpsertOne) DoNothing() *OpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OpportunityCreate.OnConflict
// documentation for more info.
func (u *OpportunityUpsertOne) Update(set func(*OpportunityUpsert)) *OpportunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OpportunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OpportunityUpsertOne) SetUpdatedAt(v time.Time) *OpportunityUpsertOne {
	return u.Update(func(s *OpportunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpportunityUpsertOne) UpdateUpdatedAt() *OpportunityUpsertOne {
	return u.Update(func(s *OpportunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRegistrationNumber sets the "registration_number" field.
func (u *OpportunityUpsertOne) SetRegistrationNumber(v string) *OpportunityUpsertOne {
	return u.Update(func(s *OpportunityUpsert) {
		s.SetRegistrationNumber(v)
	})
}

// UpdateRegistrationNumber sets the "registration_number" field to the value that was provided on create.
func (u *OpportunityUpsertOne) UpdateRegistrationNumber() *OpportunityUpsertOne {
	return u.Update(func(s *OpportunityUpsert) {
		s.UpdateRegistrationNumber()
	})
}

// Exec executes the query.
func (u *OpportunityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OpportunityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OpportunityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OpportunityUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OpportunityUpsertOne.ID is not supported by MySQL driver. Use OpportunityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OpportunityUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OpportunityCreateBulk is the builder for creating many Opportunity entities in bulk.
type OpportunityCreateBulk struct {
	config
	err      error
	builders []*OpportunityCreate
	conflict []sql.ConflictOption
}

// Save creates the Opportunity entities in the database.
func (ocb *OpportunityCreateBulk) Save(ctx context.Context) ([]*Opportunity, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Opportunity, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OpportunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OpportunityCreateBulk) SaveX(ctx context.Context) []*Opportunity {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OpportunityCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OpportunityCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Opportunity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OpportunityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *OpportunityCreateBulk) OnConflict(opts ...sql.ConflictOption) *OpportunityUpsertBulk {
	ocb.conflict = opts
	return &OpportunityUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OpportunityCreateBulk) OnConflictColumns(columns ...string) *OpportunityUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OpportunityUpsertBulk{
		create: ocb,
	}
}

// OpportunityUpsertBulk is the builder for "upsert"-ing
// a bulk of Opportunity nodes.
type OpportunityUpsertBulk struct {
	create *OpportunityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(opportunity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OpportunityUpsertBulk) UpdateNewValues() *OpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(opportunity.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(opportunity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Opportunity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OpportunityUpsertBulk) Ignore() *OpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OpportunityUpsertBulk) DoNothing() *OpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OpportunityCreateBulk.OnConflict
// documentation for more info.
func (u *OpportunityUpsertBulk) Update(set func(*OpportunityUpsert)) *OpportunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OpportunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OpportunityUpsertBulk) SetUpdatedAt(v time.Time) *OpportunityUpsertBulk {
	return u.Update(func(s *OpportunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpportunityUpsertBulk) UpdateUpdatedAt() *OpportunityUpsertBulk {
	return u.Update(func(s *OpportunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRegistrationNumber sets the "registration_number" field.
func (u *OpportunityUpsertBulk) SetRegistrationNumber(v string) *OpportunityUpsertBulk {
	return u.Update(func(s *OpportunityUpsert) {
		s.SetRegistrationNumber(v)
	})
}

// UpdateRegistrationNumber sets the "registration_number" field to the value that was provided on create.
func (u *OpportunityUpsertBulk) UpdateRegistrationNumber() *OpportunityUpsertBulk {
	return u.Update(func(s *OpportunityUpsert) {
		s.UpdateRegistrationNumber()
	})
}

// Exec executes the query.
func (u *OpportunityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OpportunityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OpportunityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OpportunityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
