// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetOpenID sets the "open_id" field.
func (uu *UserUpdate) SetOpenID(s string) *UserUpdate {
	uu.mutation.SetOpenID(s)
	return uu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOpenID(s *string) *UserUpdate {
	if s != nil {
		uu.SetOpenID(*s)
	}
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// SetDisabled sets the "disabled" field.
func (uu *UserUpdate) SetDisabled(b bool) *UserUpdate {
	uu.mutation.SetDisabled(b)
	return uu
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDisabled(*b)
	}
	return uu
}

// SetIsAdmin sets the "is_admin" field.
func (uu *UserUpdate) SetIsAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsAdmin(b)
	return uu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsAdmin(*b)
	}
	return uu
}

// SetIsLeader sets the "is_leader" field.
func (uu *UserUpdate) SetIsLeader(b bool) *UserUpdate {
	uu.mutation.SetIsLeader(b)
	return uu
}

// SetNillableIsLeader sets the "is_leader" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsLeader(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsLeader(*b)
	}
	return uu
}

// SetLeaderID sets the "leader_id" field.
func (uu *UserUpdate) SetLeaderID(x xid.ID) *UserUpdate {
	uu.mutation.SetLeaderID(x)
	return uu
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLeaderID(x *xid.ID) *UserUpdate {
	if x != nil {
		uu.SetLeaderID(*x)
	}
	return uu
}

// ClearLeaderID clears the value of the "leader_id" field.
func (uu *UserUpdate) ClearLeaderID() *UserUpdate {
	uu.mutation.ClearLeaderID()
	return uu
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (uu *UserUpdate) AddAreaIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddAreaIDs(ids...)
	return uu
}

// AddAreas adds the "areas" edges to the Area entity.
func (uu *UserUpdate) AddAreas(a ...*Area) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAreaIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (uu *UserUpdate) AddCustomerIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddCustomerIDs(ids...)
	return uu
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (uu *UserUpdate) AddCustomers(c ...*Customer) *UserUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCustomerIDs(ids...)
}

// SetLeader sets the "leader" edge to the User entity.
func (uu *UserUpdate) SetLeader(u *User) *UserUpdate {
	return uu.SetLeaderID(u.ID)
}

// AddTeamMemberIDs adds the "team_members" edge to the User entity by IDs.
func (uu *UserUpdate) AddTeamMemberIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddTeamMemberIDs(ids...)
	return uu
}

// AddTeamMembers adds the "team_members" edges to the User entity.
func (uu *UserUpdate) AddTeamMembers(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddTeamMemberIDs(ids...)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (uu *UserUpdate) AddTenderIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddTenderIDs(ids...)
	return uu
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (uu *UserUpdate) AddTenders(t ...*Tender) *UserUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTenderIDs(ids...)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (uu *UserUpdate) AddVisitRecordIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.AddVisitRecordIDs(ids...)
	return uu
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (uu *UserUpdate) AddVisitRecords(v ...*VisitRecord) *UserUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVisitRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAreas clears all "areas" edges to the Area entity.
func (uu *UserUpdate) ClearAreas() *UserUpdate {
	uu.mutation.ClearAreas()
	return uu
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (uu *UserUpdate) RemoveAreaIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveAreaIDs(ids...)
	return uu
}

// RemoveAreas removes "areas" edges to Area entities.
func (uu *UserUpdate) RemoveAreas(a ...*Area) *UserUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAreaIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (uu *UserUpdate) ClearCustomers() *UserUpdate {
	uu.mutation.ClearCustomers()
	return uu
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (uu *UserUpdate) RemoveCustomerIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveCustomerIDs(ids...)
	return uu
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (uu *UserUpdate) RemoveCustomers(c ...*Customer) *UserUpdate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCustomerIDs(ids...)
}

// ClearLeader clears the "leader" edge to the User entity.
func (uu *UserUpdate) ClearLeader() *UserUpdate {
	uu.mutation.ClearLeader()
	return uu
}

// ClearTeamMembers clears all "team_members" edges to the User entity.
func (uu *UserUpdate) ClearTeamMembers() *UserUpdate {
	uu.mutation.ClearTeamMembers()
	return uu
}

// RemoveTeamMemberIDs removes the "team_members" edge to User entities by IDs.
func (uu *UserUpdate) RemoveTeamMemberIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveTeamMemberIDs(ids...)
	return uu
}

// RemoveTeamMembers removes "team_members" edges to User entities.
func (uu *UserUpdate) RemoveTeamMembers(u ...*User) *UserUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveTeamMemberIDs(ids...)
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (uu *UserUpdate) ClearTenders() *UserUpdate {
	uu.mutation.ClearTenders()
	return uu
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (uu *UserUpdate) RemoveTenderIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveTenderIDs(ids...)
	return uu
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (uu *UserUpdate) RemoveTenders(t ...*Tender) *UserUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTenderIDs(ids...)
}

// ClearVisitRecords clears all "visit_records" edges to the VisitRecord entity.
func (uu *UserUpdate) ClearVisitRecords() *UserUpdate {
	uu.mutation.ClearVisitRecords()
	return uu
}

// RemoveVisitRecordIDs removes the "visit_records" edge to VisitRecord entities by IDs.
func (uu *UserUpdate) RemoveVisitRecordIDs(ids ...xid.ID) *UserUpdate {
	uu.mutation.RemoveVisitRecordIDs(ids...)
	return uu
}

// RemoveVisitRecords removes "visit_records" edges to VisitRecord entities.
func (uu *UserUpdate) RemoveVisitRecords(v ...*VisitRecord) *UserUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVisitRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.Disabled(); ok {
		_spec.SetField(user.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsLeader(); ok {
		_spec.SetField(user.FieldIsLeader, field.TypeBool, value)
	}
	if uu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAreasIDs(); len(nodes) > 0 && !uu.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !uu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TeamMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTeamMembersIDs(); len(nodes) > 0 && !uu.mutation.TeamMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TeamMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTendersIDs(); len(nodes) > 0 && !uu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVisitRecordsIDs(); len(nodes) > 0 && !uu.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetOpenID sets the "open_id" field.
func (uuo *UserUpdateOne) SetOpenID(s string) *UserUpdateOne {
	uuo.mutation.SetOpenID(s)
	return uuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOpenID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOpenID(*s)
	}
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// SetDisabled sets the "disabled" field.
func (uuo *UserUpdateOne) SetDisabled(b bool) *UserUpdateOne {
	uuo.mutation.SetDisabled(b)
	return uuo
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDisabled(*b)
	}
	return uuo
}

// SetIsAdmin sets the "is_admin" field.
func (uuo *UserUpdateOne) SetIsAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsAdmin(b)
	return uuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsAdmin(*b)
	}
	return uuo
}

// SetIsLeader sets the "is_leader" field.
func (uuo *UserUpdateOne) SetIsLeader(b bool) *UserUpdateOne {
	uuo.mutation.SetIsLeader(b)
	return uuo
}

// SetNillableIsLeader sets the "is_leader" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsLeader(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsLeader(*b)
	}
	return uuo
}

// SetLeaderID sets the "leader_id" field.
func (uuo *UserUpdateOne) SetLeaderID(x xid.ID) *UserUpdateOne {
	uuo.mutation.SetLeaderID(x)
	return uuo
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLeaderID(x *xid.ID) *UserUpdateOne {
	if x != nil {
		uuo.SetLeaderID(*x)
	}
	return uuo
}

// ClearLeaderID clears the value of the "leader_id" field.
func (uuo *UserUpdateOne) ClearLeaderID() *UserUpdateOne {
	uuo.mutation.ClearLeaderID()
	return uuo
}

// AddAreaIDs adds the "areas" edge to the Area entity by IDs.
func (uuo *UserUpdateOne) AddAreaIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddAreaIDs(ids...)
	return uuo
}

// AddAreas adds the "areas" edges to the Area entity.
func (uuo *UserUpdateOne) AddAreas(a ...*Area) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAreaIDs(ids...)
}

// AddCustomerIDs adds the "customers" edge to the Customer entity by IDs.
func (uuo *UserUpdateOne) AddCustomerIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddCustomerIDs(ids...)
	return uuo
}

// AddCustomers adds the "customers" edges to the Customer entity.
func (uuo *UserUpdateOne) AddCustomers(c ...*Customer) *UserUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCustomerIDs(ids...)
}

// SetLeader sets the "leader" edge to the User entity.
func (uuo *UserUpdateOne) SetLeader(u *User) *UserUpdateOne {
	return uuo.SetLeaderID(u.ID)
}

// AddTeamMemberIDs adds the "team_members" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddTeamMemberIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddTeamMemberIDs(ids...)
	return uuo
}

// AddTeamMembers adds the "team_members" edges to the User entity.
func (uuo *UserUpdateOne) AddTeamMembers(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddTeamMemberIDs(ids...)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (uuo *UserUpdateOne) AddTenderIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddTenderIDs(ids...)
	return uuo
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (uuo *UserUpdateOne) AddTenders(t ...*Tender) *UserUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTenderIDs(ids...)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (uuo *UserUpdateOne) AddVisitRecordIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.AddVisitRecordIDs(ids...)
	return uuo
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (uuo *UserUpdateOne) AddVisitRecords(v ...*VisitRecord) *UserUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVisitRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAreas clears all "areas" edges to the Area entity.
func (uuo *UserUpdateOne) ClearAreas() *UserUpdateOne {
	uuo.mutation.ClearAreas()
	return uuo
}

// RemoveAreaIDs removes the "areas" edge to Area entities by IDs.
func (uuo *UserUpdateOne) RemoveAreaIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAreaIDs(ids...)
	return uuo
}

// RemoveAreas removes "areas" edges to Area entities.
func (uuo *UserUpdateOne) RemoveAreas(a ...*Area) *UserUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAreaIDs(ids...)
}

// ClearCustomers clears all "customers" edges to the Customer entity.
func (uuo *UserUpdateOne) ClearCustomers() *UserUpdateOne {
	uuo.mutation.ClearCustomers()
	return uuo
}

// RemoveCustomerIDs removes the "customers" edge to Customer entities by IDs.
func (uuo *UserUpdateOne) RemoveCustomerIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveCustomerIDs(ids...)
	return uuo
}

// RemoveCustomers removes "customers" edges to Customer entities.
func (uuo *UserUpdateOne) RemoveCustomers(c ...*Customer) *UserUpdateOne {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCustomerIDs(ids...)
}

// ClearLeader clears the "leader" edge to the User entity.
func (uuo *UserUpdateOne) ClearLeader() *UserUpdateOne {
	uuo.mutation.ClearLeader()
	return uuo
}

// ClearTeamMembers clears all "team_members" edges to the User entity.
func (uuo *UserUpdateOne) ClearTeamMembers() *UserUpdateOne {
	uuo.mutation.ClearTeamMembers()
	return uuo
}

// RemoveTeamMemberIDs removes the "team_members" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveTeamMemberIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveTeamMemberIDs(ids...)
	return uuo
}

// RemoveTeamMembers removes "team_members" edges to User entities.
func (uuo *UserUpdateOne) RemoveTeamMembers(u ...*User) *UserUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveTeamMemberIDs(ids...)
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (uuo *UserUpdateOne) ClearTenders() *UserUpdateOne {
	uuo.mutation.ClearTenders()
	return uuo
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (uuo *UserUpdateOne) RemoveTenderIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveTenderIDs(ids...)
	return uuo
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (uuo *UserUpdateOne) RemoveTenders(t ...*Tender) *UserUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTenderIDs(ids...)
}

// ClearVisitRecords clears all "visit_records" edges to the VisitRecord entity.
func (uuo *UserUpdateOne) ClearVisitRecords() *UserUpdateOne {
	uuo.mutation.ClearVisitRecords()
	return uuo
}

// RemoveVisitRecordIDs removes the "visit_records" edge to VisitRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveVisitRecordIDs(ids ...xid.ID) *UserUpdateOne {
	uuo.mutation.RemoveVisitRecordIDs(ids...)
	return uuo
}

// RemoveVisitRecords removes "visit_records" edges to VisitRecord entities.
func (uuo *UserUpdateOne) RemoveVisitRecords(v ...*VisitRecord) *UserUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVisitRecordIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Disabled(); ok {
		_spec.SetField(user.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsLeader(); ok {
		_spec.SetField(user.FieldIsLeader, field.TypeBool, value)
	}
	if uuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAreasIDs(); len(nodes) > 0 && !uuo.mutation.AreasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AreasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AreasTable,
			Columns: user.AreasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !uuo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CustomersTable,
			Columns: []string{user.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.LeaderTable,
			Columns: []string{user.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TeamMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTeamMembersIDs(); len(nodes) > 0 && !uuo.mutation.TeamMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TeamMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TeamMembersTable,
			Columns: []string{user.TeamMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTendersIDs(); len(nodes) > 0 && !uuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.TendersTable,
			Columns: user.TendersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVisitRecordsIDs(); len(nodes) > 0 && !uuo.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.VisitRecordsTable,
			Columns: user.VisitRecordsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
