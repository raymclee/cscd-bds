// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerProfileQuery is the builder for querying CustomerProfile entities.
type CustomerProfileQuery struct {
	config
	ctx           *QueryContext
	order         []customerprofile.OrderOption
	inters        []Interceptor
	predicates    []predicate.CustomerProfile
	withCustomer  *CustomerQuery
	withCreatedBy *UserQuery
	withApprover  *UserQuery
	withSales     *UserQuery
	modifiers     []func(*sql.Selector)
	loadTotal     []func(context.Context, []*CustomerProfile) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerProfileQuery builder.
func (cpq *CustomerProfileQuery) Where(ps ...predicate.CustomerProfile) *CustomerProfileQuery {
	cpq.predicates = append(cpq.predicates, ps...)
	return cpq
}

// Limit the number of records to be returned by this query.
func (cpq *CustomerProfileQuery) Limit(limit int) *CustomerProfileQuery {
	cpq.ctx.Limit = &limit
	return cpq
}

// Offset to start from.
func (cpq *CustomerProfileQuery) Offset(offset int) *CustomerProfileQuery {
	cpq.ctx.Offset = &offset
	return cpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cpq *CustomerProfileQuery) Unique(unique bool) *CustomerProfileQuery {
	cpq.ctx.Unique = &unique
	return cpq
}

// Order specifies how the records should be ordered.
func (cpq *CustomerProfileQuery) Order(o ...customerprofile.OrderOption) *CustomerProfileQuery {
	cpq.order = append(cpq.order, o...)
	return cpq
}

// QueryCustomer chains the current query on the "customer" edge.
func (cpq *CustomerProfileQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customerprofile.Table, customerprofile.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customerprofile.CustomerTable, customerprofile.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (cpq *CustomerProfileQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customerprofile.Table, customerprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customerprofile.CreatedByTable, customerprofile.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprover chains the current query on the "approver" edge.
func (cpq *CustomerProfileQuery) QueryApprover() *UserQuery {
	query := (&UserClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customerprofile.Table, customerprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customerprofile.ApproverTable, customerprofile.ApproverColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySales chains the current query on the "sales" edge.
func (cpq *CustomerProfileQuery) QuerySales() *UserQuery {
	query := (&UserClient{config: cpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customerprofile.Table, customerprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customerprofile.SalesTable, customerprofile.SalesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomerProfile entity from the query.
// Returns a *NotFoundError when no CustomerProfile was found.
func (cpq *CustomerProfileQuery) First(ctx context.Context) (*CustomerProfile, error) {
	nodes, err := cpq.Limit(1).All(setContextOp(ctx, cpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customerprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpq *CustomerProfileQuery) FirstX(ctx context.Context) *CustomerProfile {
	node, err := cpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerProfile ID from the query.
// Returns a *NotFoundError when no CustomerProfile ID was found.
func (cpq *CustomerProfileQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = cpq.Limit(1).IDs(setContextOp(ctx, cpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customerprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cpq *CustomerProfileQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := cpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CustomerProfile entity is found.
// Returns a *NotFoundError when no CustomerProfile entities are found.
func (cpq *CustomerProfileQuery) Only(ctx context.Context) (*CustomerProfile, error) {
	nodes, err := cpq.Limit(2).All(setContextOp(ctx, cpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customerprofile.Label}
	default:
		return nil, &NotSingularError{customerprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpq *CustomerProfileQuery) OnlyX(ctx context.Context) *CustomerProfile {
	node, err := cpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerProfile ID in the query.
// Returns a *NotSingularError when more than one CustomerProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (cpq *CustomerProfileQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = cpq.Limit(2).IDs(setContextOp(ctx, cpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customerprofile.Label}
	default:
		err = &NotSingularError{customerprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpq *CustomerProfileQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := cpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerProfiles.
func (cpq *CustomerProfileQuery) All(ctx context.Context) ([]*CustomerProfile, error) {
	ctx = setContextOp(ctx, cpq.ctx, ent.OpQueryAll)
	if err := cpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CustomerProfile, *CustomerProfileQuery]()
	return withInterceptors[[]*CustomerProfile](ctx, cpq, qr, cpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cpq *CustomerProfileQuery) AllX(ctx context.Context) []*CustomerProfile {
	nodes, err := cpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerProfile IDs.
func (cpq *CustomerProfileQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if cpq.ctx.Unique == nil && cpq.path != nil {
		cpq.Unique(true)
	}
	ctx = setContextOp(ctx, cpq.ctx, ent.OpQueryIDs)
	if err = cpq.Select(customerprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpq *CustomerProfileQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := cpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpq *CustomerProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cpq.ctx, ent.OpQueryCount)
	if err := cpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cpq, querierCount[*CustomerProfileQuery](), cpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cpq *CustomerProfileQuery) CountX(ctx context.Context) int {
	count, err := cpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpq *CustomerProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cpq.ctx, ent.OpQueryExist)
	switch _, err := cpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cpq *CustomerProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := cpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpq *CustomerProfileQuery) Clone() *CustomerProfileQuery {
	if cpq == nil {
		return nil
	}
	return &CustomerProfileQuery{
		config:        cpq.config,
		ctx:           cpq.ctx.Clone(),
		order:         append([]customerprofile.OrderOption{}, cpq.order...),
		inters:        append([]Interceptor{}, cpq.inters...),
		predicates:    append([]predicate.CustomerProfile{}, cpq.predicates...),
		withCustomer:  cpq.withCustomer.Clone(),
		withCreatedBy: cpq.withCreatedBy.Clone(),
		withApprover:  cpq.withApprover.Clone(),
		withSales:     cpq.withSales.Clone(),
		// clone intermediate query.
		sql:  cpq.sql.Clone(),
		path: cpq.path,
	}
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CustomerProfileQuery) WithCustomer(opts ...func(*CustomerQuery)) *CustomerProfileQuery {
	query := (&CustomerClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withCustomer = query
	return cpq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CustomerProfileQuery) WithCreatedBy(opts ...func(*UserQuery)) *CustomerProfileQuery {
	query := (&UserClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withCreatedBy = query
	return cpq
}

// WithApprover tells the query-builder to eager-load the nodes that are connected to
// the "approver" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CustomerProfileQuery) WithApprover(opts ...func(*UserQuery)) *CustomerProfileQuery {
	query := (&UserClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withApprover = query
	return cpq
}

// WithSales tells the query-builder to eager-load the nodes that are connected to
// the "sales" edge. The optional arguments are used to configure the query builder of the edge.
func (cpq *CustomerProfileQuery) WithSales(opts ...func(*UserQuery)) *CustomerProfileQuery {
	query := (&UserClient{config: cpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cpq.withSales = query
	return cpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerProfile.Query().
//		GroupBy(customerprofile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cpq *CustomerProfileQuery) GroupBy(field string, fields ...string) *CustomerProfileGroupBy {
	cpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CustomerProfileGroupBy{build: cpq}
	grbuild.flds = &cpq.ctx.Fields
	grbuild.label = customerprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CustomerProfile.Query().
//		Select(customerprofile.FieldCreatedAt).
//		Scan(ctx, &v)
func (cpq *CustomerProfileQuery) Select(fields ...string) *CustomerProfileSelect {
	cpq.ctx.Fields = append(cpq.ctx.Fields, fields...)
	sbuild := &CustomerProfileSelect{CustomerProfileQuery: cpq}
	sbuild.label = customerprofile.Label
	sbuild.flds, sbuild.scan = &cpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CustomerProfileSelect configured with the given aggregations.
func (cpq *CustomerProfileQuery) Aggregate(fns ...AggregateFunc) *CustomerProfileSelect {
	return cpq.Select().Aggregate(fns...)
}

func (cpq *CustomerProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cpq); err != nil {
				return err
			}
		}
	}
	for _, f := range cpq.ctx.Fields {
		if !customerprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cpq.path != nil {
		prev, err := cpq.path(ctx)
		if err != nil {
			return err
		}
		cpq.sql = prev
	}
	return nil
}

func (cpq *CustomerProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CustomerProfile, error) {
	var (
		nodes       = []*CustomerProfile{}
		_spec       = cpq.querySpec()
		loadedTypes = [4]bool{
			cpq.withCustomer != nil,
			cpq.withCreatedBy != nil,
			cpq.withApprover != nil,
			cpq.withSales != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CustomerProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CustomerProfile{config: cpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cpq.modifiers) > 0 {
		_spec.Modifiers = cpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cpq.withCustomer; query != nil {
		if err := cpq.loadCustomer(ctx, query, nodes, nil,
			func(n *CustomerProfile, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withCreatedBy; query != nil {
		if err := cpq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *CustomerProfile, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withApprover; query != nil {
		if err := cpq.loadApprover(ctx, query, nodes, nil,
			func(n *CustomerProfile, e *User) { n.Edges.Approver = e }); err != nil {
			return nil, err
		}
	}
	if query := cpq.withSales; query != nil {
		if err := cpq.loadSales(ctx, query, nodes, nil,
			func(n *CustomerProfile, e *User) { n.Edges.Sales = e }); err != nil {
			return nil, err
		}
	}
	for i := range cpq.loadTotal {
		if err := cpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cpq *CustomerProfileQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*CustomerProfile, init func(*CustomerProfile), assign func(*CustomerProfile, *Customer)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*CustomerProfile)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *CustomerProfileQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*CustomerProfile, init func(*CustomerProfile), assign func(*CustomerProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*CustomerProfile)
	for i := range nodes {
		if nodes[i].CreatedByID == nil {
			continue
		}
		fk := *nodes[i].CreatedByID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *CustomerProfileQuery) loadApprover(ctx context.Context, query *UserQuery, nodes []*CustomerProfile, init func(*CustomerProfile), assign func(*CustomerProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*CustomerProfile)
	for i := range nodes {
		if nodes[i].ApproverID == nil {
			continue
		}
		fk := *nodes[i].ApproverID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "approver_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cpq *CustomerProfileQuery) loadSales(ctx context.Context, query *UserQuery, nodes []*CustomerProfile, init func(*CustomerProfile), assign func(*CustomerProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*CustomerProfile)
	for i := range nodes {
		if nodes[i].SalesID == nil {
			continue
		}
		fk := *nodes[i].SalesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sales_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cpq *CustomerProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpq.querySpec()
	if len(cpq.modifiers) > 0 {
		_spec.Modifiers = cpq.modifiers
	}
	_spec.Node.Columns = cpq.ctx.Fields
	if len(cpq.ctx.Fields) > 0 {
		_spec.Unique = cpq.ctx.Unique != nil && *cpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cpq.driver, _spec)
}

func (cpq *CustomerProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(customerprofile.Table, customerprofile.Columns, sqlgraph.NewFieldSpec(customerprofile.FieldID, field.TypeString))
	_spec.From = cpq.sql
	if unique := cpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cpq.path != nil {
		_spec.Unique = true
	}
	if fields := cpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerprofile.FieldID)
		for i := range fields {
			if fields[i] != customerprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cpq.withCustomer != nil {
			_spec.Node.AddColumnOnce(customerprofile.FieldCustomerID)
		}
		if cpq.withCreatedBy != nil {
			_spec.Node.AddColumnOnce(customerprofile.FieldCreatedByID)
		}
		if cpq.withApprover != nil {
			_spec.Node.AddColumnOnce(customerprofile.FieldApproverID)
		}
		if cpq.withSales != nil {
			_spec.Node.AddColumnOnce(customerprofile.FieldSalesID)
		}
	}
	if ps := cpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpq *CustomerProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cpq.driver.Dialect())
	t1 := builder.Table(customerprofile.Table)
	columns := cpq.ctx.Fields
	if len(columns) == 0 {
		columns = customerprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cpq.sql != nil {
		selector = cpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cpq.ctx.Unique != nil && *cpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cpq.predicates {
		p(selector)
	}
	for _, p := range cpq.order {
		p(selector)
	}
	if offset := cpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomerProfileGroupBy is the group-by builder for CustomerProfile entities.
type CustomerProfileGroupBy struct {
	selector
	build *CustomerProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpgb *CustomerProfileGroupBy) Aggregate(fns ...AggregateFunc) *CustomerProfileGroupBy {
	cpgb.fns = append(cpgb.fns, fns...)
	return cpgb
}

// Scan applies the selector query and scans the result into the given value.
func (cpgb *CustomerProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cpgb.build.ctx, ent.OpQueryGroupBy)
	if err := cpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerProfileQuery, *CustomerProfileGroupBy](ctx, cpgb.build, cpgb, cpgb.build.inters, v)
}

func (cpgb *CustomerProfileGroupBy) sqlScan(ctx context.Context, root *CustomerProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cpgb.fns))
	for _, fn := range cpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cpgb.flds)+len(cpgb.fns))
		for _, f := range *cpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CustomerProfileSelect is the builder for selecting fields of CustomerProfile entities.
type CustomerProfileSelect struct {
	*CustomerProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cps *CustomerProfileSelect) Aggregate(fns ...AggregateFunc) *CustomerProfileSelect {
	cps.fns = append(cps.fns, fns...)
	return cps
}

// Scan applies the selector query and scans the result into the given value.
func (cps *CustomerProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cps.ctx, ent.OpQuerySelect)
	if err := cps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomerProfileQuery, *CustomerProfileSelect](ctx, cps.CustomerProfileQuery, cps, cps.inters, v)
}

func (cps *CustomerProfileSelect) sqlScan(ctx context.Context, root *CustomerProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cps.fns))
	for _, fn := range cps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
