// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/schema/xid"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Plot is the model entity for the Plot schema.
type Plot struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ColorHex holds the value of the "color_hex" field.
	ColorHex string `json:"color_hex,omitempty"`
	// GeoBounds holds the value of the "geo_bounds" field.
	GeoBounds [][]float64 `json:"geo_bounds,omitempty"`
	// DistrictID holds the value of the "district_id" field.
	DistrictID xid.ID `json:"district_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlotQuery when eager-loading is set.
	Edges        PlotEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlotEdges holds the relations/edges for other nodes in the graph.
type PlotEdges struct {
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlotEdges) DistrictOrErr() (*District, error) {
	if e.District != nil {
		return e.District, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: district.Label}
	}
	return nil, &NotLoadedError{edge: "district"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plot.FieldGeoBounds:
			values[i] = new([]byte)
		case plot.FieldName, plot.FieldColorHex:
			values[i] = new(sql.NullString)
		case plot.FieldCreatedAt, plot.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case plot.FieldID, plot.FieldDistrictID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plot fields.
func (pl *Plot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plot.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plot.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case plot.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case plot.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plot.FieldColorHex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_hex", values[i])
			} else if value.Valid {
				pl.ColorHex = value.String
			}
		case plot.FieldGeoBounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field geo_bounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.GeoBounds); err != nil {
					return fmt.Errorf("unmarshal field geo_bounds: %w", err)
				}
			}
		case plot.FieldDistrictID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field district_id", values[i])
			} else if value != nil {
				pl.DistrictID = *value
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plot.
// This includes values selected through modifiers, order, etc.
func (pl *Plot) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryDistrict queries the "district" edge of the Plot entity.
func (pl *Plot) QueryDistrict() *DistrictQuery {
	return NewPlotClient(pl.config).QueryDistrict(pl)
}

// Update returns a builder for updating this Plot.
// Note that you need to call Plot.Unwrap() before calling this method if this Plot
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plot) Update() *PlotUpdateOne {
	return NewPlotClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plot) Unwrap() *Plot {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plot is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plot) String() string {
	var builder strings.Builder
	builder.WriteString("Plot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("color_hex=")
	builder.WriteString(pl.ColorHex)
	builder.WriteString(", ")
	builder.WriteString("geo_bounds=")
	builder.WriteString(fmt.Sprintf("%v", pl.GeoBounds))
	builder.WriteString(", ")
	builder.WriteString("district_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.DistrictID))
	builder.WriteByte(')')
	return builder.String()
}

// Plots is a parsable slice of Plot.
type Plots []*Plot
