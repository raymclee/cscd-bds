// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tendercompetitor"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompetitorUpdate is the builder for updating Competitor entities.
type CompetitorUpdate struct {
	config
	hooks    []Hook
	mutation *CompetitorMutation
}

// Where appends a list predicates to the CompetitorUpdate builder.
func (cu *CompetitorUpdate) Where(ps ...predicate.Competitor) *CompetitorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompetitorUpdate) SetUpdatedAt(t time.Time) *CompetitorUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetShortName sets the "short_name" field.
func (cu *CompetitorUpdate) SetShortName(s string) *CompetitorUpdate {
	cu.mutation.SetShortName(s)
	return cu
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (cu *CompetitorUpdate) SetNillableShortName(s *string) *CompetitorUpdate {
	if s != nil {
		cu.SetShortName(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CompetitorUpdate) SetName(s string) *CompetitorUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CompetitorUpdate) SetNillableName(s *string) *CompetitorUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// AddTenderIDs adds the "tenders" edge to the TenderCompetitor entity by IDs.
func (cu *CompetitorUpdate) AddTenderIDs(ids ...xid.ID) *CompetitorUpdate {
	cu.mutation.AddTenderIDs(ids...)
	return cu
}

// AddTenders adds the "tenders" edges to the TenderCompetitor entity.
func (cu *CompetitorUpdate) AddTenders(t ...*TenderCompetitor) *CompetitorUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTenderIDs(ids...)
}

// Mutation returns the CompetitorMutation object of the builder.
func (cu *CompetitorUpdate) Mutation() *CompetitorMutation {
	return cu.mutation
}

// ClearTenders clears all "tenders" edges to the TenderCompetitor entity.
func (cu *CompetitorUpdate) ClearTenders() *CompetitorUpdate {
	cu.mutation.ClearTenders()
	return cu
}

// RemoveTenderIDs removes the "tenders" edge to TenderCompetitor entities by IDs.
func (cu *CompetitorUpdate) RemoveTenderIDs(ids ...xid.ID) *CompetitorUpdate {
	cu.mutation.RemoveTenderIDs(ids...)
	return cu
}

// RemoveTenders removes "tenders" edges to TenderCompetitor entities.
func (cu *CompetitorUpdate) RemoveTenders(t ...*TenderCompetitor) *CompetitorUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTenderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetitorUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetitorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetitorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetitorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompetitorUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := competitor.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CompetitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(competitor.Table, competitor.Columns, sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(competitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ShortName(); ok {
		_spec.SetField(competitor.FieldShortName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(competitor.FieldName, field.TypeString, value)
	}
	if cu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTendersIDs(); len(nodes) > 0 && !cu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompetitorUpdateOne is the builder for updating a single Competitor entity.
type CompetitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompetitorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompetitorUpdateOne) SetUpdatedAt(t time.Time) *CompetitorUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetShortName sets the "short_name" field.
func (cuo *CompetitorUpdateOne) SetShortName(s string) *CompetitorUpdateOne {
	cuo.mutation.SetShortName(s)
	return cuo
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (cuo *CompetitorUpdateOne) SetNillableShortName(s *string) *CompetitorUpdateOne {
	if s != nil {
		cuo.SetShortName(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CompetitorUpdateOne) SetName(s string) *CompetitorUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CompetitorUpdateOne) SetNillableName(s *string) *CompetitorUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// AddTenderIDs adds the "tenders" edge to the TenderCompetitor entity by IDs.
func (cuo *CompetitorUpdateOne) AddTenderIDs(ids ...xid.ID) *CompetitorUpdateOne {
	cuo.mutation.AddTenderIDs(ids...)
	return cuo
}

// AddTenders adds the "tenders" edges to the TenderCompetitor entity.
func (cuo *CompetitorUpdateOne) AddTenders(t ...*TenderCompetitor) *CompetitorUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTenderIDs(ids...)
}

// Mutation returns the CompetitorMutation object of the builder.
func (cuo *CompetitorUpdateOne) Mutation() *CompetitorMutation {
	return cuo.mutation
}

// ClearTenders clears all "tenders" edges to the TenderCompetitor entity.
func (cuo *CompetitorUpdateOne) ClearTenders() *CompetitorUpdateOne {
	cuo.mutation.ClearTenders()
	return cuo
}

// RemoveTenderIDs removes the "tenders" edge to TenderCompetitor entities by IDs.
func (cuo *CompetitorUpdateOne) RemoveTenderIDs(ids ...xid.ID) *CompetitorUpdateOne {
	cuo.mutation.RemoveTenderIDs(ids...)
	return cuo
}

// RemoveTenders removes "tenders" edges to TenderCompetitor entities.
func (cuo *CompetitorUpdateOne) RemoveTenders(t ...*TenderCompetitor) *CompetitorUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTenderIDs(ids...)
}

// Where appends a list predicates to the CompetitorUpdate builder.
func (cuo *CompetitorUpdateOne) Where(ps ...predicate.Competitor) *CompetitorUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompetitorUpdateOne) Select(field string, fields ...string) *CompetitorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Competitor entity.
func (cuo *CompetitorUpdateOne) Save(ctx context.Context) (*Competitor, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetitorUpdateOne) SaveX(ctx context.Context) *Competitor {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetitorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetitorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompetitorUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := competitor.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CompetitorUpdateOne) sqlSave(ctx context.Context) (_node *Competitor, err error) {
	_spec := sqlgraph.NewUpdateSpec(competitor.Table, competitor.Columns, sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Competitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competitor.FieldID)
		for _, f := range fields {
			if !competitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != competitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(competitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ShortName(); ok {
		_spec.SetField(competitor.FieldShortName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(competitor.FieldName, field.TypeString, value)
	}
	if cuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTendersIDs(); len(nodes) > 0 && !cuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Competitor{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
