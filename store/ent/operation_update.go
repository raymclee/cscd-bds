// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationUpdate is the builder for updating Operation entities.
type OperationUpdate struct {
	config
	hooks    []Hook
	mutation *OperationMutation
}

// Where appends a list predicates to the OperationUpdate builder.
func (ou *OperationUpdate) Where(ps ...predicate.Operation) *OperationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OperationUpdate) SetUpdatedAt(t time.Time) *OperationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetCjeYs sets the "cje_ys" field.
func (ou *OperationUpdate) SetCjeYs(i int) *OperationUpdate {
	ou.mutation.ResetCjeYs()
	ou.mutation.SetCjeYs(i)
	return ou
}

// SetNillableCjeYs sets the "cje_ys" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableCjeYs(i *int) *OperationUpdate {
	if i != nil {
		ou.SetCjeYs(*i)
	}
	return ou
}

// AddCjeYs adds i to the "cje_ys" field.
func (ou *OperationUpdate) AddCjeYs(i int) *OperationUpdate {
	ou.mutation.AddCjeYs(i)
	return ou
}

// ClearCjeYs clears the value of the "cje_ys" field.
func (ou *OperationUpdate) ClearCjeYs() *OperationUpdate {
	ou.mutation.ClearCjeYs()
	return ou
}

// SetCjeLj sets the "cje_lj" field.
func (ou *OperationUpdate) SetCjeLj(i int) *OperationUpdate {
	ou.mutation.ResetCjeLj()
	ou.mutation.SetCjeLj(i)
	return ou
}

// SetNillableCjeLj sets the "cje_lj" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableCjeLj(i *int) *OperationUpdate {
	if i != nil {
		ou.SetCjeLj(*i)
	}
	return ou
}

// AddCjeLj adds i to the "cje_lj" field.
func (ou *OperationUpdate) AddCjeLj(i int) *OperationUpdate {
	ou.mutation.AddCjeLj(i)
	return ou
}

// ClearCjeLj clears the value of the "cje_lj" field.
func (ou *OperationUpdate) ClearCjeLj() *OperationUpdate {
	ou.mutation.ClearCjeLj()
	return ou
}

// SetYyeYs sets the "yye_ys" field.
func (ou *OperationUpdate) SetYyeYs(i int) *OperationUpdate {
	ou.mutation.ResetYyeYs()
	ou.mutation.SetYyeYs(i)
	return ou
}

// SetNillableYyeYs sets the "yye_ys" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableYyeYs(i *int) *OperationUpdate {
	if i != nil {
		ou.SetYyeYs(*i)
	}
	return ou
}

// AddYyeYs adds i to the "yye_ys" field.
func (ou *OperationUpdate) AddYyeYs(i int) *OperationUpdate {
	ou.mutation.AddYyeYs(i)
	return ou
}

// ClearYyeYs clears the value of the "yye_ys" field.
func (ou *OperationUpdate) ClearYyeYs() *OperationUpdate {
	ou.mutation.ClearYyeYs()
	return ou
}

// SetYyeLj sets the "yye_lj" field.
func (ou *OperationUpdate) SetYyeLj(i int) *OperationUpdate {
	ou.mutation.ResetYyeLj()
	ou.mutation.SetYyeLj(i)
	return ou
}

// SetNillableYyeLj sets the "yye_lj" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableYyeLj(i *int) *OperationUpdate {
	if i != nil {
		ou.SetYyeLj(*i)
	}
	return ou
}

// AddYyeLj adds i to the "yye_lj" field.
func (ou *OperationUpdate) AddYyeLj(i int) *OperationUpdate {
	ou.mutation.AddYyeLj(i)
	return ou
}

// ClearYyeLj clears the value of the "yye_lj" field.
func (ou *OperationUpdate) ClearYyeLj() *OperationUpdate {
	ou.mutation.ClearYyeLj()
	return ou
}

// SetXjlYs sets the "xjl_ys" field.
func (ou *OperationUpdate) SetXjlYs(i int) *OperationUpdate {
	ou.mutation.ResetXjlYs()
	ou.mutation.SetXjlYs(i)
	return ou
}

// SetNillableXjlYs sets the "xjl_ys" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableXjlYs(i *int) *OperationUpdate {
	if i != nil {
		ou.SetXjlYs(*i)
	}
	return ou
}

// AddXjlYs adds i to the "xjl_ys" field.
func (ou *OperationUpdate) AddXjlYs(i int) *OperationUpdate {
	ou.mutation.AddXjlYs(i)
	return ou
}

// ClearXjlYs clears the value of the "xjl_ys" field.
func (ou *OperationUpdate) ClearXjlYs() *OperationUpdate {
	ou.mutation.ClearXjlYs()
	return ou
}

// SetXjlLj sets the "xjl_lj" field.
func (ou *OperationUpdate) SetXjlLj(i int) *OperationUpdate {
	ou.mutation.ResetXjlLj()
	ou.mutation.SetXjlLj(i)
	return ou
}

// SetNillableXjlLj sets the "xjl_lj" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableXjlLj(i *int) *OperationUpdate {
	if i != nil {
		ou.SetXjlLj(*i)
	}
	return ou
}

// AddXjlLj adds i to the "xjl_lj" field.
func (ou *OperationUpdate) AddXjlLj(i int) *OperationUpdate {
	ou.mutation.AddXjlLj(i)
	return ou
}

// ClearXjlLj clears the value of the "xjl_lj" field.
func (ou *OperationUpdate) ClearXjlLj() *OperationUpdate {
	ou.mutation.ClearXjlLj()
	return ou
}

// SetXmglf sets the "xmglf" field.
func (ou *OperationUpdate) SetXmglf(i int) *OperationUpdate {
	ou.mutation.ResetXmglf()
	ou.mutation.SetXmglf(i)
	return ou
}

// SetNillableXmglf sets the "xmglf" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableXmglf(i *int) *OperationUpdate {
	if i != nil {
		ou.SetXmglf(*i)
	}
	return ou
}

// AddXmglf adds i to the "xmglf" field.
func (ou *OperationUpdate) AddXmglf(i int) *OperationUpdate {
	ou.mutation.AddXmglf(i)
	return ou
}

// ClearXmglf clears the value of the "xmglf" field.
func (ou *OperationUpdate) ClearXmglf() *OperationUpdate {
	ou.mutation.ClearXmglf()
	return ou
}

// SetXmsjf sets the "xmsjf" field.
func (ou *OperationUpdate) SetXmsjf(i int) *OperationUpdate {
	ou.mutation.ResetXmsjf()
	ou.mutation.SetXmsjf(i)
	return ou
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableXmsjf(i *int) *OperationUpdate {
	if i != nil {
		ou.SetXmsjf(*i)
	}
	return ou
}

// AddXmsjf adds i to the "xmsjf" field.
func (ou *OperationUpdate) AddXmsjf(i int) *OperationUpdate {
	ou.mutation.AddXmsjf(i)
	return ou
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (ou *OperationUpdate) ClearXmsjf() *OperationUpdate {
	ou.mutation.ClearXmsjf()
	return ou
}

// Mutation returns the OperationMutation object of the builder.
func (ou *OperationUpdate) Mutation() *OperationMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OperationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := operation.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OperationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(operation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.CjeYs(); ok {
		_spec.SetField(operation.FieldCjeYs, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCjeYs(); ok {
		_spec.AddField(operation.FieldCjeYs, field.TypeInt, value)
	}
	if ou.mutation.CjeYsCleared() {
		_spec.ClearField(operation.FieldCjeYs, field.TypeInt)
	}
	if value, ok := ou.mutation.CjeLj(); ok {
		_spec.SetField(operation.FieldCjeLj, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCjeLj(); ok {
		_spec.AddField(operation.FieldCjeLj, field.TypeInt, value)
	}
	if ou.mutation.CjeLjCleared() {
		_spec.ClearField(operation.FieldCjeLj, field.TypeInt)
	}
	if value, ok := ou.mutation.YyeYs(); ok {
		_spec.SetField(operation.FieldYyeYs, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedYyeYs(); ok {
		_spec.AddField(operation.FieldYyeYs, field.TypeInt, value)
	}
	if ou.mutation.YyeYsCleared() {
		_spec.ClearField(operation.FieldYyeYs, field.TypeInt)
	}
	if value, ok := ou.mutation.YyeLj(); ok {
		_spec.SetField(operation.FieldYyeLj, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedYyeLj(); ok {
		_spec.AddField(operation.FieldYyeLj, field.TypeInt, value)
	}
	if ou.mutation.YyeLjCleared() {
		_spec.ClearField(operation.FieldYyeLj, field.TypeInt)
	}
	if value, ok := ou.mutation.XjlYs(); ok {
		_spec.SetField(operation.FieldXjlYs, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedXjlYs(); ok {
		_spec.AddField(operation.FieldXjlYs, field.TypeInt, value)
	}
	if ou.mutation.XjlYsCleared() {
		_spec.ClearField(operation.FieldXjlYs, field.TypeInt)
	}
	if value, ok := ou.mutation.XjlLj(); ok {
		_spec.SetField(operation.FieldXjlLj, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedXjlLj(); ok {
		_spec.AddField(operation.FieldXjlLj, field.TypeInt, value)
	}
	if ou.mutation.XjlLjCleared() {
		_spec.ClearField(operation.FieldXjlLj, field.TypeInt)
	}
	if value, ok := ou.mutation.Xmglf(); ok {
		_spec.SetField(operation.FieldXmglf, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedXmglf(); ok {
		_spec.AddField(operation.FieldXmglf, field.TypeInt, value)
	}
	if ou.mutation.XmglfCleared() {
		_spec.ClearField(operation.FieldXmglf, field.TypeInt)
	}
	if value, ok := ou.mutation.Xmsjf(); ok {
		_spec.SetField(operation.FieldXmsjf, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedXmsjf(); ok {
		_spec.AddField(operation.FieldXmsjf, field.TypeInt, value)
	}
	if ou.mutation.XmsjfCleared() {
		_spec.ClearField(operation.FieldXmsjf, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperationUpdateOne is the builder for updating a single Operation entity.
type OperationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OperationUpdateOne) SetUpdatedAt(t time.Time) *OperationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetCjeYs sets the "cje_ys" field.
func (ouo *OperationUpdateOne) SetCjeYs(i int) *OperationUpdateOne {
	ouo.mutation.ResetCjeYs()
	ouo.mutation.SetCjeYs(i)
	return ouo
}

// SetNillableCjeYs sets the "cje_ys" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableCjeYs(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetCjeYs(*i)
	}
	return ouo
}

// AddCjeYs adds i to the "cje_ys" field.
func (ouo *OperationUpdateOne) AddCjeYs(i int) *OperationUpdateOne {
	ouo.mutation.AddCjeYs(i)
	return ouo
}

// ClearCjeYs clears the value of the "cje_ys" field.
func (ouo *OperationUpdateOne) ClearCjeYs() *OperationUpdateOne {
	ouo.mutation.ClearCjeYs()
	return ouo
}

// SetCjeLj sets the "cje_lj" field.
func (ouo *OperationUpdateOne) SetCjeLj(i int) *OperationUpdateOne {
	ouo.mutation.ResetCjeLj()
	ouo.mutation.SetCjeLj(i)
	return ouo
}

// SetNillableCjeLj sets the "cje_lj" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableCjeLj(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetCjeLj(*i)
	}
	return ouo
}

// AddCjeLj adds i to the "cje_lj" field.
func (ouo *OperationUpdateOne) AddCjeLj(i int) *OperationUpdateOne {
	ouo.mutation.AddCjeLj(i)
	return ouo
}

// ClearCjeLj clears the value of the "cje_lj" field.
func (ouo *OperationUpdateOne) ClearCjeLj() *OperationUpdateOne {
	ouo.mutation.ClearCjeLj()
	return ouo
}

// SetYyeYs sets the "yye_ys" field.
func (ouo *OperationUpdateOne) SetYyeYs(i int) *OperationUpdateOne {
	ouo.mutation.ResetYyeYs()
	ouo.mutation.SetYyeYs(i)
	return ouo
}

// SetNillableYyeYs sets the "yye_ys" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableYyeYs(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetYyeYs(*i)
	}
	return ouo
}

// AddYyeYs adds i to the "yye_ys" field.
func (ouo *OperationUpdateOne) AddYyeYs(i int) *OperationUpdateOne {
	ouo.mutation.AddYyeYs(i)
	return ouo
}

// ClearYyeYs clears the value of the "yye_ys" field.
func (ouo *OperationUpdateOne) ClearYyeYs() *OperationUpdateOne {
	ouo.mutation.ClearYyeYs()
	return ouo
}

// SetYyeLj sets the "yye_lj" field.
func (ouo *OperationUpdateOne) SetYyeLj(i int) *OperationUpdateOne {
	ouo.mutation.ResetYyeLj()
	ouo.mutation.SetYyeLj(i)
	return ouo
}

// SetNillableYyeLj sets the "yye_lj" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableYyeLj(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetYyeLj(*i)
	}
	return ouo
}

// AddYyeLj adds i to the "yye_lj" field.
func (ouo *OperationUpdateOne) AddYyeLj(i int) *OperationUpdateOne {
	ouo.mutation.AddYyeLj(i)
	return ouo
}

// ClearYyeLj clears the value of the "yye_lj" field.
func (ouo *OperationUpdateOne) ClearYyeLj() *OperationUpdateOne {
	ouo.mutation.ClearYyeLj()
	return ouo
}

// SetXjlYs sets the "xjl_ys" field.
func (ouo *OperationUpdateOne) SetXjlYs(i int) *OperationUpdateOne {
	ouo.mutation.ResetXjlYs()
	ouo.mutation.SetXjlYs(i)
	return ouo
}

// SetNillableXjlYs sets the "xjl_ys" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableXjlYs(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetXjlYs(*i)
	}
	return ouo
}

// AddXjlYs adds i to the "xjl_ys" field.
func (ouo *OperationUpdateOne) AddXjlYs(i int) *OperationUpdateOne {
	ouo.mutation.AddXjlYs(i)
	return ouo
}

// ClearXjlYs clears the value of the "xjl_ys" field.
func (ouo *OperationUpdateOne) ClearXjlYs() *OperationUpdateOne {
	ouo.mutation.ClearXjlYs()
	return ouo
}

// SetXjlLj sets the "xjl_lj" field.
func (ouo *OperationUpdateOne) SetXjlLj(i int) *OperationUpdateOne {
	ouo.mutation.ResetXjlLj()
	ouo.mutation.SetXjlLj(i)
	return ouo
}

// SetNillableXjlLj sets the "xjl_lj" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableXjlLj(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetXjlLj(*i)
	}
	return ouo
}

// AddXjlLj adds i to the "xjl_lj" field.
func (ouo *OperationUpdateOne) AddXjlLj(i int) *OperationUpdateOne {
	ouo.mutation.AddXjlLj(i)
	return ouo
}

// ClearXjlLj clears the value of the "xjl_lj" field.
func (ouo *OperationUpdateOne) ClearXjlLj() *OperationUpdateOne {
	ouo.mutation.ClearXjlLj()
	return ouo
}

// SetXmglf sets the "xmglf" field.
func (ouo *OperationUpdateOne) SetXmglf(i int) *OperationUpdateOne {
	ouo.mutation.ResetXmglf()
	ouo.mutation.SetXmglf(i)
	return ouo
}

// SetNillableXmglf sets the "xmglf" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableXmglf(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetXmglf(*i)
	}
	return ouo
}

// AddXmglf adds i to the "xmglf" field.
func (ouo *OperationUpdateOne) AddXmglf(i int) *OperationUpdateOne {
	ouo.mutation.AddXmglf(i)
	return ouo
}

// ClearXmglf clears the value of the "xmglf" field.
func (ouo *OperationUpdateOne) ClearXmglf() *OperationUpdateOne {
	ouo.mutation.ClearXmglf()
	return ouo
}

// SetXmsjf sets the "xmsjf" field.
func (ouo *OperationUpdateOne) SetXmsjf(i int) *OperationUpdateOne {
	ouo.mutation.ResetXmsjf()
	ouo.mutation.SetXmsjf(i)
	return ouo
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableXmsjf(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetXmsjf(*i)
	}
	return ouo
}

// AddXmsjf adds i to the "xmsjf" field.
func (ouo *OperationUpdateOne) AddXmsjf(i int) *OperationUpdateOne {
	ouo.mutation.AddXmsjf(i)
	return ouo
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (ouo *OperationUpdateOne) ClearXmsjf() *OperationUpdateOne {
	ouo.mutation.ClearXmsjf()
	return ouo
}

// Mutation returns the OperationMutation object of the builder.
func (ouo *OperationUpdateOne) Mutation() *OperationMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OperationUpdate builder.
func (ouo *OperationUpdateOne) Where(ps ...predicate.Operation) *OperationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationUpdateOne) Select(field string, fields ...string) *OperationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operation entity.
func (ouo *OperationUpdateOne) Save(ctx context.Context) (*Operation, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationUpdateOne) SaveX(ctx context.Context) *Operation {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OperationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := operation.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OperationUpdateOne) sqlSave(ctx context.Context) (_node *Operation, err error) {
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operation.FieldID)
		for _, f := range fields {
			if !operation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(operation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.CjeYs(); ok {
		_spec.SetField(operation.FieldCjeYs, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCjeYs(); ok {
		_spec.AddField(operation.FieldCjeYs, field.TypeInt, value)
	}
	if ouo.mutation.CjeYsCleared() {
		_spec.ClearField(operation.FieldCjeYs, field.TypeInt)
	}
	if value, ok := ouo.mutation.CjeLj(); ok {
		_spec.SetField(operation.FieldCjeLj, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCjeLj(); ok {
		_spec.AddField(operation.FieldCjeLj, field.TypeInt, value)
	}
	if ouo.mutation.CjeLjCleared() {
		_spec.ClearField(operation.FieldCjeLj, field.TypeInt)
	}
	if value, ok := ouo.mutation.YyeYs(); ok {
		_spec.SetField(operation.FieldYyeYs, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedYyeYs(); ok {
		_spec.AddField(operation.FieldYyeYs, field.TypeInt, value)
	}
	if ouo.mutation.YyeYsCleared() {
		_spec.ClearField(operation.FieldYyeYs, field.TypeInt)
	}
	if value, ok := ouo.mutation.YyeLj(); ok {
		_spec.SetField(operation.FieldYyeLj, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedYyeLj(); ok {
		_spec.AddField(operation.FieldYyeLj, field.TypeInt, value)
	}
	if ouo.mutation.YyeLjCleared() {
		_spec.ClearField(operation.FieldYyeLj, field.TypeInt)
	}
	if value, ok := ouo.mutation.XjlYs(); ok {
		_spec.SetField(operation.FieldXjlYs, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedXjlYs(); ok {
		_spec.AddField(operation.FieldXjlYs, field.TypeInt, value)
	}
	if ouo.mutation.XjlYsCleared() {
		_spec.ClearField(operation.FieldXjlYs, field.TypeInt)
	}
	if value, ok := ouo.mutation.XjlLj(); ok {
		_spec.SetField(operation.FieldXjlLj, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedXjlLj(); ok {
		_spec.AddField(operation.FieldXjlLj, field.TypeInt, value)
	}
	if ouo.mutation.XjlLjCleared() {
		_spec.ClearField(operation.FieldXjlLj, field.TypeInt)
	}
	if value, ok := ouo.mutation.Xmglf(); ok {
		_spec.SetField(operation.FieldXmglf, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedXmglf(); ok {
		_spec.AddField(operation.FieldXmglf, field.TypeInt, value)
	}
	if ouo.mutation.XmglfCleared() {
		_spec.ClearField(operation.FieldXmglf, field.TypeInt)
	}
	if value, ok := ouo.mutation.Xmsjf(); ok {
		_spec.SetField(operation.FieldXmsjf, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedXmsjf(); ok {
		_spec.AddField(operation.FieldXmsjf, field.TypeInt, value)
	}
	if ouo.mutation.XmsjfCleared() {
		_spec.ClearField(operation.FieldXmsjf, field.TypeInt)
	}
	_node = &Operation{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
