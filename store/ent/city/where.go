// Code generated by ent, DO NOT EDIT.

package city

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.City {
	return predicate.City(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.City {
	return predicate.City(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.City {
	return predicate.City(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.City {
	return predicate.City(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.City {
	return predicate.City(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.City {
	return predicate.City(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.City {
	return predicate.City(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.City {
	return predicate.City(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.City {
	return predicate.City(sql.FieldEQ(FieldUpdatedAt, v))
}

// Adcode applies equality check predicate on the "adcode" field. It's identical to AdcodeEQ.
func Adcode(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldAdcode, v))
}

// ProvCode applies equality check predicate on the "prov_code" field. It's identical to ProvCodeEQ.
func ProvCode(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldProvCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.City {
	return predicate.City(sql.FieldEQ(FieldName, v))
}

// Center applies equality check predicate on the "center" field. It's identical to CenterEQ.
func Center(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldEQ(FieldCenter, v))
}

// ProvinceID applies equality check predicate on the "province_id" field. It's identical to ProvinceIDEQ.
func ProvinceID(v xid.ID) predicate.City {
	return predicate.City(sql.FieldEQ(FieldProvinceID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.City {
	return predicate.City(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.City {
	return predicate.City(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.City {
	return predicate.City(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.City {
	return predicate.City(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.City {
	return predicate.City(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.City {
	return predicate.City(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.City {
	return predicate.City(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.City {
	return predicate.City(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.City {
	return predicate.City(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.City {
	return predicate.City(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.City {
	return predicate.City(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.City {
	return predicate.City(sql.FieldLTE(FieldUpdatedAt, v))
}

// AdcodeEQ applies the EQ predicate on the "adcode" field.
func AdcodeEQ(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldAdcode, v))
}

// AdcodeNEQ applies the NEQ predicate on the "adcode" field.
func AdcodeNEQ(v int) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldAdcode, v))
}

// AdcodeIn applies the In predicate on the "adcode" field.
func AdcodeIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldIn(FieldAdcode, vs...))
}

// AdcodeNotIn applies the NotIn predicate on the "adcode" field.
func AdcodeNotIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldAdcode, vs...))
}

// AdcodeGT applies the GT predicate on the "adcode" field.
func AdcodeGT(v int) predicate.City {
	return predicate.City(sql.FieldGT(FieldAdcode, v))
}

// AdcodeGTE applies the GTE predicate on the "adcode" field.
func AdcodeGTE(v int) predicate.City {
	return predicate.City(sql.FieldGTE(FieldAdcode, v))
}

// AdcodeLT applies the LT predicate on the "adcode" field.
func AdcodeLT(v int) predicate.City {
	return predicate.City(sql.FieldLT(FieldAdcode, v))
}

// AdcodeLTE applies the LTE predicate on the "adcode" field.
func AdcodeLTE(v int) predicate.City {
	return predicate.City(sql.FieldLTE(FieldAdcode, v))
}

// ProvCodeEQ applies the EQ predicate on the "prov_code" field.
func ProvCodeEQ(v int) predicate.City {
	return predicate.City(sql.FieldEQ(FieldProvCode, v))
}

// ProvCodeNEQ applies the NEQ predicate on the "prov_code" field.
func ProvCodeNEQ(v int) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldProvCode, v))
}

// ProvCodeIn applies the In predicate on the "prov_code" field.
func ProvCodeIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldIn(FieldProvCode, vs...))
}

// ProvCodeNotIn applies the NotIn predicate on the "prov_code" field.
func ProvCodeNotIn(vs ...int) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldProvCode, vs...))
}

// ProvCodeGT applies the GT predicate on the "prov_code" field.
func ProvCodeGT(v int) predicate.City {
	return predicate.City(sql.FieldGT(FieldProvCode, v))
}

// ProvCodeGTE applies the GTE predicate on the "prov_code" field.
func ProvCodeGTE(v int) predicate.City {
	return predicate.City(sql.FieldGTE(FieldProvCode, v))
}

// ProvCodeLT applies the LT predicate on the "prov_code" field.
func ProvCodeLT(v int) predicate.City {
	return predicate.City(sql.FieldLT(FieldProvCode, v))
}

// ProvCodeLTE applies the LTE predicate on the "prov_code" field.
func ProvCodeLTE(v int) predicate.City {
	return predicate.City(sql.FieldLTE(FieldProvCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.City {
	return predicate.City(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.City {
	return predicate.City(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.City {
	return predicate.City(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.City {
	return predicate.City(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.City {
	return predicate.City(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.City {
	return predicate.City(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.City {
	return predicate.City(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.City {
	return predicate.City(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.City {
	return predicate.City(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.City {
	return predicate.City(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.City {
	return predicate.City(sql.FieldContainsFold(FieldName, v))
}

// CenterEQ applies the EQ predicate on the "center" field.
func CenterEQ(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldEQ(FieldCenter, v))
}

// CenterNEQ applies the NEQ predicate on the "center" field.
func CenterNEQ(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldCenter, v))
}

// CenterIn applies the In predicate on the "center" field.
func CenterIn(vs ...*geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldIn(FieldCenter, vs...))
}

// CenterNotIn applies the NotIn predicate on the "center" field.
func CenterNotIn(vs ...*geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldCenter, vs...))
}

// CenterGT applies the GT predicate on the "center" field.
func CenterGT(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldGT(FieldCenter, v))
}

// CenterGTE applies the GTE predicate on the "center" field.
func CenterGTE(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldGTE(FieldCenter, v))
}

// CenterLT applies the LT predicate on the "center" field.
func CenterLT(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldLT(FieldCenter, v))
}

// CenterLTE applies the LTE predicate on the "center" field.
func CenterLTE(v *geo.GeoJson) predicate.City {
	return predicate.City(sql.FieldLTE(FieldCenter, v))
}

// ProvinceIDEQ applies the EQ predicate on the "province_id" field.
func ProvinceIDEQ(v xid.ID) predicate.City {
	return predicate.City(sql.FieldEQ(FieldProvinceID, v))
}

// ProvinceIDNEQ applies the NEQ predicate on the "province_id" field.
func ProvinceIDNEQ(v xid.ID) predicate.City {
	return predicate.City(sql.FieldNEQ(FieldProvinceID, v))
}

// ProvinceIDIn applies the In predicate on the "province_id" field.
func ProvinceIDIn(vs ...xid.ID) predicate.City {
	return predicate.City(sql.FieldIn(FieldProvinceID, vs...))
}

// ProvinceIDNotIn applies the NotIn predicate on the "province_id" field.
func ProvinceIDNotIn(vs ...xid.ID) predicate.City {
	return predicate.City(sql.FieldNotIn(FieldProvinceID, vs...))
}

// ProvinceIDGT applies the GT predicate on the "province_id" field.
func ProvinceIDGT(v xid.ID) predicate.City {
	return predicate.City(sql.FieldGT(FieldProvinceID, v))
}

// ProvinceIDGTE applies the GTE predicate on the "province_id" field.
func ProvinceIDGTE(v xid.ID) predicate.City {
	return predicate.City(sql.FieldGTE(FieldProvinceID, v))
}

// ProvinceIDLT applies the LT predicate on the "province_id" field.
func ProvinceIDLT(v xid.ID) predicate.City {
	return predicate.City(sql.FieldLT(FieldProvinceID, v))
}

// ProvinceIDLTE applies the LTE predicate on the "province_id" field.
func ProvinceIDLTE(v xid.ID) predicate.City {
	return predicate.City(sql.FieldLTE(FieldProvinceID, v))
}

// ProvinceIDContains applies the Contains predicate on the "province_id" field.
func ProvinceIDContains(v xid.ID) predicate.City {
	vc := string(v)
	return predicate.City(sql.FieldContains(FieldProvinceID, vc))
}

// ProvinceIDHasPrefix applies the HasPrefix predicate on the "province_id" field.
func ProvinceIDHasPrefix(v xid.ID) predicate.City {
	vc := string(v)
	return predicate.City(sql.FieldHasPrefix(FieldProvinceID, vc))
}

// ProvinceIDHasSuffix applies the HasSuffix predicate on the "province_id" field.
func ProvinceIDHasSuffix(v xid.ID) predicate.City {
	vc := string(v)
	return predicate.City(sql.FieldHasSuffix(FieldProvinceID, vc))
}

// ProvinceIDEqualFold applies the EqualFold predicate on the "province_id" field.
func ProvinceIDEqualFold(v xid.ID) predicate.City {
	vc := string(v)
	return predicate.City(sql.FieldEqualFold(FieldProvinceID, vc))
}

// ProvinceIDContainsFold applies the ContainsFold predicate on the "province_id" field.
func ProvinceIDContainsFold(v xid.ID) predicate.City {
	vc := string(v)
	return predicate.City(sql.FieldContainsFold(FieldProvinceID, vc))
}

// HasDistricts applies the HasEdge predicate on the "districts" edge.
func HasDistricts() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DistrictsTable, DistrictsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictsWith applies the HasEdge predicate on the "districts" edge with a given conditions (other predicates).
func HasDistrictsWith(preds ...predicate.District) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := newDistrictsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvince applies the HasEdge predicate on the "province" edge.
func HasProvince() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProvinceTable, ProvinceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProvinceWith applies the HasEdge predicate on the "province" edge with a given conditions (other predicates).
func HasProvinceWith(preds ...predicate.Province) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := newProvinceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenders applies the HasEdge predicate on the "tenders" edge.
func HasTenders() predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTendersWith applies the HasEdge predicate on the "tenders" edge with a given conditions (other predicates).
func HasTendersWith(preds ...predicate.Tender) predicate.City {
	return predicate.City(func(s *sql.Selector) {
		step := newTendersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.City) predicate.City {
	return predicate.City(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.City) predicate.City {
	return predicate.City(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.City) predicate.City {
	return predicate.City(sql.NotPredicates(p))
}
