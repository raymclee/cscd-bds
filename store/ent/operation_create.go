// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationCreate is the builder for creating a Operation entity.
type OperationCreate struct {
	config
	mutation *OperationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OperationCreate) SetCreatedAt(t time.Time) *OperationCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OperationCreate) SetNillableCreatedAt(t *time.Time) *OperationCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OperationCreate) SetUpdatedAt(t time.Time) *OperationCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OperationCreate) SetNillableUpdatedAt(t *time.Time) *OperationCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetCjeYs sets the "cje_ys" field.
func (oc *OperationCreate) SetCjeYs(f float64) *OperationCreate {
	oc.mutation.SetCjeYs(f)
	return oc
}

// SetNillableCjeYs sets the "cje_ys" field if the given value is not nil.
func (oc *OperationCreate) SetNillableCjeYs(f *float64) *OperationCreate {
	if f != nil {
		oc.SetCjeYs(*f)
	}
	return oc
}

// SetCjeLj sets the "cje_lj" field.
func (oc *OperationCreate) SetCjeLj(f float64) *OperationCreate {
	oc.mutation.SetCjeLj(f)
	return oc
}

// SetNillableCjeLj sets the "cje_lj" field if the given value is not nil.
func (oc *OperationCreate) SetNillableCjeLj(f *float64) *OperationCreate {
	if f != nil {
		oc.SetCjeLj(*f)
	}
	return oc
}

// SetYyeYs sets the "yye_ys" field.
func (oc *OperationCreate) SetYyeYs(f float64) *OperationCreate {
	oc.mutation.SetYyeYs(f)
	return oc
}

// SetNillableYyeYs sets the "yye_ys" field if the given value is not nil.
func (oc *OperationCreate) SetNillableYyeYs(f *float64) *OperationCreate {
	if f != nil {
		oc.SetYyeYs(*f)
	}
	return oc
}

// SetYyeLj sets the "yye_lj" field.
func (oc *OperationCreate) SetYyeLj(f float64) *OperationCreate {
	oc.mutation.SetYyeLj(f)
	return oc
}

// SetNillableYyeLj sets the "yye_lj" field if the given value is not nil.
func (oc *OperationCreate) SetNillableYyeLj(f *float64) *OperationCreate {
	if f != nil {
		oc.SetYyeLj(*f)
	}
	return oc
}

// SetXjlYs sets the "xjl_ys" field.
func (oc *OperationCreate) SetXjlYs(f float64) *OperationCreate {
	oc.mutation.SetXjlYs(f)
	return oc
}

// SetNillableXjlYs sets the "xjl_ys" field if the given value is not nil.
func (oc *OperationCreate) SetNillableXjlYs(f *float64) *OperationCreate {
	if f != nil {
		oc.SetXjlYs(*f)
	}
	return oc
}

// SetXjlLj sets the "xjl_lj" field.
func (oc *OperationCreate) SetXjlLj(f float64) *OperationCreate {
	oc.mutation.SetXjlLj(f)
	return oc
}

// SetNillableXjlLj sets the "xjl_lj" field if the given value is not nil.
func (oc *OperationCreate) SetNillableXjlLj(f *float64) *OperationCreate {
	if f != nil {
		oc.SetXjlLj(*f)
	}
	return oc
}

// SetXmglf sets the "xmglf" field.
func (oc *OperationCreate) SetXmglf(f float64) *OperationCreate {
	oc.mutation.SetXmglf(f)
	return oc
}

// SetNillableXmglf sets the "xmglf" field if the given value is not nil.
func (oc *OperationCreate) SetNillableXmglf(f *float64) *OperationCreate {
	if f != nil {
		oc.SetXmglf(*f)
	}
	return oc
}

// SetXmsjf sets the "xmsjf" field.
func (oc *OperationCreate) SetXmsjf(f float64) *OperationCreate {
	oc.mutation.SetXmsjf(f)
	return oc
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (oc *OperationCreate) SetNillableXmsjf(f *float64) *OperationCreate {
	if f != nil {
		oc.SetXmsjf(*f)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OperationCreate) SetID(x xid.ID) *OperationCreate {
	oc.mutation.SetID(x)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OperationCreate) SetNillableID(x *xid.ID) *OperationCreate {
	if x != nil {
		oc.SetID(*x)
	}
	return oc
}

// Mutation returns the OperationMutation object of the builder.
func (oc *OperationCreate) Mutation() *OperationMutation {
	return oc.mutation
}

// Save creates the Operation in the database.
func (oc *OperationCreate) Save(ctx context.Context) (*Operation, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperationCreate) SaveX(ctx context.Context) *Operation {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperationCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperationCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OperationCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := operation.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := operation.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := operation.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperationCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Operation.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Operation.updated_at"`)}
	}
	return nil
}

func (oc *OperationCreate) sqlSave(ctx context.Context) (*Operation, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OperationCreate) createSpec() (*Operation, *sqlgraph.CreateSpec) {
	var (
		_node = &Operation{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(operation.Table, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeString))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(operation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(operation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.CjeYs(); ok {
		_spec.SetField(operation.FieldCjeYs, field.TypeFloat64, value)
		_node.CjeYs = &value
	}
	if value, ok := oc.mutation.CjeLj(); ok {
		_spec.SetField(operation.FieldCjeLj, field.TypeFloat64, value)
		_node.CjeLj = &value
	}
	if value, ok := oc.mutation.YyeYs(); ok {
		_spec.SetField(operation.FieldYyeYs, field.TypeFloat64, value)
		_node.YyeYs = &value
	}
	if value, ok := oc.mutation.YyeLj(); ok {
		_spec.SetField(operation.FieldYyeLj, field.TypeFloat64, value)
		_node.YyeLj = &value
	}
	if value, ok := oc.mutation.XjlYs(); ok {
		_spec.SetField(operation.FieldXjlYs, field.TypeFloat64, value)
		_node.XjlYs = &value
	}
	if value, ok := oc.mutation.XjlLj(); ok {
		_spec.SetField(operation.FieldXjlLj, field.TypeFloat64, value)
		_node.XjlLj = &value
	}
	if value, ok := oc.mutation.Xmglf(); ok {
		_spec.SetField(operation.FieldXmglf, field.TypeFloat64, value)
		_node.Xmglf = &value
	}
	if value, ok := oc.mutation.Xmsjf(); ok {
		_spec.SetField(operation.FieldXmsjf, field.TypeFloat64, value)
		_node.Xmsjf = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Operation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OperationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (oc *OperationCreate) OnConflict(opts ...sql.ConflictOption) *OperationUpsertOne {
	oc.conflict = opts
	return &OperationUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Operation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OperationCreate) OnConflictColumns(columns ...string) *OperationUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OperationUpsertOne{
		create: oc,
	}
}

type (
	// OperationUpsertOne is the builder for "upsert"-ing
	//  one Operation node.
	OperationUpsertOne struct {
		create *OperationCreate
	}

	// OperationUpsert is the "OnConflict" setter.
	OperationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OperationUpsert) SetUpdatedAt(v time.Time) *OperationUpsert {
	u.Set(operation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OperationUpsert) UpdateUpdatedAt() *OperationUpsert {
	u.SetExcluded(operation.FieldUpdatedAt)
	return u
}

// SetCjeYs sets the "cje_ys" field.
func (u *OperationUpsert) SetCjeYs(v float64) *OperationUpsert {
	u.Set(operation.FieldCjeYs, v)
	return u
}

// UpdateCjeYs sets the "cje_ys" field to the value that was provided on create.
func (u *OperationUpsert) UpdateCjeYs() *OperationUpsert {
	u.SetExcluded(operation.FieldCjeYs)
	return u
}

// AddCjeYs adds v to the "cje_ys" field.
func (u *OperationUpsert) AddCjeYs(v float64) *OperationUpsert {
	u.Add(operation.FieldCjeYs, v)
	return u
}

// ClearCjeYs clears the value of the "cje_ys" field.
func (u *OperationUpsert) ClearCjeYs() *OperationUpsert {
	u.SetNull(operation.FieldCjeYs)
	return u
}

// SetCjeLj sets the "cje_lj" field.
func (u *OperationUpsert) SetCjeLj(v float64) *OperationUpsert {
	u.Set(operation.FieldCjeLj, v)
	return u
}

// UpdateCjeLj sets the "cje_lj" field to the value that was provided on create.
func (u *OperationUpsert) UpdateCjeLj() *OperationUpsert {
	u.SetExcluded(operation.FieldCjeLj)
	return u
}

// AddCjeLj adds v to the "cje_lj" field.
func (u *OperationUpsert) AddCjeLj(v float64) *OperationUpsert {
	u.Add(operation.FieldCjeLj, v)
	return u
}

// ClearCjeLj clears the value of the "cje_lj" field.
func (u *OperationUpsert) ClearCjeLj() *OperationUpsert {
	u.SetNull(operation.FieldCjeLj)
	return u
}

// SetYyeYs sets the "yye_ys" field.
func (u *OperationUpsert) SetYyeYs(v float64) *OperationUpsert {
	u.Set(operation.FieldYyeYs, v)
	return u
}

// UpdateYyeYs sets the "yye_ys" field to the value that was provided on create.
func (u *OperationUpsert) UpdateYyeYs() *OperationUpsert {
	u.SetExcluded(operation.FieldYyeYs)
	return u
}

// AddYyeYs adds v to the "yye_ys" field.
func (u *OperationUpsert) AddYyeYs(v float64) *OperationUpsert {
	u.Add(operation.FieldYyeYs, v)
	return u
}

// ClearYyeYs clears the value of the "yye_ys" field.
func (u *OperationUpsert) ClearYyeYs() *OperationUpsert {
	u.SetNull(operation.FieldYyeYs)
	return u
}

// SetYyeLj sets the "yye_lj" field.
func (u *OperationUpsert) SetYyeLj(v float64) *OperationUpsert {
	u.Set(operation.FieldYyeLj, v)
	return u
}

// UpdateYyeLj sets the "yye_lj" field to the value that was provided on create.
func (u *OperationUpsert) UpdateYyeLj() *OperationUpsert {
	u.SetExcluded(operation.FieldYyeLj)
	return u
}

// AddYyeLj adds v to the "yye_lj" field.
func (u *OperationUpsert) AddYyeLj(v float64) *OperationUpsert {
	u.Add(operation.FieldYyeLj, v)
	return u
}

// ClearYyeLj clears the value of the "yye_lj" field.
func (u *OperationUpsert) ClearYyeLj() *OperationUpsert {
	u.SetNull(operation.FieldYyeLj)
	return u
}

// SetXjlYs sets the "xjl_ys" field.
func (u *OperationUpsert) SetXjlYs(v float64) *OperationUpsert {
	u.Set(operation.FieldXjlYs, v)
	return u
}

// UpdateXjlYs sets the "xjl_ys" field to the value that was provided on create.
func (u *OperationUpsert) UpdateXjlYs() *OperationUpsert {
	u.SetExcluded(operation.FieldXjlYs)
	return u
}

// AddXjlYs adds v to the "xjl_ys" field.
func (u *OperationUpsert) AddXjlYs(v float64) *OperationUpsert {
	u.Add(operation.FieldXjlYs, v)
	return u
}

// ClearXjlYs clears the value of the "xjl_ys" field.
func (u *OperationUpsert) ClearXjlYs() *OperationUpsert {
	u.SetNull(operation.FieldXjlYs)
	return u
}

// SetXjlLj sets the "xjl_lj" field.
func (u *OperationUpsert) SetXjlLj(v float64) *OperationUpsert {
	u.Set(operation.FieldXjlLj, v)
	return u
}

// UpdateXjlLj sets the "xjl_lj" field to the value that was provided on create.
func (u *OperationUpsert) UpdateXjlLj() *OperationUpsert {
	u.SetExcluded(operation.FieldXjlLj)
	return u
}

// AddXjlLj adds v to the "xjl_lj" field.
func (u *OperationUpsert) AddXjlLj(v float64) *OperationUpsert {
	u.Add(operation.FieldXjlLj, v)
	return u
}

// ClearXjlLj clears the value of the "xjl_lj" field.
func (u *OperationUpsert) ClearXjlLj() *OperationUpsert {
	u.SetNull(operation.FieldXjlLj)
	return u
}

// SetXmglf sets the "xmglf" field.
func (u *OperationUpsert) SetXmglf(v float64) *OperationUpsert {
	u.Set(operation.FieldXmglf, v)
	return u
}

// UpdateXmglf sets the "xmglf" field to the value that was provided on create.
func (u *OperationUpsert) UpdateXmglf() *OperationUpsert {
	u.SetExcluded(operation.FieldXmglf)
	return u
}

// AddXmglf adds v to the "xmglf" field.
func (u *OperationUpsert) AddXmglf(v float64) *OperationUpsert {
	u.Add(operation.FieldXmglf, v)
	return u
}

// ClearXmglf clears the value of the "xmglf" field.
func (u *OperationUpsert) ClearXmglf() *OperationUpsert {
	u.SetNull(operation.FieldXmglf)
	return u
}

// SetXmsjf sets the "xmsjf" field.
func (u *OperationUpsert) SetXmsjf(v float64) *OperationUpsert {
	u.Set(operation.FieldXmsjf, v)
	return u
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *OperationUpsert) UpdateXmsjf() *OperationUpsert {
	u.SetExcluded(operation.FieldXmsjf)
	return u
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *OperationUpsert) AddXmsjf(v float64) *OperationUpsert {
	u.Add(operation.FieldXmsjf, v)
	return u
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *OperationUpsert) ClearXmsjf() *OperationUpsert {
	u.SetNull(operation.FieldXmsjf)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Operation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(operation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OperationUpsertOne) UpdateNewValues() *OperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(operation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(operation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Operation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OperationUpsertOne) Ignore() *OperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OperationUpsertOne) DoNothing() *OperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OperationCreate.OnConflict
// documentation for more info.
func (u *OperationUpsertOne) Update(set func(*OperationUpsert)) *OperationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OperationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OperationUpsertOne) SetUpdatedAt(v time.Time) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateUpdatedAt() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCjeYs sets the "cje_ys" field.
func (u *OperationUpsertOne) SetCjeYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetCjeYs(v)
	})
}

// AddCjeYs adds v to the "cje_ys" field.
func (u *OperationUpsertOne) AddCjeYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddCjeYs(v)
	})
}

// UpdateCjeYs sets the "cje_ys" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateCjeYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateCjeYs()
	})
}

// ClearCjeYs clears the value of the "cje_ys" field.
func (u *OperationUpsertOne) ClearCjeYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearCjeYs()
	})
}

// SetCjeLj sets the "cje_lj" field.
func (u *OperationUpsertOne) SetCjeLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetCjeLj(v)
	})
}

// AddCjeLj adds v to the "cje_lj" field.
func (u *OperationUpsertOne) AddCjeLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddCjeLj(v)
	})
}

// UpdateCjeLj sets the "cje_lj" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateCjeLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateCjeLj()
	})
}

// ClearCjeLj clears the value of the "cje_lj" field.
func (u *OperationUpsertOne) ClearCjeLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearCjeLj()
	})
}

// SetYyeYs sets the "yye_ys" field.
func (u *OperationUpsertOne) SetYyeYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetYyeYs(v)
	})
}

// AddYyeYs adds v to the "yye_ys" field.
func (u *OperationUpsertOne) AddYyeYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddYyeYs(v)
	})
}

// UpdateYyeYs sets the "yye_ys" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateYyeYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateYyeYs()
	})
}

// ClearYyeYs clears the value of the "yye_ys" field.
func (u *OperationUpsertOne) ClearYyeYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearYyeYs()
	})
}

// SetYyeLj sets the "yye_lj" field.
func (u *OperationUpsertOne) SetYyeLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetYyeLj(v)
	})
}

// AddYyeLj adds v to the "yye_lj" field.
func (u *OperationUpsertOne) AddYyeLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddYyeLj(v)
	})
}

// UpdateYyeLj sets the "yye_lj" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateYyeLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateYyeLj()
	})
}

// ClearYyeLj clears the value of the "yye_lj" field.
func (u *OperationUpsertOne) ClearYyeLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearYyeLj()
	})
}

// SetXjlYs sets the "xjl_ys" field.
func (u *OperationUpsertOne) SetXjlYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetXjlYs(v)
	})
}

// AddXjlYs adds v to the "xjl_ys" field.
func (u *OperationUpsertOne) AddXjlYs(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddXjlYs(v)
	})
}

// UpdateXjlYs sets the "xjl_ys" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateXjlYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXjlYs()
	})
}

// ClearXjlYs clears the value of the "xjl_ys" field.
func (u *OperationUpsertOne) ClearXjlYs() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXjlYs()
	})
}

// SetXjlLj sets the "xjl_lj" field.
func (u *OperationUpsertOne) SetXjlLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetXjlLj(v)
	})
}

// AddXjlLj adds v to the "xjl_lj" field.
func (u *OperationUpsertOne) AddXjlLj(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddXjlLj(v)
	})
}

// UpdateXjlLj sets the "xjl_lj" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateXjlLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXjlLj()
	})
}

// ClearXjlLj clears the value of the "xjl_lj" field.
func (u *OperationUpsertOne) ClearXjlLj() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXjlLj()
	})
}

// SetXmglf sets the "xmglf" field.
func (u *OperationUpsertOne) SetXmglf(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetXmglf(v)
	})
}

// AddXmglf adds v to the "xmglf" field.
func (u *OperationUpsertOne) AddXmglf(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddXmglf(v)
	})
}

// UpdateXmglf sets the "xmglf" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateXmglf() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXmglf()
	})
}

// ClearXmglf clears the value of the "xmglf" field.
func (u *OperationUpsertOne) ClearXmglf() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXmglf()
	})
}

// SetXmsjf sets the "xmsjf" field.
func (u *OperationUpsertOne) SetXmsjf(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.SetXmsjf(v)
	})
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *OperationUpsertOne) AddXmsjf(v float64) *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.AddXmsjf(v)
	})
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *OperationUpsertOne) UpdateXmsjf() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXmsjf()
	})
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *OperationUpsertOne) ClearXmsjf() *OperationUpsertOne {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXmsjf()
	})
}

// Exec executes the query.
func (u *OperationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OperationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OperationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OperationUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OperationUpsertOne.ID is not supported by MySQL driver. Use OperationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OperationUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OperationCreateBulk is the builder for creating many Operation entities in bulk.
type OperationCreateBulk struct {
	config
	err      error
	builders []*OperationCreate
	conflict []sql.ConflictOption
}

// Save creates the Operation entities in the database.
func (ocb *OperationCreateBulk) Save(ctx context.Context) ([]*Operation, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operation, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperationCreateBulk) SaveX(ctx context.Context) []*Operation {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperationCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperationCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Operation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OperationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ocb *OperationCreateBulk) OnConflict(opts ...sql.ConflictOption) *OperationUpsertBulk {
	ocb.conflict = opts
	return &OperationUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Operation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OperationCreateBulk) OnConflictColumns(columns ...string) *OperationUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OperationUpsertBulk{
		create: ocb,
	}
}

// OperationUpsertBulk is the builder for "upsert"-ing
// a bulk of Operation nodes.
type OperationUpsertBulk struct {
	create *OperationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Operation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(operation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OperationUpsertBulk) UpdateNewValues() *OperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(operation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(operation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Operation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OperationUpsertBulk) Ignore() *OperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OperationUpsertBulk) DoNothing() *OperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OperationCreateBulk.OnConflict
// documentation for more info.
func (u *OperationUpsertBulk) Update(set func(*OperationUpsert)) *OperationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OperationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OperationUpsertBulk) SetUpdatedAt(v time.Time) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateUpdatedAt() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCjeYs sets the "cje_ys" field.
func (u *OperationUpsertBulk) SetCjeYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetCjeYs(v)
	})
}

// AddCjeYs adds v to the "cje_ys" field.
func (u *OperationUpsertBulk) AddCjeYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddCjeYs(v)
	})
}

// UpdateCjeYs sets the "cje_ys" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateCjeYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateCjeYs()
	})
}

// ClearCjeYs clears the value of the "cje_ys" field.
func (u *OperationUpsertBulk) ClearCjeYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearCjeYs()
	})
}

// SetCjeLj sets the "cje_lj" field.
func (u *OperationUpsertBulk) SetCjeLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetCjeLj(v)
	})
}

// AddCjeLj adds v to the "cje_lj" field.
func (u *OperationUpsertBulk) AddCjeLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddCjeLj(v)
	})
}

// UpdateCjeLj sets the "cje_lj" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateCjeLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateCjeLj()
	})
}

// ClearCjeLj clears the value of the "cje_lj" field.
func (u *OperationUpsertBulk) ClearCjeLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearCjeLj()
	})
}

// SetYyeYs sets the "yye_ys" field.
func (u *OperationUpsertBulk) SetYyeYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetYyeYs(v)
	})
}

// AddYyeYs adds v to the "yye_ys" field.
func (u *OperationUpsertBulk) AddYyeYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddYyeYs(v)
	})
}

// UpdateYyeYs sets the "yye_ys" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateYyeYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateYyeYs()
	})
}

// ClearYyeYs clears the value of the "yye_ys" field.
func (u *OperationUpsertBulk) ClearYyeYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearYyeYs()
	})
}

// SetYyeLj sets the "yye_lj" field.
func (u *OperationUpsertBulk) SetYyeLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetYyeLj(v)
	})
}

// AddYyeLj adds v to the "yye_lj" field.
func (u *OperationUpsertBulk) AddYyeLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddYyeLj(v)
	})
}

// UpdateYyeLj sets the "yye_lj" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateYyeLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateYyeLj()
	})
}

// ClearYyeLj clears the value of the "yye_lj" field.
func (u *OperationUpsertBulk) ClearYyeLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearYyeLj()
	})
}

// SetXjlYs sets the "xjl_ys" field.
func (u *OperationUpsertBulk) SetXjlYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetXjlYs(v)
	})
}

// AddXjlYs adds v to the "xjl_ys" field.
func (u *OperationUpsertBulk) AddXjlYs(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddXjlYs(v)
	})
}

// UpdateXjlYs sets the "xjl_ys" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateXjlYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXjlYs()
	})
}

// ClearXjlYs clears the value of the "xjl_ys" field.
func (u *OperationUpsertBulk) ClearXjlYs() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXjlYs()
	})
}

// SetXjlLj sets the "xjl_lj" field.
func (u *OperationUpsertBulk) SetXjlLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetXjlLj(v)
	})
}

// AddXjlLj adds v to the "xjl_lj" field.
func (u *OperationUpsertBulk) AddXjlLj(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddXjlLj(v)
	})
}

// UpdateXjlLj sets the "xjl_lj" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateXjlLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXjlLj()
	})
}

// ClearXjlLj clears the value of the "xjl_lj" field.
func (u *OperationUpsertBulk) ClearXjlLj() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXjlLj()
	})
}

// SetXmglf sets the "xmglf" field.
func (u *OperationUpsertBulk) SetXmglf(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetXmglf(v)
	})
}

// AddXmglf adds v to the "xmglf" field.
func (u *OperationUpsertBulk) AddXmglf(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddXmglf(v)
	})
}

// UpdateXmglf sets the "xmglf" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateXmglf() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXmglf()
	})
}

// ClearXmglf clears the value of the "xmglf" field.
func (u *OperationUpsertBulk) ClearXmglf() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXmglf()
	})
}

// SetXmsjf sets the "xmsjf" field.
func (u *OperationUpsertBulk) SetXmsjf(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.SetXmsjf(v)
	})
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *OperationUpsertBulk) AddXmsjf(v float64) *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.AddXmsjf(v)
	})
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *OperationUpsertBulk) UpdateXmsjf() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.UpdateXmsjf()
	})
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *OperationUpsertBulk) ClearXmsjf() *OperationUpsertBulk {
	return u.Update(func(s *OperationUpsert) {
		s.ClearXmsjf()
	})
}

// Exec executes the query.
func (u *OperationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OperationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OperationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OperationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
