// Code generated by ent, DO NOT EDIT.

package tenderprofile

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tenderprofile type in the database.
	Label = "tender_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldApprovalMsgID holds the string denoting the approval_msg_id field in the database.
	FieldApprovalMsgID = "approval_msg_id"
	// FieldApprovalDate holds the string denoting the approval_date field in the database.
	FieldApprovalDate = "approval_date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEstimatedAmount holds the string denoting the estimated_amount field in the database.
	FieldEstimatedAmount = "estimated_amount"
	// FieldTenderDate holds the string denoting the tender_date field in the database.
	FieldTenderDate = "tender_date"
	// FieldClassify holds the string denoting the classify field in the database.
	FieldClassify = "classify"
	// FieldDiscoveryDate holds the string denoting the discovery_date field in the database.
	FieldDiscoveryDate = "discovery_date"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldFullAddress holds the string denoting the full_address field in the database.
	FieldFullAddress = "full_address"
	// FieldContractor holds the string denoting the contractor field in the database.
	FieldContractor = "contractor"
	// FieldLevelInvolved holds the string denoting the level_involved field in the database.
	FieldLevelInvolved = "level_involved"
	// FieldSizeAndValueRating holds the string denoting the size_and_value_rating field in the database.
	FieldSizeAndValueRating = "size_and_value_rating"
	// FieldSizeAndValueRatingOverview holds the string denoting the size_and_value_rating_overview field in the database.
	FieldSizeAndValueRatingOverview = "size_and_value_rating_overview"
	// FieldCreditAndPaymentRating holds the string denoting the credit_and_payment_rating field in the database.
	FieldCreditAndPaymentRating = "credit_and_payment_rating"
	// FieldCreditAndPaymentRatingOverview holds the string denoting the credit_and_payment_rating_overview field in the database.
	FieldCreditAndPaymentRatingOverview = "credit_and_payment_rating_overview"
	// FieldTimeLimitRating holds the string denoting the time_limit_rating field in the database.
	FieldTimeLimitRating = "time_limit_rating"
	// FieldTimeLimitRatingOverview holds the string denoting the time_limit_rating_overview field in the database.
	FieldTimeLimitRatingOverview = "time_limit_rating_overview"
	// FieldCustomerRelationshipRating holds the string denoting the customer_relationship_rating field in the database.
	FieldCustomerRelationshipRating = "customer_relationship_rating"
	// FieldCustomerRelationshipRatingOverview holds the string denoting the customer_relationship_rating_overview field in the database.
	FieldCustomerRelationshipRatingOverview = "customer_relationship_rating_overview"
	// FieldCompetitivePartnershipRating holds the string denoting the competitive_partnership_rating field in the database.
	FieldCompetitivePartnershipRating = "competitive_partnership_rating"
	// FieldCompetitivePartnershipRatingOverview holds the string denoting the competitive_partnership_rating_overview field in the database.
	FieldCompetitivePartnershipRatingOverview = "competitive_partnership_rating_overview"
	// FieldPrepareToBid holds the string denoting the prepare_to_bid field in the database.
	FieldPrepareToBid = "prepare_to_bid"
	// FieldProjectCode holds the string denoting the project_code field in the database.
	FieldProjectCode = "project_code"
	// FieldProjectType holds the string denoting the project_type field in the database.
	FieldProjectType = "project_type"
	// FieldProjectDefinition holds the string denoting the project_definition field in the database.
	FieldProjectDefinition = "project_definition"
	// FieldEstimatedProjectStartDate holds the string denoting the estimated_project_start_date field in the database.
	FieldEstimatedProjectStartDate = "estimated_project_start_date"
	// FieldEstimatedProjectEndDate holds the string denoting the estimated_project_end_date field in the database.
	FieldEstimatedProjectEndDate = "estimated_project_end_date"
	// FieldAttachments holds the string denoting the attachments field in the database.
	FieldAttachments = "attachments"
	// FieldGeoCoordinate holds the string denoting the geo_coordinate field in the database.
	FieldGeoCoordinate = "geo_coordinate"
	// FieldGeoBounds holds the string denoting the geo_bounds field in the database.
	FieldGeoBounds = "geo_bounds"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldTenderSituations holds the string denoting the tender_situations field in the database.
	FieldTenderSituations = "tender_situations"
	// FieldOwnerSituations holds the string denoting the owner_situations field in the database.
	FieldOwnerSituations = "owner_situations"
	// FieldBiddingInstructions holds the string denoting the bidding_instructions field in the database.
	FieldBiddingInstructions = "bidding_instructions"
	// FieldCompetitorSituations holds the string denoting the competitor_situations field in the database.
	FieldCompetitorSituations = "competitor_situations"
	// FieldCostEngineer holds the string denoting the cost_engineer field in the database.
	FieldCostEngineer = "cost_engineer"
	// FieldTenderForm holds the string denoting the tender_form field in the database.
	FieldTenderForm = "tender_form"
	// FieldContractForm holds the string denoting the contract_form field in the database.
	FieldContractForm = "contract_form"
	// FieldManagementCompany holds the string denoting the management_company field in the database.
	FieldManagementCompany = "management_company"
	// FieldTenderingAgency holds the string denoting the tendering_agency field in the database.
	FieldTenderingAgency = "tendering_agency"
	// FieldBiddingDate holds the string denoting the bidding_date field in the database.
	FieldBiddingDate = "bidding_date"
	// FieldFacadeConsultant holds the string denoting the facade_consultant field in the database.
	FieldFacadeConsultant = "facade_consultant"
	// FieldDesignUnit holds the string denoting the design_unit field in the database.
	FieldDesignUnit = "design_unit"
	// FieldConsultingFirm holds the string denoting the consulting_firm field in the database.
	FieldConsultingFirm = "consulting_firm"
	// FieldKeyProject holds the string denoting the key_project field in the database.
	FieldKeyProject = "key_project"
	// FieldCurrentProgress holds the string denoting the current_progress field in the database.
	FieldCurrentProgress = "current_progress"
	// FieldTenderWinCompany holds the string denoting the tender_win_company field in the database.
	FieldTenderWinCompany = "tender_win_company"
	// FieldTenderCode holds the string denoting the tender_code field in the database.
	FieldTenderCode = "tender_code"
	// FieldArchitect holds the string denoting the architect field in the database.
	FieldArchitect = "architect"
	// FieldDeveloper holds the string denoting the developer field in the database.
	FieldDeveloper = "developer"
	// FieldTenderClosingDate holds the string denoting the tender_closing_date field in the database.
	FieldTenderClosingDate = "tender_closing_date"
	// FieldConstructionArea holds the string denoting the construction_area field in the database.
	FieldConstructionArea = "construction_area"
	// FieldTenderWinDate holds the string denoting the tender_win_date field in the database.
	FieldTenderWinDate = "tender_win_date"
	// FieldTenderWinAmount holds the string denoting the tender_win_amount field in the database.
	FieldTenderWinAmount = "tender_win_amount"
	// FieldLastTenderAmount holds the string denoting the last_tender_amount field in the database.
	FieldLastTenderAmount = "last_tender_amount"
	// FieldTenderID holds the string denoting the tender_id field in the database.
	FieldTenderID = "tender_id"
	// FieldProvinceID holds the string denoting the province_id field in the database.
	FieldProvinceID = "province_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldDistrictID holds the string denoting the district_id field in the database.
	FieldDistrictID = "district_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldFinderID holds the string denoting the finder_id field in the database.
	FieldFinderID = "finder_id"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// EdgeTender holds the string denoting the tender edge name in mutations.
	EdgeTender = "tender"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeFinder holds the string denoting the finder edge name in mutations.
	EdgeFinder = "finder"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeProvince holds the string denoting the province edge name in mutations.
	EdgeProvince = "province"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeDistrict holds the string denoting the district edge name in mutations.
	EdgeDistrict = "district"
	// EdgeApprover holds the string denoting the approver edge name in mutations.
	EdgeApprover = "approver"
	// Table holds the table name of the tenderprofile in the database.
	Table = "tender_profiles"
	// TenderTable is the table that holds the tender relation/edge.
	TenderTable = "tender_profiles"
	// TenderInverseTable is the table name for the Tender entity.
	// It exists in this package in order to avoid circular dependency with the "tender" package.
	TenderInverseTable = "tenders"
	// TenderColumn is the table column denoting the tender relation/edge.
	TenderColumn = "tender_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "tender_profiles"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// FinderTable is the table that holds the finder relation/edge.
	FinderTable = "tender_profiles"
	// FinderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FinderInverseTable = "users"
	// FinderColumn is the table column denoting the finder relation/edge.
	FinderColumn = "finder_id"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "tender_profiles"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "created_by_id"
	// ProvinceTable is the table that holds the province relation/edge.
	ProvinceTable = "tender_profiles"
	// ProvinceInverseTable is the table name for the Province entity.
	// It exists in this package in order to avoid circular dependency with the "province" package.
	ProvinceInverseTable = "provinces"
	// ProvinceColumn is the table column denoting the province relation/edge.
	ProvinceColumn = "province_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "tender_profiles"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// DistrictTable is the table that holds the district relation/edge.
	DistrictTable = "tender_profiles"
	// DistrictInverseTable is the table name for the District entity.
	// It exists in this package in order to avoid circular dependency with the "district" package.
	DistrictInverseTable = "districts"
	// DistrictColumn is the table column denoting the district relation/edge.
	DistrictColumn = "district_id"
	// ApproverTable is the table that holds the approver relation/edge.
	ApproverTable = "tender_profiles"
	// ApproverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApproverInverseTable = "users"
	// ApproverColumn is the table column denoting the approver relation/edge.
	ApproverColumn = "approver_id"
)

// Columns holds all SQL columns for tenderprofile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldApprovalStatus,
	FieldApprovalMsgID,
	FieldApprovalDate,
	FieldName,
	FieldEstimatedAmount,
	FieldTenderDate,
	FieldClassify,
	FieldDiscoveryDate,
	FieldAddress,
	FieldFullAddress,
	FieldContractor,
	FieldLevelInvolved,
	FieldSizeAndValueRating,
	FieldSizeAndValueRatingOverview,
	FieldCreditAndPaymentRating,
	FieldCreditAndPaymentRatingOverview,
	FieldTimeLimitRating,
	FieldTimeLimitRatingOverview,
	FieldCustomerRelationshipRating,
	FieldCustomerRelationshipRatingOverview,
	FieldCompetitivePartnershipRating,
	FieldCompetitivePartnershipRatingOverview,
	FieldPrepareToBid,
	FieldProjectCode,
	FieldProjectType,
	FieldProjectDefinition,
	FieldEstimatedProjectStartDate,
	FieldEstimatedProjectEndDate,
	FieldAttachments,
	FieldGeoCoordinate,
	FieldGeoBounds,
	FieldRemark,
	FieldImages,
	FieldTenderSituations,
	FieldOwnerSituations,
	FieldBiddingInstructions,
	FieldCompetitorSituations,
	FieldCostEngineer,
	FieldTenderForm,
	FieldContractForm,
	FieldManagementCompany,
	FieldTenderingAgency,
	FieldBiddingDate,
	FieldFacadeConsultant,
	FieldDesignUnit,
	FieldConsultingFirm,
	FieldKeyProject,
	FieldCurrentProgress,
	FieldTenderWinCompany,
	FieldTenderCode,
	FieldArchitect,
	FieldDeveloper,
	FieldTenderClosingDate,
	FieldConstructionArea,
	FieldTenderWinDate,
	FieldTenderWinAmount,
	FieldLastTenderAmount,
	FieldTenderID,
	FieldProvinceID,
	FieldCityID,
	FieldDistrictID,
	FieldCustomerID,
	FieldFinderID,
	FieldCreatedByID,
	FieldApproverID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultApprovalStatus holds the default value on creation for the "approval_status" field.
	DefaultApprovalStatus int
	// ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	ApprovalStatusValidator func(int) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ClassifyValidator is a validator for the "classify" field. It is called by the builders before save.
	ClassifyValidator func(int) error
	// LevelInvolvedValidator is a validator for the "level_involved" field. It is called by the builders before save.
	LevelInvolvedValidator func(int) error
	// SizeAndValueRatingValidator is a validator for the "size_and_value_rating" field. It is called by the builders before save.
	SizeAndValueRatingValidator func(int) error
	// CreditAndPaymentRatingValidator is a validator for the "credit_and_payment_rating" field. It is called by the builders before save.
	CreditAndPaymentRatingValidator func(int) error
	// TimeLimitRatingValidator is a validator for the "time_limit_rating" field. It is called by the builders before save.
	TimeLimitRatingValidator func(int) error
	// CustomerRelationshipRatingValidator is a validator for the "customer_relationship_rating" field. It is called by the builders before save.
	CustomerRelationshipRatingValidator func(int) error
	// CompetitivePartnershipRatingValidator is a validator for the "competitive_partnership_rating" field. It is called by the builders before save.
	CompetitivePartnershipRatingValidator func(int) error
	// DefaultPrepareToBid holds the default value on creation for the "prepare_to_bid" field.
	DefaultPrepareToBid bool
	// DefaultKeyProject holds the default value on creation for the "key_project" field.
	DefaultKeyProject bool
	// TenderWinAmountValidator is a validator for the "tender_win_amount" field. It is called by the builders before save.
	TenderWinAmountValidator func(float64) error
	// LastTenderAmountValidator is a validator for the "last_tender_amount" field. It is called by the builders before save.
	LastTenderAmountValidator func(float64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the TenderProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByApprovalMsgID orders the results by the approval_msg_id field.
func ByApprovalMsgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalMsgID, opts...).ToFunc()
}

// ByApprovalDate orders the results by the approval_date field.
func ByApprovalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEstimatedAmount orders the results by the estimated_amount field.
func ByEstimatedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedAmount, opts...).ToFunc()
}

// ByTenderDate orders the results by the tender_date field.
func ByTenderDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderDate, opts...).ToFunc()
}

// ByClassify orders the results by the classify field.
func ByClassify(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassify, opts...).ToFunc()
}

// ByDiscoveryDate orders the results by the discovery_date field.
func ByDiscoveryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscoveryDate, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByFullAddress orders the results by the full_address field.
func ByFullAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullAddress, opts...).ToFunc()
}

// ByContractor orders the results by the contractor field.
func ByContractor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractor, opts...).ToFunc()
}

// ByLevelInvolved orders the results by the level_involved field.
func ByLevelInvolved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelInvolved, opts...).ToFunc()
}

// BySizeAndValueRating orders the results by the size_and_value_rating field.
func BySizeAndValueRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeAndValueRating, opts...).ToFunc()
}

// BySizeAndValueRatingOverview orders the results by the size_and_value_rating_overview field.
func BySizeAndValueRatingOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeAndValueRatingOverview, opts...).ToFunc()
}

// ByCreditAndPaymentRating orders the results by the credit_and_payment_rating field.
func ByCreditAndPaymentRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditAndPaymentRating, opts...).ToFunc()
}

// ByCreditAndPaymentRatingOverview orders the results by the credit_and_payment_rating_overview field.
func ByCreditAndPaymentRatingOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditAndPaymentRatingOverview, opts...).ToFunc()
}

// ByTimeLimitRating orders the results by the time_limit_rating field.
func ByTimeLimitRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeLimitRating, opts...).ToFunc()
}

// ByTimeLimitRatingOverview orders the results by the time_limit_rating_overview field.
func ByTimeLimitRatingOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeLimitRatingOverview, opts...).ToFunc()
}

// ByCustomerRelationshipRating orders the results by the customer_relationship_rating field.
func ByCustomerRelationshipRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerRelationshipRating, opts...).ToFunc()
}

// ByCustomerRelationshipRatingOverview orders the results by the customer_relationship_rating_overview field.
func ByCustomerRelationshipRatingOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerRelationshipRatingOverview, opts...).ToFunc()
}

// ByCompetitivePartnershipRating orders the results by the competitive_partnership_rating field.
func ByCompetitivePartnershipRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitivePartnershipRating, opts...).ToFunc()
}

// ByCompetitivePartnershipRatingOverview orders the results by the competitive_partnership_rating_overview field.
func ByCompetitivePartnershipRatingOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitivePartnershipRatingOverview, opts...).ToFunc()
}

// ByPrepareToBid orders the results by the prepare_to_bid field.
func ByPrepareToBid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrepareToBid, opts...).ToFunc()
}

// ByProjectCode orders the results by the project_code field.
func ByProjectCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectCode, opts...).ToFunc()
}

// ByProjectType orders the results by the project_type field.
func ByProjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectType, opts...).ToFunc()
}

// ByProjectDefinition orders the results by the project_definition field.
func ByProjectDefinition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectDefinition, opts...).ToFunc()
}

// ByEstimatedProjectStartDate orders the results by the estimated_project_start_date field.
func ByEstimatedProjectStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedProjectStartDate, opts...).ToFunc()
}

// ByEstimatedProjectEndDate orders the results by the estimated_project_end_date field.
func ByEstimatedProjectEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedProjectEndDate, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByTenderSituations orders the results by the tender_situations field.
func ByTenderSituations(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderSituations, opts...).ToFunc()
}

// ByOwnerSituations orders the results by the owner_situations field.
func ByOwnerSituations(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerSituations, opts...).ToFunc()
}

// ByBiddingInstructions orders the results by the bidding_instructions field.
func ByBiddingInstructions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiddingInstructions, opts...).ToFunc()
}

// ByCompetitorSituations orders the results by the competitor_situations field.
func ByCompetitorSituations(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitorSituations, opts...).ToFunc()
}

// ByCostEngineer orders the results by the cost_engineer field.
func ByCostEngineer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostEngineer, opts...).ToFunc()
}

// ByTenderForm orders the results by the tender_form field.
func ByTenderForm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderForm, opts...).ToFunc()
}

// ByContractForm orders the results by the contract_form field.
func ByContractForm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractForm, opts...).ToFunc()
}

// ByManagementCompany orders the results by the management_company field.
func ByManagementCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagementCompany, opts...).ToFunc()
}

// ByTenderingAgency orders the results by the tendering_agency field.
func ByTenderingAgency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderingAgency, opts...).ToFunc()
}

// ByBiddingDate orders the results by the bidding_date field.
func ByBiddingDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiddingDate, opts...).ToFunc()
}

// ByFacadeConsultant orders the results by the facade_consultant field.
func ByFacadeConsultant(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacadeConsultant, opts...).ToFunc()
}

// ByDesignUnit orders the results by the design_unit field.
func ByDesignUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignUnit, opts...).ToFunc()
}

// ByConsultingFirm orders the results by the consulting_firm field.
func ByConsultingFirm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsultingFirm, opts...).ToFunc()
}

// ByKeyProject orders the results by the key_project field.
func ByKeyProject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyProject, opts...).ToFunc()
}

// ByCurrentProgress orders the results by the current_progress field.
func ByCurrentProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentProgress, opts...).ToFunc()
}

// ByTenderWinCompany orders the results by the tender_win_company field.
func ByTenderWinCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderWinCompany, opts...).ToFunc()
}

// ByTenderCode orders the results by the tender_code field.
func ByTenderCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderCode, opts...).ToFunc()
}

// ByArchitect orders the results by the architect field.
func ByArchitect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchitect, opts...).ToFunc()
}

// ByDeveloper orders the results by the developer field.
func ByDeveloper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeveloper, opts...).ToFunc()
}

// ByTenderClosingDate orders the results by the tender_closing_date field.
func ByTenderClosingDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderClosingDate, opts...).ToFunc()
}

// ByConstructionArea orders the results by the construction_area field.
func ByConstructionArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstructionArea, opts...).ToFunc()
}

// ByTenderWinDate orders the results by the tender_win_date field.
func ByTenderWinDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderWinDate, opts...).ToFunc()
}

// ByTenderWinAmount orders the results by the tender_win_amount field.
func ByTenderWinAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderWinAmount, opts...).ToFunc()
}

// ByLastTenderAmount orders the results by the last_tender_amount field.
func ByLastTenderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastTenderAmount, opts...).ToFunc()
}

// ByTenderID orders the results by the tender_id field.
func ByTenderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderID, opts...).ToFunc()
}

// ByProvinceID orders the results by the province_id field.
func ByProvinceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvinceID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByDistrictID orders the results by the district_id field.
func ByDistrictID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistrictID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByFinderID orders the results by the finder_id field.
func ByFinderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinderID, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByTenderField orders the results by tender field.
func ByTenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByFinderField orders the results by finder field.
func ByFinderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFinderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByProvinceField orders the results by province field.
func ByProvinceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvinceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByDistrictField orders the results by district field.
func ByDistrictField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDistrictStep(), sql.OrderByField(field, opts...))
	}
}

// ByApproverField orders the results by approver field.
func ByApproverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproverStep(), sql.OrderByField(field, opts...))
	}
}
func newTenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenderTable, TenderColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
	)
}
func newFinderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FinderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FinderTable, FinderColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
	)
}
func newProvinceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvinceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProvinceTable, ProvinceColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newDistrictStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DistrictInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DistrictTable, DistrictColumn),
	)
}
func newApproverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ApproverTable, ApproverColumn),
	)
}
