// Code generated by ent, DO NOT EDIT.

package tender

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tender type in the database.
	Label = "tender"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEstimatedAmount holds the string denoting the estimated_amount field in the database.
	FieldEstimatedAmount = "estimated_amount"
	// FieldTenderDate holds the string denoting the tender_date field in the database.
	FieldTenderDate = "tender_date"
	// FieldFindDate holds the string denoting the find_date field in the database.
	FieldFindDate = "find_date"
	// FieldFinder holds the string denoting the finder field in the database.
	FieldFinder = "finder"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldFollowingPerson holds the string denoting the following_person field in the database.
	FieldFollowingPerson = "following_person"
	// FieldSizeAndValueRating holds the string denoting the size_and_value_rating field in the database.
	FieldSizeAndValueRating = "size_and_value_rating"
	// FieldCreditAndPaymentRating holds the string denoting the credit_and_payment_rating field in the database.
	FieldCreditAndPaymentRating = "credit_and_payment_rating"
	// FieldTimeLimitRating holds the string denoting the time_limit_rating field in the database.
	FieldTimeLimitRating = "time_limit_rating"
	// FieldCustomerRelationshipRating holds the string denoting the customer_relationship_rating field in the database.
	FieldCustomerRelationshipRating = "customer_relationship_rating"
	// FieldCompetitivePartnershipRating holds the string denoting the competitive_partnership_rating field in the database.
	FieldCompetitivePartnershipRating = "competitive_partnership_rating"
	// FieldPrepareToBid holds the string denoting the prepare_to_bid field in the database.
	FieldPrepareToBid = "prepare_to_bid"
	// FieldProjectCode holds the string denoting the project_code field in the database.
	FieldProjectCode = "project_code"
	// FieldProjectDefinition holds the string denoting the project_definition field in the database.
	FieldProjectDefinition = "project_definition"
	// FieldEstimatedProjectStartDate holds the string denoting the estimated_project_start_date field in the database.
	FieldEstimatedProjectStartDate = "estimated_project_start_date"
	// FieldEstimatedProjectEndDate holds the string denoting the estimated_project_end_date field in the database.
	FieldEstimatedProjectEndDate = "estimated_project_end_date"
	// FieldProjectType holds the string denoting the project_type field in the database.
	FieldProjectType = "project_type"
	// FieldAttachements holds the string denoting the attachements field in the database.
	FieldAttachements = "attachements"
	// FieldGeoLocation holds the string denoting the geo_location field in the database.
	FieldGeoLocation = "geo_location"
	// FieldGeoCoordinate holds the string denoting the geo_coordinate field in the database.
	FieldGeoCoordinate = "geo_coordinate"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldAreaID holds the string denoting the area_id field in the database.
	FieldAreaID = "area_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the tender in the database.
	Table = "tenders"
	// AreaTable is the table that holds the area relation/edge.
	AreaTable = "tenders"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "area_id"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "tenders"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
)

// Columns holds all SQL columns for tender fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldStatus,
	FieldName,
	FieldEstimatedAmount,
	FieldTenderDate,
	FieldFindDate,
	FieldFinder,
	FieldCreatedBy,
	FieldFollowingPerson,
	FieldSizeAndValueRating,
	FieldCreditAndPaymentRating,
	FieldTimeLimitRating,
	FieldCustomerRelationshipRating,
	FieldCompetitivePartnershipRating,
	FieldPrepareToBid,
	FieldProjectCode,
	FieldProjectDefinition,
	FieldEstimatedProjectStartDate,
	FieldEstimatedProjectEndDate,
	FieldProjectType,
	FieldAttachements,
	FieldGeoLocation,
	FieldGeoCoordinate,
	FieldRemark,
	FieldImages,
	FieldAreaID,
	FieldCustomerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int8
	// SizeAndValueRatingValidator is a validator for the "size_and_value_rating" field. It is called by the builders before save.
	SizeAndValueRatingValidator func(int8) error
	// CreditAndPaymentRatingValidator is a validator for the "credit_and_payment_rating" field. It is called by the builders before save.
	CreditAndPaymentRatingValidator func(int8) error
	// TimeLimitRatingValidator is a validator for the "time_limit_rating" field. It is called by the builders before save.
	TimeLimitRatingValidator func(int8) error
	// CustomerRelationshipRatingValidator is a validator for the "customer_relationship_rating" field. It is called by the builders before save.
	CustomerRelationshipRatingValidator func(int8) error
	// CompetitivePartnershipRatingValidator is a validator for the "competitive_partnership_rating" field. It is called by the builders before save.
	CompetitivePartnershipRatingValidator func(int8) error
	// DefaultPrepareToBid holds the default value on creation for the "prepare_to_bid" field.
	DefaultPrepareToBid bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Tender queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEstimatedAmount orders the results by the estimated_amount field.
func ByEstimatedAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedAmount, opts...).ToFunc()
}

// ByTenderDate orders the results by the tender_date field.
func ByTenderDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderDate, opts...).ToFunc()
}

// ByFindDate orders the results by the find_date field.
func ByFindDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFindDate, opts...).ToFunc()
}

// BySizeAndValueRating orders the results by the size_and_value_rating field.
func BySizeAndValueRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeAndValueRating, opts...).ToFunc()
}

// ByCreditAndPaymentRating orders the results by the credit_and_payment_rating field.
func ByCreditAndPaymentRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditAndPaymentRating, opts...).ToFunc()
}

// ByTimeLimitRating orders the results by the time_limit_rating field.
func ByTimeLimitRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeLimitRating, opts...).ToFunc()
}

// ByCustomerRelationshipRating orders the results by the customer_relationship_rating field.
func ByCustomerRelationshipRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerRelationshipRating, opts...).ToFunc()
}

// ByCompetitivePartnershipRating orders the results by the competitive_partnership_rating field.
func ByCompetitivePartnershipRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitivePartnershipRating, opts...).ToFunc()
}

// ByPrepareToBid orders the results by the prepare_to_bid field.
func ByPrepareToBid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrepareToBid, opts...).ToFunc()
}

// ByProjectCode orders the results by the project_code field.
func ByProjectCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectCode, opts...).ToFunc()
}

// ByProjectDefinition orders the results by the project_definition field.
func ByProjectDefinition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectDefinition, opts...).ToFunc()
}

// ByEstimatedProjectStartDate orders the results by the estimated_project_start_date field.
func ByEstimatedProjectStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedProjectStartDate, opts...).ToFunc()
}

// ByEstimatedProjectEndDate orders the results by the estimated_project_end_date field.
func ByEstimatedProjectEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedProjectEndDate, opts...).ToFunc()
}

// ByProjectType orders the results by the project_type field.
func ByProjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectType, opts...).ToFunc()
}

// ByGeoLocation orders the results by the geo_location field.
func ByGeoLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeoLocation, opts...).ToFunc()
}

// ByGeoCoordinate orders the results by the geo_coordinate field.
func ByGeoCoordinate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeoCoordinate, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByAreaID orders the results by the area_id field.
func ByAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByAreaField orders the results by area field.
func ByAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
