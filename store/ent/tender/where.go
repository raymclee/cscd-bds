// Code generated by ent, DO NOT EDIT.

package tender

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldUpdatedAt, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldName, v))
}

// EstimatedAmount applies equality check predicate on the "estimated_amount" field. It's identical to EstimatedAmountEQ.
func EstimatedAmount(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedAmount, v))
}

// TenderDate applies equality check predicate on the "tender_date" field. It's identical to TenderDateEQ.
func TenderDate(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldTenderDate, v))
}

// FindDate applies equality check predicate on the "find_date" field. It's identical to FindDateEQ.
func FindDate(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldFindDate, v))
}

// SizeAndValueRating applies equality check predicate on the "size_and_value_rating" field. It's identical to SizeAndValueRatingEQ.
func SizeAndValueRating(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldSizeAndValueRating, v))
}

// CreditAndPaymentRating applies equality check predicate on the "credit_and_payment_rating" field. It's identical to CreditAndPaymentRatingEQ.
func CreditAndPaymentRating(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCreditAndPaymentRating, v))
}

// TimeLimitRating applies equality check predicate on the "time_limit_rating" field. It's identical to TimeLimitRatingEQ.
func TimeLimitRating(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldTimeLimitRating, v))
}

// CustomerRelationshipRating applies equality check predicate on the "customer_relationship_rating" field. It's identical to CustomerRelationshipRatingEQ.
func CustomerRelationshipRating(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCustomerRelationshipRating, v))
}

// CompetitivePartnershipRating applies equality check predicate on the "competitive_partnership_rating" field. It's identical to CompetitivePartnershipRatingEQ.
func CompetitivePartnershipRating(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCompetitivePartnershipRating, v))
}

// PrepareToBid applies equality check predicate on the "prepare_to_bid" field. It's identical to PrepareToBidEQ.
func PrepareToBid(v bool) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldPrepareToBid, v))
}

// ProjectCode applies equality check predicate on the "project_code" field. It's identical to ProjectCodeEQ.
func ProjectCode(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectCode, v))
}

// ProjectDefinition applies equality check predicate on the "project_definition" field. It's identical to ProjectDefinitionEQ.
func ProjectDefinition(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectDefinition, v))
}

// EstimatedProjectStartDate applies equality check predicate on the "estimated_project_start_date" field. It's identical to EstimatedProjectStartDateEQ.
func EstimatedProjectStartDate(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectEndDate applies equality check predicate on the "estimated_project_end_date" field. It's identical to EstimatedProjectEndDateEQ.
func EstimatedProjectEndDate(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedProjectEndDate, v))
}

// ProjectType applies equality check predicate on the "project_type" field. It's identical to ProjectTypeEQ.
func ProjectType(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectType, v))
}

// GeoLocation applies equality check predicate on the "geo_location" field. It's identical to GeoLocationEQ.
func GeoLocation(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldGeoLocation, v))
}

// GeoCoordinate applies equality check predicate on the "geo_coordinate" field. It's identical to GeoCoordinateEQ.
func GeoCoordinate(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldGeoCoordinate, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldRemark, v))
}

// AreaID applies equality check predicate on the "area_id" field. It's identical to AreaIDEQ.
func AreaID(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldAreaID, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCustomerID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldStatus, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldName, v))
}

// EstimatedAmountEQ applies the EQ predicate on the "estimated_amount" field.
func EstimatedAmountEQ(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedAmount, v))
}

// EstimatedAmountNEQ applies the NEQ predicate on the "estimated_amount" field.
func EstimatedAmountNEQ(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldEstimatedAmount, v))
}

// EstimatedAmountIn applies the In predicate on the "estimated_amount" field.
func EstimatedAmountIn(vs ...float64) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldEstimatedAmount, vs...))
}

// EstimatedAmountNotIn applies the NotIn predicate on the "estimated_amount" field.
func EstimatedAmountNotIn(vs ...float64) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldEstimatedAmount, vs...))
}

// EstimatedAmountGT applies the GT predicate on the "estimated_amount" field.
func EstimatedAmountGT(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldEstimatedAmount, v))
}

// EstimatedAmountGTE applies the GTE predicate on the "estimated_amount" field.
func EstimatedAmountGTE(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldEstimatedAmount, v))
}

// EstimatedAmountLT applies the LT predicate on the "estimated_amount" field.
func EstimatedAmountLT(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldEstimatedAmount, v))
}

// EstimatedAmountLTE applies the LTE predicate on the "estimated_amount" field.
func EstimatedAmountLTE(v float64) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldEstimatedAmount, v))
}

// EstimatedAmountIsNil applies the IsNil predicate on the "estimated_amount" field.
func EstimatedAmountIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldEstimatedAmount))
}

// EstimatedAmountNotNil applies the NotNil predicate on the "estimated_amount" field.
func EstimatedAmountNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldEstimatedAmount))
}

// TenderDateEQ applies the EQ predicate on the "tender_date" field.
func TenderDateEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldTenderDate, v))
}

// TenderDateNEQ applies the NEQ predicate on the "tender_date" field.
func TenderDateNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldTenderDate, v))
}

// TenderDateIn applies the In predicate on the "tender_date" field.
func TenderDateIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldTenderDate, vs...))
}

// TenderDateNotIn applies the NotIn predicate on the "tender_date" field.
func TenderDateNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldTenderDate, vs...))
}

// TenderDateGT applies the GT predicate on the "tender_date" field.
func TenderDateGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldTenderDate, v))
}

// TenderDateGTE applies the GTE predicate on the "tender_date" field.
func TenderDateGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldTenderDate, v))
}

// TenderDateLT applies the LT predicate on the "tender_date" field.
func TenderDateLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldTenderDate, v))
}

// TenderDateLTE applies the LTE predicate on the "tender_date" field.
func TenderDateLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldTenderDate, v))
}

// TenderDateIsNil applies the IsNil predicate on the "tender_date" field.
func TenderDateIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldTenderDate))
}

// TenderDateNotNil applies the NotNil predicate on the "tender_date" field.
func TenderDateNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldTenderDate))
}

// FindDateEQ applies the EQ predicate on the "find_date" field.
func FindDateEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldFindDate, v))
}

// FindDateNEQ applies the NEQ predicate on the "find_date" field.
func FindDateNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldFindDate, v))
}

// FindDateIn applies the In predicate on the "find_date" field.
func FindDateIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldFindDate, vs...))
}

// FindDateNotIn applies the NotIn predicate on the "find_date" field.
func FindDateNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldFindDate, vs...))
}

// FindDateGT applies the GT predicate on the "find_date" field.
func FindDateGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldFindDate, v))
}

// FindDateGTE applies the GTE predicate on the "find_date" field.
func FindDateGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldFindDate, v))
}

// FindDateLT applies the LT predicate on the "find_date" field.
func FindDateLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldFindDate, v))
}

// FindDateLTE applies the LTE predicate on the "find_date" field.
func FindDateLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldFindDate, v))
}

// FollowingPersonIsNil applies the IsNil predicate on the "following_person" field.
func FollowingPersonIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldFollowingPerson))
}

// FollowingPersonNotNil applies the NotNil predicate on the "following_person" field.
func FollowingPersonNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldFollowingPerson))
}

// SizeAndValueRatingEQ applies the EQ predicate on the "size_and_value_rating" field.
func SizeAndValueRatingEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingNEQ applies the NEQ predicate on the "size_and_value_rating" field.
func SizeAndValueRatingNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingIn applies the In predicate on the "size_and_value_rating" field.
func SizeAndValueRatingIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldSizeAndValueRating, vs...))
}

// SizeAndValueRatingNotIn applies the NotIn predicate on the "size_and_value_rating" field.
func SizeAndValueRatingNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldSizeAndValueRating, vs...))
}

// SizeAndValueRatingGT applies the GT predicate on the "size_and_value_rating" field.
func SizeAndValueRatingGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingGTE applies the GTE predicate on the "size_and_value_rating" field.
func SizeAndValueRatingGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingLT applies the LT predicate on the "size_and_value_rating" field.
func SizeAndValueRatingLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingLTE applies the LTE predicate on the "size_and_value_rating" field.
func SizeAndValueRatingLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldSizeAndValueRating, v))
}

// SizeAndValueRatingIsNil applies the IsNil predicate on the "size_and_value_rating" field.
func SizeAndValueRatingIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldSizeAndValueRating))
}

// SizeAndValueRatingNotNil applies the NotNil predicate on the "size_and_value_rating" field.
func SizeAndValueRatingNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldSizeAndValueRating))
}

// CreditAndPaymentRatingEQ applies the EQ predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingNEQ applies the NEQ predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingIn applies the In predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCreditAndPaymentRating, vs...))
}

// CreditAndPaymentRatingNotIn applies the NotIn predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCreditAndPaymentRating, vs...))
}

// CreditAndPaymentRatingGT applies the GT predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingGTE applies the GTE predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingLT applies the LT predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingLTE applies the LTE predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCreditAndPaymentRating, v))
}

// CreditAndPaymentRatingIsNil applies the IsNil predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldCreditAndPaymentRating))
}

// CreditAndPaymentRatingNotNil applies the NotNil predicate on the "credit_and_payment_rating" field.
func CreditAndPaymentRatingNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldCreditAndPaymentRating))
}

// TimeLimitRatingEQ applies the EQ predicate on the "time_limit_rating" field.
func TimeLimitRatingEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldTimeLimitRating, v))
}

// TimeLimitRatingNEQ applies the NEQ predicate on the "time_limit_rating" field.
func TimeLimitRatingNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldTimeLimitRating, v))
}

// TimeLimitRatingIn applies the In predicate on the "time_limit_rating" field.
func TimeLimitRatingIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldTimeLimitRating, vs...))
}

// TimeLimitRatingNotIn applies the NotIn predicate on the "time_limit_rating" field.
func TimeLimitRatingNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldTimeLimitRating, vs...))
}

// TimeLimitRatingGT applies the GT predicate on the "time_limit_rating" field.
func TimeLimitRatingGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldTimeLimitRating, v))
}

// TimeLimitRatingGTE applies the GTE predicate on the "time_limit_rating" field.
func TimeLimitRatingGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldTimeLimitRating, v))
}

// TimeLimitRatingLT applies the LT predicate on the "time_limit_rating" field.
func TimeLimitRatingLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldTimeLimitRating, v))
}

// TimeLimitRatingLTE applies the LTE predicate on the "time_limit_rating" field.
func TimeLimitRatingLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldTimeLimitRating, v))
}

// TimeLimitRatingIsNil applies the IsNil predicate on the "time_limit_rating" field.
func TimeLimitRatingIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldTimeLimitRating))
}

// TimeLimitRatingNotNil applies the NotNil predicate on the "time_limit_rating" field.
func TimeLimitRatingNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldTimeLimitRating))
}

// CustomerRelationshipRatingEQ applies the EQ predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingNEQ applies the NEQ predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingIn applies the In predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCustomerRelationshipRating, vs...))
}

// CustomerRelationshipRatingNotIn applies the NotIn predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCustomerRelationshipRating, vs...))
}

// CustomerRelationshipRatingGT applies the GT predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingGTE applies the GTE predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingLT applies the LT predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingLTE applies the LTE predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCustomerRelationshipRating, v))
}

// CustomerRelationshipRatingIsNil applies the IsNil predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldCustomerRelationshipRating))
}

// CustomerRelationshipRatingNotNil applies the NotNil predicate on the "customer_relationship_rating" field.
func CustomerRelationshipRatingNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldCustomerRelationshipRating))
}

// CompetitivePartnershipRatingEQ applies the EQ predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingNEQ applies the NEQ predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingNEQ(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingIn applies the In predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCompetitivePartnershipRating, vs...))
}

// CompetitivePartnershipRatingNotIn applies the NotIn predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingNotIn(vs ...int8) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCompetitivePartnershipRating, vs...))
}

// CompetitivePartnershipRatingGT applies the GT predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingGT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingGTE applies the GTE predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingGTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingLT applies the LT predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingLT(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingLTE applies the LTE predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingLTE(v int8) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCompetitivePartnershipRating, v))
}

// CompetitivePartnershipRatingIsNil applies the IsNil predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldCompetitivePartnershipRating))
}

// CompetitivePartnershipRatingNotNil applies the NotNil predicate on the "competitive_partnership_rating" field.
func CompetitivePartnershipRatingNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldCompetitivePartnershipRating))
}

// PrepareToBidEQ applies the EQ predicate on the "prepare_to_bid" field.
func PrepareToBidEQ(v bool) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldPrepareToBid, v))
}

// PrepareToBidNEQ applies the NEQ predicate on the "prepare_to_bid" field.
func PrepareToBidNEQ(v bool) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldPrepareToBid, v))
}

// ProjectCodeEQ applies the EQ predicate on the "project_code" field.
func ProjectCodeEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectCode, v))
}

// ProjectCodeNEQ applies the NEQ predicate on the "project_code" field.
func ProjectCodeNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldProjectCode, v))
}

// ProjectCodeIn applies the In predicate on the "project_code" field.
func ProjectCodeIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldProjectCode, vs...))
}

// ProjectCodeNotIn applies the NotIn predicate on the "project_code" field.
func ProjectCodeNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldProjectCode, vs...))
}

// ProjectCodeGT applies the GT predicate on the "project_code" field.
func ProjectCodeGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldProjectCode, v))
}

// ProjectCodeGTE applies the GTE predicate on the "project_code" field.
func ProjectCodeGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldProjectCode, v))
}

// ProjectCodeLT applies the LT predicate on the "project_code" field.
func ProjectCodeLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldProjectCode, v))
}

// ProjectCodeLTE applies the LTE predicate on the "project_code" field.
func ProjectCodeLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldProjectCode, v))
}

// ProjectCodeContains applies the Contains predicate on the "project_code" field.
func ProjectCodeContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldProjectCode, v))
}

// ProjectCodeHasPrefix applies the HasPrefix predicate on the "project_code" field.
func ProjectCodeHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldProjectCode, v))
}

// ProjectCodeHasSuffix applies the HasSuffix predicate on the "project_code" field.
func ProjectCodeHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldProjectCode, v))
}

// ProjectCodeIsNil applies the IsNil predicate on the "project_code" field.
func ProjectCodeIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldProjectCode))
}

// ProjectCodeNotNil applies the NotNil predicate on the "project_code" field.
func ProjectCodeNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldProjectCode))
}

// ProjectCodeEqualFold applies the EqualFold predicate on the "project_code" field.
func ProjectCodeEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldProjectCode, v))
}

// ProjectCodeContainsFold applies the ContainsFold predicate on the "project_code" field.
func ProjectCodeContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldProjectCode, v))
}

// ProjectDefinitionEQ applies the EQ predicate on the "project_definition" field.
func ProjectDefinitionEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectDefinition, v))
}

// ProjectDefinitionNEQ applies the NEQ predicate on the "project_definition" field.
func ProjectDefinitionNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldProjectDefinition, v))
}

// ProjectDefinitionIn applies the In predicate on the "project_definition" field.
func ProjectDefinitionIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldProjectDefinition, vs...))
}

// ProjectDefinitionNotIn applies the NotIn predicate on the "project_definition" field.
func ProjectDefinitionNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldProjectDefinition, vs...))
}

// ProjectDefinitionGT applies the GT predicate on the "project_definition" field.
func ProjectDefinitionGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldProjectDefinition, v))
}

// ProjectDefinitionGTE applies the GTE predicate on the "project_definition" field.
func ProjectDefinitionGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldProjectDefinition, v))
}

// ProjectDefinitionLT applies the LT predicate on the "project_definition" field.
func ProjectDefinitionLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldProjectDefinition, v))
}

// ProjectDefinitionLTE applies the LTE predicate on the "project_definition" field.
func ProjectDefinitionLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldProjectDefinition, v))
}

// ProjectDefinitionContains applies the Contains predicate on the "project_definition" field.
func ProjectDefinitionContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldProjectDefinition, v))
}

// ProjectDefinitionHasPrefix applies the HasPrefix predicate on the "project_definition" field.
func ProjectDefinitionHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldProjectDefinition, v))
}

// ProjectDefinitionHasSuffix applies the HasSuffix predicate on the "project_definition" field.
func ProjectDefinitionHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldProjectDefinition, v))
}

// ProjectDefinitionIsNil applies the IsNil predicate on the "project_definition" field.
func ProjectDefinitionIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldProjectDefinition))
}

// ProjectDefinitionNotNil applies the NotNil predicate on the "project_definition" field.
func ProjectDefinitionNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldProjectDefinition))
}

// ProjectDefinitionEqualFold applies the EqualFold predicate on the "project_definition" field.
func ProjectDefinitionEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldProjectDefinition, v))
}

// ProjectDefinitionContainsFold applies the ContainsFold predicate on the "project_definition" field.
func ProjectDefinitionContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldProjectDefinition, v))
}

// EstimatedProjectStartDateEQ applies the EQ predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateNEQ applies the NEQ predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateIn applies the In predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldEstimatedProjectStartDate, vs...))
}

// EstimatedProjectStartDateNotIn applies the NotIn predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldEstimatedProjectStartDate, vs...))
}

// EstimatedProjectStartDateGT applies the GT predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateGTE applies the GTE predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateLT applies the LT predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateLTE applies the LTE predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldEstimatedProjectStartDate, v))
}

// EstimatedProjectStartDateIsNil applies the IsNil predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldEstimatedProjectStartDate))
}

// EstimatedProjectStartDateNotNil applies the NotNil predicate on the "estimated_project_start_date" field.
func EstimatedProjectStartDateNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldEstimatedProjectStartDate))
}

// EstimatedProjectEndDateEQ applies the EQ predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateNEQ applies the NEQ predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateNEQ(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateIn applies the In predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldEstimatedProjectEndDate, vs...))
}

// EstimatedProjectEndDateNotIn applies the NotIn predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateNotIn(vs ...time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldEstimatedProjectEndDate, vs...))
}

// EstimatedProjectEndDateGT applies the GT predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateGT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateGTE applies the GTE predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateGTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateLT applies the LT predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateLT(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateLTE applies the LTE predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateLTE(v time.Time) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldEstimatedProjectEndDate, v))
}

// EstimatedProjectEndDateIsNil applies the IsNil predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldEstimatedProjectEndDate))
}

// EstimatedProjectEndDateNotNil applies the NotNil predicate on the "estimated_project_end_date" field.
func EstimatedProjectEndDateNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldEstimatedProjectEndDate))
}

// ProjectTypeEQ applies the EQ predicate on the "project_type" field.
func ProjectTypeEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldProjectType, v))
}

// ProjectTypeNEQ applies the NEQ predicate on the "project_type" field.
func ProjectTypeNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldProjectType, v))
}

// ProjectTypeIn applies the In predicate on the "project_type" field.
func ProjectTypeIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldProjectType, vs...))
}

// ProjectTypeNotIn applies the NotIn predicate on the "project_type" field.
func ProjectTypeNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldProjectType, vs...))
}

// ProjectTypeGT applies the GT predicate on the "project_type" field.
func ProjectTypeGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldProjectType, v))
}

// ProjectTypeGTE applies the GTE predicate on the "project_type" field.
func ProjectTypeGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldProjectType, v))
}

// ProjectTypeLT applies the LT predicate on the "project_type" field.
func ProjectTypeLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldProjectType, v))
}

// ProjectTypeLTE applies the LTE predicate on the "project_type" field.
func ProjectTypeLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldProjectType, v))
}

// ProjectTypeContains applies the Contains predicate on the "project_type" field.
func ProjectTypeContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldProjectType, v))
}

// ProjectTypeHasPrefix applies the HasPrefix predicate on the "project_type" field.
func ProjectTypeHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldProjectType, v))
}

// ProjectTypeHasSuffix applies the HasSuffix predicate on the "project_type" field.
func ProjectTypeHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldProjectType, v))
}

// ProjectTypeIsNil applies the IsNil predicate on the "project_type" field.
func ProjectTypeIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldProjectType))
}

// ProjectTypeNotNil applies the NotNil predicate on the "project_type" field.
func ProjectTypeNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldProjectType))
}

// ProjectTypeEqualFold applies the EqualFold predicate on the "project_type" field.
func ProjectTypeEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldProjectType, v))
}

// ProjectTypeContainsFold applies the ContainsFold predicate on the "project_type" field.
func ProjectTypeContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldProjectType, v))
}

// AttachementsIsNil applies the IsNil predicate on the "attachements" field.
func AttachementsIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldAttachements))
}

// AttachementsNotNil applies the NotNil predicate on the "attachements" field.
func AttachementsNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldAttachements))
}

// GeoLocationEQ applies the EQ predicate on the "geo_location" field.
func GeoLocationEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldGeoLocation, v))
}

// GeoLocationNEQ applies the NEQ predicate on the "geo_location" field.
func GeoLocationNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldGeoLocation, v))
}

// GeoLocationIn applies the In predicate on the "geo_location" field.
func GeoLocationIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldGeoLocation, vs...))
}

// GeoLocationNotIn applies the NotIn predicate on the "geo_location" field.
func GeoLocationNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldGeoLocation, vs...))
}

// GeoLocationGT applies the GT predicate on the "geo_location" field.
func GeoLocationGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldGeoLocation, v))
}

// GeoLocationGTE applies the GTE predicate on the "geo_location" field.
func GeoLocationGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldGeoLocation, v))
}

// GeoLocationLT applies the LT predicate on the "geo_location" field.
func GeoLocationLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldGeoLocation, v))
}

// GeoLocationLTE applies the LTE predicate on the "geo_location" field.
func GeoLocationLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldGeoLocation, v))
}

// GeoLocationContains applies the Contains predicate on the "geo_location" field.
func GeoLocationContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldGeoLocation, v))
}

// GeoLocationHasPrefix applies the HasPrefix predicate on the "geo_location" field.
func GeoLocationHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldGeoLocation, v))
}

// GeoLocationHasSuffix applies the HasSuffix predicate on the "geo_location" field.
func GeoLocationHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldGeoLocation, v))
}

// GeoLocationIsNil applies the IsNil predicate on the "geo_location" field.
func GeoLocationIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldGeoLocation))
}

// GeoLocationNotNil applies the NotNil predicate on the "geo_location" field.
func GeoLocationNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldGeoLocation))
}

// GeoLocationEqualFold applies the EqualFold predicate on the "geo_location" field.
func GeoLocationEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldGeoLocation, v))
}

// GeoLocationContainsFold applies the ContainsFold predicate on the "geo_location" field.
func GeoLocationContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldGeoLocation, v))
}

// GeoCoordinateEQ applies the EQ predicate on the "geo_coordinate" field.
func GeoCoordinateEQ(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldGeoCoordinate, v))
}

// GeoCoordinateNEQ applies the NEQ predicate on the "geo_coordinate" field.
func GeoCoordinateNEQ(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldGeoCoordinate, v))
}

// GeoCoordinateIn applies the In predicate on the "geo_coordinate" field.
func GeoCoordinateIn(vs ...*geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldGeoCoordinate, vs...))
}

// GeoCoordinateNotIn applies the NotIn predicate on the "geo_coordinate" field.
func GeoCoordinateNotIn(vs ...*geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldGeoCoordinate, vs...))
}

// GeoCoordinateGT applies the GT predicate on the "geo_coordinate" field.
func GeoCoordinateGT(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldGeoCoordinate, v))
}

// GeoCoordinateGTE applies the GTE predicate on the "geo_coordinate" field.
func GeoCoordinateGTE(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldGeoCoordinate, v))
}

// GeoCoordinateLT applies the LT predicate on the "geo_coordinate" field.
func GeoCoordinateLT(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldGeoCoordinate, v))
}

// GeoCoordinateLTE applies the LTE predicate on the "geo_coordinate" field.
func GeoCoordinateLTE(v *geo.GeoJson) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldGeoCoordinate, v))
}

// GeoCoordinateIsNil applies the IsNil predicate on the "geo_coordinate" field.
func GeoCoordinateIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldGeoCoordinate))
}

// GeoCoordinateNotNil applies the NotNil predicate on the "geo_coordinate" field.
func GeoCoordinateNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldGeoCoordinate))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Tender {
	return predicate.Tender(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Tender {
	return predicate.Tender(sql.FieldContainsFold(FieldRemark, v))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.Tender {
	return predicate.Tender(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.Tender {
	return predicate.Tender(sql.FieldNotNull(FieldImages))
}

// AreaIDEQ applies the EQ predicate on the "area_id" field.
func AreaIDEQ(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldAreaID, v))
}

// AreaIDNEQ applies the NEQ predicate on the "area_id" field.
func AreaIDNEQ(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldAreaID, v))
}

// AreaIDIn applies the In predicate on the "area_id" field.
func AreaIDIn(vs ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldAreaID, vs...))
}

// AreaIDNotIn applies the NotIn predicate on the "area_id" field.
func AreaIDNotIn(vs ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldAreaID, vs...))
}

// AreaIDGT applies the GT predicate on the "area_id" field.
func AreaIDGT(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldAreaID, v))
}

// AreaIDGTE applies the GTE predicate on the "area_id" field.
func AreaIDGTE(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldAreaID, v))
}

// AreaIDLT applies the LT predicate on the "area_id" field.
func AreaIDLT(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldAreaID, v))
}

// AreaIDLTE applies the LTE predicate on the "area_id" field.
func AreaIDLTE(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldAreaID, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v xid.ID) predicate.Tender {
	return predicate.Tender(sql.FieldLTE(FieldCustomerID, v))
}

// HasArea applies the HasEdge predicate on the "area" edge.
func HasArea() predicate.Tender {
	return predicate.Tender(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaWith applies the HasEdge predicate on the "area" edge with a given conditions (other predicates).
func HasAreaWith(preds ...predicate.Area) predicate.Tender {
	return predicate.Tender(func(s *sql.Selector) {
		step := newAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Tender {
	return predicate.Tender(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Tender {
	return predicate.Tender(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tender) predicate.Tender {
	return predicate.Tender(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tender) predicate.Tender {
	return predicate.Tender(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tender) predicate.Tender {
	return predicate.Tender(sql.NotPredicates(p))
}
