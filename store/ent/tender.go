// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/schema/zht"
	"cscd-bds/store/ent/tender"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tender is the model entity for the Tender schema.
type Tender struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EstimatedAmount holds the value of the "estimated_amount" field.
	EstimatedAmount float64 `json:"estimated_amount,omitempty"`
	// TenderDate holds the value of the "tender_date" field.
	TenderDate time.Time `json:"tender_date,omitempty"`
	// FindDate holds the value of the "find_date" field.
	FindDate time.Time `json:"find_date,omitempty"`
	// Finder holds the value of the "finder" field.
	Finder *zht.User `json:"finder,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy *zht.User `json:"created_by,omitempty"`
	// FollowingPerson holds the value of the "following_person" field.
	FollowingPerson []zht.User `json:"following_person,omitempty"`
	// SizeAndValueRating holds the value of the "size_and_value_rating" field.
	SizeAndValueRating int8 `json:"size_and_value_rating,omitempty"`
	// CreditAndPaymentRating holds the value of the "credit_and_payment_rating" field.
	CreditAndPaymentRating int8 `json:"credit_and_payment_rating,omitempty"`
	// TimeLimitRating holds the value of the "time_limit_rating" field.
	TimeLimitRating int8 `json:"time_limit_rating,omitempty"`
	// CustomerRelationshipRating holds the value of the "customer_relationship_rating" field.
	CustomerRelationshipRating int8 `json:"customer_relationship_rating,omitempty"`
	// CompetitivePartnershipRating holds the value of the "competitive_partnership_rating" field.
	CompetitivePartnershipRating int8 `json:"competitive_partnership_rating,omitempty"`
	// PrepareToBid holds the value of the "prepare_to_bid" field.
	PrepareToBid bool `json:"prepare_to_bid,omitempty"`
	// ProjectCode holds the value of the "project_code" field.
	ProjectCode *string `json:"project_code,omitempty"`
	// ProjectDefinition holds the value of the "project_definition" field.
	ProjectDefinition *string `json:"project_definition,omitempty"`
	// EstimatedProjectStartDate holds the value of the "estimated_project_start_date" field.
	EstimatedProjectStartDate *time.Time `json:"estimated_project_start_date,omitempty"`
	// EstimatedProjectEndDate holds the value of the "estimated_project_end_date" field.
	EstimatedProjectEndDate *time.Time `json:"estimated_project_end_date,omitempty"`
	// ProjectType holds the value of the "project_type" field.
	ProjectType *string `json:"project_type,omitempty"`
	// Attachements holds the value of the "attachements" field.
	Attachements []string `json:"attachements,omitempty"`
	// GeoLocation holds the value of the "geo_location" field.
	GeoLocation *string `json:"geo_location,omitempty"`
	// GeoCoordinate holds the value of the "geo_coordinate" field.
	GeoCoordinate *geo.GeoJson `json:"geo_coordinate,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark *string `json:"remark,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// AreaID holds the value of the "area_id" field.
	AreaID xid.ID `json:"area_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID xid.ID `json:"customer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenderQuery when eager-loading is set.
	Edges        TenderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenderEdges holds the relations/edges for other nodes in the graph.
type TenderEdges struct {
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) AreaOrErr() (*Area, error) {
	if e.Area != nil {
		return e.Area, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: area.Label}
	}
	return nil, &NotLoadedError{edge: "area"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tender) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tender.FieldGeoCoordinate:
			values[i] = &sql.NullScanner{S: new(geo.GeoJson)}
		case tender.FieldFinder, tender.FieldCreatedBy, tender.FieldFollowingPerson, tender.FieldAttachements, tender.FieldImages:
			values[i] = new([]byte)
		case tender.FieldPrepareToBid:
			values[i] = new(sql.NullBool)
		case tender.FieldEstimatedAmount:
			values[i] = new(sql.NullFloat64)
		case tender.FieldStatus, tender.FieldSizeAndValueRating, tender.FieldCreditAndPaymentRating, tender.FieldTimeLimitRating, tender.FieldCustomerRelationshipRating, tender.FieldCompetitivePartnershipRating:
			values[i] = new(sql.NullInt64)
		case tender.FieldCode, tender.FieldName, tender.FieldProjectCode, tender.FieldProjectDefinition, tender.FieldProjectType, tender.FieldGeoLocation, tender.FieldRemark:
			values[i] = new(sql.NullString)
		case tender.FieldCreatedAt, tender.FieldUpdatedAt, tender.FieldTenderDate, tender.FieldFindDate, tender.FieldEstimatedProjectStartDate, tender.FieldEstimatedProjectEndDate:
			values[i] = new(sql.NullTime)
		case tender.FieldID, tender.FieldAreaID, tender.FieldCustomerID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tender fields.
func (t *Tender) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tender.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tender.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tender.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tender.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case tender.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int8(value.Int64)
			}
		case tender.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tender.FieldEstimatedAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_amount", values[i])
			} else if value.Valid {
				t.EstimatedAmount = value.Float64
			}
		case tender.FieldTenderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_date", values[i])
			} else if value.Valid {
				t.TenderDate = value.Time
			}
		case tender.FieldFindDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field find_date", values[i])
			} else if value.Valid {
				t.FindDate = value.Time
			}
		case tender.FieldFinder:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field finder", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Finder); err != nil {
					return fmt.Errorf("unmarshal field finder: %w", err)
				}
			}
		case tender.FieldCreatedBy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.CreatedBy); err != nil {
					return fmt.Errorf("unmarshal field created_by: %w", err)
				}
			}
		case tender.FieldFollowingPerson:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field following_person", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FollowingPerson); err != nil {
					return fmt.Errorf("unmarshal field following_person: %w", err)
				}
			}
		case tender.FieldSizeAndValueRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_and_value_rating", values[i])
			} else if value.Valid {
				t.SizeAndValueRating = int8(value.Int64)
			}
		case tender.FieldCreditAndPaymentRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit_and_payment_rating", values[i])
			} else if value.Valid {
				t.CreditAndPaymentRating = int8(value.Int64)
			}
		case tender.FieldTimeLimitRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_limit_rating", values[i])
			} else if value.Valid {
				t.TimeLimitRating = int8(value.Int64)
			}
		case tender.FieldCustomerRelationshipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_relationship_rating", values[i])
			} else if value.Valid {
				t.CustomerRelationshipRating = int8(value.Int64)
			}
		case tender.FieldCompetitivePartnershipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field competitive_partnership_rating", values[i])
			} else if value.Valid {
				t.CompetitivePartnershipRating = int8(value.Int64)
			}
		case tender.FieldPrepareToBid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prepare_to_bid", values[i])
			} else if value.Valid {
				t.PrepareToBid = value.Bool
			}
		case tender.FieldProjectCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_code", values[i])
			} else if value.Valid {
				t.ProjectCode = new(string)
				*t.ProjectCode = value.String
			}
		case tender.FieldProjectDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_definition", values[i])
			} else if value.Valid {
				t.ProjectDefinition = new(string)
				*t.ProjectDefinition = value.String
			}
		case tender.FieldEstimatedProjectStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_start_date", values[i])
			} else if value.Valid {
				t.EstimatedProjectStartDate = new(time.Time)
				*t.EstimatedProjectStartDate = value.Time
			}
		case tender.FieldEstimatedProjectEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_end_date", values[i])
			} else if value.Valid {
				t.EstimatedProjectEndDate = new(time.Time)
				*t.EstimatedProjectEndDate = value.Time
			}
		case tender.FieldProjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_type", values[i])
			} else if value.Valid {
				t.ProjectType = new(string)
				*t.ProjectType = value.String
			}
		case tender.FieldAttachements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Attachements); err != nil {
					return fmt.Errorf("unmarshal field attachements: %w", err)
				}
			}
		case tender.FieldGeoLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field geo_location", values[i])
			} else if value.Valid {
				t.GeoLocation = new(string)
				*t.GeoLocation = value.String
			}
		case tender.FieldGeoCoordinate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field geo_coordinate", values[i])
			} else if value.Valid {
				t.GeoCoordinate = value.S.(*geo.GeoJson)
			}
		case tender.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				t.Remark = new(string)
				*t.Remark = value.String
			}
		case tender.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case tender.FieldAreaID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value != nil {
				t.AreaID = *value
			}
		case tender.FieldCustomerID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				t.CustomerID = *value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tender.
// This includes values selected through modifiers, order, etc.
func (t *Tender) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryArea queries the "area" edge of the Tender entity.
func (t *Tender) QueryArea() *AreaQuery {
	return NewTenderClient(t.config).QueryArea(t)
}

// QueryCustomer queries the "customer" edge of the Tender entity.
func (t *Tender) QueryCustomer() *CustomerQuery {
	return NewTenderClient(t.config).QueryCustomer(t)
}

// Update returns a builder for updating this Tender.
// Note that you need to call Tender.Unwrap() before calling this method if this Tender
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tender) Update() *TenderUpdateOne {
	return NewTenderClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tender entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tender) Unwrap() *Tender {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tender is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tender) String() string {
	var builder strings.Builder
	builder.WriteString("Tender(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("estimated_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.EstimatedAmount))
	builder.WriteString(", ")
	builder.WriteString("tender_date=")
	builder.WriteString(t.TenderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("find_date=")
	builder.WriteString(t.FindDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finder=")
	builder.WriteString(fmt.Sprintf("%v", t.Finder))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("following_person=")
	builder.WriteString(fmt.Sprintf("%v", t.FollowingPerson))
	builder.WriteString(", ")
	builder.WriteString("size_and_value_rating=")
	builder.WriteString(fmt.Sprintf("%v", t.SizeAndValueRating))
	builder.WriteString(", ")
	builder.WriteString("credit_and_payment_rating=")
	builder.WriteString(fmt.Sprintf("%v", t.CreditAndPaymentRating))
	builder.WriteString(", ")
	builder.WriteString("time_limit_rating=")
	builder.WriteString(fmt.Sprintf("%v", t.TimeLimitRating))
	builder.WriteString(", ")
	builder.WriteString("customer_relationship_rating=")
	builder.WriteString(fmt.Sprintf("%v", t.CustomerRelationshipRating))
	builder.WriteString(", ")
	builder.WriteString("competitive_partnership_rating=")
	builder.WriteString(fmt.Sprintf("%v", t.CompetitivePartnershipRating))
	builder.WriteString(", ")
	builder.WriteString("prepare_to_bid=")
	builder.WriteString(fmt.Sprintf("%v", t.PrepareToBid))
	builder.WriteString(", ")
	if v := t.ProjectCode; v != nil {
		builder.WriteString("project_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ProjectDefinition; v != nil {
		builder.WriteString("project_definition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.EstimatedProjectStartDate; v != nil {
		builder.WriteString("estimated_project_start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.EstimatedProjectEndDate; v != nil {
		builder.WriteString("estimated_project_end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.ProjectType; v != nil {
		builder.WriteString("project_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("attachements=")
	builder.WriteString(fmt.Sprintf("%v", t.Attachements))
	builder.WriteString(", ")
	if v := t.GeoLocation; v != nil {
		builder.WriteString("geo_location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.GeoCoordinate; v != nil {
		builder.WriteString("geo_coordinate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", t.Images))
	builder.WriteString(", ")
	builder.WriteString("area_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AreaID))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CustomerID))
	builder.WriteByte(')')
	return builder.String()
}

// Tenders is a parsable slice of Tender.
type Tenders []*Tender
