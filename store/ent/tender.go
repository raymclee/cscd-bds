// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tender is the model entity for the Tender schema.
type Tender struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EstimatedAmount holds the value of the "estimated_amount" field.
	EstimatedAmount float64 `json:"estimated_amount,omitempty"`
	// TenderDate holds the value of the "tender_date" field.
	TenderDate time.Time `json:"tender_date,omitempty"`
	// Classify holds the value of the "classify" field.
	Classify *int `json:"classify,omitempty"`
	// DiscoveryDate holds the value of the "discovery_date" field.
	DiscoveryDate time.Time `json:"discovery_date,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// FullAddress holds the value of the "full_address" field.
	FullAddress *string `json:"full_address,omitempty"`
	// Contractor holds the value of the "contractor" field.
	Contractor *string `json:"contractor,omitempty"`
	// LevelInvolved holds the value of the "level_involved" field.
	LevelInvolved *int `json:"level_involved,omitempty"`
	// SizeAndValueRating holds the value of the "size_and_value_rating" field.
	SizeAndValueRating *int `json:"size_and_value_rating,omitempty"`
	// SizeAndValueRatingOverview holds the value of the "size_and_value_rating_overview" field.
	SizeAndValueRatingOverview *string `json:"size_and_value_rating_overview,omitempty"`
	// CreditAndPaymentRating holds the value of the "credit_and_payment_rating" field.
	CreditAndPaymentRating *int `json:"credit_and_payment_rating,omitempty"`
	// CreditAndPaymentRatingOverview holds the value of the "credit_and_payment_rating_overview" field.
	CreditAndPaymentRatingOverview *string `json:"credit_and_payment_rating_overview,omitempty"`
	// TimeLimitRating holds the value of the "time_limit_rating" field.
	TimeLimitRating *int `json:"time_limit_rating,omitempty"`
	// TimeLimitRatingOverview holds the value of the "time_limit_rating_overview" field.
	TimeLimitRatingOverview *string `json:"time_limit_rating_overview,omitempty"`
	// CustomerRelationshipRating holds the value of the "customer_relationship_rating" field.
	CustomerRelationshipRating *int `json:"customer_relationship_rating,omitempty"`
	// CustomerRelationshipRatingOverview holds the value of the "customer_relationship_rating_overview" field.
	CustomerRelationshipRatingOverview *string `json:"customer_relationship_rating_overview,omitempty"`
	// CompetitivePartnershipRating holds the value of the "competitive_partnership_rating" field.
	CompetitivePartnershipRating *int `json:"competitive_partnership_rating,omitempty"`
	// CompetitivePartnershipRatingOverview holds the value of the "competitive_partnership_rating_overview" field.
	CompetitivePartnershipRatingOverview *string `json:"competitive_partnership_rating_overview,omitempty"`
	// PrepareToBid holds the value of the "prepare_to_bid" field.
	PrepareToBid bool `json:"prepare_to_bid,omitempty"`
	// ProjectCode holds the value of the "project_code" field.
	ProjectCode *string `json:"project_code,omitempty"`
	// ProjectType holds the value of the "project_type" field.
	ProjectType *string `json:"project_type,omitempty"`
	// ProjectDefinition holds the value of the "project_definition" field.
	ProjectDefinition *string `json:"project_definition,omitempty"`
	// EstimatedProjectStartDate holds the value of the "estimated_project_start_date" field.
	EstimatedProjectStartDate *time.Time `json:"estimated_project_start_date,omitempty"`
	// EstimatedProjectEndDate holds the value of the "estimated_project_end_date" field.
	EstimatedProjectEndDate *time.Time `json:"estimated_project_end_date,omitempty"`
	// Attachements holds the value of the "attachements" field.
	Attachements []string `json:"attachements,omitempty"`
	// GeoCoordinate holds the value of the "geo_coordinate" field.
	GeoCoordinate *geo.GeoJson `json:"geo_coordinate,omitempty"`
	// GeoBounds holds the value of the "geo_bounds" field.
	GeoBounds [][]float64 `json:"geo_bounds,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// TenderSituations holds the value of the "tender_situations" field.
	TenderSituations *string `json:"tender_situations,omitempty"`
	// OwnerSituations holds the value of the "owner_situations" field.
	OwnerSituations *string `json:"owner_situations,omitempty"`
	// BiddingInstructions holds the value of the "bidding_instructions" field.
	BiddingInstructions *string `json:"bidding_instructions,omitempty"`
	// CompetitorSituations holds the value of the "competitor_situations" field.
	CompetitorSituations *string `json:"competitor_situations,omitempty"`
	// CostEngineer holds the value of the "cost_engineer" field.
	CostEngineer *string `json:"cost_engineer,omitempty"`
	// TenderForm holds the value of the "tender_form" field.
	TenderForm *string `json:"tender_form,omitempty"`
	// ContractForm holds the value of the "contract_form" field.
	ContractForm *string `json:"contract_form,omitempty"`
	// ManagementCompany holds the value of the "management_company" field.
	ManagementCompany *string `json:"management_company,omitempty"`
	// TenderingAgency holds the value of the "tendering_agency" field.
	TenderingAgency *string `json:"tendering_agency,omitempty"`
	// BiddingDate holds the value of the "bidding_date" field.
	BiddingDate *time.Time `json:"bidding_date,omitempty"`
	// FacadeConsultant holds the value of the "facade_consultant" field.
	FacadeConsultant *string `json:"facade_consultant,omitempty"`
	// DesignUnit holds the value of the "design_unit" field.
	DesignUnit *string `json:"design_unit,omitempty"`
	// ConsultingFirm holds the value of the "consulting_firm" field.
	ConsultingFirm *string `json:"consulting_firm,omitempty"`
	// KeyProject holds the value of the "key_project" field.
	KeyProject bool `json:"key_project,omitempty"`
	// CurrentProgress holds the value of the "current_progress" field.
	CurrentProgress *string `json:"current_progress,omitempty"`
	// TenderWinCompany holds the value of the "tender_win_company" field.
	TenderWinCompany *string `json:"tender_win_company,omitempty"`
	// 投標編號，只限港澳
	TenderCode string `json:"tender_code,omitempty"`
	// 則師，只限港澳
	Architect string `json:"architect,omitempty"`
	// 業主，只限港澳
	Developer string `json:"developer,omitempty"`
	// 交標日期，只限港澳
	TenderClosingDate time.Time `json:"tender_closing_date,omitempty"`
	// 施工面積，只限港澳
	ConstructionArea string `json:"construction_area,omitempty"`
	// 得標日期，只限港澳
	TenderWinDate time.Time `json:"tender_win_date,omitempty"`
	// 得標金額
	TenderWinAmount float64 `json:"tender_win_amount,omitempty"`
	// 最後一次投標金額，只限港澳
	LastTenderAmount float64 `json:"last_tender_amount,omitempty"`
	// AreaID holds the value of the "area_id" field.
	AreaID xid.ID `json:"area_id,omitempty"`
	// ProvinceID holds the value of the "province_id" field.
	ProvinceID *xid.ID `json:"province_id,omitempty"`
	// CityID holds the value of the "city_id" field.
	CityID *xid.ID `json:"city_id,omitempty"`
	// DistrictID holds the value of the "district_id" field.
	DistrictID *xid.ID `json:"district_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID *xid.ID `json:"customer_id,omitempty"`
	// FinderID holds the value of the "finder_id" field.
	FinderID *xid.ID `json:"finder_id,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID *xid.ID `json:"created_by_id,omitempty"`
	// CompetitorID holds the value of the "competitor_id" field.
	CompetitorID *xid.ID `json:"competitor_id,omitempty"`
	// ApproverID holds the value of the "approver_id" field.
	ApproverID *xid.ID `json:"approver_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenderQuery when eager-loading is set.
	Edges        TenderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenderEdges holds the relations/edges for other nodes in the graph.
type TenderEdges struct {
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Finder holds the value of the finder edge.
	Finder *User `json:"finder,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// FollowingSales holds the value of the following_sales edge.
	FollowingSales []*User `json:"following_sales,omitempty"`
	// Province holds the value of the province edge.
	Province *Province `json:"province,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// VisitRecords holds the value of the visit_records edge.
	VisitRecords []*VisitRecord `json:"visit_records,omitempty"`
	// Competitor holds the value of the competitor edge.
	Competitor *Competitor `json:"competitor,omitempty"`
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
	// totalCount holds the count of the edges above.
	totalCount [11]map[string]int

	namedFollowingSales map[string][]*User
	namedVisitRecords   map[string][]*VisitRecord
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) AreaOrErr() (*Area, error) {
	if e.Area != nil {
		return e.Area, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: area.Label}
	}
	return nil, &NotLoadedError{edge: "area"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// FinderOrErr returns the Finder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) FinderOrErr() (*User, error) {
	if e.Finder != nil {
		return e.Finder, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "finder"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// FollowingSalesOrErr returns the FollowingSales value or an error if the edge
// was not loaded in eager-loading.
func (e TenderEdges) FollowingSalesOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.FollowingSales, nil
	}
	return nil, &NotLoadedError{edge: "following_sales"}
}

// ProvinceOrErr returns the Province value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) ProvinceOrErr() (*Province, error) {
	if e.Province != nil {
		return e.Province, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: province.Label}
	}
	return nil, &NotLoadedError{edge: "province"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) DistrictOrErr() (*District, error) {
	if e.District != nil {
		return e.District, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: district.Label}
	}
	return nil, &NotLoadedError{edge: "district"}
}

// VisitRecordsOrErr returns the VisitRecords value or an error if the edge
// was not loaded in eager-loading.
func (e TenderEdges) VisitRecordsOrErr() ([]*VisitRecord, error) {
	if e.loadedTypes[8] {
		return e.VisitRecords, nil
	}
	return nil, &NotLoadedError{edge: "visit_records"}
}

// CompetitorOrErr returns the Competitor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) CompetitorOrErr() (*Competitor, error) {
	if e.Competitor != nil {
		return e.Competitor, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: competitor.Label}
	}
	return nil, &NotLoadedError{edge: "competitor"}
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderEdges) ApproverOrErr() (*User, error) {
	if e.Approver != nil {
		return e.Approver, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tender) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tender.FieldGeoCoordinate:
			values[i] = &sql.NullScanner{S: new(geo.GeoJson)}
		case tender.FieldProvinceID, tender.FieldCityID, tender.FieldDistrictID, tender.FieldCustomerID, tender.FieldFinderID, tender.FieldCreatedByID, tender.FieldCompetitorID, tender.FieldApproverID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case tender.FieldAttachements, tender.FieldGeoBounds, tender.FieldImages:
			values[i] = new([]byte)
		case tender.FieldIsApproved, tender.FieldPrepareToBid, tender.FieldKeyProject:
			values[i] = new(sql.NullBool)
		case tender.FieldEstimatedAmount, tender.FieldTenderWinAmount, tender.FieldLastTenderAmount:
			values[i] = new(sql.NullFloat64)
		case tender.FieldStatus, tender.FieldClassify, tender.FieldLevelInvolved, tender.FieldSizeAndValueRating, tender.FieldCreditAndPaymentRating, tender.FieldTimeLimitRating, tender.FieldCustomerRelationshipRating, tender.FieldCompetitivePartnershipRating:
			values[i] = new(sql.NullInt64)
		case tender.FieldCode, tender.FieldName, tender.FieldAddress, tender.FieldFullAddress, tender.FieldContractor, tender.FieldSizeAndValueRatingOverview, tender.FieldCreditAndPaymentRatingOverview, tender.FieldTimeLimitRatingOverview, tender.FieldCustomerRelationshipRatingOverview, tender.FieldCompetitivePartnershipRatingOverview, tender.FieldProjectCode, tender.FieldProjectType, tender.FieldProjectDefinition, tender.FieldRemark, tender.FieldTenderSituations, tender.FieldOwnerSituations, tender.FieldBiddingInstructions, tender.FieldCompetitorSituations, tender.FieldCostEngineer, tender.FieldTenderForm, tender.FieldContractForm, tender.FieldManagementCompany, tender.FieldTenderingAgency, tender.FieldFacadeConsultant, tender.FieldDesignUnit, tender.FieldConsultingFirm, tender.FieldCurrentProgress, tender.FieldTenderWinCompany, tender.FieldTenderCode, tender.FieldArchitect, tender.FieldDeveloper, tender.FieldConstructionArea:
			values[i] = new(sql.NullString)
		case tender.FieldCreatedAt, tender.FieldUpdatedAt, tender.FieldTenderDate, tender.FieldDiscoveryDate, tender.FieldEstimatedProjectStartDate, tender.FieldEstimatedProjectEndDate, tender.FieldBiddingDate, tender.FieldTenderClosingDate, tender.FieldTenderWinDate:
			values[i] = new(sql.NullTime)
		case tender.FieldID, tender.FieldAreaID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tender fields.
func (t *Tender) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tender.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tender.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tender.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tender.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case tender.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int(value.Int64)
			}
		case tender.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				t.IsApproved = value.Bool
			}
		case tender.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tender.FieldEstimatedAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_amount", values[i])
			} else if value.Valid {
				t.EstimatedAmount = value.Float64
			}
		case tender.FieldTenderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_date", values[i])
			} else if value.Valid {
				t.TenderDate = value.Time
			}
		case tender.FieldClassify:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field classify", values[i])
			} else if value.Valid {
				t.Classify = new(int)
				*t.Classify = int(value.Int64)
			}
		case tender.FieldDiscoveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field discovery_date", values[i])
			} else if value.Valid {
				t.DiscoveryDate = value.Time
			}
		case tender.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = new(string)
				*t.Address = value.String
			}
		case tender.FieldFullAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_address", values[i])
			} else if value.Valid {
				t.FullAddress = new(string)
				*t.FullAddress = value.String
			}
		case tender.FieldContractor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contractor", values[i])
			} else if value.Valid {
				t.Contractor = new(string)
				*t.Contractor = value.String
			}
		case tender.FieldLevelInvolved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_involved", values[i])
			} else if value.Valid {
				t.LevelInvolved = new(int)
				*t.LevelInvolved = int(value.Int64)
			}
		case tender.FieldSizeAndValueRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_and_value_rating", values[i])
			} else if value.Valid {
				t.SizeAndValueRating = new(int)
				*t.SizeAndValueRating = int(value.Int64)
			}
		case tender.FieldSizeAndValueRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size_and_value_rating_overview", values[i])
			} else if value.Valid {
				t.SizeAndValueRatingOverview = new(string)
				*t.SizeAndValueRatingOverview = value.String
			}
		case tender.FieldCreditAndPaymentRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit_and_payment_rating", values[i])
			} else if value.Valid {
				t.CreditAndPaymentRating = new(int)
				*t.CreditAndPaymentRating = int(value.Int64)
			}
		case tender.FieldCreditAndPaymentRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_and_payment_rating_overview", values[i])
			} else if value.Valid {
				t.CreditAndPaymentRatingOverview = new(string)
				*t.CreditAndPaymentRatingOverview = value.String
			}
		case tender.FieldTimeLimitRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_limit_rating", values[i])
			} else if value.Valid {
				t.TimeLimitRating = new(int)
				*t.TimeLimitRating = int(value.Int64)
			}
		case tender.FieldTimeLimitRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_limit_rating_overview", values[i])
			} else if value.Valid {
				t.TimeLimitRatingOverview = new(string)
				*t.TimeLimitRatingOverview = value.String
			}
		case tender.FieldCustomerRelationshipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_relationship_rating", values[i])
			} else if value.Valid {
				t.CustomerRelationshipRating = new(int)
				*t.CustomerRelationshipRating = int(value.Int64)
			}
		case tender.FieldCustomerRelationshipRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_relationship_rating_overview", values[i])
			} else if value.Valid {
				t.CustomerRelationshipRatingOverview = new(string)
				*t.CustomerRelationshipRatingOverview = value.String
			}
		case tender.FieldCompetitivePartnershipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field competitive_partnership_rating", values[i])
			} else if value.Valid {
				t.CompetitivePartnershipRating = new(int)
				*t.CompetitivePartnershipRating = int(value.Int64)
			}
		case tender.FieldCompetitivePartnershipRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competitive_partnership_rating_overview", values[i])
			} else if value.Valid {
				t.CompetitivePartnershipRatingOverview = new(string)
				*t.CompetitivePartnershipRatingOverview = value.String
			}
		case tender.FieldPrepareToBid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prepare_to_bid", values[i])
			} else if value.Valid {
				t.PrepareToBid = value.Bool
			}
		case tender.FieldProjectCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_code", values[i])
			} else if value.Valid {
				t.ProjectCode = new(string)
				*t.ProjectCode = value.String
			}
		case tender.FieldProjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_type", values[i])
			} else if value.Valid {
				t.ProjectType = new(string)
				*t.ProjectType = value.String
			}
		case tender.FieldProjectDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_definition", values[i])
			} else if value.Valid {
				t.ProjectDefinition = new(string)
				*t.ProjectDefinition = value.String
			}
		case tender.FieldEstimatedProjectStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_start_date", values[i])
			} else if value.Valid {
				t.EstimatedProjectStartDate = new(time.Time)
				*t.EstimatedProjectStartDate = value.Time
			}
		case tender.FieldEstimatedProjectEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_end_date", values[i])
			} else if value.Valid {
				t.EstimatedProjectEndDate = new(time.Time)
				*t.EstimatedProjectEndDate = value.Time
			}
		case tender.FieldAttachements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Attachements); err != nil {
					return fmt.Errorf("unmarshal field attachements: %w", err)
				}
			}
		case tender.FieldGeoCoordinate:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field geo_coordinate", values[i])
			} else if value.Valid {
				t.GeoCoordinate = value.S.(*geo.GeoJson)
			}
		case tender.FieldGeoBounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field geo_bounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.GeoBounds); err != nil {
					return fmt.Errorf("unmarshal field geo_bounds: %w", err)
				}
			}
		case tender.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				t.Remark = value.String
			}
		case tender.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case tender.FieldTenderSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_situations", values[i])
			} else if value.Valid {
				t.TenderSituations = new(string)
				*t.TenderSituations = value.String
			}
		case tender.FieldOwnerSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_situations", values[i])
			} else if value.Valid {
				t.OwnerSituations = new(string)
				*t.OwnerSituations = value.String
			}
		case tender.FieldBiddingInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bidding_instructions", values[i])
			} else if value.Valid {
				t.BiddingInstructions = new(string)
				*t.BiddingInstructions = value.String
			}
		case tender.FieldCompetitorSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competitor_situations", values[i])
			} else if value.Valid {
				t.CompetitorSituations = new(string)
				*t.CompetitorSituations = value.String
			}
		case tender.FieldCostEngineer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cost_engineer", values[i])
			} else if value.Valid {
				t.CostEngineer = new(string)
				*t.CostEngineer = value.String
			}
		case tender.FieldTenderForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_form", values[i])
			} else if value.Valid {
				t.TenderForm = new(string)
				*t.TenderForm = value.String
			}
		case tender.FieldContractForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_form", values[i])
			} else if value.Valid {
				t.ContractForm = new(string)
				*t.ContractForm = value.String
			}
		case tender.FieldManagementCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field management_company", values[i])
			} else if value.Valid {
				t.ManagementCompany = new(string)
				*t.ManagementCompany = value.String
			}
		case tender.FieldTenderingAgency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tendering_agency", values[i])
			} else if value.Valid {
				t.TenderingAgency = new(string)
				*t.TenderingAgency = value.String
			}
		case tender.FieldBiddingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bidding_date", values[i])
			} else if value.Valid {
				t.BiddingDate = new(time.Time)
				*t.BiddingDate = value.Time
			}
		case tender.FieldFacadeConsultant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facade_consultant", values[i])
			} else if value.Valid {
				t.FacadeConsultant = new(string)
				*t.FacadeConsultant = value.String
			}
		case tender.FieldDesignUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field design_unit", values[i])
			} else if value.Valid {
				t.DesignUnit = new(string)
				*t.DesignUnit = value.String
			}
		case tender.FieldConsultingFirm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consulting_firm", values[i])
			} else if value.Valid {
				t.ConsultingFirm = new(string)
				*t.ConsultingFirm = value.String
			}
		case tender.FieldKeyProject:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field key_project", values[i])
			} else if value.Valid {
				t.KeyProject = value.Bool
			}
		case tender.FieldCurrentProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_progress", values[i])
			} else if value.Valid {
				t.CurrentProgress = new(string)
				*t.CurrentProgress = value.String
			}
		case tender.FieldTenderWinCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_company", values[i])
			} else if value.Valid {
				t.TenderWinCompany = new(string)
				*t.TenderWinCompany = value.String
			}
		case tender.FieldTenderCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_code", values[i])
			} else if value.Valid {
				t.TenderCode = value.String
			}
		case tender.FieldArchitect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field architect", values[i])
			} else if value.Valid {
				t.Architect = value.String
			}
		case tender.FieldDeveloper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field developer", values[i])
			} else if value.Valid {
				t.Developer = value.String
			}
		case tender.FieldTenderClosingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_closing_date", values[i])
			} else if value.Valid {
				t.TenderClosingDate = value.Time
			}
		case tender.FieldConstructionArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field construction_area", values[i])
			} else if value.Valid {
				t.ConstructionArea = value.String
			}
		case tender.FieldTenderWinDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_date", values[i])
			} else if value.Valid {
				t.TenderWinDate = value.Time
			}
		case tender.FieldTenderWinAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_amount", values[i])
			} else if value.Valid {
				t.TenderWinAmount = value.Float64
			}
		case tender.FieldLastTenderAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field last_tender_amount", values[i])
			} else if value.Valid {
				t.LastTenderAmount = value.Float64
			}
		case tender.FieldAreaID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field area_id", values[i])
			} else if value != nil {
				t.AreaID = *value
			}
		case tender.FieldProvinceID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field province_id", values[i])
			} else if value.Valid {
				t.ProvinceID = new(xid.ID)
				*t.ProvinceID = *value.S.(*xid.ID)
			}
		case tender.FieldCityID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				t.CityID = new(xid.ID)
				*t.CityID = *value.S.(*xid.ID)
			}
		case tender.FieldDistrictID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field district_id", values[i])
			} else if value.Valid {
				t.DistrictID = new(xid.ID)
				*t.DistrictID = *value.S.(*xid.ID)
			}
		case tender.FieldCustomerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				t.CustomerID = new(xid.ID)
				*t.CustomerID = *value.S.(*xid.ID)
			}
		case tender.FieldFinderID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field finder_id", values[i])
			} else if value.Valid {
				t.FinderID = new(xid.ID)
				*t.FinderID = *value.S.(*xid.ID)
			}
		case tender.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				t.CreatedByID = new(xid.ID)
				*t.CreatedByID = *value.S.(*xid.ID)
			}
		case tender.FieldCompetitorID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field competitor_id", values[i])
			} else if value.Valid {
				t.CompetitorID = new(xid.ID)
				*t.CompetitorID = *value.S.(*xid.ID)
			}
		case tender.FieldApproverID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				t.ApproverID = new(xid.ID)
				*t.ApproverID = *value.S.(*xid.ID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tender.
// This includes values selected through modifiers, order, etc.
func (t *Tender) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryArea queries the "area" edge of the Tender entity.
func (t *Tender) QueryArea() *AreaQuery {
	return NewTenderClient(t.config).QueryArea(t)
}

// QueryCustomer queries the "customer" edge of the Tender entity.
func (t *Tender) QueryCustomer() *CustomerQuery {
	return NewTenderClient(t.config).QueryCustomer(t)
}

// QueryFinder queries the "finder" edge of the Tender entity.
func (t *Tender) QueryFinder() *UserQuery {
	return NewTenderClient(t.config).QueryFinder(t)
}

// QueryCreatedBy queries the "created_by" edge of the Tender entity.
func (t *Tender) QueryCreatedBy() *UserQuery {
	return NewTenderClient(t.config).QueryCreatedBy(t)
}

// QueryFollowingSales queries the "following_sales" edge of the Tender entity.
func (t *Tender) QueryFollowingSales() *UserQuery {
	return NewTenderClient(t.config).QueryFollowingSales(t)
}

// QueryProvince queries the "province" edge of the Tender entity.
func (t *Tender) QueryProvince() *ProvinceQuery {
	return NewTenderClient(t.config).QueryProvince(t)
}

// QueryCity queries the "city" edge of the Tender entity.
func (t *Tender) QueryCity() *CityQuery {
	return NewTenderClient(t.config).QueryCity(t)
}

// QueryDistrict queries the "district" edge of the Tender entity.
func (t *Tender) QueryDistrict() *DistrictQuery {
	return NewTenderClient(t.config).QueryDistrict(t)
}

// QueryVisitRecords queries the "visit_records" edge of the Tender entity.
func (t *Tender) QueryVisitRecords() *VisitRecordQuery {
	return NewTenderClient(t.config).QueryVisitRecords(t)
}

// QueryCompetitor queries the "competitor" edge of the Tender entity.
func (t *Tender) QueryCompetitor() *CompetitorQuery {
	return NewTenderClient(t.config).QueryCompetitor(t)
}

// QueryApprover queries the "approver" edge of the Tender entity.
func (t *Tender) QueryApprover() *UserQuery {
	return NewTenderClient(t.config).QueryApprover(t)
}

// Update returns a builder for updating this Tender.
// Note that you need to call Tender.Unwrap() before calling this method if this Tender
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tender) Update() *TenderUpdateOne {
	return NewTenderClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tender entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tender) Unwrap() *Tender {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tender is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tender) String() string {
	var builder strings.Builder
	builder.WriteString("Tender(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", t.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("estimated_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.EstimatedAmount))
	builder.WriteString(", ")
	builder.WriteString("tender_date=")
	builder.WriteString(t.TenderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.Classify; v != nil {
		builder.WriteString("classify=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("discovery_date=")
	builder.WriteString(t.DiscoveryDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.Address; v != nil {
		builder.WriteString("address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.FullAddress; v != nil {
		builder.WriteString("full_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.Contractor; v != nil {
		builder.WriteString("contractor=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.LevelInvolved; v != nil {
		builder.WriteString("level_involved=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.SizeAndValueRating; v != nil {
		builder.WriteString("size_and_value_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.SizeAndValueRatingOverview; v != nil {
		builder.WriteString("size_and_value_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.CreditAndPaymentRating; v != nil {
		builder.WriteString("credit_and_payment_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CreditAndPaymentRatingOverview; v != nil {
		builder.WriteString("credit_and_payment_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.TimeLimitRating; v != nil {
		builder.WriteString("time_limit_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.TimeLimitRatingOverview; v != nil {
		builder.WriteString("time_limit_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.CustomerRelationshipRating; v != nil {
		builder.WriteString("customer_relationship_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CustomerRelationshipRatingOverview; v != nil {
		builder.WriteString("customer_relationship_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.CompetitivePartnershipRating; v != nil {
		builder.WriteString("competitive_partnership_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CompetitivePartnershipRatingOverview; v != nil {
		builder.WriteString("competitive_partnership_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("prepare_to_bid=")
	builder.WriteString(fmt.Sprintf("%v", t.PrepareToBid))
	builder.WriteString(", ")
	if v := t.ProjectCode; v != nil {
		builder.WriteString("project_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ProjectType; v != nil {
		builder.WriteString("project_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ProjectDefinition; v != nil {
		builder.WriteString("project_definition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.EstimatedProjectStartDate; v != nil {
		builder.WriteString("estimated_project_start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.EstimatedProjectEndDate; v != nil {
		builder.WriteString("estimated_project_end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("attachements=")
	builder.WriteString(fmt.Sprintf("%v", t.Attachements))
	builder.WriteString(", ")
	if v := t.GeoCoordinate; v != nil {
		builder.WriteString("geo_coordinate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("geo_bounds=")
	builder.WriteString(fmt.Sprintf("%v", t.GeoBounds))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(t.Remark)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", t.Images))
	builder.WriteString(", ")
	if v := t.TenderSituations; v != nil {
		builder.WriteString("tender_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.OwnerSituations; v != nil {
		builder.WriteString("owner_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.BiddingInstructions; v != nil {
		builder.WriteString("bidding_instructions=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.CompetitorSituations; v != nil {
		builder.WriteString("competitor_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.CostEngineer; v != nil {
		builder.WriteString("cost_engineer=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.TenderForm; v != nil {
		builder.WriteString("tender_form=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ContractForm; v != nil {
		builder.WriteString("contract_form=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ManagementCompany; v != nil {
		builder.WriteString("management_company=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.TenderingAgency; v != nil {
		builder.WriteString("tendering_agency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.BiddingDate; v != nil {
		builder.WriteString("bidding_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.FacadeConsultant; v != nil {
		builder.WriteString("facade_consultant=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.DesignUnit; v != nil {
		builder.WriteString("design_unit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ConsultingFirm; v != nil {
		builder.WriteString("consulting_firm=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key_project=")
	builder.WriteString(fmt.Sprintf("%v", t.KeyProject))
	builder.WriteString(", ")
	if v := t.CurrentProgress; v != nil {
		builder.WriteString("current_progress=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.TenderWinCompany; v != nil {
		builder.WriteString("tender_win_company=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tender_code=")
	builder.WriteString(t.TenderCode)
	builder.WriteString(", ")
	builder.WriteString("architect=")
	builder.WriteString(t.Architect)
	builder.WriteString(", ")
	builder.WriteString("developer=")
	builder.WriteString(t.Developer)
	builder.WriteString(", ")
	builder.WriteString("tender_closing_date=")
	builder.WriteString(t.TenderClosingDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("construction_area=")
	builder.WriteString(t.ConstructionArea)
	builder.WriteString(", ")
	builder.WriteString("tender_win_date=")
	builder.WriteString(t.TenderWinDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tender_win_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.TenderWinAmount))
	builder.WriteString(", ")
	builder.WriteString("last_tender_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.LastTenderAmount))
	builder.WriteString(", ")
	builder.WriteString("area_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AreaID))
	builder.WriteString(", ")
	if v := t.ProvinceID; v != nil {
		builder.WriteString("province_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.DistrictID; v != nil {
		builder.WriteString("district_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CustomerID; v != nil {
		builder.WriteString("customer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.FinderID; v != nil {
		builder.WriteString("finder_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CreatedByID; v != nil {
		builder.WriteString("created_by_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CompetitorID; v != nil {
		builder.WriteString("competitor_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.ApproverID; v != nil {
		builder.WriteString("approver_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedFollowingSales returns the FollowingSales named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tender) NamedFollowingSales(name string) ([]*User, error) {
	if t.Edges.namedFollowingSales == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedFollowingSales[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tender) appendNamedFollowingSales(name string, edges ...*User) {
	if t.Edges.namedFollowingSales == nil {
		t.Edges.namedFollowingSales = make(map[string][]*User)
	}
	if len(edges) == 0 {
		t.Edges.namedFollowingSales[name] = []*User{}
	} else {
		t.Edges.namedFollowingSales[name] = append(t.Edges.namedFollowingSales[name], edges...)
	}
}

// NamedVisitRecords returns the VisitRecords named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tender) NamedVisitRecords(name string) ([]*VisitRecord, error) {
	if t.Edges.namedVisitRecords == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedVisitRecords[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tender) appendNamedVisitRecords(name string, edges ...*VisitRecord) {
	if t.Edges.namedVisitRecords == nil {
		t.Edges.namedVisitRecords = make(map[string][]*VisitRecord)
	}
	if len(edges) == 0 {
		t.Edges.namedVisitRecords[name] = []*VisitRecord{}
	} else {
		t.Edges.namedVisitRecords[name] = append(t.Edges.namedVisitRecords[name], edges...)
	}
}

// Tenders is a parsable slice of Tender.
type Tenders []*Tender
