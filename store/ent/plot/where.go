// Code generated by ent, DO NOT EDIT.

package plot

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldName, v))
}

// ColorHex applies equality check predicate on the "color_hex" field. It's identical to ColorHexEQ.
func ColorHex(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldColorHex, v))
}

// DistrictID applies equality check predicate on the "district_id" field. It's identical to DistrictIDEQ.
func DistrictID(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldDistrictID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Plot {
	return predicate.Plot(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Plot {
	return predicate.Plot(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Plot {
	return predicate.Plot(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Plot {
	return predicate.Plot(sql.FieldContainsFold(FieldName, v))
}

// ColorHexEQ applies the EQ predicate on the "color_hex" field.
func ColorHexEQ(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldColorHex, v))
}

// ColorHexNEQ applies the NEQ predicate on the "color_hex" field.
func ColorHexNEQ(v string) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldColorHex, v))
}

// ColorHexIn applies the In predicate on the "color_hex" field.
func ColorHexIn(vs ...string) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldColorHex, vs...))
}

// ColorHexNotIn applies the NotIn predicate on the "color_hex" field.
func ColorHexNotIn(vs ...string) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldColorHex, vs...))
}

// ColorHexGT applies the GT predicate on the "color_hex" field.
func ColorHexGT(v string) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldColorHex, v))
}

// ColorHexGTE applies the GTE predicate on the "color_hex" field.
func ColorHexGTE(v string) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldColorHex, v))
}

// ColorHexLT applies the LT predicate on the "color_hex" field.
func ColorHexLT(v string) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldColorHex, v))
}

// ColorHexLTE applies the LTE predicate on the "color_hex" field.
func ColorHexLTE(v string) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldColorHex, v))
}

// ColorHexContains applies the Contains predicate on the "color_hex" field.
func ColorHexContains(v string) predicate.Plot {
	return predicate.Plot(sql.FieldContains(FieldColorHex, v))
}

// ColorHexHasPrefix applies the HasPrefix predicate on the "color_hex" field.
func ColorHexHasPrefix(v string) predicate.Plot {
	return predicate.Plot(sql.FieldHasPrefix(FieldColorHex, v))
}

// ColorHexHasSuffix applies the HasSuffix predicate on the "color_hex" field.
func ColorHexHasSuffix(v string) predicate.Plot {
	return predicate.Plot(sql.FieldHasSuffix(FieldColorHex, v))
}

// ColorHexEqualFold applies the EqualFold predicate on the "color_hex" field.
func ColorHexEqualFold(v string) predicate.Plot {
	return predicate.Plot(sql.FieldEqualFold(FieldColorHex, v))
}

// ColorHexContainsFold applies the ContainsFold predicate on the "color_hex" field.
func ColorHexContainsFold(v string) predicate.Plot {
	return predicate.Plot(sql.FieldContainsFold(FieldColorHex, v))
}

// GeoBoundsIsNil applies the IsNil predicate on the "geo_bounds" field.
func GeoBoundsIsNil() predicate.Plot {
	return predicate.Plot(sql.FieldIsNull(FieldGeoBounds))
}

// GeoBoundsNotNil applies the NotNil predicate on the "geo_bounds" field.
func GeoBoundsNotNil() predicate.Plot {
	return predicate.Plot(sql.FieldNotNull(FieldGeoBounds))
}

// DistrictIDEQ applies the EQ predicate on the "district_id" field.
func DistrictIDEQ(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldEQ(FieldDistrictID, v))
}

// DistrictIDNEQ applies the NEQ predicate on the "district_id" field.
func DistrictIDNEQ(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldNEQ(FieldDistrictID, v))
}

// DistrictIDIn applies the In predicate on the "district_id" field.
func DistrictIDIn(vs ...xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldIn(FieldDistrictID, vs...))
}

// DistrictIDNotIn applies the NotIn predicate on the "district_id" field.
func DistrictIDNotIn(vs ...xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldNotIn(FieldDistrictID, vs...))
}

// DistrictIDGT applies the GT predicate on the "district_id" field.
func DistrictIDGT(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldGT(FieldDistrictID, v))
}

// DistrictIDGTE applies the GTE predicate on the "district_id" field.
func DistrictIDGTE(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldGTE(FieldDistrictID, v))
}

// DistrictIDLT applies the LT predicate on the "district_id" field.
func DistrictIDLT(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldLT(FieldDistrictID, v))
}

// DistrictIDLTE applies the LTE predicate on the "district_id" field.
func DistrictIDLTE(v xid.ID) predicate.Plot {
	return predicate.Plot(sql.FieldLTE(FieldDistrictID, v))
}

// DistrictIDContains applies the Contains predicate on the "district_id" field.
func DistrictIDContains(v xid.ID) predicate.Plot {
	vc := string(v)
	return predicate.Plot(sql.FieldContains(FieldDistrictID, vc))
}

// DistrictIDHasPrefix applies the HasPrefix predicate on the "district_id" field.
func DistrictIDHasPrefix(v xid.ID) predicate.Plot {
	vc := string(v)
	return predicate.Plot(sql.FieldHasPrefix(FieldDistrictID, vc))
}

// DistrictIDHasSuffix applies the HasSuffix predicate on the "district_id" field.
func DistrictIDHasSuffix(v xid.ID) predicate.Plot {
	vc := string(v)
	return predicate.Plot(sql.FieldHasSuffix(FieldDistrictID, vc))
}

// DistrictIDEqualFold applies the EqualFold predicate on the "district_id" field.
func DistrictIDEqualFold(v xid.ID) predicate.Plot {
	vc := string(v)
	return predicate.Plot(sql.FieldEqualFold(FieldDistrictID, vc))
}

// DistrictIDContainsFold applies the ContainsFold predicate on the "district_id" field.
func DistrictIDContainsFold(v xid.ID) predicate.Plot {
	vc := string(v)
	return predicate.Plot(sql.FieldContainsFold(FieldDistrictID, vc))
}

// HasDistrict applies the HasEdge predicate on the "district" edge.
func HasDistrict() predicate.Plot {
	return predicate.Plot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistrictTable, DistrictColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictWith applies the HasEdge predicate on the "district" edge with a given conditions (other predicates).
func HasDistrictWith(preds ...predicate.District) predicate.Plot {
	return predicate.Plot(func(s *sql.Selector) {
		step := newDistrictStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plot) predicate.Plot {
	return predicate.Plot(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plot) predicate.Plot {
	return predicate.Plot(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plot) predicate.Plot {
	return predicate.Plot(sql.NotPredicates(p))
}
