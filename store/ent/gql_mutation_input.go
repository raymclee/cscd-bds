// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/schema/xid"
	"time"
)

// CreateAreaInput represents a mutation input for creating areas.
type CreateAreaInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        string
	Code        string
	CustomerIDs []xid.ID
	TenderIDs   []xid.ID
	SaleIDs     []xid.ID
	ProvinceIDs []xid.ID
}

// Mutate applies the CreateAreaInput on the AreaMutation builder.
func (i *CreateAreaInput) Mutate(m *AreaMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetCode(i.Code)
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.SaleIDs; len(v) > 0 {
		m.AddSaleIDs(v...)
	}
	if v := i.ProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAreaInput on the AreaCreate builder.
func (c *AreaCreate) SetInput(i CreateAreaInput) *AreaCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAreaInput represents a mutation input for updating areas.
type UpdateAreaInput struct {
	UpdatedAt         *time.Time
	Name              *string
	Code              *string
	ClearCustomers    bool
	AddCustomerIDs    []xid.ID
	RemoveCustomerIDs []xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
	ClearSales        bool
	AddSaleIDs        []xid.ID
	RemoveSaleIDs     []xid.ID
	ClearProvinces    bool
	AddProvinceIDs    []xid.ID
	RemoveProvinceIDs []xid.ID
}

// Mutate applies the UpdateAreaInput on the AreaMutation builder.
func (i *UpdateAreaInput) Mutate(m *AreaMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearSales {
		m.ClearSales()
	}
	if v := i.AddSaleIDs; len(v) > 0 {
		m.AddSaleIDs(v...)
	}
	if v := i.RemoveSaleIDs; len(v) > 0 {
		m.RemoveSaleIDs(v...)
	}
	if i.ClearProvinces {
		m.ClearProvinces()
	}
	if v := i.AddProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
	if v := i.RemoveProvinceIDs; len(v) > 0 {
		m.RemoveProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAreaInput on the AreaUpdate builder.
func (c *AreaUpdate) SetInput(i UpdateAreaInput) *AreaUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAreaInput on the AreaUpdateOne builder.
func (c *AreaUpdateOne) SetInput(i UpdateAreaInput) *AreaUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCityInput represents a mutation input for creating cities.
type CreateCityInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	ProvCode    int
	Name        string
	DistrictIDs []xid.ID
	ProvinceID  xid.ID
	TenderIDs   []xid.ID
}

// Mutate applies the CreateCityInput on the CityMutation builder.
func (i *CreateCityInput) Mutate(m *CityMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetProvCode(i.ProvCode)
	m.SetName(i.Name)
	if v := i.DistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	m.SetProvinceID(i.ProvinceID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCityInput on the CityCreate builder.
func (c *CityCreate) SetInput(i CreateCityInput) *CityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCityInput represents a mutation input for updating cities.
type UpdateCityInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	ProvCode          *int
	Name              *string
	ClearDistricts    bool
	AddDistrictIDs    []xid.ID
	RemoveDistrictIDs []xid.ID
	ProvinceID        *xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
}

// Mutate applies the UpdateCityInput on the CityMutation builder.
func (i *UpdateCityInput) Mutate(m *CityMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.ProvCode; v != nil {
		m.SetProvCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDistricts {
		m.ClearDistricts()
	}
	if v := i.AddDistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.RemoveDistrictIDs; len(v) > 0 {
		m.RemoveDistrictIDs(v...)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCityInput on the CityUpdate builder.
func (c *CityUpdate) SetInput(i UpdateCityInput) *CityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCityInput on the CityUpdateOne builder.
func (c *CityUpdateOne) SetInput(i UpdateCityInput) *CityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryInput represents a mutation input for creating countries.
type CreateCountryInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	Name        string
	ProvinceIDs []xid.ID
}

// Mutate applies the CreateCountryInput on the CountryMutation builder.
func (i *CreateCountryInput) Mutate(m *CountryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetName(i.Name)
	if v := i.ProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCountryInput on the CountryCreate builder.
func (c *CountryCreate) SetInput(i CreateCountryInput) *CountryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryInput represents a mutation input for updating countries.
type UpdateCountryInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	Name              *string
	ClearProvinces    bool
	AddProvinceIDs    []xid.ID
	RemoveProvinceIDs []xid.ID
}

// Mutate applies the UpdateCountryInput on the CountryMutation builder.
func (i *UpdateCountryInput) Mutate(m *CountryMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProvinces {
		m.ClearProvinces()
	}
	if v := i.AddProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
	if v := i.RemoveProvinceIDs; len(v) > 0 {
		m.RemoveProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdate builder.
func (c *CountryUpdate) SetInput(i UpdateCountryInput) *CountryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdateOne builder.
func (c *CountryUpdateOne) SetInput(i UpdateCountryInput) *CountryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	Name                  string
	OwnerType             *int
	Industry              int
	Size                  *int
	ContactPerson         *string
	ContactPersonPosition *string
	ContactPersonPhone    *string
	ContactPersonEmail    *string
	AreaID                xid.ID
	TenderIDs             []xid.ID
	SalesID               *xid.ID
	CreatedByID           xid.ID
	VisitRecordIDs        []xid.ID
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	if v := i.OwnerType; v != nil {
		m.SetOwnerType(*v)
	}
	m.SetIndustry(i.Industry)
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.ContactPerson; v != nil {
		m.SetContactPerson(*v)
	}
	if v := i.ContactPersonPosition; v != nil {
		m.SetContactPersonPosition(*v)
	}
	if v := i.ContactPersonPhone; v != nil {
		m.SetContactPersonPhone(*v)
	}
	if v := i.ContactPersonEmail; v != nil {
		m.SetContactPersonEmail(*v)
	}
	m.SetAreaID(i.AreaID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.SalesID; v != nil {
		m.SetSalesID(*v)
	}
	m.SetCreatedByID(i.CreatedByID)
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	UpdatedAt                  *time.Time
	Name                       *string
	ClearOwnerType             bool
	OwnerType                  *int
	Industry                   *int
	ClearSize                  bool
	Size                       *int
	ClearContactPerson         bool
	ContactPerson              *string
	ClearContactPersonPosition bool
	ContactPersonPosition      *string
	ClearContactPersonPhone    bool
	ContactPersonPhone         *string
	ClearContactPersonEmail    bool
	ContactPersonEmail         *string
	AreaID                     *xid.ID
	ClearTenders               bool
	AddTenderIDs               []xid.ID
	RemoveTenderIDs            []xid.ID
	ClearSales                 bool
	SalesID                    *xid.ID
	CreatedByID                *xid.ID
	ClearVisitRecords          bool
	AddVisitRecordIDs          []xid.ID
	RemoveVisitRecordIDs       []xid.ID
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearOwnerType {
		m.ClearOwnerType()
	}
	if v := i.OwnerType; v != nil {
		m.SetOwnerType(*v)
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if i.ClearSize {
		m.ClearSize()
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if i.ClearContactPerson {
		m.ClearContactPerson()
	}
	if v := i.ContactPerson; v != nil {
		m.SetContactPerson(*v)
	}
	if i.ClearContactPersonPosition {
		m.ClearContactPersonPosition()
	}
	if v := i.ContactPersonPosition; v != nil {
		m.SetContactPersonPosition(*v)
	}
	if i.ClearContactPersonPhone {
		m.ClearContactPersonPhone()
	}
	if v := i.ContactPersonPhone; v != nil {
		m.SetContactPersonPhone(*v)
	}
	if i.ClearContactPersonEmail {
		m.ClearContactPersonEmail()
	}
	if v := i.ContactPersonEmail; v != nil {
		m.SetContactPersonEmail(*v)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearSales {
		m.ClearSales()
	}
	if v := i.SalesID; v != nil {
		m.SetSalesID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDistrictInput represents a mutation input for creating districts.
type CreateDistrictInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Adcode     int
	ProvCode   int
	CityCode   int
	Name       string
	ProvinceID xid.ID
	CityID     *xid.ID
	TenderIDs  []xid.ID
	PlotIDs    []xid.ID
}

// Mutate applies the CreateDistrictInput on the DistrictMutation builder.
func (i *CreateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetProvCode(i.ProvCode)
	m.SetCityCode(i.CityCode)
	m.SetName(i.Name)
	m.SetProvinceID(i.ProvinceID)
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.PlotIDs; len(v) > 0 {
		m.AddPlotIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDistrictInput on the DistrictCreate builder.
func (c *DistrictCreate) SetInput(i CreateDistrictInput) *DistrictCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDistrictInput represents a mutation input for updating districts.
type UpdateDistrictInput struct {
	UpdatedAt       *time.Time
	Adcode          *int
	ProvCode        *int
	CityCode        *int
	Name            *string
	ProvinceID      *xid.ID
	ClearCity       bool
	CityID          *xid.ID
	ClearTenders    bool
	AddTenderIDs    []xid.ID
	RemoveTenderIDs []xid.ID
	ClearPlots      bool
	AddPlotIDs      []xid.ID
	RemovePlotIDs   []xid.ID
}

// Mutate applies the UpdateDistrictInput on the DistrictMutation builder.
func (i *UpdateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.ProvCode; v != nil {
		m.SetProvCode(*v)
	}
	if v := i.CityCode; v != nil {
		m.SetCityCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearPlots {
		m.ClearPlots()
	}
	if v := i.AddPlotIDs; len(v) > 0 {
		m.AddPlotIDs(v...)
	}
	if v := i.RemovePlotIDs; len(v) > 0 {
		m.RemovePlotIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdate builder.
func (c *DistrictUpdate) SetInput(i UpdateDistrictInput) *DistrictUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdateOne builder.
func (c *DistrictUpdateOne) SetInput(i UpdateDistrictInput) *DistrictUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePlotInput represents a mutation input for creating plots.
type CreatePlotInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Name       string
	ColorHex   string
	DistrictID xid.ID
}

// Mutate applies the CreatePlotInput on the PlotMutation builder.
func (i *CreatePlotInput) Mutate(m *PlotMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetColorHex(i.ColorHex)
	m.SetDistrictID(i.DistrictID)
}

// SetInput applies the change-set in the CreatePlotInput on the PlotCreate builder.
func (c *PlotCreate) SetInput(i CreatePlotInput) *PlotCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePlotInput represents a mutation input for updating plots.
type UpdatePlotInput struct {
	UpdatedAt  *time.Time
	Name       *string
	ColorHex   *string
	DistrictID *xid.ID
}

// Mutate applies the UpdatePlotInput on the PlotMutation builder.
func (i *UpdatePlotInput) Mutate(m *PlotMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ColorHex; v != nil {
		m.SetColorHex(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
}

// SetInput applies the change-set in the UpdatePlotInput on the PlotUpdate builder.
func (c *PlotUpdate) SetInput(i UpdatePlotInput) *PlotUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePlotInput on the PlotUpdateOne builder.
func (c *PlotUpdateOne) SetInput(i UpdatePlotInput) *PlotUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProvinceInput represents a mutation input for creating provinces.
type CreateProvinceInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	Name        string
	DistrictIDs []xid.ID
	CityIDs     []xid.ID
	CountryID   xid.ID
	TenderIDs   []xid.ID
	AreaID      *xid.ID
}

// Mutate applies the CreateProvinceInput on the ProvinceMutation builder.
func (i *CreateProvinceInput) Mutate(m *ProvinceMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetName(i.Name)
	if v := i.DistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.CityIDs; len(v) > 0 {
		m.AddCityIDs(v...)
	}
	m.SetCountryID(i.CountryID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
}

// SetInput applies the change-set in the CreateProvinceInput on the ProvinceCreate builder.
func (c *ProvinceCreate) SetInput(i CreateProvinceInput) *ProvinceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProvinceInput represents a mutation input for updating provinces.
type UpdateProvinceInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	Name              *string
	ClearDistricts    bool
	AddDistrictIDs    []xid.ID
	RemoveDistrictIDs []xid.ID
	ClearCities       bool
	AddCityIDs        []xid.ID
	RemoveCityIDs     []xid.ID
	CountryID         *xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
	ClearArea         bool
	AreaID            *xid.ID
}

// Mutate applies the UpdateProvinceInput on the ProvinceMutation builder.
func (i *UpdateProvinceInput) Mutate(m *ProvinceMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDistricts {
		m.ClearDistricts()
	}
	if v := i.AddDistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.RemoveDistrictIDs; len(v) > 0 {
		m.RemoveDistrictIDs(v...)
	}
	if i.ClearCities {
		m.ClearCities()
	}
	if v := i.AddCityIDs; len(v) > 0 {
		m.AddCityIDs(v...)
	}
	if v := i.RemoveCityIDs; len(v) > 0 {
		m.RemoveCityIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearArea {
		m.ClearArea()
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
}

// SetInput applies the change-set in the UpdateProvinceInput on the ProvinceUpdate builder.
func (c *ProvinceUpdate) SetInput(i UpdateProvinceInput) *ProvinceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProvinceInput on the ProvinceUpdateOne builder.
func (c *ProvinceUpdateOne) SetInput(i UpdateProvinceInput) *ProvinceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenderInput represents a mutation input for creating tenders.
type CreateTenderInput struct {
	CreatedAt                            *time.Time
	UpdatedAt                            *time.Time
	Code                                 string
	Status                               *int
	Name                                 string
	EstimatedAmount                      *float64
	TenderDate                           *time.Time
	DiscoveryDate                        time.Time
	Address                              *string
	FullAddress                          *string
	Contractor                           *string
	SizeAndValueRating                   *int
	SizeAndValueRatingOverview           *string
	CreditAndPaymentRating               *int
	CreditAndPaymentRatingOverview       *string
	TimeLimitRating                      *int
	TimeLimitRatingOverview              *string
	CustomerRelationshipRating           *int
	CustomerRelationshipRatingOverview   *string
	CompetitivePartnershipRating         *int
	CompetitivePartnershipRatingOverview *string
	PrepareToBid                         *bool
	ProjectCode                          *string
	ProjectDefinition                    *string
	EstimatedProjectStartDate            *time.Time
	EstimatedProjectEndDate              *time.Time
	ProjectType                          *string
	Attachements                         []string
	Remark                               *string
	Images                               []string
	TenderSituations                     *string
	OwnerSituations                      *string
	BiddingInstructions                  *string
	CompetitorSituations                 *string
	CostEngineer                         *string
	TenderForm                           *string
	ContractForm                         *string
	ManagementCompany                    *string
	TenderingAgency                      *string
	BiddingDate                          *time.Time
	FacadeConsultant                     *string
	DesignUnit                           *string
	ConsultingFirm                       *string
	KeyProject                           *bool
	AreaID                               xid.ID
	CustomerID                           xid.ID
	FinderID                             xid.ID
	CreatedByID                          xid.ID
	FollowingSaleIDs                     []xid.ID
	ProvinceID                           xid.ID
	CityID                               *xid.ID
	DistrictID                           xid.ID
	VisitRecordIDs                       []xid.ID
}

// Mutate applies the CreateTenderInput on the TenderMutation builder.
func (i *CreateTenderInput) Mutate(m *TenderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCode(i.Code)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	m.SetName(i.Name)
	if v := i.EstimatedAmount; v != nil {
		m.SetEstimatedAmount(*v)
	}
	if v := i.TenderDate; v != nil {
		m.SetTenderDate(*v)
	}
	m.SetDiscoveryDate(i.DiscoveryDate)
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.FullAddress; v != nil {
		m.SetFullAddress(*v)
	}
	if v := i.Contractor; v != nil {
		m.SetContractor(*v)
	}
	if v := i.SizeAndValueRating; v != nil {
		m.SetSizeAndValueRating(*v)
	}
	if v := i.SizeAndValueRatingOverview; v != nil {
		m.SetSizeAndValueRatingOverview(*v)
	}
	if v := i.CreditAndPaymentRating; v != nil {
		m.SetCreditAndPaymentRating(*v)
	}
	if v := i.CreditAndPaymentRatingOverview; v != nil {
		m.SetCreditAndPaymentRatingOverview(*v)
	}
	if v := i.TimeLimitRating; v != nil {
		m.SetTimeLimitRating(*v)
	}
	if v := i.TimeLimitRatingOverview; v != nil {
		m.SetTimeLimitRatingOverview(*v)
	}
	if v := i.CustomerRelationshipRating; v != nil {
		m.SetCustomerRelationshipRating(*v)
	}
	if v := i.CustomerRelationshipRatingOverview; v != nil {
		m.SetCustomerRelationshipRatingOverview(*v)
	}
	if v := i.CompetitivePartnershipRating; v != nil {
		m.SetCompetitivePartnershipRating(*v)
	}
	if v := i.CompetitivePartnershipRatingOverview; v != nil {
		m.SetCompetitivePartnershipRatingOverview(*v)
	}
	if v := i.PrepareToBid; v != nil {
		m.SetPrepareToBid(*v)
	}
	if v := i.ProjectCode; v != nil {
		m.SetProjectCode(*v)
	}
	if v := i.ProjectDefinition; v != nil {
		m.SetProjectDefinition(*v)
	}
	if v := i.EstimatedProjectStartDate; v != nil {
		m.SetEstimatedProjectStartDate(*v)
	}
	if v := i.EstimatedProjectEndDate; v != nil {
		m.SetEstimatedProjectEndDate(*v)
	}
	if v := i.ProjectType; v != nil {
		m.SetProjectType(*v)
	}
	if v := i.Attachements; v != nil {
		m.SetAttachements(v)
	}
	if v := i.Remark; v != nil {
		m.SetRemark(*v)
	}
	if v := i.Images; v != nil {
		m.SetImages(v)
	}
	if v := i.TenderSituations; v != nil {
		m.SetTenderSituations(*v)
	}
	if v := i.OwnerSituations; v != nil {
		m.SetOwnerSituations(*v)
	}
	if v := i.BiddingInstructions; v != nil {
		m.SetBiddingInstructions(*v)
	}
	if v := i.CompetitorSituations; v != nil {
		m.SetCompetitorSituations(*v)
	}
	if v := i.CostEngineer; v != nil {
		m.SetCostEngineer(*v)
	}
	if v := i.TenderForm; v != nil {
		m.SetTenderForm(*v)
	}
	if v := i.ContractForm; v != nil {
		m.SetContractForm(*v)
	}
	if v := i.ManagementCompany; v != nil {
		m.SetManagementCompany(*v)
	}
	if v := i.TenderingAgency; v != nil {
		m.SetTenderingAgency(*v)
	}
	if v := i.BiddingDate; v != nil {
		m.SetBiddingDate(*v)
	}
	if v := i.FacadeConsultant; v != nil {
		m.SetFacadeConsultant(*v)
	}
	if v := i.DesignUnit; v != nil {
		m.SetDesignUnit(*v)
	}
	if v := i.ConsultingFirm; v != nil {
		m.SetConsultingFirm(*v)
	}
	if v := i.KeyProject; v != nil {
		m.SetKeyProject(*v)
	}
	m.SetAreaID(i.AreaID)
	m.SetCustomerID(i.CustomerID)
	m.SetFinderID(i.FinderID)
	m.SetCreatedByID(i.CreatedByID)
	if v := i.FollowingSaleIDs; len(v) > 0 {
		m.AddFollowingSaleIDs(v...)
	}
	m.SetProvinceID(i.ProvinceID)
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	m.SetDistrictID(i.DistrictID)
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTenderInput on the TenderCreate builder.
func (c *TenderCreate) SetInput(i CreateTenderInput) *TenderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenderInput represents a mutation input for updating tenders.
type UpdateTenderInput struct {
	UpdatedAt                                 *time.Time
	Code                                      *string
	Status                                    *int
	Name                                      *string
	ClearEstimatedAmount                      bool
	EstimatedAmount                           *float64
	ClearTenderDate                           bool
	TenderDate                                *time.Time
	DiscoveryDate                             *time.Time
	ClearAddress                              bool
	Address                                   *string
	ClearFullAddress                          bool
	FullAddress                               *string
	ClearContractor                           bool
	Contractor                                *string
	ClearSizeAndValueRating                   bool
	SizeAndValueRating                        *int
	ClearSizeAndValueRatingOverview           bool
	SizeAndValueRatingOverview                *string
	ClearCreditAndPaymentRating               bool
	CreditAndPaymentRating                    *int
	ClearCreditAndPaymentRatingOverview       bool
	CreditAndPaymentRatingOverview            *string
	ClearTimeLimitRating                      bool
	TimeLimitRating                           *int
	ClearTimeLimitRatingOverview              bool
	TimeLimitRatingOverview                   *string
	ClearCustomerRelationshipRating           bool
	CustomerRelationshipRating                *int
	ClearCustomerRelationshipRatingOverview   bool
	CustomerRelationshipRatingOverview        *string
	ClearCompetitivePartnershipRating         bool
	CompetitivePartnershipRating              *int
	ClearCompetitivePartnershipRatingOverview bool
	CompetitivePartnershipRatingOverview      *string
	PrepareToBid                              *bool
	ClearProjectCode                          bool
	ProjectCode                               *string
	ClearProjectDefinition                    bool
	ProjectDefinition                         *string
	ClearEstimatedProjectStartDate            bool
	EstimatedProjectStartDate                 *time.Time
	ClearEstimatedProjectEndDate              bool
	EstimatedProjectEndDate                   *time.Time
	ClearProjectType                          bool
	ProjectType                               *string
	ClearAttachements                         bool
	Attachements                              []string
	AppendAttachements                        []string
	ClearRemark                               bool
	Remark                                    *string
	ClearImages                               bool
	Images                                    []string
	AppendImages                              []string
	ClearTenderSituations                     bool
	TenderSituations                          *string
	ClearOwnerSituations                      bool
	OwnerSituations                           *string
	ClearBiddingInstructions                  bool
	BiddingInstructions                       *string
	ClearCompetitorSituations                 bool
	CompetitorSituations                      *string
	ClearCostEngineer                         bool
	CostEngineer                              *string
	ClearTenderForm                           bool
	TenderForm                                *string
	ClearContractForm                         bool
	ContractForm                              *string
	ClearManagementCompany                    bool
	ManagementCompany                         *string
	ClearTenderingAgency                      bool
	TenderingAgency                           *string
	ClearBiddingDate                          bool
	BiddingDate                               *time.Time
	ClearFacadeConsultant                     bool
	FacadeConsultant                          *string
	ClearDesignUnit                           bool
	DesignUnit                                *string
	ClearConsultingFirm                       bool
	ConsultingFirm                            *string
	KeyProject                                *bool
	AreaID                                    *xid.ID
	CustomerID                                *xid.ID
	FinderID                                  *xid.ID
	CreatedByID                               *xid.ID
	ClearFollowingSales                       bool
	AddFollowingSaleIDs                       []xid.ID
	RemoveFollowingSaleIDs                    []xid.ID
	ProvinceID                                *xid.ID
	ClearCity                                 bool
	CityID                                    *xid.ID
	DistrictID                                *xid.ID
	ClearVisitRecords                         bool
	AddVisitRecordIDs                         []xid.ID
	RemoveVisitRecordIDs                      []xid.ID
}

// Mutate applies the UpdateTenderInput on the TenderMutation builder.
func (i *UpdateTenderInput) Mutate(m *TenderMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearEstimatedAmount {
		m.ClearEstimatedAmount()
	}
	if v := i.EstimatedAmount; v != nil {
		m.SetEstimatedAmount(*v)
	}
	if i.ClearTenderDate {
		m.ClearTenderDate()
	}
	if v := i.TenderDate; v != nil {
		m.SetTenderDate(*v)
	}
	if v := i.DiscoveryDate; v != nil {
		m.SetDiscoveryDate(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearFullAddress {
		m.ClearFullAddress()
	}
	if v := i.FullAddress; v != nil {
		m.SetFullAddress(*v)
	}
	if i.ClearContractor {
		m.ClearContractor()
	}
	if v := i.Contractor; v != nil {
		m.SetContractor(*v)
	}
	if i.ClearSizeAndValueRating {
		m.ClearSizeAndValueRating()
	}
	if v := i.SizeAndValueRating; v != nil {
		m.SetSizeAndValueRating(*v)
	}
	if i.ClearSizeAndValueRatingOverview {
		m.ClearSizeAndValueRatingOverview()
	}
	if v := i.SizeAndValueRatingOverview; v != nil {
		m.SetSizeAndValueRatingOverview(*v)
	}
	if i.ClearCreditAndPaymentRating {
		m.ClearCreditAndPaymentRating()
	}
	if v := i.CreditAndPaymentRating; v != nil {
		m.SetCreditAndPaymentRating(*v)
	}
	if i.ClearCreditAndPaymentRatingOverview {
		m.ClearCreditAndPaymentRatingOverview()
	}
	if v := i.CreditAndPaymentRatingOverview; v != nil {
		m.SetCreditAndPaymentRatingOverview(*v)
	}
	if i.ClearTimeLimitRating {
		m.ClearTimeLimitRating()
	}
	if v := i.TimeLimitRating; v != nil {
		m.SetTimeLimitRating(*v)
	}
	if i.ClearTimeLimitRatingOverview {
		m.ClearTimeLimitRatingOverview()
	}
	if v := i.TimeLimitRatingOverview; v != nil {
		m.SetTimeLimitRatingOverview(*v)
	}
	if i.ClearCustomerRelationshipRating {
		m.ClearCustomerRelationshipRating()
	}
	if v := i.CustomerRelationshipRating; v != nil {
		m.SetCustomerRelationshipRating(*v)
	}
	if i.ClearCustomerRelationshipRatingOverview {
		m.ClearCustomerRelationshipRatingOverview()
	}
	if v := i.CustomerRelationshipRatingOverview; v != nil {
		m.SetCustomerRelationshipRatingOverview(*v)
	}
	if i.ClearCompetitivePartnershipRating {
		m.ClearCompetitivePartnershipRating()
	}
	if v := i.CompetitivePartnershipRating; v != nil {
		m.SetCompetitivePartnershipRating(*v)
	}
	if i.ClearCompetitivePartnershipRatingOverview {
		m.ClearCompetitivePartnershipRatingOverview()
	}
	if v := i.CompetitivePartnershipRatingOverview; v != nil {
		m.SetCompetitivePartnershipRatingOverview(*v)
	}
	if v := i.PrepareToBid; v != nil {
		m.SetPrepareToBid(*v)
	}
	if i.ClearProjectCode {
		m.ClearProjectCode()
	}
	if v := i.ProjectCode; v != nil {
		m.SetProjectCode(*v)
	}
	if i.ClearProjectDefinition {
		m.ClearProjectDefinition()
	}
	if v := i.ProjectDefinition; v != nil {
		m.SetProjectDefinition(*v)
	}
	if i.ClearEstimatedProjectStartDate {
		m.ClearEstimatedProjectStartDate()
	}
	if v := i.EstimatedProjectStartDate; v != nil {
		m.SetEstimatedProjectStartDate(*v)
	}
	if i.ClearEstimatedProjectEndDate {
		m.ClearEstimatedProjectEndDate()
	}
	if v := i.EstimatedProjectEndDate; v != nil {
		m.SetEstimatedProjectEndDate(*v)
	}
	if i.ClearProjectType {
		m.ClearProjectType()
	}
	if v := i.ProjectType; v != nil {
		m.SetProjectType(*v)
	}
	if i.ClearAttachements {
		m.ClearAttachements()
	}
	if v := i.Attachements; v != nil {
		m.SetAttachements(v)
	}
	if i.AppendAttachements != nil {
		m.AppendAttachements(i.Attachements)
	}
	if i.ClearRemark {
		m.ClearRemark()
	}
	if v := i.Remark; v != nil {
		m.SetRemark(*v)
	}
	if i.ClearImages {
		m.ClearImages()
	}
	if v := i.Images; v != nil {
		m.SetImages(v)
	}
	if i.AppendImages != nil {
		m.AppendImages(i.Images)
	}
	if i.ClearTenderSituations {
		m.ClearTenderSituations()
	}
	if v := i.TenderSituations; v != nil {
		m.SetTenderSituations(*v)
	}
	if i.ClearOwnerSituations {
		m.ClearOwnerSituations()
	}
	if v := i.OwnerSituations; v != nil {
		m.SetOwnerSituations(*v)
	}
	if i.ClearBiddingInstructions {
		m.ClearBiddingInstructions()
	}
	if v := i.BiddingInstructions; v != nil {
		m.SetBiddingInstructions(*v)
	}
	if i.ClearCompetitorSituations {
		m.ClearCompetitorSituations()
	}
	if v := i.CompetitorSituations; v != nil {
		m.SetCompetitorSituations(*v)
	}
	if i.ClearCostEngineer {
		m.ClearCostEngineer()
	}
	if v := i.CostEngineer; v != nil {
		m.SetCostEngineer(*v)
	}
	if i.ClearTenderForm {
		m.ClearTenderForm()
	}
	if v := i.TenderForm; v != nil {
		m.SetTenderForm(*v)
	}
	if i.ClearContractForm {
		m.ClearContractForm()
	}
	if v := i.ContractForm; v != nil {
		m.SetContractForm(*v)
	}
	if i.ClearManagementCompany {
		m.ClearManagementCompany()
	}
	if v := i.ManagementCompany; v != nil {
		m.SetManagementCompany(*v)
	}
	if i.ClearTenderingAgency {
		m.ClearTenderingAgency()
	}
	if v := i.TenderingAgency; v != nil {
		m.SetTenderingAgency(*v)
	}
	if i.ClearBiddingDate {
		m.ClearBiddingDate()
	}
	if v := i.BiddingDate; v != nil {
		m.SetBiddingDate(*v)
	}
	if i.ClearFacadeConsultant {
		m.ClearFacadeConsultant()
	}
	if v := i.FacadeConsultant; v != nil {
		m.SetFacadeConsultant(*v)
	}
	if i.ClearDesignUnit {
		m.ClearDesignUnit()
	}
	if v := i.DesignUnit; v != nil {
		m.SetDesignUnit(*v)
	}
	if i.ClearConsultingFirm {
		m.ClearConsultingFirm()
	}
	if v := i.ConsultingFirm; v != nil {
		m.SetConsultingFirm(*v)
	}
	if v := i.KeyProject; v != nil {
		m.SetKeyProject(*v)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.FinderID; v != nil {
		m.SetFinderID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearFollowingSales {
		m.ClearFollowingSales()
	}
	if v := i.AddFollowingSaleIDs; len(v) > 0 {
		m.AddFollowingSaleIDs(v...)
	}
	if v := i.RemoveFollowingSaleIDs; len(v) > 0 {
		m.RemoveFollowingSaleIDs(v...)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTenderInput on the TenderUpdate builder.
func (c *TenderUpdate) SetInput(i UpdateTenderInput) *TenderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenderInput on the TenderUpdateOne builder.
func (c *TenderUpdateOne) SetInput(i UpdateTenderInput) *TenderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Name           string
	Email          string
	Username       string
	OpenID         string
	AvatarURL      string
	Disabled       *bool
	IsAdmin        *bool
	IsLeader       *bool
	AreaIDs        []xid.ID
	CustomerIDs    []xid.ID
	LeaderID       *xid.ID
	TeamMemberIDs  []xid.ID
	TenderIDs      []xid.ID
	VisitRecordIDs []xid.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	m.SetUsername(i.Username)
	m.SetOpenID(i.OpenID)
	m.SetAvatarURL(i.AvatarURL)
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsLeader; v != nil {
		m.SetIsLeader(*v)
	}
	if v := i.AreaIDs; len(v) > 0 {
		m.AddAreaIDs(v...)
	}
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if v := i.TeamMemberIDs; len(v) > 0 {
		m.AddTeamMemberIDs(v...)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt            *time.Time
	Name                 *string
	Email                *string
	Username             *string
	OpenID               *string
	AvatarURL            *string
	Disabled             *bool
	IsAdmin              *bool
	IsLeader             *bool
	ClearAreas           bool
	AddAreaIDs           []xid.ID
	RemoveAreaIDs        []xid.ID
	ClearCustomers       bool
	AddCustomerIDs       []xid.ID
	RemoveCustomerIDs    []xid.ID
	ClearLeader          bool
	LeaderID             *xid.ID
	ClearTeamMembers     bool
	AddTeamMemberIDs     []xid.ID
	RemoveTeamMemberIDs  []xid.ID
	ClearTenders         bool
	AddTenderIDs         []xid.ID
	RemoveTenderIDs      []xid.ID
	ClearVisitRecords    bool
	AddVisitRecordIDs    []xid.ID
	RemoveVisitRecordIDs []xid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.OpenID; v != nil {
		m.SetOpenID(*v)
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsLeader; v != nil {
		m.SetIsLeader(*v)
	}
	if i.ClearAreas {
		m.ClearAreas()
	}
	if v := i.AddAreaIDs; len(v) > 0 {
		m.AddAreaIDs(v...)
	}
	if v := i.RemoveAreaIDs; len(v) > 0 {
		m.RemoveAreaIDs(v...)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if i.ClearTeamMembers {
		m.ClearTeamMembers()
	}
	if v := i.AddTeamMemberIDs; len(v) > 0 {
		m.AddTeamMemberIDs(v...)
	}
	if v := i.RemoveTeamMemberIDs; len(v) > 0 {
		m.RemoveTeamMemberIDs(v...)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateVisitRecordInput represents a mutation input for creating visitrecords.
type CreateVisitRecordInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	VisitType     *int
	CommPeople    string
	CommContent   string
	NextStep      *string
	Date          time.Time
	TenderID      *xid.ID
	CustomerID    *xid.ID
	FollowUpByIDs []xid.ID
}

// Mutate applies the CreateVisitRecordInput on the VisitRecordMutation builder.
func (i *CreateVisitRecordInput) Mutate(m *VisitRecordMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.VisitType; v != nil {
		m.SetVisitType(*v)
	}
	m.SetCommPeople(i.CommPeople)
	m.SetCommContent(i.CommContent)
	if v := i.NextStep; v != nil {
		m.SetNextStep(*v)
	}
	m.SetDate(i.Date)
	if v := i.TenderID; v != nil {
		m.SetTenderID(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.FollowUpByIDs; len(v) > 0 {
		m.AddFollowUpByIDs(v...)
	}
}

// SetInput applies the change-set in the CreateVisitRecordInput on the VisitRecordCreate builder.
func (c *VisitRecordCreate) SetInput(i CreateVisitRecordInput) *VisitRecordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVisitRecordInput represents a mutation input for updating visitrecords.
type UpdateVisitRecordInput struct {
	UpdatedAt           *time.Time
	VisitType           *int
	CommPeople          *string
	CommContent         *string
	ClearNextStep       bool
	NextStep            *string
	Date                *time.Time
	ClearTender         bool
	TenderID            *xid.ID
	ClearCustomer       bool
	CustomerID          *xid.ID
	ClearFollowUpBys    bool
	AddFollowUpByIDs    []xid.ID
	RemoveFollowUpByIDs []xid.ID
}

// Mutate applies the UpdateVisitRecordInput on the VisitRecordMutation builder.
func (i *UpdateVisitRecordInput) Mutate(m *VisitRecordMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.VisitType; v != nil {
		m.SetVisitType(*v)
	}
	if v := i.CommPeople; v != nil {
		m.SetCommPeople(*v)
	}
	if v := i.CommContent; v != nil {
		m.SetCommContent(*v)
	}
	if i.ClearNextStep {
		m.ClearNextStep()
	}
	if v := i.NextStep; v != nil {
		m.SetNextStep(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if i.ClearTender {
		m.ClearTender()
	}
	if v := i.TenderID; v != nil {
		m.SetTenderID(*v)
	}
	if i.ClearCustomer {
		m.ClearCustomer()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearFollowUpBys {
		m.ClearFollowUpBys()
	}
	if v := i.AddFollowUpByIDs; len(v) > 0 {
		m.AddFollowUpByIDs(v...)
	}
	if v := i.RemoveFollowUpByIDs; len(v) > 0 {
		m.RemoveFollowUpByIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateVisitRecordInput on the VisitRecordUpdate builder.
func (c *VisitRecordUpdate) SetInput(i UpdateVisitRecordInput) *VisitRecordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVisitRecordInput on the VisitRecordUpdateOne builder.
func (c *VisitRecordUpdateOne) SetInput(i UpdateVisitRecordInput) *VisitRecordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
