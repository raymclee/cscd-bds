// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/schema/xid"
	"time"
)

// CreateAreaInput represents a mutation input for creating areas.
type CreateAreaInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	Name         string
	Code         string
	LeaderChatID *string
	SalesChatID  *string
	CustomerIDs  []xid.ID
	TenderIDs    []xid.ID
	UserIDs      []xid.ID
	ProvinceIDs  []xid.ID
}

// Mutate applies the CreateAreaInput on the AreaMutation builder.
func (i *CreateAreaInput) Mutate(m *AreaMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetCode(i.Code)
	if v := i.LeaderChatID; v != nil {
		m.SetLeaderChatID(*v)
	}
	if v := i.SalesChatID; v != nil {
		m.SetSalesChatID(*v)
	}
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.ProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAreaInput on the AreaCreate builder.
func (c *AreaCreate) SetInput(i CreateAreaInput) *AreaCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAreaInput represents a mutation input for updating areas.
type UpdateAreaInput struct {
	UpdatedAt         *time.Time
	Name              *string
	Code              *string
	ClearLeaderChatID bool
	LeaderChatID      *string
	ClearSalesChatID  bool
	SalesChatID       *string
	ClearCustomers    bool
	AddCustomerIDs    []xid.ID
	RemoveCustomerIDs []xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
	ClearUsers        bool
	AddUserIDs        []xid.ID
	RemoveUserIDs     []xid.ID
	ClearProvinces    bool
	AddProvinceIDs    []xid.ID
	RemoveProvinceIDs []xid.ID
}

// Mutate applies the UpdateAreaInput on the AreaMutation builder.
func (i *UpdateAreaInput) Mutate(m *AreaMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearLeaderChatID {
		m.ClearLeaderChatID()
	}
	if v := i.LeaderChatID; v != nil {
		m.SetLeaderChatID(*v)
	}
	if i.ClearSalesChatID {
		m.ClearSalesChatID()
	}
	if v := i.SalesChatID; v != nil {
		m.SetSalesChatID(*v)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearProvinces {
		m.ClearProvinces()
	}
	if v := i.AddProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
	if v := i.RemoveProvinceIDs; len(v) > 0 {
		m.RemoveProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAreaInput on the AreaUpdate builder.
func (c *AreaUpdate) SetInput(i UpdateAreaInput) *AreaUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAreaInput on the AreaUpdateOne builder.
func (c *AreaUpdateOne) SetInput(i UpdateAreaInput) *AreaUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCityInput represents a mutation input for creating cities.
type CreateCityInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	ProvCode    int
	Name        string
	DistrictIDs []xid.ID
	ProvinceID  xid.ID
	TenderIDs   []xid.ID
}

// Mutate applies the CreateCityInput on the CityMutation builder.
func (i *CreateCityInput) Mutate(m *CityMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetProvCode(i.ProvCode)
	m.SetName(i.Name)
	if v := i.DistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	m.SetProvinceID(i.ProvinceID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCityInput on the CityCreate builder.
func (c *CityCreate) SetInput(i CreateCityInput) *CityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCityInput represents a mutation input for updating cities.
type UpdateCityInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	ProvCode          *int
	Name              *string
	ClearDistricts    bool
	AddDistrictIDs    []xid.ID
	RemoveDistrictIDs []xid.ID
	ProvinceID        *xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
}

// Mutate applies the UpdateCityInput on the CityMutation builder.
func (i *UpdateCityInput) Mutate(m *CityMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.ProvCode; v != nil {
		m.SetProvCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDistricts {
		m.ClearDistricts()
	}
	if v := i.AddDistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.RemoveDistrictIDs; len(v) > 0 {
		m.RemoveDistrictIDs(v...)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCityInput on the CityUpdate builder.
func (c *CityUpdate) SetInput(i UpdateCityInput) *CityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCityInput on the CityUpdateOne builder.
func (c *CityUpdateOne) SetInput(i UpdateCityInput) *CityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCompetitorInput represents a mutation input for creating competitors.
type CreateCompetitorInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	ShortName    string
	Name         string
	WonTenderIDs []xid.ID
}

// Mutate applies the CreateCompetitorInput on the CompetitorMutation builder.
func (i *CreateCompetitorInput) Mutate(m *CompetitorMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetShortName(i.ShortName)
	m.SetName(i.Name)
	if v := i.WonTenderIDs; len(v) > 0 {
		m.AddWonTenderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCompetitorInput on the CompetitorCreate builder.
func (c *CompetitorCreate) SetInput(i CreateCompetitorInput) *CompetitorCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompetitorInput represents a mutation input for updating competitors.
type UpdateCompetitorInput struct {
	UpdatedAt          *time.Time
	ShortName          *string
	Name               *string
	ClearWonTenders    bool
	AddWonTenderIDs    []xid.ID
	RemoveWonTenderIDs []xid.ID
}

// Mutate applies the UpdateCompetitorInput on the CompetitorMutation builder.
func (i *UpdateCompetitorInput) Mutate(m *CompetitorMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ShortName; v != nil {
		m.SetShortName(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearWonTenders {
		m.ClearWonTenders()
	}
	if v := i.AddWonTenderIDs; len(v) > 0 {
		m.AddWonTenderIDs(v...)
	}
	if v := i.RemoveWonTenderIDs; len(v) > 0 {
		m.RemoveWonTenderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCompetitorInput on the CompetitorUpdate builder.
func (c *CompetitorUpdate) SetInput(i UpdateCompetitorInput) *CompetitorUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompetitorInput on the CompetitorUpdateOne builder.
func (c *CompetitorUpdateOne) SetInput(i UpdateCompetitorInput) *CompetitorUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryInput represents a mutation input for creating countries.
type CreateCountryInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	Name        string
	ProvinceIDs []xid.ID
}

// Mutate applies the CreateCountryInput on the CountryMutation builder.
func (i *CreateCountryInput) Mutate(m *CountryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetName(i.Name)
	if v := i.ProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCountryInput on the CountryCreate builder.
func (c *CountryCreate) SetInput(i CreateCountryInput) *CountryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryInput represents a mutation input for updating countries.
type UpdateCountryInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	Name              *string
	ClearProvinces    bool
	AddProvinceIDs    []xid.ID
	RemoveProvinceIDs []xid.ID
}

// Mutate applies the UpdateCountryInput on the CountryMutation builder.
func (i *UpdateCountryInput) Mutate(m *CountryMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProvinces {
		m.ClearProvinces()
	}
	if v := i.AddProvinceIDs; len(v) > 0 {
		m.AddProvinceIDs(v...)
	}
	if v := i.RemoveProvinceIDs; len(v) > 0 {
		m.RemoveProvinceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdate builder.
func (c *CountryUpdate) SetInput(i UpdateCountryInput) *CountryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdateOne builder.
func (c *CountryUpdateOne) SetInput(i UpdateCountryInput) *CountryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	Name                  string
	IsApproved            *bool
	OwnerType             *int
	Industry              *int
	Size                  *int
	ContactPerson         *string
	ContactPersonPosition *string
	ContactPersonPhone    *string
	ContactPersonEmail    *string
	AreaID                xid.ID
	TenderIDs             []xid.ID
	SalesID               *xid.ID
	CreatedByID           *xid.ID
	ApproverID            *xid.ID
	VisitRecordIDs        []xid.ID
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	if v := i.IsApproved; v != nil {
		m.SetIsApproved(*v)
	}
	if v := i.OwnerType; v != nil {
		m.SetOwnerType(*v)
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.ContactPerson; v != nil {
		m.SetContactPerson(*v)
	}
	if v := i.ContactPersonPosition; v != nil {
		m.SetContactPersonPosition(*v)
	}
	if v := i.ContactPersonPhone; v != nil {
		m.SetContactPersonPhone(*v)
	}
	if v := i.ContactPersonEmail; v != nil {
		m.SetContactPersonEmail(*v)
	}
	m.SetAreaID(i.AreaID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.SalesID; v != nil {
		m.SetSalesID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.ApproverID; v != nil {
		m.SetApproverID(*v)
	}
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	UpdatedAt                  *time.Time
	Name                       *string
	IsApproved                 *bool
	ClearOwnerType             bool
	OwnerType                  *int
	ClearIndustry              bool
	Industry                   *int
	ClearSize                  bool
	Size                       *int
	ClearContactPerson         bool
	ContactPerson              *string
	ClearContactPersonPosition bool
	ContactPersonPosition      *string
	ClearContactPersonPhone    bool
	ContactPersonPhone         *string
	ClearContactPersonEmail    bool
	ContactPersonEmail         *string
	AreaID                     *xid.ID
	ClearTenders               bool
	AddTenderIDs               []xid.ID
	RemoveTenderIDs            []xid.ID
	ClearSales                 bool
	SalesID                    *xid.ID
	ClearCreatedBy             bool
	CreatedByID                *xid.ID
	ClearApprover              bool
	ApproverID                 *xid.ID
	ClearVisitRecords          bool
	AddVisitRecordIDs          []xid.ID
	RemoveVisitRecordIDs       []xid.ID
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.IsApproved; v != nil {
		m.SetIsApproved(*v)
	}
	if i.ClearOwnerType {
		m.ClearOwnerType()
	}
	if v := i.OwnerType; v != nil {
		m.SetOwnerType(*v)
	}
	if i.ClearIndustry {
		m.ClearIndustry()
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if i.ClearSize {
		m.ClearSize()
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if i.ClearContactPerson {
		m.ClearContactPerson()
	}
	if v := i.ContactPerson; v != nil {
		m.SetContactPerson(*v)
	}
	if i.ClearContactPersonPosition {
		m.ClearContactPersonPosition()
	}
	if v := i.ContactPersonPosition; v != nil {
		m.SetContactPersonPosition(*v)
	}
	if i.ClearContactPersonPhone {
		m.ClearContactPersonPhone()
	}
	if v := i.ContactPersonPhone; v != nil {
		m.SetContactPersonPhone(*v)
	}
	if i.ClearContactPersonEmail {
		m.ClearContactPersonEmail()
	}
	if v := i.ContactPersonEmail; v != nil {
		m.SetContactPersonEmail(*v)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearSales {
		m.ClearSales()
	}
	if v := i.SalesID; v != nil {
		m.SetSalesID(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearApprover {
		m.ClearApprover()
	}
	if v := i.ApproverID; v != nil {
		m.SetApproverID(*v)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDistrictInput represents a mutation input for creating districts.
type CreateDistrictInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Adcode     int
	ProvCode   int
	CityCode   int
	Name       string
	ProvinceID xid.ID
	CityID     *xid.ID
	TenderIDs  []xid.ID
	PlotIDs    []xid.ID
}

// Mutate applies the CreateDistrictInput on the DistrictMutation builder.
func (i *CreateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetProvCode(i.ProvCode)
	m.SetCityCode(i.CityCode)
	m.SetName(i.Name)
	m.SetProvinceID(i.ProvinceID)
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.PlotIDs; len(v) > 0 {
		m.AddPlotIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDistrictInput on the DistrictCreate builder.
func (c *DistrictCreate) SetInput(i CreateDistrictInput) *DistrictCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDistrictInput represents a mutation input for updating districts.
type UpdateDistrictInput struct {
	UpdatedAt       *time.Time
	Adcode          *int
	ProvCode        *int
	CityCode        *int
	Name            *string
	ProvinceID      *xid.ID
	ClearCity       bool
	CityID          *xid.ID
	ClearTenders    bool
	AddTenderIDs    []xid.ID
	RemoveTenderIDs []xid.ID
	ClearPlots      bool
	AddPlotIDs      []xid.ID
	RemovePlotIDs   []xid.ID
}

// Mutate applies the UpdateDistrictInput on the DistrictMutation builder.
func (i *UpdateDistrictInput) Mutate(m *DistrictMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.ProvCode; v != nil {
		m.SetProvCode(*v)
	}
	if v := i.CityCode; v != nil {
		m.SetCityCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearPlots {
		m.ClearPlots()
	}
	if v := i.AddPlotIDs; len(v) > 0 {
		m.AddPlotIDs(v...)
	}
	if v := i.RemovePlotIDs; len(v) > 0 {
		m.RemovePlotIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdate builder.
func (c *DistrictUpdate) SetInput(i UpdateDistrictInput) *DistrictUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDistrictInput on the DistrictUpdateOne builder.
func (c *DistrictUpdateOne) SetInput(i UpdateDistrictInput) *DistrictUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePlotInput represents a mutation input for creating plots.
type CreatePlotInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Name       string
	ColorHex   string
	DistrictID xid.ID
}

// Mutate applies the CreatePlotInput on the PlotMutation builder.
func (i *CreatePlotInput) Mutate(m *PlotMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetColorHex(i.ColorHex)
	m.SetDistrictID(i.DistrictID)
}

// SetInput applies the change-set in the CreatePlotInput on the PlotCreate builder.
func (c *PlotCreate) SetInput(i CreatePlotInput) *PlotCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePlotInput represents a mutation input for updating plots.
type UpdatePlotInput struct {
	UpdatedAt  *time.Time
	Name       *string
	ColorHex   *string
	DistrictID *xid.ID
}

// Mutate applies the UpdatePlotInput on the PlotMutation builder.
func (i *UpdatePlotInput) Mutate(m *PlotMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ColorHex; v != nil {
		m.SetColorHex(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
}

// SetInput applies the change-set in the UpdatePlotInput on the PlotUpdate builder.
func (c *PlotUpdate) SetInput(i UpdatePlotInput) *PlotUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePlotInput on the PlotUpdateOne builder.
func (c *PlotUpdateOne) SetInput(i UpdatePlotInput) *PlotUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePotentialTenderInput represents a mutation input for creating potentialtenders.
type CreatePotentialTenderInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreatePotentialTenderInput on the PotentialTenderMutation builder.
func (i *CreatePotentialTenderInput) Mutate(m *PotentialTenderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreatePotentialTenderInput on the PotentialTenderCreate builder.
func (c *PotentialTenderCreate) SetInput(i CreatePotentialTenderInput) *PotentialTenderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePotentialTenderInput represents a mutation input for updating potentialtenders.
type UpdatePotentialTenderInput struct {
	UpdatedAt *time.Time
}

// Mutate applies the UpdatePotentialTenderInput on the PotentialTenderMutation builder.
func (i *UpdatePotentialTenderInput) Mutate(m *PotentialTenderMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdatePotentialTenderInput on the PotentialTenderUpdate builder.
func (c *PotentialTenderUpdate) SetInput(i UpdatePotentialTenderInput) *PotentialTenderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePotentialTenderInput on the PotentialTenderUpdateOne builder.
func (c *PotentialTenderUpdateOne) SetInput(i UpdatePotentialTenderInput) *PotentialTenderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	UpdatedAt                                    *time.Time
	Code                                         *string
	ClearManager                                 bool
	Manager                                      *string
	ClearName                                    bool
	Name                                         *string
	ClearOwner                                   bool
	Owner                                        *string
	ClearJzs                                     bool
	Jzs                                          *string
	ClearMcn                                     bool
	Mcn                                          *string
	ClearConsultant                              bool
	Consultant                                   *string
	ClearAreas                                   bool
	Areas                                        *string
	ClearStartDate                               bool
	StartDate                                    *time.Time
	ClearFsDate                                  bool
	FsDate                                       *time.Time
	ClearOpDate                                  bool
	OpDate                                       *time.Time
	ClearEndDate                                 bool
	EndDate                                      *time.Time
	ClearMntyr                                   bool
	Mntyr                                        *string
	ClearConType                                 bool
	ConType                                      *string
	IsFinished                                   *bool
	ClearCje                                     bool
	Cje                                          *float64
	ClearYye                                     bool
	Yye                                          *float64
	ClearXjl                                     bool
	Xjl                                          *float64
	ClearXmglfYs                                 bool
	XmglfYs                                      *float64
	ClearXmglfLj                                 bool
	XmglfLj                                      *float64
	ClearXmsjf                                   bool
	Xmsjf                                        *float64
	ClearXmfzr                                   bool
	Xmfzr                                        *string
	ClearOwnerApplyAmount                        bool
	OwnerApplyAmount                             *float64
	ClearOwnerApplyCount                         bool
	OwnerApplyCount                              *int
	ClearOwnerApproveAmount                      bool
	OwnerApproveAmount                           *float64
	ClearOwnerApproveCount                       bool
	OwnerApproveCount                            *int
	ClearContractorApplyAmount                   bool
	ContractorApplyAmount                        *float64
	ClearContractorApplyCount                    bool
	ContractorApplyCount                         *int
	ClearContractorApproveAmount                 bool
	ContractorApproveAmount                      *float64
	ClearContractorApproveCount                  bool
	ContractorApproveCount                       *int
	ClearInstallProgress                         bool
	InstallProgress                              *float64
	ClearEffectiveContractAmount                 bool
	EffectiveContractAmount                      *float64
	ClearVaApplyAmount                           bool
	VaApplyAmount                                *float64
	ClearVaApproveAmount                         bool
	VaApproveAmount                              *float64
	ClearAccumulatedStatutoryDeductions          bool
	AccumulatedStatutoryDeductions               *float64
	ClearAccumulatedNonStatutoryDeductions       bool
	AccumulatedNonStatutoryDeductions            *float64
	ClearAccumulatedStatutoryDeductionsPeriod    bool
	AccumulatedStatutoryDeductionsPeriod         *float64
	ClearAccumulatedNonStatutoryDeductionsPeriod bool
	AccumulatedNonStatutoryDeductionsPeriod      *float64
	ClearTotalContractAmount                     bool
	TotalContractAmount                          *float64
	ClearAluminumPlateBudgetPercentage           bool
	AluminumPlateBudgetPercentage                *float64
	ClearAluminumBudgetPercentage                bool
	AluminumBudgetPercentage                     *float64
	ClearGlassBudgetPercentage                   bool
	GlassBudgetPercentage                        *float64
	ClearIronBudgetPercentage                    bool
	IronBudgetPercentage                         *float64
	ClearMilestonePlanYear                       bool
	MilestonePlanYear                            *int
	ClearMilestonePlanMonth                      bool
	MilestonePlanMonth                           *int
	ClearMilestoneDoneYear                       bool
	MilestoneDoneYear                            *int
	ClearMilestoneDoneMonth                      bool
	MilestoneDoneMonth                           *int
	ClearPmArea                                  bool
	PmArea                                       *float64
	ClearPmYearTarget                            bool
	PmYearTarget                                 *float64
	ClearPmMonthTarget                           bool
	PmMonthTarget                                *float64
	ClearPmYearActual                            bool
	PmYearActual                                 *float64
	ClearPmMonthActual                           bool
	PmMonthActual                                *float64
	ClearPmTotal                                 bool
	PmTotal                                      *float64
	ClearPmYesterday                             bool
	PmYesterday                                  *float64
	ClearUnitInventoryTotal                      bool
	UnitInventoryTotal                           *float64
	ClearUnitComponentTotal                      bool
	UnitComponentTotal                           *float64
	ClearUnitComponentProduction                 bool
	UnitComponentProduction                      *float64
	ClearUnitComponentInstallation               bool
	UnitComponentInstallation                    *float64
	ClearMaterialLoss                            bool
	MaterialLoss                                 *float64
	ClearDesignRatedWeight                       bool
	DesignRatedWeight                            *float64
	ClearProcessingWeight                        bool
	ProcessingWeight                             *float64
	ClearItemStockWeight                         bool
	ItemStockWeight                              *float64
	ClearPalletsInStock                          bool
	PalletsInStock                               *float64
	ClearPartsInStock                            bool
	PartsInStock                                 *float64
	ClearQualityScore                            bool
	QualityScore                                 *float64
	ClearQualityRanking                          bool
	QualityRanking                               *float64
	ClearBulkMaterialsTotalOrderQuantity         bool
	BulkMaterialsTotalOrderQuantity              *float64
	ClearBulkMaterialsCompletedQuantity          bool
	BulkMaterialsCompletedQuantity               *float64
	ClearBulkMaterialsUncompletedQuantity        bool
	BulkMaterialsUncompletedQuantity             *float64
	ClearPlanTotalCount                          bool
	PlanTotalCount                               *int
	ClearPlanOverdueCount                        bool
	PlanOverdueCount                             *int
	ClearPlanOverdueMonthCount                   bool
	PlanOverdueMonthCount                        *int
	ClearDiagramBdFinishCount                    bool
	DiagramBdFinishCount                         *int
	ClearDiagramBdTotalCount                     bool
	DiagramBdTotalCount                          *int
	ClearDiagramConstructionFinishCount          bool
	DiagramConstructionFinishCount               *int
	ClearDiagramConstructionTotalCount           bool
	DiagramConstructionTotalCount                *int
	ClearDiagramProcessingFinishCount            bool
	DiagramProcessingFinishCount                 *int
	ClearDiagramProcessingTotalCount             bool
	DiagramProcessingTotalCount                  *int
	ClearDiagramCApprovalRatioNumerator          bool
	DiagramCApprovalRatioNumerator               *int
	ClearDiagramCApprovalRatioDenominator        bool
	DiagramCApprovalRatioDenominator             *int
	ClearVos                                     bool
	AddVoIDs                                     []xid.ID
	RemoveVoIDs                                  []xid.ID
	ClearProjectStaffs                           bool
	AddProjectStaffIDs                           []xid.ID
	RemoveProjectStaffIDs                        []xid.ID
	ClearUsers                                   bool
	AddUserIDs                                   []xid.ID
	RemoveUserIDs                                []xid.ID
}

// Mutate applies the UpdateProjectInput on the ProjectMutation builder.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearManager {
		m.ClearManager()
	}
	if v := i.Manager; v != nil {
		m.SetManager(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.Owner; v != nil {
		m.SetOwner(*v)
	}
	if i.ClearJzs {
		m.ClearJzs()
	}
	if v := i.Jzs; v != nil {
		m.SetJzs(*v)
	}
	if i.ClearMcn {
		m.ClearMcn()
	}
	if v := i.Mcn; v != nil {
		m.SetMcn(*v)
	}
	if i.ClearConsultant {
		m.ClearConsultant()
	}
	if v := i.Consultant; v != nil {
		m.SetConsultant(*v)
	}
	if i.ClearAreas {
		m.ClearAreas()
	}
	if v := i.Areas; v != nil {
		m.SetAreas(*v)
	}
	if i.ClearStartDate {
		m.ClearStartDate()
	}
	if v := i.StartDate; v != nil {
		m.SetStartDate(*v)
	}
	if i.ClearFsDate {
		m.ClearFsDate()
	}
	if v := i.FsDate; v != nil {
		m.SetFsDate(*v)
	}
	if i.ClearOpDate {
		m.ClearOpDate()
	}
	if v := i.OpDate; v != nil {
		m.SetOpDate(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if i.ClearMntyr {
		m.ClearMntyr()
	}
	if v := i.Mntyr; v != nil {
		m.SetMntyr(*v)
	}
	if i.ClearConType {
		m.ClearConType()
	}
	if v := i.ConType; v != nil {
		m.SetConType(*v)
	}
	if v := i.IsFinished; v != nil {
		m.SetIsFinished(*v)
	}
	if i.ClearCje {
		m.ClearCje()
	}
	if v := i.Cje; v != nil {
		m.SetCje(*v)
	}
	if i.ClearYye {
		m.ClearYye()
	}
	if v := i.Yye; v != nil {
		m.SetYye(*v)
	}
	if i.ClearXjl {
		m.ClearXjl()
	}
	if v := i.Xjl; v != nil {
		m.SetXjl(*v)
	}
	if i.ClearXmglfYs {
		m.ClearXmglfYs()
	}
	if v := i.XmglfYs; v != nil {
		m.SetXmglfYs(*v)
	}
	if i.ClearXmglfLj {
		m.ClearXmglfLj()
	}
	if v := i.XmglfLj; v != nil {
		m.SetXmglfLj(*v)
	}
	if i.ClearXmsjf {
		m.ClearXmsjf()
	}
	if v := i.Xmsjf; v != nil {
		m.SetXmsjf(*v)
	}
	if i.ClearXmfzr {
		m.ClearXmfzr()
	}
	if v := i.Xmfzr; v != nil {
		m.SetXmfzr(*v)
	}
	if i.ClearOwnerApplyAmount {
		m.ClearOwnerApplyAmount()
	}
	if v := i.OwnerApplyAmount; v != nil {
		m.SetOwnerApplyAmount(*v)
	}
	if i.ClearOwnerApplyCount {
		m.ClearOwnerApplyCount()
	}
	if v := i.OwnerApplyCount; v != nil {
		m.SetOwnerApplyCount(*v)
	}
	if i.ClearOwnerApproveAmount {
		m.ClearOwnerApproveAmount()
	}
	if v := i.OwnerApproveAmount; v != nil {
		m.SetOwnerApproveAmount(*v)
	}
	if i.ClearOwnerApproveCount {
		m.ClearOwnerApproveCount()
	}
	if v := i.OwnerApproveCount; v != nil {
		m.SetOwnerApproveCount(*v)
	}
	if i.ClearContractorApplyAmount {
		m.ClearContractorApplyAmount()
	}
	if v := i.ContractorApplyAmount; v != nil {
		m.SetContractorApplyAmount(*v)
	}
	if i.ClearContractorApplyCount {
		m.ClearContractorApplyCount()
	}
	if v := i.ContractorApplyCount; v != nil {
		m.SetContractorApplyCount(*v)
	}
	if i.ClearContractorApproveAmount {
		m.ClearContractorApproveAmount()
	}
	if v := i.ContractorApproveAmount; v != nil {
		m.SetContractorApproveAmount(*v)
	}
	if i.ClearContractorApproveCount {
		m.ClearContractorApproveCount()
	}
	if v := i.ContractorApproveCount; v != nil {
		m.SetContractorApproveCount(*v)
	}
	if i.ClearInstallProgress {
		m.ClearInstallProgress()
	}
	if v := i.InstallProgress; v != nil {
		m.SetInstallProgress(*v)
	}
	if i.ClearEffectiveContractAmount {
		m.ClearEffectiveContractAmount()
	}
	if v := i.EffectiveContractAmount; v != nil {
		m.SetEffectiveContractAmount(*v)
	}
	if i.ClearVaApplyAmount {
		m.ClearVaApplyAmount()
	}
	if v := i.VaApplyAmount; v != nil {
		m.SetVaApplyAmount(*v)
	}
	if i.ClearVaApproveAmount {
		m.ClearVaApproveAmount()
	}
	if v := i.VaApproveAmount; v != nil {
		m.SetVaApproveAmount(*v)
	}
	if i.ClearAccumulatedStatutoryDeductions {
		m.ClearAccumulatedStatutoryDeductions()
	}
	if v := i.AccumulatedStatutoryDeductions; v != nil {
		m.SetAccumulatedStatutoryDeductions(*v)
	}
	if i.ClearAccumulatedNonStatutoryDeductions {
		m.ClearAccumulatedNonStatutoryDeductions()
	}
	if v := i.AccumulatedNonStatutoryDeductions; v != nil {
		m.SetAccumulatedNonStatutoryDeductions(*v)
	}
	if i.ClearAccumulatedStatutoryDeductionsPeriod {
		m.ClearAccumulatedStatutoryDeductionsPeriod()
	}
	if v := i.AccumulatedStatutoryDeductionsPeriod; v != nil {
		m.SetAccumulatedStatutoryDeductionsPeriod(*v)
	}
	if i.ClearAccumulatedNonStatutoryDeductionsPeriod {
		m.ClearAccumulatedNonStatutoryDeductionsPeriod()
	}
	if v := i.AccumulatedNonStatutoryDeductionsPeriod; v != nil {
		m.SetAccumulatedNonStatutoryDeductionsPeriod(*v)
	}
	if i.ClearTotalContractAmount {
		m.ClearTotalContractAmount()
	}
	if v := i.TotalContractAmount; v != nil {
		m.SetTotalContractAmount(*v)
	}
	if i.ClearAluminumPlateBudgetPercentage {
		m.ClearAluminumPlateBudgetPercentage()
	}
	if v := i.AluminumPlateBudgetPercentage; v != nil {
		m.SetAluminumPlateBudgetPercentage(*v)
	}
	if i.ClearAluminumBudgetPercentage {
		m.ClearAluminumBudgetPercentage()
	}
	if v := i.AluminumBudgetPercentage; v != nil {
		m.SetAluminumBudgetPercentage(*v)
	}
	if i.ClearGlassBudgetPercentage {
		m.ClearGlassBudgetPercentage()
	}
	if v := i.GlassBudgetPercentage; v != nil {
		m.SetGlassBudgetPercentage(*v)
	}
	if i.ClearIronBudgetPercentage {
		m.ClearIronBudgetPercentage()
	}
	if v := i.IronBudgetPercentage; v != nil {
		m.SetIronBudgetPercentage(*v)
	}
	if i.ClearMilestonePlanYear {
		m.ClearMilestonePlanYear()
	}
	if v := i.MilestonePlanYear; v != nil {
		m.SetMilestonePlanYear(*v)
	}
	if i.ClearMilestonePlanMonth {
		m.ClearMilestonePlanMonth()
	}
	if v := i.MilestonePlanMonth; v != nil {
		m.SetMilestonePlanMonth(*v)
	}
	if i.ClearMilestoneDoneYear {
		m.ClearMilestoneDoneYear()
	}
	if v := i.MilestoneDoneYear; v != nil {
		m.SetMilestoneDoneYear(*v)
	}
	if i.ClearMilestoneDoneMonth {
		m.ClearMilestoneDoneMonth()
	}
	if v := i.MilestoneDoneMonth; v != nil {
		m.SetMilestoneDoneMonth(*v)
	}
	if i.ClearPmArea {
		m.ClearPmArea()
	}
	if v := i.PmArea; v != nil {
		m.SetPmArea(*v)
	}
	if i.ClearPmYearTarget {
		m.ClearPmYearTarget()
	}
	if v := i.PmYearTarget; v != nil {
		m.SetPmYearTarget(*v)
	}
	if i.ClearPmMonthTarget {
		m.ClearPmMonthTarget()
	}
	if v := i.PmMonthTarget; v != nil {
		m.SetPmMonthTarget(*v)
	}
	if i.ClearPmYearActual {
		m.ClearPmYearActual()
	}
	if v := i.PmYearActual; v != nil {
		m.SetPmYearActual(*v)
	}
	if i.ClearPmMonthActual {
		m.ClearPmMonthActual()
	}
	if v := i.PmMonthActual; v != nil {
		m.SetPmMonthActual(*v)
	}
	if i.ClearPmTotal {
		m.ClearPmTotal()
	}
	if v := i.PmTotal; v != nil {
		m.SetPmTotal(*v)
	}
	if i.ClearPmYesterday {
		m.ClearPmYesterday()
	}
	if v := i.PmYesterday; v != nil {
		m.SetPmYesterday(*v)
	}
	if i.ClearUnitInventoryTotal {
		m.ClearUnitInventoryTotal()
	}
	if v := i.UnitInventoryTotal; v != nil {
		m.SetUnitInventoryTotal(*v)
	}
	if i.ClearUnitComponentTotal {
		m.ClearUnitComponentTotal()
	}
	if v := i.UnitComponentTotal; v != nil {
		m.SetUnitComponentTotal(*v)
	}
	if i.ClearUnitComponentProduction {
		m.ClearUnitComponentProduction()
	}
	if v := i.UnitComponentProduction; v != nil {
		m.SetUnitComponentProduction(*v)
	}
	if i.ClearUnitComponentInstallation {
		m.ClearUnitComponentInstallation()
	}
	if v := i.UnitComponentInstallation; v != nil {
		m.SetUnitComponentInstallation(*v)
	}
	if i.ClearMaterialLoss {
		m.ClearMaterialLoss()
	}
	if v := i.MaterialLoss; v != nil {
		m.SetMaterialLoss(*v)
	}
	if i.ClearDesignRatedWeight {
		m.ClearDesignRatedWeight()
	}
	if v := i.DesignRatedWeight; v != nil {
		m.SetDesignRatedWeight(*v)
	}
	if i.ClearProcessingWeight {
		m.ClearProcessingWeight()
	}
	if v := i.ProcessingWeight; v != nil {
		m.SetProcessingWeight(*v)
	}
	if i.ClearItemStockWeight {
		m.ClearItemStockWeight()
	}
	if v := i.ItemStockWeight; v != nil {
		m.SetItemStockWeight(*v)
	}
	if i.ClearPalletsInStock {
		m.ClearPalletsInStock()
	}
	if v := i.PalletsInStock; v != nil {
		m.SetPalletsInStock(*v)
	}
	if i.ClearPartsInStock {
		m.ClearPartsInStock()
	}
	if v := i.PartsInStock; v != nil {
		m.SetPartsInStock(*v)
	}
	if i.ClearQualityScore {
		m.ClearQualityScore()
	}
	if v := i.QualityScore; v != nil {
		m.SetQualityScore(*v)
	}
	if i.ClearQualityRanking {
		m.ClearQualityRanking()
	}
	if v := i.QualityRanking; v != nil {
		m.SetQualityRanking(*v)
	}
	if i.ClearBulkMaterialsTotalOrderQuantity {
		m.ClearBulkMaterialsTotalOrderQuantity()
	}
	if v := i.BulkMaterialsTotalOrderQuantity; v != nil {
		m.SetBulkMaterialsTotalOrderQuantity(*v)
	}
	if i.ClearBulkMaterialsCompletedQuantity {
		m.ClearBulkMaterialsCompletedQuantity()
	}
	if v := i.BulkMaterialsCompletedQuantity; v != nil {
		m.SetBulkMaterialsCompletedQuantity(*v)
	}
	if i.ClearBulkMaterialsUncompletedQuantity {
		m.ClearBulkMaterialsUncompletedQuantity()
	}
	if v := i.BulkMaterialsUncompletedQuantity; v != nil {
		m.SetBulkMaterialsUncompletedQuantity(*v)
	}
	if i.ClearPlanTotalCount {
		m.ClearPlanTotalCount()
	}
	if v := i.PlanTotalCount; v != nil {
		m.SetPlanTotalCount(*v)
	}
	if i.ClearPlanOverdueCount {
		m.ClearPlanOverdueCount()
	}
	if v := i.PlanOverdueCount; v != nil {
		m.SetPlanOverdueCount(*v)
	}
	if i.ClearPlanOverdueMonthCount {
		m.ClearPlanOverdueMonthCount()
	}
	if v := i.PlanOverdueMonthCount; v != nil {
		m.SetPlanOverdueMonthCount(*v)
	}
	if i.ClearDiagramBdFinishCount {
		m.ClearDiagramBdFinishCount()
	}
	if v := i.DiagramBdFinishCount; v != nil {
		m.SetDiagramBdFinishCount(*v)
	}
	if i.ClearDiagramBdTotalCount {
		m.ClearDiagramBdTotalCount()
	}
	if v := i.DiagramBdTotalCount; v != nil {
		m.SetDiagramBdTotalCount(*v)
	}
	if i.ClearDiagramConstructionFinishCount {
		m.ClearDiagramConstructionFinishCount()
	}
	if v := i.DiagramConstructionFinishCount; v != nil {
		m.SetDiagramConstructionFinishCount(*v)
	}
	if i.ClearDiagramConstructionTotalCount {
		m.ClearDiagramConstructionTotalCount()
	}
	if v := i.DiagramConstructionTotalCount; v != nil {
		m.SetDiagramConstructionTotalCount(*v)
	}
	if i.ClearDiagramProcessingFinishCount {
		m.ClearDiagramProcessingFinishCount()
	}
	if v := i.DiagramProcessingFinishCount; v != nil {
		m.SetDiagramProcessingFinishCount(*v)
	}
	if i.ClearDiagramProcessingTotalCount {
		m.ClearDiagramProcessingTotalCount()
	}
	if v := i.DiagramProcessingTotalCount; v != nil {
		m.SetDiagramProcessingTotalCount(*v)
	}
	if i.ClearDiagramCApprovalRatioNumerator {
		m.ClearDiagramCApprovalRatioNumerator()
	}
	if v := i.DiagramCApprovalRatioNumerator; v != nil {
		m.SetDiagramCApprovalRatioNumerator(*v)
	}
	if i.ClearDiagramCApprovalRatioDenominator {
		m.ClearDiagramCApprovalRatioDenominator()
	}
	if v := i.DiagramCApprovalRatioDenominator; v != nil {
		m.SetDiagramCApprovalRatioDenominator(*v)
	}
	if i.ClearVos {
		m.ClearVos()
	}
	if v := i.AddVoIDs; len(v) > 0 {
		m.AddVoIDs(v...)
	}
	if v := i.RemoveVoIDs; len(v) > 0 {
		m.RemoveVoIDs(v...)
	}
	if i.ClearProjectStaffs {
		m.ClearProjectStaffs()
	}
	if v := i.AddProjectStaffIDs; len(v) > 0 {
		m.AddProjectStaffIDs(v...)
	}
	if v := i.RemoveProjectStaffIDs; len(v) > 0 {
		m.RemoveProjectStaffIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdate builder.
func (c *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProjectInput on the ProjectUpdateOne builder.
func (c *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProvinceInput represents a mutation input for creating provinces.
type CreateProvinceInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Adcode      int
	Name        string
	DistrictIDs []xid.ID
	CityIDs     []xid.ID
	CountryID   xid.ID
	TenderIDs   []xid.ID
	AreaID      *xid.ID
}

// Mutate applies the CreateProvinceInput on the ProvinceMutation builder.
func (i *CreateProvinceInput) Mutate(m *ProvinceMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAdcode(i.Adcode)
	m.SetName(i.Name)
	if v := i.DistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.CityIDs; len(v) > 0 {
		m.AddCityIDs(v...)
	}
	m.SetCountryID(i.CountryID)
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
}

// SetInput applies the change-set in the CreateProvinceInput on the ProvinceCreate builder.
func (c *ProvinceCreate) SetInput(i CreateProvinceInput) *ProvinceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProvinceInput represents a mutation input for updating provinces.
type UpdateProvinceInput struct {
	UpdatedAt         *time.Time
	Adcode            *int
	Name              *string
	ClearDistricts    bool
	AddDistrictIDs    []xid.ID
	RemoveDistrictIDs []xid.ID
	ClearCities       bool
	AddCityIDs        []xid.ID
	RemoveCityIDs     []xid.ID
	CountryID         *xid.ID
	ClearTenders      bool
	AddTenderIDs      []xid.ID
	RemoveTenderIDs   []xid.ID
	ClearArea         bool
	AreaID            *xid.ID
}

// Mutate applies the UpdateProvinceInput on the ProvinceMutation builder.
func (i *UpdateProvinceInput) Mutate(m *ProvinceMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Adcode; v != nil {
		m.SetAdcode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDistricts {
		m.ClearDistricts()
	}
	if v := i.AddDistrictIDs; len(v) > 0 {
		m.AddDistrictIDs(v...)
	}
	if v := i.RemoveDistrictIDs; len(v) > 0 {
		m.RemoveDistrictIDs(v...)
	}
	if i.ClearCities {
		m.ClearCities()
	}
	if v := i.AddCityIDs; len(v) > 0 {
		m.AddCityIDs(v...)
	}
	if v := i.RemoveCityIDs; len(v) > 0 {
		m.RemoveCityIDs(v...)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearArea {
		m.ClearArea()
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
}

// SetInput applies the change-set in the UpdateProvinceInput on the ProvinceUpdate builder.
func (c *ProvinceUpdate) SetInput(i UpdateProvinceInput) *ProvinceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProvinceInput on the ProvinceUpdateOne builder.
func (c *ProvinceUpdateOne) SetInput(i UpdateProvinceInput) *ProvinceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenderInput represents a mutation input for creating tenders.
type CreateTenderInput struct {
	CreatedAt                            *time.Time
	UpdatedAt                            *time.Time
	Code                                 string
	Status                               *int
	IsApproved                           *bool
	Name                                 string
	EstimatedAmount                      *float64
	TenderDate                           *time.Time
	Classify                             *int
	DiscoveryDate                        time.Time
	Address                              *string
	FullAddress                          *string
	Contractor                           *string
	LevelInvolved                        *int
	SizeAndValueRating                   *int
	SizeAndValueRatingOverview           *string
	CreditAndPaymentRating               *int
	CreditAndPaymentRatingOverview       *string
	TimeLimitRating                      *int
	TimeLimitRatingOverview              *string
	CustomerRelationshipRating           *int
	CustomerRelationshipRatingOverview   *string
	CompetitivePartnershipRating         *int
	CompetitivePartnershipRatingOverview *string
	PrepareToBid                         *bool
	ProjectCode                          *string
	ProjectType                          *string
	ProjectDefinition                    *string
	EstimatedProjectStartDate            *time.Time
	EstimatedProjectEndDate              *time.Time
	Attachements                         []string
	Remark                               *string
	Images                               []string
	TenderSituations                     *string
	OwnerSituations                      *string
	BiddingInstructions                  *string
	CompetitorSituations                 *string
	CostEngineer                         *string
	TenderForm                           *string
	ContractForm                         *string
	ManagementCompany                    *string
	TenderingAgency                      *string
	BiddingDate                          *time.Time
	FacadeConsultant                     *string
	DesignUnit                           *string
	ConsultingFirm                       *string
	KeyProject                           *bool
	CurrentProgress                      *string
	TenderWinCompany                     *string
	TenderCode                           *string
	Architect                            *string
	Developer                            *string
	TenderClosingDate                    *time.Time
	ConstructionArea                     *string
	TenderWinDate                        *time.Time
	TenderWinAmount                      *float64
	LastTenderAmount                     *float64
	AreaID                               xid.ID
	CustomerID                           *xid.ID
	FinderID                             *xid.ID
	CreatedByID                          *xid.ID
	FollowingSaleIDs                     []xid.ID
	ProvinceID                           *xid.ID
	CityID                               *xid.ID
	DistrictID                           *xid.ID
	VisitRecordIDs                       []xid.ID
	CompetitorID                         *xid.ID
	ApproverID                           *xid.ID
}

// Mutate applies the CreateTenderInput on the TenderMutation builder.
func (i *CreateTenderInput) Mutate(m *TenderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCode(i.Code)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.IsApproved; v != nil {
		m.SetIsApproved(*v)
	}
	m.SetName(i.Name)
	if v := i.EstimatedAmount; v != nil {
		m.SetEstimatedAmount(*v)
	}
	if v := i.TenderDate; v != nil {
		m.SetTenderDate(*v)
	}
	if v := i.Classify; v != nil {
		m.SetClassify(*v)
	}
	m.SetDiscoveryDate(i.DiscoveryDate)
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.FullAddress; v != nil {
		m.SetFullAddress(*v)
	}
	if v := i.Contractor; v != nil {
		m.SetContractor(*v)
	}
	if v := i.LevelInvolved; v != nil {
		m.SetLevelInvolved(*v)
	}
	if v := i.SizeAndValueRating; v != nil {
		m.SetSizeAndValueRating(*v)
	}
	if v := i.SizeAndValueRatingOverview; v != nil {
		m.SetSizeAndValueRatingOverview(*v)
	}
	if v := i.CreditAndPaymentRating; v != nil {
		m.SetCreditAndPaymentRating(*v)
	}
	if v := i.CreditAndPaymentRatingOverview; v != nil {
		m.SetCreditAndPaymentRatingOverview(*v)
	}
	if v := i.TimeLimitRating; v != nil {
		m.SetTimeLimitRating(*v)
	}
	if v := i.TimeLimitRatingOverview; v != nil {
		m.SetTimeLimitRatingOverview(*v)
	}
	if v := i.CustomerRelationshipRating; v != nil {
		m.SetCustomerRelationshipRating(*v)
	}
	if v := i.CustomerRelationshipRatingOverview; v != nil {
		m.SetCustomerRelationshipRatingOverview(*v)
	}
	if v := i.CompetitivePartnershipRating; v != nil {
		m.SetCompetitivePartnershipRating(*v)
	}
	if v := i.CompetitivePartnershipRatingOverview; v != nil {
		m.SetCompetitivePartnershipRatingOverview(*v)
	}
	if v := i.PrepareToBid; v != nil {
		m.SetPrepareToBid(*v)
	}
	if v := i.ProjectCode; v != nil {
		m.SetProjectCode(*v)
	}
	if v := i.ProjectType; v != nil {
		m.SetProjectType(*v)
	}
	if v := i.ProjectDefinition; v != nil {
		m.SetProjectDefinition(*v)
	}
	if v := i.EstimatedProjectStartDate; v != nil {
		m.SetEstimatedProjectStartDate(*v)
	}
	if v := i.EstimatedProjectEndDate; v != nil {
		m.SetEstimatedProjectEndDate(*v)
	}
	if v := i.Attachements; v != nil {
		m.SetAttachements(v)
	}
	if v := i.Remark; v != nil {
		m.SetRemark(*v)
	}
	if v := i.Images; v != nil {
		m.SetImages(v)
	}
	if v := i.TenderSituations; v != nil {
		m.SetTenderSituations(*v)
	}
	if v := i.OwnerSituations; v != nil {
		m.SetOwnerSituations(*v)
	}
	if v := i.BiddingInstructions; v != nil {
		m.SetBiddingInstructions(*v)
	}
	if v := i.CompetitorSituations; v != nil {
		m.SetCompetitorSituations(*v)
	}
	if v := i.CostEngineer; v != nil {
		m.SetCostEngineer(*v)
	}
	if v := i.TenderForm; v != nil {
		m.SetTenderForm(*v)
	}
	if v := i.ContractForm; v != nil {
		m.SetContractForm(*v)
	}
	if v := i.ManagementCompany; v != nil {
		m.SetManagementCompany(*v)
	}
	if v := i.TenderingAgency; v != nil {
		m.SetTenderingAgency(*v)
	}
	if v := i.BiddingDate; v != nil {
		m.SetBiddingDate(*v)
	}
	if v := i.FacadeConsultant; v != nil {
		m.SetFacadeConsultant(*v)
	}
	if v := i.DesignUnit; v != nil {
		m.SetDesignUnit(*v)
	}
	if v := i.ConsultingFirm; v != nil {
		m.SetConsultingFirm(*v)
	}
	if v := i.KeyProject; v != nil {
		m.SetKeyProject(*v)
	}
	if v := i.CurrentProgress; v != nil {
		m.SetCurrentProgress(*v)
	}
	if v := i.TenderWinCompany; v != nil {
		m.SetTenderWinCompany(*v)
	}
	if v := i.TenderCode; v != nil {
		m.SetTenderCode(*v)
	}
	if v := i.Architect; v != nil {
		m.SetArchitect(*v)
	}
	if v := i.Developer; v != nil {
		m.SetDeveloper(*v)
	}
	if v := i.TenderClosingDate; v != nil {
		m.SetTenderClosingDate(*v)
	}
	if v := i.ConstructionArea; v != nil {
		m.SetConstructionArea(*v)
	}
	if v := i.TenderWinDate; v != nil {
		m.SetTenderWinDate(*v)
	}
	if v := i.TenderWinAmount; v != nil {
		m.SetTenderWinAmount(*v)
	}
	if v := i.LastTenderAmount; v != nil {
		m.SetLastTenderAmount(*v)
	}
	m.SetAreaID(i.AreaID)
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if v := i.FinderID; v != nil {
		m.SetFinderID(*v)
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if v := i.FollowingSaleIDs; len(v) > 0 {
		m.AddFollowingSaleIDs(v...)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.CompetitorID; v != nil {
		m.SetCompetitorID(*v)
	}
	if v := i.ApproverID; v != nil {
		m.SetApproverID(*v)
	}
}

// SetInput applies the change-set in the CreateTenderInput on the TenderCreate builder.
func (c *TenderCreate) SetInput(i CreateTenderInput) *TenderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenderInput represents a mutation input for updating tenders.
type UpdateTenderInput struct {
	UpdatedAt                                 *time.Time
	Code                                      *string
	Status                                    *int
	IsApproved                                *bool
	Name                                      *string
	ClearEstimatedAmount                      bool
	EstimatedAmount                           *float64
	ClearTenderDate                           bool
	TenderDate                                *time.Time
	ClearClassify                             bool
	Classify                                  *int
	DiscoveryDate                             *time.Time
	ClearAddress                              bool
	Address                                   *string
	ClearFullAddress                          bool
	FullAddress                               *string
	ClearContractor                           bool
	Contractor                                *string
	ClearLevelInvolved                        bool
	LevelInvolved                             *int
	ClearSizeAndValueRating                   bool
	SizeAndValueRating                        *int
	ClearSizeAndValueRatingOverview           bool
	SizeAndValueRatingOverview                *string
	ClearCreditAndPaymentRating               bool
	CreditAndPaymentRating                    *int
	ClearCreditAndPaymentRatingOverview       bool
	CreditAndPaymentRatingOverview            *string
	ClearTimeLimitRating                      bool
	TimeLimitRating                           *int
	ClearTimeLimitRatingOverview              bool
	TimeLimitRatingOverview                   *string
	ClearCustomerRelationshipRating           bool
	CustomerRelationshipRating                *int
	ClearCustomerRelationshipRatingOverview   bool
	CustomerRelationshipRatingOverview        *string
	ClearCompetitivePartnershipRating         bool
	CompetitivePartnershipRating              *int
	ClearCompetitivePartnershipRatingOverview bool
	CompetitivePartnershipRatingOverview      *string
	PrepareToBid                              *bool
	ClearProjectCode                          bool
	ProjectCode                               *string
	ClearProjectType                          bool
	ProjectType                               *string
	ClearProjectDefinition                    bool
	ProjectDefinition                         *string
	ClearEstimatedProjectStartDate            bool
	EstimatedProjectStartDate                 *time.Time
	ClearEstimatedProjectEndDate              bool
	EstimatedProjectEndDate                   *time.Time
	ClearAttachements                         bool
	Attachements                              []string
	AppendAttachements                        []string
	ClearRemark                               bool
	Remark                                    *string
	ClearImages                               bool
	Images                                    []string
	AppendImages                              []string
	ClearTenderSituations                     bool
	TenderSituations                          *string
	ClearOwnerSituations                      bool
	OwnerSituations                           *string
	ClearBiddingInstructions                  bool
	BiddingInstructions                       *string
	ClearCompetitorSituations                 bool
	CompetitorSituations                      *string
	ClearCostEngineer                         bool
	CostEngineer                              *string
	ClearTenderForm                           bool
	TenderForm                                *string
	ClearContractForm                         bool
	ContractForm                              *string
	ClearManagementCompany                    bool
	ManagementCompany                         *string
	ClearTenderingAgency                      bool
	TenderingAgency                           *string
	ClearBiddingDate                          bool
	BiddingDate                               *time.Time
	ClearFacadeConsultant                     bool
	FacadeConsultant                          *string
	ClearDesignUnit                           bool
	DesignUnit                                *string
	ClearConsultingFirm                       bool
	ConsultingFirm                            *string
	KeyProject                                *bool
	ClearCurrentProgress                      bool
	CurrentProgress                           *string
	ClearTenderWinCompany                     bool
	TenderWinCompany                          *string
	ClearTenderCode                           bool
	TenderCode                                *string
	ClearArchitect                            bool
	Architect                                 *string
	ClearDeveloper                            bool
	Developer                                 *string
	ClearTenderClosingDate                    bool
	TenderClosingDate                         *time.Time
	ClearConstructionArea                     bool
	ConstructionArea                          *string
	ClearTenderWinDate                        bool
	TenderWinDate                             *time.Time
	ClearTenderWinAmount                      bool
	TenderWinAmount                           *float64
	ClearLastTenderAmount                     bool
	LastTenderAmount                          *float64
	AreaID                                    *xid.ID
	ClearCustomer                             bool
	CustomerID                                *xid.ID
	ClearFinder                               bool
	FinderID                                  *xid.ID
	ClearCreatedBy                            bool
	CreatedByID                               *xid.ID
	ClearFollowingSales                       bool
	AddFollowingSaleIDs                       []xid.ID
	RemoveFollowingSaleIDs                    []xid.ID
	ClearProvince                             bool
	ProvinceID                                *xid.ID
	ClearCity                                 bool
	CityID                                    *xid.ID
	ClearDistrict                             bool
	DistrictID                                *xid.ID
	ClearVisitRecords                         bool
	AddVisitRecordIDs                         []xid.ID
	RemoveVisitRecordIDs                      []xid.ID
	ClearCompetitor                           bool
	CompetitorID                              *xid.ID
	ClearApprover                             bool
	ApproverID                                *xid.ID
}

// Mutate applies the UpdateTenderInput on the TenderMutation builder.
func (i *UpdateTenderInput) Mutate(m *TenderMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.IsApproved; v != nil {
		m.SetIsApproved(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearEstimatedAmount {
		m.ClearEstimatedAmount()
	}
	if v := i.EstimatedAmount; v != nil {
		m.SetEstimatedAmount(*v)
	}
	if i.ClearTenderDate {
		m.ClearTenderDate()
	}
	if v := i.TenderDate; v != nil {
		m.SetTenderDate(*v)
	}
	if i.ClearClassify {
		m.ClearClassify()
	}
	if v := i.Classify; v != nil {
		m.SetClassify(*v)
	}
	if v := i.DiscoveryDate; v != nil {
		m.SetDiscoveryDate(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearFullAddress {
		m.ClearFullAddress()
	}
	if v := i.FullAddress; v != nil {
		m.SetFullAddress(*v)
	}
	if i.ClearContractor {
		m.ClearContractor()
	}
	if v := i.Contractor; v != nil {
		m.SetContractor(*v)
	}
	if i.ClearLevelInvolved {
		m.ClearLevelInvolved()
	}
	if v := i.LevelInvolved; v != nil {
		m.SetLevelInvolved(*v)
	}
	if i.ClearSizeAndValueRating {
		m.ClearSizeAndValueRating()
	}
	if v := i.SizeAndValueRating; v != nil {
		m.SetSizeAndValueRating(*v)
	}
	if i.ClearSizeAndValueRatingOverview {
		m.ClearSizeAndValueRatingOverview()
	}
	if v := i.SizeAndValueRatingOverview; v != nil {
		m.SetSizeAndValueRatingOverview(*v)
	}
	if i.ClearCreditAndPaymentRating {
		m.ClearCreditAndPaymentRating()
	}
	if v := i.CreditAndPaymentRating; v != nil {
		m.SetCreditAndPaymentRating(*v)
	}
	if i.ClearCreditAndPaymentRatingOverview {
		m.ClearCreditAndPaymentRatingOverview()
	}
	if v := i.CreditAndPaymentRatingOverview; v != nil {
		m.SetCreditAndPaymentRatingOverview(*v)
	}
	if i.ClearTimeLimitRating {
		m.ClearTimeLimitRating()
	}
	if v := i.TimeLimitRating; v != nil {
		m.SetTimeLimitRating(*v)
	}
	if i.ClearTimeLimitRatingOverview {
		m.ClearTimeLimitRatingOverview()
	}
	if v := i.TimeLimitRatingOverview; v != nil {
		m.SetTimeLimitRatingOverview(*v)
	}
	if i.ClearCustomerRelationshipRating {
		m.ClearCustomerRelationshipRating()
	}
	if v := i.CustomerRelationshipRating; v != nil {
		m.SetCustomerRelationshipRating(*v)
	}
	if i.ClearCustomerRelationshipRatingOverview {
		m.ClearCustomerRelationshipRatingOverview()
	}
	if v := i.CustomerRelationshipRatingOverview; v != nil {
		m.SetCustomerRelationshipRatingOverview(*v)
	}
	if i.ClearCompetitivePartnershipRating {
		m.ClearCompetitivePartnershipRating()
	}
	if v := i.CompetitivePartnershipRating; v != nil {
		m.SetCompetitivePartnershipRating(*v)
	}
	if i.ClearCompetitivePartnershipRatingOverview {
		m.ClearCompetitivePartnershipRatingOverview()
	}
	if v := i.CompetitivePartnershipRatingOverview; v != nil {
		m.SetCompetitivePartnershipRatingOverview(*v)
	}
	if v := i.PrepareToBid; v != nil {
		m.SetPrepareToBid(*v)
	}
	if i.ClearProjectCode {
		m.ClearProjectCode()
	}
	if v := i.ProjectCode; v != nil {
		m.SetProjectCode(*v)
	}
	if i.ClearProjectType {
		m.ClearProjectType()
	}
	if v := i.ProjectType; v != nil {
		m.SetProjectType(*v)
	}
	if i.ClearProjectDefinition {
		m.ClearProjectDefinition()
	}
	if v := i.ProjectDefinition; v != nil {
		m.SetProjectDefinition(*v)
	}
	if i.ClearEstimatedProjectStartDate {
		m.ClearEstimatedProjectStartDate()
	}
	if v := i.EstimatedProjectStartDate; v != nil {
		m.SetEstimatedProjectStartDate(*v)
	}
	if i.ClearEstimatedProjectEndDate {
		m.ClearEstimatedProjectEndDate()
	}
	if v := i.EstimatedProjectEndDate; v != nil {
		m.SetEstimatedProjectEndDate(*v)
	}
	if i.ClearAttachements {
		m.ClearAttachements()
	}
	if v := i.Attachements; v != nil {
		m.SetAttachements(v)
	}
	if i.AppendAttachements != nil {
		m.AppendAttachements(i.Attachements)
	}
	if i.ClearRemark {
		m.ClearRemark()
	}
	if v := i.Remark; v != nil {
		m.SetRemark(*v)
	}
	if i.ClearImages {
		m.ClearImages()
	}
	if v := i.Images; v != nil {
		m.SetImages(v)
	}
	if i.AppendImages != nil {
		m.AppendImages(i.Images)
	}
	if i.ClearTenderSituations {
		m.ClearTenderSituations()
	}
	if v := i.TenderSituations; v != nil {
		m.SetTenderSituations(*v)
	}
	if i.ClearOwnerSituations {
		m.ClearOwnerSituations()
	}
	if v := i.OwnerSituations; v != nil {
		m.SetOwnerSituations(*v)
	}
	if i.ClearBiddingInstructions {
		m.ClearBiddingInstructions()
	}
	if v := i.BiddingInstructions; v != nil {
		m.SetBiddingInstructions(*v)
	}
	if i.ClearCompetitorSituations {
		m.ClearCompetitorSituations()
	}
	if v := i.CompetitorSituations; v != nil {
		m.SetCompetitorSituations(*v)
	}
	if i.ClearCostEngineer {
		m.ClearCostEngineer()
	}
	if v := i.CostEngineer; v != nil {
		m.SetCostEngineer(*v)
	}
	if i.ClearTenderForm {
		m.ClearTenderForm()
	}
	if v := i.TenderForm; v != nil {
		m.SetTenderForm(*v)
	}
	if i.ClearContractForm {
		m.ClearContractForm()
	}
	if v := i.ContractForm; v != nil {
		m.SetContractForm(*v)
	}
	if i.ClearManagementCompany {
		m.ClearManagementCompany()
	}
	if v := i.ManagementCompany; v != nil {
		m.SetManagementCompany(*v)
	}
	if i.ClearTenderingAgency {
		m.ClearTenderingAgency()
	}
	if v := i.TenderingAgency; v != nil {
		m.SetTenderingAgency(*v)
	}
	if i.ClearBiddingDate {
		m.ClearBiddingDate()
	}
	if v := i.BiddingDate; v != nil {
		m.SetBiddingDate(*v)
	}
	if i.ClearFacadeConsultant {
		m.ClearFacadeConsultant()
	}
	if v := i.FacadeConsultant; v != nil {
		m.SetFacadeConsultant(*v)
	}
	if i.ClearDesignUnit {
		m.ClearDesignUnit()
	}
	if v := i.DesignUnit; v != nil {
		m.SetDesignUnit(*v)
	}
	if i.ClearConsultingFirm {
		m.ClearConsultingFirm()
	}
	if v := i.ConsultingFirm; v != nil {
		m.SetConsultingFirm(*v)
	}
	if v := i.KeyProject; v != nil {
		m.SetKeyProject(*v)
	}
	if i.ClearCurrentProgress {
		m.ClearCurrentProgress()
	}
	if v := i.CurrentProgress; v != nil {
		m.SetCurrentProgress(*v)
	}
	if i.ClearTenderWinCompany {
		m.ClearTenderWinCompany()
	}
	if v := i.TenderWinCompany; v != nil {
		m.SetTenderWinCompany(*v)
	}
	if i.ClearTenderCode {
		m.ClearTenderCode()
	}
	if v := i.TenderCode; v != nil {
		m.SetTenderCode(*v)
	}
	if i.ClearArchitect {
		m.ClearArchitect()
	}
	if v := i.Architect; v != nil {
		m.SetArchitect(*v)
	}
	if i.ClearDeveloper {
		m.ClearDeveloper()
	}
	if v := i.Developer; v != nil {
		m.SetDeveloper(*v)
	}
	if i.ClearTenderClosingDate {
		m.ClearTenderClosingDate()
	}
	if v := i.TenderClosingDate; v != nil {
		m.SetTenderClosingDate(*v)
	}
	if i.ClearConstructionArea {
		m.ClearConstructionArea()
	}
	if v := i.ConstructionArea; v != nil {
		m.SetConstructionArea(*v)
	}
	if i.ClearTenderWinDate {
		m.ClearTenderWinDate()
	}
	if v := i.TenderWinDate; v != nil {
		m.SetTenderWinDate(*v)
	}
	if i.ClearTenderWinAmount {
		m.ClearTenderWinAmount()
	}
	if v := i.TenderWinAmount; v != nil {
		m.SetTenderWinAmount(*v)
	}
	if i.ClearLastTenderAmount {
		m.ClearLastTenderAmount()
	}
	if v := i.LastTenderAmount; v != nil {
		m.SetLastTenderAmount(*v)
	}
	if v := i.AreaID; v != nil {
		m.SetAreaID(*v)
	}
	if i.ClearCustomer {
		m.ClearCustomer()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearFinder {
		m.ClearFinder()
	}
	if v := i.FinderID; v != nil {
		m.SetFinderID(*v)
	}
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedByID; v != nil {
		m.SetCreatedByID(*v)
	}
	if i.ClearFollowingSales {
		m.ClearFollowingSales()
	}
	if v := i.AddFollowingSaleIDs; len(v) > 0 {
		m.AddFollowingSaleIDs(v...)
	}
	if v := i.RemoveFollowingSaleIDs; len(v) > 0 {
		m.RemoveFollowingSaleIDs(v...)
	}
	if i.ClearProvince {
		m.ClearProvince()
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if i.ClearDistrict {
		m.ClearDistrict()
	}
	if v := i.DistrictID; v != nil {
		m.SetDistrictID(*v)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
	if i.ClearCompetitor {
		m.ClearCompetitor()
	}
	if v := i.CompetitorID; v != nil {
		m.SetCompetitorID(*v)
	}
	if i.ClearApprover {
		m.ClearApprover()
	}
	if v := i.ApproverID; v != nil {
		m.SetApproverID(*v)
	}
}

// SetInput applies the change-set in the UpdateTenderInput on the TenderUpdate builder.
func (c *TenderUpdate) SetInput(i UpdateTenderInput) *TenderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenderInput on the TenderUpdateOne builder.
func (c *TenderUpdateOne) SetInput(i UpdateTenderInput) *TenderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	OpenID         string
	Name           *string
	Email          *string
	Username       *string
	AvatarURL      *string
	Disabled       *bool
	IsAdmin        *bool
	IsCeo          *bool
	IsSuperAdmin   *bool
	HasMapAccess   *bool
	HasEditAccess  *bool
	AreaIDs        []xid.ID
	CustomerIDs    []xid.ID
	LeaderID       *xid.ID
	TeamMemberIDs  []xid.ID
	TenderIDs      []xid.ID
	VisitRecordIDs []xid.ID
	ProjectIDs     []xid.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetOpenID(i.OpenID)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsCeo; v != nil {
		m.SetIsCeo(*v)
	}
	if v := i.IsSuperAdmin; v != nil {
		m.SetIsSuperAdmin(*v)
	}
	if v := i.HasMapAccess; v != nil {
		m.SetHasMapAccess(*v)
	}
	if v := i.HasEditAccess; v != nil {
		m.SetHasEditAccess(*v)
	}
	if v := i.AreaIDs; len(v) > 0 {
		m.AddAreaIDs(v...)
	}
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if v := i.TeamMemberIDs; len(v) > 0 {
		m.AddTeamMemberIDs(v...)
	}
	if v := i.TenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.VisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.ProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt            *time.Time
	OpenID               *string
	ClearName            bool
	Name                 *string
	ClearEmail           bool
	Email                *string
	ClearUsername        bool
	Username             *string
	ClearAvatarURL       bool
	AvatarURL            *string
	Disabled             *bool
	IsAdmin              *bool
	IsCeo                *bool
	IsSuperAdmin         *bool
	HasMapAccess         *bool
	HasEditAccess        *bool
	ClearAreas           bool
	AddAreaIDs           []xid.ID
	RemoveAreaIDs        []xid.ID
	ClearCustomers       bool
	AddCustomerIDs       []xid.ID
	RemoveCustomerIDs    []xid.ID
	ClearLeader          bool
	LeaderID             *xid.ID
	ClearTeamMembers     bool
	AddTeamMemberIDs     []xid.ID
	RemoveTeamMemberIDs  []xid.ID
	ClearTenders         bool
	AddTenderIDs         []xid.ID
	RemoveTenderIDs      []xid.ID
	ClearVisitRecords    bool
	AddVisitRecordIDs    []xid.ID
	RemoveVisitRecordIDs []xid.ID
	ClearProjects        bool
	AddProjectIDs        []xid.ID
	RemoveProjectIDs     []xid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.OpenID; v != nil {
		m.SetOpenID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearUsername {
		m.ClearUsername()
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearAvatarURL {
		m.ClearAvatarURL()
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.IsCeo; v != nil {
		m.SetIsCeo(*v)
	}
	if v := i.IsSuperAdmin; v != nil {
		m.SetIsSuperAdmin(*v)
	}
	if v := i.HasMapAccess; v != nil {
		m.SetHasMapAccess(*v)
	}
	if v := i.HasEditAccess; v != nil {
		m.SetHasEditAccess(*v)
	}
	if i.ClearAreas {
		m.ClearAreas()
	}
	if v := i.AddAreaIDs; len(v) > 0 {
		m.AddAreaIDs(v...)
	}
	if v := i.RemoveAreaIDs; len(v) > 0 {
		m.RemoveAreaIDs(v...)
	}
	if i.ClearCustomers {
		m.ClearCustomers()
	}
	if v := i.AddCustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
	if v := i.RemoveCustomerIDs; len(v) > 0 {
		m.RemoveCustomerIDs(v...)
	}
	if i.ClearLeader {
		m.ClearLeader()
	}
	if v := i.LeaderID; v != nil {
		m.SetLeaderID(*v)
	}
	if i.ClearTeamMembers {
		m.ClearTeamMembers()
	}
	if v := i.AddTeamMemberIDs; len(v) > 0 {
		m.AddTeamMemberIDs(v...)
	}
	if v := i.RemoveTeamMemberIDs; len(v) > 0 {
		m.RemoveTeamMemberIDs(v...)
	}
	if i.ClearTenders {
		m.ClearTenders()
	}
	if v := i.AddTenderIDs; len(v) > 0 {
		m.AddTenderIDs(v...)
	}
	if v := i.RemoveTenderIDs; len(v) > 0 {
		m.RemoveTenderIDs(v...)
	}
	if i.ClearVisitRecords {
		m.ClearVisitRecords()
	}
	if v := i.AddVisitRecordIDs; len(v) > 0 {
		m.AddVisitRecordIDs(v...)
	}
	if v := i.RemoveVisitRecordIDs; len(v) > 0 {
		m.RemoveVisitRecordIDs(v...)
	}
	if i.ClearProjects {
		m.ClearProjects()
	}
	if v := i.AddProjectIDs; len(v) > 0 {
		m.AddProjectIDs(v...)
	}
	if v := i.RemoveProjectIDs; len(v) > 0 {
		m.RemoveProjectIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateVisitRecordInput represents a mutation input for creating visitrecords.
type CreateVisitRecordInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	VisitType     *int
	CommPeople    string
	CommContent   string
	NextStep      *string
	Date          time.Time
	TenderID      *xid.ID
	CustomerID    xid.ID
	FollowUpByIDs []xid.ID
}

// Mutate applies the CreateVisitRecordInput on the VisitRecordMutation builder.
func (i *CreateVisitRecordInput) Mutate(m *VisitRecordMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.VisitType; v != nil {
		m.SetVisitType(*v)
	}
	m.SetCommPeople(i.CommPeople)
	m.SetCommContent(i.CommContent)
	if v := i.NextStep; v != nil {
		m.SetNextStep(*v)
	}
	m.SetDate(i.Date)
	if v := i.TenderID; v != nil {
		m.SetTenderID(*v)
	}
	m.SetCustomerID(i.CustomerID)
	if v := i.FollowUpByIDs; len(v) > 0 {
		m.AddFollowUpByIDs(v...)
	}
}

// SetInput applies the change-set in the CreateVisitRecordInput on the VisitRecordCreate builder.
func (c *VisitRecordCreate) SetInput(i CreateVisitRecordInput) *VisitRecordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVisitRecordInput represents a mutation input for updating visitrecords.
type UpdateVisitRecordInput struct {
	UpdatedAt           *time.Time
	VisitType           *int
	CommPeople          *string
	CommContent         *string
	ClearNextStep       bool
	NextStep            *string
	Date                *time.Time
	ClearTender         bool
	TenderID            *xid.ID
	CustomerID          *xid.ID
	ClearFollowUpBys    bool
	AddFollowUpByIDs    []xid.ID
	RemoveFollowUpByIDs []xid.ID
}

// Mutate applies the UpdateVisitRecordInput on the VisitRecordMutation builder.
func (i *UpdateVisitRecordInput) Mutate(m *VisitRecordMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.VisitType; v != nil {
		m.SetVisitType(*v)
	}
	if v := i.CommPeople; v != nil {
		m.SetCommPeople(*v)
	}
	if v := i.CommContent; v != nil {
		m.SetCommContent(*v)
	}
	if i.ClearNextStep {
		m.ClearNextStep()
	}
	if v := i.NextStep; v != nil {
		m.SetNextStep(*v)
	}
	if v := i.Date; v != nil {
		m.SetDate(*v)
	}
	if i.ClearTender {
		m.ClearTender()
	}
	if v := i.TenderID; v != nil {
		m.SetTenderID(*v)
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if i.ClearFollowUpBys {
		m.ClearFollowUpBys()
	}
	if v := i.AddFollowUpByIDs; len(v) > 0 {
		m.AddFollowUpByIDs(v...)
	}
	if v := i.RemoveFollowUpByIDs; len(v) > 0 {
		m.RemoveFollowUpByIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateVisitRecordInput on the VisitRecordUpdate builder.
func (c *VisitRecordUpdate) SetInput(i UpdateVisitRecordInput) *VisitRecordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVisitRecordInput on the VisitRecordUpdateOne builder.
func (c *VisitRecordUpdateOne) SetInput(i UpdateVisitRecordInput) *VisitRecordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
