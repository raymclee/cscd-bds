// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateOpportunityInput represents a mutation input for creating opportunities.
type CreateOpportunityInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	RegistrationNumber string
}

// Mutate applies the CreateOpportunityInput on the OpportunityMutation builder.
func (i *CreateOpportunityInput) Mutate(m *OpportunityMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetRegistrationNumber(i.RegistrationNumber)
}

// SetInput applies the change-set in the CreateOpportunityInput on the OpportunityCreate builder.
func (c *OpportunityCreate) SetInput(i CreateOpportunityInput) *OpportunityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOpportunityInput represents a mutation input for updating opportunities.
type UpdateOpportunityInput struct {
	UpdatedAt          *time.Time
	RegistrationNumber *string
}

// Mutate applies the UpdateOpportunityInput on the OpportunityMutation builder.
func (i *UpdateOpportunityInput) Mutate(m *OpportunityMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RegistrationNumber; v != nil {
		m.SetRegistrationNumber(*v)
	}
}

// SetInput applies the change-set in the UpdateOpportunityInput on the OpportunityUpdate builder.
func (c *OpportunityUpdate) SetInput(i UpdateOpportunityInput) *OpportunityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOpportunityInput on the OpportunityUpdateOne builder.
func (c *OpportunityUpdateOne) SetInput(i UpdateOpportunityInput) *OpportunityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt *time.Time
	Name      *string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
