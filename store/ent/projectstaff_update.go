// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectstaff"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectStaffUpdate is the builder for updating ProjectStaff entities.
type ProjectStaffUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectStaffMutation
}

// Where appends a list predicates to the ProjectStaffUpdate builder.
func (psu *ProjectStaffUpdate) Where(ps ...predicate.ProjectStaff) *ProjectStaffUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *ProjectStaffUpdate) SetUpdatedAt(t time.Time) *ProjectStaffUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetCym sets the "cym" field.
func (psu *ProjectStaffUpdate) SetCym(s string) *ProjectStaffUpdate {
	psu.mutation.SetCym(s)
	return psu
}

// SetNillableCym sets the "cym" field if the given value is not nil.
func (psu *ProjectStaffUpdate) SetNillableCym(s *string) *ProjectStaffUpdate {
	if s != nil {
		psu.SetCym(*s)
	}
	return psu
}

// SetInstallation sets the "installation" field.
func (psu *ProjectStaffUpdate) SetInstallation(f float64) *ProjectStaffUpdate {
	psu.mutation.ResetInstallation()
	psu.mutation.SetInstallation(f)
	return psu
}

// SetNillableInstallation sets the "installation" field if the given value is not nil.
func (psu *ProjectStaffUpdate) SetNillableInstallation(f *float64) *ProjectStaffUpdate {
	if f != nil {
		psu.SetInstallation(*f)
	}
	return psu
}

// AddInstallation adds f to the "installation" field.
func (psu *ProjectStaffUpdate) AddInstallation(f float64) *ProjectStaffUpdate {
	psu.mutation.AddInstallation(f)
	return psu
}

// ClearInstallation clears the value of the "installation" field.
func (psu *ProjectStaffUpdate) ClearInstallation() *ProjectStaffUpdate {
	psu.mutation.ClearInstallation()
	return psu
}

// SetManagement sets the "management" field.
func (psu *ProjectStaffUpdate) SetManagement(f float64) *ProjectStaffUpdate {
	psu.mutation.ResetManagement()
	psu.mutation.SetManagement(f)
	return psu
}

// SetNillableManagement sets the "management" field if the given value is not nil.
func (psu *ProjectStaffUpdate) SetNillableManagement(f *float64) *ProjectStaffUpdate {
	if f != nil {
		psu.SetManagement(*f)
	}
	return psu
}

// AddManagement adds f to the "management" field.
func (psu *ProjectStaffUpdate) AddManagement(f float64) *ProjectStaffUpdate {
	psu.mutation.AddManagement(f)
	return psu
}

// ClearManagement clears the value of the "management" field.
func (psu *ProjectStaffUpdate) ClearManagement() *ProjectStaffUpdate {
	psu.mutation.ClearManagement()
	return psu
}

// SetDesign sets the "design" field.
func (psu *ProjectStaffUpdate) SetDesign(f float64) *ProjectStaffUpdate {
	psu.mutation.ResetDesign()
	psu.mutation.SetDesign(f)
	return psu
}

// SetNillableDesign sets the "design" field if the given value is not nil.
func (psu *ProjectStaffUpdate) SetNillableDesign(f *float64) *ProjectStaffUpdate {
	if f != nil {
		psu.SetDesign(*f)
	}
	return psu
}

// AddDesign adds f to the "design" field.
func (psu *ProjectStaffUpdate) AddDesign(f float64) *ProjectStaffUpdate {
	psu.mutation.AddDesign(f)
	return psu
}

// ClearDesign clears the value of the "design" field.
func (psu *ProjectStaffUpdate) ClearDesign() *ProjectStaffUpdate {
	psu.mutation.ClearDesign()
	return psu
}

// SetProjectID sets the "project_id" field.
func (psu *ProjectStaffUpdate) SetProjectID(x xid.ID) *ProjectStaffUpdate {
	psu.mutation.SetProjectID(x)
	return psu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (psu *ProjectStaffUpdate) SetNillableProjectID(x *xid.ID) *ProjectStaffUpdate {
	if x != nil {
		psu.SetProjectID(*x)
	}
	return psu
}

// SetProject sets the "project" edge to the Project entity.
func (psu *ProjectStaffUpdate) SetProject(p *Project) *ProjectStaffUpdate {
	return psu.SetProjectID(p.ID)
}

// Mutation returns the ProjectStaffMutation object of the builder.
func (psu *ProjectStaffUpdate) Mutation() *ProjectStaffMutation {
	return psu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (psu *ProjectStaffUpdate) ClearProject() *ProjectStaffUpdate {
	psu.mutation.ClearProject()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProjectStaffUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProjectStaffUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProjectStaffUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProjectStaffUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *ProjectStaffUpdate) defaults() {
	if _, ok := psu.mutation.UpdatedAt(); !ok {
		v := projectstaff.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProjectStaffUpdate) check() error {
	if psu.mutation.ProjectCleared() && len(psu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectStaff.project"`)
	}
	return nil
}

func (psu *ProjectStaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectstaff.Table, projectstaff.Columns, sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectstaff.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.Cym(); ok {
		_spec.SetField(projectstaff.FieldCym, field.TypeString, value)
	}
	if value, ok := psu.mutation.Installation(); ok {
		_spec.SetField(projectstaff.FieldInstallation, field.TypeFloat64, value)
	}
	if value, ok := psu.mutation.AddedInstallation(); ok {
		_spec.AddField(projectstaff.FieldInstallation, field.TypeFloat64, value)
	}
	if psu.mutation.InstallationCleared() {
		_spec.ClearField(projectstaff.FieldInstallation, field.TypeFloat64)
	}
	if value, ok := psu.mutation.Management(); ok {
		_spec.SetField(projectstaff.FieldManagement, field.TypeFloat64, value)
	}
	if value, ok := psu.mutation.AddedManagement(); ok {
		_spec.AddField(projectstaff.FieldManagement, field.TypeFloat64, value)
	}
	if psu.mutation.ManagementCleared() {
		_spec.ClearField(projectstaff.FieldManagement, field.TypeFloat64)
	}
	if value, ok := psu.mutation.Design(); ok {
		_spec.SetField(projectstaff.FieldDesign, field.TypeFloat64, value)
	}
	if value, ok := psu.mutation.AddedDesign(); ok {
		_spec.AddField(projectstaff.FieldDesign, field.TypeFloat64, value)
	}
	if psu.mutation.DesignCleared() {
		_spec.ClearField(projectstaff.FieldDesign, field.TypeFloat64)
	}
	if psu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectstaff.ProjectTable,
			Columns: []string{projectstaff.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectstaff.ProjectTable,
			Columns: []string{projectstaff.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProjectStaffUpdateOne is the builder for updating a single ProjectStaff entity.
type ProjectStaffUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectStaffMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *ProjectStaffUpdateOne) SetUpdatedAt(t time.Time) *ProjectStaffUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetCym sets the "cym" field.
func (psuo *ProjectStaffUpdateOne) SetCym(s string) *ProjectStaffUpdateOne {
	psuo.mutation.SetCym(s)
	return psuo
}

// SetNillableCym sets the "cym" field if the given value is not nil.
func (psuo *ProjectStaffUpdateOne) SetNillableCym(s *string) *ProjectStaffUpdateOne {
	if s != nil {
		psuo.SetCym(*s)
	}
	return psuo
}

// SetInstallation sets the "installation" field.
func (psuo *ProjectStaffUpdateOne) SetInstallation(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.ResetInstallation()
	psuo.mutation.SetInstallation(f)
	return psuo
}

// SetNillableInstallation sets the "installation" field if the given value is not nil.
func (psuo *ProjectStaffUpdateOne) SetNillableInstallation(f *float64) *ProjectStaffUpdateOne {
	if f != nil {
		psuo.SetInstallation(*f)
	}
	return psuo
}

// AddInstallation adds f to the "installation" field.
func (psuo *ProjectStaffUpdateOne) AddInstallation(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.AddInstallation(f)
	return psuo
}

// ClearInstallation clears the value of the "installation" field.
func (psuo *ProjectStaffUpdateOne) ClearInstallation() *ProjectStaffUpdateOne {
	psuo.mutation.ClearInstallation()
	return psuo
}

// SetManagement sets the "management" field.
func (psuo *ProjectStaffUpdateOne) SetManagement(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.ResetManagement()
	psuo.mutation.SetManagement(f)
	return psuo
}

// SetNillableManagement sets the "management" field if the given value is not nil.
func (psuo *ProjectStaffUpdateOne) SetNillableManagement(f *float64) *ProjectStaffUpdateOne {
	if f != nil {
		psuo.SetManagement(*f)
	}
	return psuo
}

// AddManagement adds f to the "management" field.
func (psuo *ProjectStaffUpdateOne) AddManagement(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.AddManagement(f)
	return psuo
}

// ClearManagement clears the value of the "management" field.
func (psuo *ProjectStaffUpdateOne) ClearManagement() *ProjectStaffUpdateOne {
	psuo.mutation.ClearManagement()
	return psuo
}

// SetDesign sets the "design" field.
func (psuo *ProjectStaffUpdateOne) SetDesign(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.ResetDesign()
	psuo.mutation.SetDesign(f)
	return psuo
}

// SetNillableDesign sets the "design" field if the given value is not nil.
func (psuo *ProjectStaffUpdateOne) SetNillableDesign(f *float64) *ProjectStaffUpdateOne {
	if f != nil {
		psuo.SetDesign(*f)
	}
	return psuo
}

// AddDesign adds f to the "design" field.
func (psuo *ProjectStaffUpdateOne) AddDesign(f float64) *ProjectStaffUpdateOne {
	psuo.mutation.AddDesign(f)
	return psuo
}

// ClearDesign clears the value of the "design" field.
func (psuo *ProjectStaffUpdateOne) ClearDesign() *ProjectStaffUpdateOne {
	psuo.mutation.ClearDesign()
	return psuo
}

// SetProjectID sets the "project_id" field.
func (psuo *ProjectStaffUpdateOne) SetProjectID(x xid.ID) *ProjectStaffUpdateOne {
	psuo.mutation.SetProjectID(x)
	return psuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (psuo *ProjectStaffUpdateOne) SetNillableProjectID(x *xid.ID) *ProjectStaffUpdateOne {
	if x != nil {
		psuo.SetProjectID(*x)
	}
	return psuo
}

// SetProject sets the "project" edge to the Project entity.
func (psuo *ProjectStaffUpdateOne) SetProject(p *Project) *ProjectStaffUpdateOne {
	return psuo.SetProjectID(p.ID)
}

// Mutation returns the ProjectStaffMutation object of the builder.
func (psuo *ProjectStaffUpdateOne) Mutation() *ProjectStaffMutation {
	return psuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (psuo *ProjectStaffUpdateOne) ClearProject() *ProjectStaffUpdateOne {
	psuo.mutation.ClearProject()
	return psuo
}

// Where appends a list predicates to the ProjectStaffUpdate builder.
func (psuo *ProjectStaffUpdateOne) Where(ps ...predicate.ProjectStaff) *ProjectStaffUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProjectStaffUpdateOne) Select(field string, fields ...string) *ProjectStaffUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProjectStaff entity.
func (psuo *ProjectStaffUpdateOne) Save(ctx context.Context) (*ProjectStaff, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProjectStaffUpdateOne) SaveX(ctx context.Context) *ProjectStaff {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProjectStaffUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProjectStaffUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *ProjectStaffUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdatedAt(); !ok {
		v := projectstaff.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProjectStaffUpdateOne) check() error {
	if psuo.mutation.ProjectCleared() && len(psuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectStaff.project"`)
	}
	return nil
}

func (psuo *ProjectStaffUpdateOne) sqlSave(ctx context.Context) (_node *ProjectStaff, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectstaff.Table, projectstaff.Columns, sqlgraph.NewFieldSpec(projectstaff.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectStaff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectstaff.FieldID)
		for _, f := range fields {
			if !projectstaff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectstaff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectstaff.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.Cym(); ok {
		_spec.SetField(projectstaff.FieldCym, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Installation(); ok {
		_spec.SetField(projectstaff.FieldInstallation, field.TypeFloat64, value)
	}
	if value, ok := psuo.mutation.AddedInstallation(); ok {
		_spec.AddField(projectstaff.FieldInstallation, field.TypeFloat64, value)
	}
	if psuo.mutation.InstallationCleared() {
		_spec.ClearField(projectstaff.FieldInstallation, field.TypeFloat64)
	}
	if value, ok := psuo.mutation.Management(); ok {
		_spec.SetField(projectstaff.FieldManagement, field.TypeFloat64, value)
	}
	if value, ok := psuo.mutation.AddedManagement(); ok {
		_spec.AddField(projectstaff.FieldManagement, field.TypeFloat64, value)
	}
	if psuo.mutation.ManagementCleared() {
		_spec.ClearField(projectstaff.FieldManagement, field.TypeFloat64)
	}
	if value, ok := psuo.mutation.Design(); ok {
		_spec.SetField(projectstaff.FieldDesign, field.TypeFloat64, value)
	}
	if value, ok := psuo.mutation.AddedDesign(); ok {
		_spec.AddField(projectstaff.FieldDesign, field.TypeFloat64, value)
	}
	if psuo.mutation.DesignCleared() {
		_spec.ClearField(projectstaff.FieldDesign, field.TypeFloat64)
	}
	if psuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectstaff.ProjectTable,
			Columns: []string{projectstaff.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectstaff.ProjectTable,
			Columns: []string{projectstaff.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectStaff{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
