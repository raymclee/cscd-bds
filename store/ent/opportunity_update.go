// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/opportunity"
	"cscd-bds/store/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpportunityUpdate is the builder for updating Opportunity entities.
type OpportunityUpdate struct {
	config
	hooks    []Hook
	mutation *OpportunityMutation
}

// Where appends a list predicates to the OpportunityUpdate builder.
func (ou *OpportunityUpdate) Where(ps ...predicate.Opportunity) *OpportunityUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OpportunityUpdate) SetUpdatedAt(t time.Time) *OpportunityUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetRegistrationNumber sets the "registration_number" field.
func (ou *OpportunityUpdate) SetRegistrationNumber(s string) *OpportunityUpdate {
	ou.mutation.SetRegistrationNumber(s)
	return ou
}

// SetNillableRegistrationNumber sets the "registration_number" field if the given value is not nil.
func (ou *OpportunityUpdate) SetNillableRegistrationNumber(s *string) *OpportunityUpdate {
	if s != nil {
		ou.SetRegistrationNumber(*s)
	}
	return ou
}

// Mutation returns the OpportunityMutation object of the builder.
func (ou *OpportunityUpdate) Mutation() *OpportunityMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OpportunityUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OpportunityUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OpportunityUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OpportunityUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OpportunityUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := opportunity.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OpportunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(opportunity.Table, opportunity.Columns, sqlgraph.NewFieldSpec(opportunity.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(opportunity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.RegistrationNumber(); ok {
		_spec.SetField(opportunity.FieldRegistrationNumber, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opportunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OpportunityUpdateOne is the builder for updating a single Opportunity entity.
type OpportunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OpportunityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OpportunityUpdateOne) SetUpdatedAt(t time.Time) *OpportunityUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetRegistrationNumber sets the "registration_number" field.
func (ouo *OpportunityUpdateOne) SetRegistrationNumber(s string) *OpportunityUpdateOne {
	ouo.mutation.SetRegistrationNumber(s)
	return ouo
}

// SetNillableRegistrationNumber sets the "registration_number" field if the given value is not nil.
func (ouo *OpportunityUpdateOne) SetNillableRegistrationNumber(s *string) *OpportunityUpdateOne {
	if s != nil {
		ouo.SetRegistrationNumber(*s)
	}
	return ouo
}

// Mutation returns the OpportunityMutation object of the builder.
func (ouo *OpportunityUpdateOne) Mutation() *OpportunityMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OpportunityUpdate builder.
func (ouo *OpportunityUpdateOne) Where(ps ...predicate.Opportunity) *OpportunityUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OpportunityUpdateOne) Select(field string, fields ...string) *OpportunityUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Opportunity entity.
func (ouo *OpportunityUpdateOne) Save(ctx context.Context) (*Opportunity, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OpportunityUpdateOne) SaveX(ctx context.Context) *Opportunity {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OpportunityUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OpportunityUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OpportunityUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := opportunity.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OpportunityUpdateOne) sqlSave(ctx context.Context) (_node *Opportunity, err error) {
	_spec := sqlgraph.NewUpdateSpec(opportunity.Table, opportunity.Columns, sqlgraph.NewFieldSpec(opportunity.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Opportunity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, opportunity.FieldID)
		for _, f := range fields {
			if !opportunity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != opportunity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(opportunity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.RegistrationNumber(); ok {
		_spec.SetField(opportunity.FieldRegistrationNumber, field.TypeString, value)
	}
	_node = &Opportunity{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opportunity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
