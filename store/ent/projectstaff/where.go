// Code generated by ent, DO NOT EDIT.

package projectstaff

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldUpdatedAt, v))
}

// Cym applies equality check predicate on the "cym" field. It's identical to CymEQ.
func Cym(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldCym, v))
}

// Installation applies equality check predicate on the "installation" field. It's identical to InstallationEQ.
func Installation(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldInstallation, v))
}

// Management applies equality check predicate on the "management" field. It's identical to ManagementEQ.
func Management(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldManagement, v))
}

// Design applies equality check predicate on the "design" field. It's identical to DesignEQ.
func Design(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldDesign, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldProjectID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldUpdatedAt, v))
}

// CymEQ applies the EQ predicate on the "cym" field.
func CymEQ(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldCym, v))
}

// CymNEQ applies the NEQ predicate on the "cym" field.
func CymNEQ(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldCym, v))
}

// CymIn applies the In predicate on the "cym" field.
func CymIn(vs ...string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldCym, vs...))
}

// CymNotIn applies the NotIn predicate on the "cym" field.
func CymNotIn(vs ...string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldCym, vs...))
}

// CymGT applies the GT predicate on the "cym" field.
func CymGT(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldCym, v))
}

// CymGTE applies the GTE predicate on the "cym" field.
func CymGTE(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldCym, v))
}

// CymLT applies the LT predicate on the "cym" field.
func CymLT(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldCym, v))
}

// CymLTE applies the LTE predicate on the "cym" field.
func CymLTE(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldCym, v))
}

// CymContains applies the Contains predicate on the "cym" field.
func CymContains(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldContains(FieldCym, v))
}

// CymHasPrefix applies the HasPrefix predicate on the "cym" field.
func CymHasPrefix(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldHasPrefix(FieldCym, v))
}

// CymHasSuffix applies the HasSuffix predicate on the "cym" field.
func CymHasSuffix(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldHasSuffix(FieldCym, v))
}

// CymEqualFold applies the EqualFold predicate on the "cym" field.
func CymEqualFold(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEqualFold(FieldCym, v))
}

// CymContainsFold applies the ContainsFold predicate on the "cym" field.
func CymContainsFold(v string) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldContainsFold(FieldCym, v))
}

// InstallationEQ applies the EQ predicate on the "installation" field.
func InstallationEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldInstallation, v))
}

// InstallationNEQ applies the NEQ predicate on the "installation" field.
func InstallationNEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldInstallation, v))
}

// InstallationIn applies the In predicate on the "installation" field.
func InstallationIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldInstallation, vs...))
}

// InstallationNotIn applies the NotIn predicate on the "installation" field.
func InstallationNotIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldInstallation, vs...))
}

// InstallationGT applies the GT predicate on the "installation" field.
func InstallationGT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldInstallation, v))
}

// InstallationGTE applies the GTE predicate on the "installation" field.
func InstallationGTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldInstallation, v))
}

// InstallationLT applies the LT predicate on the "installation" field.
func InstallationLT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldInstallation, v))
}

// InstallationLTE applies the LTE predicate on the "installation" field.
func InstallationLTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldInstallation, v))
}

// InstallationIsNil applies the IsNil predicate on the "installation" field.
func InstallationIsNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIsNull(FieldInstallation))
}

// InstallationNotNil applies the NotNil predicate on the "installation" field.
func InstallationNotNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotNull(FieldInstallation))
}

// ManagementEQ applies the EQ predicate on the "management" field.
func ManagementEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldManagement, v))
}

// ManagementNEQ applies the NEQ predicate on the "management" field.
func ManagementNEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldManagement, v))
}

// ManagementIn applies the In predicate on the "management" field.
func ManagementIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldManagement, vs...))
}

// ManagementNotIn applies the NotIn predicate on the "management" field.
func ManagementNotIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldManagement, vs...))
}

// ManagementGT applies the GT predicate on the "management" field.
func ManagementGT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldManagement, v))
}

// ManagementGTE applies the GTE predicate on the "management" field.
func ManagementGTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldManagement, v))
}

// ManagementLT applies the LT predicate on the "management" field.
func ManagementLT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldManagement, v))
}

// ManagementLTE applies the LTE predicate on the "management" field.
func ManagementLTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldManagement, v))
}

// ManagementIsNil applies the IsNil predicate on the "management" field.
func ManagementIsNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIsNull(FieldManagement))
}

// ManagementNotNil applies the NotNil predicate on the "management" field.
func ManagementNotNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotNull(FieldManagement))
}

// DesignEQ applies the EQ predicate on the "design" field.
func DesignEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldDesign, v))
}

// DesignNEQ applies the NEQ predicate on the "design" field.
func DesignNEQ(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldDesign, v))
}

// DesignIn applies the In predicate on the "design" field.
func DesignIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldDesign, vs...))
}

// DesignNotIn applies the NotIn predicate on the "design" field.
func DesignNotIn(vs ...float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldDesign, vs...))
}

// DesignGT applies the GT predicate on the "design" field.
func DesignGT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldDesign, v))
}

// DesignGTE applies the GTE predicate on the "design" field.
func DesignGTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldDesign, v))
}

// DesignLT applies the LT predicate on the "design" field.
func DesignLT(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldDesign, v))
}

// DesignLTE applies the LTE predicate on the "design" field.
func DesignLTE(v float64) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldDesign, v))
}

// DesignIsNil applies the IsNil predicate on the "design" field.
func DesignIsNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIsNull(FieldDesign))
}

// DesignNotNil applies the NotNil predicate on the "design" field.
func DesignNotNil() predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotNull(FieldDesign))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v xid.ID) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v xid.ID) predicate.ProjectStaff {
	vc := string(v)
	return predicate.ProjectStaff(sql.FieldContains(FieldProjectID, vc))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v xid.ID) predicate.ProjectStaff {
	vc := string(v)
	return predicate.ProjectStaff(sql.FieldHasPrefix(FieldProjectID, vc))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v xid.ID) predicate.ProjectStaff {
	vc := string(v)
	return predicate.ProjectStaff(sql.FieldHasSuffix(FieldProjectID, vc))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v xid.ID) predicate.ProjectStaff {
	vc := string(v)
	return predicate.ProjectStaff(sql.FieldEqualFold(FieldProjectID, vc))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v xid.ID) predicate.ProjectStaff {
	vc := string(v)
	return predicate.ProjectStaff(sql.FieldContainsFold(FieldProjectID, vc))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectStaff {
	return predicate.ProjectStaff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectStaff {
	return predicate.ProjectStaff(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectStaff) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectStaff) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectStaff) predicate.ProjectStaff {
	return predicate.ProjectStaff(sql.NotPredicates(p))
}
