// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/potentialtender"
	"cscd-bds/store/ent/schema/xid"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PotentialTender is the model entity for the PotentialTender schema.
type PotentialTender struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta         map[string]interface{} `json:"meta,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PotentialTender) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case potentialtender.FieldMeta:
			values[i] = new([]byte)
		case potentialtender.FieldCreatedAt, potentialtender.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case potentialtender.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PotentialTender fields.
func (pt *PotentialTender) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case potentialtender.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case potentialtender.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case potentialtender.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case potentialtender.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PotentialTender.
// This includes values selected through modifiers, order, etc.
func (pt *PotentialTender) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// Update returns a builder for updating this PotentialTender.
// Note that you need to call PotentialTender.Unwrap() before calling this method if this PotentialTender
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PotentialTender) Update() *PotentialTenderUpdateOne {
	return NewPotentialTenderClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PotentialTender entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PotentialTender) Unwrap() *PotentialTender {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PotentialTender is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PotentialTender) String() string {
	var builder strings.Builder
	builder.WriteString("PotentialTender(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", pt.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// PotentialTenders is a parsable slice of PotentialTender.
type PotentialTenders []*PotentialTender
