// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderCompetitorQuery is the builder for querying TenderCompetitor entities.
type TenderCompetitorQuery struct {
	config
	ctx            *QueryContext
	order          []tendercompetitor.OrderOption
	inters         []Interceptor
	predicates     []predicate.TenderCompetitor
	withTender     *TenderQuery
	withCompetitor *CompetitorQuery
	loadTotal      []func(context.Context, []*TenderCompetitor) error
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TenderCompetitorQuery builder.
func (tcq *TenderCompetitorQuery) Where(ps ...predicate.TenderCompetitor) *TenderCompetitorQuery {
	tcq.predicates = append(tcq.predicates, ps...)
	return tcq
}

// Limit the number of records to be returned by this query.
func (tcq *TenderCompetitorQuery) Limit(limit int) *TenderCompetitorQuery {
	tcq.ctx.Limit = &limit
	return tcq
}

// Offset to start from.
func (tcq *TenderCompetitorQuery) Offset(offset int) *TenderCompetitorQuery {
	tcq.ctx.Offset = &offset
	return tcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcq *TenderCompetitorQuery) Unique(unique bool) *TenderCompetitorQuery {
	tcq.ctx.Unique = &unique
	return tcq
}

// Order specifies how the records should be ordered.
func (tcq *TenderCompetitorQuery) Order(o ...tendercompetitor.OrderOption) *TenderCompetitorQuery {
	tcq.order = append(tcq.order, o...)
	return tcq
}

// QueryTender chains the current query on the "tender" edge.
func (tcq *TenderCompetitorQuery) QueryTender() *TenderQuery {
	query := (&TenderClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tendercompetitor.Table, tendercompetitor.FieldID, selector),
			sqlgraph.To(tender.Table, tender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tendercompetitor.TenderTable, tendercompetitor.TenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetitor chains the current query on the "competitor" edge.
func (tcq *TenderCompetitorQuery) QueryCompetitor() *CompetitorQuery {
	query := (&CompetitorClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tendercompetitor.Table, tendercompetitor.FieldID, selector),
			sqlgraph.To(competitor.Table, competitor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tendercompetitor.CompetitorTable, tendercompetitor.CompetitorColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TenderCompetitor entity from the query.
// Returns a *NotFoundError when no TenderCompetitor was found.
func (tcq *TenderCompetitorQuery) First(ctx context.Context) (*TenderCompetitor, error) {
	nodes, err := tcq.Limit(1).All(setContextOp(ctx, tcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tendercompetitor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) FirstX(ctx context.Context) *TenderCompetitor {
	node, err := tcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TenderCompetitor ID from the query.
// Returns a *NotFoundError when no TenderCompetitor ID was found.
func (tcq *TenderCompetitorQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tcq.Limit(1).IDs(setContextOp(ctx, tcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tendercompetitor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := tcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TenderCompetitor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TenderCompetitor entity is found.
// Returns a *NotFoundError when no TenderCompetitor entities are found.
func (tcq *TenderCompetitorQuery) Only(ctx context.Context) (*TenderCompetitor, error) {
	nodes, err := tcq.Limit(2).All(setContextOp(ctx, tcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tendercompetitor.Label}
	default:
		return nil, &NotSingularError{tendercompetitor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) OnlyX(ctx context.Context) *TenderCompetitor {
	node, err := tcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TenderCompetitor ID in the query.
// Returns a *NotSingularError when more than one TenderCompetitor ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcq *TenderCompetitorQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tcq.Limit(2).IDs(setContextOp(ctx, tcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tendercompetitor.Label}
	default:
		err = &NotSingularError{tendercompetitor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := tcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TenderCompetitors.
func (tcq *TenderCompetitorQuery) All(ctx context.Context) ([]*TenderCompetitor, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryAll)
	if err := tcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TenderCompetitor, *TenderCompetitorQuery]()
	return withInterceptors[[]*TenderCompetitor](ctx, tcq, qr, tcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) AllX(ctx context.Context) []*TenderCompetitor {
	nodes, err := tcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TenderCompetitor IDs.
func (tcq *TenderCompetitorQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if tcq.ctx.Unique == nil && tcq.path != nil {
		tcq.Unique(true)
	}
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryIDs)
	if err = tcq.Select(tendercompetitor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := tcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcq *TenderCompetitorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryCount)
	if err := tcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcq, querierCount[*TenderCompetitorQuery](), tcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) CountX(ctx context.Context) int {
	count, err := tcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcq *TenderCompetitorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryExist)
	switch _, err := tcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcq *TenderCompetitorQuery) ExistX(ctx context.Context) bool {
	exist, err := tcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TenderCompetitorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcq *TenderCompetitorQuery) Clone() *TenderCompetitorQuery {
	if tcq == nil {
		return nil
	}
	return &TenderCompetitorQuery{
		config:         tcq.config,
		ctx:            tcq.ctx.Clone(),
		order:          append([]tendercompetitor.OrderOption{}, tcq.order...),
		inters:         append([]Interceptor{}, tcq.inters...),
		predicates:     append([]predicate.TenderCompetitor{}, tcq.predicates...),
		withTender:     tcq.withTender.Clone(),
		withCompetitor: tcq.withCompetitor.Clone(),
		// clone intermediate query.
		sql:       tcq.sql.Clone(),
		path:      tcq.path,
		modifiers: append([]func(*sql.Selector){}, tcq.modifiers...),
	}
}

// WithTender tells the query-builder to eager-load the nodes that are connected to
// the "tender" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *TenderCompetitorQuery) WithTender(opts ...func(*TenderQuery)) *TenderCompetitorQuery {
	query := (&TenderClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withTender = query
	return tcq
}

// WithCompetitor tells the query-builder to eager-load the nodes that are connected to
// the "competitor" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *TenderCompetitorQuery) WithCompetitor(opts ...func(*CompetitorQuery)) *TenderCompetitorQuery {
	query := (&CompetitorClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withCompetitor = query
	return tcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TenderCompetitor.Query().
//		GroupBy(tendercompetitor.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tcq *TenderCompetitorQuery) GroupBy(field string, fields ...string) *TenderCompetitorGroupBy {
	tcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TenderCompetitorGroupBy{build: tcq}
	grbuild.flds = &tcq.ctx.Fields
	grbuild.label = tendercompetitor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TenderCompetitor.Query().
//		Select(tendercompetitor.FieldCreatedAt).
//		Scan(ctx, &v)
func (tcq *TenderCompetitorQuery) Select(fields ...string) *TenderCompetitorSelect {
	tcq.ctx.Fields = append(tcq.ctx.Fields, fields...)
	sbuild := &TenderCompetitorSelect{TenderCompetitorQuery: tcq}
	sbuild.label = tendercompetitor.Label
	sbuild.flds, sbuild.scan = &tcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TenderCompetitorSelect configured with the given aggregations.
func (tcq *TenderCompetitorQuery) Aggregate(fns ...AggregateFunc) *TenderCompetitorSelect {
	return tcq.Select().Aggregate(fns...)
}

func (tcq *TenderCompetitorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcq.ctx.Fields {
		if !tendercompetitor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tcq.path != nil {
		prev, err := tcq.path(ctx)
		if err != nil {
			return err
		}
		tcq.sql = prev
	}
	return nil
}

func (tcq *TenderCompetitorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TenderCompetitor, error) {
	var (
		nodes       = []*TenderCompetitor{}
		_spec       = tcq.querySpec()
		loadedTypes = [2]bool{
			tcq.withTender != nil,
			tcq.withCompetitor != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TenderCompetitor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TenderCompetitor{config: tcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tcq.modifiers) > 0 {
		_spec.Modifiers = tcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tcq.withTender; query != nil {
		if err := tcq.loadTender(ctx, query, nodes, nil,
			func(n *TenderCompetitor, e *Tender) { n.Edges.Tender = e }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withCompetitor; query != nil {
		if err := tcq.loadCompetitor(ctx, query, nodes, nil,
			func(n *TenderCompetitor, e *Competitor) { n.Edges.Competitor = e }); err != nil {
			return nil, err
		}
	}
	for i := range tcq.loadTotal {
		if err := tcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcq *TenderCompetitorQuery) loadTender(ctx context.Context, query *TenderQuery, nodes []*TenderCompetitor, init func(*TenderCompetitor), assign func(*TenderCompetitor, *Tender)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderCompetitor)
	for i := range nodes {
		fk := nodes[i].TenderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tender.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tender_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tcq *TenderCompetitorQuery) loadCompetitor(ctx context.Context, query *CompetitorQuery, nodes []*TenderCompetitor, init func(*TenderCompetitor), assign func(*TenderCompetitor, *Competitor)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderCompetitor)
	for i := range nodes {
		fk := nodes[i].CompetitorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(competitor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "competitor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tcq *TenderCompetitorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcq.querySpec()
	if len(tcq.modifiers) > 0 {
		_spec.Modifiers = tcq.modifiers
	}
	_spec.Node.Columns = tcq.ctx.Fields
	if len(tcq.ctx.Fields) > 0 {
		_spec.Unique = tcq.ctx.Unique != nil && *tcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcq.driver, _spec)
}

func (tcq *TenderCompetitorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tendercompetitor.Table, tendercompetitor.Columns, sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString))
	_spec.From = tcq.sql
	if unique := tcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcq.path != nil {
		_spec.Unique = true
	}
	if fields := tcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tendercompetitor.FieldID)
		for i := range fields {
			if fields[i] != tendercompetitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tcq.withTender != nil {
			_spec.Node.AddColumnOnce(tendercompetitor.FieldTenderID)
		}
		if tcq.withCompetitor != nil {
			_spec.Node.AddColumnOnce(tendercompetitor.FieldCompetitorID)
		}
	}
	if ps := tcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcq *TenderCompetitorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcq.driver.Dialect())
	t1 := builder.Table(tendercompetitor.Table)
	columns := tcq.ctx.Fields
	if len(columns) == 0 {
		columns = tendercompetitor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcq.sql != nil {
		selector = tcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcq.ctx.Unique != nil && *tcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tcq.modifiers {
		m(selector)
	}
	for _, p := range tcq.predicates {
		p(selector)
	}
	for _, p := range tcq.order {
		p(selector)
	}
	if offset := tcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcq *TenderCompetitorQuery) Modify(modifiers ...func(s *sql.Selector)) *TenderCompetitorSelect {
	tcq.modifiers = append(tcq.modifiers, modifiers...)
	return tcq.Select()
}

// TenderCompetitorGroupBy is the group-by builder for TenderCompetitor entities.
type TenderCompetitorGroupBy struct {
	selector
	build *TenderCompetitorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcgb *TenderCompetitorGroupBy) Aggregate(fns ...AggregateFunc) *TenderCompetitorGroupBy {
	tcgb.fns = append(tcgb.fns, fns...)
	return tcgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcgb *TenderCompetitorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcgb.build.ctx, ent.OpQueryGroupBy)
	if err := tcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderCompetitorQuery, *TenderCompetitorGroupBy](ctx, tcgb.build, tcgb, tcgb.build.inters, v)
}

func (tcgb *TenderCompetitorGroupBy) sqlScan(ctx context.Context, root *TenderCompetitorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcgb.fns))
	for _, fn := range tcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcgb.flds)+len(tcgb.fns))
		for _, f := range *tcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TenderCompetitorSelect is the builder for selecting fields of TenderCompetitor entities.
type TenderCompetitorSelect struct {
	*TenderCompetitorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcs *TenderCompetitorSelect) Aggregate(fns ...AggregateFunc) *TenderCompetitorSelect {
	tcs.fns = append(tcs.fns, fns...)
	return tcs
}

// Scan applies the selector query and scans the result into the given value.
func (tcs *TenderCompetitorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcs.ctx, ent.OpQuerySelect)
	if err := tcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderCompetitorQuery, *TenderCompetitorSelect](ctx, tcs.TenderCompetitorQuery, tcs, tcs.inters, v)
}

func (tcs *TenderCompetitorSelect) sqlScan(ctx context.Context, root *TenderCompetitorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcs.fns))
	for _, fn := range tcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcs *TenderCompetitorSelect) Modify(modifiers ...func(s *sql.Selector)) *TenderCompetitorSelect {
	tcs.modifiers = append(tcs.modifiers, modifiers...)
	return tcs
}
