// Code generated by ent, DO NOT EDIT.

package project

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCode, v))
}

// IsFinished applies equality check predicate on the "is_finished" field. It's identical to IsFinishedEQ.
func IsFinished(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFinished, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// RevenueKpi applies equality check predicate on the "revenue_kpi" field. It's identical to RevenueKpiEQ.
func RevenueKpi(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueKpi, v))
}

// RevenueCurrentYearCompleted applies equality check predicate on the "revenue_current_year_completed" field. It's identical to RevenueCurrentYearCompletedEQ.
func RevenueCurrentYearCompleted(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueCurrentYearCompleted, v))
}

// RevenueAccumulatedCompleted applies equality check predicate on the "revenue_accumulated_completed" field. It's identical to RevenueAccumulatedCompletedEQ.
func RevenueAccumulatedCompleted(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueAccumulatedCompleted, v))
}

// PayDate applies equality check predicate on the "pay_date" field. It's identical to PayDateEQ.
func PayDate(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldPayDate, v))
}

// OwnerVoCount applies equality check predicate on the "owner_vo_count" field. It's identical to OwnerVoCountEQ.
func OwnerVoCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerVoCount, v))
}

// ContractorVoCount applies equality check predicate on the "contractor_vo_count" field. It's identical to ContractorVoCountEQ.
func ContractorVoCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorVoCount, v))
}

// AccumulateDeduction applies equality check predicate on the "accumulate_deduction" field. It's identical to AccumulateDeductionEQ.
func AccumulateDeduction(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAccumulateDeduction, v))
}

// SubcontractorVaCount applies equality check predicate on the "subcontractor_va_count" field. It's identical to SubcontractorVaCountEQ.
func SubcontractorVaCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSubcontractorVaCount, v))
}

// ContractSupplementaryCount applies equality check predicate on the "contract_supplementary_count" field. It's identical to ContractSupplementaryCountEQ.
func ContractSupplementaryCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractSupplementaryCount, v))
}

// RepairFee applies equality check predicate on the "repair_fee" field. It's identical to RepairFeeEQ.
func RepairFee(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepairFee, v))
}

// UnitInventoryTotal applies equality check predicate on the "unit_inventory_total" field. It's identical to UnitInventoryTotalEQ.
func UnitInventoryTotal(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitInventoryTotal, v))
}

// UnitComponentTotal applies equality check predicate on the "unit_component_total" field. It's identical to UnitComponentTotalEQ.
func UnitComponentTotal(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentTotal, v))
}

// UnitComponentProduction applies equality check predicate on the "unit_component_production" field. It's identical to UnitComponentProductionEQ.
func UnitComponentProduction(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentProduction, v))
}

// UnitComponentInstallation applies equality check predicate on the "unit_component_installation" field. It's identical to UnitComponentInstallationEQ.
func UnitComponentInstallation(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentInstallation, v))
}

// BulkMaterialsTotalOrderQuantity applies equality check predicate on the "bulk_materials_total_order_quantity" field. It's identical to BulkMaterialsTotalOrderQuantityEQ.
func BulkMaterialsTotalOrderQuantity(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsCompletedQuantity applies equality check predicate on the "bulk_materials_completed_quantity" field. It's identical to BulkMaterialsCompletedQuantityEQ.
func BulkMaterialsCompletedQuantity(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantity applies equality check predicate on the "bulk_materials_uncompleted_quantity" field. It's identical to BulkMaterialsUncompletedQuantityEQ.
func BulkMaterialsUncompletedQuantity(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsUncompletedQuantity, v))
}

// DiagramBdFinishCount applies equality check predicate on the "diagram_bd_finish_count" field. It's identical to DiagramBdFinishCountEQ.
func DiagramBdFinishCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramBdFinishCount, v))
}

// DiagramBdTotalCount applies equality check predicate on the "diagram_bd_total_count" field. It's identical to DiagramBdTotalCountEQ.
func DiagramBdTotalCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramBdTotalCount, v))
}

// DiagramConstructionFinishCount applies equality check predicate on the "diagram_construction_finish_count" field. It's identical to DiagramConstructionFinishCountEQ.
func DiagramConstructionFinishCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionTotalCount applies equality check predicate on the "diagram_construction_total_count" field. It's identical to DiagramConstructionTotalCountEQ.
func DiagramConstructionTotalCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramConstructionTotalCount, v))
}

// DiagramProcessingFinishCount applies equality check predicate on the "diagram_processing_finish_count" field. It's identical to DiagramProcessingFinishCountEQ.
func DiagramProcessingFinishCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingTotalCount applies equality check predicate on the "diagram_processing_total_count" field. It's identical to DiagramProcessingTotalCountEQ.
func DiagramProcessingTotalCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramProcessingTotalCount, v))
}

// DiagramCApprovalRatioNumerator applies equality check predicate on the "diagram_c_approval_ratio_numerator" field. It's identical to DiagramCApprovalRatioNumeratorEQ.
func DiagramCApprovalRatioNumerator(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioDenominator applies equality check predicate on the "diagram_c_approval_ratio_denominator" field. It's identical to DiagramCApprovalRatioDenominatorEQ.
func DiagramCApprovalRatioDenominator(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramCApprovalRatioDenominator, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldCode, v))
}

// IsFinishedEQ applies the EQ predicate on the "is_finished" field.
func IsFinishedEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFinished, v))
}

// IsFinishedNEQ applies the NEQ predicate on the "is_finished" field.
func IsFinishedNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldIsFinished, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// RevenueKpiEQ applies the EQ predicate on the "revenue_kpi" field.
func RevenueKpiEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueKpi, v))
}

// RevenueKpiNEQ applies the NEQ predicate on the "revenue_kpi" field.
func RevenueKpiNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRevenueKpi, v))
}

// RevenueKpiIn applies the In predicate on the "revenue_kpi" field.
func RevenueKpiIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRevenueKpi, vs...))
}

// RevenueKpiNotIn applies the NotIn predicate on the "revenue_kpi" field.
func RevenueKpiNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRevenueKpi, vs...))
}

// RevenueKpiGT applies the GT predicate on the "revenue_kpi" field.
func RevenueKpiGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRevenueKpi, v))
}

// RevenueKpiGTE applies the GTE predicate on the "revenue_kpi" field.
func RevenueKpiGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRevenueKpi, v))
}

// RevenueKpiLT applies the LT predicate on the "revenue_kpi" field.
func RevenueKpiLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRevenueKpi, v))
}

// RevenueKpiLTE applies the LTE predicate on the "revenue_kpi" field.
func RevenueKpiLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRevenueKpi, v))
}

// RevenueKpiIsNil applies the IsNil predicate on the "revenue_kpi" field.
func RevenueKpiIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldRevenueKpi))
}

// RevenueKpiNotNil applies the NotNil predicate on the "revenue_kpi" field.
func RevenueKpiNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldRevenueKpi))
}

// RevenueCurrentYearCompletedEQ applies the EQ predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedNEQ applies the NEQ predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedIn applies the In predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRevenueCurrentYearCompleted, vs...))
}

// RevenueCurrentYearCompletedNotIn applies the NotIn predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRevenueCurrentYearCompleted, vs...))
}

// RevenueCurrentYearCompletedGT applies the GT predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedGTE applies the GTE predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedLT applies the LT predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedLTE applies the LTE predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRevenueCurrentYearCompleted, v))
}

// RevenueCurrentYearCompletedIsNil applies the IsNil predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldRevenueCurrentYearCompleted))
}

// RevenueCurrentYearCompletedNotNil applies the NotNil predicate on the "revenue_current_year_completed" field.
func RevenueCurrentYearCompletedNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldRevenueCurrentYearCompleted))
}

// RevenueAccumulatedCompletedEQ applies the EQ predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedNEQ applies the NEQ predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedIn applies the In predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRevenueAccumulatedCompleted, vs...))
}

// RevenueAccumulatedCompletedNotIn applies the NotIn predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRevenueAccumulatedCompleted, vs...))
}

// RevenueAccumulatedCompletedGT applies the GT predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedGTE applies the GTE predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedLT applies the LT predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedLTE applies the LTE predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRevenueAccumulatedCompleted, v))
}

// RevenueAccumulatedCompletedIsNil applies the IsNil predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldRevenueAccumulatedCompleted))
}

// RevenueAccumulatedCompletedNotNil applies the NotNil predicate on the "revenue_accumulated_completed" field.
func RevenueAccumulatedCompletedNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldRevenueAccumulatedCompleted))
}

// PayDateEQ applies the EQ predicate on the "pay_date" field.
func PayDateEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldPayDate, v))
}

// PayDateNEQ applies the NEQ predicate on the "pay_date" field.
func PayDateNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldPayDate, v))
}

// PayDateIn applies the In predicate on the "pay_date" field.
func PayDateIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldPayDate, vs...))
}

// PayDateNotIn applies the NotIn predicate on the "pay_date" field.
func PayDateNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldPayDate, vs...))
}

// PayDateGT applies the GT predicate on the "pay_date" field.
func PayDateGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldPayDate, v))
}

// PayDateGTE applies the GTE predicate on the "pay_date" field.
func PayDateGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldPayDate, v))
}

// PayDateLT applies the LT predicate on the "pay_date" field.
func PayDateLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldPayDate, v))
}

// PayDateLTE applies the LTE predicate on the "pay_date" field.
func PayDateLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldPayDate, v))
}

// PayDateIsNil applies the IsNil predicate on the "pay_date" field.
func PayDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldPayDate))
}

// PayDateNotNil applies the NotNil predicate on the "pay_date" field.
func PayDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldPayDate))
}

// OwnerVoCountEQ applies the EQ predicate on the "owner_vo_count" field.
func OwnerVoCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerVoCount, v))
}

// OwnerVoCountNEQ applies the NEQ predicate on the "owner_vo_count" field.
func OwnerVoCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwnerVoCount, v))
}

// OwnerVoCountIn applies the In predicate on the "owner_vo_count" field.
func OwnerVoCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwnerVoCount, vs...))
}

// OwnerVoCountNotIn applies the NotIn predicate on the "owner_vo_count" field.
func OwnerVoCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwnerVoCount, vs...))
}

// OwnerVoCountGT applies the GT predicate on the "owner_vo_count" field.
func OwnerVoCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwnerVoCount, v))
}

// OwnerVoCountGTE applies the GTE predicate on the "owner_vo_count" field.
func OwnerVoCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwnerVoCount, v))
}

// OwnerVoCountLT applies the LT predicate on the "owner_vo_count" field.
func OwnerVoCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwnerVoCount, v))
}

// OwnerVoCountLTE applies the LTE predicate on the "owner_vo_count" field.
func OwnerVoCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwnerVoCount, v))
}

// OwnerVoCountIsNil applies the IsNil predicate on the "owner_vo_count" field.
func OwnerVoCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOwnerVoCount))
}

// OwnerVoCountNotNil applies the NotNil predicate on the "owner_vo_count" field.
func OwnerVoCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOwnerVoCount))
}

// ContractorVoCountEQ applies the EQ predicate on the "contractor_vo_count" field.
func ContractorVoCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorVoCount, v))
}

// ContractorVoCountNEQ applies the NEQ predicate on the "contractor_vo_count" field.
func ContractorVoCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractorVoCount, v))
}

// ContractorVoCountIn applies the In predicate on the "contractor_vo_count" field.
func ContractorVoCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractorVoCount, vs...))
}

// ContractorVoCountNotIn applies the NotIn predicate on the "contractor_vo_count" field.
func ContractorVoCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractorVoCount, vs...))
}

// ContractorVoCountGT applies the GT predicate on the "contractor_vo_count" field.
func ContractorVoCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractorVoCount, v))
}

// ContractorVoCountGTE applies the GTE predicate on the "contractor_vo_count" field.
func ContractorVoCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractorVoCount, v))
}

// ContractorVoCountLT applies the LT predicate on the "contractor_vo_count" field.
func ContractorVoCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractorVoCount, v))
}

// ContractorVoCountLTE applies the LTE predicate on the "contractor_vo_count" field.
func ContractorVoCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractorVoCount, v))
}

// ContractorVoCountIsNil applies the IsNil predicate on the "contractor_vo_count" field.
func ContractorVoCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractorVoCount))
}

// ContractorVoCountNotNil applies the NotNil predicate on the "contractor_vo_count" field.
func ContractorVoCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractorVoCount))
}

// AccumulateDeductionEQ applies the EQ predicate on the "accumulate_deduction" field.
func AccumulateDeductionEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAccumulateDeduction, v))
}

// AccumulateDeductionNEQ applies the NEQ predicate on the "accumulate_deduction" field.
func AccumulateDeductionNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAccumulateDeduction, v))
}

// AccumulateDeductionIn applies the In predicate on the "accumulate_deduction" field.
func AccumulateDeductionIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAccumulateDeduction, vs...))
}

// AccumulateDeductionNotIn applies the NotIn predicate on the "accumulate_deduction" field.
func AccumulateDeductionNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAccumulateDeduction, vs...))
}

// AccumulateDeductionGT applies the GT predicate on the "accumulate_deduction" field.
func AccumulateDeductionGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAccumulateDeduction, v))
}

// AccumulateDeductionGTE applies the GTE predicate on the "accumulate_deduction" field.
func AccumulateDeductionGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAccumulateDeduction, v))
}

// AccumulateDeductionLT applies the LT predicate on the "accumulate_deduction" field.
func AccumulateDeductionLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAccumulateDeduction, v))
}

// AccumulateDeductionLTE applies the LTE predicate on the "accumulate_deduction" field.
func AccumulateDeductionLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAccumulateDeduction, v))
}

// AccumulateDeductionIsNil applies the IsNil predicate on the "accumulate_deduction" field.
func AccumulateDeductionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAccumulateDeduction))
}

// AccumulateDeductionNotNil applies the NotNil predicate on the "accumulate_deduction" field.
func AccumulateDeductionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAccumulateDeduction))
}

// SubcontractorVaCountEQ applies the EQ predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountNEQ applies the NEQ predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountIn applies the In predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSubcontractorVaCount, vs...))
}

// SubcontractorVaCountNotIn applies the NotIn predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSubcontractorVaCount, vs...))
}

// SubcontractorVaCountGT applies the GT predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountGTE applies the GTE predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountLT applies the LT predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountLTE applies the LTE predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSubcontractorVaCount, v))
}

// SubcontractorVaCountIsNil applies the IsNil predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldSubcontractorVaCount))
}

// SubcontractorVaCountNotNil applies the NotNil predicate on the "subcontractor_va_count" field.
func SubcontractorVaCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldSubcontractorVaCount))
}

// ContractSupplementaryCountEQ applies the EQ predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountNEQ applies the NEQ predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountIn applies the In predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractSupplementaryCount, vs...))
}

// ContractSupplementaryCountNotIn applies the NotIn predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractSupplementaryCount, vs...))
}

// ContractSupplementaryCountGT applies the GT predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountGTE applies the GTE predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountLT applies the LT predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountLTE applies the LTE predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractSupplementaryCount, v))
}

// ContractSupplementaryCountIsNil applies the IsNil predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractSupplementaryCount))
}

// ContractSupplementaryCountNotNil applies the NotNil predicate on the "contract_supplementary_count" field.
func ContractSupplementaryCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractSupplementaryCount))
}

// RepairFeeEQ applies the EQ predicate on the "repair_fee" field.
func RepairFeeEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepairFee, v))
}

// RepairFeeNEQ applies the NEQ predicate on the "repair_fee" field.
func RepairFeeNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRepairFee, v))
}

// RepairFeeIn applies the In predicate on the "repair_fee" field.
func RepairFeeIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRepairFee, vs...))
}

// RepairFeeNotIn applies the NotIn predicate on the "repair_fee" field.
func RepairFeeNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRepairFee, vs...))
}

// RepairFeeGT applies the GT predicate on the "repair_fee" field.
func RepairFeeGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRepairFee, v))
}

// RepairFeeGTE applies the GTE predicate on the "repair_fee" field.
func RepairFeeGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRepairFee, v))
}

// RepairFeeLT applies the LT predicate on the "repair_fee" field.
func RepairFeeLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRepairFee, v))
}

// RepairFeeLTE applies the LTE predicate on the "repair_fee" field.
func RepairFeeLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRepairFee, v))
}

// RepairFeeIsNil applies the IsNil predicate on the "repair_fee" field.
func RepairFeeIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldRepairFee))
}

// RepairFeeNotNil applies the NotNil predicate on the "repair_fee" field.
func RepairFeeNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldRepairFee))
}

// UnitInventoryTotalEQ applies the EQ predicate on the "unit_inventory_total" field.
func UnitInventoryTotalEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalNEQ applies the NEQ predicate on the "unit_inventory_total" field.
func UnitInventoryTotalNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalIn applies the In predicate on the "unit_inventory_total" field.
func UnitInventoryTotalIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUnitInventoryTotal, vs...))
}

// UnitInventoryTotalNotIn applies the NotIn predicate on the "unit_inventory_total" field.
func UnitInventoryTotalNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUnitInventoryTotal, vs...))
}

// UnitInventoryTotalGT applies the GT predicate on the "unit_inventory_total" field.
func UnitInventoryTotalGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalGTE applies the GTE predicate on the "unit_inventory_total" field.
func UnitInventoryTotalGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalLT applies the LT predicate on the "unit_inventory_total" field.
func UnitInventoryTotalLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalLTE applies the LTE predicate on the "unit_inventory_total" field.
func UnitInventoryTotalLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUnitInventoryTotal, v))
}

// UnitInventoryTotalIsNil applies the IsNil predicate on the "unit_inventory_total" field.
func UnitInventoryTotalIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldUnitInventoryTotal))
}

// UnitInventoryTotalNotNil applies the NotNil predicate on the "unit_inventory_total" field.
func UnitInventoryTotalNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldUnitInventoryTotal))
}

// UnitComponentTotalEQ applies the EQ predicate on the "unit_component_total" field.
func UnitComponentTotalEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentTotal, v))
}

// UnitComponentTotalNEQ applies the NEQ predicate on the "unit_component_total" field.
func UnitComponentTotalNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUnitComponentTotal, v))
}

// UnitComponentTotalIn applies the In predicate on the "unit_component_total" field.
func UnitComponentTotalIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUnitComponentTotal, vs...))
}

// UnitComponentTotalNotIn applies the NotIn predicate on the "unit_component_total" field.
func UnitComponentTotalNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUnitComponentTotal, vs...))
}

// UnitComponentTotalGT applies the GT predicate on the "unit_component_total" field.
func UnitComponentTotalGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUnitComponentTotal, v))
}

// UnitComponentTotalGTE applies the GTE predicate on the "unit_component_total" field.
func UnitComponentTotalGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUnitComponentTotal, v))
}

// UnitComponentTotalLT applies the LT predicate on the "unit_component_total" field.
func UnitComponentTotalLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUnitComponentTotal, v))
}

// UnitComponentTotalLTE applies the LTE predicate on the "unit_component_total" field.
func UnitComponentTotalLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUnitComponentTotal, v))
}

// UnitComponentTotalIsNil applies the IsNil predicate on the "unit_component_total" field.
func UnitComponentTotalIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldUnitComponentTotal))
}

// UnitComponentTotalNotNil applies the NotNil predicate on the "unit_component_total" field.
func UnitComponentTotalNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldUnitComponentTotal))
}

// UnitComponentProductionEQ applies the EQ predicate on the "unit_component_production" field.
func UnitComponentProductionEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentProduction, v))
}

// UnitComponentProductionNEQ applies the NEQ predicate on the "unit_component_production" field.
func UnitComponentProductionNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUnitComponentProduction, v))
}

// UnitComponentProductionIn applies the In predicate on the "unit_component_production" field.
func UnitComponentProductionIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUnitComponentProduction, vs...))
}

// UnitComponentProductionNotIn applies the NotIn predicate on the "unit_component_production" field.
func UnitComponentProductionNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUnitComponentProduction, vs...))
}

// UnitComponentProductionGT applies the GT predicate on the "unit_component_production" field.
func UnitComponentProductionGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUnitComponentProduction, v))
}

// UnitComponentProductionGTE applies the GTE predicate on the "unit_component_production" field.
func UnitComponentProductionGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUnitComponentProduction, v))
}

// UnitComponentProductionLT applies the LT predicate on the "unit_component_production" field.
func UnitComponentProductionLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUnitComponentProduction, v))
}

// UnitComponentProductionLTE applies the LTE predicate on the "unit_component_production" field.
func UnitComponentProductionLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUnitComponentProduction, v))
}

// UnitComponentProductionIsNil applies the IsNil predicate on the "unit_component_production" field.
func UnitComponentProductionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldUnitComponentProduction))
}

// UnitComponentProductionNotNil applies the NotNil predicate on the "unit_component_production" field.
func UnitComponentProductionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldUnitComponentProduction))
}

// UnitComponentInstallationEQ applies the EQ predicate on the "unit_component_installation" field.
func UnitComponentInstallationEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationNEQ applies the NEQ predicate on the "unit_component_installation" field.
func UnitComponentInstallationNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationIn applies the In predicate on the "unit_component_installation" field.
func UnitComponentInstallationIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUnitComponentInstallation, vs...))
}

// UnitComponentInstallationNotIn applies the NotIn predicate on the "unit_component_installation" field.
func UnitComponentInstallationNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUnitComponentInstallation, vs...))
}

// UnitComponentInstallationGT applies the GT predicate on the "unit_component_installation" field.
func UnitComponentInstallationGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationGTE applies the GTE predicate on the "unit_component_installation" field.
func UnitComponentInstallationGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationLT applies the LT predicate on the "unit_component_installation" field.
func UnitComponentInstallationLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationLTE applies the LTE predicate on the "unit_component_installation" field.
func UnitComponentInstallationLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUnitComponentInstallation, v))
}

// UnitComponentInstallationIsNil applies the IsNil predicate on the "unit_component_installation" field.
func UnitComponentInstallationIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldUnitComponentInstallation))
}

// UnitComponentInstallationNotNil applies the NotNil predicate on the "unit_component_installation" field.
func UnitComponentInstallationNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldUnitComponentInstallation))
}

// BulkMaterialsTotalOrderQuantityEQ applies the EQ predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityNEQ applies the NEQ predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityIn applies the In predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldBulkMaterialsTotalOrderQuantity, vs...))
}

// BulkMaterialsTotalOrderQuantityNotIn applies the NotIn predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldBulkMaterialsTotalOrderQuantity, vs...))
}

// BulkMaterialsTotalOrderQuantityGT applies the GT predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityGTE applies the GTE predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityLT applies the LT predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityLTE applies the LTE predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldBulkMaterialsTotalOrderQuantity, v))
}

// BulkMaterialsTotalOrderQuantityIsNil applies the IsNil predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldBulkMaterialsTotalOrderQuantity))
}

// BulkMaterialsTotalOrderQuantityNotNil applies the NotNil predicate on the "bulk_materials_total_order_quantity" field.
func BulkMaterialsTotalOrderQuantityNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldBulkMaterialsTotalOrderQuantity))
}

// BulkMaterialsCompletedQuantityEQ applies the EQ predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityNEQ applies the NEQ predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityIn applies the In predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldBulkMaterialsCompletedQuantity, vs...))
}

// BulkMaterialsCompletedQuantityNotIn applies the NotIn predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldBulkMaterialsCompletedQuantity, vs...))
}

// BulkMaterialsCompletedQuantityGT applies the GT predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityGTE applies the GTE predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityLT applies the LT predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityLTE applies the LTE predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldBulkMaterialsCompletedQuantity, v))
}

// BulkMaterialsCompletedQuantityIsNil applies the IsNil predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldBulkMaterialsCompletedQuantity))
}

// BulkMaterialsCompletedQuantityNotNil applies the NotNil predicate on the "bulk_materials_completed_quantity" field.
func BulkMaterialsCompletedQuantityNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldBulkMaterialsCompletedQuantity))
}

// BulkMaterialsUncompletedQuantityEQ applies the EQ predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityNEQ applies the NEQ predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityIn applies the In predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldBulkMaterialsUncompletedQuantity, vs...))
}

// BulkMaterialsUncompletedQuantityNotIn applies the NotIn predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldBulkMaterialsUncompletedQuantity, vs...))
}

// BulkMaterialsUncompletedQuantityGT applies the GT predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityGTE applies the GTE predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityLT applies the LT predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityLTE applies the LTE predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldBulkMaterialsUncompletedQuantity, v))
}

// BulkMaterialsUncompletedQuantityIsNil applies the IsNil predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldBulkMaterialsUncompletedQuantity))
}

// BulkMaterialsUncompletedQuantityNotNil applies the NotNil predicate on the "bulk_materials_uncompleted_quantity" field.
func BulkMaterialsUncompletedQuantityNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldBulkMaterialsUncompletedQuantity))
}

// DiagramBdFinishCountEQ applies the EQ predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountNEQ applies the NEQ predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountIn applies the In predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramBdFinishCount, vs...))
}

// DiagramBdFinishCountNotIn applies the NotIn predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramBdFinishCount, vs...))
}

// DiagramBdFinishCountGT applies the GT predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountGTE applies the GTE predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountLT applies the LT predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountLTE applies the LTE predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramBdFinishCount, v))
}

// DiagramBdFinishCountIsNil applies the IsNil predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramBdFinishCount))
}

// DiagramBdFinishCountNotNil applies the NotNil predicate on the "diagram_bd_finish_count" field.
func DiagramBdFinishCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramBdFinishCount))
}

// DiagramBdTotalCountEQ applies the EQ predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountNEQ applies the NEQ predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountIn applies the In predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramBdTotalCount, vs...))
}

// DiagramBdTotalCountNotIn applies the NotIn predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramBdTotalCount, vs...))
}

// DiagramBdTotalCountGT applies the GT predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountGTE applies the GTE predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountLT applies the LT predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountLTE applies the LTE predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramBdTotalCount, v))
}

// DiagramBdTotalCountIsNil applies the IsNil predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramBdTotalCount))
}

// DiagramBdTotalCountNotNil applies the NotNil predicate on the "diagram_bd_total_count" field.
func DiagramBdTotalCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramBdTotalCount))
}

// DiagramConstructionFinishCountEQ applies the EQ predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountNEQ applies the NEQ predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountIn applies the In predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramConstructionFinishCount, vs...))
}

// DiagramConstructionFinishCountNotIn applies the NotIn predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramConstructionFinishCount, vs...))
}

// DiagramConstructionFinishCountGT applies the GT predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountGTE applies the GTE predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountLT applies the LT predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountLTE applies the LTE predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramConstructionFinishCount, v))
}

// DiagramConstructionFinishCountIsNil applies the IsNil predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramConstructionFinishCount))
}

// DiagramConstructionFinishCountNotNil applies the NotNil predicate on the "diagram_construction_finish_count" field.
func DiagramConstructionFinishCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramConstructionFinishCount))
}

// DiagramConstructionTotalCountEQ applies the EQ predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountNEQ applies the NEQ predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountIn applies the In predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramConstructionTotalCount, vs...))
}

// DiagramConstructionTotalCountNotIn applies the NotIn predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramConstructionTotalCount, vs...))
}

// DiagramConstructionTotalCountGT applies the GT predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountGTE applies the GTE predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountLT applies the LT predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountLTE applies the LTE predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramConstructionTotalCount, v))
}

// DiagramConstructionTotalCountIsNil applies the IsNil predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramConstructionTotalCount))
}

// DiagramConstructionTotalCountNotNil applies the NotNil predicate on the "diagram_construction_total_count" field.
func DiagramConstructionTotalCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramConstructionTotalCount))
}

// DiagramProcessingFinishCountEQ applies the EQ predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountNEQ applies the NEQ predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountIn applies the In predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramProcessingFinishCount, vs...))
}

// DiagramProcessingFinishCountNotIn applies the NotIn predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramProcessingFinishCount, vs...))
}

// DiagramProcessingFinishCountGT applies the GT predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountGTE applies the GTE predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountLT applies the LT predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountLTE applies the LTE predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramProcessingFinishCount, v))
}

// DiagramProcessingFinishCountIsNil applies the IsNil predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramProcessingFinishCount))
}

// DiagramProcessingFinishCountNotNil applies the NotNil predicate on the "diagram_processing_finish_count" field.
func DiagramProcessingFinishCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramProcessingFinishCount))
}

// DiagramProcessingTotalCountEQ applies the EQ predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountNEQ applies the NEQ predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountIn applies the In predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramProcessingTotalCount, vs...))
}

// DiagramProcessingTotalCountNotIn applies the NotIn predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramProcessingTotalCount, vs...))
}

// DiagramProcessingTotalCountGT applies the GT predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountGTE applies the GTE predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountLT applies the LT predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountLTE applies the LTE predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramProcessingTotalCount, v))
}

// DiagramProcessingTotalCountIsNil applies the IsNil predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramProcessingTotalCount))
}

// DiagramProcessingTotalCountNotNil applies the NotNil predicate on the "diagram_processing_total_count" field.
func DiagramProcessingTotalCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramProcessingTotalCount))
}

// DiagramCApprovalRatioNumeratorEQ applies the EQ predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorNEQ applies the NEQ predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorIn applies the In predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramCApprovalRatioNumerator, vs...))
}

// DiagramCApprovalRatioNumeratorNotIn applies the NotIn predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramCApprovalRatioNumerator, vs...))
}

// DiagramCApprovalRatioNumeratorGT applies the GT predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorGTE applies the GTE predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorLT applies the LT predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorLTE applies the LTE predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramCApprovalRatioNumerator, v))
}

// DiagramCApprovalRatioNumeratorIsNil applies the IsNil predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramCApprovalRatioNumerator))
}

// DiagramCApprovalRatioNumeratorNotNil applies the NotNil predicate on the "diagram_c_approval_ratio_numerator" field.
func DiagramCApprovalRatioNumeratorNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramCApprovalRatioNumerator))
}

// DiagramCApprovalRatioDenominatorEQ applies the EQ predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorNEQ applies the NEQ predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorIn applies the In predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDiagramCApprovalRatioDenominator, vs...))
}

// DiagramCApprovalRatioDenominatorNotIn applies the NotIn predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDiagramCApprovalRatioDenominator, vs...))
}

// DiagramCApprovalRatioDenominatorGT applies the GT predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorGTE applies the GTE predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorLT applies the LT predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorLTE applies the LTE predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDiagramCApprovalRatioDenominator, v))
}

// DiagramCApprovalRatioDenominatorIsNil applies the IsNil predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDiagramCApprovalRatioDenominator))
}

// DiagramCApprovalRatioDenominatorNotNil applies the NotNil predicate on the "diagram_c_approval_ratio_denominator" field.
func DiagramCApprovalRatioDenominatorNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDiagramCApprovalRatioDenominator))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
