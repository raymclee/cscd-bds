// Code generated by ent, DO NOT EDIT.

package project

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// IsFinished applies equality check predicate on the "is_finished" field. It's identical to IsFinishedEQ.
func IsFinished(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFinished, v))
}

// Cje applies equality check predicate on the "cje" field. It's identical to CjeEQ.
func Cje(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCje, v))
}

// Yye applies equality check predicate on the "yye" field. It's identical to YyeEQ.
func Yye(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldYye, v))
}

// Xjl applies equality check predicate on the "xjl" field. It's identical to XjlEQ.
func Xjl(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXjl, v))
}

// XmglfYs applies equality check predicate on the "xmglf_ys" field. It's identical to XmglfYsEQ.
func XmglfYs(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmglfYs, v))
}

// XmglfLj applies equality check predicate on the "xmglf_lj" field. It's identical to XmglfLjEQ.
func XmglfLj(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmglfLj, v))
}

// Xmsjf applies equality check predicate on the "xmsjf" field. It's identical to XmsjfEQ.
func Xmsjf(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmsjf, v))
}

// Xmfzr applies equality check predicate on the "xmfzr" field. It's identical to XmfzrEQ.
func Xmfzr(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmfzr, v))
}

// OwnerApplyAmount applies equality check predicate on the "owner_apply_amount" field. It's identical to OwnerApplyAmountEQ.
func OwnerApplyAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApplyAmount, v))
}

// OwnerApplyCount applies equality check predicate on the "owner_apply_count" field. It's identical to OwnerApplyCountEQ.
func OwnerApplyCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApplyCount, v))
}

// OwnerApproveAmount applies equality check predicate on the "owner_approve_amount" field. It's identical to OwnerApproveAmountEQ.
func OwnerApproveAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApproveAmount, v))
}

// OwnerApproveCount applies equality check predicate on the "owner_approve_count" field. It's identical to OwnerApproveCountEQ.
func OwnerApproveCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApproveCount, v))
}

// ContractorApplyAmount applies equality check predicate on the "contractor_apply_amount" field. It's identical to ContractorApplyAmountEQ.
func ContractorApplyAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApplyAmount, v))
}

// ContractorApplyCount applies equality check predicate on the "contractor_apply_count" field. It's identical to ContractorApplyCountEQ.
func ContractorApplyCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApplyCount, v))
}

// ContractorApproveAmount applies equality check predicate on the "contractor_approve_amount" field. It's identical to ContractorApproveAmountEQ.
func ContractorApproveAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApproveAmount, v))
}

// ContractorApproveCount applies equality check predicate on the "contractor_approve_count" field. It's identical to ContractorApproveCountEQ.
func ContractorApproveCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApproveCount, v))
}

// InstallProgress applies equality check predicate on the "install_progress" field. It's identical to InstallProgressEQ.
func InstallProgress(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldInstallProgress, v))
}

// EffectiveContractAmount applies equality check predicate on the "effective_contract_amount" field. It's identical to EffectiveContractAmountEQ.
func EffectiveContractAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldEffectiveContractAmount, v))
}

// VaApplyAmount applies equality check predicate on the "va_apply_amount" field. It's identical to VaApplyAmountEQ.
func VaApplyAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVaApplyAmount, v))
}

// VaApproveAmount applies equality check predicate on the "va_approve_amount" field. It's identical to VaApproveAmountEQ.
func VaApproveAmount(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVaApproveAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// IsFinishedEQ applies the EQ predicate on the "is_finished" field.
func IsFinishedEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFinished, v))
}

// IsFinishedNEQ applies the NEQ predicate on the "is_finished" field.
func IsFinishedNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldIsFinished, v))
}

// CjeEQ applies the EQ predicate on the "cje" field.
func CjeEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCje, v))
}

// CjeNEQ applies the NEQ predicate on the "cje" field.
func CjeNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCje, v))
}

// CjeIn applies the In predicate on the "cje" field.
func CjeIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCje, vs...))
}

// CjeNotIn applies the NotIn predicate on the "cje" field.
func CjeNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCje, vs...))
}

// CjeGT applies the GT predicate on the "cje" field.
func CjeGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCje, v))
}

// CjeGTE applies the GTE predicate on the "cje" field.
func CjeGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCje, v))
}

// CjeLT applies the LT predicate on the "cje" field.
func CjeLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCje, v))
}

// CjeLTE applies the LTE predicate on the "cje" field.
func CjeLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCje, v))
}

// CjeIsNil applies the IsNil predicate on the "cje" field.
func CjeIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldCje))
}

// CjeNotNil applies the NotNil predicate on the "cje" field.
func CjeNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldCje))
}

// YyeEQ applies the EQ predicate on the "yye" field.
func YyeEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldYye, v))
}

// YyeNEQ applies the NEQ predicate on the "yye" field.
func YyeNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldYye, v))
}

// YyeIn applies the In predicate on the "yye" field.
func YyeIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldYye, vs...))
}

// YyeNotIn applies the NotIn predicate on the "yye" field.
func YyeNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldYye, vs...))
}

// YyeGT applies the GT predicate on the "yye" field.
func YyeGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldYye, v))
}

// YyeGTE applies the GTE predicate on the "yye" field.
func YyeGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldYye, v))
}

// YyeLT applies the LT predicate on the "yye" field.
func YyeLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldYye, v))
}

// YyeLTE applies the LTE predicate on the "yye" field.
func YyeLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldYye, v))
}

// YyeIsNil applies the IsNil predicate on the "yye" field.
func YyeIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldYye))
}

// YyeNotNil applies the NotNil predicate on the "yye" field.
func YyeNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldYye))
}

// XjlEQ applies the EQ predicate on the "xjl" field.
func XjlEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXjl, v))
}

// XjlNEQ applies the NEQ predicate on the "xjl" field.
func XjlNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldXjl, v))
}

// XjlIn applies the In predicate on the "xjl" field.
func XjlIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldXjl, vs...))
}

// XjlNotIn applies the NotIn predicate on the "xjl" field.
func XjlNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldXjl, vs...))
}

// XjlGT applies the GT predicate on the "xjl" field.
func XjlGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldXjl, v))
}

// XjlGTE applies the GTE predicate on the "xjl" field.
func XjlGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldXjl, v))
}

// XjlLT applies the LT predicate on the "xjl" field.
func XjlLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldXjl, v))
}

// XjlLTE applies the LTE predicate on the "xjl" field.
func XjlLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldXjl, v))
}

// XjlIsNil applies the IsNil predicate on the "xjl" field.
func XjlIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldXjl))
}

// XjlNotNil applies the NotNil predicate on the "xjl" field.
func XjlNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldXjl))
}

// XmglfYsEQ applies the EQ predicate on the "xmglf_ys" field.
func XmglfYsEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmglfYs, v))
}

// XmglfYsNEQ applies the NEQ predicate on the "xmglf_ys" field.
func XmglfYsNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldXmglfYs, v))
}

// XmglfYsIn applies the In predicate on the "xmglf_ys" field.
func XmglfYsIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldXmglfYs, vs...))
}

// XmglfYsNotIn applies the NotIn predicate on the "xmglf_ys" field.
func XmglfYsNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldXmglfYs, vs...))
}

// XmglfYsGT applies the GT predicate on the "xmglf_ys" field.
func XmglfYsGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldXmglfYs, v))
}

// XmglfYsGTE applies the GTE predicate on the "xmglf_ys" field.
func XmglfYsGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldXmglfYs, v))
}

// XmglfYsLT applies the LT predicate on the "xmglf_ys" field.
func XmglfYsLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldXmglfYs, v))
}

// XmglfYsLTE applies the LTE predicate on the "xmglf_ys" field.
func XmglfYsLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldXmglfYs, v))
}

// XmglfYsIsNil applies the IsNil predicate on the "xmglf_ys" field.
func XmglfYsIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldXmglfYs))
}

// XmglfYsNotNil applies the NotNil predicate on the "xmglf_ys" field.
func XmglfYsNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldXmglfYs))
}

// XmglfLjEQ applies the EQ predicate on the "xmglf_lj" field.
func XmglfLjEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmglfLj, v))
}

// XmglfLjNEQ applies the NEQ predicate on the "xmglf_lj" field.
func XmglfLjNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldXmglfLj, v))
}

// XmglfLjIn applies the In predicate on the "xmglf_lj" field.
func XmglfLjIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldXmglfLj, vs...))
}

// XmglfLjNotIn applies the NotIn predicate on the "xmglf_lj" field.
func XmglfLjNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldXmglfLj, vs...))
}

// XmglfLjGT applies the GT predicate on the "xmglf_lj" field.
func XmglfLjGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldXmglfLj, v))
}

// XmglfLjGTE applies the GTE predicate on the "xmglf_lj" field.
func XmglfLjGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldXmglfLj, v))
}

// XmglfLjLT applies the LT predicate on the "xmglf_lj" field.
func XmglfLjLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldXmglfLj, v))
}

// XmglfLjLTE applies the LTE predicate on the "xmglf_lj" field.
func XmglfLjLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldXmglfLj, v))
}

// XmglfLjIsNil applies the IsNil predicate on the "xmglf_lj" field.
func XmglfLjIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldXmglfLj))
}

// XmglfLjNotNil applies the NotNil predicate on the "xmglf_lj" field.
func XmglfLjNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldXmglfLj))
}

// XmsjfEQ applies the EQ predicate on the "xmsjf" field.
func XmsjfEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmsjf, v))
}

// XmsjfNEQ applies the NEQ predicate on the "xmsjf" field.
func XmsjfNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldXmsjf, v))
}

// XmsjfIn applies the In predicate on the "xmsjf" field.
func XmsjfIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldXmsjf, vs...))
}

// XmsjfNotIn applies the NotIn predicate on the "xmsjf" field.
func XmsjfNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldXmsjf, vs...))
}

// XmsjfGT applies the GT predicate on the "xmsjf" field.
func XmsjfGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldXmsjf, v))
}

// XmsjfGTE applies the GTE predicate on the "xmsjf" field.
func XmsjfGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldXmsjf, v))
}

// XmsjfLT applies the LT predicate on the "xmsjf" field.
func XmsjfLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldXmsjf, v))
}

// XmsjfLTE applies the LTE predicate on the "xmsjf" field.
func XmsjfLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldXmsjf, v))
}

// XmsjfIsNil applies the IsNil predicate on the "xmsjf" field.
func XmsjfIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldXmsjf))
}

// XmsjfNotNil applies the NotNil predicate on the "xmsjf" field.
func XmsjfNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldXmsjf))
}

// XmfzrEQ applies the EQ predicate on the "xmfzr" field.
func XmfzrEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldXmfzr, v))
}

// XmfzrNEQ applies the NEQ predicate on the "xmfzr" field.
func XmfzrNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldXmfzr, v))
}

// XmfzrIn applies the In predicate on the "xmfzr" field.
func XmfzrIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldXmfzr, vs...))
}

// XmfzrNotIn applies the NotIn predicate on the "xmfzr" field.
func XmfzrNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldXmfzr, vs...))
}

// XmfzrGT applies the GT predicate on the "xmfzr" field.
func XmfzrGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldXmfzr, v))
}

// XmfzrGTE applies the GTE predicate on the "xmfzr" field.
func XmfzrGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldXmfzr, v))
}

// XmfzrLT applies the LT predicate on the "xmfzr" field.
func XmfzrLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldXmfzr, v))
}

// XmfzrLTE applies the LTE predicate on the "xmfzr" field.
func XmfzrLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldXmfzr, v))
}

// XmfzrContains applies the Contains predicate on the "xmfzr" field.
func XmfzrContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldXmfzr, v))
}

// XmfzrHasPrefix applies the HasPrefix predicate on the "xmfzr" field.
func XmfzrHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldXmfzr, v))
}

// XmfzrHasSuffix applies the HasSuffix predicate on the "xmfzr" field.
func XmfzrHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldXmfzr, v))
}

// XmfzrIsNil applies the IsNil predicate on the "xmfzr" field.
func XmfzrIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldXmfzr))
}

// XmfzrNotNil applies the NotNil predicate on the "xmfzr" field.
func XmfzrNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldXmfzr))
}

// XmfzrEqualFold applies the EqualFold predicate on the "xmfzr" field.
func XmfzrEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldXmfzr, v))
}

// XmfzrContainsFold applies the ContainsFold predicate on the "xmfzr" field.
func XmfzrContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldXmfzr, v))
}

// OwnerApplyAmountEQ applies the EQ predicate on the "owner_apply_amount" field.
func OwnerApplyAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountNEQ applies the NEQ predicate on the "owner_apply_amount" field.
func OwnerApplyAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountIn applies the In predicate on the "owner_apply_amount" field.
func OwnerApplyAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwnerApplyAmount, vs...))
}

// OwnerApplyAmountNotIn applies the NotIn predicate on the "owner_apply_amount" field.
func OwnerApplyAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwnerApplyAmount, vs...))
}

// OwnerApplyAmountGT applies the GT predicate on the "owner_apply_amount" field.
func OwnerApplyAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountGTE applies the GTE predicate on the "owner_apply_amount" field.
func OwnerApplyAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountLT applies the LT predicate on the "owner_apply_amount" field.
func OwnerApplyAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountLTE applies the LTE predicate on the "owner_apply_amount" field.
func OwnerApplyAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwnerApplyAmount, v))
}

// OwnerApplyAmountIsNil applies the IsNil predicate on the "owner_apply_amount" field.
func OwnerApplyAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOwnerApplyAmount))
}

// OwnerApplyAmountNotNil applies the NotNil predicate on the "owner_apply_amount" field.
func OwnerApplyAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOwnerApplyAmount))
}

// OwnerApplyCountEQ applies the EQ predicate on the "owner_apply_count" field.
func OwnerApplyCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApplyCount, v))
}

// OwnerApplyCountNEQ applies the NEQ predicate on the "owner_apply_count" field.
func OwnerApplyCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwnerApplyCount, v))
}

// OwnerApplyCountIn applies the In predicate on the "owner_apply_count" field.
func OwnerApplyCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwnerApplyCount, vs...))
}

// OwnerApplyCountNotIn applies the NotIn predicate on the "owner_apply_count" field.
func OwnerApplyCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwnerApplyCount, vs...))
}

// OwnerApplyCountGT applies the GT predicate on the "owner_apply_count" field.
func OwnerApplyCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwnerApplyCount, v))
}

// OwnerApplyCountGTE applies the GTE predicate on the "owner_apply_count" field.
func OwnerApplyCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwnerApplyCount, v))
}

// OwnerApplyCountLT applies the LT predicate on the "owner_apply_count" field.
func OwnerApplyCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwnerApplyCount, v))
}

// OwnerApplyCountLTE applies the LTE predicate on the "owner_apply_count" field.
func OwnerApplyCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwnerApplyCount, v))
}

// OwnerApplyCountIsNil applies the IsNil predicate on the "owner_apply_count" field.
func OwnerApplyCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOwnerApplyCount))
}

// OwnerApplyCountNotNil applies the NotNil predicate on the "owner_apply_count" field.
func OwnerApplyCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOwnerApplyCount))
}

// OwnerApproveAmountEQ applies the EQ predicate on the "owner_approve_amount" field.
func OwnerApproveAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountNEQ applies the NEQ predicate on the "owner_approve_amount" field.
func OwnerApproveAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountIn applies the In predicate on the "owner_approve_amount" field.
func OwnerApproveAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwnerApproveAmount, vs...))
}

// OwnerApproveAmountNotIn applies the NotIn predicate on the "owner_approve_amount" field.
func OwnerApproveAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwnerApproveAmount, vs...))
}

// OwnerApproveAmountGT applies the GT predicate on the "owner_approve_amount" field.
func OwnerApproveAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountGTE applies the GTE predicate on the "owner_approve_amount" field.
func OwnerApproveAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountLT applies the LT predicate on the "owner_approve_amount" field.
func OwnerApproveAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountLTE applies the LTE predicate on the "owner_approve_amount" field.
func OwnerApproveAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwnerApproveAmount, v))
}

// OwnerApproveAmountIsNil applies the IsNil predicate on the "owner_approve_amount" field.
func OwnerApproveAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOwnerApproveAmount))
}

// OwnerApproveAmountNotNil applies the NotNil predicate on the "owner_approve_amount" field.
func OwnerApproveAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOwnerApproveAmount))
}

// OwnerApproveCountEQ applies the EQ predicate on the "owner_approve_count" field.
func OwnerApproveCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOwnerApproveCount, v))
}

// OwnerApproveCountNEQ applies the NEQ predicate on the "owner_approve_count" field.
func OwnerApproveCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOwnerApproveCount, v))
}

// OwnerApproveCountIn applies the In predicate on the "owner_approve_count" field.
func OwnerApproveCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOwnerApproveCount, vs...))
}

// OwnerApproveCountNotIn applies the NotIn predicate on the "owner_approve_count" field.
func OwnerApproveCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOwnerApproveCount, vs...))
}

// OwnerApproveCountGT applies the GT predicate on the "owner_approve_count" field.
func OwnerApproveCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOwnerApproveCount, v))
}

// OwnerApproveCountGTE applies the GTE predicate on the "owner_approve_count" field.
func OwnerApproveCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOwnerApproveCount, v))
}

// OwnerApproveCountLT applies the LT predicate on the "owner_approve_count" field.
func OwnerApproveCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOwnerApproveCount, v))
}

// OwnerApproveCountLTE applies the LTE predicate on the "owner_approve_count" field.
func OwnerApproveCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOwnerApproveCount, v))
}

// OwnerApproveCountIsNil applies the IsNil predicate on the "owner_approve_count" field.
func OwnerApproveCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOwnerApproveCount))
}

// OwnerApproveCountNotNil applies the NotNil predicate on the "owner_approve_count" field.
func OwnerApproveCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOwnerApproveCount))
}

// ContractorApplyAmountEQ applies the EQ predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountNEQ applies the NEQ predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountIn applies the In predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractorApplyAmount, vs...))
}

// ContractorApplyAmountNotIn applies the NotIn predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractorApplyAmount, vs...))
}

// ContractorApplyAmountGT applies the GT predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountGTE applies the GTE predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountLT applies the LT predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountLTE applies the LTE predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractorApplyAmount, v))
}

// ContractorApplyAmountIsNil applies the IsNil predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractorApplyAmount))
}

// ContractorApplyAmountNotNil applies the NotNil predicate on the "contractor_apply_amount" field.
func ContractorApplyAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractorApplyAmount))
}

// ContractorApplyCountEQ applies the EQ predicate on the "contractor_apply_count" field.
func ContractorApplyCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApplyCount, v))
}

// ContractorApplyCountNEQ applies the NEQ predicate on the "contractor_apply_count" field.
func ContractorApplyCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractorApplyCount, v))
}

// ContractorApplyCountIn applies the In predicate on the "contractor_apply_count" field.
func ContractorApplyCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractorApplyCount, vs...))
}

// ContractorApplyCountNotIn applies the NotIn predicate on the "contractor_apply_count" field.
func ContractorApplyCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractorApplyCount, vs...))
}

// ContractorApplyCountGT applies the GT predicate on the "contractor_apply_count" field.
func ContractorApplyCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractorApplyCount, v))
}

// ContractorApplyCountGTE applies the GTE predicate on the "contractor_apply_count" field.
func ContractorApplyCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractorApplyCount, v))
}

// ContractorApplyCountLT applies the LT predicate on the "contractor_apply_count" field.
func ContractorApplyCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractorApplyCount, v))
}

// ContractorApplyCountLTE applies the LTE predicate on the "contractor_apply_count" field.
func ContractorApplyCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractorApplyCount, v))
}

// ContractorApplyCountIsNil applies the IsNil predicate on the "contractor_apply_count" field.
func ContractorApplyCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractorApplyCount))
}

// ContractorApplyCountNotNil applies the NotNil predicate on the "contractor_apply_count" field.
func ContractorApplyCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractorApplyCount))
}

// ContractorApproveAmountEQ applies the EQ predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountNEQ applies the NEQ predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountIn applies the In predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractorApproveAmount, vs...))
}

// ContractorApproveAmountNotIn applies the NotIn predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractorApproveAmount, vs...))
}

// ContractorApproveAmountGT applies the GT predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountGTE applies the GTE predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountLT applies the LT predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountLTE applies the LTE predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractorApproveAmount, v))
}

// ContractorApproveAmountIsNil applies the IsNil predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractorApproveAmount))
}

// ContractorApproveAmountNotNil applies the NotNil predicate on the "contractor_approve_amount" field.
func ContractorApproveAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractorApproveAmount))
}

// ContractorApproveCountEQ applies the EQ predicate on the "contractor_approve_count" field.
func ContractorApproveCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldContractorApproveCount, v))
}

// ContractorApproveCountNEQ applies the NEQ predicate on the "contractor_approve_count" field.
func ContractorApproveCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldContractorApproveCount, v))
}

// ContractorApproveCountIn applies the In predicate on the "contractor_approve_count" field.
func ContractorApproveCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldContractorApproveCount, vs...))
}

// ContractorApproveCountNotIn applies the NotIn predicate on the "contractor_approve_count" field.
func ContractorApproveCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldContractorApproveCount, vs...))
}

// ContractorApproveCountGT applies the GT predicate on the "contractor_approve_count" field.
func ContractorApproveCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldContractorApproveCount, v))
}

// ContractorApproveCountGTE applies the GTE predicate on the "contractor_approve_count" field.
func ContractorApproveCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldContractorApproveCount, v))
}

// ContractorApproveCountLT applies the LT predicate on the "contractor_approve_count" field.
func ContractorApproveCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldContractorApproveCount, v))
}

// ContractorApproveCountLTE applies the LTE predicate on the "contractor_approve_count" field.
func ContractorApproveCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldContractorApproveCount, v))
}

// ContractorApproveCountIsNil applies the IsNil predicate on the "contractor_approve_count" field.
func ContractorApproveCountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldContractorApproveCount))
}

// ContractorApproveCountNotNil applies the NotNil predicate on the "contractor_approve_count" field.
func ContractorApproveCountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldContractorApproveCount))
}

// InstallProgressEQ applies the EQ predicate on the "install_progress" field.
func InstallProgressEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldInstallProgress, v))
}

// InstallProgressNEQ applies the NEQ predicate on the "install_progress" field.
func InstallProgressNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldInstallProgress, v))
}

// InstallProgressIn applies the In predicate on the "install_progress" field.
func InstallProgressIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldInstallProgress, vs...))
}

// InstallProgressNotIn applies the NotIn predicate on the "install_progress" field.
func InstallProgressNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldInstallProgress, vs...))
}

// InstallProgressGT applies the GT predicate on the "install_progress" field.
func InstallProgressGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldInstallProgress, v))
}

// InstallProgressGTE applies the GTE predicate on the "install_progress" field.
func InstallProgressGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldInstallProgress, v))
}

// InstallProgressLT applies the LT predicate on the "install_progress" field.
func InstallProgressLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldInstallProgress, v))
}

// InstallProgressLTE applies the LTE predicate on the "install_progress" field.
func InstallProgressLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldInstallProgress, v))
}

// InstallProgressIsNil applies the IsNil predicate on the "install_progress" field.
func InstallProgressIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldInstallProgress))
}

// InstallProgressNotNil applies the NotNil predicate on the "install_progress" field.
func InstallProgressNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldInstallProgress))
}

// EffectiveContractAmountEQ applies the EQ predicate on the "effective_contract_amount" field.
func EffectiveContractAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountNEQ applies the NEQ predicate on the "effective_contract_amount" field.
func EffectiveContractAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountIn applies the In predicate on the "effective_contract_amount" field.
func EffectiveContractAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldEffectiveContractAmount, vs...))
}

// EffectiveContractAmountNotIn applies the NotIn predicate on the "effective_contract_amount" field.
func EffectiveContractAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldEffectiveContractAmount, vs...))
}

// EffectiveContractAmountGT applies the GT predicate on the "effective_contract_amount" field.
func EffectiveContractAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountGTE applies the GTE predicate on the "effective_contract_amount" field.
func EffectiveContractAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountLT applies the LT predicate on the "effective_contract_amount" field.
func EffectiveContractAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountLTE applies the LTE predicate on the "effective_contract_amount" field.
func EffectiveContractAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldEffectiveContractAmount, v))
}

// EffectiveContractAmountIsNil applies the IsNil predicate on the "effective_contract_amount" field.
func EffectiveContractAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldEffectiveContractAmount))
}

// EffectiveContractAmountNotNil applies the NotNil predicate on the "effective_contract_amount" field.
func EffectiveContractAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldEffectiveContractAmount))
}

// VaApplyAmountEQ applies the EQ predicate on the "va_apply_amount" field.
func VaApplyAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVaApplyAmount, v))
}

// VaApplyAmountNEQ applies the NEQ predicate on the "va_apply_amount" field.
func VaApplyAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldVaApplyAmount, v))
}

// VaApplyAmountIn applies the In predicate on the "va_apply_amount" field.
func VaApplyAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldVaApplyAmount, vs...))
}

// VaApplyAmountNotIn applies the NotIn predicate on the "va_apply_amount" field.
func VaApplyAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldVaApplyAmount, vs...))
}

// VaApplyAmountGT applies the GT predicate on the "va_apply_amount" field.
func VaApplyAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldVaApplyAmount, v))
}

// VaApplyAmountGTE applies the GTE predicate on the "va_apply_amount" field.
func VaApplyAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldVaApplyAmount, v))
}

// VaApplyAmountLT applies the LT predicate on the "va_apply_amount" field.
func VaApplyAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldVaApplyAmount, v))
}

// VaApplyAmountLTE applies the LTE predicate on the "va_apply_amount" field.
func VaApplyAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldVaApplyAmount, v))
}

// VaApplyAmountIsNil applies the IsNil predicate on the "va_apply_amount" field.
func VaApplyAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldVaApplyAmount))
}

// VaApplyAmountNotNil applies the NotNil predicate on the "va_apply_amount" field.
func VaApplyAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldVaApplyAmount))
}

// VaApproveAmountEQ applies the EQ predicate on the "va_approve_amount" field.
func VaApproveAmountEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVaApproveAmount, v))
}

// VaApproveAmountNEQ applies the NEQ predicate on the "va_approve_amount" field.
func VaApproveAmountNEQ(v float64) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldVaApproveAmount, v))
}

// VaApproveAmountIn applies the In predicate on the "va_approve_amount" field.
func VaApproveAmountIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldVaApproveAmount, vs...))
}

// VaApproveAmountNotIn applies the NotIn predicate on the "va_approve_amount" field.
func VaApproveAmountNotIn(vs ...float64) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldVaApproveAmount, vs...))
}

// VaApproveAmountGT applies the GT predicate on the "va_approve_amount" field.
func VaApproveAmountGT(v float64) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldVaApproveAmount, v))
}

// VaApproveAmountGTE applies the GTE predicate on the "va_approve_amount" field.
func VaApproveAmountGTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldVaApproveAmount, v))
}

// VaApproveAmountLT applies the LT predicate on the "va_approve_amount" field.
func VaApproveAmountLT(v float64) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldVaApproveAmount, v))
}

// VaApproveAmountLTE applies the LTE predicate on the "va_approve_amount" field.
func VaApproveAmountLTE(v float64) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldVaApproveAmount, v))
}

// VaApproveAmountIsNil applies the IsNil predicate on the "va_approve_amount" field.
func VaApproveAmountIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldVaApproveAmount))
}

// VaApproveAmountNotNil applies the NotNil predicate on the "va_approve_amount" field.
func VaApproveAmountNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldVaApproveAmount))
}

// HasVos applies the HasEdge predicate on the "vos" edge.
func HasVos() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VosTable, VosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVosWith applies the HasEdge predicate on the "vos" edge with a given conditions (other predicates).
func HasVosWith(preds ...predicate.ProjectVO) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newVosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
