// Code generated by ent, DO NOT EDIT.

package project

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldIsFinished holds the string denoting the is_finished field in the database.
	FieldIsFinished = "is_finished"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRevenueKpi holds the string denoting the revenue_kpi field in the database.
	FieldRevenueKpi = "revenue_kpi"
	// FieldRevenueCurrentYearCompleted holds the string denoting the revenue_current_year_completed field in the database.
	FieldRevenueCurrentYearCompleted = "revenue_current_year_completed"
	// FieldRevenueAccumulatedCompleted holds the string denoting the revenue_accumulated_completed field in the database.
	FieldRevenueAccumulatedCompleted = "revenue_accumulated_completed"
	// FieldPayDate holds the string denoting the pay_date field in the database.
	FieldPayDate = "pay_date"
	// FieldOwnerVoCount holds the string denoting the owner_vo_count field in the database.
	FieldOwnerVoCount = "owner_vo_count"
	// FieldContractorVoCount holds the string denoting the contractor_vo_count field in the database.
	FieldContractorVoCount = "contractor_vo_count"
	// FieldAccumulateDeduction holds the string denoting the accumulate_deduction field in the database.
	FieldAccumulateDeduction = "accumulate_deduction"
	// FieldSubcontractorVaCount holds the string denoting the subcontractor_va_count field in the database.
	FieldSubcontractorVaCount = "subcontractor_va_count"
	// FieldContractSupplementaryCount holds the string denoting the contract_supplementary_count field in the database.
	FieldContractSupplementaryCount = "contract_supplementary_count"
	// FieldRepairFee holds the string denoting the repair_fee field in the database.
	FieldRepairFee = "repair_fee"
	// FieldUnitInventoryTotal holds the string denoting the unit_inventory_total field in the database.
	FieldUnitInventoryTotal = "unit_inventory_total"
	// FieldUnitComponentTotal holds the string denoting the unit_component_total field in the database.
	FieldUnitComponentTotal = "unit_component_total"
	// FieldUnitComponentProduction holds the string denoting the unit_component_production field in the database.
	FieldUnitComponentProduction = "unit_component_production"
	// FieldUnitComponentInstallation holds the string denoting the unit_component_installation field in the database.
	FieldUnitComponentInstallation = "unit_component_installation"
	// FieldBulkMaterialsTotalOrderQuantity holds the string denoting the bulk_materials_total_order_quantity field in the database.
	FieldBulkMaterialsTotalOrderQuantity = "bulk_materials_total_order_quantity"
	// FieldBulkMaterialsCompletedQuantity holds the string denoting the bulk_materials_completed_quantity field in the database.
	FieldBulkMaterialsCompletedQuantity = "bulk_materials_completed_quantity"
	// FieldBulkMaterialsUncompletedQuantity holds the string denoting the bulk_materials_uncompleted_quantity field in the database.
	FieldBulkMaterialsUncompletedQuantity = "bulk_materials_uncompleted_quantity"
	// FieldDiagramBdFinishCount holds the string denoting the diagram_bd_finish_count field in the database.
	FieldDiagramBdFinishCount = "diagram_bd_finish_count"
	// FieldDiagramBdTotalCount holds the string denoting the diagram_bd_total_count field in the database.
	FieldDiagramBdTotalCount = "diagram_bd_total_count"
	// FieldDiagramConstructionFinishCount holds the string denoting the diagram_construction_finish_count field in the database.
	FieldDiagramConstructionFinishCount = "diagram_construction_finish_count"
	// FieldDiagramConstructionTotalCount holds the string denoting the diagram_construction_total_count field in the database.
	FieldDiagramConstructionTotalCount = "diagram_construction_total_count"
	// FieldDiagramProcessingFinishCount holds the string denoting the diagram_processing_finish_count field in the database.
	FieldDiagramProcessingFinishCount = "diagram_processing_finish_count"
	// FieldDiagramProcessingTotalCount holds the string denoting the diagram_processing_total_count field in the database.
	FieldDiagramProcessingTotalCount = "diagram_processing_total_count"
	// FieldDiagramCApprovalRatioNumerator holds the string denoting the diagram_c_approval_ratio_numerator field in the database.
	FieldDiagramCApprovalRatioNumerator = "diagram_c_approval_ratio_numerator"
	// FieldDiagramCApprovalRatioDenominator holds the string denoting the diagram_c_approval_ratio_denominator field in the database.
	FieldDiagramCApprovalRatioDenominator = "diagram_c_approval_ratio_denominator"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "project_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldIsFinished,
	FieldName,
	FieldRevenueKpi,
	FieldRevenueCurrentYearCompleted,
	FieldRevenueAccumulatedCompleted,
	FieldPayDate,
	FieldOwnerVoCount,
	FieldContractorVoCount,
	FieldAccumulateDeduction,
	FieldSubcontractorVaCount,
	FieldContractSupplementaryCount,
	FieldRepairFee,
	FieldUnitInventoryTotal,
	FieldUnitComponentTotal,
	FieldUnitComponentProduction,
	FieldUnitComponentInstallation,
	FieldBulkMaterialsTotalOrderQuantity,
	FieldBulkMaterialsCompletedQuantity,
	FieldBulkMaterialsUncompletedQuantity,
	FieldDiagramBdFinishCount,
	FieldDiagramBdTotalCount,
	FieldDiagramConstructionFinishCount,
	FieldDiagramConstructionTotalCount,
	FieldDiagramProcessingFinishCount,
	FieldDiagramProcessingTotalCount,
	FieldDiagramCApprovalRatioNumerator,
	FieldDiagramCApprovalRatioDenominator,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"project_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsFinished holds the default value on creation for the "is_finished" field.
	DefaultIsFinished bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByIsFinished orders the results by the is_finished field.
func ByIsFinished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFinished, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRevenueKpi orders the results by the revenue_kpi field.
func ByRevenueKpi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevenueKpi, opts...).ToFunc()
}

// ByRevenueCurrentYearCompleted orders the results by the revenue_current_year_completed field.
func ByRevenueCurrentYearCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevenueCurrentYearCompleted, opts...).ToFunc()
}

// ByRevenueAccumulatedCompleted orders the results by the revenue_accumulated_completed field.
func ByRevenueAccumulatedCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevenueAccumulatedCompleted, opts...).ToFunc()
}

// ByPayDate orders the results by the pay_date field.
func ByPayDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayDate, opts...).ToFunc()
}

// ByOwnerVoCount orders the results by the owner_vo_count field.
func ByOwnerVoCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerVoCount, opts...).ToFunc()
}

// ByContractorVoCount orders the results by the contractor_vo_count field.
func ByContractorVoCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorVoCount, opts...).ToFunc()
}

// ByAccumulateDeduction orders the results by the accumulate_deduction field.
func ByAccumulateDeduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccumulateDeduction, opts...).ToFunc()
}

// BySubcontractorVaCount orders the results by the subcontractor_va_count field.
func BySubcontractorVaCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontractorVaCount, opts...).ToFunc()
}

// ByContractSupplementaryCount orders the results by the contract_supplementary_count field.
func ByContractSupplementaryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractSupplementaryCount, opts...).ToFunc()
}

// ByRepairFee orders the results by the repair_fee field.
func ByRepairFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepairFee, opts...).ToFunc()
}

// ByUnitInventoryTotal orders the results by the unit_inventory_total field.
func ByUnitInventoryTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitInventoryTotal, opts...).ToFunc()
}

// ByUnitComponentTotal orders the results by the unit_component_total field.
func ByUnitComponentTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitComponentTotal, opts...).ToFunc()
}

// ByUnitComponentProduction orders the results by the unit_component_production field.
func ByUnitComponentProduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitComponentProduction, opts...).ToFunc()
}

// ByUnitComponentInstallation orders the results by the unit_component_installation field.
func ByUnitComponentInstallation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitComponentInstallation, opts...).ToFunc()
}

// ByBulkMaterialsTotalOrderQuantity orders the results by the bulk_materials_total_order_quantity field.
func ByBulkMaterialsTotalOrderQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBulkMaterialsTotalOrderQuantity, opts...).ToFunc()
}

// ByBulkMaterialsCompletedQuantity orders the results by the bulk_materials_completed_quantity field.
func ByBulkMaterialsCompletedQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBulkMaterialsCompletedQuantity, opts...).ToFunc()
}

// ByBulkMaterialsUncompletedQuantity orders the results by the bulk_materials_uncompleted_quantity field.
func ByBulkMaterialsUncompletedQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBulkMaterialsUncompletedQuantity, opts...).ToFunc()
}

// ByDiagramBdFinishCount orders the results by the diagram_bd_finish_count field.
func ByDiagramBdFinishCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramBdFinishCount, opts...).ToFunc()
}

// ByDiagramBdTotalCount orders the results by the diagram_bd_total_count field.
func ByDiagramBdTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramBdTotalCount, opts...).ToFunc()
}

// ByDiagramConstructionFinishCount orders the results by the diagram_construction_finish_count field.
func ByDiagramConstructionFinishCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramConstructionFinishCount, opts...).ToFunc()
}

// ByDiagramConstructionTotalCount orders the results by the diagram_construction_total_count field.
func ByDiagramConstructionTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramConstructionTotalCount, opts...).ToFunc()
}

// ByDiagramProcessingFinishCount orders the results by the diagram_processing_finish_count field.
func ByDiagramProcessingFinishCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramProcessingFinishCount, opts...).ToFunc()
}

// ByDiagramProcessingTotalCount orders the results by the diagram_processing_total_count field.
func ByDiagramProcessingTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramProcessingTotalCount, opts...).ToFunc()
}

// ByDiagramCApprovalRatioNumerator orders the results by the diagram_c_approval_ratio_numerator field.
func ByDiagramCApprovalRatioNumerator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramCApprovalRatioNumerator, opts...).ToFunc()
}

// ByDiagramCApprovalRatioDenominator orders the results by the diagram_c_approval_ratio_denominator field.
func ByDiagramCApprovalRatioDenominator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagramCApprovalRatioDenominator, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
