// Code generated by ent, DO NOT EDIT.

package project

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsFinished holds the string denoting the is_finished field in the database.
	FieldIsFinished = "is_finished"
	// FieldCje holds the string denoting the cje field in the database.
	FieldCje = "cje"
	// FieldYye holds the string denoting the yye field in the database.
	FieldYye = "yye"
	// FieldXjl holds the string denoting the xjl field in the database.
	FieldXjl = "xjl"
	// FieldXmglfYs holds the string denoting the xmglf_ys field in the database.
	FieldXmglfYs = "xmglf_ys"
	// FieldXmglfLj holds the string denoting the xmglf_lj field in the database.
	FieldXmglfLj = "xmglf_lj"
	// FieldXmsjf holds the string denoting the xmsjf field in the database.
	FieldXmsjf = "xmsjf"
	// FieldXmfzr holds the string denoting the xmfzr field in the database.
	FieldXmfzr = "xmfzr"
	// FieldOwnerApplyAmount holds the string denoting the owner_apply_amount field in the database.
	FieldOwnerApplyAmount = "owner_apply_amount"
	// FieldOwnerApplyCount holds the string denoting the owner_apply_count field in the database.
	FieldOwnerApplyCount = "owner_apply_count"
	// FieldOwnerApproveAmount holds the string denoting the owner_approve_amount field in the database.
	FieldOwnerApproveAmount = "owner_approve_amount"
	// FieldOwnerApproveCount holds the string denoting the owner_approve_count field in the database.
	FieldOwnerApproveCount = "owner_approve_count"
	// FieldContractorApplyAmount holds the string denoting the contractor_apply_amount field in the database.
	FieldContractorApplyAmount = "contractor_apply_amount"
	// FieldContractorApplyCount holds the string denoting the contractor_apply_count field in the database.
	FieldContractorApplyCount = "contractor_apply_count"
	// FieldContractorApproveAmount holds the string denoting the contractor_approve_amount field in the database.
	FieldContractorApproveAmount = "contractor_approve_amount"
	// FieldContractorApproveCount holds the string denoting the contractor_approve_count field in the database.
	FieldContractorApproveCount = "contractor_approve_count"
	// FieldInstallProgress holds the string denoting the install_progress field in the database.
	FieldInstallProgress = "install_progress"
	// FieldEffectiveContractAmount holds the string denoting the effective_contract_amount field in the database.
	FieldEffectiveContractAmount = "effective_contract_amount"
	// FieldVaApplyAmount holds the string denoting the va_apply_amount field in the database.
	FieldVaApplyAmount = "va_apply_amount"
	// FieldVaApproveAmount holds the string denoting the va_approve_amount field in the database.
	FieldVaApproveAmount = "va_approve_amount"
	// FieldAccumulatedStatutoryDeductions holds the string denoting the accumulated_statutory_deductions field in the database.
	FieldAccumulatedStatutoryDeductions = "accumulated_statutory_deductions"
	// FieldAccumulatedNonStatutoryDeductions holds the string denoting the accumulated_non_statutory_deductions field in the database.
	FieldAccumulatedNonStatutoryDeductions = "accumulated_non_statutory_deductions"
	// FieldAccumulatedStatutoryDeductionsPeriod holds the string denoting the accumulated_statutory_deductions_period field in the database.
	FieldAccumulatedStatutoryDeductionsPeriod = "accumulated_statutory_deductions_period"
	// FieldAccumulatedNonStatutoryDeductionsPeriod holds the string denoting the accumulated_non_statutory_deductions_period field in the database.
	FieldAccumulatedNonStatutoryDeductionsPeriod = "accumulated_non_statutory_deductions_period"
	// FieldTotalContractAmount holds the string denoting the total_contract_amount field in the database.
	FieldTotalContractAmount = "total_contract_amount"
	// EdgeVos holds the string denoting the vos edge name in mutations.
	EdgeVos = "vos"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// VosTable is the table that holds the vos relation/edge.
	VosTable = "project_vos"
	// VosInverseTable is the table name for the ProjectVO entity.
	// It exists in this package in order to avoid circular dependency with the "projectvo" package.
	VosInverseTable = "project_vos"
	// VosColumn is the table column denoting the vos relation/edge.
	VosColumn = "project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldName,
	FieldIsFinished,
	FieldCje,
	FieldYye,
	FieldXjl,
	FieldXmglfYs,
	FieldXmglfLj,
	FieldXmsjf,
	FieldXmfzr,
	FieldOwnerApplyAmount,
	FieldOwnerApplyCount,
	FieldOwnerApproveAmount,
	FieldOwnerApproveCount,
	FieldContractorApplyAmount,
	FieldContractorApplyCount,
	FieldContractorApproveAmount,
	FieldContractorApproveCount,
	FieldInstallProgress,
	FieldEffectiveContractAmount,
	FieldVaApplyAmount,
	FieldVaApproveAmount,
	FieldAccumulatedStatutoryDeductions,
	FieldAccumulatedNonStatutoryDeductions,
	FieldAccumulatedStatutoryDeductionsPeriod,
	FieldAccumulatedNonStatutoryDeductionsPeriod,
	FieldTotalContractAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsFinished holds the default value on creation for the "is_finished" field.
	DefaultIsFinished bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsFinished orders the results by the is_finished field.
func ByIsFinished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFinished, opts...).ToFunc()
}

// ByCje orders the results by the cje field.
func ByCje(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCje, opts...).ToFunc()
}

// ByYye orders the results by the yye field.
func ByYye(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYye, opts...).ToFunc()
}

// ByXjl orders the results by the xjl field.
func ByXjl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXjl, opts...).ToFunc()
}

// ByXmglfYs orders the results by the xmglf_ys field.
func ByXmglfYs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmglfYs, opts...).ToFunc()
}

// ByXmglfLj orders the results by the xmglf_lj field.
func ByXmglfLj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmglfLj, opts...).ToFunc()
}

// ByXmsjf orders the results by the xmsjf field.
func ByXmsjf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmsjf, opts...).ToFunc()
}

// ByXmfzr orders the results by the xmfzr field.
func ByXmfzr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXmfzr, opts...).ToFunc()
}

// ByOwnerApplyAmount orders the results by the owner_apply_amount field.
func ByOwnerApplyAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerApplyAmount, opts...).ToFunc()
}

// ByOwnerApplyCount orders the results by the owner_apply_count field.
func ByOwnerApplyCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerApplyCount, opts...).ToFunc()
}

// ByOwnerApproveAmount orders the results by the owner_approve_amount field.
func ByOwnerApproveAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerApproveAmount, opts...).ToFunc()
}

// ByOwnerApproveCount orders the results by the owner_approve_count field.
func ByOwnerApproveCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerApproveCount, opts...).ToFunc()
}

// ByContractorApplyAmount orders the results by the contractor_apply_amount field.
func ByContractorApplyAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorApplyAmount, opts...).ToFunc()
}

// ByContractorApplyCount orders the results by the contractor_apply_count field.
func ByContractorApplyCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorApplyCount, opts...).ToFunc()
}

// ByContractorApproveAmount orders the results by the contractor_approve_amount field.
func ByContractorApproveAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorApproveAmount, opts...).ToFunc()
}

// ByContractorApproveCount orders the results by the contractor_approve_count field.
func ByContractorApproveCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorApproveCount, opts...).ToFunc()
}

// ByInstallProgress orders the results by the install_progress field.
func ByInstallProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallProgress, opts...).ToFunc()
}

// ByEffectiveContractAmount orders the results by the effective_contract_amount field.
func ByEffectiveContractAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveContractAmount, opts...).ToFunc()
}

// ByVaApplyAmount orders the results by the va_apply_amount field.
func ByVaApplyAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVaApplyAmount, opts...).ToFunc()
}

// ByVaApproveAmount orders the results by the va_approve_amount field.
func ByVaApproveAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVaApproveAmount, opts...).ToFunc()
}

// ByAccumulatedStatutoryDeductions orders the results by the accumulated_statutory_deductions field.
func ByAccumulatedStatutoryDeductions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccumulatedStatutoryDeductions, opts...).ToFunc()
}

// ByAccumulatedNonStatutoryDeductions orders the results by the accumulated_non_statutory_deductions field.
func ByAccumulatedNonStatutoryDeductions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccumulatedNonStatutoryDeductions, opts...).ToFunc()
}

// ByAccumulatedStatutoryDeductionsPeriod orders the results by the accumulated_statutory_deductions_period field.
func ByAccumulatedStatutoryDeductionsPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccumulatedStatutoryDeductionsPeriod, opts...).ToFunc()
}

// ByAccumulatedNonStatutoryDeductionsPeriod orders the results by the accumulated_non_statutory_deductions_period field.
func ByAccumulatedNonStatutoryDeductionsPeriod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccumulatedNonStatutoryDeductionsPeriod, opts...).ToFunc()
}

// ByTotalContractAmount orders the results by the total_contract_amount field.
func ByTotalContractAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalContractAmount, opts...).ToFunc()
}

// ByVosCount orders the results by vos count.
func ByVosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVosStep(), opts...)
	}
}

// ByVos orders the results by vos terms.
func ByVos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VosTable, VosColumn),
	)
}
