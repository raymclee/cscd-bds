// Code generated by ent, DO NOT EDIT.

package customerprofile

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customerprofile type in the database.
	Label = "customer_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldOwnerType holds the string denoting the owner_type field in the database.
	FieldOwnerType = "owner_type"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldContactPerson holds the string denoting the contact_person field in the database.
	FieldContactPerson = "contact_person"
	// FieldContactPersonPosition holds the string denoting the contact_person_position field in the database.
	FieldContactPersonPosition = "contact_person_position"
	// FieldContactPersonPhone holds the string denoting the contact_person_phone field in the database.
	FieldContactPersonPhone = "contact_person_phone"
	// FieldContactPersonEmail holds the string denoting the contact_person_email field in the database.
	FieldContactPersonEmail = "contact_person_email"
	// FieldSalesID holds the string denoting the sales_id field in the database.
	FieldSalesID = "sales_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeApprover holds the string denoting the approver edge name in mutations.
	EdgeApprover = "approver"
	// EdgeSales holds the string denoting the sales edge name in mutations.
	EdgeSales = "sales"
	// Table holds the table name of the customerprofile in the database.
	Table = "customer_profiles"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer_profiles"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "customer_profiles"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "created_by_id"
	// ApproverTable is the table that holds the approver relation/edge.
	ApproverTable = "customer_profiles"
	// ApproverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApproverInverseTable = "users"
	// ApproverColumn is the table column denoting the approver relation/edge.
	ApproverColumn = "approver_id"
	// SalesTable is the table that holds the sales relation/edge.
	SalesTable = "customer_profiles"
	// SalesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SalesInverseTable = "users"
	// SalesColumn is the table column denoting the sales relation/edge.
	SalesColumn = "sales_id"
)

// Columns holds all SQL columns for customerprofile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldApprovalStatus,
	FieldOwnerType,
	FieldIndustry,
	FieldSize,
	FieldContactPerson,
	FieldContactPersonPosition,
	FieldContactPersonPhone,
	FieldContactPersonEmail,
	FieldSalesID,
	FieldCustomerID,
	FieldCreatedByID,
	FieldApproverID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultApprovalStatus holds the default value on creation for the "approval_status" field.
	DefaultApprovalStatus int
	// ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	ApprovalStatusValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the CustomerProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByOwnerType orders the results by the owner_type field.
func ByOwnerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerType, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByContactPerson orders the results by the contact_person field.
func ByContactPerson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPerson, opts...).ToFunc()
}

// ByContactPersonPosition orders the results by the contact_person_position field.
func ByContactPersonPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPosition, opts...).ToFunc()
}

// ByContactPersonPhone orders the results by the contact_person_phone field.
func ByContactPersonPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPhone, opts...).ToFunc()
}

// ByContactPersonEmail orders the results by the contact_person_email field.
func ByContactPersonEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonEmail, opts...).ToFunc()
}

// BySalesID orders the results by the sales_id field.
func BySalesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByApproverField orders the results by approver field.
func ByApproverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproverStep(), sql.OrderByField(field, opts...))
	}
}

// BySalesField orders the results by sales field.
func BySalesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
	)
}
func newApproverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ApproverTable, ApproverColumn),
	)
}
func newSalesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SalesTable, SalesColumn),
	)
}
