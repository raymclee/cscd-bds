// Code generated by ent, DO NOT EDIT.

package tendercompetitor

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tendercompetitor type in the database.
	Label = "tender_competitor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenderID holds the string denoting the tender_id field in the database.
	FieldTenderID = "tender_id"
	// FieldCompetitorID holds the string denoting the competitor_id field in the database.
	FieldCompetitorID = "competitor_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// EdgeTender holds the string denoting the tender edge name in mutations.
	EdgeTender = "tender"
	// EdgeCompetitor holds the string denoting the competitor edge name in mutations.
	EdgeCompetitor = "competitor"
	// Table holds the table name of the tendercompetitor in the database.
	Table = "tender_competitors"
	// TenderTable is the table that holds the tender relation/edge.
	TenderTable = "tender_competitors"
	// TenderInverseTable is the table name for the Tender entity.
	// It exists in this package in order to avoid circular dependency with the "tender" package.
	TenderInverseTable = "tenders"
	// TenderColumn is the table column denoting the tender relation/edge.
	TenderColumn = "tender_id"
	// CompetitorTable is the table that holds the competitor relation/edge.
	CompetitorTable = "tender_competitors"
	// CompetitorInverseTable is the table name for the Competitor entity.
	// It exists in this package in order to avoid circular dependency with the "competitor" package.
	CompetitorInverseTable = "competitors"
	// CompetitorColumn is the table column denoting the competitor relation/edge.
	CompetitorColumn = "competitor_id"
)

// Columns holds all SQL columns for tendercompetitor fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenderID,
	FieldCompetitorID,
	FieldAmount,
	FieldResult,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultResult holds the default value on creation for the "result" field.
	DefaultResult bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the TenderCompetitor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenderID orders the results by the tender_id field.
func ByTenderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenderID, opts...).ToFunc()
}

// ByCompetitorID orders the results by the competitor_id field.
func ByCompetitorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitorID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByTenderField orders the results by tender field.
func ByTenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompetitorField orders the results by competitor field.
func ByCompetitorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitorStep(), sql.OrderByField(field, opts...))
	}
}
func newTenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenderTable, TenderColumn),
	)
}
func newCompetitorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompetitorTable, CompetitorColumn),
	)
}
