// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenderCompetitor is the model entity for the TenderCompetitor schema.
type TenderCompetitor struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenderID holds the value of the "tender_id" field.
	TenderID xid.ID `json:"tender_id,omitempty"`
	// CompetitorID holds the value of the "competitor_id" field.
	CompetitorID xid.ID `json:"competitor_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenderCompetitorQuery when eager-loading is set.
	Edges        TenderCompetitorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenderCompetitorEdges holds the relations/edges for other nodes in the graph.
type TenderCompetitorEdges struct {
	// Tender holds the value of the tender edge.
	Tender *Tender `json:"tender,omitempty"`
	// Competitor holds the value of the competitor edge.
	Competitor *Competitor `json:"competitor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenderOrErr returns the Tender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderCompetitorEdges) TenderOrErr() (*Tender, error) {
	if e.Tender != nil {
		return e.Tender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tender.Label}
	}
	return nil, &NotLoadedError{edge: "tender"}
}

// CompetitorOrErr returns the Competitor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderCompetitorEdges) CompetitorOrErr() (*Competitor, error) {
	if e.Competitor != nil {
		return e.Competitor, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: competitor.Label}
	}
	return nil, &NotLoadedError{edge: "competitor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenderCompetitor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tendercompetitor.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case tendercompetitor.FieldCreatedAt, tendercompetitor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tendercompetitor.FieldID, tendercompetitor.FieldTenderID, tendercompetitor.FieldCompetitorID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenderCompetitor fields.
func (tc *TenderCompetitor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tendercompetitor.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tc.ID = *value
			}
		case tendercompetitor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case tendercompetitor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		case tendercompetitor.FieldTenderID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tender_id", values[i])
			} else if value != nil {
				tc.TenderID = *value
			}
		case tendercompetitor.FieldCompetitorID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field competitor_id", values[i])
			} else if value != nil {
				tc.CompetitorID = *value
			}
		case tendercompetitor.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				tc.Amount = value.Float64
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenderCompetitor.
// This includes values selected through modifiers, order, etc.
func (tc *TenderCompetitor) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryTender queries the "tender" edge of the TenderCompetitor entity.
func (tc *TenderCompetitor) QueryTender() *TenderQuery {
	return NewTenderCompetitorClient(tc.config).QueryTender(tc)
}

// QueryCompetitor queries the "competitor" edge of the TenderCompetitor entity.
func (tc *TenderCompetitor) QueryCompetitor() *CompetitorQuery {
	return NewTenderCompetitorClient(tc.config).QueryCompetitor(tc)
}

// Update returns a builder for updating this TenderCompetitor.
// Note that you need to call TenderCompetitor.Unwrap() before calling this method if this TenderCompetitor
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TenderCompetitor) Update() *TenderCompetitorUpdateOne {
	return NewTenderCompetitorClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TenderCompetitor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TenderCompetitor) Unwrap() *TenderCompetitor {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenderCompetitor is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TenderCompetitor) String() string {
	var builder strings.Builder
	builder.WriteString("TenderCompetitor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tender_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.TenderID))
	builder.WriteString(", ")
	builder.WriteString("competitor_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.CompetitorID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", tc.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// TenderCompetitors is a parsable slice of TenderCompetitor.
type TenderCompetitors []*TenderCompetitor
