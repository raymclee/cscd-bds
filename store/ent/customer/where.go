// Code generated by ent, DO NOT EDIT.

package customer

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// ApprovalStatus applies equality check predicate on the "approval_status" field. It's identical to ApprovalStatusEQ.
func ApprovalStatus(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldApprovalStatus, v))
}

// OwnerType applies equality check predicate on the "owner_type" field. It's identical to OwnerTypeEQ.
func OwnerType(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOwnerType, v))
}

// Industry applies equality check predicate on the "industry" field. It's identical to IndustryEQ.
func Industry(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldIndustry, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSize, v))
}

// ContactPerson applies equality check predicate on the "contact_person" field. It's identical to ContactPersonEQ.
func ContactPerson(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPersonPosition applies equality check predicate on the "contact_person_position" field. It's identical to ContactPersonPositionEQ.
func ContactPersonPosition(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonPosition, v))
}

// ContactPersonPhone applies equality check predicate on the "contact_person_phone" field. It's identical to ContactPersonPhoneEQ.
func ContactPersonPhone(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonPhone, v))
}

// ContactPersonEmail applies equality check predicate on the "contact_person_email" field. It's identical to ContactPersonEmailEQ.
func ContactPersonEmail(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonEmail, v))
}

// AreaID applies equality check predicate on the "area_id" field. It's identical to AreaIDEQ.
func AreaID(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAreaID, v))
}

// SalesID applies equality check predicate on the "sales_id" field. It's identical to SalesIDEQ.
func SalesID(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSalesID, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedByID, v))
}

// ApproverID applies equality check predicate on the "approver_id" field. It's identical to ApproverIDEQ.
func ApproverID(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldApproverID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldName, v))
}

// ApprovalStatusEQ applies the EQ predicate on the "approval_status" field.
func ApprovalStatusEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldApprovalStatus, v))
}

// ApprovalStatusNEQ applies the NEQ predicate on the "approval_status" field.
func ApprovalStatusNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldApprovalStatus, v))
}

// ApprovalStatusIn applies the In predicate on the "approval_status" field.
func ApprovalStatusIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldApprovalStatus, vs...))
}

// ApprovalStatusNotIn applies the NotIn predicate on the "approval_status" field.
func ApprovalStatusNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldApprovalStatus, vs...))
}

// ApprovalStatusGT applies the GT predicate on the "approval_status" field.
func ApprovalStatusGT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldApprovalStatus, v))
}

// ApprovalStatusGTE applies the GTE predicate on the "approval_status" field.
func ApprovalStatusGTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldApprovalStatus, v))
}

// ApprovalStatusLT applies the LT predicate on the "approval_status" field.
func ApprovalStatusLT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldApprovalStatus, v))
}

// ApprovalStatusLTE applies the LTE predicate on the "approval_status" field.
func ApprovalStatusLTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldApprovalStatus, v))
}

// OwnerTypeEQ applies the EQ predicate on the "owner_type" field.
func OwnerTypeEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldOwnerType, v))
}

// OwnerTypeNEQ applies the NEQ predicate on the "owner_type" field.
func OwnerTypeNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldOwnerType, v))
}

// OwnerTypeIn applies the In predicate on the "owner_type" field.
func OwnerTypeIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldOwnerType, vs...))
}

// OwnerTypeNotIn applies the NotIn predicate on the "owner_type" field.
func OwnerTypeNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldOwnerType, vs...))
}

// OwnerTypeGT applies the GT predicate on the "owner_type" field.
func OwnerTypeGT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldOwnerType, v))
}

// OwnerTypeGTE applies the GTE predicate on the "owner_type" field.
func OwnerTypeGTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldOwnerType, v))
}

// OwnerTypeLT applies the LT predicate on the "owner_type" field.
func OwnerTypeLT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldOwnerType, v))
}

// OwnerTypeLTE applies the LTE predicate on the "owner_type" field.
func OwnerTypeLTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldOwnerType, v))
}

// OwnerTypeIsNil applies the IsNil predicate on the "owner_type" field.
func OwnerTypeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldOwnerType))
}

// OwnerTypeNotNil applies the NotNil predicate on the "owner_type" field.
func OwnerTypeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldOwnerType))
}

// IndustryEQ applies the EQ predicate on the "industry" field.
func IndustryEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldIndustry, v))
}

// IndustryNEQ applies the NEQ predicate on the "industry" field.
func IndustryNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldIndustry, v))
}

// IndustryIn applies the In predicate on the "industry" field.
func IndustryIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldIndustry, vs...))
}

// IndustryNotIn applies the NotIn predicate on the "industry" field.
func IndustryNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldIndustry, vs...))
}

// IndustryGT applies the GT predicate on the "industry" field.
func IndustryGT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldIndustry, v))
}

// IndustryGTE applies the GTE predicate on the "industry" field.
func IndustryGTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldIndustry, v))
}

// IndustryLT applies the LT predicate on the "industry" field.
func IndustryLT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldIndustry, v))
}

// IndustryLTE applies the LTE predicate on the "industry" field.
func IndustryLTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldIndustry, v))
}

// IndustryIsNil applies the IsNil predicate on the "industry" field.
func IndustryIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldIndustry))
}

// IndustryNotNil applies the NotNil predicate on the "industry" field.
func IndustryNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldIndustry))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldSize))
}

// ContactPersonEQ applies the EQ predicate on the "contact_person" field.
func ContactPersonEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPersonNEQ applies the NEQ predicate on the "contact_person" field.
func ContactPersonNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldContactPerson, v))
}

// ContactPersonIn applies the In predicate on the "contact_person" field.
func ContactPersonIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldContactPerson, vs...))
}

// ContactPersonNotIn applies the NotIn predicate on the "contact_person" field.
func ContactPersonNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldContactPerson, vs...))
}

// ContactPersonGT applies the GT predicate on the "contact_person" field.
func ContactPersonGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldContactPerson, v))
}

// ContactPersonGTE applies the GTE predicate on the "contact_person" field.
func ContactPersonGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldContactPerson, v))
}

// ContactPersonLT applies the LT predicate on the "contact_person" field.
func ContactPersonLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldContactPerson, v))
}

// ContactPersonLTE applies the LTE predicate on the "contact_person" field.
func ContactPersonLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldContactPerson, v))
}

// ContactPersonContains applies the Contains predicate on the "contact_person" field.
func ContactPersonContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldContactPerson, v))
}

// ContactPersonHasPrefix applies the HasPrefix predicate on the "contact_person" field.
func ContactPersonHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldContactPerson, v))
}

// ContactPersonHasSuffix applies the HasSuffix predicate on the "contact_person" field.
func ContactPersonHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldContactPerson, v))
}

// ContactPersonIsNil applies the IsNil predicate on the "contact_person" field.
func ContactPersonIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldContactPerson))
}

// ContactPersonNotNil applies the NotNil predicate on the "contact_person" field.
func ContactPersonNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldContactPerson))
}

// ContactPersonEqualFold applies the EqualFold predicate on the "contact_person" field.
func ContactPersonEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldContactPerson, v))
}

// ContactPersonContainsFold applies the ContainsFold predicate on the "contact_person" field.
func ContactPersonContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldContactPerson, v))
}

// ContactPersonPositionEQ applies the EQ predicate on the "contact_person_position" field.
func ContactPersonPositionEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonPosition, v))
}

// ContactPersonPositionNEQ applies the NEQ predicate on the "contact_person_position" field.
func ContactPersonPositionNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldContactPersonPosition, v))
}

// ContactPersonPositionIn applies the In predicate on the "contact_person_position" field.
func ContactPersonPositionIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldContactPersonPosition, vs...))
}

// ContactPersonPositionNotIn applies the NotIn predicate on the "contact_person_position" field.
func ContactPersonPositionNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldContactPersonPosition, vs...))
}

// ContactPersonPositionGT applies the GT predicate on the "contact_person_position" field.
func ContactPersonPositionGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldContactPersonPosition, v))
}

// ContactPersonPositionGTE applies the GTE predicate on the "contact_person_position" field.
func ContactPersonPositionGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldContactPersonPosition, v))
}

// ContactPersonPositionLT applies the LT predicate on the "contact_person_position" field.
func ContactPersonPositionLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldContactPersonPosition, v))
}

// ContactPersonPositionLTE applies the LTE predicate on the "contact_person_position" field.
func ContactPersonPositionLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldContactPersonPosition, v))
}

// ContactPersonPositionContains applies the Contains predicate on the "contact_person_position" field.
func ContactPersonPositionContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldContactPersonPosition, v))
}

// ContactPersonPositionHasPrefix applies the HasPrefix predicate on the "contact_person_position" field.
func ContactPersonPositionHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldContactPersonPosition, v))
}

// ContactPersonPositionHasSuffix applies the HasSuffix predicate on the "contact_person_position" field.
func ContactPersonPositionHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldContactPersonPosition, v))
}

// ContactPersonPositionIsNil applies the IsNil predicate on the "contact_person_position" field.
func ContactPersonPositionIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldContactPersonPosition))
}

// ContactPersonPositionNotNil applies the NotNil predicate on the "contact_person_position" field.
func ContactPersonPositionNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldContactPersonPosition))
}

// ContactPersonPositionEqualFold applies the EqualFold predicate on the "contact_person_position" field.
func ContactPersonPositionEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldContactPersonPosition, v))
}

// ContactPersonPositionContainsFold applies the ContainsFold predicate on the "contact_person_position" field.
func ContactPersonPositionContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldContactPersonPosition, v))
}

// ContactPersonPhoneEQ applies the EQ predicate on the "contact_person_phone" field.
func ContactPersonPhoneEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonPhone, v))
}

// ContactPersonPhoneNEQ applies the NEQ predicate on the "contact_person_phone" field.
func ContactPersonPhoneNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldContactPersonPhone, v))
}

// ContactPersonPhoneIn applies the In predicate on the "contact_person_phone" field.
func ContactPersonPhoneIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldContactPersonPhone, vs...))
}

// ContactPersonPhoneNotIn applies the NotIn predicate on the "contact_person_phone" field.
func ContactPersonPhoneNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldContactPersonPhone, vs...))
}

// ContactPersonPhoneGT applies the GT predicate on the "contact_person_phone" field.
func ContactPersonPhoneGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldContactPersonPhone, v))
}

// ContactPersonPhoneGTE applies the GTE predicate on the "contact_person_phone" field.
func ContactPersonPhoneGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldContactPersonPhone, v))
}

// ContactPersonPhoneLT applies the LT predicate on the "contact_person_phone" field.
func ContactPersonPhoneLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldContactPersonPhone, v))
}

// ContactPersonPhoneLTE applies the LTE predicate on the "contact_person_phone" field.
func ContactPersonPhoneLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldContactPersonPhone, v))
}

// ContactPersonPhoneContains applies the Contains predicate on the "contact_person_phone" field.
func ContactPersonPhoneContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldContactPersonPhone, v))
}

// ContactPersonPhoneHasPrefix applies the HasPrefix predicate on the "contact_person_phone" field.
func ContactPersonPhoneHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldContactPersonPhone, v))
}

// ContactPersonPhoneHasSuffix applies the HasSuffix predicate on the "contact_person_phone" field.
func ContactPersonPhoneHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldContactPersonPhone, v))
}

// ContactPersonPhoneIsNil applies the IsNil predicate on the "contact_person_phone" field.
func ContactPersonPhoneIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldContactPersonPhone))
}

// ContactPersonPhoneNotNil applies the NotNil predicate on the "contact_person_phone" field.
func ContactPersonPhoneNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldContactPersonPhone))
}

// ContactPersonPhoneEqualFold applies the EqualFold predicate on the "contact_person_phone" field.
func ContactPersonPhoneEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldContactPersonPhone, v))
}

// ContactPersonPhoneContainsFold applies the ContainsFold predicate on the "contact_person_phone" field.
func ContactPersonPhoneContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldContactPersonPhone, v))
}

// ContactPersonEmailEQ applies the EQ predicate on the "contact_person_email" field.
func ContactPersonEmailEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldContactPersonEmail, v))
}

// ContactPersonEmailNEQ applies the NEQ predicate on the "contact_person_email" field.
func ContactPersonEmailNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldContactPersonEmail, v))
}

// ContactPersonEmailIn applies the In predicate on the "contact_person_email" field.
func ContactPersonEmailIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldContactPersonEmail, vs...))
}

// ContactPersonEmailNotIn applies the NotIn predicate on the "contact_person_email" field.
func ContactPersonEmailNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldContactPersonEmail, vs...))
}

// ContactPersonEmailGT applies the GT predicate on the "contact_person_email" field.
func ContactPersonEmailGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldContactPersonEmail, v))
}

// ContactPersonEmailGTE applies the GTE predicate on the "contact_person_email" field.
func ContactPersonEmailGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldContactPersonEmail, v))
}

// ContactPersonEmailLT applies the LT predicate on the "contact_person_email" field.
func ContactPersonEmailLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldContactPersonEmail, v))
}

// ContactPersonEmailLTE applies the LTE predicate on the "contact_person_email" field.
func ContactPersonEmailLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldContactPersonEmail, v))
}

// ContactPersonEmailContains applies the Contains predicate on the "contact_person_email" field.
func ContactPersonEmailContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldContactPersonEmail, v))
}

// ContactPersonEmailHasPrefix applies the HasPrefix predicate on the "contact_person_email" field.
func ContactPersonEmailHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldContactPersonEmail, v))
}

// ContactPersonEmailHasSuffix applies the HasSuffix predicate on the "contact_person_email" field.
func ContactPersonEmailHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldContactPersonEmail, v))
}

// ContactPersonEmailIsNil applies the IsNil predicate on the "contact_person_email" field.
func ContactPersonEmailIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldContactPersonEmail))
}

// ContactPersonEmailNotNil applies the NotNil predicate on the "contact_person_email" field.
func ContactPersonEmailNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldContactPersonEmail))
}

// ContactPersonEmailEqualFold applies the EqualFold predicate on the "contact_person_email" field.
func ContactPersonEmailEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldContactPersonEmail, v))
}

// ContactPersonEmailContainsFold applies the ContainsFold predicate on the "contact_person_email" field.
func ContactPersonEmailContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldContactPersonEmail, v))
}

// DraftIsNil applies the IsNil predicate on the "draft" field.
func DraftIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldDraft))
}

// DraftNotNil applies the NotNil predicate on the "draft" field.
func DraftNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldDraft))
}

// FeishuGroupIsNil applies the IsNil predicate on the "feishu_group" field.
func FeishuGroupIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldFeishuGroup))
}

// FeishuGroupNotNil applies the NotNil predicate on the "feishu_group" field.
func FeishuGroupNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldFeishuGroup))
}

// AreaIDEQ applies the EQ predicate on the "area_id" field.
func AreaIDEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldAreaID, v))
}

// AreaIDNEQ applies the NEQ predicate on the "area_id" field.
func AreaIDNEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldAreaID, v))
}

// AreaIDIn applies the In predicate on the "area_id" field.
func AreaIDIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldAreaID, vs...))
}

// AreaIDNotIn applies the NotIn predicate on the "area_id" field.
func AreaIDNotIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldAreaID, vs...))
}

// AreaIDGT applies the GT predicate on the "area_id" field.
func AreaIDGT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldAreaID, v))
}

// AreaIDGTE applies the GTE predicate on the "area_id" field.
func AreaIDGTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldAreaID, v))
}

// AreaIDLT applies the LT predicate on the "area_id" field.
func AreaIDLT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldAreaID, v))
}

// AreaIDLTE applies the LTE predicate on the "area_id" field.
func AreaIDLTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldAreaID, v))
}

// AreaIDContains applies the Contains predicate on the "area_id" field.
func AreaIDContains(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldAreaID, vc))
}

// AreaIDHasPrefix applies the HasPrefix predicate on the "area_id" field.
func AreaIDHasPrefix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldAreaID, vc))
}

// AreaIDHasSuffix applies the HasSuffix predicate on the "area_id" field.
func AreaIDHasSuffix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldAreaID, vc))
}

// AreaIDEqualFold applies the EqualFold predicate on the "area_id" field.
func AreaIDEqualFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldAreaID, vc))
}

// AreaIDContainsFold applies the ContainsFold predicate on the "area_id" field.
func AreaIDContainsFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldAreaID, vc))
}

// SalesIDEQ applies the EQ predicate on the "sales_id" field.
func SalesIDEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldSalesID, v))
}

// SalesIDNEQ applies the NEQ predicate on the "sales_id" field.
func SalesIDNEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldSalesID, v))
}

// SalesIDIn applies the In predicate on the "sales_id" field.
func SalesIDIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldSalesID, vs...))
}

// SalesIDNotIn applies the NotIn predicate on the "sales_id" field.
func SalesIDNotIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldSalesID, vs...))
}

// SalesIDGT applies the GT predicate on the "sales_id" field.
func SalesIDGT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldSalesID, v))
}

// SalesIDGTE applies the GTE predicate on the "sales_id" field.
func SalesIDGTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldSalesID, v))
}

// SalesIDLT applies the LT predicate on the "sales_id" field.
func SalesIDLT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldSalesID, v))
}

// SalesIDLTE applies the LTE predicate on the "sales_id" field.
func SalesIDLTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldSalesID, v))
}

// SalesIDContains applies the Contains predicate on the "sales_id" field.
func SalesIDContains(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldSalesID, vc))
}

// SalesIDHasPrefix applies the HasPrefix predicate on the "sales_id" field.
func SalesIDHasPrefix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldSalesID, vc))
}

// SalesIDHasSuffix applies the HasSuffix predicate on the "sales_id" field.
func SalesIDHasSuffix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldSalesID, vc))
}

// SalesIDIsNil applies the IsNil predicate on the "sales_id" field.
func SalesIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldSalesID))
}

// SalesIDNotNil applies the NotNil predicate on the "sales_id" field.
func SalesIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldSalesID))
}

// SalesIDEqualFold applies the EqualFold predicate on the "sales_id" field.
func SalesIDEqualFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldSalesID, vc))
}

// SalesIDContainsFold applies the ContainsFold predicate on the "sales_id" field.
func SalesIDContainsFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldSalesID, vc))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldCreatedByID, vc))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldCreatedByID, vc))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldCreatedByID, vc))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldCreatedByID, vc))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldCreatedByID, vc))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldUpdatedByID, vc))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldUpdatedByID, vc))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldUpdatedByID, vc))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldUpdatedByID, vc))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldUpdatedByID, vc))
}

// ApproverIDEQ applies the EQ predicate on the "approver_id" field.
func ApproverIDEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldApproverID, v))
}

// ApproverIDNEQ applies the NEQ predicate on the "approver_id" field.
func ApproverIDNEQ(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldApproverID, v))
}

// ApproverIDIn applies the In predicate on the "approver_id" field.
func ApproverIDIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldApproverID, vs...))
}

// ApproverIDNotIn applies the NotIn predicate on the "approver_id" field.
func ApproverIDNotIn(vs ...xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldApproverID, vs...))
}

// ApproverIDGT applies the GT predicate on the "approver_id" field.
func ApproverIDGT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldApproverID, v))
}

// ApproverIDGTE applies the GTE predicate on the "approver_id" field.
func ApproverIDGTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldApproverID, v))
}

// ApproverIDLT applies the LT predicate on the "approver_id" field.
func ApproverIDLT(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldApproverID, v))
}

// ApproverIDLTE applies the LTE predicate on the "approver_id" field.
func ApproverIDLTE(v xid.ID) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldApproverID, v))
}

// ApproverIDContains applies the Contains predicate on the "approver_id" field.
func ApproverIDContains(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContains(FieldApproverID, vc))
}

// ApproverIDHasPrefix applies the HasPrefix predicate on the "approver_id" field.
func ApproverIDHasPrefix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasPrefix(FieldApproverID, vc))
}

// ApproverIDHasSuffix applies the HasSuffix predicate on the "approver_id" field.
func ApproverIDHasSuffix(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldHasSuffix(FieldApproverID, vc))
}

// ApproverIDIsNil applies the IsNil predicate on the "approver_id" field.
func ApproverIDIsNil() predicate.Customer {
	return predicate.Customer(sql.FieldIsNull(FieldApproverID))
}

// ApproverIDNotNil applies the NotNil predicate on the "approver_id" field.
func ApproverIDNotNil() predicate.Customer {
	return predicate.Customer(sql.FieldNotNull(FieldApproverID))
}

// ApproverIDEqualFold applies the EqualFold predicate on the "approver_id" field.
func ApproverIDEqualFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldEqualFold(FieldApproverID, vc))
}

// ApproverIDContainsFold applies the ContainsFold predicate on the "approver_id" field.
func ApproverIDContainsFold(v xid.ID) predicate.Customer {
	vc := string(v)
	return predicate.Customer(sql.FieldContainsFold(FieldApproverID, vc))
}

// HasArea applies the HasEdge predicate on the "area" edge.
func HasArea() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAreaWith applies the HasEdge predicate on the "area" edge with a given conditions (other predicates).
func HasAreaWith(preds ...predicate.Area) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newAreaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenders applies the HasEdge predicate on the "tenders" edge.
func HasTenders() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTendersWith applies the HasEdge predicate on the "tenders" edge with a given conditions (other predicates).
func HasTendersWith(preds ...predicate.Tender) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newTendersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSales applies the HasEdge predicate on the "sales" edge.
func HasSales() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SalesTable, SalesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSalesWith applies the HasEdge predicate on the "sales" edge with a given conditions (other predicates).
func HasSalesWith(preds ...predicate.User) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newSalesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.User) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newUpdatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprover applies the HasEdge predicate on the "approver" edge.
func HasApprover() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ApproverTable, ApproverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApproverWith applies the HasEdge predicate on the "approver" edge with a given conditions (other predicates).
func HasApproverWith(preds ...predicate.User) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newApproverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVisitRecords applies the HasEdge predicate on the "visit_records" edge.
func HasVisitRecords() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VisitRecordsTable, VisitRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVisitRecordsWith applies the HasEdge predicate on the "visit_records" edge with a given conditions (other predicates).
func HasVisitRecordsWith(preds ...predicate.VisitRecord) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newVisitRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(sql.NotPredicates(p))
}
