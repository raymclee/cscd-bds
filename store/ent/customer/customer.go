// Code generated by ent, DO NOT EDIT.

package customer

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldOwnerType holds the string denoting the owner_type field in the database.
	FieldOwnerType = "owner_type"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldContactPerson holds the string denoting the contact_person field in the database.
	FieldContactPerson = "contact_person"
	// FieldContactPersonPosition holds the string denoting the contact_person_position field in the database.
	FieldContactPersonPosition = "contact_person_position"
	// FieldContactPersonPhone holds the string denoting the contact_person_phone field in the database.
	FieldContactPersonPhone = "contact_person_phone"
	// FieldContactPersonEmail holds the string denoting the contact_person_email field in the database.
	FieldContactPersonEmail = "contact_person_email"
	// FieldDraft holds the string denoting the draft field in the database.
	FieldDraft = "draft"
	// FieldFeishuGroup holds the string denoting the feishu_group field in the database.
	FieldFeishuGroup = "feishu_group"
	// FieldAreaID holds the string denoting the area_id field in the database.
	FieldAreaID = "area_id"
	// FieldSalesID holds the string denoting the sales_id field in the database.
	FieldSalesID = "sales_id"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldUpdatedByID holds the string denoting the updated_by_id field in the database.
	FieldUpdatedByID = "updated_by_id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// FieldActiveProfileID holds the string denoting the active_profile_id field in the database.
	FieldActiveProfileID = "active_profile_id"
	// FieldPendingProfileID holds the string denoting the pending_profile_id field in the database.
	FieldPendingProfileID = "pending_profile_id"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeTenders holds the string denoting the tenders edge name in mutations.
	EdgeTenders = "tenders"
	// EdgeSales holds the string denoting the sales edge name in mutations.
	EdgeSales = "sales"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// EdgeApprover holds the string denoting the approver edge name in mutations.
	EdgeApprover = "approver"
	// EdgeVisitRecords holds the string denoting the visit_records edge name in mutations.
	EdgeVisitRecords = "visit_records"
	// EdgeProfiles holds the string denoting the profiles edge name in mutations.
	EdgeProfiles = "profiles"
	// EdgeActiveProfile holds the string denoting the active_profile edge name in mutations.
	EdgeActiveProfile = "active_profile"
	// EdgePendingProfile holds the string denoting the pending_profile edge name in mutations.
	EdgePendingProfile = "pending_profile"
	// Table holds the table name of the customer in the database.
	Table = "customers"
	// AreaTable is the table that holds the area relation/edge.
	AreaTable = "customers"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "area_id"
	// TendersTable is the table that holds the tenders relation/edge.
	TendersTable = "tenders"
	// TendersInverseTable is the table name for the Tender entity.
	// It exists in this package in order to avoid circular dependency with the "tender" package.
	TendersInverseTable = "tenders"
	// TendersColumn is the table column denoting the tenders relation/edge.
	TendersColumn = "customer_id"
	// SalesTable is the table that holds the sales relation/edge.
	SalesTable = "customers"
	// SalesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SalesInverseTable = "users"
	// SalesColumn is the table column denoting the sales relation/edge.
	SalesColumn = "sales_id"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "customers"
	// CreatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByInverseTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "created_by_id"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "customers"
	// UpdatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByInverseTable = "users"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "updated_by_id"
	// ApproverTable is the table that holds the approver relation/edge.
	ApproverTable = "customers"
	// ApproverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApproverInverseTable = "users"
	// ApproverColumn is the table column denoting the approver relation/edge.
	ApproverColumn = "approver_id"
	// VisitRecordsTable is the table that holds the visit_records relation/edge.
	VisitRecordsTable = "visit_records"
	// VisitRecordsInverseTable is the table name for the VisitRecord entity.
	// It exists in this package in order to avoid circular dependency with the "visitrecord" package.
	VisitRecordsInverseTable = "visit_records"
	// VisitRecordsColumn is the table column denoting the visit_records relation/edge.
	VisitRecordsColumn = "customer_id"
	// ProfilesTable is the table that holds the profiles relation/edge.
	ProfilesTable = "customer_profiles"
	// ProfilesInverseTable is the table name for the CustomerProfile entity.
	// It exists in this package in order to avoid circular dependency with the "customerprofile" package.
	ProfilesInverseTable = "customer_profiles"
	// ProfilesColumn is the table column denoting the profiles relation/edge.
	ProfilesColumn = "customer_id"
	// ActiveProfileTable is the table that holds the active_profile relation/edge.
	ActiveProfileTable = "customers"
	// ActiveProfileInverseTable is the table name for the CustomerProfile entity.
	// It exists in this package in order to avoid circular dependency with the "customerprofile" package.
	ActiveProfileInverseTable = "customer_profiles"
	// ActiveProfileColumn is the table column denoting the active_profile relation/edge.
	ActiveProfileColumn = "active_profile_id"
	// PendingProfileTable is the table that holds the pending_profile relation/edge.
	PendingProfileTable = "customers"
	// PendingProfileInverseTable is the table name for the CustomerProfile entity.
	// It exists in this package in order to avoid circular dependency with the "customerprofile" package.
	PendingProfileInverseTable = "customer_profiles"
	// PendingProfileColumn is the table column denoting the pending_profile relation/edge.
	PendingProfileColumn = "pending_profile_id"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldApprovalStatus,
	FieldOwnerType,
	FieldIndustry,
	FieldSize,
	FieldContactPerson,
	FieldContactPersonPosition,
	FieldContactPersonPhone,
	FieldContactPersonEmail,
	FieldDraft,
	FieldFeishuGroup,
	FieldAreaID,
	FieldSalesID,
	FieldCreatedByID,
	FieldUpdatedByID,
	FieldApproverID,
	FieldActiveProfileID,
	FieldPendingProfileID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultApprovalStatus holds the default value on creation for the "approval_status" field.
	DefaultApprovalStatus int
	// ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	ApprovalStatusValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Customer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByOwnerType orders the results by the owner_type field.
func ByOwnerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerType, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByContactPerson orders the results by the contact_person field.
func ByContactPerson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPerson, opts...).ToFunc()
}

// ByContactPersonPosition orders the results by the contact_person_position field.
func ByContactPersonPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPosition, opts...).ToFunc()
}

// ByContactPersonPhone orders the results by the contact_person_phone field.
func ByContactPersonPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPhone, opts...).ToFunc()
}

// ByContactPersonEmail orders the results by the contact_person_email field.
func ByContactPersonEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonEmail, opts...).ToFunc()
}

// ByAreaID orders the results by the area_id field.
func ByAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaID, opts...).ToFunc()
}

// BySalesID orders the results by the sales_id field.
func BySalesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalesID, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByUpdatedByID orders the results by the updated_by_id field.
func ByUpdatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByActiveProfileID orders the results by the active_profile_id field.
func ByActiveProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveProfileID, opts...).ToFunc()
}

// ByPendingProfileID orders the results by the pending_profile_id field.
func ByPendingProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPendingProfileID, opts...).ToFunc()
}

// ByAreaField orders the results by area field.
func ByAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByTendersCount orders the results by tenders count.
func ByTendersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTendersStep(), opts...)
	}
}

// ByTenders orders the results by tenders terms.
func ByTenders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTendersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySalesField orders the results by sales field.
func BySalesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSalesStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByField orders the results by updated_by field.
func ByUpdatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByApproverField orders the results by approver field.
func ByApproverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproverStep(), sql.OrderByField(field, opts...))
	}
}

// ByVisitRecordsCount orders the results by visit_records count.
func ByVisitRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVisitRecordsStep(), opts...)
	}
}

// ByVisitRecords orders the results by visit_records terms.
func ByVisitRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVisitRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfilesCount orders the results by profiles count.
func ByProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfilesStep(), opts...)
	}
}

// ByProfiles orders the results by profiles terms.
func ByProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActiveProfileField orders the results by active_profile field.
func ByActiveProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByPendingProfileField orders the results by pending_profile field.
func ByPendingProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPendingProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
	)
}
func newTendersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TendersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
	)
}
func newSalesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SalesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SalesTable, SalesColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
	)
}
func newUpdatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
	)
}
func newApproverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ApproverTable, ApproverColumn),
	)
}
func newVisitRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VisitRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VisitRecordsTable, VisitRecordsColumn),
	)
}
func newProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfilesTable, ProfilesColumn),
	)
}
func newActiveProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ActiveProfileTable, ActiveProfileColumn),
	)
}
func newPendingProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PendingProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PendingProfileTable, PendingProfileColumn),
	)
}
