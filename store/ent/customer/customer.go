// Code generated by ent, DO NOT EDIT.

package customer

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwnerType holds the string denoting the owner_type field in the database.
	FieldOwnerType = "owner_type"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContactPerson holds the string denoting the contact_person field in the database.
	FieldContactPerson = "contact_person"
	// FieldContactPersonPosition holds the string denoting the contact_person_position field in the database.
	FieldContactPersonPosition = "contact_person_position"
	// FieldContactPersonPhone holds the string denoting the contact_person_phone field in the database.
	FieldContactPersonPhone = "contact_person_phone"
	// FieldContactPersonEmail holds the string denoting the contact_person_email field in the database.
	FieldContactPersonEmail = "contact_person_email"
	// FieldCustomerOwner holds the string denoting the customer_owner field in the database.
	FieldCustomerOwner = "customer_owner"
	// FieldSalesLeader holds the string denoting the sales_leader field in the database.
	FieldSalesLeader = "sales_leader"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldAreaID holds the string denoting the area_id field in the database.
	FieldAreaID = "area_id"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeTenders holds the string denoting the tenders edge name in mutations.
	EdgeTenders = "tenders"
	// Table holds the table name of the customer in the database.
	Table = "customers"
	// AreaTable is the table that holds the area relation/edge.
	AreaTable = "customers"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "area_id"
	// TendersTable is the table that holds the tenders relation/edge.
	TendersTable = "tenders"
	// TendersInverseTable is the table name for the Tender entity.
	// It exists in this package in order to avoid circular dependency with the "tender" package.
	TendersInverseTable = "tenders"
	// TendersColumn is the table column denoting the tenders relation/edge.
	TendersColumn = "customer_id"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldOwnerType,
	FieldIndustry,
	FieldStatus,
	FieldContactPerson,
	FieldContactPersonPosition,
	FieldContactPersonPhone,
	FieldContactPersonEmail,
	FieldCustomerOwner,
	FieldSalesLeader,
	FieldCreatedBy,
	FieldAreaID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Customer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOwnerType orders the results by the owner_type field.
func ByOwnerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerType, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByContactPerson orders the results by the contact_person field.
func ByContactPerson(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPerson, opts...).ToFunc()
}

// ByContactPersonPosition orders the results by the contact_person_position field.
func ByContactPersonPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPosition, opts...).ToFunc()
}

// ByContactPersonPhone orders the results by the contact_person_phone field.
func ByContactPersonPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonPhone, opts...).ToFunc()
}

// ByContactPersonEmail orders the results by the contact_person_email field.
func ByContactPersonEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPersonEmail, opts...).ToFunc()
}

// ByAreaID orders the results by the area_id field.
func ByAreaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAreaID, opts...).ToFunc()
}

// ByAreaField orders the results by area field.
func ByAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByTendersCount orders the results by tenders count.
func ByTendersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTendersStep(), opts...)
	}
}

// ByTenders orders the results by tenders terms.
func ByTenders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTendersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
	)
}
func newTendersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TendersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TendersTable, TendersColumn),
	)
}
