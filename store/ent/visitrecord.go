// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/visitrecord"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VisitRecord is the model entity for the VisitRecord schema.
type VisitRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// VisitType holds the value of the "visit_type" field.
	VisitType int `json:"visit_type,omitempty"`
	// CommPeople holds the value of the "comm_people" field.
	CommPeople string `json:"comm_people,omitempty"`
	// CommContent holds the value of the "comm_content" field.
	CommContent string `json:"comm_content,omitempty"`
	// NextStep holds the value of the "next_step" field.
	NextStep *string `json:"next_step,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// TenderID holds the value of the "tender_id" field.
	TenderID *xid.ID `json:"tender_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID xid.ID `json:"customer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VisitRecordQuery when eager-loading is set.
	Edges        VisitRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VisitRecordEdges holds the relations/edges for other nodes in the graph.
type VisitRecordEdges struct {
	// Tender holds the value of the tender edge.
	Tender *Tender `json:"tender,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// FollowUpBys holds the value of the followUpBys edge.
	FollowUpBys []*User `json:"followUpBys,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedFollowUpBys map[string][]*User
}

// TenderOrErr returns the Tender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VisitRecordEdges) TenderOrErr() (*Tender, error) {
	if e.Tender != nil {
		return e.Tender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tender.Label}
	}
	return nil, &NotLoadedError{edge: "tender"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VisitRecordEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// FollowUpBysOrErr returns the FollowUpBys value or an error if the edge
// was not loaded in eager-loading.
func (e VisitRecordEdges) FollowUpBysOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.FollowUpBys, nil
	}
	return nil, &NotLoadedError{edge: "followUpBys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VisitRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case visitrecord.FieldTenderID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case visitrecord.FieldVisitType:
			values[i] = new(sql.NullInt64)
		case visitrecord.FieldCommPeople, visitrecord.FieldCommContent, visitrecord.FieldNextStep:
			values[i] = new(sql.NullString)
		case visitrecord.FieldCreatedAt, visitrecord.FieldUpdatedAt, visitrecord.FieldDate:
			values[i] = new(sql.NullTime)
		case visitrecord.FieldID, visitrecord.FieldCustomerID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VisitRecord fields.
func (vr *VisitRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visitrecord.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vr.ID = *value
			}
		case visitrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vr.CreatedAt = value.Time
			}
		case visitrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vr.UpdatedAt = value.Time
			}
		case visitrecord.FieldVisitType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field visit_type", values[i])
			} else if value.Valid {
				vr.VisitType = int(value.Int64)
			}
		case visitrecord.FieldCommPeople:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comm_people", values[i])
			} else if value.Valid {
				vr.CommPeople = value.String
			}
		case visitrecord.FieldCommContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comm_content", values[i])
			} else if value.Valid {
				vr.CommContent = value.String
			}
		case visitrecord.FieldNextStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_step", values[i])
			} else if value.Valid {
				vr.NextStep = new(string)
				*vr.NextStep = value.String
			}
		case visitrecord.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				vr.Date = value.Time
			}
		case visitrecord.FieldTenderID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tender_id", values[i])
			} else if value.Valid {
				vr.TenderID = new(xid.ID)
				*vr.TenderID = *value.S.(*xid.ID)
			}
		case visitrecord.FieldCustomerID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				vr.CustomerID = *value
			}
		default:
			vr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VisitRecord.
// This includes values selected through modifiers, order, etc.
func (vr *VisitRecord) Value(name string) (ent.Value, error) {
	return vr.selectValues.Get(name)
}

// QueryTender queries the "tender" edge of the VisitRecord entity.
func (vr *VisitRecord) QueryTender() *TenderQuery {
	return NewVisitRecordClient(vr.config).QueryTender(vr)
}

// QueryCustomer queries the "customer" edge of the VisitRecord entity.
func (vr *VisitRecord) QueryCustomer() *CustomerQuery {
	return NewVisitRecordClient(vr.config).QueryCustomer(vr)
}

// QueryFollowUpBys queries the "followUpBys" edge of the VisitRecord entity.
func (vr *VisitRecord) QueryFollowUpBys() *UserQuery {
	return NewVisitRecordClient(vr.config).QueryFollowUpBys(vr)
}

// Update returns a builder for updating this VisitRecord.
// Note that you need to call VisitRecord.Unwrap() before calling this method if this VisitRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VisitRecord) Update() *VisitRecordUpdateOne {
	return NewVisitRecordClient(vr.config).UpdateOne(vr)
}

// Unwrap unwraps the VisitRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VisitRecord) Unwrap() *VisitRecord {
	_tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VisitRecord is not a transactional entity")
	}
	vr.config.driver = _tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VisitRecord) String() string {
	var builder strings.Builder
	builder.WriteString("VisitRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("visit_type=")
	builder.WriteString(fmt.Sprintf("%v", vr.VisitType))
	builder.WriteString(", ")
	builder.WriteString("comm_people=")
	builder.WriteString(vr.CommPeople)
	builder.WriteString(", ")
	builder.WriteString("comm_content=")
	builder.WriteString(vr.CommContent)
	builder.WriteString(", ")
	if v := vr.NextStep; v != nil {
		builder.WriteString("next_step=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(vr.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := vr.TenderID; v != nil {
		builder.WriteString("tender_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", vr.CustomerID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedFollowUpBys returns the FollowUpBys named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vr *VisitRecord) NamedFollowUpBys(name string) ([]*User, error) {
	if vr.Edges.namedFollowUpBys == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vr.Edges.namedFollowUpBys[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vr *VisitRecord) appendNamedFollowUpBys(name string, edges ...*User) {
	if vr.Edges.namedFollowUpBys == nil {
		vr.Edges.namedFollowUpBys = make(map[string][]*User)
	}
	if len(edges) == 0 {
		vr.Edges.namedFollowUpBys[name] = []*User{}
	} else {
		vr.Edges.namedFollowUpBys[name] = append(vr.Edges.namedFollowUpBys[name], edges...)
	}
}

// VisitRecords is a parsable slice of VisitRecord.
type VisitRecords []*VisitRecord
