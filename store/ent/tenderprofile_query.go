// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderProfileQuery is the builder for querying TenderProfile entities.
type TenderProfileQuery struct {
	config
	ctx           *QueryContext
	order         []tenderprofile.OrderOption
	inters        []Interceptor
	predicates    []predicate.TenderProfile
	withTender    *TenderQuery
	withCustomer  *CustomerQuery
	withFinder    *UserQuery
	withCreatedBy *UserQuery
	withProvince  *ProvinceQuery
	withCity      *CityQuery
	withDistrict  *DistrictQuery
	withApprover  *UserQuery
	modifiers     []func(*sql.Selector)
	loadTotal     []func(context.Context, []*TenderProfile) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TenderProfileQuery builder.
func (tpq *TenderProfileQuery) Where(ps ...predicate.TenderProfile) *TenderProfileQuery {
	tpq.predicates = append(tpq.predicates, ps...)
	return tpq
}

// Limit the number of records to be returned by this query.
func (tpq *TenderProfileQuery) Limit(limit int) *TenderProfileQuery {
	tpq.ctx.Limit = &limit
	return tpq
}

// Offset to start from.
func (tpq *TenderProfileQuery) Offset(offset int) *TenderProfileQuery {
	tpq.ctx.Offset = &offset
	return tpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tpq *TenderProfileQuery) Unique(unique bool) *TenderProfileQuery {
	tpq.ctx.Unique = &unique
	return tpq
}

// Order specifies how the records should be ordered.
func (tpq *TenderProfileQuery) Order(o ...tenderprofile.OrderOption) *TenderProfileQuery {
	tpq.order = append(tpq.order, o...)
	return tpq
}

// QueryTender chains the current query on the "tender" edge.
func (tpq *TenderProfileQuery) QueryTender() *TenderQuery {
	query := (&TenderClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(tender.Table, tender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tenderprofile.TenderTable, tenderprofile.TenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (tpq *TenderProfileQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.CustomerTable, tenderprofile.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFinder chains the current query on the "finder" edge.
func (tpq *TenderProfileQuery) QueryFinder() *UserQuery {
	query := (&UserClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.FinderTable, tenderprofile.FinderColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (tpq *TenderProfileQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.CreatedByTable, tenderprofile.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvince chains the current query on the "province" edge.
func (tpq *TenderProfileQuery) QueryProvince() *ProvinceQuery {
	query := (&ProvinceClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(province.Table, province.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.ProvinceTable, tenderprofile.ProvinceColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (tpq *TenderProfileQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.CityTable, tenderprofile.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistrict chains the current query on the "district" edge.
func (tpq *TenderProfileQuery) QueryDistrict() *DistrictQuery {
	query := (&DistrictClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.DistrictTable, tenderprofile.DistrictColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprover chains the current query on the "approver" edge.
func (tpq *TenderProfileQuery) QueryApprover() *UserQuery {
	query := (&UserClient{config: tpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenderprofile.Table, tenderprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenderprofile.ApproverTable, tenderprofile.ApproverColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TenderProfile entity from the query.
// Returns a *NotFoundError when no TenderProfile was found.
func (tpq *TenderProfileQuery) First(ctx context.Context) (*TenderProfile, error) {
	nodes, err := tpq.Limit(1).All(setContextOp(ctx, tpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tenderprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpq *TenderProfileQuery) FirstX(ctx context.Context) *TenderProfile {
	node, err := tpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TenderProfile ID from the query.
// Returns a *NotFoundError when no TenderProfile ID was found.
func (tpq *TenderProfileQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tpq.Limit(1).IDs(setContextOp(ctx, tpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tenderprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tpq *TenderProfileQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := tpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TenderProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TenderProfile entity is found.
// Returns a *NotFoundError when no TenderProfile entities are found.
func (tpq *TenderProfileQuery) Only(ctx context.Context) (*TenderProfile, error) {
	nodes, err := tpq.Limit(2).All(setContextOp(ctx, tpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tenderprofile.Label}
	default:
		return nil, &NotSingularError{tenderprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpq *TenderProfileQuery) OnlyX(ctx context.Context) *TenderProfile {
	node, err := tpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TenderProfile ID in the query.
// Returns a *NotSingularError when more than one TenderProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (tpq *TenderProfileQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tpq.Limit(2).IDs(setContextOp(ctx, tpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tenderprofile.Label}
	default:
		err = &NotSingularError{tenderprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tpq *TenderProfileQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := tpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TenderProfiles.
func (tpq *TenderProfileQuery) All(ctx context.Context) ([]*TenderProfile, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryAll)
	if err := tpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TenderProfile, *TenderProfileQuery]()
	return withInterceptors[[]*TenderProfile](ctx, tpq, qr, tpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tpq *TenderProfileQuery) AllX(ctx context.Context) []*TenderProfile {
	nodes, err := tpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TenderProfile IDs.
func (tpq *TenderProfileQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if tpq.ctx.Unique == nil && tpq.path != nil {
		tpq.Unique(true)
	}
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryIDs)
	if err = tpq.Select(tenderprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpq *TenderProfileQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := tpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpq *TenderProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryCount)
	if err := tpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tpq, querierCount[*TenderProfileQuery](), tpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tpq *TenderProfileQuery) CountX(ctx context.Context) int {
	count, err := tpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpq *TenderProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tpq.ctx, ent.OpQueryExist)
	switch _, err := tpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tpq *TenderProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := tpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TenderProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpq *TenderProfileQuery) Clone() *TenderProfileQuery {
	if tpq == nil {
		return nil
	}
	return &TenderProfileQuery{
		config:        tpq.config,
		ctx:           tpq.ctx.Clone(),
		order:         append([]tenderprofile.OrderOption{}, tpq.order...),
		inters:        append([]Interceptor{}, tpq.inters...),
		predicates:    append([]predicate.TenderProfile{}, tpq.predicates...),
		withTender:    tpq.withTender.Clone(),
		withCustomer:  tpq.withCustomer.Clone(),
		withFinder:    tpq.withFinder.Clone(),
		withCreatedBy: tpq.withCreatedBy.Clone(),
		withProvince:  tpq.withProvince.Clone(),
		withCity:      tpq.withCity.Clone(),
		withDistrict:  tpq.withDistrict.Clone(),
		withApprover:  tpq.withApprover.Clone(),
		// clone intermediate query.
		sql:  tpq.sql.Clone(),
		path: tpq.path,
	}
}

// WithTender tells the query-builder to eager-load the nodes that are connected to
// the "tender" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithTender(opts ...func(*TenderQuery)) *TenderProfileQuery {
	query := (&TenderClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withTender = query
	return tpq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithCustomer(opts ...func(*CustomerQuery)) *TenderProfileQuery {
	query := (&CustomerClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withCustomer = query
	return tpq
}

// WithFinder tells the query-builder to eager-load the nodes that are connected to
// the "finder" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithFinder(opts ...func(*UserQuery)) *TenderProfileQuery {
	query := (&UserClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withFinder = query
	return tpq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithCreatedBy(opts ...func(*UserQuery)) *TenderProfileQuery {
	query := (&UserClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withCreatedBy = query
	return tpq
}

// WithProvince tells the query-builder to eager-load the nodes that are connected to
// the "province" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithProvince(opts ...func(*ProvinceQuery)) *TenderProfileQuery {
	query := (&ProvinceClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withProvince = query
	return tpq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithCity(opts ...func(*CityQuery)) *TenderProfileQuery {
	query := (&CityClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withCity = query
	return tpq
}

// WithDistrict tells the query-builder to eager-load the nodes that are connected to
// the "district" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithDistrict(opts ...func(*DistrictQuery)) *TenderProfileQuery {
	query := (&DistrictClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withDistrict = query
	return tpq
}

// WithApprover tells the query-builder to eager-load the nodes that are connected to
// the "approver" edge. The optional arguments are used to configure the query builder of the edge.
func (tpq *TenderProfileQuery) WithApprover(opts ...func(*UserQuery)) *TenderProfileQuery {
	query := (&UserClient{config: tpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tpq.withApprover = query
	return tpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TenderProfile.Query().
//		GroupBy(tenderprofile.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tpq *TenderProfileQuery) GroupBy(field string, fields ...string) *TenderProfileGroupBy {
	tpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TenderProfileGroupBy{build: tpq}
	grbuild.flds = &tpq.ctx.Fields
	grbuild.label = tenderprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TenderProfile.Query().
//		Select(tenderprofile.FieldCreatedAt).
//		Scan(ctx, &v)
func (tpq *TenderProfileQuery) Select(fields ...string) *TenderProfileSelect {
	tpq.ctx.Fields = append(tpq.ctx.Fields, fields...)
	sbuild := &TenderProfileSelect{TenderProfileQuery: tpq}
	sbuild.label = tenderprofile.Label
	sbuild.flds, sbuild.scan = &tpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TenderProfileSelect configured with the given aggregations.
func (tpq *TenderProfileQuery) Aggregate(fns ...AggregateFunc) *TenderProfileSelect {
	return tpq.Select().Aggregate(fns...)
}

func (tpq *TenderProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tpq); err != nil {
				return err
			}
		}
	}
	for _, f := range tpq.ctx.Fields {
		if !tenderprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tpq.path != nil {
		prev, err := tpq.path(ctx)
		if err != nil {
			return err
		}
		tpq.sql = prev
	}
	return nil
}

func (tpq *TenderProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TenderProfile, error) {
	var (
		nodes       = []*TenderProfile{}
		_spec       = tpq.querySpec()
		loadedTypes = [8]bool{
			tpq.withTender != nil,
			tpq.withCustomer != nil,
			tpq.withFinder != nil,
			tpq.withCreatedBy != nil,
			tpq.withProvince != nil,
			tpq.withCity != nil,
			tpq.withDistrict != nil,
			tpq.withApprover != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TenderProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TenderProfile{config: tpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tpq.modifiers) > 0 {
		_spec.Modifiers = tpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tpq.withTender; query != nil {
		if err := tpq.loadTender(ctx, query, nodes, nil,
			func(n *TenderProfile, e *Tender) { n.Edges.Tender = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withCustomer; query != nil {
		if err := tpq.loadCustomer(ctx, query, nodes, nil,
			func(n *TenderProfile, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withFinder; query != nil {
		if err := tpq.loadFinder(ctx, query, nodes, nil,
			func(n *TenderProfile, e *User) { n.Edges.Finder = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withCreatedBy; query != nil {
		if err := tpq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *TenderProfile, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withProvince; query != nil {
		if err := tpq.loadProvince(ctx, query, nodes, nil,
			func(n *TenderProfile, e *Province) { n.Edges.Province = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withCity; query != nil {
		if err := tpq.loadCity(ctx, query, nodes, nil,
			func(n *TenderProfile, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withDistrict; query != nil {
		if err := tpq.loadDistrict(ctx, query, nodes, nil,
			func(n *TenderProfile, e *District) { n.Edges.District = e }); err != nil {
			return nil, err
		}
	}
	if query := tpq.withApprover; query != nil {
		if err := tpq.loadApprover(ctx, query, nodes, nil,
			func(n *TenderProfile, e *User) { n.Edges.Approver = e }); err != nil {
			return nil, err
		}
	}
	for i := range tpq.loadTotal {
		if err := tpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tpq *TenderProfileQuery) loadTender(ctx context.Context, query *TenderQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *Tender)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		fk := nodes[i].TenderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tender.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tender_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *Customer)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].CustomerID == nil {
			continue
		}
		fk := *nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadFinder(ctx context.Context, query *UserQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].FinderID == nil {
			continue
		}
		fk := *nodes[i].FinderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "finder_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].CreatedByID == nil {
			continue
		}
		fk := *nodes[i].CreatedByID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadProvince(ctx context.Context, query *ProvinceQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *Province)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].ProvinceID == nil {
			continue
		}
		fk := *nodes[i].ProvinceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(province.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "province_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *City)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadDistrict(ctx context.Context, query *DistrictQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *District)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].DistrictID == nil {
			continue
		}
		fk := *nodes[i].DistrictID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(district.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "district_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tpq *TenderProfileQuery) loadApprover(ctx context.Context, query *UserQuery, nodes []*TenderProfile, init func(*TenderProfile), assign func(*TenderProfile, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*TenderProfile)
	for i := range nodes {
		if nodes[i].ApproverID == nil {
			continue
		}
		fk := *nodes[i].ApproverID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "approver_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tpq *TenderProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpq.querySpec()
	if len(tpq.modifiers) > 0 {
		_spec.Modifiers = tpq.modifiers
	}
	_spec.Node.Columns = tpq.ctx.Fields
	if len(tpq.ctx.Fields) > 0 {
		_spec.Unique = tpq.ctx.Unique != nil && *tpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tpq.driver, _spec)
}

func (tpq *TenderProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tenderprofile.Table, tenderprofile.Columns, sqlgraph.NewFieldSpec(tenderprofile.FieldID, field.TypeString))
	_spec.From = tpq.sql
	if unique := tpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tpq.path != nil {
		_spec.Unique = true
	}
	if fields := tpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenderprofile.FieldID)
		for i := range fields {
			if fields[i] != tenderprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tpq.withTender != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldTenderID)
		}
		if tpq.withCustomer != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldCustomerID)
		}
		if tpq.withFinder != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldFinderID)
		}
		if tpq.withCreatedBy != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldCreatedByID)
		}
		if tpq.withProvince != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldProvinceID)
		}
		if tpq.withCity != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldCityID)
		}
		if tpq.withDistrict != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldDistrictID)
		}
		if tpq.withApprover != nil {
			_spec.Node.AddColumnOnce(tenderprofile.FieldApproverID)
		}
	}
	if ps := tpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpq *TenderProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tpq.driver.Dialect())
	t1 := builder.Table(tenderprofile.Table)
	columns := tpq.ctx.Fields
	if len(columns) == 0 {
		columns = tenderprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tpq.sql != nil {
		selector = tpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tpq.ctx.Unique != nil && *tpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tpq.predicates {
		p(selector)
	}
	for _, p := range tpq.order {
		p(selector)
	}
	if offset := tpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TenderProfileGroupBy is the group-by builder for TenderProfile entities.
type TenderProfileGroupBy struct {
	selector
	build *TenderProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpgb *TenderProfileGroupBy) Aggregate(fns ...AggregateFunc) *TenderProfileGroupBy {
	tpgb.fns = append(tpgb.fns, fns...)
	return tpgb
}

// Scan applies the selector query and scans the result into the given value.
func (tpgb *TenderProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tpgb.build.ctx, ent.OpQueryGroupBy)
	if err := tpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderProfileQuery, *TenderProfileGroupBy](ctx, tpgb.build, tpgb, tpgb.build.inters, v)
}

func (tpgb *TenderProfileGroupBy) sqlScan(ctx context.Context, root *TenderProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tpgb.fns))
	for _, fn := range tpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tpgb.flds)+len(tpgb.fns))
		for _, f := range *tpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TenderProfileSelect is the builder for selecting fields of TenderProfile entities.
type TenderProfileSelect struct {
	*TenderProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tps *TenderProfileSelect) Aggregate(fns ...AggregateFunc) *TenderProfileSelect {
	tps.fns = append(tps.fns, fns...)
	return tps
}

// Scan applies the selector query and scans the result into the given value.
func (tps *TenderProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tps.ctx, ent.OpQuerySelect)
	if err := tps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderProfileQuery, *TenderProfileSelect](ctx, tps.TenderProfileQuery, tps, tps.inters, v)
}

func (tps *TenderProfileSelect) sqlScan(ctx context.Context, root *TenderProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tps.fns))
	for _, fn := range tps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
