// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProvinceCreate is the builder for creating a Province entity.
type ProvinceCreate struct {
	config
	mutation *ProvinceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProvinceCreate) SetCreatedAt(t time.Time) *ProvinceCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProvinceCreate) SetNillableCreatedAt(t *time.Time) *ProvinceCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProvinceCreate) SetUpdatedAt(t time.Time) *ProvinceCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProvinceCreate) SetNillableUpdatedAt(t *time.Time) *ProvinceCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAdcode sets the "adcode" field.
func (pc *ProvinceCreate) SetAdcode(i int) *ProvinceCreate {
	pc.mutation.SetAdcode(i)
	return pc
}

// SetName sets the "name" field.
func (pc *ProvinceCreate) SetName(s string) *ProvinceCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetCenter sets the "center" field.
func (pc *ProvinceCreate) SetCenter(gj *geo.GeoJson) *ProvinceCreate {
	pc.mutation.SetCenter(gj)
	return pc
}

// SetCountryID sets the "country_id" field.
func (pc *ProvinceCreate) SetCountryID(x xid.ID) *ProvinceCreate {
	pc.mutation.SetCountryID(x)
	return pc
}

// SetID sets the "id" field.
func (pc *ProvinceCreate) SetID(x xid.ID) *ProvinceCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProvinceCreate) SetNillableID(x *xid.ID) *ProvinceCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (pc *ProvinceCreate) AddDistrictIDs(ids ...xid.ID) *ProvinceCreate {
	pc.mutation.AddDistrictIDs(ids...)
	return pc
}

// AddDistricts adds the "districts" edges to the District entity.
func (pc *ProvinceCreate) AddDistricts(d ...*District) *ProvinceCreate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDistrictIDs(ids...)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (pc *ProvinceCreate) AddCityIDs(ids ...xid.ID) *ProvinceCreate {
	pc.mutation.AddCityIDs(ids...)
	return pc
}

// AddCities adds the "cities" edges to the City entity.
func (pc *ProvinceCreate) AddCities(c ...*City) *ProvinceCreate {
	ids := make([]xid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCityIDs(ids...)
}

// SetCountry sets the "country" edge to the Country entity.
func (pc *ProvinceCreate) SetCountry(c *Country) *ProvinceCreate {
	return pc.SetCountryID(c.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (pc *ProvinceCreate) AddTenderIDs(ids ...xid.ID) *ProvinceCreate {
	pc.mutation.AddTenderIDs(ids...)
	return pc
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (pc *ProvinceCreate) AddTenders(t ...*Tender) *ProvinceCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTenderIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (pc *ProvinceCreate) Mutation() *ProvinceMutation {
	return pc.mutation
}

// Save creates the Province in the database.
func (pc *ProvinceCreate) Save(ctx context.Context) (*Province, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProvinceCreate) SaveX(ctx context.Context) *Province {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProvinceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProvinceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProvinceCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := province.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := province.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := province.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProvinceCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Province.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Province.updated_at"`)}
	}
	if _, ok := pc.mutation.Adcode(); !ok {
		return &ValidationError{Name: "adcode", err: errors.New(`ent: missing required field "Province.adcode"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Province.name"`)}
	}
	if _, ok := pc.mutation.Center(); !ok {
		return &ValidationError{Name: "center", err: errors.New(`ent: missing required field "Province.center"`)}
	}
	if _, ok := pc.mutation.CountryID(); !ok {
		return &ValidationError{Name: "country_id", err: errors.New(`ent: missing required field "Province.country_id"`)}
	}
	if len(pc.mutation.CountryIDs()) == 0 {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required edge "Province.country"`)}
	}
	return nil
}

func (pc *ProvinceCreate) sqlSave(ctx context.Context) (*Province, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProvinceCreate) createSpec() (*Province, *sqlgraph.CreateSpec) {
	var (
		_node = &Province{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(province.Table, sqlgraph.NewFieldSpec(province.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(province.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(province.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Adcode(); ok {
		_spec.SetField(province.FieldAdcode, field.TypeInt, value)
		_node.Adcode = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(province.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Center(); ok {
		_spec.SetField(province.FieldCenter, field.TypeOther, value)
		_node.Center = value
	}
	if nodes := pc.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.DistrictsTable,
			Columns: []string{province.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.CitiesTable,
			Columns: []string{province.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.CountryTable,
			Columns: []string{province.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CountryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.TendersTable,
			Columns: []string{province.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Province.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProvinceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProvinceCreate) OnConflict(opts ...sql.ConflictOption) *ProvinceUpsertOne {
	pc.conflict = opts
	return &ProvinceUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Province.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProvinceCreate) OnConflictColumns(columns ...string) *ProvinceUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProvinceUpsertOne{
		create: pc,
	}
}

type (
	// ProvinceUpsertOne is the builder for "upsert"-ing
	//  one Province node.
	ProvinceUpsertOne struct {
		create *ProvinceCreate
	}

	// ProvinceUpsert is the "OnConflict" setter.
	ProvinceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProvinceUpsert) SetUpdatedAt(v time.Time) *ProvinceUpsert {
	u.Set(province.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProvinceUpsert) UpdateUpdatedAt() *ProvinceUpsert {
	u.SetExcluded(province.FieldUpdatedAt)
	return u
}

// SetAdcode sets the "adcode" field.
func (u *ProvinceUpsert) SetAdcode(v int) *ProvinceUpsert {
	u.Set(province.FieldAdcode, v)
	return u
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *ProvinceUpsert) UpdateAdcode() *ProvinceUpsert {
	u.SetExcluded(province.FieldAdcode)
	return u
}

// AddAdcode adds v to the "adcode" field.
func (u *ProvinceUpsert) AddAdcode(v int) *ProvinceUpsert {
	u.Add(province.FieldAdcode, v)
	return u
}

// SetName sets the "name" field.
func (u *ProvinceUpsert) SetName(v string) *ProvinceUpsert {
	u.Set(province.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProvinceUpsert) UpdateName() *ProvinceUpsert {
	u.SetExcluded(province.FieldName)
	return u
}

// SetCenter sets the "center" field.
func (u *ProvinceUpsert) SetCenter(v *geo.GeoJson) *ProvinceUpsert {
	u.Set(province.FieldCenter, v)
	return u
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *ProvinceUpsert) UpdateCenter() *ProvinceUpsert {
	u.SetExcluded(province.FieldCenter)
	return u
}

// SetCountryID sets the "country_id" field.
func (u *ProvinceUpsert) SetCountryID(v xid.ID) *ProvinceUpsert {
	u.Set(province.FieldCountryID, v)
	return u
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *ProvinceUpsert) UpdateCountryID() *ProvinceUpsert {
	u.SetExcluded(province.FieldCountryID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Province.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(province.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProvinceUpsertOne) UpdateNewValues() *ProvinceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(province.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(province.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Province.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProvinceUpsertOne) Ignore() *ProvinceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProvinceUpsertOne) DoNothing() *ProvinceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProvinceCreate.OnConflict
// documentation for more info.
func (u *ProvinceUpsertOne) Update(set func(*ProvinceUpsert)) *ProvinceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProvinceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProvinceUpsertOne) SetUpdatedAt(v time.Time) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProvinceUpsertOne) UpdateUpdatedAt() *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAdcode sets the "adcode" field.
func (u *ProvinceUpsertOne) SetAdcode(v int) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetAdcode(v)
	})
}

// AddAdcode adds v to the "adcode" field.
func (u *ProvinceUpsertOne) AddAdcode(v int) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.AddAdcode(v)
	})
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *ProvinceUpsertOne) UpdateAdcode() *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateAdcode()
	})
}

// SetName sets the "name" field.
func (u *ProvinceUpsertOne) SetName(v string) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProvinceUpsertOne) UpdateName() *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateName()
	})
}

// SetCenter sets the "center" field.
func (u *ProvinceUpsertOne) SetCenter(v *geo.GeoJson) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetCenter(v)
	})
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *ProvinceUpsertOne) UpdateCenter() *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateCenter()
	})
}

// SetCountryID sets the "country_id" field.
func (u *ProvinceUpsertOne) SetCountryID(v xid.ID) *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *ProvinceUpsertOne) UpdateCountryID() *ProvinceUpsertOne {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateCountryID()
	})
}

// Exec executes the query.
func (u *ProvinceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProvinceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProvinceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProvinceUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProvinceUpsertOne.ID is not supported by MySQL driver. Use ProvinceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProvinceUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProvinceCreateBulk is the builder for creating many Province entities in bulk.
type ProvinceCreateBulk struct {
	config
	err      error
	builders []*ProvinceCreate
	conflict []sql.ConflictOption
}

// Save creates the Province entities in the database.
func (pcb *ProvinceCreateBulk) Save(ctx context.Context) ([]*Province, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Province, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProvinceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProvinceCreateBulk) SaveX(ctx context.Context) []*Province {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProvinceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProvinceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Province.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProvinceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProvinceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProvinceUpsertBulk {
	pcb.conflict = opts
	return &ProvinceUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Province.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProvinceCreateBulk) OnConflictColumns(columns ...string) *ProvinceUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProvinceUpsertBulk{
		create: pcb,
	}
}

// ProvinceUpsertBulk is the builder for "upsert"-ing
// a bulk of Province nodes.
type ProvinceUpsertBulk struct {
	create *ProvinceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Province.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(province.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProvinceUpsertBulk) UpdateNewValues() *ProvinceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(province.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(province.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Province.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProvinceUpsertBulk) Ignore() *ProvinceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProvinceUpsertBulk) DoNothing() *ProvinceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProvinceCreateBulk.OnConflict
// documentation for more info.
func (u *ProvinceUpsertBulk) Update(set func(*ProvinceUpsert)) *ProvinceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProvinceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProvinceUpsertBulk) SetUpdatedAt(v time.Time) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProvinceUpsertBulk) UpdateUpdatedAt() *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAdcode sets the "adcode" field.
func (u *ProvinceUpsertBulk) SetAdcode(v int) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetAdcode(v)
	})
}

// AddAdcode adds v to the "adcode" field.
func (u *ProvinceUpsertBulk) AddAdcode(v int) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.AddAdcode(v)
	})
}

// UpdateAdcode sets the "adcode" field to the value that was provided on create.
func (u *ProvinceUpsertBulk) UpdateAdcode() *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateAdcode()
	})
}

// SetName sets the "name" field.
func (u *ProvinceUpsertBulk) SetName(v string) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProvinceUpsertBulk) UpdateName() *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateName()
	})
}

// SetCenter sets the "center" field.
func (u *ProvinceUpsertBulk) SetCenter(v *geo.GeoJson) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetCenter(v)
	})
}

// UpdateCenter sets the "center" field to the value that was provided on create.
func (u *ProvinceUpsertBulk) UpdateCenter() *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateCenter()
	})
}

// SetCountryID sets the "country_id" field.
func (u *ProvinceUpsertBulk) SetCountryID(v xid.ID) *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *ProvinceUpsertBulk) UpdateCountryID() *ProvinceUpsertBulk {
	return u.Update(func(s *ProvinceUpsert) {
		s.UpdateCountryID()
	})
}

// Exec executes the query.
func (u *ProvinceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProvinceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProvinceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProvinceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
