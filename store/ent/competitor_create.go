// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tendercompetitor"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompetitorCreate is the builder for creating a Competitor entity.
type CompetitorCreate struct {
	config
	mutation *CompetitorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CompetitorCreate) SetCreatedAt(t time.Time) *CompetitorCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CompetitorCreate) SetNillableCreatedAt(t *time.Time) *CompetitorCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CompetitorCreate) SetUpdatedAt(t time.Time) *CompetitorCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CompetitorCreate) SetNillableUpdatedAt(t *time.Time) *CompetitorCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetShortName sets the "short_name" field.
func (cc *CompetitorCreate) SetShortName(s string) *CompetitorCreate {
	cc.mutation.SetShortName(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CompetitorCreate) SetName(s string) *CompetitorCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CompetitorCreate) SetID(x xid.ID) *CompetitorCreate {
	cc.mutation.SetID(x)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CompetitorCreate) SetNillableID(x *xid.ID) *CompetitorCreate {
	if x != nil {
		cc.SetID(*x)
	}
	return cc
}

// AddTenderIDs adds the "tenders" edge to the TenderCompetitor entity by IDs.
func (cc *CompetitorCreate) AddTenderIDs(ids ...xid.ID) *CompetitorCreate {
	cc.mutation.AddTenderIDs(ids...)
	return cc
}

// AddTenders adds the "tenders" edges to the TenderCompetitor entity.
func (cc *CompetitorCreate) AddTenders(t ...*TenderCompetitor) *CompetitorCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTenderIDs(ids...)
}

// Mutation returns the CompetitorMutation object of the builder.
func (cc *CompetitorCreate) Mutation() *CompetitorMutation {
	return cc.mutation
}

// Save creates the Competitor in the database.
func (cc *CompetitorCreate) Save(ctx context.Context) (*Competitor, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompetitorCreate) SaveX(ctx context.Context) *Competitor {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompetitorCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompetitorCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompetitorCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := competitor.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := competitor.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := competitor.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompetitorCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Competitor.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Competitor.updated_at"`)}
	}
	if _, ok := cc.mutation.ShortName(); !ok {
		return &ValidationError{Name: "short_name", err: errors.New(`ent: missing required field "Competitor.short_name"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Competitor.name"`)}
	}
	return nil
}

func (cc *CompetitorCreate) sqlSave(ctx context.Context) (*Competitor, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompetitorCreate) createSpec() (*Competitor, *sqlgraph.CreateSpec) {
	var (
		_node = &Competitor{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(competitor.Table, sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(competitor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(competitor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.ShortName(); ok {
		_spec.SetField(competitor.FieldShortName, field.TypeString, value)
		_node.ShortName = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(competitor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := cc.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competitor.TendersTable,
			Columns: []string{competitor.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Competitor.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CompetitorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CompetitorCreate) OnConflict(opts ...sql.ConflictOption) *CompetitorUpsertOne {
	cc.conflict = opts
	return &CompetitorUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Competitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CompetitorCreate) OnConflictColumns(columns ...string) *CompetitorUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CompetitorUpsertOne{
		create: cc,
	}
}

type (
	// CompetitorUpsertOne is the builder for "upsert"-ing
	//  one Competitor node.
	CompetitorUpsertOne struct {
		create *CompetitorCreate
	}

	// CompetitorUpsert is the "OnConflict" setter.
	CompetitorUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CompetitorUpsert) SetUpdatedAt(v time.Time) *CompetitorUpsert {
	u.Set(competitor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CompetitorUpsert) UpdateUpdatedAt() *CompetitorUpsert {
	u.SetExcluded(competitor.FieldUpdatedAt)
	return u
}

// SetShortName sets the "short_name" field.
func (u *CompetitorUpsert) SetShortName(v string) *CompetitorUpsert {
	u.Set(competitor.FieldShortName, v)
	return u
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *CompetitorUpsert) UpdateShortName() *CompetitorUpsert {
	u.SetExcluded(competitor.FieldShortName)
	return u
}

// SetName sets the "name" field.
func (u *CompetitorUpsert) SetName(v string) *CompetitorUpsert {
	u.Set(competitor.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitorUpsert) UpdateName() *CompetitorUpsert {
	u.SetExcluded(competitor.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Competitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(competitor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CompetitorUpsertOne) UpdateNewValues() *CompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(competitor.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(competitor.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Competitor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CompetitorUpsertOne) Ignore() *CompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CompetitorUpsertOne) DoNothing() *CompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CompetitorCreate.OnConflict
// documentation for more info.
func (u *CompetitorUpsertOne) Update(set func(*CompetitorUpsert)) *CompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CompetitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CompetitorUpsertOne) SetUpdatedAt(v time.Time) *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CompetitorUpsertOne) UpdateUpdatedAt() *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetShortName sets the "short_name" field.
func (u *CompetitorUpsertOne) SetShortName(v string) *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetShortName(v)
	})
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *CompetitorUpsertOne) UpdateShortName() *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateShortName()
	})
}

// SetName sets the "name" field.
func (u *CompetitorUpsertOne) SetName(v string) *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitorUpsertOne) UpdateName() *CompetitorUpsertOne {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *CompetitorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CompetitorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CompetitorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CompetitorUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CompetitorUpsertOne.ID is not supported by MySQL driver. Use CompetitorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CompetitorUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CompetitorCreateBulk is the builder for creating many Competitor entities in bulk.
type CompetitorCreateBulk struct {
	config
	err      error
	builders []*CompetitorCreate
	conflict []sql.ConflictOption
}

// Save creates the Competitor entities in the database.
func (ccb *CompetitorCreateBulk) Save(ctx context.Context) ([]*Competitor, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Competitor, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompetitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompetitorCreateBulk) SaveX(ctx context.Context) []*Competitor {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompetitorCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompetitorCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Competitor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CompetitorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CompetitorCreateBulk) OnConflict(opts ...sql.ConflictOption) *CompetitorUpsertBulk {
	ccb.conflict = opts
	return &CompetitorUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Competitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CompetitorCreateBulk) OnConflictColumns(columns ...string) *CompetitorUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CompetitorUpsertBulk{
		create: ccb,
	}
}

// CompetitorUpsertBulk is the builder for "upsert"-ing
// a bulk of Competitor nodes.
type CompetitorUpsertBulk struct {
	create *CompetitorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Competitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(competitor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CompetitorUpsertBulk) UpdateNewValues() *CompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(competitor.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(competitor.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Competitor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CompetitorUpsertBulk) Ignore() *CompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CompetitorUpsertBulk) DoNothing() *CompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CompetitorCreateBulk.OnConflict
// documentation for more info.
func (u *CompetitorUpsertBulk) Update(set func(*CompetitorUpsert)) *CompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CompetitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CompetitorUpsertBulk) SetUpdatedAt(v time.Time) *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CompetitorUpsertBulk) UpdateUpdatedAt() *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetShortName sets the "short_name" field.
func (u *CompetitorUpsertBulk) SetShortName(v string) *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetShortName(v)
	})
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *CompetitorUpsertBulk) UpdateShortName() *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateShortName()
	})
}

// SetName sets the "name" field.
func (u *CompetitorUpsertBulk) SetName(v string) *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitorUpsertBulk) UpdateName() *CompetitorUpsertBulk {
	return u.Update(func(s *CompetitorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *CompetitorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CompetitorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CompetitorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CompetitorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
