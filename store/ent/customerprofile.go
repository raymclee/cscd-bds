// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CustomerProfile is the model entity for the CustomerProfile schema.
type CustomerProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// 1 待審核 2 已通過 3 已拒絕 4 已撤回
	ApprovalStatus int `json:"approval_status,omitempty"`
	// OwnerType holds the value of the "owner_type" field.
	OwnerType *int `json:"owner_type,omitempty"`
	// Industry holds the value of the "industry" field.
	Industry *int `json:"industry,omitempty"`
	// Size holds the value of the "size" field.
	Size *int `json:"size,omitempty"`
	// ContactPerson holds the value of the "contact_person" field.
	ContactPerson *string `json:"contact_person,omitempty"`
	// ContactPersonPosition holds the value of the "contact_person_position" field.
	ContactPersonPosition *string `json:"contact_person_position,omitempty"`
	// ContactPersonPhone holds the value of the "contact_person_phone" field.
	ContactPersonPhone *string `json:"contact_person_phone,omitempty"`
	// ContactPersonEmail holds the value of the "contact_person_email" field.
	ContactPersonEmail *string `json:"contact_person_email,omitempty"`
	// SalesID holds the value of the "sales_id" field.
	SalesID *xid.ID `json:"sales_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID xid.ID `json:"customer_id,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID *xid.ID `json:"created_by_id,omitempty"`
	// ApproverID holds the value of the "approver_id" field.
	ApproverID *xid.ID `json:"approver_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerProfileQuery when eager-loading is set.
	Edges        CustomerProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerProfileEdges holds the relations/edges for other nodes in the graph.
type CustomerProfileEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// Sales holds the value of the sales edge.
	Sales *User `json:"sales,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerProfileEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerProfileEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerProfileEdges) ApproverOrErr() (*User, error) {
	if e.Approver != nil {
		return e.Approver, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// SalesOrErr returns the Sales value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerProfileEdges) SalesOrErr() (*User, error) {
	if e.Sales != nil {
		return e.Sales, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sales"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customerprofile.FieldSalesID, customerprofile.FieldCreatedByID, customerprofile.FieldApproverID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case customerprofile.FieldApprovalStatus, customerprofile.FieldOwnerType, customerprofile.FieldIndustry, customerprofile.FieldSize:
			values[i] = new(sql.NullInt64)
		case customerprofile.FieldName, customerprofile.FieldContactPerson, customerprofile.FieldContactPersonPosition, customerprofile.FieldContactPersonPhone, customerprofile.FieldContactPersonEmail:
			values[i] = new(sql.NullString)
		case customerprofile.FieldCreatedAt, customerprofile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case customerprofile.FieldID, customerprofile.FieldCustomerID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerProfile fields.
func (cp *CustomerProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customerprofile.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case customerprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case customerprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case customerprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case customerprofile.FieldApprovalStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approval_status", values[i])
			} else if value.Valid {
				cp.ApprovalStatus = int(value.Int64)
			}
		case customerprofile.FieldOwnerType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_type", values[i])
			} else if value.Valid {
				cp.OwnerType = new(int)
				*cp.OwnerType = int(value.Int64)
			}
		case customerprofile.FieldIndustry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				cp.Industry = new(int)
				*cp.Industry = int(value.Int64)
			}
		case customerprofile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				cp.Size = new(int)
				*cp.Size = int(value.Int64)
			}
		case customerprofile.FieldContactPerson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person", values[i])
			} else if value.Valid {
				cp.ContactPerson = new(string)
				*cp.ContactPerson = value.String
			}
		case customerprofile.FieldContactPersonPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_position", values[i])
			} else if value.Valid {
				cp.ContactPersonPosition = new(string)
				*cp.ContactPersonPosition = value.String
			}
		case customerprofile.FieldContactPersonPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_phone", values[i])
			} else if value.Valid {
				cp.ContactPersonPhone = new(string)
				*cp.ContactPersonPhone = value.String
			}
		case customerprofile.FieldContactPersonEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_person_email", values[i])
			} else if value.Valid {
				cp.ContactPersonEmail = new(string)
				*cp.ContactPersonEmail = value.String
			}
		case customerprofile.FieldSalesID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sales_id", values[i])
			} else if value.Valid {
				cp.SalesID = new(xid.ID)
				*cp.SalesID = *value.S.(*xid.ID)
			}
		case customerprofile.FieldCustomerID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				cp.CustomerID = *value
			}
		case customerprofile.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				cp.CreatedByID = new(xid.ID)
				*cp.CreatedByID = *value.S.(*xid.ID)
			}
		case customerprofile.FieldApproverID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				cp.ApproverID = new(xid.ID)
				*cp.ApproverID = *value.S.(*xid.ID)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomerProfile.
// This includes values selected through modifiers, order, etc.
func (cp *CustomerProfile) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the CustomerProfile entity.
func (cp *CustomerProfile) QueryCustomer() *CustomerQuery {
	return NewCustomerProfileClient(cp.config).QueryCustomer(cp)
}

// QueryCreatedBy queries the "created_by" edge of the CustomerProfile entity.
func (cp *CustomerProfile) QueryCreatedBy() *UserQuery {
	return NewCustomerProfileClient(cp.config).QueryCreatedBy(cp)
}

// QueryApprover queries the "approver" edge of the CustomerProfile entity.
func (cp *CustomerProfile) QueryApprover() *UserQuery {
	return NewCustomerProfileClient(cp.config).QueryApprover(cp)
}

// QuerySales queries the "sales" edge of the CustomerProfile entity.
func (cp *CustomerProfile) QuerySales() *UserQuery {
	return NewCustomerProfileClient(cp.config).QuerySales(cp)
}

// Update returns a builder for updating this CustomerProfile.
// Note that you need to call CustomerProfile.Unwrap() before calling this method if this CustomerProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CustomerProfile) Update() *CustomerProfileUpdateOne {
	return NewCustomerProfileClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CustomerProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CustomerProfile) Unwrap() *CustomerProfile {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerProfile is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CustomerProfile) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", ")
	builder.WriteString("approval_status=")
	builder.WriteString(fmt.Sprintf("%v", cp.ApprovalStatus))
	builder.WriteString(", ")
	if v := cp.OwnerType; v != nil {
		builder.WriteString("owner_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cp.Industry; v != nil {
		builder.WriteString("industry=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cp.Size; v != nil {
		builder.WriteString("size=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cp.ContactPerson; v != nil {
		builder.WriteString("contact_person=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.ContactPersonPosition; v != nil {
		builder.WriteString("contact_person_position=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.ContactPersonPhone; v != nil {
		builder.WriteString("contact_person_phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.ContactPersonEmail; v != nil {
		builder.WriteString("contact_person_email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cp.SalesID; v != nil {
		builder.WriteString("sales_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.CustomerID))
	builder.WriteString(", ")
	if v := cp.CreatedByID; v != nil {
		builder.WriteString("created_by_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := cp.ApproverID; v != nil {
		builder.WriteString("approver_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CustomerProfiles is a parsable slice of CustomerProfile.
type CustomerProfiles []*CustomerProfile
