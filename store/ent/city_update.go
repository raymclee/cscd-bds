// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CityUpdate is the builder for updating City entities.
type CityUpdate struct {
	config
	hooks    []Hook
	mutation *CityMutation
}

// Where appends a list predicates to the CityUpdate builder.
func (cu *CityUpdate) Where(ps ...predicate.City) *CityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CityUpdate) SetUpdatedAt(t time.Time) *CityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetAdcode sets the "adcode" field.
func (cu *CityUpdate) SetAdcode(i int) *CityUpdate {
	cu.mutation.ResetAdcode()
	cu.mutation.SetAdcode(i)
	return cu
}

// SetNillableAdcode sets the "adcode" field if the given value is not nil.
func (cu *CityUpdate) SetNillableAdcode(i *int) *CityUpdate {
	if i != nil {
		cu.SetAdcode(*i)
	}
	return cu
}

// AddAdcode adds i to the "adcode" field.
func (cu *CityUpdate) AddAdcode(i int) *CityUpdate {
	cu.mutation.AddAdcode(i)
	return cu
}

// SetProvCode sets the "prov_code" field.
func (cu *CityUpdate) SetProvCode(i int) *CityUpdate {
	cu.mutation.ResetProvCode()
	cu.mutation.SetProvCode(i)
	return cu
}

// SetNillableProvCode sets the "prov_code" field if the given value is not nil.
func (cu *CityUpdate) SetNillableProvCode(i *int) *CityUpdate {
	if i != nil {
		cu.SetProvCode(*i)
	}
	return cu
}

// AddProvCode adds i to the "prov_code" field.
func (cu *CityUpdate) AddProvCode(i int) *CityUpdate {
	cu.mutation.AddProvCode(i)
	return cu
}

// SetName sets the "name" field.
func (cu *CityUpdate) SetName(s string) *CityUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CityUpdate) SetNillableName(s *string) *CityUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCenter sets the "center" field.
func (cu *CityUpdate) SetCenter(gj *geo.GeoJson) *CityUpdate {
	cu.mutation.SetCenter(gj)
	return cu
}

// SetProvinceID sets the "province_id" field.
func (cu *CityUpdate) SetProvinceID(x xid.ID) *CityUpdate {
	cu.mutation.SetProvinceID(x)
	return cu
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (cu *CityUpdate) SetNillableProvinceID(x *xid.ID) *CityUpdate {
	if x != nil {
		cu.SetProvinceID(*x)
	}
	return cu
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (cu *CityUpdate) AddDistrictIDs(ids ...xid.ID) *CityUpdate {
	cu.mutation.AddDistrictIDs(ids...)
	return cu
}

// AddDistricts adds the "districts" edges to the District entity.
func (cu *CityUpdate) AddDistricts(d ...*District) *CityUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDistrictIDs(ids...)
}

// SetProvince sets the "province" edge to the Province entity.
func (cu *CityUpdate) SetProvince(p *Province) *CityUpdate {
	return cu.SetProvinceID(p.ID)
}

// Mutation returns the CityMutation object of the builder.
func (cu *CityUpdate) Mutation() *CityMutation {
	return cu.mutation
}

// ClearDistricts clears all "districts" edges to the District entity.
func (cu *CityUpdate) ClearDistricts() *CityUpdate {
	cu.mutation.ClearDistricts()
	return cu
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (cu *CityUpdate) RemoveDistrictIDs(ids ...xid.ID) *CityUpdate {
	cu.mutation.RemoveDistrictIDs(ids...)
	return cu
}

// RemoveDistricts removes "districts" edges to District entities.
func (cu *CityUpdate) RemoveDistricts(d ...*District) *CityUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDistrictIDs(ids...)
}

// ClearProvince clears the "province" edge to the Province entity.
func (cu *CityUpdate) ClearProvince() *CityUpdate {
	cu.mutation.ClearProvince()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CityUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CityUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := city.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CityUpdate) check() error {
	if cu.mutation.ProvinceCleared() && len(cu.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "City.province"`)
	}
	return nil
}

func (cu *CityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(city.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Adcode(); ok {
		_spec.SetField(city.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedAdcode(); ok {
		_spec.AddField(city.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ProvCode(); ok {
		_spec.SetField(city.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedProvCode(); ok {
		_spec.AddField(city.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Center(); ok {
		_spec.SetField(city.FieldCenter, field.TypeOther, value)
	}
	if cu.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !cu.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvinceTable,
			Columns: []string{city.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvinceTable,
			Columns: []string{city.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CityUpdateOne is the builder for updating a single City entity.
type CityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CityUpdateOne) SetUpdatedAt(t time.Time) *CityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetAdcode sets the "adcode" field.
func (cuo *CityUpdateOne) SetAdcode(i int) *CityUpdateOne {
	cuo.mutation.ResetAdcode()
	cuo.mutation.SetAdcode(i)
	return cuo
}

// SetNillableAdcode sets the "adcode" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableAdcode(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetAdcode(*i)
	}
	return cuo
}

// AddAdcode adds i to the "adcode" field.
func (cuo *CityUpdateOne) AddAdcode(i int) *CityUpdateOne {
	cuo.mutation.AddAdcode(i)
	return cuo
}

// SetProvCode sets the "prov_code" field.
func (cuo *CityUpdateOne) SetProvCode(i int) *CityUpdateOne {
	cuo.mutation.ResetProvCode()
	cuo.mutation.SetProvCode(i)
	return cuo
}

// SetNillableProvCode sets the "prov_code" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableProvCode(i *int) *CityUpdateOne {
	if i != nil {
		cuo.SetProvCode(*i)
	}
	return cuo
}

// AddProvCode adds i to the "prov_code" field.
func (cuo *CityUpdateOne) AddProvCode(i int) *CityUpdateOne {
	cuo.mutation.AddProvCode(i)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CityUpdateOne) SetName(s string) *CityUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableName(s *string) *CityUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCenter sets the "center" field.
func (cuo *CityUpdateOne) SetCenter(gj *geo.GeoJson) *CityUpdateOne {
	cuo.mutation.SetCenter(gj)
	return cuo
}

// SetProvinceID sets the "province_id" field.
func (cuo *CityUpdateOne) SetProvinceID(x xid.ID) *CityUpdateOne {
	cuo.mutation.SetProvinceID(x)
	return cuo
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (cuo *CityUpdateOne) SetNillableProvinceID(x *xid.ID) *CityUpdateOne {
	if x != nil {
		cuo.SetProvinceID(*x)
	}
	return cuo
}

// AddDistrictIDs adds the "districts" edge to the District entity by IDs.
func (cuo *CityUpdateOne) AddDistrictIDs(ids ...xid.ID) *CityUpdateOne {
	cuo.mutation.AddDistrictIDs(ids...)
	return cuo
}

// AddDistricts adds the "districts" edges to the District entity.
func (cuo *CityUpdateOne) AddDistricts(d ...*District) *CityUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDistrictIDs(ids...)
}

// SetProvince sets the "province" edge to the Province entity.
func (cuo *CityUpdateOne) SetProvince(p *Province) *CityUpdateOne {
	return cuo.SetProvinceID(p.ID)
}

// Mutation returns the CityMutation object of the builder.
func (cuo *CityUpdateOne) Mutation() *CityMutation {
	return cuo.mutation
}

// ClearDistricts clears all "districts" edges to the District entity.
func (cuo *CityUpdateOne) ClearDistricts() *CityUpdateOne {
	cuo.mutation.ClearDistricts()
	return cuo
}

// RemoveDistrictIDs removes the "districts" edge to District entities by IDs.
func (cuo *CityUpdateOne) RemoveDistrictIDs(ids ...xid.ID) *CityUpdateOne {
	cuo.mutation.RemoveDistrictIDs(ids...)
	return cuo
}

// RemoveDistricts removes "districts" edges to District entities.
func (cuo *CityUpdateOne) RemoveDistricts(d ...*District) *CityUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDistrictIDs(ids...)
}

// ClearProvince clears the "province" edge to the Province entity.
func (cuo *CityUpdateOne) ClearProvince() *CityUpdateOne {
	cuo.mutation.ClearProvince()
	return cuo
}

// Where appends a list predicates to the CityUpdate builder.
func (cuo *CityUpdateOne) Where(ps ...predicate.City) *CityUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CityUpdateOne) Select(field string, fields ...string) *CityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated City entity.
func (cuo *CityUpdateOne) Save(ctx context.Context) (*City, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CityUpdateOne) SaveX(ctx context.Context) *City {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := city.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CityUpdateOne) check() error {
	if cuo.mutation.ProvinceCleared() && len(cuo.mutation.ProvinceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "City.province"`)
	}
	return nil
}

func (cuo *CityUpdateOne) sqlSave(ctx context.Context) (_node *City, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(city.Table, city.Columns, sqlgraph.NewFieldSpec(city.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "City.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, city.FieldID)
		for _, f := range fields {
			if !city.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != city.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(city.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Adcode(); ok {
		_spec.SetField(city.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedAdcode(); ok {
		_spec.AddField(city.FieldAdcode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ProvCode(); ok {
		_spec.SetField(city.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedProvCode(); ok {
		_spec.AddField(city.FieldProvCode, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Center(); ok {
		_spec.SetField(city.FieldCenter, field.TypeOther, value)
	}
	if cuo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDistrictsIDs(); len(nodes) > 0 && !cuo.mutation.DistrictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DistrictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.DistrictsTable,
			Columns: []string{city.DistrictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProvinceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvinceTable,
			Columns: []string{city.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProvinceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ProvinceTable,
			Columns: []string{city.ProvinceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(province.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &City{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{city.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
