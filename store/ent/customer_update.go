// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/model"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/schema/zht"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetApprovalStatus sets the "approval_status" field.
func (cu *CustomerUpdate) SetApprovalStatus(i int) *CustomerUpdate {
	cu.mutation.ResetApprovalStatus()
	cu.mutation.SetApprovalStatus(i)
	return cu
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableApprovalStatus(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetApprovalStatus(*i)
	}
	return cu
}

// AddApprovalStatus adds i to the "approval_status" field.
func (cu *CustomerUpdate) AddApprovalStatus(i int) *CustomerUpdate {
	cu.mutation.AddApprovalStatus(i)
	return cu
}

// SetOwnerType sets the "owner_type" field.
func (cu *CustomerUpdate) SetOwnerType(i int) *CustomerUpdate {
	cu.mutation.ResetOwnerType()
	cu.mutation.SetOwnerType(i)
	return cu
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableOwnerType(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetOwnerType(*i)
	}
	return cu
}

// AddOwnerType adds i to the "owner_type" field.
func (cu *CustomerUpdate) AddOwnerType(i int) *CustomerUpdate {
	cu.mutation.AddOwnerType(i)
	return cu
}

// ClearOwnerType clears the value of the "owner_type" field.
func (cu *CustomerUpdate) ClearOwnerType() *CustomerUpdate {
	cu.mutation.ClearOwnerType()
	return cu
}

// SetIndustry sets the "industry" field.
func (cu *CustomerUpdate) SetIndustry(i int) *CustomerUpdate {
	cu.mutation.ResetIndustry()
	cu.mutation.SetIndustry(i)
	return cu
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIndustry(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetIndustry(*i)
	}
	return cu
}

// AddIndustry adds i to the "industry" field.
func (cu *CustomerUpdate) AddIndustry(i int) *CustomerUpdate {
	cu.mutation.AddIndustry(i)
	return cu
}

// ClearIndustry clears the value of the "industry" field.
func (cu *CustomerUpdate) ClearIndustry() *CustomerUpdate {
	cu.mutation.ClearIndustry()
	return cu
}

// SetSize sets the "size" field.
func (cu *CustomerUpdate) SetSize(i int) *CustomerUpdate {
	cu.mutation.ResetSize()
	cu.mutation.SetSize(i)
	return cu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableSize(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetSize(*i)
	}
	return cu
}

// AddSize adds i to the "size" field.
func (cu *CustomerUpdate) AddSize(i int) *CustomerUpdate {
	cu.mutation.AddSize(i)
	return cu
}

// ClearSize clears the value of the "size" field.
func (cu *CustomerUpdate) ClearSize() *CustomerUpdate {
	cu.mutation.ClearSize()
	return cu
}

// SetContactPerson sets the "contact_person" field.
func (cu *CustomerUpdate) SetContactPerson(s string) *CustomerUpdate {
	cu.mutation.SetContactPerson(s)
	return cu
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableContactPerson(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetContactPerson(*s)
	}
	return cu
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cu *CustomerUpdate) ClearContactPerson() *CustomerUpdate {
	cu.mutation.ClearContactPerson()
	return cu
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cu *CustomerUpdate) SetContactPersonPosition(s string) *CustomerUpdate {
	cu.mutation.SetContactPersonPosition(s)
	return cu
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableContactPersonPosition(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetContactPersonPosition(*s)
	}
	return cu
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (cu *CustomerUpdate) ClearContactPersonPosition() *CustomerUpdate {
	cu.mutation.ClearContactPersonPosition()
	return cu
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cu *CustomerUpdate) SetContactPersonPhone(s string) *CustomerUpdate {
	cu.mutation.SetContactPersonPhone(s)
	return cu
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableContactPersonPhone(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetContactPersonPhone(*s)
	}
	return cu
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (cu *CustomerUpdate) ClearContactPersonPhone() *CustomerUpdate {
	cu.mutation.ClearContactPersonPhone()
	return cu
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cu *CustomerUpdate) SetContactPersonEmail(s string) *CustomerUpdate {
	cu.mutation.SetContactPersonEmail(s)
	return cu
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableContactPersonEmail(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetContactPersonEmail(*s)
	}
	return cu
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (cu *CustomerUpdate) ClearContactPersonEmail() *CustomerUpdate {
	cu.mutation.ClearContactPersonEmail()
	return cu
}

// SetDraft sets the "draft" field.
func (cu *CustomerUpdate) SetDraft(m *model.Customer) *CustomerUpdate {
	cu.mutation.SetDraft(m)
	return cu
}

// ClearDraft clears the value of the "draft" field.
func (cu *CustomerUpdate) ClearDraft() *CustomerUpdate {
	cu.mutation.ClearDraft()
	return cu
}

// SetFeishuGroup sets the "feishu_group" field.
func (cu *CustomerUpdate) SetFeishuGroup(z *zht.Group) *CustomerUpdate {
	cu.mutation.SetFeishuGroup(z)
	return cu
}

// ClearFeishuGroup clears the value of the "feishu_group" field.
func (cu *CustomerUpdate) ClearFeishuGroup() *CustomerUpdate {
	cu.mutation.ClearFeishuGroup()
	return cu
}

// SetAreaID sets the "area_id" field.
func (cu *CustomerUpdate) SetAreaID(x xid.ID) *CustomerUpdate {
	cu.mutation.SetAreaID(x)
	return cu
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAreaID(x *xid.ID) *CustomerUpdate {
	if x != nil {
		cu.SetAreaID(*x)
	}
	return cu
}

// SetSalesID sets the "sales_id" field.
func (cu *CustomerUpdate) SetSalesID(x xid.ID) *CustomerUpdate {
	cu.mutation.SetSalesID(x)
	return cu
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableSalesID(x *xid.ID) *CustomerUpdate {
	if x != nil {
		cu.SetSalesID(*x)
	}
	return cu
}

// ClearSalesID clears the value of the "sales_id" field.
func (cu *CustomerUpdate) ClearSalesID() *CustomerUpdate {
	cu.mutation.ClearSalesID()
	return cu
}

// SetCreatedByID sets the "created_by_id" field.
func (cu *CustomerUpdate) SetCreatedByID(x xid.ID) *CustomerUpdate {
	cu.mutation.SetCreatedByID(x)
	return cu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCreatedByID(x *xid.ID) *CustomerUpdate {
	if x != nil {
		cu.SetCreatedByID(*x)
	}
	return cu
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (cu *CustomerUpdate) ClearCreatedByID() *CustomerUpdate {
	cu.mutation.ClearCreatedByID()
	return cu
}

// SetUpdatedByID sets the "updated_by_id" field.
func (cu *CustomerUpdate) SetUpdatedByID(x xid.ID) *CustomerUpdate {
	cu.mutation.SetUpdatedByID(x)
	return cu
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUpdatedByID(x *xid.ID) *CustomerUpdate {
	if x != nil {
		cu.SetUpdatedByID(*x)
	}
	return cu
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (cu *CustomerUpdate) ClearUpdatedByID() *CustomerUpdate {
	cu.mutation.ClearUpdatedByID()
	return cu
}

// SetApproverID sets the "approver_id" field.
func (cu *CustomerUpdate) SetApproverID(x xid.ID) *CustomerUpdate {
	cu.mutation.SetApproverID(x)
	return cu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableApproverID(x *xid.ID) *CustomerUpdate {
	if x != nil {
		cu.SetApproverID(*x)
	}
	return cu
}

// ClearApproverID clears the value of the "approver_id" field.
func (cu *CustomerUpdate) ClearApproverID() *CustomerUpdate {
	cu.mutation.ClearApproverID()
	return cu
}

// SetArea sets the "area" edge to the Area entity.
func (cu *CustomerUpdate) SetArea(a *Area) *CustomerUpdate {
	return cu.SetAreaID(a.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (cu *CustomerUpdate) AddTenderIDs(ids ...xid.ID) *CustomerUpdate {
	cu.mutation.AddTenderIDs(ids...)
	return cu
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (cu *CustomerUpdate) AddTenders(t ...*Tender) *CustomerUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTenderIDs(ids...)
}

// SetSales sets the "sales" edge to the User entity.
func (cu *CustomerUpdate) SetSales(u *User) *CustomerUpdate {
	return cu.SetSalesID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cu *CustomerUpdate) SetCreatedBy(u *User) *CustomerUpdate {
	return cu.SetCreatedByID(u.ID)
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (cu *CustomerUpdate) SetUpdatedBy(u *User) *CustomerUpdate {
	return cu.SetUpdatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cu *CustomerUpdate) SetApprover(u *User) *CustomerUpdate {
	return cu.SetApproverID(u.ID)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (cu *CustomerUpdate) AddVisitRecordIDs(ids ...xid.ID) *CustomerUpdate {
	cu.mutation.AddVisitRecordIDs(ids...)
	return cu
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (cu *CustomerUpdate) AddVisitRecords(v ...*VisitRecord) *CustomerUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.AddVisitRecordIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (cu *CustomerUpdate) ClearArea() *CustomerUpdate {
	cu.mutation.ClearArea()
	return cu
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (cu *CustomerUpdate) ClearTenders() *CustomerUpdate {
	cu.mutation.ClearTenders()
	return cu
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (cu *CustomerUpdate) RemoveTenderIDs(ids ...xid.ID) *CustomerUpdate {
	cu.mutation.RemoveTenderIDs(ids...)
	return cu
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (cu *CustomerUpdate) RemoveTenders(t ...*Tender) *CustomerUpdate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTenderIDs(ids...)
}

// ClearSales clears the "sales" edge to the User entity.
func (cu *CustomerUpdate) ClearSales() *CustomerUpdate {
	cu.mutation.ClearSales()
	return cu
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (cu *CustomerUpdate) ClearCreatedBy() *CustomerUpdate {
	cu.mutation.ClearCreatedBy()
	return cu
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (cu *CustomerUpdate) ClearUpdatedBy() *CustomerUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// ClearApprover clears the "approver" edge to the User entity.
func (cu *CustomerUpdate) ClearApprover() *CustomerUpdate {
	cu.mutation.ClearApprover()
	return cu
}

// ClearVisitRecords clears all "visit_records" edges to the VisitRecord entity.
func (cu *CustomerUpdate) ClearVisitRecords() *CustomerUpdate {
	cu.mutation.ClearVisitRecords()
	return cu
}

// RemoveVisitRecordIDs removes the "visit_records" edge to VisitRecord entities by IDs.
func (cu *CustomerUpdate) RemoveVisitRecordIDs(ids ...xid.ID) *CustomerUpdate {
	cu.mutation.RemoveVisitRecordIDs(ids...)
	return cu
}

// RemoveVisitRecords removes "visit_records" edges to VisitRecord entities.
func (cu *CustomerUpdate) RemoveVisitRecords(v ...*VisitRecord) *CustomerUpdate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cu.RemoveVisitRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.ApprovalStatus(); ok {
		if err := customer.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "Customer.approval_status": %w`, err)}
		}
	}
	if cu.mutation.AreaCleared() && len(cu.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Customer.area"`)
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ApprovalStatus(); ok {
		_spec.SetField(customer.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(customer.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.OwnerType(); ok {
		_spec.SetField(customer.FieldOwnerType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedOwnerType(); ok {
		_spec.AddField(customer.FieldOwnerType, field.TypeInt, value)
	}
	if cu.mutation.OwnerTypeCleared() {
		_spec.ClearField(customer.FieldOwnerType, field.TypeInt)
	}
	if value, ok := cu.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIndustry(); ok {
		_spec.AddField(customer.FieldIndustry, field.TypeInt, value)
	}
	if cu.mutation.IndustryCleared() {
		_spec.ClearField(customer.FieldIndustry, field.TypeInt)
	}
	if value, ok := cu.mutation.Size(); ok {
		_spec.SetField(customer.FieldSize, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSize(); ok {
		_spec.AddField(customer.FieldSize, field.TypeInt, value)
	}
	if cu.mutation.SizeCleared() {
		_spec.ClearField(customer.FieldSize, field.TypeInt)
	}
	if value, ok := cu.mutation.ContactPerson(); ok {
		_spec.SetField(customer.FieldContactPerson, field.TypeString, value)
	}
	if cu.mutation.ContactPersonCleared() {
		_spec.ClearField(customer.FieldContactPerson, field.TypeString)
	}
	if value, ok := cu.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customer.FieldContactPersonPosition, field.TypeString, value)
	}
	if cu.mutation.ContactPersonPositionCleared() {
		_spec.ClearField(customer.FieldContactPersonPosition, field.TypeString)
	}
	if value, ok := cu.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customer.FieldContactPersonPhone, field.TypeString, value)
	}
	if cu.mutation.ContactPersonPhoneCleared() {
		_spec.ClearField(customer.FieldContactPersonPhone, field.TypeString)
	}
	if value, ok := cu.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customer.FieldContactPersonEmail, field.TypeString, value)
	}
	if cu.mutation.ContactPersonEmailCleared() {
		_spec.ClearField(customer.FieldContactPersonEmail, field.TypeString)
	}
	if value, ok := cu.mutation.Draft(); ok {
		_spec.SetField(customer.FieldDraft, field.TypeJSON, value)
	}
	if cu.mutation.DraftCleared() {
		_spec.ClearField(customer.FieldDraft, field.TypeJSON)
	}
	if value, ok := cu.mutation.FeishuGroup(); ok {
		_spec.SetField(customer.FieldFeishuGroup, field.TypeJSON, value)
	}
	if cu.mutation.FeishuGroupCleared() {
		_spec.ClearField(customer.FieldFeishuGroup, field.TypeJSON)
	}
	if cu.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTendersIDs(); len(nodes) > 0 && !cu.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.UpdatedByTable,
			Columns: []string{customer.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.UpdatedByTable,
			Columns: []string{customer.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedVisitRecordsIDs(); len(nodes) > 0 && !cu.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetApprovalStatus sets the "approval_status" field.
func (cuo *CustomerUpdateOne) SetApprovalStatus(i int) *CustomerUpdateOne {
	cuo.mutation.ResetApprovalStatus()
	cuo.mutation.SetApprovalStatus(i)
	return cuo
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableApprovalStatus(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetApprovalStatus(*i)
	}
	return cuo
}

// AddApprovalStatus adds i to the "approval_status" field.
func (cuo *CustomerUpdateOne) AddApprovalStatus(i int) *CustomerUpdateOne {
	cuo.mutation.AddApprovalStatus(i)
	return cuo
}

// SetOwnerType sets the "owner_type" field.
func (cuo *CustomerUpdateOne) SetOwnerType(i int) *CustomerUpdateOne {
	cuo.mutation.ResetOwnerType()
	cuo.mutation.SetOwnerType(i)
	return cuo
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableOwnerType(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetOwnerType(*i)
	}
	return cuo
}

// AddOwnerType adds i to the "owner_type" field.
func (cuo *CustomerUpdateOne) AddOwnerType(i int) *CustomerUpdateOne {
	cuo.mutation.AddOwnerType(i)
	return cuo
}

// ClearOwnerType clears the value of the "owner_type" field.
func (cuo *CustomerUpdateOne) ClearOwnerType() *CustomerUpdateOne {
	cuo.mutation.ClearOwnerType()
	return cuo
}

// SetIndustry sets the "industry" field.
func (cuo *CustomerUpdateOne) SetIndustry(i int) *CustomerUpdateOne {
	cuo.mutation.ResetIndustry()
	cuo.mutation.SetIndustry(i)
	return cuo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIndustry(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetIndustry(*i)
	}
	return cuo
}

// AddIndustry adds i to the "industry" field.
func (cuo *CustomerUpdateOne) AddIndustry(i int) *CustomerUpdateOne {
	cuo.mutation.AddIndustry(i)
	return cuo
}

// ClearIndustry clears the value of the "industry" field.
func (cuo *CustomerUpdateOne) ClearIndustry() *CustomerUpdateOne {
	cuo.mutation.ClearIndustry()
	return cuo
}

// SetSize sets the "size" field.
func (cuo *CustomerUpdateOne) SetSize(i int) *CustomerUpdateOne {
	cuo.mutation.ResetSize()
	cuo.mutation.SetSize(i)
	return cuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableSize(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetSize(*i)
	}
	return cuo
}

// AddSize adds i to the "size" field.
func (cuo *CustomerUpdateOne) AddSize(i int) *CustomerUpdateOne {
	cuo.mutation.AddSize(i)
	return cuo
}

// ClearSize clears the value of the "size" field.
func (cuo *CustomerUpdateOne) ClearSize() *CustomerUpdateOne {
	cuo.mutation.ClearSize()
	return cuo
}

// SetContactPerson sets the "contact_person" field.
func (cuo *CustomerUpdateOne) SetContactPerson(s string) *CustomerUpdateOne {
	cuo.mutation.SetContactPerson(s)
	return cuo
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableContactPerson(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetContactPerson(*s)
	}
	return cuo
}

// ClearContactPerson clears the value of the "contact_person" field.
func (cuo *CustomerUpdateOne) ClearContactPerson() *CustomerUpdateOne {
	cuo.mutation.ClearContactPerson()
	return cuo
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cuo *CustomerUpdateOne) SetContactPersonPosition(s string) *CustomerUpdateOne {
	cuo.mutation.SetContactPersonPosition(s)
	return cuo
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableContactPersonPosition(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetContactPersonPosition(*s)
	}
	return cuo
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (cuo *CustomerUpdateOne) ClearContactPersonPosition() *CustomerUpdateOne {
	cuo.mutation.ClearContactPersonPosition()
	return cuo
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cuo *CustomerUpdateOne) SetContactPersonPhone(s string) *CustomerUpdateOne {
	cuo.mutation.SetContactPersonPhone(s)
	return cuo
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableContactPersonPhone(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetContactPersonPhone(*s)
	}
	return cuo
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (cuo *CustomerUpdateOne) ClearContactPersonPhone() *CustomerUpdateOne {
	cuo.mutation.ClearContactPersonPhone()
	return cuo
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cuo *CustomerUpdateOne) SetContactPersonEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetContactPersonEmail(s)
	return cuo
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableContactPersonEmail(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetContactPersonEmail(*s)
	}
	return cuo
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (cuo *CustomerUpdateOne) ClearContactPersonEmail() *CustomerUpdateOne {
	cuo.mutation.ClearContactPersonEmail()
	return cuo
}

// SetDraft sets the "draft" field.
func (cuo *CustomerUpdateOne) SetDraft(m *model.Customer) *CustomerUpdateOne {
	cuo.mutation.SetDraft(m)
	return cuo
}

// ClearDraft clears the value of the "draft" field.
func (cuo *CustomerUpdateOne) ClearDraft() *CustomerUpdateOne {
	cuo.mutation.ClearDraft()
	return cuo
}

// SetFeishuGroup sets the "feishu_group" field.
func (cuo *CustomerUpdateOne) SetFeishuGroup(z *zht.Group) *CustomerUpdateOne {
	cuo.mutation.SetFeishuGroup(z)
	return cuo
}

// ClearFeishuGroup clears the value of the "feishu_group" field.
func (cuo *CustomerUpdateOne) ClearFeishuGroup() *CustomerUpdateOne {
	cuo.mutation.ClearFeishuGroup()
	return cuo
}

// SetAreaID sets the "area_id" field.
func (cuo *CustomerUpdateOne) SetAreaID(x xid.ID) *CustomerUpdateOne {
	cuo.mutation.SetAreaID(x)
	return cuo
}

// SetNillableAreaID sets the "area_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAreaID(x *xid.ID) *CustomerUpdateOne {
	if x != nil {
		cuo.SetAreaID(*x)
	}
	return cuo
}

// SetSalesID sets the "sales_id" field.
func (cuo *CustomerUpdateOne) SetSalesID(x xid.ID) *CustomerUpdateOne {
	cuo.mutation.SetSalesID(x)
	return cuo
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableSalesID(x *xid.ID) *CustomerUpdateOne {
	if x != nil {
		cuo.SetSalesID(*x)
	}
	return cuo
}

// ClearSalesID clears the value of the "sales_id" field.
func (cuo *CustomerUpdateOne) ClearSalesID() *CustomerUpdateOne {
	cuo.mutation.ClearSalesID()
	return cuo
}

// SetCreatedByID sets the "created_by_id" field.
func (cuo *CustomerUpdateOne) SetCreatedByID(x xid.ID) *CustomerUpdateOne {
	cuo.mutation.SetCreatedByID(x)
	return cuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCreatedByID(x *xid.ID) *CustomerUpdateOne {
	if x != nil {
		cuo.SetCreatedByID(*x)
	}
	return cuo
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (cuo *CustomerUpdateOne) ClearCreatedByID() *CustomerUpdateOne {
	cuo.mutation.ClearCreatedByID()
	return cuo
}

// SetUpdatedByID sets the "updated_by_id" field.
func (cuo *CustomerUpdateOne) SetUpdatedByID(x xid.ID) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedByID(x)
	return cuo
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUpdatedByID(x *xid.ID) *CustomerUpdateOne {
	if x != nil {
		cuo.SetUpdatedByID(*x)
	}
	return cuo
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (cuo *CustomerUpdateOne) ClearUpdatedByID() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedByID()
	return cuo
}

// SetApproverID sets the "approver_id" field.
func (cuo *CustomerUpdateOne) SetApproverID(x xid.ID) *CustomerUpdateOne {
	cuo.mutation.SetApproverID(x)
	return cuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableApproverID(x *xid.ID) *CustomerUpdateOne {
	if x != nil {
		cuo.SetApproverID(*x)
	}
	return cuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (cuo *CustomerUpdateOne) ClearApproverID() *CustomerUpdateOne {
	cuo.mutation.ClearApproverID()
	return cuo
}

// SetArea sets the "area" edge to the Area entity.
func (cuo *CustomerUpdateOne) SetArea(a *Area) *CustomerUpdateOne {
	return cuo.SetAreaID(a.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (cuo *CustomerUpdateOne) AddTenderIDs(ids ...xid.ID) *CustomerUpdateOne {
	cuo.mutation.AddTenderIDs(ids...)
	return cuo
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (cuo *CustomerUpdateOne) AddTenders(t ...*Tender) *CustomerUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTenderIDs(ids...)
}

// SetSales sets the "sales" edge to the User entity.
func (cuo *CustomerUpdateOne) SetSales(u *User) *CustomerUpdateOne {
	return cuo.SetSalesID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cuo *CustomerUpdateOne) SetCreatedBy(u *User) *CustomerUpdateOne {
	return cuo.SetCreatedByID(u.ID)
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (cuo *CustomerUpdateOne) SetUpdatedBy(u *User) *CustomerUpdateOne {
	return cuo.SetUpdatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cuo *CustomerUpdateOne) SetApprover(u *User) *CustomerUpdateOne {
	return cuo.SetApproverID(u.ID)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (cuo *CustomerUpdateOne) AddVisitRecordIDs(ids ...xid.ID) *CustomerUpdateOne {
	cuo.mutation.AddVisitRecordIDs(ids...)
	return cuo
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (cuo *CustomerUpdateOne) AddVisitRecords(v ...*VisitRecord) *CustomerUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.AddVisitRecordIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearArea clears the "area" edge to the Area entity.
func (cuo *CustomerUpdateOne) ClearArea() *CustomerUpdateOne {
	cuo.mutation.ClearArea()
	return cuo
}

// ClearTenders clears all "tenders" edges to the Tender entity.
func (cuo *CustomerUpdateOne) ClearTenders() *CustomerUpdateOne {
	cuo.mutation.ClearTenders()
	return cuo
}

// RemoveTenderIDs removes the "tenders" edge to Tender entities by IDs.
func (cuo *CustomerUpdateOne) RemoveTenderIDs(ids ...xid.ID) *CustomerUpdateOne {
	cuo.mutation.RemoveTenderIDs(ids...)
	return cuo
}

// RemoveTenders removes "tenders" edges to Tender entities.
func (cuo *CustomerUpdateOne) RemoveTenders(t ...*Tender) *CustomerUpdateOne {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTenderIDs(ids...)
}

// ClearSales clears the "sales" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearSales() *CustomerUpdateOne {
	cuo.mutation.ClearSales()
	return cuo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearCreatedBy() *CustomerUpdateOne {
	cuo.mutation.ClearCreatedBy()
	return cuo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearUpdatedBy() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// ClearApprover clears the "approver" edge to the User entity.
func (cuo *CustomerUpdateOne) ClearApprover() *CustomerUpdateOne {
	cuo.mutation.ClearApprover()
	return cuo
}

// ClearVisitRecords clears all "visit_records" edges to the VisitRecord entity.
func (cuo *CustomerUpdateOne) ClearVisitRecords() *CustomerUpdateOne {
	cuo.mutation.ClearVisitRecords()
	return cuo
}

// RemoveVisitRecordIDs removes the "visit_records" edge to VisitRecord entities by IDs.
func (cuo *CustomerUpdateOne) RemoveVisitRecordIDs(ids ...xid.ID) *CustomerUpdateOne {
	cuo.mutation.RemoveVisitRecordIDs(ids...)
	return cuo
}

// RemoveVisitRecords removes "visit_records" edges to VisitRecord entities.
func (cuo *CustomerUpdateOne) RemoveVisitRecords(v ...*VisitRecord) *CustomerUpdateOne {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cuo.RemoveVisitRecordIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.ApprovalStatus(); ok {
		if err := customer.ApprovalStatusValidator(v); err != nil {
			return &ValidationError{Name: "approval_status", err: fmt.Errorf(`ent: validator failed for field "Customer.approval_status": %w`, err)}
		}
	}
	if cuo.mutation.AreaCleared() && len(cuo.mutation.AreaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Customer.area"`)
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ApprovalStatus(); ok {
		_spec.SetField(customer.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedApprovalStatus(); ok {
		_spec.AddField(customer.FieldApprovalStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.OwnerType(); ok {
		_spec.SetField(customer.FieldOwnerType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedOwnerType(); ok {
		_spec.AddField(customer.FieldOwnerType, field.TypeInt, value)
	}
	if cuo.mutation.OwnerTypeCleared() {
		_spec.ClearField(customer.FieldOwnerType, field.TypeInt)
	}
	if value, ok := cuo.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIndustry(); ok {
		_spec.AddField(customer.FieldIndustry, field.TypeInt, value)
	}
	if cuo.mutation.IndustryCleared() {
		_spec.ClearField(customer.FieldIndustry, field.TypeInt)
	}
	if value, ok := cuo.mutation.Size(); ok {
		_spec.SetField(customer.FieldSize, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSize(); ok {
		_spec.AddField(customer.FieldSize, field.TypeInt, value)
	}
	if cuo.mutation.SizeCleared() {
		_spec.ClearField(customer.FieldSize, field.TypeInt)
	}
	if value, ok := cuo.mutation.ContactPerson(); ok {
		_spec.SetField(customer.FieldContactPerson, field.TypeString, value)
	}
	if cuo.mutation.ContactPersonCleared() {
		_spec.ClearField(customer.FieldContactPerson, field.TypeString)
	}
	if value, ok := cuo.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customer.FieldContactPersonPosition, field.TypeString, value)
	}
	if cuo.mutation.ContactPersonPositionCleared() {
		_spec.ClearField(customer.FieldContactPersonPosition, field.TypeString)
	}
	if value, ok := cuo.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customer.FieldContactPersonPhone, field.TypeString, value)
	}
	if cuo.mutation.ContactPersonPhoneCleared() {
		_spec.ClearField(customer.FieldContactPersonPhone, field.TypeString)
	}
	if value, ok := cuo.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customer.FieldContactPersonEmail, field.TypeString, value)
	}
	if cuo.mutation.ContactPersonEmailCleared() {
		_spec.ClearField(customer.FieldContactPersonEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.Draft(); ok {
		_spec.SetField(customer.FieldDraft, field.TypeJSON, value)
	}
	if cuo.mutation.DraftCleared() {
		_spec.ClearField(customer.FieldDraft, field.TypeJSON)
	}
	if value, ok := cuo.mutation.FeishuGroup(); ok {
		_spec.SetField(customer.FieldFeishuGroup, field.TypeJSON, value)
	}
	if cuo.mutation.FeishuGroupCleared() {
		_spec.ClearField(customer.FieldFeishuGroup, field.TypeJSON)
	}
	if cuo.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTendersIDs(); len(nodes) > 0 && !cuo.mutation.TendersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SalesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.UpdatedByTable,
			Columns: []string{customer.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.UpdatedByTable,
			Columns: []string{customer.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedVisitRecordsIDs(); len(nodes) > 0 && !cuo.mutation.VisitRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
