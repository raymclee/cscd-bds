// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// 是否完成
	IsFinished bool `json:"is_finished,omitempty"`
	// 營業額KPI
	RevenueKpi *float64 `json:"revenue_kpi,omitempty"`
	// 營業額當年完成
	RevenueCurrentYearCompleted *float64 `json:"revenue_current_year_completed,omitempty"`
	// 營業額累計完成
	RevenueAccumulatedCompleted *float64 `json:"revenue_accumulated_completed,omitempty"`
	// 糧期
	PayDate *time.Time `json:"pay_date,omitempty"`
	// 業主VO數量
	OwnerVoCount *int `json:"owner_vo_count,omitempty"`
	// 总包VO數量
	ContractorVoCount *int `json:"contractor_vo_count,omitempty"`
	// 累計扣款
	AccumulateDeduction *float64 `json:"accumulate_deduction,omitempty"`
	// 分判VA數量
	SubcontractorVaCount *int `json:"subcontractor_va_count,omitempty"`
	// 合約补料數量
	ContractSupplementaryCount *int `json:"contract_supplementary_count,omitempty"`
	// 执修费
	RepairFee *float64 `json:"repair_fee,omitempty"`
	// 單元件庫存累計
	UnitInventoryTotal *float64 `json:"unit_inventory_total,omitempty"`
	// 單元件總數
	UnitComponentTotal *float64 `json:"unit_component_total,omitempty"`
	// 單元件生產數量
	UnitComponentProduction *float64 `json:"unit_component_production,omitempty"`
	// 單元件安裝數量
	UnitComponentInstallation *float64 `json:"unit_component_installation,omitempty"`
	// 散件總訂貨數量
	BulkMaterialsTotalOrderQuantity *float64 `json:"bulk_materials_total_order_quantity,omitempty"`
	// 散件已完成數量
	BulkMaterialsCompletedQuantity *float64 `json:"bulk_materials_completed_quantity,omitempty"`
	// 散件未完成數量
	BulkMaterialsUncompletedQuantity *float64 `json:"bulk_materials_uncompleted_quantity,omitempty"`
	// BD圖紙完成數量
	DiagramBdFinishCount *int `json:"diagram_bd_finish_count,omitempty"`
	// BD圖紙總數
	DiagramBdTotalCount *int `json:"diagram_bd_total_count,omitempty"`
	// 施工圖紙完成數量
	DiagramConstructionFinishCount *int `json:"diagram_construction_finish_count,omitempty"`
	// 施工圖紙總數
	DiagramConstructionTotalCount *int `json:"diagram_construction_total_count,omitempty"`
	// 加工圖完成數量
	DiagramProcessingFinishCount *int `json:"diagram_processing_finish_count,omitempty"`
	// 加工圖總數
	DiagramProcessingTotalCount *int `json:"diagram_processing_total_count,omitempty"`
	// C版批圖率分子
	DiagramCApprovalRatioNumerator *int `json:"diagram_c_approval_ratio_numerator,omitempty"`
	// C版批圖率分母
	DiagramCApprovalRatioDenominator *int `json:"diagram_c_approval_ratio_denominator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedUsers map[string][]*User
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldIsFinished:
			values[i] = new(sql.NullBool)
		case project.FieldRevenueKpi, project.FieldRevenueCurrentYearCompleted, project.FieldRevenueAccumulatedCompleted, project.FieldAccumulateDeduction, project.FieldRepairFee, project.FieldUnitInventoryTotal, project.FieldUnitComponentTotal, project.FieldUnitComponentProduction, project.FieldUnitComponentInstallation, project.FieldBulkMaterialsTotalOrderQuantity, project.FieldBulkMaterialsCompletedQuantity, project.FieldBulkMaterialsUncompletedQuantity:
			values[i] = new(sql.NullFloat64)
		case project.FieldOwnerVoCount, project.FieldContractorVoCount, project.FieldSubcontractorVaCount, project.FieldContractSupplementaryCount, project.FieldDiagramBdFinishCount, project.FieldDiagramBdTotalCount, project.FieldDiagramConstructionFinishCount, project.FieldDiagramConstructionTotalCount, project.FieldDiagramProcessingFinishCount, project.FieldDiagramProcessingTotalCount, project.FieldDiagramCApprovalRatioNumerator, project.FieldDiagramCApprovalRatioDenominator:
			values[i] = new(sql.NullInt64)
		case project.FieldCode:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt, project.FieldPayDate:
			values[i] = new(sql.NullTime)
		case project.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pr.Code = value.String
			}
		case project.FieldIsFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_finished", values[i])
			} else if value.Valid {
				pr.IsFinished = value.Bool
			}
		case project.FieldRevenueKpi:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_kpi", values[i])
			} else if value.Valid {
				pr.RevenueKpi = new(float64)
				*pr.RevenueKpi = value.Float64
			}
		case project.FieldRevenueCurrentYearCompleted:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_current_year_completed", values[i])
			} else if value.Valid {
				pr.RevenueCurrentYearCompleted = new(float64)
				*pr.RevenueCurrentYearCompleted = value.Float64
			}
		case project.FieldRevenueAccumulatedCompleted:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_accumulated_completed", values[i])
			} else if value.Valid {
				pr.RevenueAccumulatedCompleted = new(float64)
				*pr.RevenueAccumulatedCompleted = value.Float64
			}
		case project.FieldPayDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pay_date", values[i])
			} else if value.Valid {
				pr.PayDate = new(time.Time)
				*pr.PayDate = value.Time
			}
		case project.FieldOwnerVoCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_vo_count", values[i])
			} else if value.Valid {
				pr.OwnerVoCount = new(int)
				*pr.OwnerVoCount = int(value.Int64)
			}
		case project.FieldContractorVoCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contractor_vo_count", values[i])
			} else if value.Valid {
				pr.ContractorVoCount = new(int)
				*pr.ContractorVoCount = int(value.Int64)
			}
		case project.FieldAccumulateDeduction:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field accumulate_deduction", values[i])
			} else if value.Valid {
				pr.AccumulateDeduction = new(float64)
				*pr.AccumulateDeduction = value.Float64
			}
		case project.FieldSubcontractorVaCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subcontractor_va_count", values[i])
			} else if value.Valid {
				pr.SubcontractorVaCount = new(int)
				*pr.SubcontractorVaCount = int(value.Int64)
			}
		case project.FieldContractSupplementaryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contract_supplementary_count", values[i])
			} else if value.Valid {
				pr.ContractSupplementaryCount = new(int)
				*pr.ContractSupplementaryCount = int(value.Int64)
			}
		case project.FieldRepairFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field repair_fee", values[i])
			} else if value.Valid {
				pr.RepairFee = new(float64)
				*pr.RepairFee = value.Float64
			}
		case project.FieldUnitInventoryTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_inventory_total", values[i])
			} else if value.Valid {
				pr.UnitInventoryTotal = new(float64)
				*pr.UnitInventoryTotal = value.Float64
			}
		case project.FieldUnitComponentTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_component_total", values[i])
			} else if value.Valid {
				pr.UnitComponentTotal = new(float64)
				*pr.UnitComponentTotal = value.Float64
			}
		case project.FieldUnitComponentProduction:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_component_production", values[i])
			} else if value.Valid {
				pr.UnitComponentProduction = new(float64)
				*pr.UnitComponentProduction = value.Float64
			}
		case project.FieldUnitComponentInstallation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_component_installation", values[i])
			} else if value.Valid {
				pr.UnitComponentInstallation = new(float64)
				*pr.UnitComponentInstallation = value.Float64
			}
		case project.FieldBulkMaterialsTotalOrderQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bulk_materials_total_order_quantity", values[i])
			} else if value.Valid {
				pr.BulkMaterialsTotalOrderQuantity = new(float64)
				*pr.BulkMaterialsTotalOrderQuantity = value.Float64
			}
		case project.FieldBulkMaterialsCompletedQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bulk_materials_completed_quantity", values[i])
			} else if value.Valid {
				pr.BulkMaterialsCompletedQuantity = new(float64)
				*pr.BulkMaterialsCompletedQuantity = value.Float64
			}
		case project.FieldBulkMaterialsUncompletedQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bulk_materials_uncompleted_quantity", values[i])
			} else if value.Valid {
				pr.BulkMaterialsUncompletedQuantity = new(float64)
				*pr.BulkMaterialsUncompletedQuantity = value.Float64
			}
		case project.FieldDiagramBdFinishCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_bd_finish_count", values[i])
			} else if value.Valid {
				pr.DiagramBdFinishCount = new(int)
				*pr.DiagramBdFinishCount = int(value.Int64)
			}
		case project.FieldDiagramBdTotalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_bd_total_count", values[i])
			} else if value.Valid {
				pr.DiagramBdTotalCount = new(int)
				*pr.DiagramBdTotalCount = int(value.Int64)
			}
		case project.FieldDiagramConstructionFinishCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_construction_finish_count", values[i])
			} else if value.Valid {
				pr.DiagramConstructionFinishCount = new(int)
				*pr.DiagramConstructionFinishCount = int(value.Int64)
			}
		case project.FieldDiagramConstructionTotalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_construction_total_count", values[i])
			} else if value.Valid {
				pr.DiagramConstructionTotalCount = new(int)
				*pr.DiagramConstructionTotalCount = int(value.Int64)
			}
		case project.FieldDiagramProcessingFinishCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_processing_finish_count", values[i])
			} else if value.Valid {
				pr.DiagramProcessingFinishCount = new(int)
				*pr.DiagramProcessingFinishCount = int(value.Int64)
			}
		case project.FieldDiagramProcessingTotalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_processing_total_count", values[i])
			} else if value.Valid {
				pr.DiagramProcessingTotalCount = new(int)
				*pr.DiagramProcessingTotalCount = int(value.Int64)
			}
		case project.FieldDiagramCApprovalRatioNumerator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_c_approval_ratio_numerator", values[i])
			} else if value.Valid {
				pr.DiagramCApprovalRatioNumerator = new(int)
				*pr.DiagramCApprovalRatioNumerator = int(value.Int64)
			}
		case project.FieldDiagramCApprovalRatioDenominator:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field diagram_c_approval_ratio_denominator", values[i])
			} else if value.Valid {
				pr.DiagramCApprovalRatioDenominator = new(int)
				*pr.DiagramCApprovalRatioDenominator = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Project entity.
func (pr *Project) QueryUsers() *UserQuery {
	return NewProjectClient(pr.config).QueryUsers(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(pr.Code)
	builder.WriteString(", ")
	builder.WriteString("is_finished=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsFinished))
	builder.WriteString(", ")
	if v := pr.RevenueKpi; v != nil {
		builder.WriteString("revenue_kpi=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RevenueCurrentYearCompleted; v != nil {
		builder.WriteString("revenue_current_year_completed=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RevenueAccumulatedCompleted; v != nil {
		builder.WriteString("revenue_accumulated_completed=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.PayDate; v != nil {
		builder.WriteString("pay_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.OwnerVoCount; v != nil {
		builder.WriteString("owner_vo_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.ContractorVoCount; v != nil {
		builder.WriteString("contractor_vo_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.AccumulateDeduction; v != nil {
		builder.WriteString("accumulate_deduction=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.SubcontractorVaCount; v != nil {
		builder.WriteString("subcontractor_va_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.ContractSupplementaryCount; v != nil {
		builder.WriteString("contract_supplementary_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.RepairFee; v != nil {
		builder.WriteString("repair_fee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.UnitInventoryTotal; v != nil {
		builder.WriteString("unit_inventory_total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.UnitComponentTotal; v != nil {
		builder.WriteString("unit_component_total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.UnitComponentProduction; v != nil {
		builder.WriteString("unit_component_production=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.UnitComponentInstallation; v != nil {
		builder.WriteString("unit_component_installation=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.BulkMaterialsTotalOrderQuantity; v != nil {
		builder.WriteString("bulk_materials_total_order_quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.BulkMaterialsCompletedQuantity; v != nil {
		builder.WriteString("bulk_materials_completed_quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.BulkMaterialsUncompletedQuantity; v != nil {
		builder.WriteString("bulk_materials_uncompleted_quantity=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramBdFinishCount; v != nil {
		builder.WriteString("diagram_bd_finish_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramBdTotalCount; v != nil {
		builder.WriteString("diagram_bd_total_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramConstructionFinishCount; v != nil {
		builder.WriteString("diagram_construction_finish_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramConstructionTotalCount; v != nil {
		builder.WriteString("diagram_construction_total_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramProcessingFinishCount; v != nil {
		builder.WriteString("diagram_processing_finish_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramProcessingTotalCount; v != nil {
		builder.WriteString("diagram_processing_total_count=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramCApprovalRatioNumerator; v != nil {
		builder.WriteString("diagram_c_approval_ratio_numerator=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DiagramCApprovalRatioDenominator; v != nil {
		builder.WriteString("diagram_c_approval_ratio_denominator=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Project) NamedUsers(name string) ([]*User, error) {
	if pr.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Project) appendNamedUsers(name string, edges ...*User) {
	if pr.Edges.namedUsers == nil {
		pr.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		pr.Edges.namedUsers[name] = []*User{}
	} else {
		pr.Edges.namedUsers[name] = append(pr.Edges.namedUsers[name], edges...)
	}
}

// Projects is a parsable slice of Project.
type Projects []*Project
