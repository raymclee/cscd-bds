// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderCompetitorCreate is the builder for creating a TenderCompetitor entity.
type TenderCompetitorCreate struct {
	config
	mutation *TenderCompetitorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TenderCompetitorCreate) SetCreatedAt(t time.Time) *TenderCompetitorCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TenderCompetitorCreate) SetNillableCreatedAt(t *time.Time) *TenderCompetitorCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TenderCompetitorCreate) SetUpdatedAt(t time.Time) *TenderCompetitorCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TenderCompetitorCreate) SetNillableUpdatedAt(t *time.Time) *TenderCompetitorCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetTenderID sets the "tender_id" field.
func (tcc *TenderCompetitorCreate) SetTenderID(x xid.ID) *TenderCompetitorCreate {
	tcc.mutation.SetTenderID(x)
	return tcc
}

// SetCompetitorID sets the "competitor_id" field.
func (tcc *TenderCompetitorCreate) SetCompetitorID(x xid.ID) *TenderCompetitorCreate {
	tcc.mutation.SetCompetitorID(x)
	return tcc
}

// SetAmount sets the "amount" field.
func (tcc *TenderCompetitorCreate) SetAmount(f float64) *TenderCompetitorCreate {
	tcc.mutation.SetAmount(f)
	return tcc
}

// SetID sets the "id" field.
func (tcc *TenderCompetitorCreate) SetID(x xid.ID) *TenderCompetitorCreate {
	tcc.mutation.SetID(x)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TenderCompetitorCreate) SetNillableID(x *xid.ID) *TenderCompetitorCreate {
	if x != nil {
		tcc.SetID(*x)
	}
	return tcc
}

// SetTender sets the "tender" edge to the Tender entity.
func (tcc *TenderCompetitorCreate) SetTender(t *Tender) *TenderCompetitorCreate {
	return tcc.SetTenderID(t.ID)
}

// SetCompetitor sets the "competitor" edge to the Competitor entity.
func (tcc *TenderCompetitorCreate) SetCompetitor(c *Competitor) *TenderCompetitorCreate {
	return tcc.SetCompetitorID(c.ID)
}

// Mutation returns the TenderCompetitorMutation object of the builder.
func (tcc *TenderCompetitorCreate) Mutation() *TenderCompetitorMutation {
	return tcc.mutation
}

// Save creates the TenderCompetitor in the database.
func (tcc *TenderCompetitorCreate) Save(ctx context.Context) (*TenderCompetitor, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TenderCompetitorCreate) SaveX(ctx context.Context) *TenderCompetitor {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TenderCompetitorCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TenderCompetitorCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TenderCompetitorCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := tendercompetitor.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := tendercompetitor.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		v := tendercompetitor.DefaultID()
		tcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TenderCompetitorCreate) check() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TenderCompetitor.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TenderCompetitor.updated_at"`)}
	}
	if _, ok := tcc.mutation.TenderID(); !ok {
		return &ValidationError{Name: "tender_id", err: errors.New(`ent: missing required field "TenderCompetitor.tender_id"`)}
	}
	if _, ok := tcc.mutation.CompetitorID(); !ok {
		return &ValidationError{Name: "competitor_id", err: errors.New(`ent: missing required field "TenderCompetitor.competitor_id"`)}
	}
	if _, ok := tcc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TenderCompetitor.amount"`)}
	}
	if len(tcc.mutation.TenderIDs()) == 0 {
		return &ValidationError{Name: "tender", err: errors.New(`ent: missing required edge "TenderCompetitor.tender"`)}
	}
	if len(tcc.mutation.CompetitorIDs()) == 0 {
		return &ValidationError{Name: "competitor", err: errors.New(`ent: missing required edge "TenderCompetitor.competitor"`)}
	}
	return nil
}

func (tcc *TenderCompetitorCreate) sqlSave(ctx context.Context) (*TenderCompetitor, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TenderCompetitorCreate) createSpec() (*TenderCompetitor, *sqlgraph.CreateSpec) {
	var (
		_node = &TenderCompetitor{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(tendercompetitor.Table, sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(tendercompetitor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(tendercompetitor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.Amount(); ok {
		_spec.SetField(tendercompetitor.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if nodes := tcc.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.CompetitorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompetitorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenderCompetitor.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderCompetitorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcc *TenderCompetitorCreate) OnConflict(opts ...sql.ConflictOption) *TenderCompetitorUpsertOne {
	tcc.conflict = opts
	return &TenderCompetitorUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TenderCompetitorCreate) OnConflictColumns(columns ...string) *TenderCompetitorUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TenderCompetitorUpsertOne{
		create: tcc,
	}
}

type (
	// TenderCompetitorUpsertOne is the builder for "upsert"-ing
	//  one TenderCompetitor node.
	TenderCompetitorUpsertOne struct {
		create *TenderCompetitorCreate
	}

	// TenderCompetitorUpsert is the "OnConflict" setter.
	TenderCompetitorUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderCompetitorUpsert) SetUpdatedAt(v time.Time) *TenderCompetitorUpsert {
	u.Set(tendercompetitor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderCompetitorUpsert) UpdateUpdatedAt() *TenderCompetitorUpsert {
	u.SetExcluded(tendercompetitor.FieldUpdatedAt)
	return u
}

// SetTenderID sets the "tender_id" field.
func (u *TenderCompetitorUpsert) SetTenderID(v xid.ID) *TenderCompetitorUpsert {
	u.Set(tendercompetitor.FieldTenderID, v)
	return u
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsert) UpdateTenderID() *TenderCompetitorUpsert {
	u.SetExcluded(tendercompetitor.FieldTenderID)
	return u
}

// SetCompetitorID sets the "competitor_id" field.
func (u *TenderCompetitorUpsert) SetCompetitorID(v xid.ID) *TenderCompetitorUpsert {
	u.Set(tendercompetitor.FieldCompetitorID, v)
	return u
}

// UpdateCompetitorID sets the "competitor_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsert) UpdateCompetitorID() *TenderCompetitorUpsert {
	u.SetExcluded(tendercompetitor.FieldCompetitorID)
	return u
}

// SetAmount sets the "amount" field.
func (u *TenderCompetitorUpsert) SetAmount(v float64) *TenderCompetitorUpsert {
	u.Set(tendercompetitor.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TenderCompetitorUpsert) UpdateAmount() *TenderCompetitorUpsert {
	u.SetExcluded(tendercompetitor.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *TenderCompetitorUpsert) AddAmount(v float64) *TenderCompetitorUpsert {
	u.Add(tendercompetitor.FieldAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tendercompetitor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderCompetitorUpsertOne) UpdateNewValues() *TenderCompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tendercompetitor.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tendercompetitor.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenderCompetitorUpsertOne) Ignore() *TenderCompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderCompetitorUpsertOne) DoNothing() *TenderCompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCompetitorCreate.OnConflict
// documentation for more info.
func (u *TenderCompetitorUpsertOne) Update(set func(*TenderCompetitorUpsert)) *TenderCompetitorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderCompetitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderCompetitorUpsertOne) SetUpdatedAt(v time.Time) *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderCompetitorUpsertOne) UpdateUpdatedAt() *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenderID sets the "tender_id" field.
func (u *TenderCompetitorUpsertOne) SetTenderID(v xid.ID) *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetTenderID(v)
	})
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsertOne) UpdateTenderID() *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateTenderID()
	})
}

// SetCompetitorID sets the "competitor_id" field.
func (u *TenderCompetitorUpsertOne) SetCompetitorID(v xid.ID) *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetCompetitorID(v)
	})
}

// UpdateCompetitorID sets the "competitor_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsertOne) UpdateCompetitorID() *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateCompetitorID()
	})
}

// SetAmount sets the "amount" field.
func (u *TenderCompetitorUpsertOne) SetAmount(v float64) *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TenderCompetitorUpsertOne) AddAmount(v float64) *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TenderCompetitorUpsertOne) UpdateAmount() *TenderCompetitorUpsertOne {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *TenderCompetitorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCompetitorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderCompetitorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenderCompetitorUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TenderCompetitorUpsertOne.ID is not supported by MySQL driver. Use TenderCompetitorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenderCompetitorUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenderCompetitorCreateBulk is the builder for creating many TenderCompetitor entities in bulk.
type TenderCompetitorCreateBulk struct {
	config
	err      error
	builders []*TenderCompetitorCreate
	conflict []sql.ConflictOption
}

// Save creates the TenderCompetitor entities in the database.
func (tccb *TenderCompetitorCreateBulk) Save(ctx context.Context) ([]*TenderCompetitor, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TenderCompetitor, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenderCompetitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TenderCompetitorCreateBulk) SaveX(ctx context.Context) []*TenderCompetitor {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TenderCompetitorCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TenderCompetitorCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenderCompetitor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenderCompetitorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tccb *TenderCompetitorCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenderCompetitorUpsertBulk {
	tccb.conflict = opts
	return &TenderCompetitorUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TenderCompetitorCreateBulk) OnConflictColumns(columns ...string) *TenderCompetitorUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TenderCompetitorUpsertBulk{
		create: tccb,
	}
}

// TenderCompetitorUpsertBulk is the builder for "upsert"-ing
// a bulk of TenderCompetitor nodes.
type TenderCompetitorUpsertBulk struct {
	create *TenderCompetitorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tendercompetitor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenderCompetitorUpsertBulk) UpdateNewValues() *TenderCompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tendercompetitor.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tendercompetitor.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenderCompetitor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenderCompetitorUpsertBulk) Ignore() *TenderCompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenderCompetitorUpsertBulk) DoNothing() *TenderCompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenderCompetitorCreateBulk.OnConflict
// documentation for more info.
func (u *TenderCompetitorUpsertBulk) Update(set func(*TenderCompetitorUpsert)) *TenderCompetitorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenderCompetitorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenderCompetitorUpsertBulk) SetUpdatedAt(v time.Time) *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenderCompetitorUpsertBulk) UpdateUpdatedAt() *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenderID sets the "tender_id" field.
func (u *TenderCompetitorUpsertBulk) SetTenderID(v xid.ID) *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetTenderID(v)
	})
}

// UpdateTenderID sets the "tender_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsertBulk) UpdateTenderID() *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateTenderID()
	})
}

// SetCompetitorID sets the "competitor_id" field.
func (u *TenderCompetitorUpsertBulk) SetCompetitorID(v xid.ID) *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetCompetitorID(v)
	})
}

// UpdateCompetitorID sets the "competitor_id" field to the value that was provided on create.
func (u *TenderCompetitorUpsertBulk) UpdateCompetitorID() *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateCompetitorID()
	})
}

// SetAmount sets the "amount" field.
func (u *TenderCompetitorUpsertBulk) SetAmount(v float64) *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *TenderCompetitorUpsertBulk) AddAmount(v float64) *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TenderCompetitorUpsertBulk) UpdateAmount() *TenderCompetitorUpsertBulk {
	return u.Update(func(s *TenderCompetitorUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *TenderCompetitorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenderCompetitorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenderCompetitorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenderCompetitorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
