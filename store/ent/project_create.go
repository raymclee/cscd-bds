// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/projectvo"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCode sets the "code" field.
func (pc *ProjectCreate) SetCode(s string) *ProjectCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableName(s *string) *ProjectCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetIsFinished sets the "is_finished" field.
func (pc *ProjectCreate) SetIsFinished(b bool) *ProjectCreate {
	pc.mutation.SetIsFinished(b)
	return pc
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsFinished(b *bool) *ProjectCreate {
	if b != nil {
		pc.SetIsFinished(*b)
	}
	return pc
}

// SetCje sets the "cje" field.
func (pc *ProjectCreate) SetCje(f float64) *ProjectCreate {
	pc.mutation.SetCje(f)
	return pc
}

// SetNillableCje sets the "cje" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCje(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetCje(*f)
	}
	return pc
}

// SetYye sets the "yye" field.
func (pc *ProjectCreate) SetYye(f float64) *ProjectCreate {
	pc.mutation.SetYye(f)
	return pc
}

// SetNillableYye sets the "yye" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableYye(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetYye(*f)
	}
	return pc
}

// SetXjl sets the "xjl" field.
func (pc *ProjectCreate) SetXjl(f float64) *ProjectCreate {
	pc.mutation.SetXjl(f)
	return pc
}

// SetNillableXjl sets the "xjl" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableXjl(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetXjl(*f)
	}
	return pc
}

// SetXmglfYs sets the "xmglf_ys" field.
func (pc *ProjectCreate) SetXmglfYs(f float64) *ProjectCreate {
	pc.mutation.SetXmglfYs(f)
	return pc
}

// SetNillableXmglfYs sets the "xmglf_ys" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableXmglfYs(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetXmglfYs(*f)
	}
	return pc
}

// SetXmglfLj sets the "xmglf_lj" field.
func (pc *ProjectCreate) SetXmglfLj(f float64) *ProjectCreate {
	pc.mutation.SetXmglfLj(f)
	return pc
}

// SetNillableXmglfLj sets the "xmglf_lj" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableXmglfLj(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetXmglfLj(*f)
	}
	return pc
}

// SetXmsjf sets the "xmsjf" field.
func (pc *ProjectCreate) SetXmsjf(f float64) *ProjectCreate {
	pc.mutation.SetXmsjf(f)
	return pc
}

// SetNillableXmsjf sets the "xmsjf" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableXmsjf(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetXmsjf(*f)
	}
	return pc
}

// SetXmfzr sets the "xmfzr" field.
func (pc *ProjectCreate) SetXmfzr(s string) *ProjectCreate {
	pc.mutation.SetXmfzr(s)
	return pc
}

// SetNillableXmfzr sets the "xmfzr" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableXmfzr(s *string) *ProjectCreate {
	if s != nil {
		pc.SetXmfzr(*s)
	}
	return pc
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (pc *ProjectCreate) SetOwnerApplyAmount(f float64) *ProjectCreate {
	pc.mutation.SetOwnerApplyAmount(f)
	return pc
}

// SetNillableOwnerApplyAmount sets the "owner_apply_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerApplyAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetOwnerApplyAmount(*f)
	}
	return pc
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (pc *ProjectCreate) SetOwnerApplyCount(i int) *ProjectCreate {
	pc.mutation.SetOwnerApplyCount(i)
	return pc
}

// SetNillableOwnerApplyCount sets the "owner_apply_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerApplyCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetOwnerApplyCount(*i)
	}
	return pc
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (pc *ProjectCreate) SetOwnerApproveAmount(f float64) *ProjectCreate {
	pc.mutation.SetOwnerApproveAmount(f)
	return pc
}

// SetNillableOwnerApproveAmount sets the "owner_approve_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerApproveAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetOwnerApproveAmount(*f)
	}
	return pc
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (pc *ProjectCreate) SetOwnerApproveCount(i int) *ProjectCreate {
	pc.mutation.SetOwnerApproveCount(i)
	return pc
}

// SetNillableOwnerApproveCount sets the "owner_approve_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerApproveCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetOwnerApproveCount(*i)
	}
	return pc
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (pc *ProjectCreate) SetContractorApplyAmount(f float64) *ProjectCreate {
	pc.mutation.SetContractorApplyAmount(f)
	return pc
}

// SetNillableContractorApplyAmount sets the "contractor_apply_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractorApplyAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetContractorApplyAmount(*f)
	}
	return pc
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (pc *ProjectCreate) SetContractorApplyCount(i int) *ProjectCreate {
	pc.mutation.SetContractorApplyCount(i)
	return pc
}

// SetNillableContractorApplyCount sets the "contractor_apply_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractorApplyCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetContractorApplyCount(*i)
	}
	return pc
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (pc *ProjectCreate) SetContractorApproveAmount(f float64) *ProjectCreate {
	pc.mutation.SetContractorApproveAmount(f)
	return pc
}

// SetNillableContractorApproveAmount sets the "contractor_approve_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractorApproveAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetContractorApproveAmount(*f)
	}
	return pc
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (pc *ProjectCreate) SetContractorApproveCount(i int) *ProjectCreate {
	pc.mutation.SetContractorApproveCount(i)
	return pc
}

// SetNillableContractorApproveCount sets the "contractor_approve_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractorApproveCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetContractorApproveCount(*i)
	}
	return pc
}

// SetInstallProgress sets the "install_progress" field.
func (pc *ProjectCreate) SetInstallProgress(f float64) *ProjectCreate {
	pc.mutation.SetInstallProgress(f)
	return pc
}

// SetNillableInstallProgress sets the "install_progress" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableInstallProgress(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetInstallProgress(*f)
	}
	return pc
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (pc *ProjectCreate) SetEffectiveContractAmount(f float64) *ProjectCreate {
	pc.mutation.SetEffectiveContractAmount(f)
	return pc
}

// SetNillableEffectiveContractAmount sets the "effective_contract_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableEffectiveContractAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetEffectiveContractAmount(*f)
	}
	return pc
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (pc *ProjectCreate) SetVaApplyAmount(f float64) *ProjectCreate {
	pc.mutation.SetVaApplyAmount(f)
	return pc
}

// SetNillableVaApplyAmount sets the "va_apply_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableVaApplyAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetVaApplyAmount(*f)
	}
	return pc
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (pc *ProjectCreate) SetVaApproveAmount(f float64) *ProjectCreate {
	pc.mutation.SetVaApproveAmount(f)
	return pc
}

// SetNillableVaApproveAmount sets the "va_approve_amount" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableVaApproveAmount(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetVaApproveAmount(*f)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(x xid.ID) *ProjectCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(x *xid.ID) *ProjectCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// AddVoIDs adds the "vos" edge to the ProjectVO entity by IDs.
func (pc *ProjectCreate) AddVoIDs(ids ...xid.ID) *ProjectCreate {
	pc.mutation.AddVoIDs(ids...)
	return pc
}

// AddVos adds the "vos" edges to the ProjectVO entity.
func (pc *ProjectCreate) AddVos(p ...*ProjectVO) *ProjectCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddVoIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.IsFinished(); !ok {
		v := project.DefaultIsFinished
		pc.mutation.SetIsFinished(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	if _, ok := pc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Project.code"`)}
	}
	if _, ok := pc.mutation.IsFinished(); !ok {
		return &ValidationError{Name: "is_finished", err: errors.New(`ent: missing required field "Project.is_finished"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := pc.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
		_node.IsFinished = value
	}
	if value, ok := pc.mutation.Cje(); ok {
		_spec.SetField(project.FieldCje, field.TypeFloat64, value)
		_node.Cje = &value
	}
	if value, ok := pc.mutation.Yye(); ok {
		_spec.SetField(project.FieldYye, field.TypeFloat64, value)
		_node.Yye = &value
	}
	if value, ok := pc.mutation.Xjl(); ok {
		_spec.SetField(project.FieldXjl, field.TypeFloat64, value)
		_node.Xjl = &value
	}
	if value, ok := pc.mutation.XmglfYs(); ok {
		_spec.SetField(project.FieldXmglfYs, field.TypeFloat64, value)
		_node.XmglfYs = &value
	}
	if value, ok := pc.mutation.XmglfLj(); ok {
		_spec.SetField(project.FieldXmglfLj, field.TypeFloat64, value)
		_node.XmglfLj = &value
	}
	if value, ok := pc.mutation.Xmsjf(); ok {
		_spec.SetField(project.FieldXmsjf, field.TypeFloat64, value)
		_node.Xmsjf = &value
	}
	if value, ok := pc.mutation.Xmfzr(); ok {
		_spec.SetField(project.FieldXmfzr, field.TypeString, value)
		_node.Xmfzr = &value
	}
	if value, ok := pc.mutation.OwnerApplyAmount(); ok {
		_spec.SetField(project.FieldOwnerApplyAmount, field.TypeFloat64, value)
		_node.OwnerApplyAmount = &value
	}
	if value, ok := pc.mutation.OwnerApplyCount(); ok {
		_spec.SetField(project.FieldOwnerApplyCount, field.TypeInt, value)
		_node.OwnerApplyCount = &value
	}
	if value, ok := pc.mutation.OwnerApproveAmount(); ok {
		_spec.SetField(project.FieldOwnerApproveAmount, field.TypeFloat64, value)
		_node.OwnerApproveAmount = &value
	}
	if value, ok := pc.mutation.OwnerApproveCount(); ok {
		_spec.SetField(project.FieldOwnerApproveCount, field.TypeInt, value)
		_node.OwnerApproveCount = &value
	}
	if value, ok := pc.mutation.ContractorApplyAmount(); ok {
		_spec.SetField(project.FieldContractorApplyAmount, field.TypeFloat64, value)
		_node.ContractorApplyAmount = &value
	}
	if value, ok := pc.mutation.ContractorApplyCount(); ok {
		_spec.SetField(project.FieldContractorApplyCount, field.TypeInt, value)
		_node.ContractorApplyCount = &value
	}
	if value, ok := pc.mutation.ContractorApproveAmount(); ok {
		_spec.SetField(project.FieldContractorApproveAmount, field.TypeFloat64, value)
		_node.ContractorApproveAmount = &value
	}
	if value, ok := pc.mutation.ContractorApproveCount(); ok {
		_spec.SetField(project.FieldContractorApproveCount, field.TypeInt, value)
		_node.ContractorApproveCount = &value
	}
	if value, ok := pc.mutation.InstallProgress(); ok {
		_spec.SetField(project.FieldInstallProgress, field.TypeFloat64, value)
		_node.InstallProgress = &value
	}
	if value, ok := pc.mutation.EffectiveContractAmount(); ok {
		_spec.SetField(project.FieldEffectiveContractAmount, field.TypeFloat64, value)
		_node.EffectiveContractAmount = &value
	}
	if value, ok := pc.mutation.VaApplyAmount(); ok {
		_spec.SetField(project.FieldVaApplyAmount, field.TypeFloat64, value)
		_node.VaApplyAmount = &value
	}
	if value, ok := pc.mutation.VaApproveAmount(); ok {
		_spec.SetField(project.FieldVaApproveAmount, field.TypeFloat64, value)
		_node.VaApproveAmount = &value
	}
	if nodes := pc.mutation.VosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VosTable,
			Columns: []string{project.VosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectvo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsert) SetUpdatedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUpdatedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *ProjectUpsert) SetCode(v string) *ProjectUpsert {
	u.Set(project.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCode() *ProjectUpsert {
	u.SetExcluded(project.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ProjectUpsert) ClearName() *ProjectUpsert {
	u.SetNull(project.FieldName)
	return u
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsert) SetIsFinished(v bool) *ProjectUpsert {
	u.Set(project.FieldIsFinished, v)
	return u
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateIsFinished() *ProjectUpsert {
	u.SetExcluded(project.FieldIsFinished)
	return u
}

// SetCje sets the "cje" field.
func (u *ProjectUpsert) SetCje(v float64) *ProjectUpsert {
	u.Set(project.FieldCje, v)
	return u
}

// UpdateCje sets the "cje" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCje() *ProjectUpsert {
	u.SetExcluded(project.FieldCje)
	return u
}

// AddCje adds v to the "cje" field.
func (u *ProjectUpsert) AddCje(v float64) *ProjectUpsert {
	u.Add(project.FieldCje, v)
	return u
}

// ClearCje clears the value of the "cje" field.
func (u *ProjectUpsert) ClearCje() *ProjectUpsert {
	u.SetNull(project.FieldCje)
	return u
}

// SetYye sets the "yye" field.
func (u *ProjectUpsert) SetYye(v float64) *ProjectUpsert {
	u.Set(project.FieldYye, v)
	return u
}

// UpdateYye sets the "yye" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateYye() *ProjectUpsert {
	u.SetExcluded(project.FieldYye)
	return u
}

// AddYye adds v to the "yye" field.
func (u *ProjectUpsert) AddYye(v float64) *ProjectUpsert {
	u.Add(project.FieldYye, v)
	return u
}

// ClearYye clears the value of the "yye" field.
func (u *ProjectUpsert) ClearYye() *ProjectUpsert {
	u.SetNull(project.FieldYye)
	return u
}

// SetXjl sets the "xjl" field.
func (u *ProjectUpsert) SetXjl(v float64) *ProjectUpsert {
	u.Set(project.FieldXjl, v)
	return u
}

// UpdateXjl sets the "xjl" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateXjl() *ProjectUpsert {
	u.SetExcluded(project.FieldXjl)
	return u
}

// AddXjl adds v to the "xjl" field.
func (u *ProjectUpsert) AddXjl(v float64) *ProjectUpsert {
	u.Add(project.FieldXjl, v)
	return u
}

// ClearXjl clears the value of the "xjl" field.
func (u *ProjectUpsert) ClearXjl() *ProjectUpsert {
	u.SetNull(project.FieldXjl)
	return u
}

// SetXmglfYs sets the "xmglf_ys" field.
func (u *ProjectUpsert) SetXmglfYs(v float64) *ProjectUpsert {
	u.Set(project.FieldXmglfYs, v)
	return u
}

// UpdateXmglfYs sets the "xmglf_ys" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateXmglfYs() *ProjectUpsert {
	u.SetExcluded(project.FieldXmglfYs)
	return u
}

// AddXmglfYs adds v to the "xmglf_ys" field.
func (u *ProjectUpsert) AddXmglfYs(v float64) *ProjectUpsert {
	u.Add(project.FieldXmglfYs, v)
	return u
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (u *ProjectUpsert) ClearXmglfYs() *ProjectUpsert {
	u.SetNull(project.FieldXmglfYs)
	return u
}

// SetXmglfLj sets the "xmglf_lj" field.
func (u *ProjectUpsert) SetXmglfLj(v float64) *ProjectUpsert {
	u.Set(project.FieldXmglfLj, v)
	return u
}

// UpdateXmglfLj sets the "xmglf_lj" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateXmglfLj() *ProjectUpsert {
	u.SetExcluded(project.FieldXmglfLj)
	return u
}

// AddXmglfLj adds v to the "xmglf_lj" field.
func (u *ProjectUpsert) AddXmglfLj(v float64) *ProjectUpsert {
	u.Add(project.FieldXmglfLj, v)
	return u
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (u *ProjectUpsert) ClearXmglfLj() *ProjectUpsert {
	u.SetNull(project.FieldXmglfLj)
	return u
}

// SetXmsjf sets the "xmsjf" field.
func (u *ProjectUpsert) SetXmsjf(v float64) *ProjectUpsert {
	u.Set(project.FieldXmsjf, v)
	return u
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateXmsjf() *ProjectUpsert {
	u.SetExcluded(project.FieldXmsjf)
	return u
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *ProjectUpsert) AddXmsjf(v float64) *ProjectUpsert {
	u.Add(project.FieldXmsjf, v)
	return u
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *ProjectUpsert) ClearXmsjf() *ProjectUpsert {
	u.SetNull(project.FieldXmsjf)
	return u
}

// SetXmfzr sets the "xmfzr" field.
func (u *ProjectUpsert) SetXmfzr(v string) *ProjectUpsert {
	u.Set(project.FieldXmfzr, v)
	return u
}

// UpdateXmfzr sets the "xmfzr" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateXmfzr() *ProjectUpsert {
	u.SetExcluded(project.FieldXmfzr)
	return u
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (u *ProjectUpsert) ClearXmfzr() *ProjectUpsert {
	u.SetNull(project.FieldXmfzr)
	return u
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (u *ProjectUpsert) SetOwnerApplyAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldOwnerApplyAmount, v)
	return u
}

// UpdateOwnerApplyAmount sets the "owner_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOwnerApplyAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldOwnerApplyAmount)
	return u
}

// AddOwnerApplyAmount adds v to the "owner_apply_amount" field.
func (u *ProjectUpsert) AddOwnerApplyAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldOwnerApplyAmount, v)
	return u
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (u *ProjectUpsert) ClearOwnerApplyAmount() *ProjectUpsert {
	u.SetNull(project.FieldOwnerApplyAmount)
	return u
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (u *ProjectUpsert) SetOwnerApplyCount(v int) *ProjectUpsert {
	u.Set(project.FieldOwnerApplyCount, v)
	return u
}

// UpdateOwnerApplyCount sets the "owner_apply_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOwnerApplyCount() *ProjectUpsert {
	u.SetExcluded(project.FieldOwnerApplyCount)
	return u
}

// AddOwnerApplyCount adds v to the "owner_apply_count" field.
func (u *ProjectUpsert) AddOwnerApplyCount(v int) *ProjectUpsert {
	u.Add(project.FieldOwnerApplyCount, v)
	return u
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (u *ProjectUpsert) ClearOwnerApplyCount() *ProjectUpsert {
	u.SetNull(project.FieldOwnerApplyCount)
	return u
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (u *ProjectUpsert) SetOwnerApproveAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldOwnerApproveAmount, v)
	return u
}

// UpdateOwnerApproveAmount sets the "owner_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOwnerApproveAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldOwnerApproveAmount)
	return u
}

// AddOwnerApproveAmount adds v to the "owner_approve_amount" field.
func (u *ProjectUpsert) AddOwnerApproveAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldOwnerApproveAmount, v)
	return u
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (u *ProjectUpsert) ClearOwnerApproveAmount() *ProjectUpsert {
	u.SetNull(project.FieldOwnerApproveAmount)
	return u
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (u *ProjectUpsert) SetOwnerApproveCount(v int) *ProjectUpsert {
	u.Set(project.FieldOwnerApproveCount, v)
	return u
}

// UpdateOwnerApproveCount sets the "owner_approve_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOwnerApproveCount() *ProjectUpsert {
	u.SetExcluded(project.FieldOwnerApproveCount)
	return u
}

// AddOwnerApproveCount adds v to the "owner_approve_count" field.
func (u *ProjectUpsert) AddOwnerApproveCount(v int) *ProjectUpsert {
	u.Add(project.FieldOwnerApproveCount, v)
	return u
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (u *ProjectUpsert) ClearOwnerApproveCount() *ProjectUpsert {
	u.SetNull(project.FieldOwnerApproveCount)
	return u
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (u *ProjectUpsert) SetContractorApplyAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldContractorApplyAmount, v)
	return u
}

// UpdateContractorApplyAmount sets the "contractor_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractorApplyAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractorApplyAmount)
	return u
}

// AddContractorApplyAmount adds v to the "contractor_apply_amount" field.
func (u *ProjectUpsert) AddContractorApplyAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldContractorApplyAmount, v)
	return u
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (u *ProjectUpsert) ClearContractorApplyAmount() *ProjectUpsert {
	u.SetNull(project.FieldContractorApplyAmount)
	return u
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (u *ProjectUpsert) SetContractorApplyCount(v int) *ProjectUpsert {
	u.Set(project.FieldContractorApplyCount, v)
	return u
}

// UpdateContractorApplyCount sets the "contractor_apply_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractorApplyCount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractorApplyCount)
	return u
}

// AddContractorApplyCount adds v to the "contractor_apply_count" field.
func (u *ProjectUpsert) AddContractorApplyCount(v int) *ProjectUpsert {
	u.Add(project.FieldContractorApplyCount, v)
	return u
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (u *ProjectUpsert) ClearContractorApplyCount() *ProjectUpsert {
	u.SetNull(project.FieldContractorApplyCount)
	return u
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (u *ProjectUpsert) SetContractorApproveAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldContractorApproveAmount, v)
	return u
}

// UpdateContractorApproveAmount sets the "contractor_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractorApproveAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractorApproveAmount)
	return u
}

// AddContractorApproveAmount adds v to the "contractor_approve_amount" field.
func (u *ProjectUpsert) AddContractorApproveAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldContractorApproveAmount, v)
	return u
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (u *ProjectUpsert) ClearContractorApproveAmount() *ProjectUpsert {
	u.SetNull(project.FieldContractorApproveAmount)
	return u
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (u *ProjectUpsert) SetContractorApproveCount(v int) *ProjectUpsert {
	u.Set(project.FieldContractorApproveCount, v)
	return u
}

// UpdateContractorApproveCount sets the "contractor_approve_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractorApproveCount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractorApproveCount)
	return u
}

// AddContractorApproveCount adds v to the "contractor_approve_count" field.
func (u *ProjectUpsert) AddContractorApproveCount(v int) *ProjectUpsert {
	u.Add(project.FieldContractorApproveCount, v)
	return u
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (u *ProjectUpsert) ClearContractorApproveCount() *ProjectUpsert {
	u.SetNull(project.FieldContractorApproveCount)
	return u
}

// SetInstallProgress sets the "install_progress" field.
func (u *ProjectUpsert) SetInstallProgress(v float64) *ProjectUpsert {
	u.Set(project.FieldInstallProgress, v)
	return u
}

// UpdateInstallProgress sets the "install_progress" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateInstallProgress() *ProjectUpsert {
	u.SetExcluded(project.FieldInstallProgress)
	return u
}

// AddInstallProgress adds v to the "install_progress" field.
func (u *ProjectUpsert) AddInstallProgress(v float64) *ProjectUpsert {
	u.Add(project.FieldInstallProgress, v)
	return u
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (u *ProjectUpsert) ClearInstallProgress() *ProjectUpsert {
	u.SetNull(project.FieldInstallProgress)
	return u
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (u *ProjectUpsert) SetEffectiveContractAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldEffectiveContractAmount, v)
	return u
}

// UpdateEffectiveContractAmount sets the "effective_contract_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateEffectiveContractAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldEffectiveContractAmount)
	return u
}

// AddEffectiveContractAmount adds v to the "effective_contract_amount" field.
func (u *ProjectUpsert) AddEffectiveContractAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldEffectiveContractAmount, v)
	return u
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (u *ProjectUpsert) ClearEffectiveContractAmount() *ProjectUpsert {
	u.SetNull(project.FieldEffectiveContractAmount)
	return u
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (u *ProjectUpsert) SetVaApplyAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldVaApplyAmount, v)
	return u
}

// UpdateVaApplyAmount sets the "va_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateVaApplyAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldVaApplyAmount)
	return u
}

// AddVaApplyAmount adds v to the "va_apply_amount" field.
func (u *ProjectUpsert) AddVaApplyAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldVaApplyAmount, v)
	return u
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (u *ProjectUpsert) ClearVaApplyAmount() *ProjectUpsert {
	u.SetNull(project.FieldVaApplyAmount)
	return u
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (u *ProjectUpsert) SetVaApproveAmount(v float64) *ProjectUpsert {
	u.Set(project.FieldVaApproveAmount, v)
	return u
}

// UpdateVaApproveAmount sets the "va_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateVaApproveAmount() *ProjectUpsert {
	u.SetExcluded(project.FieldVaApproveAmount)
	return u
}

// AddVaApproveAmount adds v to the "va_approve_amount" field.
func (u *ProjectUpsert) AddVaApproveAmount(v float64) *ProjectUpsert {
	u.Add(project.FieldVaApproveAmount, v)
	return u
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (u *ProjectUpsert) ClearVaApproveAmount() *ProjectUpsert {
	u.SetNull(project.FieldVaApproveAmount)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(project.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(project.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertOne) SetUpdatedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUpdatedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *ProjectUpsertOne) SetCode(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCode() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ProjectUpsertOne) ClearName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearName()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsertOne) SetIsFinished(v bool) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateIsFinished() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFinished()
	})
}

// SetCje sets the "cje" field.
func (u *ProjectUpsertOne) SetCje(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCje(v)
	})
}

// AddCje adds v to the "cje" field.
func (u *ProjectUpsertOne) AddCje(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddCje(v)
	})
}

// UpdateCje sets the "cje" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCje() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCje()
	})
}

// ClearCje clears the value of the "cje" field.
func (u *ProjectUpsertOne) ClearCje() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearCje()
	})
}

// SetYye sets the "yye" field.
func (u *ProjectUpsertOne) SetYye(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetYye(v)
	})
}

// AddYye adds v to the "yye" field.
func (u *ProjectUpsertOne) AddYye(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddYye(v)
	})
}

// UpdateYye sets the "yye" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateYye() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateYye()
	})
}

// ClearYye clears the value of the "yye" field.
func (u *ProjectUpsertOne) ClearYye() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearYye()
	})
}

// SetXjl sets the "xjl" field.
func (u *ProjectUpsertOne) SetXjl(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXjl(v)
	})
}

// AddXjl adds v to the "xjl" field.
func (u *ProjectUpsertOne) AddXjl(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXjl(v)
	})
}

// UpdateXjl sets the "xjl" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateXjl() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXjl()
	})
}

// ClearXjl clears the value of the "xjl" field.
func (u *ProjectUpsertOne) ClearXjl() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXjl()
	})
}

// SetXmglfYs sets the "xmglf_ys" field.
func (u *ProjectUpsertOne) SetXmglfYs(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmglfYs(v)
	})
}

// AddXmglfYs adds v to the "xmglf_ys" field.
func (u *ProjectUpsertOne) AddXmglfYs(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmglfYs(v)
	})
}

// UpdateXmglfYs sets the "xmglf_ys" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateXmglfYs() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmglfYs()
	})
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (u *ProjectUpsertOne) ClearXmglfYs() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmglfYs()
	})
}

// SetXmglfLj sets the "xmglf_lj" field.
func (u *ProjectUpsertOne) SetXmglfLj(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmglfLj(v)
	})
}

// AddXmglfLj adds v to the "xmglf_lj" field.
func (u *ProjectUpsertOne) AddXmglfLj(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmglfLj(v)
	})
}

// UpdateXmglfLj sets the "xmglf_lj" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateXmglfLj() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmglfLj()
	})
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (u *ProjectUpsertOne) ClearXmglfLj() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmglfLj()
	})
}

// SetXmsjf sets the "xmsjf" field.
func (u *ProjectUpsertOne) SetXmsjf(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmsjf(v)
	})
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *ProjectUpsertOne) AddXmsjf(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmsjf(v)
	})
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateXmsjf() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmsjf()
	})
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *ProjectUpsertOne) ClearXmsjf() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmsjf()
	})
}

// SetXmfzr sets the "xmfzr" field.
func (u *ProjectUpsertOne) SetXmfzr(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmfzr(v)
	})
}

// UpdateXmfzr sets the "xmfzr" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateXmfzr() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmfzr()
	})
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (u *ProjectUpsertOne) ClearXmfzr() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmfzr()
	})
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (u *ProjectUpsertOne) SetOwnerApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApplyAmount(v)
	})
}

// AddOwnerApplyAmount adds v to the "owner_apply_amount" field.
func (u *ProjectUpsertOne) AddOwnerApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApplyAmount(v)
	})
}

// UpdateOwnerApplyAmount sets the "owner_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOwnerApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApplyAmount()
	})
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (u *ProjectUpsertOne) ClearOwnerApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApplyAmount()
	})
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (u *ProjectUpsertOne) SetOwnerApplyCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApplyCount(v)
	})
}

// AddOwnerApplyCount adds v to the "owner_apply_count" field.
func (u *ProjectUpsertOne) AddOwnerApplyCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApplyCount(v)
	})
}

// UpdateOwnerApplyCount sets the "owner_apply_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOwnerApplyCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApplyCount()
	})
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (u *ProjectUpsertOne) ClearOwnerApplyCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApplyCount()
	})
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (u *ProjectUpsertOne) SetOwnerApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApproveAmount(v)
	})
}

// AddOwnerApproveAmount adds v to the "owner_approve_amount" field.
func (u *ProjectUpsertOne) AddOwnerApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApproveAmount(v)
	})
}

// UpdateOwnerApproveAmount sets the "owner_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOwnerApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApproveAmount()
	})
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (u *ProjectUpsertOne) ClearOwnerApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApproveAmount()
	})
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (u *ProjectUpsertOne) SetOwnerApproveCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApproveCount(v)
	})
}

// AddOwnerApproveCount adds v to the "owner_approve_count" field.
func (u *ProjectUpsertOne) AddOwnerApproveCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApproveCount(v)
	})
}

// UpdateOwnerApproveCount sets the "owner_approve_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOwnerApproveCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApproveCount()
	})
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (u *ProjectUpsertOne) ClearOwnerApproveCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApproveCount()
	})
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (u *ProjectUpsertOne) SetContractorApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApplyAmount(v)
	})
}

// AddContractorApplyAmount adds v to the "contractor_apply_amount" field.
func (u *ProjectUpsertOne) AddContractorApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApplyAmount(v)
	})
}

// UpdateContractorApplyAmount sets the "contractor_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractorApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApplyAmount()
	})
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (u *ProjectUpsertOne) ClearContractorApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApplyAmount()
	})
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (u *ProjectUpsertOne) SetContractorApplyCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApplyCount(v)
	})
}

// AddContractorApplyCount adds v to the "contractor_apply_count" field.
func (u *ProjectUpsertOne) AddContractorApplyCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApplyCount(v)
	})
}

// UpdateContractorApplyCount sets the "contractor_apply_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractorApplyCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApplyCount()
	})
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (u *ProjectUpsertOne) ClearContractorApplyCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApplyCount()
	})
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (u *ProjectUpsertOne) SetContractorApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApproveAmount(v)
	})
}

// AddContractorApproveAmount adds v to the "contractor_approve_amount" field.
func (u *ProjectUpsertOne) AddContractorApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApproveAmount(v)
	})
}

// UpdateContractorApproveAmount sets the "contractor_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractorApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApproveAmount()
	})
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (u *ProjectUpsertOne) ClearContractorApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApproveAmount()
	})
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (u *ProjectUpsertOne) SetContractorApproveCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApproveCount(v)
	})
}

// AddContractorApproveCount adds v to the "contractor_approve_count" field.
func (u *ProjectUpsertOne) AddContractorApproveCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApproveCount(v)
	})
}

// UpdateContractorApproveCount sets the "contractor_approve_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractorApproveCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApproveCount()
	})
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (u *ProjectUpsertOne) ClearContractorApproveCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApproveCount()
	})
}

// SetInstallProgress sets the "install_progress" field.
func (u *ProjectUpsertOne) SetInstallProgress(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetInstallProgress(v)
	})
}

// AddInstallProgress adds v to the "install_progress" field.
func (u *ProjectUpsertOne) AddInstallProgress(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddInstallProgress(v)
	})
}

// UpdateInstallProgress sets the "install_progress" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateInstallProgress() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateInstallProgress()
	})
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (u *ProjectUpsertOne) ClearInstallProgress() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearInstallProgress()
	})
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (u *ProjectUpsertOne) SetEffectiveContractAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetEffectiveContractAmount(v)
	})
}

// AddEffectiveContractAmount adds v to the "effective_contract_amount" field.
func (u *ProjectUpsertOne) AddEffectiveContractAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddEffectiveContractAmount(v)
	})
}

// UpdateEffectiveContractAmount sets the "effective_contract_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateEffectiveContractAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateEffectiveContractAmount()
	})
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (u *ProjectUpsertOne) ClearEffectiveContractAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearEffectiveContractAmount()
	})
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (u *ProjectUpsertOne) SetVaApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVaApplyAmount(v)
	})
}

// AddVaApplyAmount adds v to the "va_apply_amount" field.
func (u *ProjectUpsertOne) AddVaApplyAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVaApplyAmount(v)
	})
}

// UpdateVaApplyAmount sets the "va_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateVaApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVaApplyAmount()
	})
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (u *ProjectUpsertOne) ClearVaApplyAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearVaApplyAmount()
	})
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (u *ProjectUpsertOne) SetVaApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVaApproveAmount(v)
	})
}

// AddVaApproveAmount adds v to the "va_approve_amount" field.
func (u *ProjectUpsertOne) AddVaApproveAmount(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVaApproveAmount(v)
	})
}

// UpdateVaApproveAmount sets the "va_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateVaApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVaApproveAmount()
	})
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (u *ProjectUpsertOne) ClearVaApproveAmount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearVaApproveAmount()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectUpsertOne.ID is not supported by MySQL driver. Use ProjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(project.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(project.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertBulk) SetUpdatedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUpdatedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *ProjectUpsertBulk) SetCode(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCode() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ProjectUpsertBulk) ClearName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearName()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsertBulk) SetIsFinished(v bool) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateIsFinished() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFinished()
	})
}

// SetCje sets the "cje" field.
func (u *ProjectUpsertBulk) SetCje(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCje(v)
	})
}

// AddCje adds v to the "cje" field.
func (u *ProjectUpsertBulk) AddCje(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddCje(v)
	})
}

// UpdateCje sets the "cje" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCje() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCje()
	})
}

// ClearCje clears the value of the "cje" field.
func (u *ProjectUpsertBulk) ClearCje() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearCje()
	})
}

// SetYye sets the "yye" field.
func (u *ProjectUpsertBulk) SetYye(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetYye(v)
	})
}

// AddYye adds v to the "yye" field.
func (u *ProjectUpsertBulk) AddYye(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddYye(v)
	})
}

// UpdateYye sets the "yye" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateYye() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateYye()
	})
}

// ClearYye clears the value of the "yye" field.
func (u *ProjectUpsertBulk) ClearYye() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearYye()
	})
}

// SetXjl sets the "xjl" field.
func (u *ProjectUpsertBulk) SetXjl(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXjl(v)
	})
}

// AddXjl adds v to the "xjl" field.
func (u *ProjectUpsertBulk) AddXjl(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXjl(v)
	})
}

// UpdateXjl sets the "xjl" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateXjl() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXjl()
	})
}

// ClearXjl clears the value of the "xjl" field.
func (u *ProjectUpsertBulk) ClearXjl() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXjl()
	})
}

// SetXmglfYs sets the "xmglf_ys" field.
func (u *ProjectUpsertBulk) SetXmglfYs(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmglfYs(v)
	})
}

// AddXmglfYs adds v to the "xmglf_ys" field.
func (u *ProjectUpsertBulk) AddXmglfYs(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmglfYs(v)
	})
}

// UpdateXmglfYs sets the "xmglf_ys" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateXmglfYs() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmglfYs()
	})
}

// ClearXmglfYs clears the value of the "xmglf_ys" field.
func (u *ProjectUpsertBulk) ClearXmglfYs() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmglfYs()
	})
}

// SetXmglfLj sets the "xmglf_lj" field.
func (u *ProjectUpsertBulk) SetXmglfLj(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmglfLj(v)
	})
}

// AddXmglfLj adds v to the "xmglf_lj" field.
func (u *ProjectUpsertBulk) AddXmglfLj(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmglfLj(v)
	})
}

// UpdateXmglfLj sets the "xmglf_lj" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateXmglfLj() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmglfLj()
	})
}

// ClearXmglfLj clears the value of the "xmglf_lj" field.
func (u *ProjectUpsertBulk) ClearXmglfLj() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmglfLj()
	})
}

// SetXmsjf sets the "xmsjf" field.
func (u *ProjectUpsertBulk) SetXmsjf(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmsjf(v)
	})
}

// AddXmsjf adds v to the "xmsjf" field.
func (u *ProjectUpsertBulk) AddXmsjf(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddXmsjf(v)
	})
}

// UpdateXmsjf sets the "xmsjf" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateXmsjf() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmsjf()
	})
}

// ClearXmsjf clears the value of the "xmsjf" field.
func (u *ProjectUpsertBulk) ClearXmsjf() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmsjf()
	})
}

// SetXmfzr sets the "xmfzr" field.
func (u *ProjectUpsertBulk) SetXmfzr(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetXmfzr(v)
	})
}

// UpdateXmfzr sets the "xmfzr" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateXmfzr() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateXmfzr()
	})
}

// ClearXmfzr clears the value of the "xmfzr" field.
func (u *ProjectUpsertBulk) ClearXmfzr() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearXmfzr()
	})
}

// SetOwnerApplyAmount sets the "owner_apply_amount" field.
func (u *ProjectUpsertBulk) SetOwnerApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApplyAmount(v)
	})
}

// AddOwnerApplyAmount adds v to the "owner_apply_amount" field.
func (u *ProjectUpsertBulk) AddOwnerApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApplyAmount(v)
	})
}

// UpdateOwnerApplyAmount sets the "owner_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOwnerApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApplyAmount()
	})
}

// ClearOwnerApplyAmount clears the value of the "owner_apply_amount" field.
func (u *ProjectUpsertBulk) ClearOwnerApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApplyAmount()
	})
}

// SetOwnerApplyCount sets the "owner_apply_count" field.
func (u *ProjectUpsertBulk) SetOwnerApplyCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApplyCount(v)
	})
}

// AddOwnerApplyCount adds v to the "owner_apply_count" field.
func (u *ProjectUpsertBulk) AddOwnerApplyCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApplyCount(v)
	})
}

// UpdateOwnerApplyCount sets the "owner_apply_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOwnerApplyCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApplyCount()
	})
}

// ClearOwnerApplyCount clears the value of the "owner_apply_count" field.
func (u *ProjectUpsertBulk) ClearOwnerApplyCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApplyCount()
	})
}

// SetOwnerApproveAmount sets the "owner_approve_amount" field.
func (u *ProjectUpsertBulk) SetOwnerApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApproveAmount(v)
	})
}

// AddOwnerApproveAmount adds v to the "owner_approve_amount" field.
func (u *ProjectUpsertBulk) AddOwnerApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApproveAmount(v)
	})
}

// UpdateOwnerApproveAmount sets the "owner_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOwnerApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApproveAmount()
	})
}

// ClearOwnerApproveAmount clears the value of the "owner_approve_amount" field.
func (u *ProjectUpsertBulk) ClearOwnerApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApproveAmount()
	})
}

// SetOwnerApproveCount sets the "owner_approve_count" field.
func (u *ProjectUpsertBulk) SetOwnerApproveCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerApproveCount(v)
	})
}

// AddOwnerApproveCount adds v to the "owner_approve_count" field.
func (u *ProjectUpsertBulk) AddOwnerApproveCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerApproveCount(v)
	})
}

// UpdateOwnerApproveCount sets the "owner_approve_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOwnerApproveCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerApproveCount()
	})
}

// ClearOwnerApproveCount clears the value of the "owner_approve_count" field.
func (u *ProjectUpsertBulk) ClearOwnerApproveCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerApproveCount()
	})
}

// SetContractorApplyAmount sets the "contractor_apply_amount" field.
func (u *ProjectUpsertBulk) SetContractorApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApplyAmount(v)
	})
}

// AddContractorApplyAmount adds v to the "contractor_apply_amount" field.
func (u *ProjectUpsertBulk) AddContractorApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApplyAmount(v)
	})
}

// UpdateContractorApplyAmount sets the "contractor_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractorApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApplyAmount()
	})
}

// ClearContractorApplyAmount clears the value of the "contractor_apply_amount" field.
func (u *ProjectUpsertBulk) ClearContractorApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApplyAmount()
	})
}

// SetContractorApplyCount sets the "contractor_apply_count" field.
func (u *ProjectUpsertBulk) SetContractorApplyCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApplyCount(v)
	})
}

// AddContractorApplyCount adds v to the "contractor_apply_count" field.
func (u *ProjectUpsertBulk) AddContractorApplyCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApplyCount(v)
	})
}

// UpdateContractorApplyCount sets the "contractor_apply_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractorApplyCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApplyCount()
	})
}

// ClearContractorApplyCount clears the value of the "contractor_apply_count" field.
func (u *ProjectUpsertBulk) ClearContractorApplyCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApplyCount()
	})
}

// SetContractorApproveAmount sets the "contractor_approve_amount" field.
func (u *ProjectUpsertBulk) SetContractorApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApproveAmount(v)
	})
}

// AddContractorApproveAmount adds v to the "contractor_approve_amount" field.
func (u *ProjectUpsertBulk) AddContractorApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApproveAmount(v)
	})
}

// UpdateContractorApproveAmount sets the "contractor_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractorApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApproveAmount()
	})
}

// ClearContractorApproveAmount clears the value of the "contractor_approve_amount" field.
func (u *ProjectUpsertBulk) ClearContractorApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApproveAmount()
	})
}

// SetContractorApproveCount sets the "contractor_approve_count" field.
func (u *ProjectUpsertBulk) SetContractorApproveCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorApproveCount(v)
	})
}

// AddContractorApproveCount adds v to the "contractor_approve_count" field.
func (u *ProjectUpsertBulk) AddContractorApproveCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorApproveCount(v)
	})
}

// UpdateContractorApproveCount sets the "contractor_approve_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractorApproveCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorApproveCount()
	})
}

// ClearContractorApproveCount clears the value of the "contractor_approve_count" field.
func (u *ProjectUpsertBulk) ClearContractorApproveCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorApproveCount()
	})
}

// SetInstallProgress sets the "install_progress" field.
func (u *ProjectUpsertBulk) SetInstallProgress(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetInstallProgress(v)
	})
}

// AddInstallProgress adds v to the "install_progress" field.
func (u *ProjectUpsertBulk) AddInstallProgress(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddInstallProgress(v)
	})
}

// UpdateInstallProgress sets the "install_progress" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateInstallProgress() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateInstallProgress()
	})
}

// ClearInstallProgress clears the value of the "install_progress" field.
func (u *ProjectUpsertBulk) ClearInstallProgress() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearInstallProgress()
	})
}

// SetEffectiveContractAmount sets the "effective_contract_amount" field.
func (u *ProjectUpsertBulk) SetEffectiveContractAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetEffectiveContractAmount(v)
	})
}

// AddEffectiveContractAmount adds v to the "effective_contract_amount" field.
func (u *ProjectUpsertBulk) AddEffectiveContractAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddEffectiveContractAmount(v)
	})
}

// UpdateEffectiveContractAmount sets the "effective_contract_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateEffectiveContractAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateEffectiveContractAmount()
	})
}

// ClearEffectiveContractAmount clears the value of the "effective_contract_amount" field.
func (u *ProjectUpsertBulk) ClearEffectiveContractAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearEffectiveContractAmount()
	})
}

// SetVaApplyAmount sets the "va_apply_amount" field.
func (u *ProjectUpsertBulk) SetVaApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVaApplyAmount(v)
	})
}

// AddVaApplyAmount adds v to the "va_apply_amount" field.
func (u *ProjectUpsertBulk) AddVaApplyAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVaApplyAmount(v)
	})
}

// UpdateVaApplyAmount sets the "va_apply_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateVaApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVaApplyAmount()
	})
}

// ClearVaApplyAmount clears the value of the "va_apply_amount" field.
func (u *ProjectUpsertBulk) ClearVaApplyAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearVaApplyAmount()
	})
}

// SetVaApproveAmount sets the "va_approve_amount" field.
func (u *ProjectUpsertBulk) SetVaApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVaApproveAmount(v)
	})
}

// AddVaApproveAmount adds v to the "va_approve_amount" field.
func (u *ProjectUpsertBulk) AddVaApproveAmount(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVaApproveAmount(v)
	})
}

// UpdateVaApproveAmount sets the "va_approve_amount" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateVaApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVaApproveAmount()
	})
}

// ClearVaApproveAmount clears the value of the "va_approve_amount" field.
func (u *ProjectUpsertBulk) ClearVaApproveAmount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearVaApproveAmount()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
