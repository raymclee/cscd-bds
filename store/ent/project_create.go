// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCode sets the "code" field.
func (pc *ProjectCreate) SetCode(s string) *ProjectCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetIsFinished sets the "is_finished" field.
func (pc *ProjectCreate) SetIsFinished(b bool) *ProjectCreate {
	pc.mutation.SetIsFinished(b)
	return pc
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsFinished(b *bool) *ProjectCreate {
	if b != nil {
		pc.SetIsFinished(*b)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (pc *ProjectCreate) SetRevenueKpi(f float64) *ProjectCreate {
	pc.mutation.SetRevenueKpi(f)
	return pc
}

// SetNillableRevenueKpi sets the "revenue_kpi" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableRevenueKpi(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetRevenueKpi(*f)
	}
	return pc
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (pc *ProjectCreate) SetRevenueCurrentYearCompleted(f float64) *ProjectCreate {
	pc.mutation.SetRevenueCurrentYearCompleted(f)
	return pc
}

// SetNillableRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableRevenueCurrentYearCompleted(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetRevenueCurrentYearCompleted(*f)
	}
	return pc
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (pc *ProjectCreate) SetRevenueAccumulatedCompleted(f float64) *ProjectCreate {
	pc.mutation.SetRevenueAccumulatedCompleted(f)
	return pc
}

// SetNillableRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableRevenueAccumulatedCompleted(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetRevenueAccumulatedCompleted(*f)
	}
	return pc
}

// SetPayDate sets the "pay_date" field.
func (pc *ProjectCreate) SetPayDate(t time.Time) *ProjectCreate {
	pc.mutation.SetPayDate(t)
	return pc
}

// SetNillablePayDate sets the "pay_date" field if the given value is not nil.
func (pc *ProjectCreate) SetNillablePayDate(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetPayDate(*t)
	}
	return pc
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (pc *ProjectCreate) SetOwnerVoCount(i int) *ProjectCreate {
	pc.mutation.SetOwnerVoCount(i)
	return pc
}

// SetNillableOwnerVoCount sets the "owner_vo_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOwnerVoCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetOwnerVoCount(*i)
	}
	return pc
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (pc *ProjectCreate) SetContractorVoCount(i int) *ProjectCreate {
	pc.mutation.SetContractorVoCount(i)
	return pc
}

// SetNillableContractorVoCount sets the "contractor_vo_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractorVoCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetContractorVoCount(*i)
	}
	return pc
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (pc *ProjectCreate) SetAccumulateDeduction(f float64) *ProjectCreate {
	pc.mutation.SetAccumulateDeduction(f)
	return pc
}

// SetNillableAccumulateDeduction sets the "accumulate_deduction" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAccumulateDeduction(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetAccumulateDeduction(*f)
	}
	return pc
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (pc *ProjectCreate) SetSubcontractorVaCount(i int) *ProjectCreate {
	pc.mutation.SetSubcontractorVaCount(i)
	return pc
}

// SetNillableSubcontractorVaCount sets the "subcontractor_va_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableSubcontractorVaCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetSubcontractorVaCount(*i)
	}
	return pc
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (pc *ProjectCreate) SetContractSupplementaryCount(i int) *ProjectCreate {
	pc.mutation.SetContractSupplementaryCount(i)
	return pc
}

// SetNillableContractSupplementaryCount sets the "contract_supplementary_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableContractSupplementaryCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetContractSupplementaryCount(*i)
	}
	return pc
}

// SetRepairFee sets the "repair_fee" field.
func (pc *ProjectCreate) SetRepairFee(f float64) *ProjectCreate {
	pc.mutation.SetRepairFee(f)
	return pc
}

// SetNillableRepairFee sets the "repair_fee" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableRepairFee(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetRepairFee(*f)
	}
	return pc
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (pc *ProjectCreate) SetUnitInventoryTotal(f float64) *ProjectCreate {
	pc.mutation.SetUnitInventoryTotal(f)
	return pc
}

// SetNillableUnitInventoryTotal sets the "unit_inventory_total" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUnitInventoryTotal(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetUnitInventoryTotal(*f)
	}
	return pc
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (pc *ProjectCreate) SetUnitComponentTotal(f float64) *ProjectCreate {
	pc.mutation.SetUnitComponentTotal(f)
	return pc
}

// SetNillableUnitComponentTotal sets the "unit_component_total" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUnitComponentTotal(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetUnitComponentTotal(*f)
	}
	return pc
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (pc *ProjectCreate) SetUnitComponentProduction(f float64) *ProjectCreate {
	pc.mutation.SetUnitComponentProduction(f)
	return pc
}

// SetNillableUnitComponentProduction sets the "unit_component_production" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUnitComponentProduction(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetUnitComponentProduction(*f)
	}
	return pc
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (pc *ProjectCreate) SetUnitComponentInstallation(f float64) *ProjectCreate {
	pc.mutation.SetUnitComponentInstallation(f)
	return pc
}

// SetNillableUnitComponentInstallation sets the "unit_component_installation" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUnitComponentInstallation(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetUnitComponentInstallation(*f)
	}
	return pc
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (pc *ProjectCreate) SetBulkMaterialsTotalOrderQuantity(f float64) *ProjectCreate {
	pc.mutation.SetBulkMaterialsTotalOrderQuantity(f)
	return pc
}

// SetNillableBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableBulkMaterialsTotalOrderQuantity(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetBulkMaterialsTotalOrderQuantity(*f)
	}
	return pc
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (pc *ProjectCreate) SetBulkMaterialsCompletedQuantity(f float64) *ProjectCreate {
	pc.mutation.SetBulkMaterialsCompletedQuantity(f)
	return pc
}

// SetNillableBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableBulkMaterialsCompletedQuantity(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetBulkMaterialsCompletedQuantity(*f)
	}
	return pc
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (pc *ProjectCreate) SetBulkMaterialsUncompletedQuantity(f float64) *ProjectCreate {
	pc.mutation.SetBulkMaterialsUncompletedQuantity(f)
	return pc
}

// SetNillableBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableBulkMaterialsUncompletedQuantity(f *float64) *ProjectCreate {
	if f != nil {
		pc.SetBulkMaterialsUncompletedQuantity(*f)
	}
	return pc
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (pc *ProjectCreate) SetDiagramBdFinishCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramBdFinishCount(i)
	return pc
}

// SetNillableDiagramBdFinishCount sets the "diagram_bd_finish_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramBdFinishCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramBdFinishCount(*i)
	}
	return pc
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (pc *ProjectCreate) SetDiagramBdTotalCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramBdTotalCount(i)
	return pc
}

// SetNillableDiagramBdTotalCount sets the "diagram_bd_total_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramBdTotalCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramBdTotalCount(*i)
	}
	return pc
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (pc *ProjectCreate) SetDiagramConstructionFinishCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramConstructionFinishCount(i)
	return pc
}

// SetNillableDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramConstructionFinishCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramConstructionFinishCount(*i)
	}
	return pc
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (pc *ProjectCreate) SetDiagramConstructionTotalCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramConstructionTotalCount(i)
	return pc
}

// SetNillableDiagramConstructionTotalCount sets the "diagram_construction_total_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramConstructionTotalCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramConstructionTotalCount(*i)
	}
	return pc
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (pc *ProjectCreate) SetDiagramProcessingFinishCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramProcessingFinishCount(i)
	return pc
}

// SetNillableDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramProcessingFinishCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramProcessingFinishCount(*i)
	}
	return pc
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (pc *ProjectCreate) SetDiagramProcessingTotalCount(i int) *ProjectCreate {
	pc.mutation.SetDiagramProcessingTotalCount(i)
	return pc
}

// SetNillableDiagramProcessingTotalCount sets the "diagram_processing_total_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramProcessingTotalCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramProcessingTotalCount(*i)
	}
	return pc
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (pc *ProjectCreate) SetDiagramCApprovalRatioNumerator(i int) *ProjectCreate {
	pc.mutation.SetDiagramCApprovalRatioNumerator(i)
	return pc
}

// SetNillableDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramCApprovalRatioNumerator(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramCApprovalRatioNumerator(*i)
	}
	return pc
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (pc *ProjectCreate) SetDiagramCApprovalRatioDenominator(i int) *ProjectCreate {
	pc.mutation.SetDiagramCApprovalRatioDenominator(i)
	return pc
}

// SetNillableDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDiagramCApprovalRatioDenominator(i *int) *ProjectCreate {
	if i != nil {
		pc.SetDiagramCApprovalRatioDenominator(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(x xid.ID) *ProjectCreate {
	pc.mutation.SetID(x)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(x *xid.ID) *ProjectCreate {
	if x != nil {
		pc.SetID(*x)
	}
	return pc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pc *ProjectCreate) AddUserIDs(ids ...xid.ID) *ProjectCreate {
	pc.mutation.AddUserIDs(ids...)
	return pc
}

// AddUsers adds the "users" edges to the User entity.
func (pc *ProjectCreate) AddUsers(u ...*User) *ProjectCreate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddUserIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.IsFinished(); !ok {
		v := project.DefaultIsFinished
		pc.mutation.SetIsFinished(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	if _, ok := pc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Project.code"`)}
	}
	if _, ok := pc.mutation.IsFinished(); !ok {
		return &ValidationError{Name: "is_finished", err: errors.New(`ent: missing required field "Project.is_finished"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pc.mutation.IsFinished(); ok {
		_spec.SetField(project.FieldIsFinished, field.TypeBool, value)
		_node.IsFinished = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.RevenueKpi(); ok {
		_spec.SetField(project.FieldRevenueKpi, field.TypeFloat64, value)
		_node.RevenueKpi = &value
	}
	if value, ok := pc.mutation.RevenueCurrentYearCompleted(); ok {
		_spec.SetField(project.FieldRevenueCurrentYearCompleted, field.TypeFloat64, value)
		_node.RevenueCurrentYearCompleted = &value
	}
	if value, ok := pc.mutation.RevenueAccumulatedCompleted(); ok {
		_spec.SetField(project.FieldRevenueAccumulatedCompleted, field.TypeFloat64, value)
		_node.RevenueAccumulatedCompleted = &value
	}
	if value, ok := pc.mutation.PayDate(); ok {
		_spec.SetField(project.FieldPayDate, field.TypeTime, value)
		_node.PayDate = &value
	}
	if value, ok := pc.mutation.OwnerVoCount(); ok {
		_spec.SetField(project.FieldOwnerVoCount, field.TypeInt, value)
		_node.OwnerVoCount = &value
	}
	if value, ok := pc.mutation.ContractorVoCount(); ok {
		_spec.SetField(project.FieldContractorVoCount, field.TypeInt, value)
		_node.ContractorVoCount = &value
	}
	if value, ok := pc.mutation.AccumulateDeduction(); ok {
		_spec.SetField(project.FieldAccumulateDeduction, field.TypeFloat64, value)
		_node.AccumulateDeduction = &value
	}
	if value, ok := pc.mutation.SubcontractorVaCount(); ok {
		_spec.SetField(project.FieldSubcontractorVaCount, field.TypeInt, value)
		_node.SubcontractorVaCount = &value
	}
	if value, ok := pc.mutation.ContractSupplementaryCount(); ok {
		_spec.SetField(project.FieldContractSupplementaryCount, field.TypeInt, value)
		_node.ContractSupplementaryCount = &value
	}
	if value, ok := pc.mutation.RepairFee(); ok {
		_spec.SetField(project.FieldRepairFee, field.TypeFloat64, value)
		_node.RepairFee = &value
	}
	if value, ok := pc.mutation.UnitInventoryTotal(); ok {
		_spec.SetField(project.FieldUnitInventoryTotal, field.TypeFloat64, value)
		_node.UnitInventoryTotal = &value
	}
	if value, ok := pc.mutation.UnitComponentTotal(); ok {
		_spec.SetField(project.FieldUnitComponentTotal, field.TypeFloat64, value)
		_node.UnitComponentTotal = &value
	}
	if value, ok := pc.mutation.UnitComponentProduction(); ok {
		_spec.SetField(project.FieldUnitComponentProduction, field.TypeFloat64, value)
		_node.UnitComponentProduction = &value
	}
	if value, ok := pc.mutation.UnitComponentInstallation(); ok {
		_spec.SetField(project.FieldUnitComponentInstallation, field.TypeFloat64, value)
		_node.UnitComponentInstallation = &value
	}
	if value, ok := pc.mutation.BulkMaterialsTotalOrderQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsTotalOrderQuantity, field.TypeFloat64, value)
		_node.BulkMaterialsTotalOrderQuantity = &value
	}
	if value, ok := pc.mutation.BulkMaterialsCompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsCompletedQuantity, field.TypeFloat64, value)
		_node.BulkMaterialsCompletedQuantity = &value
	}
	if value, ok := pc.mutation.BulkMaterialsUncompletedQuantity(); ok {
		_spec.SetField(project.FieldBulkMaterialsUncompletedQuantity, field.TypeFloat64, value)
		_node.BulkMaterialsUncompletedQuantity = &value
	}
	if value, ok := pc.mutation.DiagramBdFinishCount(); ok {
		_spec.SetField(project.FieldDiagramBdFinishCount, field.TypeInt, value)
		_node.DiagramBdFinishCount = &value
	}
	if value, ok := pc.mutation.DiagramBdTotalCount(); ok {
		_spec.SetField(project.FieldDiagramBdTotalCount, field.TypeInt, value)
		_node.DiagramBdTotalCount = &value
	}
	if value, ok := pc.mutation.DiagramConstructionFinishCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionFinishCount, field.TypeInt, value)
		_node.DiagramConstructionFinishCount = &value
	}
	if value, ok := pc.mutation.DiagramConstructionTotalCount(); ok {
		_spec.SetField(project.FieldDiagramConstructionTotalCount, field.TypeInt, value)
		_node.DiagramConstructionTotalCount = &value
	}
	if value, ok := pc.mutation.DiagramProcessingFinishCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingFinishCount, field.TypeInt, value)
		_node.DiagramProcessingFinishCount = &value
	}
	if value, ok := pc.mutation.DiagramProcessingTotalCount(); ok {
		_spec.SetField(project.FieldDiagramProcessingTotalCount, field.TypeInt, value)
		_node.DiagramProcessingTotalCount = &value
	}
	if value, ok := pc.mutation.DiagramCApprovalRatioNumerator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioNumerator, field.TypeInt, value)
		_node.DiagramCApprovalRatioNumerator = &value
	}
	if value, ok := pc.mutation.DiagramCApprovalRatioDenominator(); ok {
		_spec.SetField(project.FieldDiagramCApprovalRatioDenominator, field.TypeInt, value)
		_node.DiagramCApprovalRatioDenominator = &value
	}
	if nodes := pc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.UsersTable,
			Columns: project.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsert) SetUpdatedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUpdatedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *ProjectUpsert) SetCode(v string) *ProjectUpsert {
	u.Set(project.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCode() *ProjectUpsert {
	u.SetExcluded(project.FieldCode)
	return u
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsert) SetIsFinished(v bool) *ProjectUpsert {
	u.Set(project.FieldIsFinished, v)
	return u
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateIsFinished() *ProjectUpsert {
	u.SetExcluded(project.FieldIsFinished)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (u *ProjectUpsert) SetRevenueKpi(v float64) *ProjectUpsert {
	u.Set(project.FieldRevenueKpi, v)
	return u
}

// UpdateRevenueKpi sets the "revenue_kpi" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateRevenueKpi() *ProjectUpsert {
	u.SetExcluded(project.FieldRevenueKpi)
	return u
}

// AddRevenueKpi adds v to the "revenue_kpi" field.
func (u *ProjectUpsert) AddRevenueKpi(v float64) *ProjectUpsert {
	u.Add(project.FieldRevenueKpi, v)
	return u
}

// ClearRevenueKpi clears the value of the "revenue_kpi" field.
func (u *ProjectUpsert) ClearRevenueKpi() *ProjectUpsert {
	u.SetNull(project.FieldRevenueKpi)
	return u
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (u *ProjectUpsert) SetRevenueCurrentYearCompleted(v float64) *ProjectUpsert {
	u.Set(project.FieldRevenueCurrentYearCompleted, v)
	return u
}

// UpdateRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateRevenueCurrentYearCompleted() *ProjectUpsert {
	u.SetExcluded(project.FieldRevenueCurrentYearCompleted)
	return u
}

// AddRevenueCurrentYearCompleted adds v to the "revenue_current_year_completed" field.
func (u *ProjectUpsert) AddRevenueCurrentYearCompleted(v float64) *ProjectUpsert {
	u.Add(project.FieldRevenueCurrentYearCompleted, v)
	return u
}

// ClearRevenueCurrentYearCompleted clears the value of the "revenue_current_year_completed" field.
func (u *ProjectUpsert) ClearRevenueCurrentYearCompleted() *ProjectUpsert {
	u.SetNull(project.FieldRevenueCurrentYearCompleted)
	return u
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (u *ProjectUpsert) SetRevenueAccumulatedCompleted(v float64) *ProjectUpsert {
	u.Set(project.FieldRevenueAccumulatedCompleted, v)
	return u
}

// UpdateRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateRevenueAccumulatedCompleted() *ProjectUpsert {
	u.SetExcluded(project.FieldRevenueAccumulatedCompleted)
	return u
}

// AddRevenueAccumulatedCompleted adds v to the "revenue_accumulated_completed" field.
func (u *ProjectUpsert) AddRevenueAccumulatedCompleted(v float64) *ProjectUpsert {
	u.Add(project.FieldRevenueAccumulatedCompleted, v)
	return u
}

// ClearRevenueAccumulatedCompleted clears the value of the "revenue_accumulated_completed" field.
func (u *ProjectUpsert) ClearRevenueAccumulatedCompleted() *ProjectUpsert {
	u.SetNull(project.FieldRevenueAccumulatedCompleted)
	return u
}

// SetPayDate sets the "pay_date" field.
func (u *ProjectUpsert) SetPayDate(v time.Time) *ProjectUpsert {
	u.Set(project.FieldPayDate, v)
	return u
}

// UpdatePayDate sets the "pay_date" field to the value that was provided on create.
func (u *ProjectUpsert) UpdatePayDate() *ProjectUpsert {
	u.SetExcluded(project.FieldPayDate)
	return u
}

// ClearPayDate clears the value of the "pay_date" field.
func (u *ProjectUpsert) ClearPayDate() *ProjectUpsert {
	u.SetNull(project.FieldPayDate)
	return u
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (u *ProjectUpsert) SetOwnerVoCount(v int) *ProjectUpsert {
	u.Set(project.FieldOwnerVoCount, v)
	return u
}

// UpdateOwnerVoCount sets the "owner_vo_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOwnerVoCount() *ProjectUpsert {
	u.SetExcluded(project.FieldOwnerVoCount)
	return u
}

// AddOwnerVoCount adds v to the "owner_vo_count" field.
func (u *ProjectUpsert) AddOwnerVoCount(v int) *ProjectUpsert {
	u.Add(project.FieldOwnerVoCount, v)
	return u
}

// ClearOwnerVoCount clears the value of the "owner_vo_count" field.
func (u *ProjectUpsert) ClearOwnerVoCount() *ProjectUpsert {
	u.SetNull(project.FieldOwnerVoCount)
	return u
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (u *ProjectUpsert) SetContractorVoCount(v int) *ProjectUpsert {
	u.Set(project.FieldContractorVoCount, v)
	return u
}

// UpdateContractorVoCount sets the "contractor_vo_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractorVoCount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractorVoCount)
	return u
}

// AddContractorVoCount adds v to the "contractor_vo_count" field.
func (u *ProjectUpsert) AddContractorVoCount(v int) *ProjectUpsert {
	u.Add(project.FieldContractorVoCount, v)
	return u
}

// ClearContractorVoCount clears the value of the "contractor_vo_count" field.
func (u *ProjectUpsert) ClearContractorVoCount() *ProjectUpsert {
	u.SetNull(project.FieldContractorVoCount)
	return u
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (u *ProjectUpsert) SetAccumulateDeduction(v float64) *ProjectUpsert {
	u.Set(project.FieldAccumulateDeduction, v)
	return u
}

// UpdateAccumulateDeduction sets the "accumulate_deduction" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateAccumulateDeduction() *ProjectUpsert {
	u.SetExcluded(project.FieldAccumulateDeduction)
	return u
}

// AddAccumulateDeduction adds v to the "accumulate_deduction" field.
func (u *ProjectUpsert) AddAccumulateDeduction(v float64) *ProjectUpsert {
	u.Add(project.FieldAccumulateDeduction, v)
	return u
}

// ClearAccumulateDeduction clears the value of the "accumulate_deduction" field.
func (u *ProjectUpsert) ClearAccumulateDeduction() *ProjectUpsert {
	u.SetNull(project.FieldAccumulateDeduction)
	return u
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (u *ProjectUpsert) SetSubcontractorVaCount(v int) *ProjectUpsert {
	u.Set(project.FieldSubcontractorVaCount, v)
	return u
}

// UpdateSubcontractorVaCount sets the "subcontractor_va_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateSubcontractorVaCount() *ProjectUpsert {
	u.SetExcluded(project.FieldSubcontractorVaCount)
	return u
}

// AddSubcontractorVaCount adds v to the "subcontractor_va_count" field.
func (u *ProjectUpsert) AddSubcontractorVaCount(v int) *ProjectUpsert {
	u.Add(project.FieldSubcontractorVaCount, v)
	return u
}

// ClearSubcontractorVaCount clears the value of the "subcontractor_va_count" field.
func (u *ProjectUpsert) ClearSubcontractorVaCount() *ProjectUpsert {
	u.SetNull(project.FieldSubcontractorVaCount)
	return u
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (u *ProjectUpsert) SetContractSupplementaryCount(v int) *ProjectUpsert {
	u.Set(project.FieldContractSupplementaryCount, v)
	return u
}

// UpdateContractSupplementaryCount sets the "contract_supplementary_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateContractSupplementaryCount() *ProjectUpsert {
	u.SetExcluded(project.FieldContractSupplementaryCount)
	return u
}

// AddContractSupplementaryCount adds v to the "contract_supplementary_count" field.
func (u *ProjectUpsert) AddContractSupplementaryCount(v int) *ProjectUpsert {
	u.Add(project.FieldContractSupplementaryCount, v)
	return u
}

// ClearContractSupplementaryCount clears the value of the "contract_supplementary_count" field.
func (u *ProjectUpsert) ClearContractSupplementaryCount() *ProjectUpsert {
	u.SetNull(project.FieldContractSupplementaryCount)
	return u
}

// SetRepairFee sets the "repair_fee" field.
func (u *ProjectUpsert) SetRepairFee(v float64) *ProjectUpsert {
	u.Set(project.FieldRepairFee, v)
	return u
}

// UpdateRepairFee sets the "repair_fee" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateRepairFee() *ProjectUpsert {
	u.SetExcluded(project.FieldRepairFee)
	return u
}

// AddRepairFee adds v to the "repair_fee" field.
func (u *ProjectUpsert) AddRepairFee(v float64) *ProjectUpsert {
	u.Add(project.FieldRepairFee, v)
	return u
}

// ClearRepairFee clears the value of the "repair_fee" field.
func (u *ProjectUpsert) ClearRepairFee() *ProjectUpsert {
	u.SetNull(project.FieldRepairFee)
	return u
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (u *ProjectUpsert) SetUnitInventoryTotal(v float64) *ProjectUpsert {
	u.Set(project.FieldUnitInventoryTotal, v)
	return u
}

// UpdateUnitInventoryTotal sets the "unit_inventory_total" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUnitInventoryTotal() *ProjectUpsert {
	u.SetExcluded(project.FieldUnitInventoryTotal)
	return u
}

// AddUnitInventoryTotal adds v to the "unit_inventory_total" field.
func (u *ProjectUpsert) AddUnitInventoryTotal(v float64) *ProjectUpsert {
	u.Add(project.FieldUnitInventoryTotal, v)
	return u
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (u *ProjectUpsert) ClearUnitInventoryTotal() *ProjectUpsert {
	u.SetNull(project.FieldUnitInventoryTotal)
	return u
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (u *ProjectUpsert) SetUnitComponentTotal(v float64) *ProjectUpsert {
	u.Set(project.FieldUnitComponentTotal, v)
	return u
}

// UpdateUnitComponentTotal sets the "unit_component_total" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUnitComponentTotal() *ProjectUpsert {
	u.SetExcluded(project.FieldUnitComponentTotal)
	return u
}

// AddUnitComponentTotal adds v to the "unit_component_total" field.
func (u *ProjectUpsert) AddUnitComponentTotal(v float64) *ProjectUpsert {
	u.Add(project.FieldUnitComponentTotal, v)
	return u
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (u *ProjectUpsert) ClearUnitComponentTotal() *ProjectUpsert {
	u.SetNull(project.FieldUnitComponentTotal)
	return u
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (u *ProjectUpsert) SetUnitComponentProduction(v float64) *ProjectUpsert {
	u.Set(project.FieldUnitComponentProduction, v)
	return u
}

// UpdateUnitComponentProduction sets the "unit_component_production" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUnitComponentProduction() *ProjectUpsert {
	u.SetExcluded(project.FieldUnitComponentProduction)
	return u
}

// AddUnitComponentProduction adds v to the "unit_component_production" field.
func (u *ProjectUpsert) AddUnitComponentProduction(v float64) *ProjectUpsert {
	u.Add(project.FieldUnitComponentProduction, v)
	return u
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (u *ProjectUpsert) ClearUnitComponentProduction() *ProjectUpsert {
	u.SetNull(project.FieldUnitComponentProduction)
	return u
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (u *ProjectUpsert) SetUnitComponentInstallation(v float64) *ProjectUpsert {
	u.Set(project.FieldUnitComponentInstallation, v)
	return u
}

// UpdateUnitComponentInstallation sets the "unit_component_installation" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUnitComponentInstallation() *ProjectUpsert {
	u.SetExcluded(project.FieldUnitComponentInstallation)
	return u
}

// AddUnitComponentInstallation adds v to the "unit_component_installation" field.
func (u *ProjectUpsert) AddUnitComponentInstallation(v float64) *ProjectUpsert {
	u.Add(project.FieldUnitComponentInstallation, v)
	return u
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (u *ProjectUpsert) ClearUnitComponentInstallation() *ProjectUpsert {
	u.SetNull(project.FieldUnitComponentInstallation)
	return u
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsert) SetBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsert {
	u.Set(project.FieldBulkMaterialsTotalOrderQuantity, v)
	return u
}

// UpdateBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateBulkMaterialsTotalOrderQuantity() *ProjectUpsert {
	u.SetExcluded(project.FieldBulkMaterialsTotalOrderQuantity)
	return u
}

// AddBulkMaterialsTotalOrderQuantity adds v to the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsert) AddBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsert {
	u.Add(project.FieldBulkMaterialsTotalOrderQuantity, v)
	return u
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsert) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpsert {
	u.SetNull(project.FieldBulkMaterialsTotalOrderQuantity)
	return u
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsert) SetBulkMaterialsCompletedQuantity(v float64) *ProjectUpsert {
	u.Set(project.FieldBulkMaterialsCompletedQuantity, v)
	return u
}

// UpdateBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateBulkMaterialsCompletedQuantity() *ProjectUpsert {
	u.SetExcluded(project.FieldBulkMaterialsCompletedQuantity)
	return u
}

// AddBulkMaterialsCompletedQuantity adds v to the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsert) AddBulkMaterialsCompletedQuantity(v float64) *ProjectUpsert {
	u.Add(project.FieldBulkMaterialsCompletedQuantity, v)
	return u
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsert) ClearBulkMaterialsCompletedQuantity() *ProjectUpsert {
	u.SetNull(project.FieldBulkMaterialsCompletedQuantity)
	return u
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsert) SetBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsert {
	u.Set(project.FieldBulkMaterialsUncompletedQuantity, v)
	return u
}

// UpdateBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateBulkMaterialsUncompletedQuantity() *ProjectUpsert {
	u.SetExcluded(project.FieldBulkMaterialsUncompletedQuantity)
	return u
}

// AddBulkMaterialsUncompletedQuantity adds v to the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsert) AddBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsert {
	u.Add(project.FieldBulkMaterialsUncompletedQuantity, v)
	return u
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsert) ClearBulkMaterialsUncompletedQuantity() *ProjectUpsert {
	u.SetNull(project.FieldBulkMaterialsUncompletedQuantity)
	return u
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (u *ProjectUpsert) SetDiagramBdFinishCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramBdFinishCount, v)
	return u
}

// UpdateDiagramBdFinishCount sets the "diagram_bd_finish_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramBdFinishCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramBdFinishCount)
	return u
}

// AddDiagramBdFinishCount adds v to the "diagram_bd_finish_count" field.
func (u *ProjectUpsert) AddDiagramBdFinishCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramBdFinishCount, v)
	return u
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (u *ProjectUpsert) ClearDiagramBdFinishCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramBdFinishCount)
	return u
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (u *ProjectUpsert) SetDiagramBdTotalCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramBdTotalCount, v)
	return u
}

// UpdateDiagramBdTotalCount sets the "diagram_bd_total_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramBdTotalCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramBdTotalCount)
	return u
}

// AddDiagramBdTotalCount adds v to the "diagram_bd_total_count" field.
func (u *ProjectUpsert) AddDiagramBdTotalCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramBdTotalCount, v)
	return u
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (u *ProjectUpsert) ClearDiagramBdTotalCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramBdTotalCount)
	return u
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (u *ProjectUpsert) SetDiagramConstructionFinishCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramConstructionFinishCount, v)
	return u
}

// UpdateDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramConstructionFinishCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramConstructionFinishCount)
	return u
}

// AddDiagramConstructionFinishCount adds v to the "diagram_construction_finish_count" field.
func (u *ProjectUpsert) AddDiagramConstructionFinishCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramConstructionFinishCount, v)
	return u
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (u *ProjectUpsert) ClearDiagramConstructionFinishCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramConstructionFinishCount)
	return u
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (u *ProjectUpsert) SetDiagramConstructionTotalCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramConstructionTotalCount, v)
	return u
}

// UpdateDiagramConstructionTotalCount sets the "diagram_construction_total_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramConstructionTotalCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramConstructionTotalCount)
	return u
}

// AddDiagramConstructionTotalCount adds v to the "diagram_construction_total_count" field.
func (u *ProjectUpsert) AddDiagramConstructionTotalCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramConstructionTotalCount, v)
	return u
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (u *ProjectUpsert) ClearDiagramConstructionTotalCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramConstructionTotalCount)
	return u
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (u *ProjectUpsert) SetDiagramProcessingFinishCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramProcessingFinishCount, v)
	return u
}

// UpdateDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramProcessingFinishCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramProcessingFinishCount)
	return u
}

// AddDiagramProcessingFinishCount adds v to the "diagram_processing_finish_count" field.
func (u *ProjectUpsert) AddDiagramProcessingFinishCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramProcessingFinishCount, v)
	return u
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (u *ProjectUpsert) ClearDiagramProcessingFinishCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramProcessingFinishCount)
	return u
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (u *ProjectUpsert) SetDiagramProcessingTotalCount(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramProcessingTotalCount, v)
	return u
}

// UpdateDiagramProcessingTotalCount sets the "diagram_processing_total_count" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramProcessingTotalCount() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramProcessingTotalCount)
	return u
}

// AddDiagramProcessingTotalCount adds v to the "diagram_processing_total_count" field.
func (u *ProjectUpsert) AddDiagramProcessingTotalCount(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramProcessingTotalCount, v)
	return u
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (u *ProjectUpsert) ClearDiagramProcessingTotalCount() *ProjectUpsert {
	u.SetNull(project.FieldDiagramProcessingTotalCount)
	return u
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsert) SetDiagramCApprovalRatioNumerator(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramCApprovalRatioNumerator, v)
	return u
}

// UpdateDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramCApprovalRatioNumerator() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramCApprovalRatioNumerator)
	return u
}

// AddDiagramCApprovalRatioNumerator adds v to the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsert) AddDiagramCApprovalRatioNumerator(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramCApprovalRatioNumerator, v)
	return u
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsert) ClearDiagramCApprovalRatioNumerator() *ProjectUpsert {
	u.SetNull(project.FieldDiagramCApprovalRatioNumerator)
	return u
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsert) SetDiagramCApprovalRatioDenominator(v int) *ProjectUpsert {
	u.Set(project.FieldDiagramCApprovalRatioDenominator, v)
	return u
}

// UpdateDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDiagramCApprovalRatioDenominator() *ProjectUpsert {
	u.SetExcluded(project.FieldDiagramCApprovalRatioDenominator)
	return u
}

// AddDiagramCApprovalRatioDenominator adds v to the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsert) AddDiagramCApprovalRatioDenominator(v int) *ProjectUpsert {
	u.Add(project.FieldDiagramCApprovalRatioDenominator, v)
	return u
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsert) ClearDiagramCApprovalRatioDenominator() *ProjectUpsert {
	u.SetNull(project.FieldDiagramCApprovalRatioDenominator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(project.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(project.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertOne) SetUpdatedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUpdatedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *ProjectUpsertOne) SetCode(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCode() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCode()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsertOne) SetIsFinished(v bool) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateIsFinished() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFinished()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (u *ProjectUpsertOne) SetRevenueKpi(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueKpi(v)
	})
}

// AddRevenueKpi adds v to the "revenue_kpi" field.
func (u *ProjectUpsertOne) AddRevenueKpi(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueKpi(v)
	})
}

// UpdateRevenueKpi sets the "revenue_kpi" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateRevenueKpi() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueKpi()
	})
}

// ClearRevenueKpi clears the value of the "revenue_kpi" field.
func (u *ProjectUpsertOne) ClearRevenueKpi() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueKpi()
	})
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (u *ProjectUpsertOne) SetRevenueCurrentYearCompleted(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueCurrentYearCompleted(v)
	})
}

// AddRevenueCurrentYearCompleted adds v to the "revenue_current_year_completed" field.
func (u *ProjectUpsertOne) AddRevenueCurrentYearCompleted(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueCurrentYearCompleted(v)
	})
}

// UpdateRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateRevenueCurrentYearCompleted() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueCurrentYearCompleted()
	})
}

// ClearRevenueCurrentYearCompleted clears the value of the "revenue_current_year_completed" field.
func (u *ProjectUpsertOne) ClearRevenueCurrentYearCompleted() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueCurrentYearCompleted()
	})
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (u *ProjectUpsertOne) SetRevenueAccumulatedCompleted(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueAccumulatedCompleted(v)
	})
}

// AddRevenueAccumulatedCompleted adds v to the "revenue_accumulated_completed" field.
func (u *ProjectUpsertOne) AddRevenueAccumulatedCompleted(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueAccumulatedCompleted(v)
	})
}

// UpdateRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateRevenueAccumulatedCompleted() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueAccumulatedCompleted()
	})
}

// ClearRevenueAccumulatedCompleted clears the value of the "revenue_accumulated_completed" field.
func (u *ProjectUpsertOne) ClearRevenueAccumulatedCompleted() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueAccumulatedCompleted()
	})
}

// SetPayDate sets the "pay_date" field.
func (u *ProjectUpsertOne) SetPayDate(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPayDate(v)
	})
}

// UpdatePayDate sets the "pay_date" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdatePayDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePayDate()
	})
}

// ClearPayDate clears the value of the "pay_date" field.
func (u *ProjectUpsertOne) ClearPayDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearPayDate()
	})
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (u *ProjectUpsertOne) SetOwnerVoCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerVoCount(v)
	})
}

// AddOwnerVoCount adds v to the "owner_vo_count" field.
func (u *ProjectUpsertOne) AddOwnerVoCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerVoCount(v)
	})
}

// UpdateOwnerVoCount sets the "owner_vo_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOwnerVoCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerVoCount()
	})
}

// ClearOwnerVoCount clears the value of the "owner_vo_count" field.
func (u *ProjectUpsertOne) ClearOwnerVoCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerVoCount()
	})
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (u *ProjectUpsertOne) SetContractorVoCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorVoCount(v)
	})
}

// AddContractorVoCount adds v to the "contractor_vo_count" field.
func (u *ProjectUpsertOne) AddContractorVoCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorVoCount(v)
	})
}

// UpdateContractorVoCount sets the "contractor_vo_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractorVoCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorVoCount()
	})
}

// ClearContractorVoCount clears the value of the "contractor_vo_count" field.
func (u *ProjectUpsertOne) ClearContractorVoCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorVoCount()
	})
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (u *ProjectUpsertOne) SetAccumulateDeduction(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAccumulateDeduction(v)
	})
}

// AddAccumulateDeduction adds v to the "accumulate_deduction" field.
func (u *ProjectUpsertOne) AddAccumulateDeduction(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddAccumulateDeduction(v)
	})
}

// UpdateAccumulateDeduction sets the "accumulate_deduction" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateAccumulateDeduction() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAccumulateDeduction()
	})
}

// ClearAccumulateDeduction clears the value of the "accumulate_deduction" field.
func (u *ProjectUpsertOne) ClearAccumulateDeduction() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearAccumulateDeduction()
	})
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (u *ProjectUpsertOne) SetSubcontractorVaCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSubcontractorVaCount(v)
	})
}

// AddSubcontractorVaCount adds v to the "subcontractor_va_count" field.
func (u *ProjectUpsertOne) AddSubcontractorVaCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddSubcontractorVaCount(v)
	})
}

// UpdateSubcontractorVaCount sets the "subcontractor_va_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateSubcontractorVaCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSubcontractorVaCount()
	})
}

// ClearSubcontractorVaCount clears the value of the "subcontractor_va_count" field.
func (u *ProjectUpsertOne) ClearSubcontractorVaCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearSubcontractorVaCount()
	})
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (u *ProjectUpsertOne) SetContractSupplementaryCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractSupplementaryCount(v)
	})
}

// AddContractSupplementaryCount adds v to the "contract_supplementary_count" field.
func (u *ProjectUpsertOne) AddContractSupplementaryCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractSupplementaryCount(v)
	})
}

// UpdateContractSupplementaryCount sets the "contract_supplementary_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateContractSupplementaryCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractSupplementaryCount()
	})
}

// ClearContractSupplementaryCount clears the value of the "contract_supplementary_count" field.
func (u *ProjectUpsertOne) ClearContractSupplementaryCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractSupplementaryCount()
	})
}

// SetRepairFee sets the "repair_fee" field.
func (u *ProjectUpsertOne) SetRepairFee(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRepairFee(v)
	})
}

// AddRepairFee adds v to the "repair_fee" field.
func (u *ProjectUpsertOne) AddRepairFee(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRepairFee(v)
	})
}

// UpdateRepairFee sets the "repair_fee" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateRepairFee() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRepairFee()
	})
}

// ClearRepairFee clears the value of the "repair_fee" field.
func (u *ProjectUpsertOne) ClearRepairFee() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRepairFee()
	})
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (u *ProjectUpsertOne) SetUnitInventoryTotal(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitInventoryTotal(v)
	})
}

// AddUnitInventoryTotal adds v to the "unit_inventory_total" field.
func (u *ProjectUpsertOne) AddUnitInventoryTotal(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitInventoryTotal(v)
	})
}

// UpdateUnitInventoryTotal sets the "unit_inventory_total" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUnitInventoryTotal() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitInventoryTotal()
	})
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (u *ProjectUpsertOne) ClearUnitInventoryTotal() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitInventoryTotal()
	})
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (u *ProjectUpsertOne) SetUnitComponentTotal(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentTotal(v)
	})
}

// AddUnitComponentTotal adds v to the "unit_component_total" field.
func (u *ProjectUpsertOne) AddUnitComponentTotal(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentTotal(v)
	})
}

// UpdateUnitComponentTotal sets the "unit_component_total" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUnitComponentTotal() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentTotal()
	})
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (u *ProjectUpsertOne) ClearUnitComponentTotal() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentTotal()
	})
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (u *ProjectUpsertOne) SetUnitComponentProduction(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentProduction(v)
	})
}

// AddUnitComponentProduction adds v to the "unit_component_production" field.
func (u *ProjectUpsertOne) AddUnitComponentProduction(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentProduction(v)
	})
}

// UpdateUnitComponentProduction sets the "unit_component_production" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUnitComponentProduction() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentProduction()
	})
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (u *ProjectUpsertOne) ClearUnitComponentProduction() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentProduction()
	})
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (u *ProjectUpsertOne) SetUnitComponentInstallation(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentInstallation(v)
	})
}

// AddUnitComponentInstallation adds v to the "unit_component_installation" field.
func (u *ProjectUpsertOne) AddUnitComponentInstallation(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentInstallation(v)
	})
}

// UpdateUnitComponentInstallation sets the "unit_component_installation" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUnitComponentInstallation() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentInstallation()
	})
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (u *ProjectUpsertOne) ClearUnitComponentInstallation() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentInstallation()
	})
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertOne) SetBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsTotalOrderQuantity(v)
	})
}

// AddBulkMaterialsTotalOrderQuantity adds v to the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertOne) AddBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsTotalOrderQuantity(v)
	})
}

// UpdateBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateBulkMaterialsTotalOrderQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsTotalOrderQuantity()
	})
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertOne) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsTotalOrderQuantity()
	})
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertOne) SetBulkMaterialsCompletedQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsCompletedQuantity(v)
	})
}

// AddBulkMaterialsCompletedQuantity adds v to the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertOne) AddBulkMaterialsCompletedQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsCompletedQuantity(v)
	})
}

// UpdateBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateBulkMaterialsCompletedQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsCompletedQuantity()
	})
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertOne) ClearBulkMaterialsCompletedQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsCompletedQuantity()
	})
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertOne) SetBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsUncompletedQuantity(v)
	})
}

// AddBulkMaterialsUncompletedQuantity adds v to the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertOne) AddBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsUncompletedQuantity(v)
	})
}

// UpdateBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateBulkMaterialsUncompletedQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsUncompletedQuantity()
	})
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertOne) ClearBulkMaterialsUncompletedQuantity() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsUncompletedQuantity()
	})
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (u *ProjectUpsertOne) SetDiagramBdFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramBdFinishCount(v)
	})
}

// AddDiagramBdFinishCount adds v to the "diagram_bd_finish_count" field.
func (u *ProjectUpsertOne) AddDiagramBdFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramBdFinishCount(v)
	})
}

// UpdateDiagramBdFinishCount sets the "diagram_bd_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramBdFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramBdFinishCount()
	})
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (u *ProjectUpsertOne) ClearDiagramBdFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramBdFinishCount()
	})
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (u *ProjectUpsertOne) SetDiagramBdTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramBdTotalCount(v)
	})
}

// AddDiagramBdTotalCount adds v to the "diagram_bd_total_count" field.
func (u *ProjectUpsertOne) AddDiagramBdTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramBdTotalCount(v)
	})
}

// UpdateDiagramBdTotalCount sets the "diagram_bd_total_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramBdTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramBdTotalCount()
	})
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (u *ProjectUpsertOne) ClearDiagramBdTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramBdTotalCount()
	})
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (u *ProjectUpsertOne) SetDiagramConstructionFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramConstructionFinishCount(v)
	})
}

// AddDiagramConstructionFinishCount adds v to the "diagram_construction_finish_count" field.
func (u *ProjectUpsertOne) AddDiagramConstructionFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramConstructionFinishCount(v)
	})
}

// UpdateDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramConstructionFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramConstructionFinishCount()
	})
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (u *ProjectUpsertOne) ClearDiagramConstructionFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramConstructionFinishCount()
	})
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (u *ProjectUpsertOne) SetDiagramConstructionTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramConstructionTotalCount(v)
	})
}

// AddDiagramConstructionTotalCount adds v to the "diagram_construction_total_count" field.
func (u *ProjectUpsertOne) AddDiagramConstructionTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramConstructionTotalCount(v)
	})
}

// UpdateDiagramConstructionTotalCount sets the "diagram_construction_total_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramConstructionTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramConstructionTotalCount()
	})
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (u *ProjectUpsertOne) ClearDiagramConstructionTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramConstructionTotalCount()
	})
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (u *ProjectUpsertOne) SetDiagramProcessingFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramProcessingFinishCount(v)
	})
}

// AddDiagramProcessingFinishCount adds v to the "diagram_processing_finish_count" field.
func (u *ProjectUpsertOne) AddDiagramProcessingFinishCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramProcessingFinishCount(v)
	})
}

// UpdateDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramProcessingFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramProcessingFinishCount()
	})
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (u *ProjectUpsertOne) ClearDiagramProcessingFinishCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramProcessingFinishCount()
	})
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (u *ProjectUpsertOne) SetDiagramProcessingTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramProcessingTotalCount(v)
	})
}

// AddDiagramProcessingTotalCount adds v to the "diagram_processing_total_count" field.
func (u *ProjectUpsertOne) AddDiagramProcessingTotalCount(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramProcessingTotalCount(v)
	})
}

// UpdateDiagramProcessingTotalCount sets the "diagram_processing_total_count" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramProcessingTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramProcessingTotalCount()
	})
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (u *ProjectUpsertOne) ClearDiagramProcessingTotalCount() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramProcessingTotalCount()
	})
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertOne) SetDiagramCApprovalRatioNumerator(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramCApprovalRatioNumerator(v)
	})
}

// AddDiagramCApprovalRatioNumerator adds v to the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertOne) AddDiagramCApprovalRatioNumerator(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramCApprovalRatioNumerator(v)
	})
}

// UpdateDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramCApprovalRatioNumerator() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramCApprovalRatioNumerator()
	})
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertOne) ClearDiagramCApprovalRatioNumerator() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramCApprovalRatioNumerator()
	})
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertOne) SetDiagramCApprovalRatioDenominator(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramCApprovalRatioDenominator(v)
	})
}

// AddDiagramCApprovalRatioDenominator adds v to the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertOne) AddDiagramCApprovalRatioDenominator(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramCApprovalRatioDenominator(v)
	})
}

// UpdateDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDiagramCApprovalRatioDenominator() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramCApprovalRatioDenominator()
	})
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertOne) ClearDiagramCApprovalRatioDenominator() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramCApprovalRatioDenominator()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectUpsertOne.ID is not supported by MySQL driver. Use ProjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(project.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(project.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertBulk) SetUpdatedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUpdatedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *ProjectUpsertBulk) SetCode(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCode() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCode()
	})
}

// SetIsFinished sets the "is_finished" field.
func (u *ProjectUpsertBulk) SetIsFinished(v bool) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFinished(v)
	})
}

// UpdateIsFinished sets the "is_finished" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateIsFinished() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFinished()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetRevenueKpi sets the "revenue_kpi" field.
func (u *ProjectUpsertBulk) SetRevenueKpi(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueKpi(v)
	})
}

// AddRevenueKpi adds v to the "revenue_kpi" field.
func (u *ProjectUpsertBulk) AddRevenueKpi(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueKpi(v)
	})
}

// UpdateRevenueKpi sets the "revenue_kpi" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateRevenueKpi() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueKpi()
	})
}

// ClearRevenueKpi clears the value of the "revenue_kpi" field.
func (u *ProjectUpsertBulk) ClearRevenueKpi() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueKpi()
	})
}

// SetRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field.
func (u *ProjectUpsertBulk) SetRevenueCurrentYearCompleted(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueCurrentYearCompleted(v)
	})
}

// AddRevenueCurrentYearCompleted adds v to the "revenue_current_year_completed" field.
func (u *ProjectUpsertBulk) AddRevenueCurrentYearCompleted(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueCurrentYearCompleted(v)
	})
}

// UpdateRevenueCurrentYearCompleted sets the "revenue_current_year_completed" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateRevenueCurrentYearCompleted() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueCurrentYearCompleted()
	})
}

// ClearRevenueCurrentYearCompleted clears the value of the "revenue_current_year_completed" field.
func (u *ProjectUpsertBulk) ClearRevenueCurrentYearCompleted() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueCurrentYearCompleted()
	})
}

// SetRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field.
func (u *ProjectUpsertBulk) SetRevenueAccumulatedCompleted(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRevenueAccumulatedCompleted(v)
	})
}

// AddRevenueAccumulatedCompleted adds v to the "revenue_accumulated_completed" field.
func (u *ProjectUpsertBulk) AddRevenueAccumulatedCompleted(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRevenueAccumulatedCompleted(v)
	})
}

// UpdateRevenueAccumulatedCompleted sets the "revenue_accumulated_completed" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateRevenueAccumulatedCompleted() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRevenueAccumulatedCompleted()
	})
}

// ClearRevenueAccumulatedCompleted clears the value of the "revenue_accumulated_completed" field.
func (u *ProjectUpsertBulk) ClearRevenueAccumulatedCompleted() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRevenueAccumulatedCompleted()
	})
}

// SetPayDate sets the "pay_date" field.
func (u *ProjectUpsertBulk) SetPayDate(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPayDate(v)
	})
}

// UpdatePayDate sets the "pay_date" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdatePayDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePayDate()
	})
}

// ClearPayDate clears the value of the "pay_date" field.
func (u *ProjectUpsertBulk) ClearPayDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearPayDate()
	})
}

// SetOwnerVoCount sets the "owner_vo_count" field.
func (u *ProjectUpsertBulk) SetOwnerVoCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOwnerVoCount(v)
	})
}

// AddOwnerVoCount adds v to the "owner_vo_count" field.
func (u *ProjectUpsertBulk) AddOwnerVoCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddOwnerVoCount(v)
	})
}

// UpdateOwnerVoCount sets the "owner_vo_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOwnerVoCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOwnerVoCount()
	})
}

// ClearOwnerVoCount clears the value of the "owner_vo_count" field.
func (u *ProjectUpsertBulk) ClearOwnerVoCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOwnerVoCount()
	})
}

// SetContractorVoCount sets the "contractor_vo_count" field.
func (u *ProjectUpsertBulk) SetContractorVoCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractorVoCount(v)
	})
}

// AddContractorVoCount adds v to the "contractor_vo_count" field.
func (u *ProjectUpsertBulk) AddContractorVoCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractorVoCount(v)
	})
}

// UpdateContractorVoCount sets the "contractor_vo_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractorVoCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractorVoCount()
	})
}

// ClearContractorVoCount clears the value of the "contractor_vo_count" field.
func (u *ProjectUpsertBulk) ClearContractorVoCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractorVoCount()
	})
}

// SetAccumulateDeduction sets the "accumulate_deduction" field.
func (u *ProjectUpsertBulk) SetAccumulateDeduction(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAccumulateDeduction(v)
	})
}

// AddAccumulateDeduction adds v to the "accumulate_deduction" field.
func (u *ProjectUpsertBulk) AddAccumulateDeduction(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddAccumulateDeduction(v)
	})
}

// UpdateAccumulateDeduction sets the "accumulate_deduction" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateAccumulateDeduction() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAccumulateDeduction()
	})
}

// ClearAccumulateDeduction clears the value of the "accumulate_deduction" field.
func (u *ProjectUpsertBulk) ClearAccumulateDeduction() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearAccumulateDeduction()
	})
}

// SetSubcontractorVaCount sets the "subcontractor_va_count" field.
func (u *ProjectUpsertBulk) SetSubcontractorVaCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSubcontractorVaCount(v)
	})
}

// AddSubcontractorVaCount adds v to the "subcontractor_va_count" field.
func (u *ProjectUpsertBulk) AddSubcontractorVaCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddSubcontractorVaCount(v)
	})
}

// UpdateSubcontractorVaCount sets the "subcontractor_va_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateSubcontractorVaCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSubcontractorVaCount()
	})
}

// ClearSubcontractorVaCount clears the value of the "subcontractor_va_count" field.
func (u *ProjectUpsertBulk) ClearSubcontractorVaCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearSubcontractorVaCount()
	})
}

// SetContractSupplementaryCount sets the "contract_supplementary_count" field.
func (u *ProjectUpsertBulk) SetContractSupplementaryCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetContractSupplementaryCount(v)
	})
}

// AddContractSupplementaryCount adds v to the "contract_supplementary_count" field.
func (u *ProjectUpsertBulk) AddContractSupplementaryCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddContractSupplementaryCount(v)
	})
}

// UpdateContractSupplementaryCount sets the "contract_supplementary_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateContractSupplementaryCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateContractSupplementaryCount()
	})
}

// ClearContractSupplementaryCount clears the value of the "contract_supplementary_count" field.
func (u *ProjectUpsertBulk) ClearContractSupplementaryCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearContractSupplementaryCount()
	})
}

// SetRepairFee sets the "repair_fee" field.
func (u *ProjectUpsertBulk) SetRepairFee(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRepairFee(v)
	})
}

// AddRepairFee adds v to the "repair_fee" field.
func (u *ProjectUpsertBulk) AddRepairFee(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddRepairFee(v)
	})
}

// UpdateRepairFee sets the "repair_fee" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateRepairFee() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRepairFee()
	})
}

// ClearRepairFee clears the value of the "repair_fee" field.
func (u *ProjectUpsertBulk) ClearRepairFee() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRepairFee()
	})
}

// SetUnitInventoryTotal sets the "unit_inventory_total" field.
func (u *ProjectUpsertBulk) SetUnitInventoryTotal(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitInventoryTotal(v)
	})
}

// AddUnitInventoryTotal adds v to the "unit_inventory_total" field.
func (u *ProjectUpsertBulk) AddUnitInventoryTotal(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitInventoryTotal(v)
	})
}

// UpdateUnitInventoryTotal sets the "unit_inventory_total" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUnitInventoryTotal() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitInventoryTotal()
	})
}

// ClearUnitInventoryTotal clears the value of the "unit_inventory_total" field.
func (u *ProjectUpsertBulk) ClearUnitInventoryTotal() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitInventoryTotal()
	})
}

// SetUnitComponentTotal sets the "unit_component_total" field.
func (u *ProjectUpsertBulk) SetUnitComponentTotal(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentTotal(v)
	})
}

// AddUnitComponentTotal adds v to the "unit_component_total" field.
func (u *ProjectUpsertBulk) AddUnitComponentTotal(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentTotal(v)
	})
}

// UpdateUnitComponentTotal sets the "unit_component_total" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUnitComponentTotal() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentTotal()
	})
}

// ClearUnitComponentTotal clears the value of the "unit_component_total" field.
func (u *ProjectUpsertBulk) ClearUnitComponentTotal() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentTotal()
	})
}

// SetUnitComponentProduction sets the "unit_component_production" field.
func (u *ProjectUpsertBulk) SetUnitComponentProduction(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentProduction(v)
	})
}

// AddUnitComponentProduction adds v to the "unit_component_production" field.
func (u *ProjectUpsertBulk) AddUnitComponentProduction(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentProduction(v)
	})
}

// UpdateUnitComponentProduction sets the "unit_component_production" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUnitComponentProduction() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentProduction()
	})
}

// ClearUnitComponentProduction clears the value of the "unit_component_production" field.
func (u *ProjectUpsertBulk) ClearUnitComponentProduction() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentProduction()
	})
}

// SetUnitComponentInstallation sets the "unit_component_installation" field.
func (u *ProjectUpsertBulk) SetUnitComponentInstallation(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUnitComponentInstallation(v)
	})
}

// AddUnitComponentInstallation adds v to the "unit_component_installation" field.
func (u *ProjectUpsertBulk) AddUnitComponentInstallation(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddUnitComponentInstallation(v)
	})
}

// UpdateUnitComponentInstallation sets the "unit_component_installation" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUnitComponentInstallation() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUnitComponentInstallation()
	})
}

// ClearUnitComponentInstallation clears the value of the "unit_component_installation" field.
func (u *ProjectUpsertBulk) ClearUnitComponentInstallation() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearUnitComponentInstallation()
	})
}

// SetBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertBulk) SetBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsTotalOrderQuantity(v)
	})
}

// AddBulkMaterialsTotalOrderQuantity adds v to the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertBulk) AddBulkMaterialsTotalOrderQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsTotalOrderQuantity(v)
	})
}

// UpdateBulkMaterialsTotalOrderQuantity sets the "bulk_materials_total_order_quantity" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateBulkMaterialsTotalOrderQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsTotalOrderQuantity()
	})
}

// ClearBulkMaterialsTotalOrderQuantity clears the value of the "bulk_materials_total_order_quantity" field.
func (u *ProjectUpsertBulk) ClearBulkMaterialsTotalOrderQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsTotalOrderQuantity()
	})
}

// SetBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertBulk) SetBulkMaterialsCompletedQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsCompletedQuantity(v)
	})
}

// AddBulkMaterialsCompletedQuantity adds v to the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertBulk) AddBulkMaterialsCompletedQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsCompletedQuantity(v)
	})
}

// UpdateBulkMaterialsCompletedQuantity sets the "bulk_materials_completed_quantity" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateBulkMaterialsCompletedQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsCompletedQuantity()
	})
}

// ClearBulkMaterialsCompletedQuantity clears the value of the "bulk_materials_completed_quantity" field.
func (u *ProjectUpsertBulk) ClearBulkMaterialsCompletedQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsCompletedQuantity()
	})
}

// SetBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertBulk) SetBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetBulkMaterialsUncompletedQuantity(v)
	})
}

// AddBulkMaterialsUncompletedQuantity adds v to the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertBulk) AddBulkMaterialsUncompletedQuantity(v float64) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddBulkMaterialsUncompletedQuantity(v)
	})
}

// UpdateBulkMaterialsUncompletedQuantity sets the "bulk_materials_uncompleted_quantity" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateBulkMaterialsUncompletedQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateBulkMaterialsUncompletedQuantity()
	})
}

// ClearBulkMaterialsUncompletedQuantity clears the value of the "bulk_materials_uncompleted_quantity" field.
func (u *ProjectUpsertBulk) ClearBulkMaterialsUncompletedQuantity() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearBulkMaterialsUncompletedQuantity()
	})
}

// SetDiagramBdFinishCount sets the "diagram_bd_finish_count" field.
func (u *ProjectUpsertBulk) SetDiagramBdFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramBdFinishCount(v)
	})
}

// AddDiagramBdFinishCount adds v to the "diagram_bd_finish_count" field.
func (u *ProjectUpsertBulk) AddDiagramBdFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramBdFinishCount(v)
	})
}

// UpdateDiagramBdFinishCount sets the "diagram_bd_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramBdFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramBdFinishCount()
	})
}

// ClearDiagramBdFinishCount clears the value of the "diagram_bd_finish_count" field.
func (u *ProjectUpsertBulk) ClearDiagramBdFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramBdFinishCount()
	})
}

// SetDiagramBdTotalCount sets the "diagram_bd_total_count" field.
func (u *ProjectUpsertBulk) SetDiagramBdTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramBdTotalCount(v)
	})
}

// AddDiagramBdTotalCount adds v to the "diagram_bd_total_count" field.
func (u *ProjectUpsertBulk) AddDiagramBdTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramBdTotalCount(v)
	})
}

// UpdateDiagramBdTotalCount sets the "diagram_bd_total_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramBdTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramBdTotalCount()
	})
}

// ClearDiagramBdTotalCount clears the value of the "diagram_bd_total_count" field.
func (u *ProjectUpsertBulk) ClearDiagramBdTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramBdTotalCount()
	})
}

// SetDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field.
func (u *ProjectUpsertBulk) SetDiagramConstructionFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramConstructionFinishCount(v)
	})
}

// AddDiagramConstructionFinishCount adds v to the "diagram_construction_finish_count" field.
func (u *ProjectUpsertBulk) AddDiagramConstructionFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramConstructionFinishCount(v)
	})
}

// UpdateDiagramConstructionFinishCount sets the "diagram_construction_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramConstructionFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramConstructionFinishCount()
	})
}

// ClearDiagramConstructionFinishCount clears the value of the "diagram_construction_finish_count" field.
func (u *ProjectUpsertBulk) ClearDiagramConstructionFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramConstructionFinishCount()
	})
}

// SetDiagramConstructionTotalCount sets the "diagram_construction_total_count" field.
func (u *ProjectUpsertBulk) SetDiagramConstructionTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramConstructionTotalCount(v)
	})
}

// AddDiagramConstructionTotalCount adds v to the "diagram_construction_total_count" field.
func (u *ProjectUpsertBulk) AddDiagramConstructionTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramConstructionTotalCount(v)
	})
}

// UpdateDiagramConstructionTotalCount sets the "diagram_construction_total_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramConstructionTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramConstructionTotalCount()
	})
}

// ClearDiagramConstructionTotalCount clears the value of the "diagram_construction_total_count" field.
func (u *ProjectUpsertBulk) ClearDiagramConstructionTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramConstructionTotalCount()
	})
}

// SetDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field.
func (u *ProjectUpsertBulk) SetDiagramProcessingFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramProcessingFinishCount(v)
	})
}

// AddDiagramProcessingFinishCount adds v to the "diagram_processing_finish_count" field.
func (u *ProjectUpsertBulk) AddDiagramProcessingFinishCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramProcessingFinishCount(v)
	})
}

// UpdateDiagramProcessingFinishCount sets the "diagram_processing_finish_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramProcessingFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramProcessingFinishCount()
	})
}

// ClearDiagramProcessingFinishCount clears the value of the "diagram_processing_finish_count" field.
func (u *ProjectUpsertBulk) ClearDiagramProcessingFinishCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramProcessingFinishCount()
	})
}

// SetDiagramProcessingTotalCount sets the "diagram_processing_total_count" field.
func (u *ProjectUpsertBulk) SetDiagramProcessingTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramProcessingTotalCount(v)
	})
}

// AddDiagramProcessingTotalCount adds v to the "diagram_processing_total_count" field.
func (u *ProjectUpsertBulk) AddDiagramProcessingTotalCount(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramProcessingTotalCount(v)
	})
}

// UpdateDiagramProcessingTotalCount sets the "diagram_processing_total_count" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramProcessingTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramProcessingTotalCount()
	})
}

// ClearDiagramProcessingTotalCount clears the value of the "diagram_processing_total_count" field.
func (u *ProjectUpsertBulk) ClearDiagramProcessingTotalCount() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramProcessingTotalCount()
	})
}

// SetDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertBulk) SetDiagramCApprovalRatioNumerator(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramCApprovalRatioNumerator(v)
	})
}

// AddDiagramCApprovalRatioNumerator adds v to the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertBulk) AddDiagramCApprovalRatioNumerator(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramCApprovalRatioNumerator(v)
	})
}

// UpdateDiagramCApprovalRatioNumerator sets the "diagram_c_approval_ratio_numerator" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramCApprovalRatioNumerator() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramCApprovalRatioNumerator()
	})
}

// ClearDiagramCApprovalRatioNumerator clears the value of the "diagram_c_approval_ratio_numerator" field.
func (u *ProjectUpsertBulk) ClearDiagramCApprovalRatioNumerator() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramCApprovalRatioNumerator()
	})
}

// SetDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertBulk) SetDiagramCApprovalRatioDenominator(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDiagramCApprovalRatioDenominator(v)
	})
}

// AddDiagramCApprovalRatioDenominator adds v to the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertBulk) AddDiagramCApprovalRatioDenominator(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDiagramCApprovalRatioDenominator(v)
	})
}

// UpdateDiagramCApprovalRatioDenominator sets the "diagram_c_approval_ratio_denominator" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDiagramCApprovalRatioDenominator() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDiagramCApprovalRatioDenominator()
	})
}

// ClearDiagramCApprovalRatioDenominator clears the value of the "diagram_c_approval_ratio_denominator" field.
func (u *ProjectUpsertBulk) ClearDiagramCApprovalRatioDenominator() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDiagramCApprovalRatioDenominator()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
