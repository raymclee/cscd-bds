// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AreaQuery) CollectFields(ctx context.Context, satisfies ...string) (*AreaQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AreaQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(area.Columns))
		selectedFields = []string{area.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "customers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: a.config}).Query()
			)
			args := newCustomerPaginateArgs(fieldArgs(ctx, new(CustomerWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newCustomerPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					a.loadTotal = append(a.loadTotal, func(ctx context.Context, nodes []*Area) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"area_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(area.CustomersColumn), ids...))
						})
						if err := query.GroupBy(area.CustomersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					a.loadTotal = append(a.loadTotal, func(_ context.Context, nodes []*Area) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Customers)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(area.CustomersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			a.WithNamedCustomers(alias, func(wq *CustomerQuery) {
				*wq = *query
			})

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: a.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					a.loadTotal = append(a.loadTotal, func(ctx context.Context, nodes []*Area) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"area_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(area.TendersColumn), ids...))
						})
						if err := query.GroupBy(area.TendersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					a.loadTotal = append(a.loadTotal, func(_ context.Context, nodes []*Area) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(area.TendersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			a.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})

		case "sales":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: a.config}).Query()
			)
			args := newUserPaginateArgs(fieldArgs(ctx, new(UserWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newUserPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					a.loadTotal = append(a.loadTotal, func(ctx context.Context, nodes []*Area) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"area_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(area.SalesTable)
							s.Join(joinT).On(s.C(user.FieldID), joinT.C(area.SalesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(area.SalesPrimaryKey[0]), ids...))
							s.Select(joinT.C(area.SalesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(area.SalesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					a.loadTotal = append(a.loadTotal, func(_ context.Context, nodes []*Area) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Sales)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(area.SalesPrimaryKey[0], limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			a.WithNamedSales(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "provinces":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProvinceClient{config: a.config}).Query()
			)
			args := newProvincePaginateArgs(fieldArgs(ctx, new(ProvinceWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newProvincePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					a.loadTotal = append(a.loadTotal, func(ctx context.Context, nodes []*Area) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"area_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(area.ProvincesColumn), ids...))
						})
						if err := query.GroupBy(area.ProvincesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					a.loadTotal = append(a.loadTotal, func(_ context.Context, nodes []*Area) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Provinces)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, provinceImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(area.ProvincesColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			a.WithNamedProvinces(alias, func(wq *ProvinceQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[area.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, area.FieldCreatedAt)
				fieldSeen[area.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[area.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, area.FieldUpdatedAt)
				fieldSeen[area.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[area.FieldName]; !ok {
				selectedFields = append(selectedFields, area.FieldName)
				fieldSeen[area.FieldName] = struct{}{}
			}
		case "code":
			if _, ok := fieldSeen[area.FieldCode]; !ok {
				selectedFields = append(selectedFields, area.FieldCode)
				fieldSeen[area.FieldCode] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type areaPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AreaPaginateOption
}

func newAreaPaginateArgs(rv map[string]any) *areaPaginateArgs {
	args := &areaPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AreaOrder{Field: &AreaOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAreaOrder(order))
			}
		case *AreaOrder:
			if v != nil {
				args.opts = append(args.opts, WithAreaOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AreaWhereInput); ok {
		args.opts = append(args.opts, WithAreaFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CityQuery) CollectFields(ctx context.Context, satisfies ...string) (*CityQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CityQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(city.Columns))
		selectedFields = []string{city.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "districts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DistrictClient{config: c.config}).Query()
			)
			args := newDistrictPaginateArgs(fieldArgs(ctx, new(DistrictWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newDistrictPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					c.loadTotal = append(c.loadTotal, func(ctx context.Context, nodes []*City) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"city_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(city.DistrictsColumn), ids...))
						})
						if err := query.GroupBy(city.DistrictsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					c.loadTotal = append(c.loadTotal, func(_ context.Context, nodes []*City) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Districts)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, districtImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(city.DistrictsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			c.WithNamedDistricts(alias, func(wq *DistrictQuery) {
				*wq = *query
			})

		case "province":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProvinceClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, provinceImplementors)...); err != nil {
				return err
			}
			c.withProvince = query
			if _, ok := fieldSeen[city.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, city.FieldProvinceID)
				fieldSeen[city.FieldProvinceID] = struct{}{}
			}

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: c.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					c.loadTotal = append(c.loadTotal, func(ctx context.Context, nodes []*City) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"city_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(city.TendersColumn), ids...))
						})
						if err := query.GroupBy(city.TendersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					c.loadTotal = append(c.loadTotal, func(_ context.Context, nodes []*City) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(city.TendersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			c.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[city.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, city.FieldCreatedAt)
				fieldSeen[city.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[city.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, city.FieldUpdatedAt)
				fieldSeen[city.FieldUpdatedAt] = struct{}{}
			}
		case "adcode":
			if _, ok := fieldSeen[city.FieldAdcode]; !ok {
				selectedFields = append(selectedFields, city.FieldAdcode)
				fieldSeen[city.FieldAdcode] = struct{}{}
			}
		case "provCode":
			if _, ok := fieldSeen[city.FieldProvCode]; !ok {
				selectedFields = append(selectedFields, city.FieldProvCode)
				fieldSeen[city.FieldProvCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[city.FieldName]; !ok {
				selectedFields = append(selectedFields, city.FieldName)
				fieldSeen[city.FieldName] = struct{}{}
			}
		case "provinceID":
			if _, ok := fieldSeen[city.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, city.FieldProvinceID)
				fieldSeen[city.FieldProvinceID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type cityPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CityPaginateOption
}

func newCityPaginateArgs(rv map[string]any) *cityPaginateArgs {
	args := &cityPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CityOrder{Field: &CityOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCityOrder(order))
			}
		case *CityOrder:
			if v != nil {
				args.opts = append(args.opts, WithCityOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CityWhereInput); ok {
		args.opts = append(args.opts, WithCityFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CountryQuery) CollectFields(ctx context.Context, satisfies ...string) (*CountryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CountryQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(country.Columns))
		selectedFields = []string{country.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "provinces":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProvinceClient{config: c.config}).Query()
			)
			args := newProvincePaginateArgs(fieldArgs(ctx, new(ProvinceWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newProvincePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					c.loadTotal = append(c.loadTotal, func(ctx context.Context, nodes []*Country) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"country_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(country.ProvincesColumn), ids...))
						})
						if err := query.GroupBy(country.ProvincesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					c.loadTotal = append(c.loadTotal, func(_ context.Context, nodes []*Country) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Provinces)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, provinceImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(country.ProvincesColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			c.WithNamedProvinces(alias, func(wq *ProvinceQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[country.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, country.FieldCreatedAt)
				fieldSeen[country.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[country.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, country.FieldUpdatedAt)
				fieldSeen[country.FieldUpdatedAt] = struct{}{}
			}
		case "adcode":
			if _, ok := fieldSeen[country.FieldAdcode]; !ok {
				selectedFields = append(selectedFields, country.FieldAdcode)
				fieldSeen[country.FieldAdcode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[country.FieldName]; !ok {
				selectedFields = append(selectedFields, country.FieldName)
				fieldSeen[country.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type countryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CountryPaginateOption
}

func newCountryPaginateArgs(rv map[string]any) *countryPaginateArgs {
	args := &countryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CountryOrder{Field: &CountryOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCountryOrder(order))
			}
		case *CountryOrder:
			if v != nil {
				args.opts = append(args.opts, WithCountryOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CountryWhereInput); ok {
		args.opts = append(args.opts, WithCountryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CustomerQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customer.Columns))
		selectedFields = []string{customer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "area":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AreaClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, areaImplementors)...); err != nil {
				return err
			}
			c.withArea = query
			if _, ok := fieldSeen[customer.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, customer.FieldAreaID)
				fieldSeen[customer.FieldAreaID] = struct{}{}
			}

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: c.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					c.loadTotal = append(c.loadTotal, func(ctx context.Context, nodes []*Customer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"customer_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(customer.TendersColumn), ids...))
						})
						if err := query.GroupBy(customer.TendersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					c.loadTotal = append(c.loadTotal, func(_ context.Context, nodes []*Customer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(customer.TendersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			c.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})

		case "sales":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			c.withSales = query
			if _, ok := fieldSeen[customer.FieldSalesID]; !ok {
				selectedFields = append(selectedFields, customer.FieldSalesID)
				fieldSeen[customer.FieldSalesID] = struct{}{}
			}

		case "createdBy":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			c.withCreatedBy = query
			if _, ok := fieldSeen[customer.FieldCreatedByID]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedByID)
				fieldSeen[customer.FieldCreatedByID] = struct{}{}
			}

		case "visitRecords":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&VisitRecordClient{config: c.config}).Query()
			)
			args := newVisitRecordPaginateArgs(fieldArgs(ctx, new(VisitRecordWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newVisitRecordPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					c.loadTotal = append(c.loadTotal, func(ctx context.Context, nodes []*Customer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"customer_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(customer.VisitRecordsColumn), ids...))
						})
						if err := query.GroupBy(customer.VisitRecordsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				} else {
					c.loadTotal = append(c.loadTotal, func(_ context.Context, nodes []*Customer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.VisitRecords)
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, visitrecordImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(customer.VisitRecordsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			c.WithNamedVisitRecords(alias, func(wq *VisitRecordQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[customer.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedAt)
				fieldSeen[customer.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[customer.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldUpdatedAt)
				fieldSeen[customer.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[customer.FieldName]; !ok {
				selectedFields = append(selectedFields, customer.FieldName)
				fieldSeen[customer.FieldName] = struct{}{}
			}
		case "ownerType":
			if _, ok := fieldSeen[customer.FieldOwnerType]; !ok {
				selectedFields = append(selectedFields, customer.FieldOwnerType)
				fieldSeen[customer.FieldOwnerType] = struct{}{}
			}
		case "industry":
			if _, ok := fieldSeen[customer.FieldIndustry]; !ok {
				selectedFields = append(selectedFields, customer.FieldIndustry)
				fieldSeen[customer.FieldIndustry] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[customer.FieldSize]; !ok {
				selectedFields = append(selectedFields, customer.FieldSize)
				fieldSeen[customer.FieldSize] = struct{}{}
			}
		case "contactPerson":
			if _, ok := fieldSeen[customer.FieldContactPerson]; !ok {
				selectedFields = append(selectedFields, customer.FieldContactPerson)
				fieldSeen[customer.FieldContactPerson] = struct{}{}
			}
		case "contactPersonPosition":
			if _, ok := fieldSeen[customer.FieldContactPersonPosition]; !ok {
				selectedFields = append(selectedFields, customer.FieldContactPersonPosition)
				fieldSeen[customer.FieldContactPersonPosition] = struct{}{}
			}
		case "contactPersonPhone":
			if _, ok := fieldSeen[customer.FieldContactPersonPhone]; !ok {
				selectedFields = append(selectedFields, customer.FieldContactPersonPhone)
				fieldSeen[customer.FieldContactPersonPhone] = struct{}{}
			}
		case "contactPersonEmail":
			if _, ok := fieldSeen[customer.FieldContactPersonEmail]; !ok {
				selectedFields = append(selectedFields, customer.FieldContactPersonEmail)
				fieldSeen[customer.FieldContactPersonEmail] = struct{}{}
			}
		case "areaID":
			if _, ok := fieldSeen[customer.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, customer.FieldAreaID)
				fieldSeen[customer.FieldAreaID] = struct{}{}
			}
		case "salesID":
			if _, ok := fieldSeen[customer.FieldSalesID]; !ok {
				selectedFields = append(selectedFields, customer.FieldSalesID)
				fieldSeen[customer.FieldSalesID] = struct{}{}
			}
		case "createdByID":
			if _, ok := fieldSeen[customer.FieldCreatedByID]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedByID)
				fieldSeen[customer.FieldCreatedByID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type customerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerPaginateOption
}

func newCustomerPaginateArgs(rv map[string]any) *customerPaginateArgs {
	args := &customerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CustomerOrder{Field: &CustomerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCustomerOrder(order))
			}
		case *CustomerOrder:
			if v != nil {
				args.opts = append(args.opts, WithCustomerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CustomerWhereInput); ok {
		args.opts = append(args.opts, WithCustomerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DistrictQuery) CollectFields(ctx context.Context, satisfies ...string) (*DistrictQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DistrictQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(district.Columns))
		selectedFields = []string{district.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "province":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProvinceClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, provinceImplementors)...); err != nil {
				return err
			}
			d.withProvince = query
			if _, ok := fieldSeen[district.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, district.FieldProvinceID)
				fieldSeen[district.FieldProvinceID] = struct{}{}
			}

		case "city":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CityClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, cityImplementors)...); err != nil {
				return err
			}
			d.withCity = query
			if _, ok := fieldSeen[district.FieldCityID]; !ok {
				selectedFields = append(selectedFields, district.FieldCityID)
				fieldSeen[district.FieldCityID] = struct{}{}
			}

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: d.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					d.loadTotal = append(d.loadTotal, func(ctx context.Context, nodes []*District) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"district_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(district.TendersColumn), ids...))
						})
						if err := query.GroupBy(district.TendersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					d.loadTotal = append(d.loadTotal, func(_ context.Context, nodes []*District) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(district.TendersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			d.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})

		case "plots":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PlotClient{config: d.config}).Query()
			)
			args := newPlotPaginateArgs(fieldArgs(ctx, new(PlotWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newPlotPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					d.loadTotal = append(d.loadTotal, func(ctx context.Context, nodes []*District) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"district_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(district.PlotsColumn), ids...))
						})
						if err := query.GroupBy(district.PlotsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					d.loadTotal = append(d.loadTotal, func(_ context.Context, nodes []*District) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Plots)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, plotImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(district.PlotsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			d.WithNamedPlots(alias, func(wq *PlotQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[district.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, district.FieldCreatedAt)
				fieldSeen[district.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[district.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, district.FieldUpdatedAt)
				fieldSeen[district.FieldUpdatedAt] = struct{}{}
			}
		case "adcode":
			if _, ok := fieldSeen[district.FieldAdcode]; !ok {
				selectedFields = append(selectedFields, district.FieldAdcode)
				fieldSeen[district.FieldAdcode] = struct{}{}
			}
		case "provCode":
			if _, ok := fieldSeen[district.FieldProvCode]; !ok {
				selectedFields = append(selectedFields, district.FieldProvCode)
				fieldSeen[district.FieldProvCode] = struct{}{}
			}
		case "cityCode":
			if _, ok := fieldSeen[district.FieldCityCode]; !ok {
				selectedFields = append(selectedFields, district.FieldCityCode)
				fieldSeen[district.FieldCityCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[district.FieldName]; !ok {
				selectedFields = append(selectedFields, district.FieldName)
				fieldSeen[district.FieldName] = struct{}{}
			}
		case "provinceID":
			if _, ok := fieldSeen[district.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, district.FieldProvinceID)
				fieldSeen[district.FieldProvinceID] = struct{}{}
			}
		case "cityID":
			if _, ok := fieldSeen[district.FieldCityID]; !ok {
				selectedFields = append(selectedFields, district.FieldCityID)
				fieldSeen[district.FieldCityID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		d.Select(selectedFields...)
	}
	return nil
}

type districtPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DistrictPaginateOption
}

func newDistrictPaginateArgs(rv map[string]any) *districtPaginateArgs {
	args := &districtPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &DistrictOrder{Field: &DistrictOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithDistrictOrder(order))
			}
		case *DistrictOrder:
			if v != nil {
				args.opts = append(args.opts, WithDistrictOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*DistrictWhereInput); ok {
		args.opts = append(args.opts, WithDistrictFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pl *PlotQuery) CollectFields(ctx context.Context, satisfies ...string) (*PlotQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pl, nil
	}
	if err := pl.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pl, nil
}

func (pl *PlotQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(plot.Columns))
		selectedFields = []string{plot.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "district":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DistrictClient{config: pl.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, districtImplementors)...); err != nil {
				return err
			}
			pl.withDistrict = query
			if _, ok := fieldSeen[plot.FieldDistrictID]; !ok {
				selectedFields = append(selectedFields, plot.FieldDistrictID)
				fieldSeen[plot.FieldDistrictID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[plot.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, plot.FieldCreatedAt)
				fieldSeen[plot.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[plot.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, plot.FieldUpdatedAt)
				fieldSeen[plot.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[plot.FieldName]; !ok {
				selectedFields = append(selectedFields, plot.FieldName)
				fieldSeen[plot.FieldName] = struct{}{}
			}
		case "colorHex":
			if _, ok := fieldSeen[plot.FieldColorHex]; !ok {
				selectedFields = append(selectedFields, plot.FieldColorHex)
				fieldSeen[plot.FieldColorHex] = struct{}{}
			}
		case "districtID":
			if _, ok := fieldSeen[plot.FieldDistrictID]; !ok {
				selectedFields = append(selectedFields, plot.FieldDistrictID)
				fieldSeen[plot.FieldDistrictID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pl.Select(selectedFields...)
	}
	return nil
}

type plotPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PlotPaginateOption
}

func newPlotPaginateArgs(rv map[string]any) *plotPaginateArgs {
	args := &plotPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PlotOrder{Field: &PlotOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPlotOrder(order))
			}
		case *PlotOrder:
			if v != nil {
				args.opts = append(args.opts, WithPlotOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PlotWhereInput); ok {
		args.opts = append(args.opts, WithPlotFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProvinceQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProvinceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProvinceQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(province.Columns))
		selectedFields = []string{province.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "districts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DistrictClient{config: pr.config}).Query()
			)
			args := newDistrictPaginateArgs(fieldArgs(ctx, new(DistrictWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newDistrictPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Province) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"province_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(province.DistrictsColumn), ids...))
						})
						if err := query.GroupBy(province.DistrictsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Province) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Districts)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, districtImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(province.DistrictsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedDistricts(alias, func(wq *DistrictQuery) {
				*wq = *query
			})

		case "cities":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CityClient{config: pr.config}).Query()
			)
			args := newCityPaginateArgs(fieldArgs(ctx, new(CityWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newCityPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Province) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"province_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(province.CitiesColumn), ids...))
						})
						if err := query.GroupBy(province.CitiesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Province) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Cities)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, cityImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(province.CitiesColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedCities(alias, func(wq *CityQuery) {
				*wq = *query
			})

		case "country":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CountryClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, countryImplementors)...); err != nil {
				return err
			}
			pr.withCountry = query
			if _, ok := fieldSeen[province.FieldCountryID]; !ok {
				selectedFields = append(selectedFields, province.FieldCountryID)
				fieldSeen[province.FieldCountryID] = struct{}{}
			}

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: pr.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Province) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"province_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(province.TendersColumn), ids...))
						})
						if err := query.GroupBy(province.TendersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Province) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(province.TendersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})

		case "area":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AreaClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, areaImplementors)...); err != nil {
				return err
			}
			pr.withArea = query
			if _, ok := fieldSeen[province.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, province.FieldAreaID)
				fieldSeen[province.FieldAreaID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[province.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, province.FieldCreatedAt)
				fieldSeen[province.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[province.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, province.FieldUpdatedAt)
				fieldSeen[province.FieldUpdatedAt] = struct{}{}
			}
		case "adcode":
			if _, ok := fieldSeen[province.FieldAdcode]; !ok {
				selectedFields = append(selectedFields, province.FieldAdcode)
				fieldSeen[province.FieldAdcode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[province.FieldName]; !ok {
				selectedFields = append(selectedFields, province.FieldName)
				fieldSeen[province.FieldName] = struct{}{}
			}
		case "countryID":
			if _, ok := fieldSeen[province.FieldCountryID]; !ok {
				selectedFields = append(selectedFields, province.FieldCountryID)
				fieldSeen[province.FieldCountryID] = struct{}{}
			}
		case "areaID":
			if _, ok := fieldSeen[province.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, province.FieldAreaID)
				fieldSeen[province.FieldAreaID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type provincePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProvincePaginateOption
}

func newProvincePaginateArgs(rv map[string]any) *provincePaginateArgs {
	args := &provincePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ProvinceOrder{Field: &ProvinceOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithProvinceOrder(order))
			}
		case *ProvinceOrder:
			if v != nil {
				args.opts = append(args.opts, WithProvinceOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ProvinceWhereInput); ok {
		args.opts = append(args.opts, WithProvinceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TenderQuery) CollectFields(ctx context.Context, satisfies ...string) (*TenderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TenderQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(tender.Columns))
		selectedFields = []string{tender.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "area":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AreaClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, areaImplementors)...); err != nil {
				return err
			}
			t.withArea = query
			if _, ok := fieldSeen[tender.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, tender.FieldAreaID)
				fieldSeen[tender.FieldAreaID] = struct{}{}
			}

		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
				return err
			}
			t.withCustomer = query
			if _, ok := fieldSeen[tender.FieldCustomerID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCustomerID)
				fieldSeen[tender.FieldCustomerID] = struct{}{}
			}

		case "finder":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			t.withFinder = query
			if _, ok := fieldSeen[tender.FieldFinderID]; !ok {
				selectedFields = append(selectedFields, tender.FieldFinderID)
				fieldSeen[tender.FieldFinderID] = struct{}{}
			}

		case "createdBy":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			t.withCreatedBy = query
			if _, ok := fieldSeen[tender.FieldCreatedByID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCreatedByID)
				fieldSeen[tender.FieldCreatedByID] = struct{}{}
			}

		case "followingSales":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			t.WithNamedFollowingSales(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "province":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProvinceClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, provinceImplementors)...); err != nil {
				return err
			}
			t.withProvince = query
			if _, ok := fieldSeen[tender.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, tender.FieldProvinceID)
				fieldSeen[tender.FieldProvinceID] = struct{}{}
			}

		case "city":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CityClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, cityImplementors)...); err != nil {
				return err
			}
			t.withCity = query
			if _, ok := fieldSeen[tender.FieldCityID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCityID)
				fieldSeen[tender.FieldCityID] = struct{}{}
			}

		case "district":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DistrictClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, districtImplementors)...); err != nil {
				return err
			}
			t.withDistrict = query
			if _, ok := fieldSeen[tender.FieldDistrictID]; !ok {
				selectedFields = append(selectedFields, tender.FieldDistrictID)
				fieldSeen[tender.FieldDistrictID] = struct{}{}
			}

		case "visitRecords":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&VisitRecordClient{config: t.config}).Query()
			)
			args := newVisitRecordPaginateArgs(fieldArgs(ctx, new(VisitRecordWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newVisitRecordPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					t.loadTotal = append(t.loadTotal, func(ctx context.Context, nodes []*Tender) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"tender_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(tender.VisitRecordsColumn), ids...))
						})
						if err := query.GroupBy(tender.VisitRecordsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[8] == nil {
								nodes[i].Edges.totalCount[8] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[8][alias] = n
						}
						return nil
					})
				} else {
					t.loadTotal = append(t.loadTotal, func(_ context.Context, nodes []*Tender) error {
						for i := range nodes {
							n := len(nodes[i].Edges.VisitRecords)
							if nodes[i].Edges.totalCount[8] == nil {
								nodes[i].Edges.totalCount[8] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[8][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, visitrecordImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(tender.VisitRecordsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			t.WithNamedVisitRecords(alias, func(wq *VisitRecordQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[tender.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, tender.FieldCreatedAt)
				fieldSeen[tender.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[tender.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, tender.FieldUpdatedAt)
				fieldSeen[tender.FieldUpdatedAt] = struct{}{}
			}
		case "code":
			if _, ok := fieldSeen[tender.FieldCode]; !ok {
				selectedFields = append(selectedFields, tender.FieldCode)
				fieldSeen[tender.FieldCode] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[tender.FieldStatus]; !ok {
				selectedFields = append(selectedFields, tender.FieldStatus)
				fieldSeen[tender.FieldStatus] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[tender.FieldName]; !ok {
				selectedFields = append(selectedFields, tender.FieldName)
				fieldSeen[tender.FieldName] = struct{}{}
			}
		case "estimatedAmount":
			if _, ok := fieldSeen[tender.FieldEstimatedAmount]; !ok {
				selectedFields = append(selectedFields, tender.FieldEstimatedAmount)
				fieldSeen[tender.FieldEstimatedAmount] = struct{}{}
			}
		case "tenderDate":
			if _, ok := fieldSeen[tender.FieldTenderDate]; !ok {
				selectedFields = append(selectedFields, tender.FieldTenderDate)
				fieldSeen[tender.FieldTenderDate] = struct{}{}
			}
		case "discoveryDate":
			if _, ok := fieldSeen[tender.FieldDiscoveryDate]; !ok {
				selectedFields = append(selectedFields, tender.FieldDiscoveryDate)
				fieldSeen[tender.FieldDiscoveryDate] = struct{}{}
			}
		case "address":
			if _, ok := fieldSeen[tender.FieldAddress]; !ok {
				selectedFields = append(selectedFields, tender.FieldAddress)
				fieldSeen[tender.FieldAddress] = struct{}{}
			}
		case "fullAddress":
			if _, ok := fieldSeen[tender.FieldFullAddress]; !ok {
				selectedFields = append(selectedFields, tender.FieldFullAddress)
				fieldSeen[tender.FieldFullAddress] = struct{}{}
			}
		case "contractor":
			if _, ok := fieldSeen[tender.FieldContractor]; !ok {
				selectedFields = append(selectedFields, tender.FieldContractor)
				fieldSeen[tender.FieldContractor] = struct{}{}
			}
		case "sizeAndValueRating":
			if _, ok := fieldSeen[tender.FieldSizeAndValueRating]; !ok {
				selectedFields = append(selectedFields, tender.FieldSizeAndValueRating)
				fieldSeen[tender.FieldSizeAndValueRating] = struct{}{}
			}
		case "sizeAndValueRatingOverview":
			if _, ok := fieldSeen[tender.FieldSizeAndValueRatingOverview]; !ok {
				selectedFields = append(selectedFields, tender.FieldSizeAndValueRatingOverview)
				fieldSeen[tender.FieldSizeAndValueRatingOverview] = struct{}{}
			}
		case "creditAndPaymentRating":
			if _, ok := fieldSeen[tender.FieldCreditAndPaymentRating]; !ok {
				selectedFields = append(selectedFields, tender.FieldCreditAndPaymentRating)
				fieldSeen[tender.FieldCreditAndPaymentRating] = struct{}{}
			}
		case "creditAndPaymentRatingOverview":
			if _, ok := fieldSeen[tender.FieldCreditAndPaymentRatingOverview]; !ok {
				selectedFields = append(selectedFields, tender.FieldCreditAndPaymentRatingOverview)
				fieldSeen[tender.FieldCreditAndPaymentRatingOverview] = struct{}{}
			}
		case "timeLimitRating":
			if _, ok := fieldSeen[tender.FieldTimeLimitRating]; !ok {
				selectedFields = append(selectedFields, tender.FieldTimeLimitRating)
				fieldSeen[tender.FieldTimeLimitRating] = struct{}{}
			}
		case "timeLimitRatingOverview":
			if _, ok := fieldSeen[tender.FieldTimeLimitRatingOverview]; !ok {
				selectedFields = append(selectedFields, tender.FieldTimeLimitRatingOverview)
				fieldSeen[tender.FieldTimeLimitRatingOverview] = struct{}{}
			}
		case "customerRelationshipRating":
			if _, ok := fieldSeen[tender.FieldCustomerRelationshipRating]; !ok {
				selectedFields = append(selectedFields, tender.FieldCustomerRelationshipRating)
				fieldSeen[tender.FieldCustomerRelationshipRating] = struct{}{}
			}
		case "customerRelationshipRatingOverview":
			if _, ok := fieldSeen[tender.FieldCustomerRelationshipRatingOverview]; !ok {
				selectedFields = append(selectedFields, tender.FieldCustomerRelationshipRatingOverview)
				fieldSeen[tender.FieldCustomerRelationshipRatingOverview] = struct{}{}
			}
		case "competitivePartnershipRating":
			if _, ok := fieldSeen[tender.FieldCompetitivePartnershipRating]; !ok {
				selectedFields = append(selectedFields, tender.FieldCompetitivePartnershipRating)
				fieldSeen[tender.FieldCompetitivePartnershipRating] = struct{}{}
			}
		case "competitivePartnershipRatingOverview":
			if _, ok := fieldSeen[tender.FieldCompetitivePartnershipRatingOverview]; !ok {
				selectedFields = append(selectedFields, tender.FieldCompetitivePartnershipRatingOverview)
				fieldSeen[tender.FieldCompetitivePartnershipRatingOverview] = struct{}{}
			}
		case "prepareToBid":
			if _, ok := fieldSeen[tender.FieldPrepareToBid]; !ok {
				selectedFields = append(selectedFields, tender.FieldPrepareToBid)
				fieldSeen[tender.FieldPrepareToBid] = struct{}{}
			}
		case "projectCode":
			if _, ok := fieldSeen[tender.FieldProjectCode]; !ok {
				selectedFields = append(selectedFields, tender.FieldProjectCode)
				fieldSeen[tender.FieldProjectCode] = struct{}{}
			}
		case "projectDefinition":
			if _, ok := fieldSeen[tender.FieldProjectDefinition]; !ok {
				selectedFields = append(selectedFields, tender.FieldProjectDefinition)
				fieldSeen[tender.FieldProjectDefinition] = struct{}{}
			}
		case "estimatedProjectStartDate":
			if _, ok := fieldSeen[tender.FieldEstimatedProjectStartDate]; !ok {
				selectedFields = append(selectedFields, tender.FieldEstimatedProjectStartDate)
				fieldSeen[tender.FieldEstimatedProjectStartDate] = struct{}{}
			}
		case "estimatedProjectEndDate":
			if _, ok := fieldSeen[tender.FieldEstimatedProjectEndDate]; !ok {
				selectedFields = append(selectedFields, tender.FieldEstimatedProjectEndDate)
				fieldSeen[tender.FieldEstimatedProjectEndDate] = struct{}{}
			}
		case "projectType":
			if _, ok := fieldSeen[tender.FieldProjectType]; !ok {
				selectedFields = append(selectedFields, tender.FieldProjectType)
				fieldSeen[tender.FieldProjectType] = struct{}{}
			}
		case "attachements":
			if _, ok := fieldSeen[tender.FieldAttachements]; !ok {
				selectedFields = append(selectedFields, tender.FieldAttachements)
				fieldSeen[tender.FieldAttachements] = struct{}{}
			}
		case "remark":
			if _, ok := fieldSeen[tender.FieldRemark]; !ok {
				selectedFields = append(selectedFields, tender.FieldRemark)
				fieldSeen[tender.FieldRemark] = struct{}{}
			}
		case "images":
			if _, ok := fieldSeen[tender.FieldImages]; !ok {
				selectedFields = append(selectedFields, tender.FieldImages)
				fieldSeen[tender.FieldImages] = struct{}{}
			}
		case "tenderSituations":
			if _, ok := fieldSeen[tender.FieldTenderSituations]; !ok {
				selectedFields = append(selectedFields, tender.FieldTenderSituations)
				fieldSeen[tender.FieldTenderSituations] = struct{}{}
			}
		case "ownerSituations":
			if _, ok := fieldSeen[tender.FieldOwnerSituations]; !ok {
				selectedFields = append(selectedFields, tender.FieldOwnerSituations)
				fieldSeen[tender.FieldOwnerSituations] = struct{}{}
			}
		case "biddingInstructions":
			if _, ok := fieldSeen[tender.FieldBiddingInstructions]; !ok {
				selectedFields = append(selectedFields, tender.FieldBiddingInstructions)
				fieldSeen[tender.FieldBiddingInstructions] = struct{}{}
			}
		case "competitorSituations":
			if _, ok := fieldSeen[tender.FieldCompetitorSituations]; !ok {
				selectedFields = append(selectedFields, tender.FieldCompetitorSituations)
				fieldSeen[tender.FieldCompetitorSituations] = struct{}{}
			}
		case "costEngineer":
			if _, ok := fieldSeen[tender.FieldCostEngineer]; !ok {
				selectedFields = append(selectedFields, tender.FieldCostEngineer)
				fieldSeen[tender.FieldCostEngineer] = struct{}{}
			}
		case "tenderForm":
			if _, ok := fieldSeen[tender.FieldTenderForm]; !ok {
				selectedFields = append(selectedFields, tender.FieldTenderForm)
				fieldSeen[tender.FieldTenderForm] = struct{}{}
			}
		case "contractForm":
			if _, ok := fieldSeen[tender.FieldContractForm]; !ok {
				selectedFields = append(selectedFields, tender.FieldContractForm)
				fieldSeen[tender.FieldContractForm] = struct{}{}
			}
		case "managementCompany":
			if _, ok := fieldSeen[tender.FieldManagementCompany]; !ok {
				selectedFields = append(selectedFields, tender.FieldManagementCompany)
				fieldSeen[tender.FieldManagementCompany] = struct{}{}
			}
		case "tenderingAgency":
			if _, ok := fieldSeen[tender.FieldTenderingAgency]; !ok {
				selectedFields = append(selectedFields, tender.FieldTenderingAgency)
				fieldSeen[tender.FieldTenderingAgency] = struct{}{}
			}
		case "biddingDate":
			if _, ok := fieldSeen[tender.FieldBiddingDate]; !ok {
				selectedFields = append(selectedFields, tender.FieldBiddingDate)
				fieldSeen[tender.FieldBiddingDate] = struct{}{}
			}
		case "facadeConsultant":
			if _, ok := fieldSeen[tender.FieldFacadeConsultant]; !ok {
				selectedFields = append(selectedFields, tender.FieldFacadeConsultant)
				fieldSeen[tender.FieldFacadeConsultant] = struct{}{}
			}
		case "designUnit":
			if _, ok := fieldSeen[tender.FieldDesignUnit]; !ok {
				selectedFields = append(selectedFields, tender.FieldDesignUnit)
				fieldSeen[tender.FieldDesignUnit] = struct{}{}
			}
		case "consultingFirm":
			if _, ok := fieldSeen[tender.FieldConsultingFirm]; !ok {
				selectedFields = append(selectedFields, tender.FieldConsultingFirm)
				fieldSeen[tender.FieldConsultingFirm] = struct{}{}
			}
		case "keyProject":
			if _, ok := fieldSeen[tender.FieldKeyProject]; !ok {
				selectedFields = append(selectedFields, tender.FieldKeyProject)
				fieldSeen[tender.FieldKeyProject] = struct{}{}
			}
		case "areaID":
			if _, ok := fieldSeen[tender.FieldAreaID]; !ok {
				selectedFields = append(selectedFields, tender.FieldAreaID)
				fieldSeen[tender.FieldAreaID] = struct{}{}
			}
		case "provinceID":
			if _, ok := fieldSeen[tender.FieldProvinceID]; !ok {
				selectedFields = append(selectedFields, tender.FieldProvinceID)
				fieldSeen[tender.FieldProvinceID] = struct{}{}
			}
		case "cityID":
			if _, ok := fieldSeen[tender.FieldCityID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCityID)
				fieldSeen[tender.FieldCityID] = struct{}{}
			}
		case "districtID":
			if _, ok := fieldSeen[tender.FieldDistrictID]; !ok {
				selectedFields = append(selectedFields, tender.FieldDistrictID)
				fieldSeen[tender.FieldDistrictID] = struct{}{}
			}
		case "customerID":
			if _, ok := fieldSeen[tender.FieldCustomerID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCustomerID)
				fieldSeen[tender.FieldCustomerID] = struct{}{}
			}
		case "finderID":
			if _, ok := fieldSeen[tender.FieldFinderID]; !ok {
				selectedFields = append(selectedFields, tender.FieldFinderID)
				fieldSeen[tender.FieldFinderID] = struct{}{}
			}
		case "createdByID":
			if _, ok := fieldSeen[tender.FieldCreatedByID]; !ok {
				selectedFields = append(selectedFields, tender.FieldCreatedByID)
				fieldSeen[tender.FieldCreatedByID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type tenderPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TenderPaginateOption
}

func newTenderPaginateArgs(rv map[string]any) *tenderPaginateArgs {
	args := &tenderPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &TenderOrder{Field: &TenderOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTenderOrder(order))
			}
		case *TenderOrder:
			if v != nil {
				args.opts = append(args.opts, WithTenderOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*TenderWhereInput); ok {
		args.opts = append(args.opts, WithTenderFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "areas":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AreaClient{config: u.config}).Query()
			)
			args := newAreaPaginateArgs(fieldArgs(ctx, new(AreaWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newAreaPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"user_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(user.AreasTable)
							s.Join(joinT).On(s.C(area.FieldID), joinT.C(user.AreasPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(user.AreasPrimaryKey[1]), ids...))
							s.Select(joinT.C(user.AreasPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(user.AreasPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Areas)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, areaImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(user.AreasPrimaryKey[1], limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedAreas(alias, func(wq *AreaQuery) {
				*wq = *query
			})

		case "customers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: u.config}).Query()
			)
			args := newCustomerPaginateArgs(fieldArgs(ctx, new(CustomerWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newCustomerPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"sales_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.CustomersColumn), ids...))
						})
						if err := query.GroupBy(user.CustomersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Customers)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(user.CustomersColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedCustomers(alias, func(wq *CustomerQuery) {
				*wq = *query
			})

		case "leader":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			u.withLeader = query
			if _, ok := fieldSeen[user.FieldLeaderID]; !ok {
				selectedFields = append(selectedFields, user.FieldLeaderID)
				fieldSeen[user.FieldLeaderID] = struct{}{}
			}

		case "teamMembers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			u.WithNamedTeamMembers(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "tenders":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: u.config}).Query()
			)
			args := newTenderPaginateArgs(fieldArgs(ctx, new(TenderWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newTenderPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"user_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(user.TendersTable)
							s.Join(joinT).On(s.C(tender.FieldID), joinT.C(user.TendersPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(user.TendersPrimaryKey[1]), ids...))
							s.Select(joinT.C(user.TendersPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(user.TendersPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Tenders)
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(user.TendersPrimaryKey[1], limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedTenders(alias, func(wq *TenderQuery) {
				*wq = *query
			})

		case "visitRecords":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&VisitRecordClient{config: u.config}).Query()
			)
			args := newVisitRecordPaginateArgs(fieldArgs(ctx, new(VisitRecordWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newVisitRecordPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"user_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(user.VisitRecordsTable)
							s.Join(joinT).On(s.C(visitrecord.FieldID), joinT.C(user.VisitRecordsPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(user.VisitRecordsPrimaryKey[0]), ids...))
							s.Select(joinT.C(user.VisitRecordsPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(user.VisitRecordsPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.VisitRecords)
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, visitrecordImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(user.VisitRecordsPrimaryKey[0], limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedVisitRecords(alias, func(wq *VisitRecordQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "openID":
			if _, ok := fieldSeen[user.FieldOpenID]; !ok {
				selectedFields = append(selectedFields, user.FieldOpenID)
				fieldSeen[user.FieldOpenID] = struct{}{}
			}
		case "avatarURL":
			if _, ok := fieldSeen[user.FieldAvatarURL]; !ok {
				selectedFields = append(selectedFields, user.FieldAvatarURL)
				fieldSeen[user.FieldAvatarURL] = struct{}{}
			}
		case "disabled":
			if _, ok := fieldSeen[user.FieldDisabled]; !ok {
				selectedFields = append(selectedFields, user.FieldDisabled)
				fieldSeen[user.FieldDisabled] = struct{}{}
			}
		case "isAdmin":
			if _, ok := fieldSeen[user.FieldIsAdmin]; !ok {
				selectedFields = append(selectedFields, user.FieldIsAdmin)
				fieldSeen[user.FieldIsAdmin] = struct{}{}
			}
		case "isLeader":
			if _, ok := fieldSeen[user.FieldIsLeader]; !ok {
				selectedFields = append(selectedFields, user.FieldIsLeader)
				fieldSeen[user.FieldIsLeader] = struct{}{}
			}
		case "leaderID":
			if _, ok := fieldSeen[user.FieldLeaderID]; !ok {
				selectedFields = append(selectedFields, user.FieldLeaderID)
				fieldSeen[user.FieldLeaderID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (vr *VisitRecordQuery) CollectFields(ctx context.Context, satisfies ...string) (*VisitRecordQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return vr, nil
	}
	if err := vr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return vr, nil
}

func (vr *VisitRecordQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(visitrecord.Columns))
		selectedFields = []string{visitrecord.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "tender":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TenderClient{config: vr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, tenderImplementors)...); err != nil {
				return err
			}
			vr.withTender = query
			if _, ok := fieldSeen[visitrecord.FieldTenderID]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldTenderID)
				fieldSeen[visitrecord.FieldTenderID] = struct{}{}
			}

		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: vr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
				return err
			}
			vr.withCustomer = query
			if _, ok := fieldSeen[visitrecord.FieldCustomerID]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldCustomerID)
				fieldSeen[visitrecord.FieldCustomerID] = struct{}{}
			}

		case "followupbys":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: vr.config}).Query()
			)
			args := newUserPaginateArgs(fieldArgs(ctx, new(UserWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newUserPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					vr.loadTotal = append(vr.loadTotal, func(ctx context.Context, nodes []*VisitRecord) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID xid.ID `sql:"visit_record_id"`
							Count  int    `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(visitrecord.FollowUpBysTable)
							s.Join(joinT).On(s.C(user.FieldID), joinT.C(visitrecord.FollowUpBysPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(visitrecord.FollowUpBysPrimaryKey[1]), ids...))
							s.Select(joinT.C(visitrecord.FollowUpBysPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(visitrecord.FollowUpBysPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[xid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					vr.loadTotal = append(vr.loadTotal, func(_ context.Context, nodes []*VisitRecord) error {
						for i := range nodes {
							n := len(nodes[i].Edges.FollowUpBys)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(visitrecord.FollowUpBysPrimaryKey[1], limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			vr.WithNamedFollowUpBys(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[visitrecord.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldCreatedAt)
				fieldSeen[visitrecord.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[visitrecord.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldUpdatedAt)
				fieldSeen[visitrecord.FieldUpdatedAt] = struct{}{}
			}
		case "visitType":
			if _, ok := fieldSeen[visitrecord.FieldVisitType]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldVisitType)
				fieldSeen[visitrecord.FieldVisitType] = struct{}{}
			}
		case "commPeople":
			if _, ok := fieldSeen[visitrecord.FieldCommPeople]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldCommPeople)
				fieldSeen[visitrecord.FieldCommPeople] = struct{}{}
			}
		case "commContent":
			if _, ok := fieldSeen[visitrecord.FieldCommContent]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldCommContent)
				fieldSeen[visitrecord.FieldCommContent] = struct{}{}
			}
		case "nextStep":
			if _, ok := fieldSeen[visitrecord.FieldNextStep]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldNextStep)
				fieldSeen[visitrecord.FieldNextStep] = struct{}{}
			}
		case "date":
			if _, ok := fieldSeen[visitrecord.FieldDate]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldDate)
				fieldSeen[visitrecord.FieldDate] = struct{}{}
			}
		case "tenderID":
			if _, ok := fieldSeen[visitrecord.FieldTenderID]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldTenderID)
				fieldSeen[visitrecord.FieldTenderID] = struct{}{}
			}
		case "customerID":
			if _, ok := fieldSeen[visitrecord.FieldCustomerID]; !ok {
				selectedFields = append(selectedFields, visitrecord.FieldCustomerID)
				fieldSeen[visitrecord.FieldCustomerID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		vr.Select(selectedFields...)
	}
	return nil
}

type visitrecordPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []VisitRecordPaginateOption
}

func newVisitRecordPaginateArgs(rv map[string]any) *visitrecordPaginateArgs {
	args := &visitrecordPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*VisitRecordOrder:
			args.opts = append(args.opts, WithVisitRecordOrder(v))
		case []any:
			var orders []*VisitRecordOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &VisitRecordOrder{Field: &VisitRecordOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithVisitRecordOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*VisitRecordWhereInput); ok {
		args.opts = append(args.opts, WithVisitRecordFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok || v == nil {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
