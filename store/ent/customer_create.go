// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/schema/zht"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CustomerCreate) SetUpdatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CustomerCreate) SetName(s string) *CustomerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetIsApproved sets the "is_approved" field.
func (cc *CustomerCreate) SetIsApproved(b bool) *CustomerCreate {
	cc.mutation.SetIsApproved(b)
	return cc
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableIsApproved(b *bool) *CustomerCreate {
	if b != nil {
		cc.SetIsApproved(*b)
	}
	return cc
}

// SetOwnerType sets the "owner_type" field.
func (cc *CustomerCreate) SetOwnerType(i int) *CustomerCreate {
	cc.mutation.SetOwnerType(i)
	return cc
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableOwnerType(i *int) *CustomerCreate {
	if i != nil {
		cc.SetOwnerType(*i)
	}
	return cc
}

// SetIndustry sets the "industry" field.
func (cc *CustomerCreate) SetIndustry(i int) *CustomerCreate {
	cc.mutation.SetIndustry(i)
	return cc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableIndustry(i *int) *CustomerCreate {
	if i != nil {
		cc.SetIndustry(*i)
	}
	return cc
}

// SetSize sets the "size" field.
func (cc *CustomerCreate) SetSize(i int) *CustomerCreate {
	cc.mutation.SetSize(i)
	return cc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableSize(i *int) *CustomerCreate {
	if i != nil {
		cc.SetSize(*i)
	}
	return cc
}

// SetContactPerson sets the "contact_person" field.
func (cc *CustomerCreate) SetContactPerson(s string) *CustomerCreate {
	cc.mutation.SetContactPerson(s)
	return cc
}

// SetNillableContactPerson sets the "contact_person" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableContactPerson(s *string) *CustomerCreate {
	if s != nil {
		cc.SetContactPerson(*s)
	}
	return cc
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (cc *CustomerCreate) SetContactPersonPosition(s string) *CustomerCreate {
	cc.mutation.SetContactPersonPosition(s)
	return cc
}

// SetNillableContactPersonPosition sets the "contact_person_position" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableContactPersonPosition(s *string) *CustomerCreate {
	if s != nil {
		cc.SetContactPersonPosition(*s)
	}
	return cc
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (cc *CustomerCreate) SetContactPersonPhone(s string) *CustomerCreate {
	cc.mutation.SetContactPersonPhone(s)
	return cc
}

// SetNillableContactPersonPhone sets the "contact_person_phone" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableContactPersonPhone(s *string) *CustomerCreate {
	if s != nil {
		cc.SetContactPersonPhone(*s)
	}
	return cc
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (cc *CustomerCreate) SetContactPersonEmail(s string) *CustomerCreate {
	cc.mutation.SetContactPersonEmail(s)
	return cc
}

// SetNillableContactPersonEmail sets the "contact_person_email" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableContactPersonEmail(s *string) *CustomerCreate {
	if s != nil {
		cc.SetContactPersonEmail(*s)
	}
	return cc
}

// SetFeishuGroup sets the "feishu_group" field.
func (cc *CustomerCreate) SetFeishuGroup(z *zht.Group) *CustomerCreate {
	cc.mutation.SetFeishuGroup(z)
	return cc
}

// SetAreaID sets the "area_id" field.
func (cc *CustomerCreate) SetAreaID(x xid.ID) *CustomerCreate {
	cc.mutation.SetAreaID(x)
	return cc
}

// SetSalesID sets the "sales_id" field.
func (cc *CustomerCreate) SetSalesID(x xid.ID) *CustomerCreate {
	cc.mutation.SetSalesID(x)
	return cc
}

// SetNillableSalesID sets the "sales_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableSalesID(x *xid.ID) *CustomerCreate {
	if x != nil {
		cc.SetSalesID(*x)
	}
	return cc
}

// SetCreatedByID sets the "created_by_id" field.
func (cc *CustomerCreate) SetCreatedByID(x xid.ID) *CustomerCreate {
	cc.mutation.SetCreatedByID(x)
	return cc
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedByID(x *xid.ID) *CustomerCreate {
	if x != nil {
		cc.SetCreatedByID(*x)
	}
	return cc
}

// SetApproverID sets the "approver_id" field.
func (cc *CustomerCreate) SetApproverID(x xid.ID) *CustomerCreate {
	cc.mutation.SetApproverID(x)
	return cc
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableApproverID(x *xid.ID) *CustomerCreate {
	if x != nil {
		cc.SetApproverID(*x)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(x xid.ID) *CustomerCreate {
	cc.mutation.SetID(x)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableID(x *xid.ID) *CustomerCreate {
	if x != nil {
		cc.SetID(*x)
	}
	return cc
}

// SetArea sets the "area" edge to the Area entity.
func (cc *CustomerCreate) SetArea(a *Area) *CustomerCreate {
	return cc.SetAreaID(a.ID)
}

// AddTenderIDs adds the "tenders" edge to the Tender entity by IDs.
func (cc *CustomerCreate) AddTenderIDs(ids ...xid.ID) *CustomerCreate {
	cc.mutation.AddTenderIDs(ids...)
	return cc
}

// AddTenders adds the "tenders" edges to the Tender entity.
func (cc *CustomerCreate) AddTenders(t ...*Tender) *CustomerCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTenderIDs(ids...)
}

// SetSales sets the "sales" edge to the User entity.
func (cc *CustomerCreate) SetSales(u *User) *CustomerCreate {
	return cc.SetSalesID(u.ID)
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cc *CustomerCreate) SetCreatedBy(u *User) *CustomerCreate {
	return cc.SetCreatedByID(u.ID)
}

// SetApprover sets the "approver" edge to the User entity.
func (cc *CustomerCreate) SetApprover(u *User) *CustomerCreate {
	return cc.SetApproverID(u.ID)
}

// AddVisitRecordIDs adds the "visit_records" edge to the VisitRecord entity by IDs.
func (cc *CustomerCreate) AddVisitRecordIDs(ids ...xid.ID) *CustomerCreate {
	cc.mutation.AddVisitRecordIDs(ids...)
	return cc
}

// AddVisitRecords adds the "visit_records" edges to the VisitRecord entity.
func (cc *CustomerCreate) AddVisitRecords(v ...*VisitRecord) *CustomerCreate {
	ids := make([]xid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return cc.AddVisitRecordIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := customer.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := customer.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.IsApproved(); !ok {
		v := customer.DefaultIsApproved
		cc.mutation.SetIsApproved(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := customer.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Customer.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Customer.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Customer.name"`)}
	}
	if _, ok := cc.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "Customer.is_approved"`)}
	}
	if _, ok := cc.mutation.AreaID(); !ok {
		return &ValidationError{Name: "area_id", err: errors.New(`ent: missing required field "Customer.area_id"`)}
	}
	if len(cc.mutation.AreaIDs()) == 0 {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required edge "Customer.area"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.IsApproved(); ok {
		_spec.SetField(customer.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := cc.mutation.OwnerType(); ok {
		_spec.SetField(customer.FieldOwnerType, field.TypeInt, value)
		_node.OwnerType = &value
	}
	if value, ok := cc.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeInt, value)
		_node.Industry = &value
	}
	if value, ok := cc.mutation.Size(); ok {
		_spec.SetField(customer.FieldSize, field.TypeInt, value)
		_node.Size = &value
	}
	if value, ok := cc.mutation.ContactPerson(); ok {
		_spec.SetField(customer.FieldContactPerson, field.TypeString, value)
		_node.ContactPerson = &value
	}
	if value, ok := cc.mutation.ContactPersonPosition(); ok {
		_spec.SetField(customer.FieldContactPersonPosition, field.TypeString, value)
		_node.ContactPersonPosition = &value
	}
	if value, ok := cc.mutation.ContactPersonPhone(); ok {
		_spec.SetField(customer.FieldContactPersonPhone, field.TypeString, value)
		_node.ContactPersonPhone = &value
	}
	if value, ok := cc.mutation.ContactPersonEmail(); ok {
		_spec.SetField(customer.FieldContactPersonEmail, field.TypeString, value)
		_node.ContactPersonEmail = &value
	}
	if value, ok := cc.mutation.FeishuGroup(); ok {
		_spec.SetField(customer.FieldFeishuGroup, field.TypeJSON, value)
		_node.FeishuGroup = value
	}
	if nodes := cc.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.AreaTable,
			Columns: []string{customer.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(area.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AreaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TendersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.TendersTable,
			Columns: []string{customer.TendersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.SalesTable,
			Columns: []string{customer.SalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SalesID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.CreatedByTable,
			Columns: []string{customer.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customer.ApproverTable,
			Columns: []string{customer.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproverID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.VisitRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.VisitRecordsTable,
			Columns: []string{customer.VisitRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(visitrecord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsert) SetUpdatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsert) SetName(v string) *CustomerUpsert {
	u.Set(customer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateName() *CustomerUpsert {
	u.SetExcluded(customer.FieldName)
	return u
}

// SetIsApproved sets the "is_approved" field.
func (u *CustomerUpsert) SetIsApproved(v bool) *CustomerUpsert {
	u.Set(customer.FieldIsApproved, v)
	return u
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateIsApproved() *CustomerUpsert {
	u.SetExcluded(customer.FieldIsApproved)
	return u
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerUpsert) SetOwnerType(v int) *CustomerUpsert {
	u.Set(customer.FieldOwnerType, v)
	return u
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateOwnerType() *CustomerUpsert {
	u.SetExcluded(customer.FieldOwnerType)
	return u
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerUpsert) AddOwnerType(v int) *CustomerUpsert {
	u.Add(customer.FieldOwnerType, v)
	return u
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerUpsert) ClearOwnerType() *CustomerUpsert {
	u.SetNull(customer.FieldOwnerType)
	return u
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsert) SetIndustry(v int) *CustomerUpsert {
	u.Set(customer.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateIndustry() *CustomerUpsert {
	u.SetExcluded(customer.FieldIndustry)
	return u
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerUpsert) AddIndustry(v int) *CustomerUpsert {
	u.Add(customer.FieldIndustry, v)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsert) ClearIndustry() *CustomerUpsert {
	u.SetNull(customer.FieldIndustry)
	return u
}

// SetSize sets the "size" field.
func (u *CustomerUpsert) SetSize(v int) *CustomerUpsert {
	u.Set(customer.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateSize() *CustomerUpsert {
	u.SetExcluded(customer.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *CustomerUpsert) AddSize(v int) *CustomerUpsert {
	u.Add(customer.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *CustomerUpsert) ClearSize() *CustomerUpsert {
	u.SetNull(customer.FieldSize)
	return u
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerUpsert) SetContactPerson(v string) *CustomerUpsert {
	u.Set(customer.FieldContactPerson, v)
	return u
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateContactPerson() *CustomerUpsert {
	u.SetExcluded(customer.FieldContactPerson)
	return u
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerUpsert) ClearContactPerson() *CustomerUpsert {
	u.SetNull(customer.FieldContactPerson)
	return u
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerUpsert) SetContactPersonPosition(v string) *CustomerUpsert {
	u.Set(customer.FieldContactPersonPosition, v)
	return u
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateContactPersonPosition() *CustomerUpsert {
	u.SetExcluded(customer.FieldContactPersonPosition)
	return u
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerUpsert) ClearContactPersonPosition() *CustomerUpsert {
	u.SetNull(customer.FieldContactPersonPosition)
	return u
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerUpsert) SetContactPersonPhone(v string) *CustomerUpsert {
	u.Set(customer.FieldContactPersonPhone, v)
	return u
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateContactPersonPhone() *CustomerUpsert {
	u.SetExcluded(customer.FieldContactPersonPhone)
	return u
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerUpsert) ClearContactPersonPhone() *CustomerUpsert {
	u.SetNull(customer.FieldContactPersonPhone)
	return u
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerUpsert) SetContactPersonEmail(v string) *CustomerUpsert {
	u.Set(customer.FieldContactPersonEmail, v)
	return u
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateContactPersonEmail() *CustomerUpsert {
	u.SetExcluded(customer.FieldContactPersonEmail)
	return u
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerUpsert) ClearContactPersonEmail() *CustomerUpsert {
	u.SetNull(customer.FieldContactPersonEmail)
	return u
}

// SetFeishuGroup sets the "feishu_group" field.
func (u *CustomerUpsert) SetFeishuGroup(v *zht.Group) *CustomerUpsert {
	u.Set(customer.FieldFeishuGroup, v)
	return u
}

// UpdateFeishuGroup sets the "feishu_group" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateFeishuGroup() *CustomerUpsert {
	u.SetExcluded(customer.FieldFeishuGroup)
	return u
}

// ClearFeishuGroup clears the value of the "feishu_group" field.
func (u *CustomerUpsert) ClearFeishuGroup() *CustomerUpsert {
	u.SetNull(customer.FieldFeishuGroup)
	return u
}

// SetAreaID sets the "area_id" field.
func (u *CustomerUpsert) SetAreaID(v xid.ID) *CustomerUpsert {
	u.Set(customer.FieldAreaID, v)
	return u
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAreaID() *CustomerUpsert {
	u.SetExcluded(customer.FieldAreaID)
	return u
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsert) SetSalesID(v xid.ID) *CustomerUpsert {
	u.Set(customer.FieldSalesID, v)
	return u
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateSalesID() *CustomerUpsert {
	u.SetExcluded(customer.FieldSalesID)
	return u
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsert) ClearSalesID() *CustomerUpsert {
	u.SetNull(customer.FieldSalesID)
	return u
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerUpsert) SetCreatedByID(v xid.ID) *CustomerUpsert {
	u.Set(customer.FieldCreatedByID, v)
	return u
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCreatedByID() *CustomerUpsert {
	u.SetExcluded(customer.FieldCreatedByID)
	return u
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerUpsert) ClearCreatedByID() *CustomerUpsert {
	u.SetNull(customer.FieldCreatedByID)
	return u
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerUpsert) SetApproverID(v xid.ID) *CustomerUpsert {
	u.Set(customer.FieldApproverID, v)
	return u
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateApproverID() *CustomerUpsert {
	u.SetExcluded(customer.FieldApproverID)
	return u
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerUpsert) ClearApproverID() *CustomerUpsert {
	u.SetNull(customer.FieldApproverID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertOne) SetUpdatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertOne) SetName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *CustomerUpsertOne) SetIsApproved(v bool) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateIsApproved() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIsApproved()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerUpsertOne) SetOwnerType(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOwnerType(v)
	})
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerUpsertOne) AddOwnerType(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.AddOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateOwnerType() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerUpsertOne) ClearOwnerType() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOwnerType()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsertOne) SetIndustry(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIndustry(v)
	})
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerUpsertOne) AddIndustry(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.AddIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateIndustry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsertOne) ClearIndustry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *CustomerUpsertOne) SetSize(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CustomerUpsertOne) AddSize(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateSize() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *CustomerUpsertOne) ClearSize() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSize()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerUpsertOne) SetContactPerson(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateContactPerson() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerUpsertOne) ClearContactPerson() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerUpsertOne) SetContactPersonPosition(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonPosition(v)
	})
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateContactPersonPosition() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonPosition()
	})
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerUpsertOne) ClearContactPersonPosition() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonPosition()
	})
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerUpsertOne) SetContactPersonPhone(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonPhone(v)
	})
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateContactPersonPhone() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonPhone()
	})
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerUpsertOne) ClearContactPersonPhone() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonPhone()
	})
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerUpsertOne) SetContactPersonEmail(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonEmail(v)
	})
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateContactPersonEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonEmail()
	})
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerUpsertOne) ClearContactPersonEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonEmail()
	})
}

// SetFeishuGroup sets the "feishu_group" field.
func (u *CustomerUpsertOne) SetFeishuGroup(v *zht.Group) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetFeishuGroup(v)
	})
}

// UpdateFeishuGroup sets the "feishu_group" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateFeishuGroup() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateFeishuGroup()
	})
}

// ClearFeishuGroup clears the value of the "feishu_group" field.
func (u *CustomerUpsertOne) ClearFeishuGroup() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearFeishuGroup()
	})
}

// SetAreaID sets the "area_id" field.
func (u *CustomerUpsertOne) SetAreaID(v xid.ID) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAreaID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAreaID()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsertOne) SetSalesID(v xid.ID) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateSalesID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsertOne) ClearSalesID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSalesID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerUpsertOne) SetCreatedByID(v xid.ID) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCreatedByID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCreatedByID()
	})
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerUpsertOne) ClearCreatedByID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCreatedByID()
	})
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerUpsertOne) SetApproverID(v xid.ID) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetApproverID(v)
	})
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateApproverID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateApproverID()
	})
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerUpsertOne) ClearApproverID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearApproverID()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CustomerUpsertOne.ID is not supported by MySQL driver. Use CustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertBulk) SetUpdatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertBulk) SetName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetIsApproved sets the "is_approved" field.
func (u *CustomerUpsertBulk) SetIsApproved(v bool) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIsApproved(v)
	})
}

// UpdateIsApproved sets the "is_approved" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateIsApproved() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIsApproved()
	})
}

// SetOwnerType sets the "owner_type" field.
func (u *CustomerUpsertBulk) SetOwnerType(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetOwnerType(v)
	})
}

// AddOwnerType adds v to the "owner_type" field.
func (u *CustomerUpsertBulk) AddOwnerType(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.AddOwnerType(v)
	})
}

// UpdateOwnerType sets the "owner_type" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateOwnerType() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateOwnerType()
	})
}

// ClearOwnerType clears the value of the "owner_type" field.
func (u *CustomerUpsertBulk) ClearOwnerType() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearOwnerType()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsertBulk) SetIndustry(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIndustry(v)
	})
}

// AddIndustry adds v to the "industry" field.
func (u *CustomerUpsertBulk) AddIndustry(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.AddIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateIndustry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsertBulk) ClearIndustry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearIndustry()
	})
}

// SetSize sets the "size" field.
func (u *CustomerUpsertBulk) SetSize(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *CustomerUpsertBulk) AddSize(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateSize() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *CustomerUpsertBulk) ClearSize() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSize()
	})
}

// SetContactPerson sets the "contact_person" field.
func (u *CustomerUpsertBulk) SetContactPerson(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPerson(v)
	})
}

// UpdateContactPerson sets the "contact_person" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateContactPerson() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPerson()
	})
}

// ClearContactPerson clears the value of the "contact_person" field.
func (u *CustomerUpsertBulk) ClearContactPerson() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPerson()
	})
}

// SetContactPersonPosition sets the "contact_person_position" field.
func (u *CustomerUpsertBulk) SetContactPersonPosition(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonPosition(v)
	})
}

// UpdateContactPersonPosition sets the "contact_person_position" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateContactPersonPosition() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonPosition()
	})
}

// ClearContactPersonPosition clears the value of the "contact_person_position" field.
func (u *CustomerUpsertBulk) ClearContactPersonPosition() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonPosition()
	})
}

// SetContactPersonPhone sets the "contact_person_phone" field.
func (u *CustomerUpsertBulk) SetContactPersonPhone(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonPhone(v)
	})
}

// UpdateContactPersonPhone sets the "contact_person_phone" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateContactPersonPhone() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonPhone()
	})
}

// ClearContactPersonPhone clears the value of the "contact_person_phone" field.
func (u *CustomerUpsertBulk) ClearContactPersonPhone() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonPhone()
	})
}

// SetContactPersonEmail sets the "contact_person_email" field.
func (u *CustomerUpsertBulk) SetContactPersonEmail(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetContactPersonEmail(v)
	})
}

// UpdateContactPersonEmail sets the "contact_person_email" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateContactPersonEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateContactPersonEmail()
	})
}

// ClearContactPersonEmail clears the value of the "contact_person_email" field.
func (u *CustomerUpsertBulk) ClearContactPersonEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearContactPersonEmail()
	})
}

// SetFeishuGroup sets the "feishu_group" field.
func (u *CustomerUpsertBulk) SetFeishuGroup(v *zht.Group) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetFeishuGroup(v)
	})
}

// UpdateFeishuGroup sets the "feishu_group" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateFeishuGroup() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateFeishuGroup()
	})
}

// ClearFeishuGroup clears the value of the "feishu_group" field.
func (u *CustomerUpsertBulk) ClearFeishuGroup() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearFeishuGroup()
	})
}

// SetAreaID sets the "area_id" field.
func (u *CustomerUpsertBulk) SetAreaID(v xid.ID) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAreaID(v)
	})
}

// UpdateAreaID sets the "area_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAreaID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAreaID()
	})
}

// SetSalesID sets the "sales_id" field.
func (u *CustomerUpsertBulk) SetSalesID(v xid.ID) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSalesID(v)
	})
}

// UpdateSalesID sets the "sales_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateSalesID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSalesID()
	})
}

// ClearSalesID clears the value of the "sales_id" field.
func (u *CustomerUpsertBulk) ClearSalesID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSalesID()
	})
}

// SetCreatedByID sets the "created_by_id" field.
func (u *CustomerUpsertBulk) SetCreatedByID(v xid.ID) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCreatedByID(v)
	})
}

// UpdateCreatedByID sets the "created_by_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCreatedByID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCreatedByID()
	})
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (u *CustomerUpsertBulk) ClearCreatedByID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCreatedByID()
	})
}

// SetApproverID sets the "approver_id" field.
func (u *CustomerUpsertBulk) SetApproverID(v xid.ID) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetApproverID(v)
	})
}

// UpdateApproverID sets the "approver_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateApproverID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateApproverID()
	})
}

// ClearApproverID clears the value of the "approver_id" field.
func (u *CustomerUpsertBulk) ClearApproverID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearApproverID()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
