// Code generated by ent, DO NOT EDIT.

package projectvo

import (
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the projectvo type in the database.
	Label = "project_vo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldChangeType holds the string denoting the change_type field in the database.
	FieldChangeType = "change_type"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldAzjd holds the string denoting the azjd field in the database.
	FieldAzjd = "azjd"
	// FieldYxhyze holds the string denoting the yxhyze field in the database.
	FieldYxhyze = "yxhyze"
	// FieldApplyAmount holds the string denoting the apply_amount field in the database.
	FieldApplyAmount = "apply_amount"
	// FieldApproveAmount holds the string denoting the approve_amount field in the database.
	FieldApproveAmount = "approve_amount"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the projectvo in the database.
	Table = "project_vos"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "project_vos"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
)

// Columns holds all SQL columns for projectvo fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProjectID,
	FieldChangeType,
	FieldIsApproved,
	FieldAzjd,
	FieldYxhyze,
	FieldApplyAmount,
	FieldApproveAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultChangeType holds the default value on creation for the "change_type" field.
	DefaultChangeType int
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the ProjectVO queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByChangeType orders the results by the change_type field.
func ByChangeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeType, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByAzjd orders the results by the azjd field.
func ByAzjd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAzjd, opts...).ToFunc()
}

// ByYxhyze orders the results by the yxhyze field.
func ByYxhyze(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYxhyze, opts...).ToFunc()
}

// ByApplyAmount orders the results by the apply_amount field.
func ByApplyAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyAmount, opts...).ToFunc()
}

// ByApproveAmount orders the results by the approve_amount field.
func ByApproveAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveAmount, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
