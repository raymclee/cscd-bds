// Code generated by ent, DO NOT EDIT.

package projectvo

import (
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldProjectID, v))
}

// ChangeType applies equality check predicate on the "change_type" field. It's identical to ChangeTypeEQ.
func ChangeType(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldChangeType, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldIsApproved, v))
}

// Azjd applies equality check predicate on the "azjd" field. It's identical to AzjdEQ.
func Azjd(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldAzjd, v))
}

// Yxhyze applies equality check predicate on the "yxhyze" field. It's identical to YxhyzeEQ.
func Yxhyze(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldYxhyze, v))
}

// ApplyAmount applies equality check predicate on the "apply_amount" field. It's identical to ApplyAmountEQ.
func ApplyAmount(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldApplyAmount, v))
}

// ApproveAmount applies equality check predicate on the "approve_amount" field. It's identical to ApproveAmountEQ.
func ApproveAmount(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldApproveAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v xid.ID) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v xid.ID) predicate.ProjectVO {
	vc := string(v)
	return predicate.ProjectVO(sql.FieldContains(FieldProjectID, vc))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v xid.ID) predicate.ProjectVO {
	vc := string(v)
	return predicate.ProjectVO(sql.FieldHasPrefix(FieldProjectID, vc))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v xid.ID) predicate.ProjectVO {
	vc := string(v)
	return predicate.ProjectVO(sql.FieldHasSuffix(FieldProjectID, vc))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v xid.ID) predicate.ProjectVO {
	vc := string(v)
	return predicate.ProjectVO(sql.FieldEqualFold(FieldProjectID, vc))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v xid.ID) predicate.ProjectVO {
	vc := string(v)
	return predicate.ProjectVO(sql.FieldContainsFold(FieldProjectID, vc))
}

// ChangeTypeEQ applies the EQ predicate on the "change_type" field.
func ChangeTypeEQ(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldChangeType, v))
}

// ChangeTypeNEQ applies the NEQ predicate on the "change_type" field.
func ChangeTypeNEQ(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldChangeType, v))
}

// ChangeTypeIn applies the In predicate on the "change_type" field.
func ChangeTypeIn(vs ...int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldChangeType, vs...))
}

// ChangeTypeNotIn applies the NotIn predicate on the "change_type" field.
func ChangeTypeNotIn(vs ...int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldChangeType, vs...))
}

// ChangeTypeGT applies the GT predicate on the "change_type" field.
func ChangeTypeGT(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldChangeType, v))
}

// ChangeTypeGTE applies the GTE predicate on the "change_type" field.
func ChangeTypeGTE(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldChangeType, v))
}

// ChangeTypeLT applies the LT predicate on the "change_type" field.
func ChangeTypeLT(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldChangeType, v))
}

// ChangeTypeLTE applies the LTE predicate on the "change_type" field.
func ChangeTypeLTE(v int) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldChangeType, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldIsApproved, v))
}

// AzjdEQ applies the EQ predicate on the "azjd" field.
func AzjdEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldAzjd, v))
}

// AzjdNEQ applies the NEQ predicate on the "azjd" field.
func AzjdNEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldAzjd, v))
}

// AzjdIn applies the In predicate on the "azjd" field.
func AzjdIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldAzjd, vs...))
}

// AzjdNotIn applies the NotIn predicate on the "azjd" field.
func AzjdNotIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldAzjd, vs...))
}

// AzjdGT applies the GT predicate on the "azjd" field.
func AzjdGT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldAzjd, v))
}

// AzjdGTE applies the GTE predicate on the "azjd" field.
func AzjdGTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldAzjd, v))
}

// AzjdLT applies the LT predicate on the "azjd" field.
func AzjdLT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldAzjd, v))
}

// AzjdLTE applies the LTE predicate on the "azjd" field.
func AzjdLTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldAzjd, v))
}

// AzjdIsNil applies the IsNil predicate on the "azjd" field.
func AzjdIsNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIsNull(FieldAzjd))
}

// AzjdNotNil applies the NotNil predicate on the "azjd" field.
func AzjdNotNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotNull(FieldAzjd))
}

// YxhyzeEQ applies the EQ predicate on the "yxhyze" field.
func YxhyzeEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldYxhyze, v))
}

// YxhyzeNEQ applies the NEQ predicate on the "yxhyze" field.
func YxhyzeNEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldYxhyze, v))
}

// YxhyzeIn applies the In predicate on the "yxhyze" field.
func YxhyzeIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldYxhyze, vs...))
}

// YxhyzeNotIn applies the NotIn predicate on the "yxhyze" field.
func YxhyzeNotIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldYxhyze, vs...))
}

// YxhyzeGT applies the GT predicate on the "yxhyze" field.
func YxhyzeGT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldYxhyze, v))
}

// YxhyzeGTE applies the GTE predicate on the "yxhyze" field.
func YxhyzeGTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldYxhyze, v))
}

// YxhyzeLT applies the LT predicate on the "yxhyze" field.
func YxhyzeLT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldYxhyze, v))
}

// YxhyzeLTE applies the LTE predicate on the "yxhyze" field.
func YxhyzeLTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldYxhyze, v))
}

// YxhyzeIsNil applies the IsNil predicate on the "yxhyze" field.
func YxhyzeIsNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIsNull(FieldYxhyze))
}

// YxhyzeNotNil applies the NotNil predicate on the "yxhyze" field.
func YxhyzeNotNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotNull(FieldYxhyze))
}

// ApplyAmountEQ applies the EQ predicate on the "apply_amount" field.
func ApplyAmountEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldApplyAmount, v))
}

// ApplyAmountNEQ applies the NEQ predicate on the "apply_amount" field.
func ApplyAmountNEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldApplyAmount, v))
}

// ApplyAmountIn applies the In predicate on the "apply_amount" field.
func ApplyAmountIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldApplyAmount, vs...))
}

// ApplyAmountNotIn applies the NotIn predicate on the "apply_amount" field.
func ApplyAmountNotIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldApplyAmount, vs...))
}

// ApplyAmountGT applies the GT predicate on the "apply_amount" field.
func ApplyAmountGT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldApplyAmount, v))
}

// ApplyAmountGTE applies the GTE predicate on the "apply_amount" field.
func ApplyAmountGTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldApplyAmount, v))
}

// ApplyAmountLT applies the LT predicate on the "apply_amount" field.
func ApplyAmountLT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldApplyAmount, v))
}

// ApplyAmountLTE applies the LTE predicate on the "apply_amount" field.
func ApplyAmountLTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldApplyAmount, v))
}

// ApplyAmountIsNil applies the IsNil predicate on the "apply_amount" field.
func ApplyAmountIsNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIsNull(FieldApplyAmount))
}

// ApplyAmountNotNil applies the NotNil predicate on the "apply_amount" field.
func ApplyAmountNotNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotNull(FieldApplyAmount))
}

// ApproveAmountEQ applies the EQ predicate on the "approve_amount" field.
func ApproveAmountEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldEQ(FieldApproveAmount, v))
}

// ApproveAmountNEQ applies the NEQ predicate on the "approve_amount" field.
func ApproveAmountNEQ(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNEQ(FieldApproveAmount, v))
}

// ApproveAmountIn applies the In predicate on the "approve_amount" field.
func ApproveAmountIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIn(FieldApproveAmount, vs...))
}

// ApproveAmountNotIn applies the NotIn predicate on the "approve_amount" field.
func ApproveAmountNotIn(vs ...float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotIn(FieldApproveAmount, vs...))
}

// ApproveAmountGT applies the GT predicate on the "approve_amount" field.
func ApproveAmountGT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGT(FieldApproveAmount, v))
}

// ApproveAmountGTE applies the GTE predicate on the "approve_amount" field.
func ApproveAmountGTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldGTE(FieldApproveAmount, v))
}

// ApproveAmountLT applies the LT predicate on the "approve_amount" field.
func ApproveAmountLT(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLT(FieldApproveAmount, v))
}

// ApproveAmountLTE applies the LTE predicate on the "approve_amount" field.
func ApproveAmountLTE(v float64) predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldLTE(FieldApproveAmount, v))
}

// ApproveAmountIsNil applies the IsNil predicate on the "approve_amount" field.
func ApproveAmountIsNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldIsNull(FieldApproveAmount))
}

// ApproveAmountNotNil applies the NotNil predicate on the "approve_amount" field.
func ApproveAmountNotNil() predicate.ProjectVO {
	return predicate.ProjectVO(sql.FieldNotNull(FieldApproveAmount))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectVO {
	return predicate.ProjectVO(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectVO {
	return predicate.ProjectVO(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectVO) predicate.ProjectVO {
	return predicate.ProjectVO(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectVO) predicate.ProjectVO {
	return predicate.ProjectVO(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectVO) predicate.ProjectVO {
	return predicate.ProjectVO(sql.NotPredicates(p))
}
