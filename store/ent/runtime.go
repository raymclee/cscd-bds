// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/country"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/operation"
	"cscd-bds/store/ent/plot"
	"cscd-bds/store/ent/potentialtender"
	"cscd-bds/store/ent/project"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	areaMixin := schema.Area{}.Mixin()
	areaMixinFields0 := areaMixin[0].Fields()
	_ = areaMixinFields0
	areaMixinFields1 := areaMixin[1].Fields()
	_ = areaMixinFields1
	areaFields := schema.Area{}.Fields()
	_ = areaFields
	// areaDescCreatedAt is the schema descriptor for created_at field.
	areaDescCreatedAt := areaMixinFields1[0].Descriptor()
	// area.DefaultCreatedAt holds the default value on creation for the created_at field.
	area.DefaultCreatedAt = areaDescCreatedAt.Default.(func() time.Time)
	// areaDescUpdatedAt is the schema descriptor for updated_at field.
	areaDescUpdatedAt := areaMixinFields1[1].Descriptor()
	// area.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	area.DefaultUpdatedAt = areaDescUpdatedAt.Default.(func() time.Time)
	// area.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	area.UpdateDefaultUpdatedAt = areaDescUpdatedAt.UpdateDefault.(func() time.Time)
	// areaDescLeaderChatID is the schema descriptor for leader_chat_id field.
	areaDescLeaderChatID := areaFields[2].Descriptor()
	// area.LeaderChatIDValidator is a validator for the "leader_chat_id" field. It is called by the builders before save.
	area.LeaderChatIDValidator = areaDescLeaderChatID.Validators[0].(func(string) error)
	// areaDescSalesChatID is the schema descriptor for sales_chat_id field.
	areaDescSalesChatID := areaFields[3].Descriptor()
	// area.SalesChatIDValidator is a validator for the "sales_chat_id" field. It is called by the builders before save.
	area.SalesChatIDValidator = areaDescSalesChatID.Validators[0].(func(string) error)
	// areaDescID is the schema descriptor for id field.
	areaDescID := areaMixinFields0[0].Descriptor()
	// area.DefaultID holds the default value on creation for the id field.
	area.DefaultID = areaDescID.Default.(func() xid.ID)
	cityMixin := schema.City{}.Mixin()
	cityMixinFields0 := cityMixin[0].Fields()
	_ = cityMixinFields0
	cityMixinFields1 := cityMixin[1].Fields()
	_ = cityMixinFields1
	cityFields := schema.City{}.Fields()
	_ = cityFields
	// cityDescCreatedAt is the schema descriptor for created_at field.
	cityDescCreatedAt := cityMixinFields1[0].Descriptor()
	// city.DefaultCreatedAt holds the default value on creation for the created_at field.
	city.DefaultCreatedAt = cityDescCreatedAt.Default.(func() time.Time)
	// cityDescUpdatedAt is the schema descriptor for updated_at field.
	cityDescUpdatedAt := cityMixinFields1[1].Descriptor()
	// city.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	city.DefaultUpdatedAt = cityDescUpdatedAt.Default.(func() time.Time)
	// city.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	city.UpdateDefaultUpdatedAt = cityDescUpdatedAt.UpdateDefault.(func() time.Time)
	// cityDescID is the schema descriptor for id field.
	cityDescID := cityMixinFields0[0].Descriptor()
	// city.DefaultID holds the default value on creation for the id field.
	city.DefaultID = cityDescID.Default.(func() xid.ID)
	competitorMixin := schema.Competitor{}.Mixin()
	competitorMixinFields0 := competitorMixin[0].Fields()
	_ = competitorMixinFields0
	competitorMixinFields1 := competitorMixin[1].Fields()
	_ = competitorMixinFields1
	competitorFields := schema.Competitor{}.Fields()
	_ = competitorFields
	// competitorDescCreatedAt is the schema descriptor for created_at field.
	competitorDescCreatedAt := competitorMixinFields1[0].Descriptor()
	// competitor.DefaultCreatedAt holds the default value on creation for the created_at field.
	competitor.DefaultCreatedAt = competitorDescCreatedAt.Default.(func() time.Time)
	// competitorDescUpdatedAt is the schema descriptor for updated_at field.
	competitorDescUpdatedAt := competitorMixinFields1[1].Descriptor()
	// competitor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	competitor.DefaultUpdatedAt = competitorDescUpdatedAt.Default.(func() time.Time)
	// competitor.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	competitor.UpdateDefaultUpdatedAt = competitorDescUpdatedAt.UpdateDefault.(func() time.Time)
	// competitorDescID is the schema descriptor for id field.
	competitorDescID := competitorMixinFields0[0].Descriptor()
	// competitor.DefaultID holds the default value on creation for the id field.
	competitor.DefaultID = competitorDescID.Default.(func() xid.ID)
	countryMixin := schema.Country{}.Mixin()
	countryMixinFields0 := countryMixin[0].Fields()
	_ = countryMixinFields0
	countryMixinFields1 := countryMixin[1].Fields()
	_ = countryMixinFields1
	countryFields := schema.Country{}.Fields()
	_ = countryFields
	// countryDescCreatedAt is the schema descriptor for created_at field.
	countryDescCreatedAt := countryMixinFields1[0].Descriptor()
	// country.DefaultCreatedAt holds the default value on creation for the created_at field.
	country.DefaultCreatedAt = countryDescCreatedAt.Default.(func() time.Time)
	// countryDescUpdatedAt is the schema descriptor for updated_at field.
	countryDescUpdatedAt := countryMixinFields1[1].Descriptor()
	// country.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	country.DefaultUpdatedAt = countryDescUpdatedAt.Default.(func() time.Time)
	// country.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	country.UpdateDefaultUpdatedAt = countryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// countryDescID is the schema descriptor for id field.
	countryDescID := countryMixinFields0[0].Descriptor()
	// country.DefaultID holds the default value on creation for the id field.
	country.DefaultID = countryDescID.Default.(func() xid.ID)
	customerMixin := schema.Customer{}.Mixin()
	customerMixinFields0 := customerMixin[0].Fields()
	_ = customerMixinFields0
	customerMixinFields1 := customerMixin[1].Fields()
	_ = customerMixinFields1
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescCreatedAt is the schema descriptor for created_at field.
	customerDescCreatedAt := customerMixinFields1[0].Descriptor()
	// customer.DefaultCreatedAt holds the default value on creation for the created_at field.
	customer.DefaultCreatedAt = customerDescCreatedAt.Default.(func() time.Time)
	// customerDescUpdatedAt is the schema descriptor for updated_at field.
	customerDescUpdatedAt := customerMixinFields1[1].Descriptor()
	// customer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	customer.DefaultUpdatedAt = customerDescUpdatedAt.Default.(func() time.Time)
	// customer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	customer.UpdateDefaultUpdatedAt = customerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// customerDescApprovalStatus is the schema descriptor for approval_status field.
	customerDescApprovalStatus := customerFields[1].Descriptor()
	// customer.DefaultApprovalStatus holds the default value on creation for the approval_status field.
	customer.DefaultApprovalStatus = customerDescApprovalStatus.Default.(int)
	// customer.ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	customer.ApprovalStatusValidator = func() func(int) error {
		validators := customerDescApprovalStatus.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(approval_status int) error {
			for _, fn := range fns {
				if err := fn(approval_status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// customerDescID is the schema descriptor for id field.
	customerDescID := customerMixinFields0[0].Descriptor()
	// customer.DefaultID holds the default value on creation for the id field.
	customer.DefaultID = customerDescID.Default.(func() xid.ID)
	customerprofileMixin := schema.CustomerProfile{}.Mixin()
	customerprofileMixinFields0 := customerprofileMixin[0].Fields()
	_ = customerprofileMixinFields0
	customerprofileMixinFields1 := customerprofileMixin[1].Fields()
	_ = customerprofileMixinFields1
	customerprofileFields := schema.CustomerProfile{}.Fields()
	_ = customerprofileFields
	// customerprofileDescCreatedAt is the schema descriptor for created_at field.
	customerprofileDescCreatedAt := customerprofileMixinFields1[0].Descriptor()
	// customerprofile.DefaultCreatedAt holds the default value on creation for the created_at field.
	customerprofile.DefaultCreatedAt = customerprofileDescCreatedAt.Default.(func() time.Time)
	// customerprofileDescUpdatedAt is the schema descriptor for updated_at field.
	customerprofileDescUpdatedAt := customerprofileMixinFields1[1].Descriptor()
	// customerprofile.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	customerprofile.DefaultUpdatedAt = customerprofileDescUpdatedAt.Default.(func() time.Time)
	// customerprofile.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	customerprofile.UpdateDefaultUpdatedAt = customerprofileDescUpdatedAt.UpdateDefault.(func() time.Time)
	// customerprofileDescName is the schema descriptor for name field.
	customerprofileDescName := customerprofileFields[0].Descriptor()
	// customerprofile.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customerprofile.NameValidator = customerprofileDescName.Validators[0].(func(string) error)
	// customerprofileDescApprovalStatus is the schema descriptor for approval_status field.
	customerprofileDescApprovalStatus := customerprofileFields[1].Descriptor()
	// customerprofile.DefaultApprovalStatus holds the default value on creation for the approval_status field.
	customerprofile.DefaultApprovalStatus = customerprofileDescApprovalStatus.Default.(int)
	// customerprofile.ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	customerprofile.ApprovalStatusValidator = customerprofileDescApprovalStatus.Validators[0].(func(int) error)
	// customerprofileDescID is the schema descriptor for id field.
	customerprofileDescID := customerprofileMixinFields0[0].Descriptor()
	// customerprofile.DefaultID holds the default value on creation for the id field.
	customerprofile.DefaultID = customerprofileDescID.Default.(func() xid.ID)
	districtMixin := schema.District{}.Mixin()
	districtMixinFields0 := districtMixin[0].Fields()
	_ = districtMixinFields0
	districtMixinFields1 := districtMixin[1].Fields()
	_ = districtMixinFields1
	districtFields := schema.District{}.Fields()
	_ = districtFields
	// districtDescCreatedAt is the schema descriptor for created_at field.
	districtDescCreatedAt := districtMixinFields1[0].Descriptor()
	// district.DefaultCreatedAt holds the default value on creation for the created_at field.
	district.DefaultCreatedAt = districtDescCreatedAt.Default.(func() time.Time)
	// districtDescUpdatedAt is the schema descriptor for updated_at field.
	districtDescUpdatedAt := districtMixinFields1[1].Descriptor()
	// district.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	district.DefaultUpdatedAt = districtDescUpdatedAt.Default.(func() time.Time)
	// district.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	district.UpdateDefaultUpdatedAt = districtDescUpdatedAt.UpdateDefault.(func() time.Time)
	// districtDescID is the schema descriptor for id field.
	districtDescID := districtMixinFields0[0].Descriptor()
	// district.DefaultID holds the default value on creation for the id field.
	district.DefaultID = districtDescID.Default.(func() xid.ID)
	operationMixin := schema.Operation{}.Mixin()
	operationMixinFields0 := operationMixin[0].Fields()
	_ = operationMixinFields0
	operationMixinFields1 := operationMixin[1].Fields()
	_ = operationMixinFields1
	operationFields := schema.Operation{}.Fields()
	_ = operationFields
	// operationDescCreatedAt is the schema descriptor for created_at field.
	operationDescCreatedAt := operationMixinFields1[0].Descriptor()
	// operation.DefaultCreatedAt holds the default value on creation for the created_at field.
	operation.DefaultCreatedAt = operationDescCreatedAt.Default.(func() time.Time)
	// operationDescUpdatedAt is the schema descriptor for updated_at field.
	operationDescUpdatedAt := operationMixinFields1[1].Descriptor()
	// operation.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	operation.DefaultUpdatedAt = operationDescUpdatedAt.Default.(func() time.Time)
	// operation.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	operation.UpdateDefaultUpdatedAt = operationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// operationDescID is the schema descriptor for id field.
	operationDescID := operationMixinFields0[0].Descriptor()
	// operation.DefaultID holds the default value on creation for the id field.
	operation.DefaultID = operationDescID.Default.(func() xid.ID)
	plotMixin := schema.Plot{}.Mixin()
	plotMixinFields0 := plotMixin[0].Fields()
	_ = plotMixinFields0
	plotMixinFields1 := plotMixin[1].Fields()
	_ = plotMixinFields1
	plotFields := schema.Plot{}.Fields()
	_ = plotFields
	// plotDescCreatedAt is the schema descriptor for created_at field.
	plotDescCreatedAt := plotMixinFields1[0].Descriptor()
	// plot.DefaultCreatedAt holds the default value on creation for the created_at field.
	plot.DefaultCreatedAt = plotDescCreatedAt.Default.(func() time.Time)
	// plotDescUpdatedAt is the schema descriptor for updated_at field.
	plotDescUpdatedAt := plotMixinFields1[1].Descriptor()
	// plot.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	plot.DefaultUpdatedAt = plotDescUpdatedAt.Default.(func() time.Time)
	// plot.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	plot.UpdateDefaultUpdatedAt = plotDescUpdatedAt.UpdateDefault.(func() time.Time)
	// plotDescID is the schema descriptor for id field.
	plotDescID := plotMixinFields0[0].Descriptor()
	// plot.DefaultID holds the default value on creation for the id field.
	plot.DefaultID = plotDescID.Default.(func() xid.ID)
	potentialtenderMixin := schema.PotentialTender{}.Mixin()
	potentialtenderMixinFields0 := potentialtenderMixin[0].Fields()
	_ = potentialtenderMixinFields0
	potentialtenderMixinFields1 := potentialtenderMixin[1].Fields()
	_ = potentialtenderMixinFields1
	potentialtenderFields := schema.PotentialTender{}.Fields()
	_ = potentialtenderFields
	// potentialtenderDescCreatedAt is the schema descriptor for created_at field.
	potentialtenderDescCreatedAt := potentialtenderMixinFields1[0].Descriptor()
	// potentialtender.DefaultCreatedAt holds the default value on creation for the created_at field.
	potentialtender.DefaultCreatedAt = potentialtenderDescCreatedAt.Default.(func() time.Time)
	// potentialtenderDescUpdatedAt is the schema descriptor for updated_at field.
	potentialtenderDescUpdatedAt := potentialtenderMixinFields1[1].Descriptor()
	// potentialtender.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	potentialtender.DefaultUpdatedAt = potentialtenderDescUpdatedAt.Default.(func() time.Time)
	// potentialtender.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	potentialtender.UpdateDefaultUpdatedAt = potentialtenderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// potentialtenderDescID is the schema descriptor for id field.
	potentialtenderDescID := potentialtenderMixinFields0[0].Descriptor()
	// potentialtender.DefaultID holds the default value on creation for the id field.
	potentialtender.DefaultID = potentialtenderDescID.Default.(func() xid.ID)
	projectMixin := schema.Project{}.Mixin()
	projectMixinFields0 := projectMixin[0].Fields()
	_ = projectMixinFields0
	projectMixinFields1 := projectMixin[1].Fields()
	_ = projectMixinFields1
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectMixinFields1[0].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectMixinFields1[1].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// projectDescIsFinished is the schema descriptor for is_finished field.
	projectDescIsFinished := projectFields[1].Descriptor()
	// project.DefaultIsFinished holds the default value on creation for the is_finished field.
	project.DefaultIsFinished = projectDescIsFinished.Default.(bool)
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectMixinFields0[0].Descriptor()
	// project.DefaultID holds the default value on creation for the id field.
	project.DefaultID = projectDescID.Default.(func() xid.ID)
	provinceMixin := schema.Province{}.Mixin()
	provinceMixinFields0 := provinceMixin[0].Fields()
	_ = provinceMixinFields0
	provinceMixinFields1 := provinceMixin[1].Fields()
	_ = provinceMixinFields1
	provinceFields := schema.Province{}.Fields()
	_ = provinceFields
	// provinceDescCreatedAt is the schema descriptor for created_at field.
	provinceDescCreatedAt := provinceMixinFields1[0].Descriptor()
	// province.DefaultCreatedAt holds the default value on creation for the created_at field.
	province.DefaultCreatedAt = provinceDescCreatedAt.Default.(func() time.Time)
	// provinceDescUpdatedAt is the schema descriptor for updated_at field.
	provinceDescUpdatedAt := provinceMixinFields1[1].Descriptor()
	// province.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	province.DefaultUpdatedAt = provinceDescUpdatedAt.Default.(func() time.Time)
	// province.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	province.UpdateDefaultUpdatedAt = provinceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// provinceDescID is the schema descriptor for id field.
	provinceDescID := provinceMixinFields0[0].Descriptor()
	// province.DefaultID holds the default value on creation for the id field.
	province.DefaultID = provinceDescID.Default.(func() xid.ID)
	tenderMixin := schema.Tender{}.Mixin()
	tenderMixinFields0 := tenderMixin[0].Fields()
	_ = tenderMixinFields0
	tenderMixinFields1 := tenderMixin[1].Fields()
	_ = tenderMixinFields1
	tenderFields := schema.Tender{}.Fields()
	_ = tenderFields
	// tenderDescCreatedAt is the schema descriptor for created_at field.
	tenderDescCreatedAt := tenderMixinFields1[0].Descriptor()
	// tender.DefaultCreatedAt holds the default value on creation for the created_at field.
	tender.DefaultCreatedAt = tenderDescCreatedAt.Default.(func() time.Time)
	// tenderDescUpdatedAt is the schema descriptor for updated_at field.
	tenderDescUpdatedAt := tenderMixinFields1[1].Descriptor()
	// tender.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tender.DefaultUpdatedAt = tenderDescUpdatedAt.Default.(func() time.Time)
	// tender.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tender.UpdateDefaultUpdatedAt = tenderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tenderDescStatus is the schema descriptor for status field.
	tenderDescStatus := tenderFields[1].Descriptor()
	// tender.DefaultStatus holds the default value on creation for the status field.
	tender.DefaultStatus = tenderDescStatus.Default.(int)
	// tenderDescApprovalStatus is the schema descriptor for approval_status field.
	tenderDescApprovalStatus := tenderFields[2].Descriptor()
	// tender.DefaultApprovalStatus holds the default value on creation for the approval_status field.
	tender.DefaultApprovalStatus = tenderDescApprovalStatus.Default.(int)
	// tender.ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	tender.ApprovalStatusValidator = func() func(int) error {
		validators := tenderDescApprovalStatus.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(approval_status int) error {
			for _, fn := range fns {
				if err := fn(approval_status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescClassify is the schema descriptor for classify field.
	tenderDescClassify := tenderFields[7].Descriptor()
	// tender.ClassifyValidator is a validator for the "classify" field. It is called by the builders before save.
	tender.ClassifyValidator = func() func(int) error {
		validators := tenderDescClassify.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(classify int) error {
			for _, fn := range fns {
				if err := fn(classify); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescLevelInvolved is the schema descriptor for level_involved field.
	tenderDescLevelInvolved := tenderFields[12].Descriptor()
	// tender.LevelInvolvedValidator is a validator for the "level_involved" field. It is called by the builders before save.
	tender.LevelInvolvedValidator = func() func(int) error {
		validators := tenderDescLevelInvolved.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(level_involved int) error {
			for _, fn := range fns {
				if err := fn(level_involved); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescSizeAndValueRating is the schema descriptor for size_and_value_rating field.
	tenderDescSizeAndValueRating := tenderFields[13].Descriptor()
	// tender.SizeAndValueRatingValidator is a validator for the "size_and_value_rating" field. It is called by the builders before save.
	tender.SizeAndValueRatingValidator = func() func(int) error {
		validators := tenderDescSizeAndValueRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(size_and_value_rating int) error {
			for _, fn := range fns {
				if err := fn(size_and_value_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescCreditAndPaymentRating is the schema descriptor for credit_and_payment_rating field.
	tenderDescCreditAndPaymentRating := tenderFields[15].Descriptor()
	// tender.CreditAndPaymentRatingValidator is a validator for the "credit_and_payment_rating" field. It is called by the builders before save.
	tender.CreditAndPaymentRatingValidator = func() func(int) error {
		validators := tenderDescCreditAndPaymentRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(credit_and_payment_rating int) error {
			for _, fn := range fns {
				if err := fn(credit_and_payment_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescTimeLimitRating is the schema descriptor for time_limit_rating field.
	tenderDescTimeLimitRating := tenderFields[17].Descriptor()
	// tender.TimeLimitRatingValidator is a validator for the "time_limit_rating" field. It is called by the builders before save.
	tender.TimeLimitRatingValidator = func() func(int) error {
		validators := tenderDescTimeLimitRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(time_limit_rating int) error {
			for _, fn := range fns {
				if err := fn(time_limit_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescCustomerRelationshipRating is the schema descriptor for customer_relationship_rating field.
	tenderDescCustomerRelationshipRating := tenderFields[19].Descriptor()
	// tender.CustomerRelationshipRatingValidator is a validator for the "customer_relationship_rating" field. It is called by the builders before save.
	tender.CustomerRelationshipRatingValidator = func() func(int) error {
		validators := tenderDescCustomerRelationshipRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(customer_relationship_rating int) error {
			for _, fn := range fns {
				if err := fn(customer_relationship_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescCompetitivePartnershipRating is the schema descriptor for competitive_partnership_rating field.
	tenderDescCompetitivePartnershipRating := tenderFields[21].Descriptor()
	// tender.CompetitivePartnershipRatingValidator is a validator for the "competitive_partnership_rating" field. It is called by the builders before save.
	tender.CompetitivePartnershipRatingValidator = func() func(int) error {
		validators := tenderDescCompetitivePartnershipRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(competitive_partnership_rating int) error {
			for _, fn := range fns {
				if err := fn(competitive_partnership_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderDescPrepareToBid is the schema descriptor for prepare_to_bid field.
	tenderDescPrepareToBid := tenderFields[23].Descriptor()
	// tender.DefaultPrepareToBid holds the default value on creation for the prepare_to_bid field.
	tender.DefaultPrepareToBid = tenderDescPrepareToBid.Default.(bool)
	// tenderDescProjectType is the schema descriptor for project_type field.
	tenderDescProjectType := tenderFields[25].Descriptor()
	// tender.ProjectTypeValidator is a validator for the "project_type" field. It is called by the builders before save.
	tender.ProjectTypeValidator = tenderDescProjectType.Validators[0].(func(string) error)
	// tenderDescProjectDefinition is the schema descriptor for project_definition field.
	tenderDescProjectDefinition := tenderFields[26].Descriptor()
	// tender.ProjectDefinitionValidator is a validator for the "project_definition" field. It is called by the builders before save.
	tender.ProjectDefinitionValidator = tenderDescProjectDefinition.Validators[0].(func(string) error)
	// tenderDescKeyProject is the schema descriptor for key_project field.
	tenderDescKeyProject := tenderFields[47].Descriptor()
	// tender.DefaultKeyProject holds the default value on creation for the key_project field.
	tender.DefaultKeyProject = tenderDescKeyProject.Default.(bool)
	// tenderDescID is the schema descriptor for id field.
	tenderDescID := tenderMixinFields0[0].Descriptor()
	// tender.DefaultID holds the default value on creation for the id field.
	tender.DefaultID = tenderDescID.Default.(func() xid.ID)
	tendercompetitorMixin := schema.TenderCompetitor{}.Mixin()
	tendercompetitorMixinFields0 := tendercompetitorMixin[0].Fields()
	_ = tendercompetitorMixinFields0
	tendercompetitorMixinFields1 := tendercompetitorMixin[1].Fields()
	_ = tendercompetitorMixinFields1
	tendercompetitorFields := schema.TenderCompetitor{}.Fields()
	_ = tendercompetitorFields
	// tendercompetitorDescCreatedAt is the schema descriptor for created_at field.
	tendercompetitorDescCreatedAt := tendercompetitorMixinFields1[0].Descriptor()
	// tendercompetitor.DefaultCreatedAt holds the default value on creation for the created_at field.
	tendercompetitor.DefaultCreatedAt = tendercompetitorDescCreatedAt.Default.(func() time.Time)
	// tendercompetitorDescUpdatedAt is the schema descriptor for updated_at field.
	tendercompetitorDescUpdatedAt := tendercompetitorMixinFields1[1].Descriptor()
	// tendercompetitor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tendercompetitor.DefaultUpdatedAt = tendercompetitorDescUpdatedAt.Default.(func() time.Time)
	// tendercompetitor.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tendercompetitor.UpdateDefaultUpdatedAt = tendercompetitorDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tendercompetitorDescResult is the schema descriptor for result field.
	tendercompetitorDescResult := tendercompetitorFields[3].Descriptor()
	// tendercompetitor.DefaultResult holds the default value on creation for the result field.
	tendercompetitor.DefaultResult = tendercompetitorDescResult.Default.(bool)
	// tendercompetitorDescID is the schema descriptor for id field.
	tendercompetitorDescID := tendercompetitorMixinFields0[0].Descriptor()
	// tendercompetitor.DefaultID holds the default value on creation for the id field.
	tendercompetitor.DefaultID = tendercompetitorDescID.Default.(func() xid.ID)
	tenderprofileMixin := schema.TenderProfile{}.Mixin()
	tenderprofileMixinFields0 := tenderprofileMixin[0].Fields()
	_ = tenderprofileMixinFields0
	tenderprofileMixinFields1 := tenderprofileMixin[1].Fields()
	_ = tenderprofileMixinFields1
	tenderprofileFields := schema.TenderProfile{}.Fields()
	_ = tenderprofileFields
	// tenderprofileDescCreatedAt is the schema descriptor for created_at field.
	tenderprofileDescCreatedAt := tenderprofileMixinFields1[0].Descriptor()
	// tenderprofile.DefaultCreatedAt holds the default value on creation for the created_at field.
	tenderprofile.DefaultCreatedAt = tenderprofileDescCreatedAt.Default.(func() time.Time)
	// tenderprofileDescUpdatedAt is the schema descriptor for updated_at field.
	tenderprofileDescUpdatedAt := tenderprofileMixinFields1[1].Descriptor()
	// tenderprofile.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tenderprofile.DefaultUpdatedAt = tenderprofileDescUpdatedAt.Default.(func() time.Time)
	// tenderprofile.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tenderprofile.UpdateDefaultUpdatedAt = tenderprofileDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tenderprofileDescStatus is the schema descriptor for status field.
	tenderprofileDescStatus := tenderprofileFields[0].Descriptor()
	// tenderprofile.DefaultStatus holds the default value on creation for the status field.
	tenderprofile.DefaultStatus = tenderprofileDescStatus.Default.(int)
	// tenderprofileDescApprovalStatus is the schema descriptor for approval_status field.
	tenderprofileDescApprovalStatus := tenderprofileFields[1].Descriptor()
	// tenderprofile.DefaultApprovalStatus holds the default value on creation for the approval_status field.
	tenderprofile.DefaultApprovalStatus = tenderprofileDescApprovalStatus.Default.(int)
	// tenderprofile.ApprovalStatusValidator is a validator for the "approval_status" field. It is called by the builders before save.
	tenderprofile.ApprovalStatusValidator = tenderprofileDescApprovalStatus.Validators[0].(func(int) error)
	// tenderprofileDescName is the schema descriptor for name field.
	tenderprofileDescName := tenderprofileFields[3].Descriptor()
	// tenderprofile.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenderprofile.NameValidator = tenderprofileDescName.Validators[0].(func(string) error)
	// tenderprofileDescClassify is the schema descriptor for classify field.
	tenderprofileDescClassify := tenderprofileFields[6].Descriptor()
	// tenderprofile.ClassifyValidator is a validator for the "classify" field. It is called by the builders before save.
	tenderprofile.ClassifyValidator = func() func(int) error {
		validators := tenderprofileDescClassify.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(classify int) error {
			for _, fn := range fns {
				if err := fn(classify); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescLevelInvolved is the schema descriptor for level_involved field.
	tenderprofileDescLevelInvolved := tenderprofileFields[11].Descriptor()
	// tenderprofile.LevelInvolvedValidator is a validator for the "level_involved" field. It is called by the builders before save.
	tenderprofile.LevelInvolvedValidator = func() func(int) error {
		validators := tenderprofileDescLevelInvolved.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(level_involved int) error {
			for _, fn := range fns {
				if err := fn(level_involved); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescSizeAndValueRating is the schema descriptor for size_and_value_rating field.
	tenderprofileDescSizeAndValueRating := tenderprofileFields[12].Descriptor()
	// tenderprofile.SizeAndValueRatingValidator is a validator for the "size_and_value_rating" field. It is called by the builders before save.
	tenderprofile.SizeAndValueRatingValidator = func() func(int) error {
		validators := tenderprofileDescSizeAndValueRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(size_and_value_rating int) error {
			for _, fn := range fns {
				if err := fn(size_and_value_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescCreditAndPaymentRating is the schema descriptor for credit_and_payment_rating field.
	tenderprofileDescCreditAndPaymentRating := tenderprofileFields[14].Descriptor()
	// tenderprofile.CreditAndPaymentRatingValidator is a validator for the "credit_and_payment_rating" field. It is called by the builders before save.
	tenderprofile.CreditAndPaymentRatingValidator = func() func(int) error {
		validators := tenderprofileDescCreditAndPaymentRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(credit_and_payment_rating int) error {
			for _, fn := range fns {
				if err := fn(credit_and_payment_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescTimeLimitRating is the schema descriptor for time_limit_rating field.
	tenderprofileDescTimeLimitRating := tenderprofileFields[16].Descriptor()
	// tenderprofile.TimeLimitRatingValidator is a validator for the "time_limit_rating" field. It is called by the builders before save.
	tenderprofile.TimeLimitRatingValidator = func() func(int) error {
		validators := tenderprofileDescTimeLimitRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(time_limit_rating int) error {
			for _, fn := range fns {
				if err := fn(time_limit_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescCustomerRelationshipRating is the schema descriptor for customer_relationship_rating field.
	tenderprofileDescCustomerRelationshipRating := tenderprofileFields[18].Descriptor()
	// tenderprofile.CustomerRelationshipRatingValidator is a validator for the "customer_relationship_rating" field. It is called by the builders before save.
	tenderprofile.CustomerRelationshipRatingValidator = func() func(int) error {
		validators := tenderprofileDescCustomerRelationshipRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(customer_relationship_rating int) error {
			for _, fn := range fns {
				if err := fn(customer_relationship_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescCompetitivePartnershipRating is the schema descriptor for competitive_partnership_rating field.
	tenderprofileDescCompetitivePartnershipRating := tenderprofileFields[20].Descriptor()
	// tenderprofile.CompetitivePartnershipRatingValidator is a validator for the "competitive_partnership_rating" field. It is called by the builders before save.
	tenderprofile.CompetitivePartnershipRatingValidator = func() func(int) error {
		validators := tenderprofileDescCompetitivePartnershipRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(competitive_partnership_rating int) error {
			for _, fn := range fns {
				if err := fn(competitive_partnership_rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenderprofileDescPrepareToBid is the schema descriptor for prepare_to_bid field.
	tenderprofileDescPrepareToBid := tenderprofileFields[22].Descriptor()
	// tenderprofile.DefaultPrepareToBid holds the default value on creation for the prepare_to_bid field.
	tenderprofile.DefaultPrepareToBid = tenderprofileDescPrepareToBid.Default.(bool)
	// tenderprofileDescKeyProject is the schema descriptor for key_project field.
	tenderprofileDescKeyProject := tenderprofileFields[46].Descriptor()
	// tenderprofile.DefaultKeyProject holds the default value on creation for the key_project field.
	tenderprofile.DefaultKeyProject = tenderprofileDescKeyProject.Default.(bool)
	// tenderprofileDescTenderWinAmount is the schema descriptor for tender_win_amount field.
	tenderprofileDescTenderWinAmount := tenderprofileFields[55].Descriptor()
	// tenderprofile.TenderWinAmountValidator is a validator for the "tender_win_amount" field. It is called by the builders before save.
	tenderprofile.TenderWinAmountValidator = tenderprofileDescTenderWinAmount.Validators[0].(func(float64) error)
	// tenderprofileDescLastTenderAmount is the schema descriptor for last_tender_amount field.
	tenderprofileDescLastTenderAmount := tenderprofileFields[56].Descriptor()
	// tenderprofile.LastTenderAmountValidator is a validator for the "last_tender_amount" field. It is called by the builders before save.
	tenderprofile.LastTenderAmountValidator = tenderprofileDescLastTenderAmount.Validators[0].(func(float64) error)
	// tenderprofileDescID is the schema descriptor for id field.
	tenderprofileDescID := tenderprofileMixinFields0[0].Descriptor()
	// tenderprofile.DefaultID holds the default value on creation for the id field.
	tenderprofile.DefaultID = tenderprofileDescID.Default.(func() xid.ID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescOpenID is the schema descriptor for open_id field.
	userDescOpenID := userFields[0].Descriptor()
	// user.OpenIDValidator is a validator for the "open_id" field. It is called by the builders before save.
	user.OpenIDValidator = userDescOpenID.Validators[0].(func(string) error)
	// userDescDisabled is the schema descriptor for disabled field.
	userDescDisabled := userFields[5].Descriptor()
	// user.DefaultDisabled holds the default value on creation for the disabled field.
	user.DefaultDisabled = userDescDisabled.Default.(bool)
	// userDescIsAdmin is the schema descriptor for is_admin field.
	userDescIsAdmin := userFields[6].Descriptor()
	// user.DefaultIsAdmin holds the default value on creation for the is_admin field.
	user.DefaultIsAdmin = userDescIsAdmin.Default.(bool)
	// userDescIsCeo is the schema descriptor for is_ceo field.
	userDescIsCeo := userFields[7].Descriptor()
	// user.DefaultIsCeo holds the default value on creation for the is_ceo field.
	user.DefaultIsCeo = userDescIsCeo.Default.(bool)
	// userDescIsSuperAdmin is the schema descriptor for is_super_admin field.
	userDescIsSuperAdmin := userFields[8].Descriptor()
	// user.DefaultIsSuperAdmin holds the default value on creation for the is_super_admin field.
	user.DefaultIsSuperAdmin = userDescIsSuperAdmin.Default.(bool)
	// userDescHasMapAccess is the schema descriptor for has_map_access field.
	userDescHasMapAccess := userFields[9].Descriptor()
	// user.DefaultHasMapAccess holds the default value on creation for the has_map_access field.
	user.DefaultHasMapAccess = userDescHasMapAccess.Default.(bool)
	// userDescHasEditAccess is the schema descriptor for has_edit_access field.
	userDescHasEditAccess := userFields[10].Descriptor()
	// user.DefaultHasEditAccess holds the default value on creation for the has_edit_access field.
	user.DefaultHasEditAccess = userDescHasEditAccess.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() xid.ID)
	visitrecordMixin := schema.VisitRecord{}.Mixin()
	visitrecordMixinFields0 := visitrecordMixin[0].Fields()
	_ = visitrecordMixinFields0
	visitrecordMixinFields1 := visitrecordMixin[1].Fields()
	_ = visitrecordMixinFields1
	visitrecordFields := schema.VisitRecord{}.Fields()
	_ = visitrecordFields
	// visitrecordDescCreatedAt is the schema descriptor for created_at field.
	visitrecordDescCreatedAt := visitrecordMixinFields1[0].Descriptor()
	// visitrecord.DefaultCreatedAt holds the default value on creation for the created_at field.
	visitrecord.DefaultCreatedAt = visitrecordDescCreatedAt.Default.(func() time.Time)
	// visitrecordDescUpdatedAt is the schema descriptor for updated_at field.
	visitrecordDescUpdatedAt := visitrecordMixinFields1[1].Descriptor()
	// visitrecord.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	visitrecord.DefaultUpdatedAt = visitrecordDescUpdatedAt.Default.(func() time.Time)
	// visitrecord.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	visitrecord.UpdateDefaultUpdatedAt = visitrecordDescUpdatedAt.UpdateDefault.(func() time.Time)
	// visitrecordDescVisitType is the schema descriptor for visit_type field.
	visitrecordDescVisitType := visitrecordFields[0].Descriptor()
	// visitrecord.DefaultVisitType holds the default value on creation for the visit_type field.
	visitrecord.DefaultVisitType = visitrecordDescVisitType.Default.(int)
	// visitrecordDescCommPeople is the schema descriptor for comm_people field.
	visitrecordDescCommPeople := visitrecordFields[1].Descriptor()
	// visitrecord.CommPeopleValidator is a validator for the "comm_people" field. It is called by the builders before save.
	visitrecord.CommPeopleValidator = visitrecordDescCommPeople.Validators[0].(func(string) error)
	// visitrecordDescCommContent is the schema descriptor for comm_content field.
	visitrecordDescCommContent := visitrecordFields[2].Descriptor()
	// visitrecord.CommContentValidator is a validator for the "comm_content" field. It is called by the builders before save.
	visitrecord.CommContentValidator = visitrecordDescCommContent.Validators[0].(func(string) error)
	// visitrecordDescID is the schema descriptor for id field.
	visitrecordDescID := visitrecordMixinFields0[0].Descriptor()
	// visitrecord.DefaultID holds the default value on creation for the id field.
	visitrecord.DefaultID = visitrecordDescID.Default.(func() xid.ID)
}
