// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tendercompetitor"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderCompetitorUpdate is the builder for updating TenderCompetitor entities.
type TenderCompetitorUpdate struct {
	config
	hooks    []Hook
	mutation *TenderCompetitorMutation
}

// Where appends a list predicates to the TenderCompetitorUpdate builder.
func (tcu *TenderCompetitorUpdate) Where(ps ...predicate.TenderCompetitor) *TenderCompetitorUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TenderCompetitorUpdate) SetUpdatedAt(t time.Time) *TenderCompetitorUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetTenderID sets the "tender_id" field.
func (tcu *TenderCompetitorUpdate) SetTenderID(x xid.ID) *TenderCompetitorUpdate {
	tcu.mutation.SetTenderID(x)
	return tcu
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (tcu *TenderCompetitorUpdate) SetNillableTenderID(x *xid.ID) *TenderCompetitorUpdate {
	if x != nil {
		tcu.SetTenderID(*x)
	}
	return tcu
}

// SetCompetitorID sets the "competitor_id" field.
func (tcu *TenderCompetitorUpdate) SetCompetitorID(x xid.ID) *TenderCompetitorUpdate {
	tcu.mutation.SetCompetitorID(x)
	return tcu
}

// SetNillableCompetitorID sets the "competitor_id" field if the given value is not nil.
func (tcu *TenderCompetitorUpdate) SetNillableCompetitorID(x *xid.ID) *TenderCompetitorUpdate {
	if x != nil {
		tcu.SetCompetitorID(*x)
	}
	return tcu
}

// SetAmount sets the "amount" field.
func (tcu *TenderCompetitorUpdate) SetAmount(f float64) *TenderCompetitorUpdate {
	tcu.mutation.ResetAmount()
	tcu.mutation.SetAmount(f)
	return tcu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tcu *TenderCompetitorUpdate) SetNillableAmount(f *float64) *TenderCompetitorUpdate {
	if f != nil {
		tcu.SetAmount(*f)
	}
	return tcu
}

// AddAmount adds f to the "amount" field.
func (tcu *TenderCompetitorUpdate) AddAmount(f float64) *TenderCompetitorUpdate {
	tcu.mutation.AddAmount(f)
	return tcu
}

// SetTender sets the "tender" edge to the Tender entity.
func (tcu *TenderCompetitorUpdate) SetTender(t *Tender) *TenderCompetitorUpdate {
	return tcu.SetTenderID(t.ID)
}

// SetCompetitor sets the "competitor" edge to the Competitor entity.
func (tcu *TenderCompetitorUpdate) SetCompetitor(c *Competitor) *TenderCompetitorUpdate {
	return tcu.SetCompetitorID(c.ID)
}

// Mutation returns the TenderCompetitorMutation object of the builder.
func (tcu *TenderCompetitorUpdate) Mutation() *TenderCompetitorMutation {
	return tcu.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (tcu *TenderCompetitorUpdate) ClearTender() *TenderCompetitorUpdate {
	tcu.mutation.ClearTender()
	return tcu
}

// ClearCompetitor clears the "competitor" edge to the Competitor entity.
func (tcu *TenderCompetitorUpdate) ClearCompetitor() *TenderCompetitorUpdate {
	tcu.mutation.ClearCompetitor()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TenderCompetitorUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TenderCompetitorUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TenderCompetitorUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TenderCompetitorUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TenderCompetitorUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		v := tendercompetitor.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TenderCompetitorUpdate) check() error {
	if tcu.mutation.TenderCleared() && len(tcu.mutation.TenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderCompetitor.tender"`)
	}
	if tcu.mutation.CompetitorCleared() && len(tcu.mutation.CompetitorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderCompetitor.competitor"`)
	}
	return nil
}

func (tcu *TenderCompetitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tendercompetitor.Table, tendercompetitor.Columns, sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(tendercompetitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.Amount(); ok {
		_spec.SetField(tendercompetitor.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tcu.mutation.AddedAmount(); ok {
		_spec.AddField(tendercompetitor.FieldAmount, field.TypeFloat64, value)
	}
	if tcu.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.CompetitorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.CompetitorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tendercompetitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TenderCompetitorUpdateOne is the builder for updating a single TenderCompetitor entity.
type TenderCompetitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenderCompetitorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TenderCompetitorUpdateOne) SetUpdatedAt(t time.Time) *TenderCompetitorUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetTenderID sets the "tender_id" field.
func (tcuo *TenderCompetitorUpdateOne) SetTenderID(x xid.ID) *TenderCompetitorUpdateOne {
	tcuo.mutation.SetTenderID(x)
	return tcuo
}

// SetNillableTenderID sets the "tender_id" field if the given value is not nil.
func (tcuo *TenderCompetitorUpdateOne) SetNillableTenderID(x *xid.ID) *TenderCompetitorUpdateOne {
	if x != nil {
		tcuo.SetTenderID(*x)
	}
	return tcuo
}

// SetCompetitorID sets the "competitor_id" field.
func (tcuo *TenderCompetitorUpdateOne) SetCompetitorID(x xid.ID) *TenderCompetitorUpdateOne {
	tcuo.mutation.SetCompetitorID(x)
	return tcuo
}

// SetNillableCompetitorID sets the "competitor_id" field if the given value is not nil.
func (tcuo *TenderCompetitorUpdateOne) SetNillableCompetitorID(x *xid.ID) *TenderCompetitorUpdateOne {
	if x != nil {
		tcuo.SetCompetitorID(*x)
	}
	return tcuo
}

// SetAmount sets the "amount" field.
func (tcuo *TenderCompetitorUpdateOne) SetAmount(f float64) *TenderCompetitorUpdateOne {
	tcuo.mutation.ResetAmount()
	tcuo.mutation.SetAmount(f)
	return tcuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tcuo *TenderCompetitorUpdateOne) SetNillableAmount(f *float64) *TenderCompetitorUpdateOne {
	if f != nil {
		tcuo.SetAmount(*f)
	}
	return tcuo
}

// AddAmount adds f to the "amount" field.
func (tcuo *TenderCompetitorUpdateOne) AddAmount(f float64) *TenderCompetitorUpdateOne {
	tcuo.mutation.AddAmount(f)
	return tcuo
}

// SetTender sets the "tender" edge to the Tender entity.
func (tcuo *TenderCompetitorUpdateOne) SetTender(t *Tender) *TenderCompetitorUpdateOne {
	return tcuo.SetTenderID(t.ID)
}

// SetCompetitor sets the "competitor" edge to the Competitor entity.
func (tcuo *TenderCompetitorUpdateOne) SetCompetitor(c *Competitor) *TenderCompetitorUpdateOne {
	return tcuo.SetCompetitorID(c.ID)
}

// Mutation returns the TenderCompetitorMutation object of the builder.
func (tcuo *TenderCompetitorUpdateOne) Mutation() *TenderCompetitorMutation {
	return tcuo.mutation
}

// ClearTender clears the "tender" edge to the Tender entity.
func (tcuo *TenderCompetitorUpdateOne) ClearTender() *TenderCompetitorUpdateOne {
	tcuo.mutation.ClearTender()
	return tcuo
}

// ClearCompetitor clears the "competitor" edge to the Competitor entity.
func (tcuo *TenderCompetitorUpdateOne) ClearCompetitor() *TenderCompetitorUpdateOne {
	tcuo.mutation.ClearCompetitor()
	return tcuo
}

// Where appends a list predicates to the TenderCompetitorUpdate builder.
func (tcuo *TenderCompetitorUpdateOne) Where(ps ...predicate.TenderCompetitor) *TenderCompetitorUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TenderCompetitorUpdateOne) Select(field string, fields ...string) *TenderCompetitorUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TenderCompetitor entity.
func (tcuo *TenderCompetitorUpdateOne) Save(ctx context.Context) (*TenderCompetitor, error) {
	tcuo.defaults()
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TenderCompetitorUpdateOne) SaveX(ctx context.Context) *TenderCompetitor {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TenderCompetitorUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TenderCompetitorUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TenderCompetitorUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		v := tendercompetitor.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TenderCompetitorUpdateOne) check() error {
	if tcuo.mutation.TenderCleared() && len(tcuo.mutation.TenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderCompetitor.tender"`)
	}
	if tcuo.mutation.CompetitorCleared() && len(tcuo.mutation.CompetitorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenderCompetitor.competitor"`)
	}
	return nil
}

func (tcuo *TenderCompetitorUpdateOne) sqlSave(ctx context.Context) (_node *TenderCompetitor, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tendercompetitor.Table, tendercompetitor.Columns, sqlgraph.NewFieldSpec(tendercompetitor.FieldID, field.TypeString))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenderCompetitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tendercompetitor.FieldID)
		for _, f := range fields {
			if !tendercompetitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tendercompetitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tendercompetitor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.Amount(); ok {
		_spec.SetField(tendercompetitor.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tcuo.mutation.AddedAmount(); ok {
		_spec.AddField(tendercompetitor.FieldAmount, field.TypeFloat64, value)
	}
	if tcuo.mutation.TenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.TenderTable,
			Columns: []string{tendercompetitor.TenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.CompetitorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.CompetitorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tendercompetitor.CompetitorTable,
			Columns: []string{tendercompetitor.CompetitorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competitor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TenderCompetitor{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tendercompetitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
