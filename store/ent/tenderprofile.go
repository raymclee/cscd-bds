// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TenderProfile is the model entity for the TenderProfile schema.
type TenderProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// 1 待審核 2 已通過 3 已拒絕 4 已撤回
	ApprovalStatus int `json:"approval_status,omitempty"`
	// 審核飛書訊息ID
	ApprovalMsgID *string `json:"approval_msg_id,omitempty"`
	// 審核日期
	ApprovalDate *time.Time `json:"approval_date,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// EstimatedAmount holds the value of the "estimated_amount" field.
	EstimatedAmount *float64 `json:"estimated_amount,omitempty"`
	// TenderDate holds the value of the "tender_date" field.
	TenderDate *time.Time `json:"tender_date,omitempty"`
	// Classify holds the value of the "classify" field.
	Classify *int `json:"classify,omitempty"`
	// DiscoveryDate holds the value of the "discovery_date" field.
	DiscoveryDate *time.Time `json:"discovery_date,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// FullAddress holds the value of the "full_address" field.
	FullAddress *string `json:"full_address,omitempty"`
	// Contractor holds the value of the "contractor" field.
	Contractor *string `json:"contractor,omitempty"`
	// LevelInvolved holds the value of the "level_involved" field.
	LevelInvolved *int `json:"level_involved,omitempty"`
	// SizeAndValueRating holds the value of the "size_and_value_rating" field.
	SizeAndValueRating *int `json:"size_and_value_rating,omitempty"`
	// SizeAndValueRatingOverview holds the value of the "size_and_value_rating_overview" field.
	SizeAndValueRatingOverview *string `json:"size_and_value_rating_overview,omitempty"`
	// CreditAndPaymentRating holds the value of the "credit_and_payment_rating" field.
	CreditAndPaymentRating *int `json:"credit_and_payment_rating,omitempty"`
	// CreditAndPaymentRatingOverview holds the value of the "credit_and_payment_rating_overview" field.
	CreditAndPaymentRatingOverview *string `json:"credit_and_payment_rating_overview,omitempty"`
	// TimeLimitRating holds the value of the "time_limit_rating" field.
	TimeLimitRating *int `json:"time_limit_rating,omitempty"`
	// TimeLimitRatingOverview holds the value of the "time_limit_rating_overview" field.
	TimeLimitRatingOverview *string `json:"time_limit_rating_overview,omitempty"`
	// CustomerRelationshipRating holds the value of the "customer_relationship_rating" field.
	CustomerRelationshipRating *int `json:"customer_relationship_rating,omitempty"`
	// CustomerRelationshipRatingOverview holds the value of the "customer_relationship_rating_overview" field.
	CustomerRelationshipRatingOverview *string `json:"customer_relationship_rating_overview,omitempty"`
	// CompetitivePartnershipRating holds the value of the "competitive_partnership_rating" field.
	CompetitivePartnershipRating *int `json:"competitive_partnership_rating,omitempty"`
	// CompetitivePartnershipRatingOverview holds the value of the "competitive_partnership_rating_overview" field.
	CompetitivePartnershipRatingOverview *string `json:"competitive_partnership_rating_overview,omitempty"`
	// PrepareToBid holds the value of the "prepare_to_bid" field.
	PrepareToBid bool `json:"prepare_to_bid,omitempty"`
	// ProjectCode holds the value of the "project_code" field.
	ProjectCode *string `json:"project_code,omitempty"`
	// ProjectType holds the value of the "project_type" field.
	ProjectType *string `json:"project_type,omitempty"`
	// ProjectDefinition holds the value of the "project_definition" field.
	ProjectDefinition *string `json:"project_definition,omitempty"`
	// EstimatedProjectStartDate holds the value of the "estimated_project_start_date" field.
	EstimatedProjectStartDate *time.Time `json:"estimated_project_start_date,omitempty"`
	// EstimatedProjectEndDate holds the value of the "estimated_project_end_date" field.
	EstimatedProjectEndDate *time.Time `json:"estimated_project_end_date,omitempty"`
	// Attachments holds the value of the "attachments" field.
	Attachments []string `json:"attachments,omitempty"`
	// GeoCoordinate holds the value of the "geo_coordinate" field.
	GeoCoordinate []float64 `json:"geo_coordinate,omitempty"`
	// GeoBounds holds the value of the "geo_bounds" field.
	GeoBounds [][]float64 `json:"geo_bounds,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark *string `json:"remark,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// TenderSituations holds the value of the "tender_situations" field.
	TenderSituations *string `json:"tender_situations,omitempty"`
	// OwnerSituations holds the value of the "owner_situations" field.
	OwnerSituations *string `json:"owner_situations,omitempty"`
	// BiddingInstructions holds the value of the "bidding_instructions" field.
	BiddingInstructions *string `json:"bidding_instructions,omitempty"`
	// CompetitorSituations holds the value of the "competitor_situations" field.
	CompetitorSituations *string `json:"competitor_situations,omitempty"`
	// CostEngineer holds the value of the "cost_engineer" field.
	CostEngineer *string `json:"cost_engineer,omitempty"`
	// TenderForm holds the value of the "tender_form" field.
	TenderForm *string `json:"tender_form,omitempty"`
	// ContractForm holds the value of the "contract_form" field.
	ContractForm *string `json:"contract_form,omitempty"`
	// ManagementCompany holds the value of the "management_company" field.
	ManagementCompany *string `json:"management_company,omitempty"`
	// TenderingAgency holds the value of the "tendering_agency" field.
	TenderingAgency *string `json:"tendering_agency,omitempty"`
	// BiddingDate holds the value of the "bidding_date" field.
	BiddingDate *time.Time `json:"bidding_date,omitempty"`
	// FacadeConsultant holds the value of the "facade_consultant" field.
	FacadeConsultant *string `json:"facade_consultant,omitempty"`
	// DesignUnit holds the value of the "design_unit" field.
	DesignUnit *string `json:"design_unit,omitempty"`
	// ConsultingFirm holds the value of the "consulting_firm" field.
	ConsultingFirm *string `json:"consulting_firm,omitempty"`
	// KeyProject holds the value of the "key_project" field.
	KeyProject bool `json:"key_project,omitempty"`
	// CurrentProgress holds the value of the "current_progress" field.
	CurrentProgress *string `json:"current_progress,omitempty"`
	// TenderWinCompany holds the value of the "tender_win_company" field.
	TenderWinCompany *string `json:"tender_win_company,omitempty"`
	// 投標編號，只限港澳
	TenderCode *string `json:"tender_code,omitempty"`
	// 則師，只限港澳
	Architect *string `json:"architect,omitempty"`
	// 業主，只限港澳
	Developer *string `json:"developer,omitempty"`
	// 交標日期，只限港澳
	TenderClosingDate *time.Time `json:"tender_closing_date,omitempty"`
	// 施工面積，只限港澳
	ConstructionArea *string `json:"construction_area,omitempty"`
	// 投標金額
	TenderAmount *float64 `json:"tender_amount,omitempty"`
	// 得標日期，只限港澳
	TenderWinDate *time.Time `json:"tender_win_date,omitempty"`
	// 得標金額
	TenderWinAmount *float64 `json:"tender_win_amount,omitempty"`
	// 最後一次投標金額，只限港澳
	LastTenderAmount *float64 `json:"last_tender_amount,omitempty"`
	// TenderID holds the value of the "tender_id" field.
	TenderID xid.ID `json:"tender_id,omitempty"`
	// ProvinceID holds the value of the "province_id" field.
	ProvinceID *xid.ID `json:"province_id,omitempty"`
	// CityID holds the value of the "city_id" field.
	CityID *xid.ID `json:"city_id,omitempty"`
	// DistrictID holds the value of the "district_id" field.
	DistrictID *xid.ID `json:"district_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID *xid.ID `json:"customer_id,omitempty"`
	// FinderID holds the value of the "finder_id" field.
	FinderID *xid.ID `json:"finder_id,omitempty"`
	// CreatedByID holds the value of the "created_by_id" field.
	CreatedByID *xid.ID `json:"created_by_id,omitempty"`
	// ApproverID holds the value of the "approver_id" field.
	ApproverID *xid.ID `json:"approver_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenderProfileQuery when eager-loading is set.
	Edges        TenderProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenderProfileEdges holds the relations/edges for other nodes in the graph.
type TenderProfileEdges struct {
	// Tender holds the value of the tender edge.
	Tender *Tender `json:"tender,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Finder holds the value of the finder edge.
	Finder *User `json:"finder,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// Province holds the value of the province edge.
	Province *Province `json:"province,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// District holds the value of the district edge.
	District *District `json:"district,omitempty"`
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int
}

// TenderOrErr returns the Tender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) TenderOrErr() (*Tender, error) {
	if e.Tender != nil {
		return e.Tender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tender.Label}
	}
	return nil, &NotLoadedError{edge: "tender"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// FinderOrErr returns the Finder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) FinderOrErr() (*User, error) {
	if e.Finder != nil {
		return e.Finder, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "finder"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// ProvinceOrErr returns the Province value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) ProvinceOrErr() (*Province, error) {
	if e.Province != nil {
		return e.Province, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: province.Label}
	}
	return nil, &NotLoadedError{edge: "province"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) DistrictOrErr() (*District, error) {
	if e.District != nil {
		return e.District, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: district.Label}
	}
	return nil, &NotLoadedError{edge: "district"}
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenderProfileEdges) ApproverOrErr() (*User, error) {
	if e.Approver != nil {
		return e.Approver, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenderProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenderprofile.FieldProvinceID, tenderprofile.FieldCityID, tenderprofile.FieldDistrictID, tenderprofile.FieldCustomerID, tenderprofile.FieldFinderID, tenderprofile.FieldCreatedByID, tenderprofile.FieldApproverID:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case tenderprofile.FieldAttachments, tenderprofile.FieldGeoCoordinate, tenderprofile.FieldGeoBounds, tenderprofile.FieldImages:
			values[i] = new([]byte)
		case tenderprofile.FieldPrepareToBid, tenderprofile.FieldKeyProject:
			values[i] = new(sql.NullBool)
		case tenderprofile.FieldEstimatedAmount, tenderprofile.FieldTenderAmount, tenderprofile.FieldTenderWinAmount, tenderprofile.FieldLastTenderAmount:
			values[i] = new(sql.NullFloat64)
		case tenderprofile.FieldStatus, tenderprofile.FieldApprovalStatus, tenderprofile.FieldClassify, tenderprofile.FieldLevelInvolved, tenderprofile.FieldSizeAndValueRating, tenderprofile.FieldCreditAndPaymentRating, tenderprofile.FieldTimeLimitRating, tenderprofile.FieldCustomerRelationshipRating, tenderprofile.FieldCompetitivePartnershipRating:
			values[i] = new(sql.NullInt64)
		case tenderprofile.FieldApprovalMsgID, tenderprofile.FieldName, tenderprofile.FieldAddress, tenderprofile.FieldFullAddress, tenderprofile.FieldContractor, tenderprofile.FieldSizeAndValueRatingOverview, tenderprofile.FieldCreditAndPaymentRatingOverview, tenderprofile.FieldTimeLimitRatingOverview, tenderprofile.FieldCustomerRelationshipRatingOverview, tenderprofile.FieldCompetitivePartnershipRatingOverview, tenderprofile.FieldProjectCode, tenderprofile.FieldProjectType, tenderprofile.FieldProjectDefinition, tenderprofile.FieldRemark, tenderprofile.FieldTenderSituations, tenderprofile.FieldOwnerSituations, tenderprofile.FieldBiddingInstructions, tenderprofile.FieldCompetitorSituations, tenderprofile.FieldCostEngineer, tenderprofile.FieldTenderForm, tenderprofile.FieldContractForm, tenderprofile.FieldManagementCompany, tenderprofile.FieldTenderingAgency, tenderprofile.FieldFacadeConsultant, tenderprofile.FieldDesignUnit, tenderprofile.FieldConsultingFirm, tenderprofile.FieldCurrentProgress, tenderprofile.FieldTenderWinCompany, tenderprofile.FieldTenderCode, tenderprofile.FieldArchitect, tenderprofile.FieldDeveloper, tenderprofile.FieldConstructionArea:
			values[i] = new(sql.NullString)
		case tenderprofile.FieldCreatedAt, tenderprofile.FieldUpdatedAt, tenderprofile.FieldApprovalDate, tenderprofile.FieldTenderDate, tenderprofile.FieldDiscoveryDate, tenderprofile.FieldEstimatedProjectStartDate, tenderprofile.FieldEstimatedProjectEndDate, tenderprofile.FieldBiddingDate, tenderprofile.FieldTenderClosingDate, tenderprofile.FieldTenderWinDate:
			values[i] = new(sql.NullTime)
		case tenderprofile.FieldID, tenderprofile.FieldTenderID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenderProfile fields.
func (tp *TenderProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenderprofile.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tp.ID = *value
			}
		case tenderprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tp.CreatedAt = value.Time
			}
		case tenderprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tp.UpdatedAt = value.Time
			}
		case tenderprofile.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tp.Status = int(value.Int64)
			}
		case tenderprofile.FieldApprovalStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approval_status", values[i])
			} else if value.Valid {
				tp.ApprovalStatus = int(value.Int64)
			}
		case tenderprofile.FieldApprovalMsgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_msg_id", values[i])
			} else if value.Valid {
				tp.ApprovalMsgID = new(string)
				*tp.ApprovalMsgID = value.String
			}
		case tenderprofile.FieldApprovalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approval_date", values[i])
			} else if value.Valid {
				tp.ApprovalDate = new(time.Time)
				*tp.ApprovalDate = value.Time
			}
		case tenderprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tp.Name = new(string)
				*tp.Name = value.String
			}
		case tenderprofile.FieldEstimatedAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_amount", values[i])
			} else if value.Valid {
				tp.EstimatedAmount = new(float64)
				*tp.EstimatedAmount = value.Float64
			}
		case tenderprofile.FieldTenderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_date", values[i])
			} else if value.Valid {
				tp.TenderDate = new(time.Time)
				*tp.TenderDate = value.Time
			}
		case tenderprofile.FieldClassify:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field classify", values[i])
			} else if value.Valid {
				tp.Classify = new(int)
				*tp.Classify = int(value.Int64)
			}
		case tenderprofile.FieldDiscoveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field discovery_date", values[i])
			} else if value.Valid {
				tp.DiscoveryDate = new(time.Time)
				*tp.DiscoveryDate = value.Time
			}
		case tenderprofile.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				tp.Address = new(string)
				*tp.Address = value.String
			}
		case tenderprofile.FieldFullAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_address", values[i])
			} else if value.Valid {
				tp.FullAddress = new(string)
				*tp.FullAddress = value.String
			}
		case tenderprofile.FieldContractor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contractor", values[i])
			} else if value.Valid {
				tp.Contractor = new(string)
				*tp.Contractor = value.String
			}
		case tenderprofile.FieldLevelInvolved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_involved", values[i])
			} else if value.Valid {
				tp.LevelInvolved = new(int)
				*tp.LevelInvolved = int(value.Int64)
			}
		case tenderprofile.FieldSizeAndValueRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_and_value_rating", values[i])
			} else if value.Valid {
				tp.SizeAndValueRating = new(int)
				*tp.SizeAndValueRating = int(value.Int64)
			}
		case tenderprofile.FieldSizeAndValueRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size_and_value_rating_overview", values[i])
			} else if value.Valid {
				tp.SizeAndValueRatingOverview = new(string)
				*tp.SizeAndValueRatingOverview = value.String
			}
		case tenderprofile.FieldCreditAndPaymentRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit_and_payment_rating", values[i])
			} else if value.Valid {
				tp.CreditAndPaymentRating = new(int)
				*tp.CreditAndPaymentRating = int(value.Int64)
			}
		case tenderprofile.FieldCreditAndPaymentRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credit_and_payment_rating_overview", values[i])
			} else if value.Valid {
				tp.CreditAndPaymentRatingOverview = new(string)
				*tp.CreditAndPaymentRatingOverview = value.String
			}
		case tenderprofile.FieldTimeLimitRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_limit_rating", values[i])
			} else if value.Valid {
				tp.TimeLimitRating = new(int)
				*tp.TimeLimitRating = int(value.Int64)
			}
		case tenderprofile.FieldTimeLimitRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time_limit_rating_overview", values[i])
			} else if value.Valid {
				tp.TimeLimitRatingOverview = new(string)
				*tp.TimeLimitRatingOverview = value.String
			}
		case tenderprofile.FieldCustomerRelationshipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_relationship_rating", values[i])
			} else if value.Valid {
				tp.CustomerRelationshipRating = new(int)
				*tp.CustomerRelationshipRating = int(value.Int64)
			}
		case tenderprofile.FieldCustomerRelationshipRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_relationship_rating_overview", values[i])
			} else if value.Valid {
				tp.CustomerRelationshipRatingOverview = new(string)
				*tp.CustomerRelationshipRatingOverview = value.String
			}
		case tenderprofile.FieldCompetitivePartnershipRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field competitive_partnership_rating", values[i])
			} else if value.Valid {
				tp.CompetitivePartnershipRating = new(int)
				*tp.CompetitivePartnershipRating = int(value.Int64)
			}
		case tenderprofile.FieldCompetitivePartnershipRatingOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competitive_partnership_rating_overview", values[i])
			} else if value.Valid {
				tp.CompetitivePartnershipRatingOverview = new(string)
				*tp.CompetitivePartnershipRatingOverview = value.String
			}
		case tenderprofile.FieldPrepareToBid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prepare_to_bid", values[i])
			} else if value.Valid {
				tp.PrepareToBid = value.Bool
			}
		case tenderprofile.FieldProjectCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_code", values[i])
			} else if value.Valid {
				tp.ProjectCode = new(string)
				*tp.ProjectCode = value.String
			}
		case tenderprofile.FieldProjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_type", values[i])
			} else if value.Valid {
				tp.ProjectType = new(string)
				*tp.ProjectType = value.String
			}
		case tenderprofile.FieldProjectDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_definition", values[i])
			} else if value.Valid {
				tp.ProjectDefinition = new(string)
				*tp.ProjectDefinition = value.String
			}
		case tenderprofile.FieldEstimatedProjectStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_start_date", values[i])
			} else if value.Valid {
				tp.EstimatedProjectStartDate = new(time.Time)
				*tp.EstimatedProjectStartDate = value.Time
			}
		case tenderprofile.FieldEstimatedProjectEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_project_end_date", values[i])
			} else if value.Valid {
				tp.EstimatedProjectEndDate = new(time.Time)
				*tp.EstimatedProjectEndDate = value.Time
			}
		case tenderprofile.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tp.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case tenderprofile.FieldGeoCoordinate:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field geo_coordinate", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tp.GeoCoordinate); err != nil {
					return fmt.Errorf("unmarshal field geo_coordinate: %w", err)
				}
			}
		case tenderprofile.FieldGeoBounds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field geo_bounds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tp.GeoBounds); err != nil {
					return fmt.Errorf("unmarshal field geo_bounds: %w", err)
				}
			}
		case tenderprofile.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				tp.Remark = new(string)
				*tp.Remark = value.String
			}
		case tenderprofile.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tp.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case tenderprofile.FieldTenderSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_situations", values[i])
			} else if value.Valid {
				tp.TenderSituations = new(string)
				*tp.TenderSituations = value.String
			}
		case tenderprofile.FieldOwnerSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_situations", values[i])
			} else if value.Valid {
				tp.OwnerSituations = new(string)
				*tp.OwnerSituations = value.String
			}
		case tenderprofile.FieldBiddingInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bidding_instructions", values[i])
			} else if value.Valid {
				tp.BiddingInstructions = new(string)
				*tp.BiddingInstructions = value.String
			}
		case tenderprofile.FieldCompetitorSituations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competitor_situations", values[i])
			} else if value.Valid {
				tp.CompetitorSituations = new(string)
				*tp.CompetitorSituations = value.String
			}
		case tenderprofile.FieldCostEngineer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cost_engineer", values[i])
			} else if value.Valid {
				tp.CostEngineer = new(string)
				*tp.CostEngineer = value.String
			}
		case tenderprofile.FieldTenderForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_form", values[i])
			} else if value.Valid {
				tp.TenderForm = new(string)
				*tp.TenderForm = value.String
			}
		case tenderprofile.FieldContractForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_form", values[i])
			} else if value.Valid {
				tp.ContractForm = new(string)
				*tp.ContractForm = value.String
			}
		case tenderprofile.FieldManagementCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field management_company", values[i])
			} else if value.Valid {
				tp.ManagementCompany = new(string)
				*tp.ManagementCompany = value.String
			}
		case tenderprofile.FieldTenderingAgency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tendering_agency", values[i])
			} else if value.Valid {
				tp.TenderingAgency = new(string)
				*tp.TenderingAgency = value.String
			}
		case tenderprofile.FieldBiddingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bidding_date", values[i])
			} else if value.Valid {
				tp.BiddingDate = new(time.Time)
				*tp.BiddingDate = value.Time
			}
		case tenderprofile.FieldFacadeConsultant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facade_consultant", values[i])
			} else if value.Valid {
				tp.FacadeConsultant = new(string)
				*tp.FacadeConsultant = value.String
			}
		case tenderprofile.FieldDesignUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field design_unit", values[i])
			} else if value.Valid {
				tp.DesignUnit = new(string)
				*tp.DesignUnit = value.String
			}
		case tenderprofile.FieldConsultingFirm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consulting_firm", values[i])
			} else if value.Valid {
				tp.ConsultingFirm = new(string)
				*tp.ConsultingFirm = value.String
			}
		case tenderprofile.FieldKeyProject:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field key_project", values[i])
			} else if value.Valid {
				tp.KeyProject = value.Bool
			}
		case tenderprofile.FieldCurrentProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_progress", values[i])
			} else if value.Valid {
				tp.CurrentProgress = new(string)
				*tp.CurrentProgress = value.String
			}
		case tenderprofile.FieldTenderWinCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_company", values[i])
			} else if value.Valid {
				tp.TenderWinCompany = new(string)
				*tp.TenderWinCompany = value.String
			}
		case tenderprofile.FieldTenderCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tender_code", values[i])
			} else if value.Valid {
				tp.TenderCode = new(string)
				*tp.TenderCode = value.String
			}
		case tenderprofile.FieldArchitect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field architect", values[i])
			} else if value.Valid {
				tp.Architect = new(string)
				*tp.Architect = value.String
			}
		case tenderprofile.FieldDeveloper:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field developer", values[i])
			} else if value.Valid {
				tp.Developer = new(string)
				*tp.Developer = value.String
			}
		case tenderprofile.FieldTenderClosingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_closing_date", values[i])
			} else if value.Valid {
				tp.TenderClosingDate = new(time.Time)
				*tp.TenderClosingDate = value.Time
			}
		case tenderprofile.FieldConstructionArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field construction_area", values[i])
			} else if value.Valid {
				tp.ConstructionArea = new(string)
				*tp.ConstructionArea = value.String
			}
		case tenderprofile.FieldTenderAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tender_amount", values[i])
			} else if value.Valid {
				tp.TenderAmount = new(float64)
				*tp.TenderAmount = value.Float64
			}
		case tenderprofile.FieldTenderWinDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_date", values[i])
			} else if value.Valid {
				tp.TenderWinDate = new(time.Time)
				*tp.TenderWinDate = value.Time
			}
		case tenderprofile.FieldTenderWinAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tender_win_amount", values[i])
			} else if value.Valid {
				tp.TenderWinAmount = new(float64)
				*tp.TenderWinAmount = value.Float64
			}
		case tenderprofile.FieldLastTenderAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field last_tender_amount", values[i])
			} else if value.Valid {
				tp.LastTenderAmount = new(float64)
				*tp.LastTenderAmount = value.Float64
			}
		case tenderprofile.FieldTenderID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tender_id", values[i])
			} else if value != nil {
				tp.TenderID = *value
			}
		case tenderprofile.FieldProvinceID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field province_id", values[i])
			} else if value.Valid {
				tp.ProvinceID = new(xid.ID)
				*tp.ProvinceID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldCityID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				tp.CityID = new(xid.ID)
				*tp.CityID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldDistrictID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field district_id", values[i])
			} else if value.Valid {
				tp.DistrictID = new(xid.ID)
				*tp.DistrictID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldCustomerID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				tp.CustomerID = new(xid.ID)
				*tp.CustomerID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldFinderID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field finder_id", values[i])
			} else if value.Valid {
				tp.FinderID = new(xid.ID)
				*tp.FinderID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldCreatedByID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field created_by_id", values[i])
			} else if value.Valid {
				tp.CreatedByID = new(xid.ID)
				*tp.CreatedByID = *value.S.(*xid.ID)
			}
		case tenderprofile.FieldApproverID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				tp.ApproverID = new(xid.ID)
				*tp.ApproverID = *value.S.(*xid.ID)
			}
		default:
			tp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenderProfile.
// This includes values selected through modifiers, order, etc.
func (tp *TenderProfile) Value(name string) (ent.Value, error) {
	return tp.selectValues.Get(name)
}

// QueryTender queries the "tender" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryTender() *TenderQuery {
	return NewTenderProfileClient(tp.config).QueryTender(tp)
}

// QueryCustomer queries the "customer" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryCustomer() *CustomerQuery {
	return NewTenderProfileClient(tp.config).QueryCustomer(tp)
}

// QueryFinder queries the "finder" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryFinder() *UserQuery {
	return NewTenderProfileClient(tp.config).QueryFinder(tp)
}

// QueryCreatedBy queries the "created_by" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryCreatedBy() *UserQuery {
	return NewTenderProfileClient(tp.config).QueryCreatedBy(tp)
}

// QueryProvince queries the "province" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryProvince() *ProvinceQuery {
	return NewTenderProfileClient(tp.config).QueryProvince(tp)
}

// QueryCity queries the "city" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryCity() *CityQuery {
	return NewTenderProfileClient(tp.config).QueryCity(tp)
}

// QueryDistrict queries the "district" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryDistrict() *DistrictQuery {
	return NewTenderProfileClient(tp.config).QueryDistrict(tp)
}

// QueryApprover queries the "approver" edge of the TenderProfile entity.
func (tp *TenderProfile) QueryApprover() *UserQuery {
	return NewTenderProfileClient(tp.config).QueryApprover(tp)
}

// Update returns a builder for updating this TenderProfile.
// Note that you need to call TenderProfile.Unwrap() before calling this method if this TenderProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TenderProfile) Update() *TenderProfileUpdateOne {
	return NewTenderProfileClient(tp.config).UpdateOne(tp)
}

// Unwrap unwraps the TenderProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TenderProfile) Unwrap() *TenderProfile {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenderProfile is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TenderProfile) String() string {
	var builder strings.Builder
	builder.WriteString("TenderProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tp.Status))
	builder.WriteString(", ")
	builder.WriteString("approval_status=")
	builder.WriteString(fmt.Sprintf("%v", tp.ApprovalStatus))
	builder.WriteString(", ")
	if v := tp.ApprovalMsgID; v != nil {
		builder.WriteString("approval_msg_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ApprovalDate; v != nil {
		builder.WriteString("approval_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.EstimatedAmount; v != nil {
		builder.WriteString("estimated_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.TenderDate; v != nil {
		builder.WriteString("tender_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.Classify; v != nil {
		builder.WriteString("classify=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.DiscoveryDate; v != nil {
		builder.WriteString("discovery_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.Address; v != nil {
		builder.WriteString("address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.FullAddress; v != nil {
		builder.WriteString("full_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.Contractor; v != nil {
		builder.WriteString("contractor=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.LevelInvolved; v != nil {
		builder.WriteString("level_involved=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.SizeAndValueRating; v != nil {
		builder.WriteString("size_and_value_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.SizeAndValueRatingOverview; v != nil {
		builder.WriteString("size_and_value_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.CreditAndPaymentRating; v != nil {
		builder.WriteString("credit_and_payment_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CreditAndPaymentRatingOverview; v != nil {
		builder.WriteString("credit_and_payment_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TimeLimitRating; v != nil {
		builder.WriteString("time_limit_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.TimeLimitRatingOverview; v != nil {
		builder.WriteString("time_limit_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.CustomerRelationshipRating; v != nil {
		builder.WriteString("customer_relationship_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CustomerRelationshipRatingOverview; v != nil {
		builder.WriteString("customer_relationship_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.CompetitivePartnershipRating; v != nil {
		builder.WriteString("competitive_partnership_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CompetitivePartnershipRatingOverview; v != nil {
		builder.WriteString("competitive_partnership_rating_overview=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("prepare_to_bid=")
	builder.WriteString(fmt.Sprintf("%v", tp.PrepareToBid))
	builder.WriteString(", ")
	if v := tp.ProjectCode; v != nil {
		builder.WriteString("project_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ProjectType; v != nil {
		builder.WriteString("project_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ProjectDefinition; v != nil {
		builder.WriteString("project_definition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.EstimatedProjectStartDate; v != nil {
		builder.WriteString("estimated_project_start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.EstimatedProjectEndDate; v != nil {
		builder.WriteString("estimated_project_end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("attachments=")
	builder.WriteString(fmt.Sprintf("%v", tp.Attachments))
	builder.WriteString(", ")
	builder.WriteString("geo_coordinate=")
	builder.WriteString(fmt.Sprintf("%v", tp.GeoCoordinate))
	builder.WriteString(", ")
	builder.WriteString("geo_bounds=")
	builder.WriteString(fmt.Sprintf("%v", tp.GeoBounds))
	builder.WriteString(", ")
	if v := tp.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", tp.Images))
	builder.WriteString(", ")
	if v := tp.TenderSituations; v != nil {
		builder.WriteString("tender_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.OwnerSituations; v != nil {
		builder.WriteString("owner_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.BiddingInstructions; v != nil {
		builder.WriteString("bidding_instructions=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.CompetitorSituations; v != nil {
		builder.WriteString("competitor_situations=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.CostEngineer; v != nil {
		builder.WriteString("cost_engineer=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderForm; v != nil {
		builder.WriteString("tender_form=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ContractForm; v != nil {
		builder.WriteString("contract_form=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ManagementCompany; v != nil {
		builder.WriteString("management_company=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderingAgency; v != nil {
		builder.WriteString("tendering_agency=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.BiddingDate; v != nil {
		builder.WriteString("bidding_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.FacadeConsultant; v != nil {
		builder.WriteString("facade_consultant=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.DesignUnit; v != nil {
		builder.WriteString("design_unit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.ConsultingFirm; v != nil {
		builder.WriteString("consulting_firm=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("key_project=")
	builder.WriteString(fmt.Sprintf("%v", tp.KeyProject))
	builder.WriteString(", ")
	if v := tp.CurrentProgress; v != nil {
		builder.WriteString("current_progress=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderWinCompany; v != nil {
		builder.WriteString("tender_win_company=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderCode; v != nil {
		builder.WriteString("tender_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.Architect; v != nil {
		builder.WriteString("architect=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.Developer; v != nil {
		builder.WriteString("developer=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderClosingDate; v != nil {
		builder.WriteString("tender_closing_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.ConstructionArea; v != nil {
		builder.WriteString("construction_area=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tp.TenderAmount; v != nil {
		builder.WriteString("tender_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.TenderWinDate; v != nil {
		builder.WriteString("tender_win_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tp.TenderWinAmount; v != nil {
		builder.WriteString("tender_win_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.LastTenderAmount; v != nil {
		builder.WriteString("last_tender_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tender_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.TenderID))
	builder.WriteString(", ")
	if v := tp.ProvinceID; v != nil {
		builder.WriteString("province_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.DistrictID; v != nil {
		builder.WriteString("district_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CustomerID; v != nil {
		builder.WriteString("customer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.FinderID; v != nil {
		builder.WriteString("finder_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.CreatedByID; v != nil {
		builder.WriteString("created_by_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tp.ApproverID; v != nil {
		builder.WriteString("approver_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TenderProfiles is a parsable slice of TenderProfile.
type TenderProfiles []*TenderProfile
