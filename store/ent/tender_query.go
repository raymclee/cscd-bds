// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/city"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/predicate"
	"cscd-bds/store/ent/province"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/store/ent/visitrecord"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenderQuery is the builder for querying Tender entities.
type TenderQuery struct {
	config
	ctx                     *QueryContext
	order                   []tender.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Tender
	withArea                *AreaQuery
	withCustomer            *CustomerQuery
	withFinder              *UserQuery
	withCreatedBy           *UserQuery
	withFollowingSales      *UserQuery
	withProvince            *ProvinceQuery
	withCity                *CityQuery
	withDistrict            *DistrictQuery
	withVisitRecords        *VisitRecordQuery
	withCompetitor          *CompetitorQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Tender) error
	withNamedFollowingSales map[string]*UserQuery
	withNamedVisitRecords   map[string]*VisitRecordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TenderQuery builder.
func (tq *TenderQuery) Where(ps ...predicate.Tender) *TenderQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TenderQuery) Limit(limit int) *TenderQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TenderQuery) Offset(offset int) *TenderQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TenderQuery) Unique(unique bool) *TenderQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TenderQuery) Order(o ...tender.OrderOption) *TenderQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryArea chains the current query on the "area" edge.
func (tq *TenderQuery) QueryArea() *AreaQuery {
	query := (&AreaClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.AreaTable, tender.AreaColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomer chains the current query on the "customer" edge.
func (tq *TenderQuery) QueryCustomer() *CustomerQuery {
	query := (&CustomerClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.CustomerTable, tender.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFinder chains the current query on the "finder" edge.
func (tq *TenderQuery) QueryFinder() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tender.FinderTable, tender.FinderColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (tq *TenderQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tender.CreatedByTable, tender.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowingSales chains the current query on the "following_sales" edge.
func (tq *TenderQuery) QueryFollowingSales() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tender.FollowingSalesTable, tender.FollowingSalesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvince chains the current query on the "province" edge.
func (tq *TenderQuery) QueryProvince() *ProvinceQuery {
	query := (&ProvinceClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(province.Table, province.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.ProvinceTable, tender.ProvinceColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (tq *TenderQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.CityTable, tender.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDistrict chains the current query on the "district" edge.
func (tq *TenderQuery) QueryDistrict() *DistrictQuery {
	query := (&DistrictClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(district.Table, district.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.DistrictTable, tender.DistrictColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVisitRecords chains the current query on the "visit_records" edge.
func (tq *TenderQuery) QueryVisitRecords() *VisitRecordQuery {
	query := (&VisitRecordClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(visitrecord.Table, visitrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tender.VisitRecordsTable, tender.VisitRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompetitor chains the current query on the "competitor" edge.
func (tq *TenderQuery) QueryCompetitor() *CompetitorQuery {
	query := (&CompetitorClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tender.Table, tender.FieldID, selector),
			sqlgraph.To(competitor.Table, competitor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tender.CompetitorTable, tender.CompetitorColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Tender entity from the query.
// Returns a *NotFoundError when no Tender was found.
func (tq *TenderQuery) First(ctx context.Context) (*Tender, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tender.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TenderQuery) FirstX(ctx context.Context) *Tender {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Tender ID from the query.
// Returns a *NotFoundError when no Tender ID was found.
func (tq *TenderQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tender.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TenderQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Tender entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Tender entity is found.
// Returns a *NotFoundError when no Tender entities are found.
func (tq *TenderQuery) Only(ctx context.Context) (*Tender, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tender.Label}
	default:
		return nil, &NotSingularError{tender.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TenderQuery) OnlyX(ctx context.Context) *Tender {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Tender ID in the query.
// Returns a *NotSingularError when more than one Tender ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TenderQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tender.Label}
	default:
		err = &NotSingularError{tender.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TenderQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Tenders.
func (tq *TenderQuery) All(ctx context.Context) ([]*Tender, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryAll)
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Tender, *TenderQuery]()
	return withInterceptors[[]*Tender](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TenderQuery) AllX(ctx context.Context) []*Tender {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Tender IDs.
func (tq *TenderQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryIDs)
	if err = tq.Select(tender.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TenderQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TenderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryCount)
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TenderQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TenderQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TenderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryExist)
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TenderQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TenderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TenderQuery) Clone() *TenderQuery {
	if tq == nil {
		return nil
	}
	return &TenderQuery{
		config:             tq.config,
		ctx:                tq.ctx.Clone(),
		order:              append([]tender.OrderOption{}, tq.order...),
		inters:             append([]Interceptor{}, tq.inters...),
		predicates:         append([]predicate.Tender{}, tq.predicates...),
		withArea:           tq.withArea.Clone(),
		withCustomer:       tq.withCustomer.Clone(),
		withFinder:         tq.withFinder.Clone(),
		withCreatedBy:      tq.withCreatedBy.Clone(),
		withFollowingSales: tq.withFollowingSales.Clone(),
		withProvince:       tq.withProvince.Clone(),
		withCity:           tq.withCity.Clone(),
		withDistrict:       tq.withDistrict.Clone(),
		withVisitRecords:   tq.withVisitRecords.Clone(),
		withCompetitor:     tq.withCompetitor.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithArea tells the query-builder to eager-load the nodes that are connected to
// the "area" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithArea(opts ...func(*AreaQuery)) *TenderQuery {
	query := (&AreaClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withArea = query
	return tq
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithCustomer(opts ...func(*CustomerQuery)) *TenderQuery {
	query := (&CustomerClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCustomer = query
	return tq
}

// WithFinder tells the query-builder to eager-load the nodes that are connected to
// the "finder" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithFinder(opts ...func(*UserQuery)) *TenderQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withFinder = query
	return tq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithCreatedBy(opts ...func(*UserQuery)) *TenderQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCreatedBy = query
	return tq
}

// WithFollowingSales tells the query-builder to eager-load the nodes that are connected to
// the "following_sales" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithFollowingSales(opts ...func(*UserQuery)) *TenderQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withFollowingSales = query
	return tq
}

// WithProvince tells the query-builder to eager-load the nodes that are connected to
// the "province" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithProvince(opts ...func(*ProvinceQuery)) *TenderQuery {
	query := (&ProvinceClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withProvince = query
	return tq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithCity(opts ...func(*CityQuery)) *TenderQuery {
	query := (&CityClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCity = query
	return tq
}

// WithDistrict tells the query-builder to eager-load the nodes that are connected to
// the "district" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithDistrict(opts ...func(*DistrictQuery)) *TenderQuery {
	query := (&DistrictClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withDistrict = query
	return tq
}

// WithVisitRecords tells the query-builder to eager-load the nodes that are connected to
// the "visit_records" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithVisitRecords(opts ...func(*VisitRecordQuery)) *TenderQuery {
	query := (&VisitRecordClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withVisitRecords = query
	return tq
}

// WithCompetitor tells the query-builder to eager-load the nodes that are connected to
// the "competitor" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithCompetitor(opts ...func(*CompetitorQuery)) *TenderQuery {
	query := (&CompetitorClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCompetitor = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Tender.Query().
//		GroupBy(tender.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TenderQuery) GroupBy(field string, fields ...string) *TenderGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TenderGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = tender.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Tender.Query().
//		Select(tender.FieldCreatedAt).
//		Scan(ctx, &v)
func (tq *TenderQuery) Select(fields ...string) *TenderSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TenderSelect{TenderQuery: tq}
	sbuild.label = tender.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TenderSelect configured with the given aggregations.
func (tq *TenderQuery) Aggregate(fns ...AggregateFunc) *TenderSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TenderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !tender.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TenderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Tender, error) {
	var (
		nodes       = []*Tender{}
		_spec       = tq.querySpec()
		loadedTypes = [10]bool{
			tq.withArea != nil,
			tq.withCustomer != nil,
			tq.withFinder != nil,
			tq.withCreatedBy != nil,
			tq.withFollowingSales != nil,
			tq.withProvince != nil,
			tq.withCity != nil,
			tq.withDistrict != nil,
			tq.withVisitRecords != nil,
			tq.withCompetitor != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Tender).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Tender{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withArea; query != nil {
		if err := tq.loadArea(ctx, query, nodes, nil,
			func(n *Tender, e *Area) { n.Edges.Area = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCustomer; query != nil {
		if err := tq.loadCustomer(ctx, query, nodes, nil,
			func(n *Tender, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withFinder; query != nil {
		if err := tq.loadFinder(ctx, query, nodes, nil,
			func(n *Tender, e *User) { n.Edges.Finder = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCreatedBy; query != nil {
		if err := tq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *Tender, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withFollowingSales; query != nil {
		if err := tq.loadFollowingSales(ctx, query, nodes,
			func(n *Tender) { n.Edges.FollowingSales = []*User{} },
			func(n *Tender, e *User) { n.Edges.FollowingSales = append(n.Edges.FollowingSales, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withProvince; query != nil {
		if err := tq.loadProvince(ctx, query, nodes, nil,
			func(n *Tender, e *Province) { n.Edges.Province = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCity; query != nil {
		if err := tq.loadCity(ctx, query, nodes, nil,
			func(n *Tender, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withDistrict; query != nil {
		if err := tq.loadDistrict(ctx, query, nodes, nil,
			func(n *Tender, e *District) { n.Edges.District = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withVisitRecords; query != nil {
		if err := tq.loadVisitRecords(ctx, query, nodes,
			func(n *Tender) { n.Edges.VisitRecords = []*VisitRecord{} },
			func(n *Tender, e *VisitRecord) { n.Edges.VisitRecords = append(n.Edges.VisitRecords, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCompetitor; query != nil {
		if err := tq.loadCompetitor(ctx, query, nodes, nil,
			func(n *Tender, e *Competitor) { n.Edges.Competitor = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedFollowingSales {
		if err := tq.loadFollowingSales(ctx, query, nodes,
			func(n *Tender) { n.appendNamedFollowingSales(name) },
			func(n *Tender, e *User) { n.appendNamedFollowingSales(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedVisitRecords {
		if err := tq.loadVisitRecords(ctx, query, nodes,
			func(n *Tender) { n.appendNamedVisitRecords(name) },
			func(n *Tender, e *VisitRecord) { n.appendNamedVisitRecords(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range tq.loadTotal {
		if err := tq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TenderQuery) loadArea(ctx context.Context, query *AreaQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *Area)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		fk := nodes[i].AreaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(area.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "area_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *Customer)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].CustomerID == nil {
			continue
		}
		fk := *nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadFinder(ctx context.Context, query *UserQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].FinderID == nil {
			continue
		}
		fk := *nodes[i].FinderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "finder_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *User)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].CreatedByID == nil {
			continue
		}
		fk := *nodes[i].CreatedByID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadFollowingSales(ctx context.Context, query *UserQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[xid.ID]*Tender)
	nids := make(map[xid.ID]map[*Tender]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(tender.FollowingSalesTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(tender.FollowingSalesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(tender.FollowingSalesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(tender.FollowingSalesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(xid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*xid.ID)
				inValue := *values[1].(*xid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Tender]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "following_sales" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadProvince(ctx context.Context, query *ProvinceQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *Province)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].ProvinceID == nil {
			continue
		}
		fk := *nodes[i].ProvinceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(province.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "province_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *City)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadDistrict(ctx context.Context, query *DistrictQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *District)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].DistrictID == nil {
			continue
		}
		fk := *nodes[i].DistrictID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(district.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "district_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TenderQuery) loadVisitRecords(ctx context.Context, query *VisitRecordQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *VisitRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[xid.ID]*Tender)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(visitrecord.FieldTenderID)
	}
	query.Where(predicate.VisitRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tender.VisitRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TenderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "tender_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tender_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TenderQuery) loadCompetitor(ctx context.Context, query *CompetitorQuery, nodes []*Tender, init func(*Tender), assign func(*Tender, *Competitor)) error {
	ids := make([]xid.ID, 0, len(nodes))
	nodeids := make(map[xid.ID][]*Tender)
	for i := range nodes {
		if nodes[i].CompetitorID == nil {
			continue
		}
		fk := *nodes[i].CompetitorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(competitor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "competitor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tq *TenderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TenderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tender.Table, tender.Columns, sqlgraph.NewFieldSpec(tender.FieldID, field.TypeString))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tender.FieldID)
		for i := range fields {
			if fields[i] != tender.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tq.withArea != nil {
			_spec.Node.AddColumnOnce(tender.FieldAreaID)
		}
		if tq.withCustomer != nil {
			_spec.Node.AddColumnOnce(tender.FieldCustomerID)
		}
		if tq.withFinder != nil {
			_spec.Node.AddColumnOnce(tender.FieldFinderID)
		}
		if tq.withCreatedBy != nil {
			_spec.Node.AddColumnOnce(tender.FieldCreatedByID)
		}
		if tq.withProvince != nil {
			_spec.Node.AddColumnOnce(tender.FieldProvinceID)
		}
		if tq.withCity != nil {
			_spec.Node.AddColumnOnce(tender.FieldCityID)
		}
		if tq.withDistrict != nil {
			_spec.Node.AddColumnOnce(tender.FieldDistrictID)
		}
		if tq.withCompetitor != nil {
			_spec.Node.AddColumnOnce(tender.FieldCompetitorID)
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TenderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(tender.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = tender.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedFollowingSales tells the query-builder to eager-load the nodes that are connected to the "following_sales"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithNamedFollowingSales(name string, opts ...func(*UserQuery)) *TenderQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedFollowingSales == nil {
		tq.withNamedFollowingSales = make(map[string]*UserQuery)
	}
	tq.withNamedFollowingSales[name] = query
	return tq
}

// WithNamedVisitRecords tells the query-builder to eager-load the nodes that are connected to the "visit_records"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TenderQuery) WithNamedVisitRecords(name string, opts ...func(*VisitRecordQuery)) *TenderQuery {
	query := (&VisitRecordClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedVisitRecords == nil {
		tq.withNamedVisitRecords = make(map[string]*VisitRecordQuery)
	}
	tq.withNamedVisitRecords[name] = query
	return tq
}

// TenderGroupBy is the group-by builder for Tender entities.
type TenderGroupBy struct {
	selector
	build *TenderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TenderGroupBy) Aggregate(fns ...AggregateFunc) *TenderGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TenderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, ent.OpQueryGroupBy)
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderQuery, *TenderGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TenderGroupBy) sqlScan(ctx context.Context, root *TenderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TenderSelect is the builder for selecting fields of Tender entities.
type TenderSelect struct {
	*TenderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TenderSelect) Aggregate(fns ...AggregateFunc) *TenderSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TenderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, ent.OpQuerySelect)
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenderQuery, *TenderSelect](ctx, ts.TenderQuery, ts, ts.inters, v)
}

func (ts *TenderSelect) sqlScan(ctx context.Context, root *TenderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
