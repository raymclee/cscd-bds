package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/config"
	"cscd-bds/graphql/generated"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/schema/geo"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/user"
	"cscd-bds/util"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/twpayne/go-geom"
	"github.com/twpayne/go-geom/encoding/geojson"
)

// CreateArea is the resolver for the createArea field.
func (r *mutationResolver) CreateArea(ctx context.Context, input ent.CreateAreaInput) (*ent.AreaConnection, error) {
	q := r.store.Area.Create().SetInput(input)
	a, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create area: %w", err)
	}
	return &ent.AreaConnection{Edges: []*ent.AreaEdge{{Node: a}}}, nil
}

// UpdateArea is the resolver for the updateArea field.
func (r *mutationResolver) UpdateArea(ctx context.Context, id xid.ID, input ent.UpdateAreaInput) (*ent.Area, error) {
	return r.store.Area.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.UserConnection, error) {
	accessToken, err := r.session.GetAccessToken(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get access token: %w", err)
	}

	fu, err := r.feishu.GetFeishuUser(ctx, input.OpenID, accessToken)
	if err != nil {
		return nil, fmt.Errorf("failed to get feishu user: %w", err)
	}
	if fu.EnName == nil {
		return nil, fmt.Errorf("failed to get feishu user: %w", errors.New("feishu user en name is nil"))
	}

	err = r.store.User.Create().
		SetInput(input).
		SetOpenID(input.OpenID).
		SetNillableAvatarURL(fu.Avatar.AvatarOrigin).
		SetNillableEmail(fu.Email).
		SetNillableName(fu.Name).
		SetNillableUsername(fu.EnName).
		OnConflictColumns(user.FieldOpenID).
		UpdateNewValues().
		Exec(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	u, err := r.store.User.Query().Where(user.Username(*fu.EnName)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}
	// u, err = r.store.User.Query().Where(user.Username(*fu.EnName)).Only(ctx)
	// if ent.IsNotFound(err) {
	// 	u, err = r.store.User.Create().SetInput(input).SetName(*fu.Name).SetAvatarURL(*fu.Avatar.AvatarOrigin).SetUsername(*fu.EnName).SetEmail(*fu.Email).Save(ctx)
	// 	if err != nil {
	// 		return nil, fmt.Errorf("failed to create user: %w", err)
	// 	}
	// } else {
	// 	u, err = u.Update().AddAreaIDs(input.AreaIDs...).Save(ctx)
	// 	if err != nil {
	// 		return nil, fmt.Errorf("failed to update user: %w", err)
	// 	}
	// }

	return &ent.UserConnection{Edges: []*ent.UserEdge{{Node: u}}}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id xid.ID, input ent.UpdateUserInput) (*ent.User, error) {
	return r.store.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id xid.ID) (*ent.User, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	if string(id) == sess.UserId {
		return nil, fmt.Errorf("failed to delete user: %w", errors.New("cannot delete self"))
	}
	u, err := r.store.User.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}
	if sess.IsAdmin && (u.IsSuperAdmin || u.IsCeo) {
		return nil, fmt.Errorf("failed to delete user: %w", errors.New("cannot delete super admin or ceo"))
	}
	return u, r.store.User.DeleteOne(u).Exec(ctx)
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.CustomerConnection, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	c, err := r.store.Customer.Create().SetInput(input).SetCreatedByID(xid.ID(sess.UserId)).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create customer: %w", err)
	}
	return &ent.CustomerConnection{Edges: []*ent.CustomerEdge{{Node: c}}}, nil
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id xid.ID, input ent.UpdateCustomerInput) (*ent.Customer, error) {
	return r.store.Customer.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id xid.ID) (*ent.Customer, error) {
	c, err := r.store.Customer.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}
	return c, r.store.Customer.DeleteOne(c).Exec(ctx)
}

// CreateTender is the resolver for the createTender field.
func (r *mutationResolver) CreateTender(ctx context.Context, input ent.CreateTenderInput, geoBounds [][]float64, imageFileNames []string, attachmentFileNames []string, geoCoordinate []float64) (*ent.TenderConnection, error) {
	q := r.store.Tender.Create().SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	}

	tid := xid.MustNew("TE")
	q.SetID(tid)

	date := time.Now()
	stdate := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.Local)
	enddate := stdate.AddDate(0, 0, 1)
	a, err := r.store.Area.Query().
		Where(area.ID(input.AreaID)).
		WithTenders(func(tq *ent.TenderQuery) {
			tq.Where(
				tender.And(
					tender.CreatedAtGTE(stdate),
					tender.CreatedAtLTE(enddate),
				),
			)
		}).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	var n int
	if len(a.Edges.Tenders) > 0 {
		n = len(a.Edges.Tenders) + 2
	} else {
		n = 1
	}
	code := fmt.Sprintf("%s%s%03d", a.Code, date.Format("20060102"), n)
	q.SetCode(code)

	if a.Code == "GA" && input.Address != nil {
		adcode, lng, lat, address, err := r.amap.GeoCode(*input.Address)
		if err != nil {
			return nil, fmt.Errorf("failed to get geo code: %w", err)
		}
		d, err := r.store.District.Query().Where(district.Adcode(adcode)).WithCity().WithProvince().Only(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to get district: %w", err)
		}
		if d.Edges.City != nil {
			q.SetCity(d.Edges.City)
		}
		if d.Edges.Province != nil {
			q.SetProvince(d.Edges.Province)
		}
		q.SetDistrict(d)
		q.SetFullAddress(address)
		center, err := geojson.Encode(geom.NewPoint(geom.XY).MustSetCoords(geom.Coord{lng, lat}).SetSRID(4326))
		if err != nil {
			return nil, fmt.Errorf("failed to encode geo coordinate: %w", err)
		}
		coordinate := &geo.GeoJson{Geometry: center}
		q.SetGeoCoordinate(coordinate).SetDistrict(d)
	}

	if len(geoCoordinate) > 1 {
		lng, lat := geoCoordinate[1], geoCoordinate[0]
		center, err := geojson.Encode(geom.NewPoint(geom.XY).MustSetCoords(geom.Coord{lng, lat}).SetSRID(4326))
		if err != nil {
			return nil, fmt.Errorf("failed to encode geo coordinate: %w", err)
		}
		coordinate := &geo.GeoJson{Geometry: center}
		q.SetGeoCoordinate(coordinate)
	}

	var images []string
	{
		for _, fn := range imageFileNames {
			filename, err := util.SaveStaticFile(string(tid), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			q.SetImages(images)
		}
	}

	var attachments []string
	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(string(tid), fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			attachments = append(attachments, fmt.Sprintf("/static/%s", filename))
		}
		if len(attachments) > 0 {
			q.SetAttachements(attachments)
		}
	}

	t, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender: %w", err)
	}

	if t.Status == 3 {
		go r.sap.InsertTender(r.store, t)
	}

	return &ent.TenderConnection{
		Edges: []*ent.TenderEdge{
			{Node: t},
		},
	}, nil
}

// UpdateTender is the resolver for the updateTender field.
func (r *mutationResolver) UpdateTender(ctx context.Context, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64, imageFileNames []string, removeImageFileNames []string, attachmentFileNames []string, removeAttachmentFileNames []string, geoCoordinate []float64) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	t, err := r.store.Tender.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.CreatedByID != nil && string(*t.CreatedByID) != sess.UserId && (!sess.IsAdmin && !sess.IsSuperAdmin) {
		return nil, fmt.Errorf("failed to update tender: %w", errors.New("permission denied"))
	}

	q := r.store.Tender.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}

	var images []string
	{
		for _, fn := range imageFileNames {
			if strings.HasPrefix(fn, "/static/") {
				continue
			}
			filename, err := util.SaveStaticFile(string(t.ID), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			q.AppendImages(images)
		}
	}

	var removedImages []string
	for _, fn := range removeImageFileNames {
		for i, image := range t.Images {
			img := strings.TrimPrefix(image, fmt.Sprintf("/static/%s/", string(t.ID)))

			if img == fn {
				util.DeleteStaticFile(string(t.ID), image)
				removedImages = append(t.Images[:i], t.Images[i+1:]...)
				continue
			}
		}
	}
	if len(removeImageFileNames) > 0 {
		q.SetImages(removedImages)
	}

	var attachments []string
	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(string(t.ID), fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			attachments = append(attachments, fmt.Sprintf("/static/%s", filename))
		}
		if len(attachments) > 0 {
			q.AppendAttachements(attachments)
		}
	}

	var removedAttachments []string
	for _, fn := range removeAttachmentFileNames {
		for i, att := range t.Attachements {
			at := strings.TrimPrefix(att, fmt.Sprintf("/static/%s/", string(t.ID)))
			if at == fn {
				util.DeleteStaticFile(string(t.ID), att)
				removedAttachments = append(t.Attachements[:i], t.Attachements[i+1:]...)
				continue
			}
		}
	}
	if len(removeAttachmentFileNames) > 0 {
		q.SetAttachements(removedAttachments)
	}

	if t.Code == "GA" && input.Address != nil && t.Address != nil && *input.Address != *t.Address {
		adcode, lng, lat, address, err := r.amap.GeoCode(*input.Address)
		if err != nil {
			return nil, fmt.Errorf("failed to get geo code: %w", err)
		}
		d, err := r.store.District.Query().Where(district.Adcode(adcode)).WithCity().WithProvince().Only(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to get district: %w", err)
		}
		if d.Edges.City != nil {
			q.SetCity(d.Edges.City)
		}
		if d.Edges.Province != nil {
			q.SetProvince(d.Edges.Province)
		}
		q.SetDistrict(d)
		q.SetFullAddress(address)
		center, err := geojson.Encode(geom.NewPoint(geom.XY).MustSetCoords(geom.Coord{lng, lat}).SetSRID(4326))
		if err != nil {
			return nil, fmt.Errorf("failed to encode geo coordinate: %w", err)
		}
		coordinate := &geo.GeoJson{Geometry: center}
		q.SetGeoCoordinate(coordinate).SetDistrict(d)
	}

	if len(geoCoordinate) > 1 {
		lng, lat := geoCoordinate[1], geoCoordinate[0]
		center, err := geojson.Encode(geom.NewPoint(geom.XY).MustSetCoords(geom.Coord{lng, lat}).SetSRID(4326))
		if err != nil {
			return nil, fmt.Errorf("failed to encode geo coordinate: %w", err)
		}
		coordinate := &geo.GeoJson{Geometry: center}
		q.SetGeoCoordinate(coordinate)
	}

	t, err = q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update tender: %w", err)
	}

	if t.Status == 3 {
		go r.sap.InsertTender(r.store, t)
	}

	return t, nil
}

// DeleteTender is the resolver for the deleteTender field.
func (r *mutationResolver) DeleteTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	t, err := r.store.Tender.Query().Where(tender.ID(id)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}
	if err := r.store.Tender.DeleteOne(t).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete tender: %w", err)
	}
	return t, nil
}

// CreatePlot is the resolver for the createPlot field.
func (r *mutationResolver) CreatePlot(ctx context.Context, input ent.CreatePlotInput, geoBounds [][]float64) (*ent.PlotConnection, error) {
	p, err := r.store.Plot.Create().SetInput(input).SetGeoBounds(geoBounds).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create plot: %w", err)
	}
	return &ent.PlotConnection{
		Edges: []*ent.PlotEdge{
			{Node: p},
		},
	}, nil
}

// UpdatePlot is the resolver for the updatePlot field.
func (r *mutationResolver) UpdatePlot(ctx context.Context, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) (*ent.Plot, error) {
	q := r.store.Plot.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}
	return q.Save(ctx)
}

// DeletePlot is the resolver for the deletePlot field.
func (r *mutationResolver) DeletePlot(ctx context.Context, id xid.ID) (*ent.Plot, error) {
	p, err := r.store.Plot.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get plot: %w", err)
	}
	if err := r.store.Plot.DeleteOne(p).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete plot: %w", err)
	}
	return p, nil
}

// CreateVisitRecord is the resolver for the createVisitRecord field.
func (r *mutationResolver) CreateVisitRecord(ctx context.Context, input ent.CreateVisitRecordInput) (*ent.VisitRecordConnection, error) {
	n, err := r.store.VisitRecord.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create visit record: %w", err)
	}
	return &ent.VisitRecordConnection{
		Edges: []*ent.VisitRecordEdge{
			{Node: n},
		},
	}, nil
}

// UpdateVisitRecord is the resolver for the updateVisitRecord field.
func (r *mutationResolver) UpdateVisitRecord(ctx context.Context, id xid.ID, input ent.UpdateVisitRecordInput) (*ent.VisitRecord, error) {
	return r.store.VisitRecord.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteVisitRecord is the resolver for the deleteVisitRecord field.
func (r *mutationResolver) DeleteVisitRecord(ctx context.Context, id xid.ID) (*ent.VisitRecord, error) {
	v, err := r.store.VisitRecord.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get visit record: %w", err)
	}
	if err := r.store.VisitRecord.DeleteOne(v).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete visit record: %w", err)
	}
	return v, nil
}

// CreateCompetitor is the resolver for the createCompetitor field.
func (r *mutationResolver) CreateCompetitor(ctx context.Context, input ent.CreateCompetitorInput) (*ent.Competitor, error) {
	return r.store.Competitor.Create().SetInput(input).Save(ctx)
}

// UpdateCompetitor is the resolver for the updateCompetitor field.
func (r *mutationResolver) UpdateCompetitor(ctx context.Context, id xid.ID, input ent.UpdateCompetitorInput) (*ent.Competitor, error) {
	return r.store.Competitor.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteCompetitor is the resolver for the deleteCompetitor field.
func (r *mutationResolver) DeleteCompetitor(ctx context.Context, id xid.ID) (*ent.Competitor, error) {
	c, err := r.store.Competitor.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get competitor: %w", err)
	}
	if err := r.store.Competitor.DeleteOne(c).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete competitor: %w", err)
	}
	return c, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id xid.ID, input ent.UpdateProjectInput) (*ent.Project, error) {
	p, err := r.store.Project.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update project: %w", err)
	}
	if config.IsProd {
		go func() {
			if _, err := r.stgDb.Exec(`
			update mst_jobbasfil 
				set 
					opdate = @opdate, 
					fsdate = @fsdate 
			where 
				jobcode = @jobcode
				and pk_corp = '2837'
				and finishedflag in ('N','Y')
				AND JOBTYPE='J'
			`,
				sql.Named("opdate", p.OpDate),
				sql.Named("fsdate", p.FsDate),
				sql.Named("jobcode", p.Code),
			); err != nil {
				fmt.Printf("failed to update project: %v\n", err)
			}
		}()
	}
	return p, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
