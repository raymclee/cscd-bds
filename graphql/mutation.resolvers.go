package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/generated"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
)

// CreateArea is the resolver for the createArea field.
func (r *mutationResolver) CreateArea(ctx context.Context, input ent.CreateAreaInput) (*ent.Area, error) {
	return r.store.Area.Create().SetInput(input).Save(ctx)
}

// UpdateArea is the resolver for the updateArea field.
func (r *mutationResolver) UpdateArea(ctx context.Context, id xid.ID, input ent.UpdateAreaInput) (*ent.Area, error) {
	return r.store.Area.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return r.store.User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id xid.ID, input ent.UpdateUserInput) (*ent.User, error) {
	return r.store.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateTender is the resolver for the createTender field.
func (r *mutationResolver) CreateTender(ctx context.Context, input ent.CreateTenderInput, geoBounds [][]float64) (*ent.TenderConnection, error) {
	q := r.store.Tender.Create().SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	}
	t, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender: %w", err)
	}
	return &ent.TenderConnection{
		Edges: []*ent.TenderEdge{
			{Node: t},
		},
	}, nil
}

// UpdateTender is the resolver for the updateTender field.
func (r *mutationResolver) UpdateTender(ctx context.Context, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64) (*ent.Tender, error) {
	q := r.store.Tender.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}
	return q.Save(ctx)
}

// DeleteTender is the resolver for the deleteTender field.
func (r *mutationResolver) DeleteTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	t, err := r.store.Tender.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}
	if err := r.store.Tender.DeleteOne(t).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete tender: %w", err)
	}
	return t, nil
}

// CreatePlot is the resolver for the createPlot field.
func (r *mutationResolver) CreatePlot(ctx context.Context, input ent.CreatePlotInput, geoBounds [][]float64) (*ent.PlotConnection, error) {
	p, err := r.store.Plot.Create().SetInput(input).SetGeoBounds(geoBounds).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create plot: %w", err)
	}
	return &ent.PlotConnection{
		Edges: []*ent.PlotEdge{
			{Node: p},
		},
	}, nil
}

// UpdatePlot is the resolver for the updatePlot field.
func (r *mutationResolver) UpdatePlot(ctx context.Context, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) (*ent.Plot, error) {
	q := r.store.Plot.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}
	return q.Save(ctx)
}

// DeletePlot is the resolver for the deletePlot field.
func (r *mutationResolver) DeletePlot(ctx context.Context, id xid.ID) (*ent.Plot, error) {
	p, err := r.store.Plot.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get plot: %w", err)
	}
	if err := r.store.Plot.DeleteOne(p).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete plot: %w", err)
	}
	return p, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
