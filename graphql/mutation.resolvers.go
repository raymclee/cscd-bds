package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/config"
	"cscd-bds/feishu"
	"cscd-bds/graphql/generated"
	model1 "cscd-bds/graphql/model"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/customer"
	"cscd-bds/store/ent/customerprofile"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/store/ent/tenderprofile"
	"cscd-bds/store/ent/user"
	"cscd-bds/util"
	"errors"
	"fmt"
	"slices"
	"strings"
	"time"
)

// CreateArea is the resolver for the createArea field.
func (r *mutationResolver) CreateArea(ctx context.Context, input ent.CreateAreaInput) (*ent.AreaConnection, error) {
	q := r.store.Area.Create().SetInput(input)
	a, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create area: %w", err)
	}
	return &ent.AreaConnection{Edges: []*ent.AreaEdge{{Node: a}}}, nil
}

// UpdateArea is the resolver for the updateArea field.
func (r *mutationResolver) UpdateArea(ctx context.Context, id xid.ID, input ent.UpdateAreaInput) (*ent.Area, error) {
	return r.store.Area.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.UserConnection, error) {
	accessToken, err := r.session.GetAccessToken(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get access token: %w", err)
	}

	fu, err := r.feishu.GetFeishuUser(ctx, input.OpenID, accessToken)
	if err != nil {
		return nil, fmt.Errorf("failed to get feishu user: %w", err)
	}
	if fu.EnName == nil {
		return nil, fmt.Errorf("failed to get feishu user: %w", errors.New("feishu user en name is nil"))
	}

	q := r.store.User.Create().
		SetInput(input).
		SetOpenID(input.OpenID).
		SetNillableAvatarURL(fu.Avatar.AvatarOrigin).
		SetNillableEmail(fu.Email).
		SetNillableName(fu.Name).
		SetNillableUsername(fu.EnName)

	if input.ProjectIDs != nil {
		if input.ProjectIDs[0] == "all" {
			ids, err := r.store.Project.Query().IDs(ctx)
			if err != nil {
				return nil, fmt.Errorf("failed to get project ids: %w", err)
			}
			q.AddProjectIDs(ids...)
		} else {
			q.AddProjectIDs(input.ProjectIDs...)
		}
	}

	if err := q.
		OnConflictColumns(user.FieldOpenID).
		UpdateNewValues().
		Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	u, err := r.store.User.Query().Where(user.Username(*fu.EnName)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}
	// u, err = r.store.User.Query().Where(user.Username(*fu.EnName)).Only(ctx)
	// if ent.IsNotFound(err) {
	// 	u, err = r.store.User.Create().SetInput(input).SetName(*fu.Name).SetAvatarURL(*fu.Avatar.AvatarOrigin).SetUsername(*fu.EnName).SetEmail(*fu.Email).Save(ctx)
	// 	if err != nil {
	// 		return nil, fmt.Errorf("failed to create user: %w", err)
	// 	}
	// } else {
	// 	u, err = u.Update().AddAreaIDs(input.AreaIDs...).Save(ctx)
	// 	if err != nil {
	// 		return nil, fmt.Errorf("failed to update user: %w", err)
	// 	}
	// }

	return &ent.UserConnection{Edges: []*ent.UserEdge{{Node: u}}}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id xid.ID, input ent.UpdateUserInput) (*ent.User, error) {
	if input.AddProjectIDs != nil && slices.Contains(input.AddProjectIDs, "all") {
		ids, err := r.store.Project.Query().Where().IDs(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to get project ids: %w", err)
		}
		input.AddProjectIDs = ids
	}
	if input.AddProjectIDs != nil {
		input.ClearProjects = true
	}
	return r.store.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id xid.ID) (*ent.User, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	if string(id) == sess.UserId {
		return nil, fmt.Errorf("failed to delete user: %w", errors.New("cannot delete self"))
	}
	u, err := r.store.User.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}
	if sess.IsAdmin && (u.IsSuperAdmin || u.IsCeo) {
		return nil, fmt.Errorf("failed to delete user: %w", errors.New("cannot delete super admin or ceo"))
	}
	return u, r.store.User.DeleteOne(u).Exec(ctx)
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.CustomerConnection, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	areas, err := r.store.Area.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get area: %w", err)
	}

	var isSH bool
	for _, a := range areas {
		if a.Code != "GA" && a.Code != "HW" && a.ID == input.AreaID {
			isSH = true
		}
	}
	q := r.store.Customer.Create().SetInput(input).SetCreatedByID(xid.ID(sess.UserId))
	if !isSH {
		q.SetApprovalStatus(2)
	}

	c, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create customer: %w", err)
	}

	return &ent.CustomerConnection{Edges: []*ent.CustomerEdge{{Node: c}}}, nil
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id xid.ID, input ent.UpdateCustomerInput) (*ent.Customer, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	return r.store.Customer.UpdateOneID(id).SetInput(input).SetUpdatedByID(xid.ID(sess.UserId)).Save(ctx)
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id xid.ID) (*ent.Customer, error) {
	c, err := r.store.Customer.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}
	return c, r.store.Customer.DeleteOne(c).Exec(ctx)
}

// ApproveCustomer is the resolver for the approveCustomer field.
func (r *mutationResolver) ApproveCustomer(ctx context.Context, id xid.ID) (*ent.Customer, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	c, err := r.store.Customer.Query().
		Where(customer.ID(id)).
		WithSales(func(uq *ent.UserQuery) {
			uq.WithLeader()
		}).
		WithPendingProfile().
		WithActiveProfile().
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}
	if c.Edges.PendingProfile == nil {
		return nil, fmt.Errorf("failed to approve customer: %w", errors.New("customer has no pending profile"))
	}

	if !sess.IsAdmin && !sess.IsSuperAdmin && c.Edges.Sales != nil && c.Edges.Sales.LeaderID != nil {
		if string(*c.Edges.Sales.LeaderID) != sess.UserId {
			return nil, fmt.Errorf("failed to approve customer: %w", errors.New("not allowed to approve customer"))
		}
	}

	isCreate := c.Edges.ActiveProfile == nil

	if err := r.store.CustomerProfile.
		UpdateOneID(c.Edges.PendingProfile.ID).
		SetApprovalStatus(2).
		ClearApprovalMsgID().
		SetApproverID(xid.ID(sess.UserId)).
		SetApprovalDate(time.Now()).
		Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to approve customer: %w", err)
	}

	if c.Edges.PendingProfile.ApprovalMsgID != nil {
		go func() {
			ctxx := context.Background()
			cp, err := r.store.CustomerProfile.Query().
				Where(customerprofile.ID(c.Edges.PendingProfile.ID)).
				WithCustomer(func(cq *ent.CustomerQuery) {
					cq.WithArea()
				}).
				WithApprover().
				WithCreatedBy().
				WithSales().
				Only(ctxx)
			if err != nil {
				fmt.Printf("failed to get customer profile: %v\n", err)
				return
			}
			var (
				title  string
				color  string
				result string
			)
			if isCreate {
				title = feishu.CreateCustomerApprovedTitle
				color = feishu.ApprovedColor
				result = feishu.CreateCustomerApprovedResult
			} else {
				title = feishu.UpdateCustomerApprovedTitle
				color = feishu.ApprovedColor
				result = feishu.UpdateCustomerApprovedResult
			}
			if err := r.feishu.UpdateGroupMessage(ctxx, &feishu.UpdateGroupMessageParams{
				TemplateId:         feishu.TemplateIdCustomerFinished,
				MsgId:              *c.Edges.PendingProfile.ApprovalMsgID,
				CustomerProfile:    cp,
				CustomerCardTitle:  title,
				CustomerCardColor:  color,
				CustomerCardResult: result,
			}); err != nil {
				fmt.Printf("failed to update group message: %v\n", err)
			}

			if err := cp.Update().ClearApprovalMsgID().Exec(ctxx); err != nil {
				fmt.Printf("failed to clear approval msg id: %v\n", err)
			}

			chatId := r.feishu.GetSalesChatId(cp.Edges.Customer.Edges.Area)
			if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdCustomerFinished, &feishu.GroupMessageParams{
				CustomerProfile:    cp,
				ChatId:             chatId,
				CustomerCardTitle:  title,
				CustomerCardColor:  color,
				CustomerCardResult: result,
			}); err != nil {
				fmt.Printf("failed to send group message: %v\n", err)
			}

		}()
	}
	if err := c.Update().SetActiveProfileID(c.Edges.PendingProfile.ID).ClearPendingProfile().Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to approve customer: %w", err)
	}

	return r.store.Customer.Query().Where(customer.ID(id)).WithPendingProfile().WithActiveProfile().Only(ctx)
}

// RejectCustomer is the resolver for the rejectCustomer field.
func (r *mutationResolver) RejectCustomer(ctx context.Context, id xid.ID) (*ent.Customer, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	c, err := r.store.Customer.Query().
		Where(customer.ID(id)).
		WithPendingProfile().
		WithActiveProfile().
		WithSales(func(uq *ent.UserQuery) {
			uq.WithLeader()
		}).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}

	if !sess.IsAdmin && !sess.IsSuperAdmin && c.Edges.Sales != nil && c.Edges.Sales.LeaderID != nil {
		if string(*c.Edges.Sales.LeaderID) != sess.UserId {
			return nil, fmt.Errorf("failed to reject customer: %w", errors.New("not allowed to reject customer"))
		}
	}

	if c.Edges.PendingProfile == nil {
		return nil, fmt.Errorf("failed to approve customer: %w", errors.New("customer has no pending profile"))
	}

	isNew := c.Edges.ActiveProfile == nil

	if err := r.store.CustomerProfile.UpdateOneID(c.Edges.PendingProfile.ID).
		SetApprovalStatus(3).
		SetApproverID(xid.ID(sess.UserId)).
		SetApprovalDate(time.Now()).
		Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to approve customer: %w", err)
	}

	if c.Edges.PendingProfile.ApprovalMsgID != nil {
		go func() {
			ctxx := context.Background()
			cp, err := r.store.CustomerProfile.Query().
				Where(customerprofile.ID(c.Edges.PendingProfile.ID)).
				WithCustomer(func(cq *ent.CustomerQuery) {
					cq.WithArea()
				}).
				WithApprover().
				WithCreatedBy().
				WithSales().
				Only(ctxx)
			if err != nil {
				fmt.Printf("failed to get customer profile: %v\n", err)
				return
			}

			var (
				title  string
				color  string
				result string
			)
			if isNew {
				title = feishu.CreateCustomerRejectedTitle
				color = feishu.RejectedColor
				result = feishu.CreateCustomerRejectedResult
			} else {
				title = feishu.UpdateCustomerRejectedTitle
				color = feishu.RejectedColor
				result = feishu.UpdateCustomerRejectedResult
			}
			if err := r.feishu.UpdateGroupMessage(ctxx, &feishu.UpdateGroupMessageParams{
				TemplateId:         feishu.TemplateIdCustomerFinished,
				MsgId:              *c.Edges.PendingProfile.ApprovalMsgID,
				CustomerProfile:    cp,
				CustomerCardTitle:  title,
				CustomerCardColor:  color,
				CustomerCardResult: result,
			}); err != nil {
				fmt.Printf("failed to update group message: %v\n", err)
			}

			if err := cp.Update().ClearApprovalMsgID().Exec(ctxx); err != nil {
				fmt.Printf("failed to clear approval msg id: %v\n", err)
			}

			chatId := r.feishu.GetSalesChatId(cp.Edges.Customer.Edges.Area)
			if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdCustomerFinished, &feishu.GroupMessageParams{
				CustomerProfile:    cp,
				ChatId:             chatId,
				CustomerCardTitle:  title,
				CustomerCardColor:  color,
				CustomerCardResult: result,
			}); err != nil {
				fmt.Printf("failed to send group message: %v\n", err)
			}
		}()
	}

	if err := c.Update().ClearPendingProfile().Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to approve customer: %w", err)
	}

	return r.store.Customer.Query().Where(customer.ID(id)).WithPendingProfile().WithActiveProfile().Only(ctx)
}

// CreateCustomerV2 is the resolver for the createCustomerV2 field.
func (r *mutationResolver) CreateCustomerV2(ctx context.Context, customerInput ent.CreateCustomerInput, profileInput ent.CreateCustomerProfileInput) (*ent.Customer, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	cus, err := r.store.Customer.Create().SetInput(customerInput).SetCreatedByID(xid.ID(sess.UserId)).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create customer: %w", err)
	}

	cp, err := r.store.CustomerProfile.Create().SetInput(profileInput).SetCreatedByID(xid.ID(sess.UserId)).SetCustomerID(cus.ID).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create customer profile: %w", err)
	}

	go func() {
		ctxx := context.Background()
		u, err := r.store.User.Query().Where(user.ID(xid.ID(sess.UserId))).WithLeader().Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get user: %v\n", err)
			return
		}
		cpp, err := r.store.CustomerProfile.Query().Where(customerprofile.ID(cp.ID)).
			WithCustomer(func(cq *ent.CustomerQuery) {
				cq.WithArea()
			}).
			WithSales().
			WithCreatedBy().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get customer profile: %v\n", err)
			return
		}
		if u.Edges.Leader != nil {
			msgId, err := r.feishu.SendChatMessage(ctxx, &feishu.ChatMessageParams{
				CustomerProfile:   cpp,
				TemplateId:        feishu.TemplateIdCustomerRequest,
				ChatId:            u.Edges.Leader.OpenID,
				CustomerCardTitle: feishu.CreateCustomerRequestTitle,
				CustomerCardColor: "blue",
			})
			if err != nil {
				fmt.Printf("failed to send chat message: %v\n", err)
				return
			}
			if err := r.store.CustomerProfile.UpdateOneID(cp.ID).SetApprovalMsgID(msgId).Exec(ctxx); err != nil {
				fmt.Printf("failed to update customer profile: %v\n", err)
			}
		}
	}()

	return cus.Update().SetPendingProfile(cp).Save(ctx)
}

// UpdateCustomerV2 is the resolver for the updateCustomerV2 field.
func (r *mutationResolver) UpdateCustomerV2(ctx context.Context, id xid.ID, customerInput ent.UpdateCustomerInput, profileInput ent.CreateCustomerProfileInput) (*ent.Customer, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	cus, err := r.store.Customer.Query().Where(customer.ID(id)).WithActiveProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get customer: %w", err)
	}

	isNew := cus.Edges.ActiveProfile == nil

	ocps, err := r.store.CustomerProfile.Query().
		Where(customerprofile.And(
			customerprofile.CustomerID(cus.ID),
			customerprofile.ApprovalStatus(1),
		)).
		WithCustomer(func(cq *ent.CustomerQuery) {
			cq.WithArea()
		}).
		WithSales().
		WithCreatedBy().
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to approve customer profile: %w", err)
	}
	for _, cp := range ocps {
		if cp.ApprovalMsgID != nil {
			go func() {
				ctxx := context.Background()
				if err := r.feishu.UpdateGroupMessage(ctxx, &feishu.UpdateGroupMessageParams{
					TemplateId:      feishu.TemplateIdCustomerCanceled,
					MsgId:           *cp.ApprovalMsgID,
					CustomerProfile: cp,
				}); err != nil {
					fmt.Printf("failed to update group message: %v\n", err)
					return
				}
			}()
		}
		if err := r.store.CustomerProfile.UpdateOneID(cp.ID).SetApprovalStatus(4).ClearApprovalMsgID().Exec(context.Background()); err != nil {
			fmt.Printf("failed to update customer profile: %v\n", err)
		}
	}

	cp, err := r.store.CustomerProfile.Create().SetInput(profileInput).SetCreatedByID(xid.ID(sess.UserId)).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create customer profile: %w", err)
	}

	go func() {
		ctxx := context.Background()
		u, err := r.store.User.Query().Where(user.ID(xid.ID(sess.UserId))).WithLeader().Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get user: %v\n", err)
			return
		}
		cpp, err := r.store.CustomerProfile.Query().
			Where(customerprofile.ID(cp.ID)).
			WithCustomer(func(cq *ent.CustomerQuery) {
				cq.WithArea()
			}).
			WithSales().
			WithCreatedBy().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get customer profile: %v\n", err)
			return
		}
		if u.Edges.Leader != nil {
			var (
				title string
				color string
			)
			if isNew {
				title = feishu.CreateCustomerRequestTitle
				color = feishu.ApprovedColor
			} else {
				title = feishu.UpdateCustomerRequestTitle
				color = feishu.ApprovedColor
			}
			msgId, err := r.feishu.SendChatMessage(ctxx, &feishu.ChatMessageParams{
				CustomerProfile:   cpp,
				TemplateId:        feishu.TemplateIdCustomerRequest,
				ChatId:            u.Edges.Leader.OpenID,
				CustomerCardTitle: title,
				CustomerCardColor: color,
			})
			if err != nil {
				fmt.Printf("failed to send chat message: %v\n", err)
				return
			}
			if err := r.store.CustomerProfile.UpdateOneID(cp.ID).SetApprovalMsgID(msgId).Exec(ctxx); err != nil {
				fmt.Printf("failed to update customer profile: %v\n", err)
			}
		}
	}()

	return cus.Update().SetPendingProfile(cp).Save(ctx)
}

// CreateTender is the resolver for the createTender field.
func (r *mutationResolver) CreateTender(ctx context.Context, tenderInput ent.CreateTenderInput, profileInput ent.CreateTenderProfileInput, imageFileNames []string) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	tid := xid.MustNew("TE")

	date := time.Now()
	stdate := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.Local)
	enddate := stdate.AddDate(0, 0, 1)
	a, err := r.store.Area.Query().
		Where(area.ID(tenderInput.AreaID)).
		WithTenders(func(tq *ent.TenderQuery) {
			tq.Where(
				tender.And(
					tender.CreatedAtGTE(stdate),
					tender.CreatedAtLTE(enddate),
				),
			)
		}).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	if a.Code != "HW" && a.Code != "GA" {
		return nil, fmt.Errorf("failed to create tender: %w", errors.New("上海商机不能直接创建"))
	}

	tenderInput.Code = util.NewTenderCode(len(a.Edges.Tenders), a.Code)

	if profileInput.FullAddress != nil {
		adcode, lng, lat, address, err := r.amap.GeoCode(*profileInput.FullAddress)
		if err != nil {
			return nil, fmt.Errorf("failed to get geo code: %w", err)
		}
		d, err := r.store.District.Query().Where(district.Adcode(adcode)).WithCity().WithProvince().Only(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to get district: %w", err)
		}
		if d.Edges.City != nil {
			profileInput.CityID = &d.Edges.City.ID
		}
		if d.Edges.Province != nil {
			profileInput.ProvinceID = &d.Edges.Province.ID
		}
		profileInput.DistrictID = &d.ID
		profileInput.FullAddress = &address
		profileInput.GeoCoordinate = []float64{lat, lng}
		profileInput.DistrictID = &d.ID
	}

	var images []string
	{
		for _, fn := range imageFileNames {
			filename, err := util.SaveStaticFile(string(tid), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			profileInput.Images = images
		}
	}

	t, err := r.store.Tender.Create().SetID(tid).SetInput(tenderInput).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender: %w", err)
	}

	cp, err := r.store.TenderProfile.Create().
		SetInput(profileInput).
		SetCreatedByID(xid.ID(sess.UserId)).
		SetApprovalStatus(2).
		SetTenderID(t.ID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	return t.Update().SetActiveProfile(cp).Save(ctx)
}

// UpdateTender is the resolver for the updateTender field.
func (r *mutationResolver) UpdateTender(ctx context.Context, id xid.ID, tenderInput ent.UpdateTenderInput, profileInput ent.CreateTenderProfileInput, imageFileNames []string, removeImageFileNames []string) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithArea().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.Edges.Area == nil || t.Edges.Area.Code != "HW" && t.Edges.Area.Code != "GA" {
		return nil, fmt.Errorf("failed to update tender: %w", errors.New("上海商机不能直接创建"))
	}

	var images []string
	{
		for _, fn := range imageFileNames {
			if strings.HasPrefix(fn, "/static/") {
				continue
			}
			filename, err := util.SaveStaticFile(string(t.ID), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			profileInput.Images = images
		}
	}

	if profileInput.Address != nil {
		adcode, lng, lat, address, err := r.amap.GeoCode(*profileInput.Address)
		if err != nil {
			return nil, fmt.Errorf("failed to get geo code: %w", err)
		}
		d, err := r.store.District.Query().Where(district.Adcode(adcode)).WithCity().WithProvince().Only(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to get district: %w", err)
		}
		if d.Edges.City != nil {
			profileInput.CityID = &d.Edges.City.ID
		}
		if d.Edges.Province != nil {
			profileInput.ProvinceID = &d.Edges.Province.ID
		}
		profileInput.DistrictID = &d.ID
		profileInput.FullAddress = &address
		profileInput.GeoCoordinate = []float64{lat, lng}
	}

	tp, err := r.store.TenderProfile.Create().
		SetInput(profileInput).
		SetCreatedByID(xid.ID(sess.UserId)).
		SetApprovalStatus(2).
		SetTenderID(t.ID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	if config.IsProd {
		go func() {
			ctxx := context.Background()
			tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
				WithTender(func(tq *ent.TenderQuery) {
					tq.WithArea()
				}).
				WithCreatedBy().
				WithCustomer().
				WithFinder().
				Only(ctxx)
			if err != nil {
				fmt.Printf("failed to get tender: %v\n", err)
				return
			}

			us, err := r.store.User.Query().Where(user.Or(user.Username("lindonghai"), user.Username("ray.mclee"))).All(ctxx)
			if err != nil {
				fmt.Printf("failed to get user: %v\n", err)
				return
			}

			for _, u := range us {
				if _, err = r.feishu.SendChatMessage(ctxx, &feishu.ChatMessageParams{
					TenderProfile: tpp,
					ChatId:        u.OpenID,
					TemplateId:    feishu.TemplateIdTenderUpdated,
				}); err != nil {
					fmt.Printf("failed to send group message: %v\n", err)
				}
			}
		}()
	}

	return t.Update().SetInput(tenderInput).SetActiveProfile(tp).Save(ctx)
}

// CreateTenderV2 is the resolver for the createTenderV2 field.
func (r *mutationResolver) CreateTenderV2(ctx context.Context, tenderInput ent.CreateTenderInput, profileInput ent.CreateTenderProfileInput, imageFileNames []string, attachmentFileNames []string) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	createById := xid.ID(sess.UserId)
	tenderInput.CreatedByID = &createById
	profileInput.CreatedByID = &createById

	date := time.Now()
	stdate := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.Local)
	enddate := stdate.AddDate(0, 0, 1)
	a, err := r.store.Area.Query().
		Where(area.ID(tenderInput.AreaID)).
		WithTenders(func(tq *ent.TenderQuery) {
			tq.Where(
				tender.And(
					tender.CreatedAtGTE(stdate),
					tender.CreatedAtLTE(enddate),
				),
			)
		}).
		Only(ctx)
	if err != nil {
		return nil, err
	}
	tenderInput.Code = util.NewTenderCode(len(a.Edges.Tenders), a.Code)
	t, err := r.store.Tender.Create().SetInput(tenderInput).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender: %w", err)
	}

	// isSHTender := util.IsSHTender(a.Code)

	var images []string
	{
		for _, fn := range imageFileNames {
			filename, err := util.SaveStaticFile(string(t.ID), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			profileInput.Images = images
		}
	}

	var attachments []string
	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(string(t.ID), fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			attachments = append(attachments, fmt.Sprintf("/static/%s", filename))
		}
		if len(attachments) > 0 {
			profileInput.Attachments = attachments
		}
	}

	tp, err := r.store.TenderProfile.Create().SetInput(profileInput).SetTender(t).SetCreatedByID(xid.ID(sess.UserId)).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	go func() {
		ctxx := context.Background()
		u, err := r.store.User.Query().Where(user.ID(xid.ID(sess.UserId))).WithLeader().Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get user: %v\n", err)
			return
		}
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender profile: %v\n", err)
			return
		}
		if u.Edges.Leader != nil {
			go func() {
				msgId, err := r.feishu.SendChatMessage(ctxx, &feishu.ChatMessageParams{
					TenderProfile: tpp,
					TemplateId:    feishu.TemplateIdTenderCreateRequest,
					ChatId:        u.Edges.Leader.OpenID,
				})
				if err != nil {
					fmt.Printf("failed to send chat message: %v\n", err)
				}
				if err := tpp.Update().SetApprovalMsgID(msgId).Exec(ctxx); err != nil {
					fmt.Printf("failed to update tender profile: %v\n", err)
				}
			}()
		}
	}()

	return t.Update().SetPendingProfileID(tp.ID).Save(ctx)
}

// UpdateTenderV2 is the resolver for the updateTenderV2 field.
func (r *mutationResolver) UpdateTenderV2(ctx context.Context, id xid.ID, tenderInput ent.UpdateTenderInput, profileInput ent.CreateTenderProfileInput, imageFileNames []string, attachmentFileNames []string, removeImageFileNames []string, removeAttachmentFileNames []string) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithPendingProfile().WithActiveProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.CreatedByID != nil && string(*t.CreatedByID) != sess.UserId && (!sess.IsAdmin && !sess.IsSuperAdmin) {
		return nil, fmt.Errorf("failed to update tender: %w", errors.New("permission denied"))
	}

	{
		for _, fn := range imageFileNames {
			if strings.HasPrefix(fn, "/static/") {
				continue
			}
			filename, err := util.SaveStaticFile(string(t.ID), fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			profileInput.Images = append(profileInput.Images, fmt.Sprintf("/static/%s", filename))
		}
	}

	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(string(t.ID), fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			profileInput.Attachments = append(profileInput.Attachments, fmt.Sprintf("/static/%s", filename))
		}
	}

	if t.Edges.PendingProfile != nil {
		for _, ai := range t.Edges.PendingProfile.Images {
			if !slices.Contains(removeImageFileNames, strings.TrimPrefix(ai, "/static/"+string(t.ID)+"/")) {
				profileInput.Images = append(profileInput.Images, ai)
			}
		}

		for _, ai := range t.Edges.PendingProfile.Attachments {
			if !slices.Contains(removeAttachmentFileNames, strings.TrimPrefix(ai, "/static/"+string(t.ID)+"/")) {
				profileInput.Attachments = append(profileInput.Attachments, ai)
			}
		}
	} else if t.Edges.ActiveProfile != nil {
		for _, ai := range t.Edges.ActiveProfile.Images {
			if !slices.Contains(removeImageFileNames, strings.TrimPrefix(ai, "/static/"+string(t.ID)+"/")) {
				profileInput.Images = append(profileInput.Images, ai)
			}
		}

		for _, ai := range t.Edges.ActiveProfile.Attachments {
			if !slices.Contains(removeAttachmentFileNames, strings.TrimPrefix(ai, "/static/"+string(t.ID)+"/")) {
				profileInput.Attachments = append(profileInput.Attachments, ai)
			}
		}
	}

	if err := r.store.TenderProfile.Update().
		Where(
			tenderprofile.And(
				tenderprofile.TenderID(t.ID),
				tenderprofile.ApprovalStatus(1),
			),
		).
		SetApprovalStatus(4).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to update tender profile: %w", err)
	}

	isNewTender := true
	if t.Edges.ActiveProfile != nil {
		now := time.Now()
		profileInput.ApprovalDate = &now
		profileInput.ApprovalStatus = &[]int{2}[0]
		isNewTender = false
	}

	// 创建新的profile
	tpq := r.store.TenderProfile.Create().SetInput(profileInput).SetTender(t).SetCreatedByID(xid.ID(sess.UserId))
	// 如果当前没有待审批的profile，则将新的profile设置为待审批

	tp, err := tpq.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update tender: %w", err)
	}

	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender: %v\n", err)
			return
		}

		if !isNewTender {
			chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
			if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderUpdated, &feishu.GroupMessageParams{
				TenderProfile: tpp,
				ChatId:        chatId,
			}); err != nil {
				fmt.Printf("failed to send group message: %v\n", err)
			}
		} else {
			u, err := r.store.User.Query().Where(user.ID(xid.ID(sess.UserId))).WithLeader().Only(ctxx)
			if err != nil {
				fmt.Printf("failed to get user: %v\n", err)
				return
			}
			msgId, err := r.feishu.SendChatMessage(ctxx, &feishu.ChatMessageParams{
				TenderProfile: tpp,
				ChatId:        u.Edges.Leader.OpenID,
				TemplateId:    feishu.TemplateIdTenderCreateRequest,
			})
			if err != nil {
				fmt.Printf("failed to send chat message: %v\n", err)
			}
			if err := tpp.Update().SetApprovalMsgID(msgId).Exec(ctxx); err != nil {
				fmt.Printf("failed to update tender profile: %v\n", err)
			}
		}
	}()

	// 设置新的profile为待审批
	tq := r.store.Tender.UpdateOneID(t.ID).SetInput(tenderInput)
	if t.Edges.ActiveProfile != nil {
		tq.SetActiveProfile(tp)
	} else if t.Edges.PendingProfile != nil {
		tq.SetPendingProfile(tp)
	}
	return tq.Save(ctx)
}

// VoidTender is the resolver for the voidTender field.
func (r *mutationResolver) VoidTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithActiveProfile().WithPendingProfile().WithArea().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.Status == 7 {
		return nil, fmt.Errorf("failed to void tender: %w", errors.New("tender is already voided"))
	}

	// 如果当前有待审批的profile，则将之前的profile设置为驳回
	if err := r.store.TenderProfile.Update().
		Where(tenderprofile.And(
			tenderprofile.TenderID(t.ID),
			tenderprofile.ApprovalStatus(1),
		)).
		SetApprovalStatus(4).
		Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to update tender profile: %w", err)
	}

	tpq := r.store.TenderProfile.Create()
	if t.Edges.ActiveProfile != nil {
		tpq.SetInput(CopyTenderProfile(t.Edges.ActiveProfile))
	} else if t.Edges.PendingProfile != nil {
		tpq.SetInput(CopyTenderProfile(t.Edges.PendingProfile))
	}

	tpq.
		SetTenderID(t.ID).
		SetApprovalStatus(2).
		SetStatus(7).
		SetCreatedByID(xid.ID(sess.UserId))

	tp, err := tpq.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender: %v\n", err)
			return
		}

		chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
		if chatId == "" {
			fmt.Printf("failed to get sales chat id: %v\n", errors.New("sales chat id is nil"))
			return
		}
		if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderUpdated, &feishu.GroupMessageParams{
			TenderProfile: tpp,
			ChatId:        chatId,
		}); err != nil {
			fmt.Printf("failed to send group message: %v\n", err)
		}
	}()

	return t.Update().ClearPendingProfile().SetActiveProfileID(tp.ID).Save(ctx)
}

// WinTender is the resolver for the winTender field.
func (r *mutationResolver) WinTender(ctx context.Context, id xid.ID, input model1.WinTenderInput) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithActiveProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.Edges.ActiveProfile == nil {
		return nil, fmt.Errorf("failed to win tender: %w", errors.New("tender is not approved"))
	}

	if !CanBeWinOrLose(t.Edges.ActiveProfile) {
		return nil, fmt.Errorf("failed to win tender: %w", errors.New("tender is not winnable"))
	}

	tp, err := r.store.TenderProfile.Create().
		SetInput(CopyTenderProfile(t.Edges.ActiveProfile)).
		SetStatus(3).
		SetProjectCode(input.ProjectCode).
		SetProjectDefinition(input.ProjectDefinition).
		SetTenderWinAmount(input.TenderWinAmount).
		SetTenderWinDate(time.Now()).
		SetTenderAmount(input.TenderWinAmount).
		SetTenderID(xid.ID(id)).
		SetCreatedByID(xid.ID(sess.UserId)).
		SetApprovalStatus(2).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	competitorCreates := make([]*ent.TenderCompetitorCreate, len(input.Competitors))
	for i, co := range input.Competitors {
		competitorCreates[i] = r.store.TenderCompetitor.Create().SetCompetitorID(xid.ID(co.ID)).SetTender(t).SetAmount(co.Amount)
	}
	if err := r.store.TenderCompetitor.CreateBulk(competitorCreates...).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to create competitors: %w", err)
	}

	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender profile: %v\n", err)
			return
		}
		chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
		if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderWin, &feishu.GroupMessageParams{
			TenderProfile: tpp,
			ChatId:        chatId,
		}); err != nil {
			fmt.Printf("failed to send group message: %v\n", err)
		}
	}()

	t, err = r.store.Tender.UpdateOneID(xid.ID(id)).
		ClearPendingProfile().
		SetActiveProfileID(tp.ID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update tender: %w", err)
	}
	// if !config.IsDev {
	go r.sap.InsertTender(r.store, t.ID)
	// }
	return t, nil
}

// LoseTender is the resolver for the loseTender field.
func (r *mutationResolver) LoseTender(ctx context.Context, id xid.ID, input model1.LoseTenderInput) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithActiveProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	if t.Edges.ActiveProfile == nil {
		return nil, fmt.Errorf("failed to win tender: %w", errors.New("tender is not approved"))
	}

	if !CanBeWinOrLose(t.Edges.ActiveProfile) {
		return nil, fmt.Errorf("failed to lose tender: %w", errors.New("tender is not losable"))
	}

	tp, err := r.store.TenderProfile.Create().
		SetInput(CopyTenderProfile(t.Edges.ActiveProfile)).
		SetStatus(4).
		SetTenderID(xid.ID(id)).
		SetCreatedByID(xid.ID(sess.UserId)).
		SetApprovalStatus(2).
		SetTenderAmount(input.TenderAmount).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender profile: %w", err)
	}

	competitorCreates := make([]*ent.TenderCompetitorCreate, len(input.Competitors)+1)
	for i, c := range input.Competitors {
		competitorCreates[i] = r.store.TenderCompetitor.Create().SetCompetitorID(xid.ID(c.ID)).SetTender(t).SetAmount(c.Amount)
	}
	competitorCreates[len(input.Competitors)] = r.store.TenderCompetitor.Create().
		SetCompetitorID(xid.ID(input.WinCompetitor.ID)).
		SetTender(t).
		SetAmount(input.WinCompetitor.Amount).
		SetResult(true)
	if err := r.store.TenderCompetitor.CreateBulk(competitorCreates...).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to create competitors: %w", err)
	}

	// go func() {
	// 	ctxx := context.Background()
	// 	ten, err := r.store.Tender.Query().
	// 		Where(tender.ID(t.ID)).
	// 		WithCreatedBy().
	// 		WithArea().
	// 		WithCustomer().
	// 		WithApprover().
	// 		WithFinder().
	// 		Only(ctxx)
	// 	if err != nil {
	// 		fmt.Printf("failed to get tender: %v\n", err)
	// 		return
	// 	}
	// 	chatId := r.feishu.GetSalesChatId(ten.Edges.Area)
	// 	if chatId == nil {
	// 		fmt.Printf("failed to get sales chat id: %v\n", errors.New("sales chat id is nil"))
	// 		return
	// 	}
	// 	if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderUpdated, &feishu.GroupMessageParams{
	// 		Tender: ten,
	// 		ChatId: *chatId,
	// 	}); err != nil {
	// 		fmt.Printf("failed to send group message: %v\n", err)
	// 	}
	// }()

	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(tp.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender profile: %v\n", err)
			return
		}
		chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
		if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderUpdated, &feishu.GroupMessageParams{
			TenderProfile: tpp,
			ChatId:        chatId,
		}); err != nil {
			fmt.Printf("failed to send group message: %v\n", err)
		}
	}()

	return r.store.Tender.UpdateOneID(xid.ID(id)).
		ClearPendingProfile().
		SetActiveProfileID(tp.ID).
		Save(ctx)
}

// ApproveTender is the resolver for the approveTender field.
func (r *mutationResolver) ApproveTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithPendingProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}
	if t.Edges.PendingProfile == nil {
		return nil, fmt.Errorf("no pending profile found")
	}

	approvalMsgId := t.Edges.PendingProfile.ApprovalMsgID
	activeProfile, err := r.store.TenderProfile.UpdateOneID(t.Edges.PendingProfile.ID).
		SetApprovalStatus(2).
		SetApproverID(xid.ID(sess.UserId)).
		SetApprovalDate(time.Now()).
		ClearApprovalMsgID().
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to approve tender profile: %w", err)
	}
	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(activeProfile.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithApprover().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender profile: %v\n", err)
			return
		}
		if approvalMsgId != nil {
			if err := r.feishu.UpdateGroupMessage(ctx, &feishu.UpdateGroupMessageParams{
				TemplateId:    feishu.TemplateIdTenderApproved,
				MsgId:         *approvalMsgId,
				TenderProfile: tpp,
			}); err != nil {
				fmt.Printf("failed to update group message: %v\n", err)
			}
		}

		chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
		if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderApproved, &feishu.GroupMessageParams{
			TenderProfile: tpp,
			ChatId:        chatId,
		}); err != nil {
			fmt.Printf("failed to send group message: %v\n", err)
		}
	}()
	return t.Update().SetActiveProfileID(activeProfile.ID).ClearPendingProfile().Save(ctx)
}

// RejectTender is the resolver for the rejectTender field.
func (r *mutationResolver) RejectTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	sess, err := r.session.GetSession(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}
	t, err := r.store.Tender.Query().Where(tender.ID(id)).WithPendingProfile().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}
	if t.Edges.PendingProfile == nil {
		return nil, fmt.Errorf("no pending profile found")
	}

	approvalMsgId := t.Edges.PendingProfile.ApprovalMsgID
	if err := t.Edges.PendingProfile.Update().
		SetApprovalStatus(3).
		SetApproverID(xid.ID(sess.UserId)).
		SetApprovalDate(time.Now()).
		ClearApprovalMsgID().
		Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to reject tender profile: %w", err)
	}

	go func() {
		ctxx := context.Background()
		tpp, err := r.store.TenderProfile.Query().Where(tenderprofile.ID(t.Edges.PendingProfile.ID)).
			WithTender(func(tq *ent.TenderQuery) {
				tq.WithArea()
			}).
			WithCreatedBy().
			WithCustomer().
			WithApprover().
			WithFinder().
			Only(ctxx)
		if err != nil {
			fmt.Printf("failed to get tender profile: %v\n", err)
			return
		}
		if approvalMsgId != nil {
			if err := r.feishu.UpdateGroupMessage(ctx, &feishu.UpdateGroupMessageParams{
				TemplateId:    feishu.TemplateIdTenderRejected,
				MsgId:         *approvalMsgId,
				TenderProfile: tpp,
			}); err != nil {
				fmt.Printf("failed to update group message: %v\n", err)
			}
		}
		chatId := r.feishu.GetSalesChatId(tpp.Edges.Tender.Edges.Area)
		if _, err = r.feishu.SendGroupMessage(ctxx, feishu.TemplateIdTenderRejected, &feishu.GroupMessageParams{
			TenderProfile: tpp,
			ChatId:        chatId,
		}); err != nil {
			fmt.Printf("failed to send group message: %v\n", err)
		}
	}()
	return r.store.Tender.Query().Where(tender.ID(id)).WithPendingProfile().Only(ctx)
}

// CreatePlot is the resolver for the createPlot field.
func (r *mutationResolver) CreatePlot(ctx context.Context, input ent.CreatePlotInput, geoBounds [][]float64) (*ent.PlotConnection, error) {
	p, err := r.store.Plot.Create().SetInput(input).SetGeoBounds(geoBounds).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create plot: %w", err)
	}
	return &ent.PlotConnection{
		Edges: []*ent.PlotEdge{
			{Node: p},
		},
	}, nil
}

// UpdatePlot is the resolver for the updatePlot field.
func (r *mutationResolver) UpdatePlot(ctx context.Context, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) (*ent.Plot, error) {
	q := r.store.Plot.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}
	return q.Save(ctx)
}

// DeletePlot is the resolver for the deletePlot field.
func (r *mutationResolver) DeletePlot(ctx context.Context, id xid.ID) (*ent.Plot, error) {
	p, err := r.store.Plot.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get plot: %w", err)
	}
	if err := r.store.Plot.DeleteOne(p).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete plot: %w", err)
	}
	return p, nil
}

// CreateVisitRecord is the resolver for the createVisitRecord field.
func (r *mutationResolver) CreateVisitRecord(ctx context.Context, input ent.CreateVisitRecordInput) (*ent.VisitRecordConnection, error) {
	n, err := r.store.VisitRecord.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create visit record: %w", err)
	}
	return &ent.VisitRecordConnection{
		Edges: []*ent.VisitRecordEdge{
			{Node: n},
		},
	}, nil
}

// UpdateVisitRecord is the resolver for the updateVisitRecord field.
func (r *mutationResolver) UpdateVisitRecord(ctx context.Context, id xid.ID, input ent.UpdateVisitRecordInput) (*ent.VisitRecord, error) {
	return r.store.VisitRecord.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteVisitRecord is the resolver for the deleteVisitRecord field.
func (r *mutationResolver) DeleteVisitRecord(ctx context.Context, id xid.ID) (*ent.VisitRecord, error) {
	v, err := r.store.VisitRecord.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get visit record: %w", err)
	}
	if err := r.store.VisitRecord.DeleteOne(v).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete visit record: %w", err)
	}
	return v, nil
}

// CreateCompetitor is the resolver for the createCompetitor field.
func (r *mutationResolver) CreateCompetitor(ctx context.Context, input ent.CreateCompetitorInput) (*ent.Competitor, error) {
	return r.store.Competitor.Create().SetInput(input).Save(ctx)
}

// UpdateCompetitor is the resolver for the updateCompetitor field.
func (r *mutationResolver) UpdateCompetitor(ctx context.Context, id xid.ID, input ent.UpdateCompetitorInput) (*ent.Competitor, error) {
	return r.store.Competitor.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteCompetitor is the resolver for the deleteCompetitor field.
func (r *mutationResolver) DeleteCompetitor(ctx context.Context, id xid.ID) (*ent.Competitor, error) {
	c, err := r.store.Competitor.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get competitor: %w", err)
	}
	if err := r.store.Competitor.DeleteOne(c).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete competitor: %w", err)
	}
	return c, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id xid.ID, input ent.UpdateProjectInput) (*ent.Project, error) {
	p, err := r.store.Project.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update project: %w", err)
	}
	// if config.IsProd {
	// 	go func() {
	// 		if _, err := r.stgDb.Exec(`
	// 		update mst_jobbasfil
	// 			set
	// 				opdate = @opdate,
	// 				fsdate = @fsdate
	// 		where
	// 			jobcode = @jobcode
	// 			and pk_corp = '2837'
	// 			and finishedflag in ('N','Y')
	// 			AND JOBTYPE='J'
	// 		`,
	// 			sql.Named("opdate", p.OpDate),
	// 			sql.Named("fsdate", p.FsDate),
	// 			sql.Named("jobcode", p.Code),
	// 		); err != nil {
	// 			fmt.Printf("failed to update project: %v\n", err)
	// 		}
	// 	}()
	// }
	return p, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
