package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/generated"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/area"
	"cscd-bds/store/ent/schema/xid"
	"cscd-bds/store/ent/tender"
	"cscd-bds/util"
	"fmt"
	"strings"
	"time"
)

// CreateArea is the resolver for the createArea field.
func (r *mutationResolver) CreateArea(ctx context.Context, input ent.CreateAreaInput) (*ent.AreaConnection, error) {
	q := r.store.Area.Create().SetInput(input)
	a, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create area: %w", err)
	}
	return &ent.AreaConnection{Edges: []*ent.AreaEdge{{Node: a}}}, nil
}

// UpdateArea is the resolver for the updateArea field.
func (r *mutationResolver) UpdateArea(ctx context.Context, id xid.ID, input ent.UpdateAreaInput) (*ent.Area, error) {
	return r.store.Area.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.UserConnection, error) {
	q := r.store.User.Create().SetInput(input)
	u, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}
	return &ent.UserConnection{Edges: []*ent.UserEdge{{Node: u}}}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id xid.ID, input ent.UpdateUserInput) (*ent.User, error) {
	return r.store.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id xid.ID) (*ent.User, error) {
	u, err := r.store.User.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}
	return u, r.store.User.DeleteOne(u).Exec(ctx)
}

// CreateTender is the resolver for the createTender field.
func (r *mutationResolver) CreateTender(ctx context.Context, input ent.CreateTenderInput, geoBounds [][]float64, imageFileNames []string, attachmentFileNames []string) (*ent.TenderConnection, error) {
	q := r.store.Tender.Create().SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	}

	date := time.Now()
	stdate := time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.Local)
	enddate := stdate.AddDate(0, 0, 1)
	a, err := r.store.Area.Query().
		Where(area.ID(input.AreaID)).
		WithTenders(func(tq *ent.TenderQuery) {
			tq.Where(
				tender.And(
					tender.CreatedAtGTE(stdate),
					tender.CreatedAtLTE(enddate),
				),
			)
		}).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	var n int
	if len(a.Edges.Tenders) > 0 {
		n = len(a.Edges.Tenders) + 2
	} else {
		n = 1
	}
	code := fmt.Sprintf("%s%s%03d", a.Code, date.Format("20060102"), n)
	q.SetCode(code)

	var images []string
	{
		for _, fn := range imageFileNames {
			filename, err := util.SaveStaticFile(fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			q.SetImages(images)
		}
	}

	var attachments []string
	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			attachments = append(attachments, fmt.Sprintf("/static/%s", filename))
		}
		if len(attachments) > 0 {
			q.SetAttachements(attachments)
		}
	}

	t, err := q.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create tender: %w", err)
	}
	return &ent.TenderConnection{
		Edges: []*ent.TenderEdge{
			{Node: t},
		},
	}, nil
}

// UpdateTender is the resolver for the updateTender field.
func (r *mutationResolver) UpdateTender(ctx context.Context, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64, imageFileNames []string, removeImageFileNames []string, attachmentFileNames []string, removeAttachmentFileNames []string) (*ent.Tender, error) {
	t, err := r.store.Tender.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}

	q := r.store.Tender.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}

	var images []string
	{
		for _, fn := range imageFileNames {
			if strings.HasPrefix(fn, "/static/") {
				continue
			}
			filename, err := util.SaveStaticFile(fn, true)
			if err != nil {
				return nil, fmt.Errorf("failed to save image file: %w", err)
			}
			images = append(images, fmt.Sprintf("/static/%s", filename))
		}
		if len(images) > 0 {
			q.AppendImages(images)
		}
	}
	for _, fn := range removeImageFileNames {
		for i, image := range t.Images {
			if fn == image {
				util.DeleteStaticFile(image)
				t.Images = append(t.Images[:i], t.Images[i+1:]...)
				break
			}
		}
	}
	if len(removeImageFileNames) > 0 {
		q.SetImages(t.Images)
	}

	var attachments []string
	{
		for _, fn := range attachmentFileNames {
			filename, err := util.SaveStaticFile(fn, false)
			if err != nil {
				return nil, fmt.Errorf("failed to save attachment file: %w", err)
			}
			attachments = append(attachments, fmt.Sprintf("/static/%s", filename))
		}
		if len(attachments) > 0 {
			q.AppendAttachements(attachments)
		}
	}
	for _, fn := range removeAttachmentFileNames {
		for i, att := range t.Attachements {
			if fn == att {
				util.DeleteStaticFile(att)
				t.Attachements = append(t.Attachements[:i], t.Attachements[i+1:]...)
				break
			}
		}
	}
	if len(removeAttachmentFileNames) > 0 {
		q.SetAttachements(t.Attachements)
	}

	return q.Save(ctx)
}

// DeleteTender is the resolver for the deleteTender field.
func (r *mutationResolver) DeleteTender(ctx context.Context, id xid.ID) (*ent.Tender, error) {
	t, err := r.store.Tender.Query().Where(tender.ID(id)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get tender: %w", err)
	}
	if err := r.store.Tender.DeleteOne(t).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete tender: %w", err)
	}
	return t, nil
}

// CreatePlot is the resolver for the createPlot field.
func (r *mutationResolver) CreatePlot(ctx context.Context, input ent.CreatePlotInput, geoBounds [][]float64) (*ent.PlotConnection, error) {
	p, err := r.store.Plot.Create().SetInput(input).SetGeoBounds(geoBounds).Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create plot: %w", err)
	}
	return &ent.PlotConnection{
		Edges: []*ent.PlotEdge{
			{Node: p},
		},
	}, nil
}

// UpdatePlot is the resolver for the updatePlot field.
func (r *mutationResolver) UpdatePlot(ctx context.Context, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) (*ent.Plot, error) {
	q := r.store.Plot.UpdateOneID(id).SetInput(input)
	if len(geoBounds) > 0 {
		q.SetGeoBounds(geoBounds)
	} else {
		q.ClearGeoBounds()
	}
	return q.Save(ctx)
}

// DeletePlot is the resolver for the deletePlot field.
func (r *mutationResolver) DeletePlot(ctx context.Context, id xid.ID) (*ent.Plot, error) {
	p, err := r.store.Plot.Get(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get plot: %w", err)
	}
	if err := r.store.Plot.DeleteOne(p).Exec(ctx); err != nil {
		return nil, fmt.Errorf("failed to delete plot: %w", err)
	}
	return p, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
