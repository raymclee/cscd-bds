// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Area() AreaResolver
	City() CityResolver
	Country() CountryResolver
	District() DistrictResolver
	Mutation() MutationResolver
	Province() ProvinceResolver
	Query() QueryResolver
	Tender() TenderResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Area struct {
		Center    func(childComplexity int) int
		Code      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Customers func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Provinces func(childComplexity int) int
		Sales     func(childComplexity int) int
		Tenders   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	AreaConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AreaEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	City struct {
		Adcode     func(childComplexity int) int
		Center     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Districts  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		ProvCode   func(childComplexity int) int
		Province   func(childComplexity int) int
		ProvinceID func(childComplexity int) int
		Tenders    func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	CityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Country struct {
		Adcode    func(childComplexity int) int
		Center    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Provinces func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	CountryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CountryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Customer struct {
		Area                  func(childComplexity int) int
		AreaID                func(childComplexity int) int
		ContactPerson         func(childComplexity int) int
		ContactPersonEmail    func(childComplexity int) int
		ContactPersonPhone    func(childComplexity int) int
		ContactPersonPosition func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		CreatedByID           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Industry              func(childComplexity int) int
		Name                  func(childComplexity int) int
		OwnerType             func(childComplexity int) int
		Sales                 func(childComplexity int) int
		SalesID               func(childComplexity int) int
		Size                  func(childComplexity int) int
		Tenders               func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		VisitRecords          func(childComplexity int) int
	}

	CustomerConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CustomerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	District struct {
		Adcode     func(childComplexity int) int
		Center     func(childComplexity int) int
		City       func(childComplexity int) int
		CityCode   func(childComplexity int) int
		CityID     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Plots      func(childComplexity int) int
		ProvCode   func(childComplexity int) int
		Province   func(childComplexity int) int
		ProvinceID func(childComplexity int) int
		Tenders    func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	DistrictConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DistrictEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	GeoJson struct {
		Coordinates func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	Mutation struct {
		CreateArea   func(childComplexity int, input ent.CreateAreaInput) int
		CreatePlot   func(childComplexity int, input ent.CreatePlotInput, geoBounds [][]float64) int
		CreateTender func(childComplexity int, input ent.CreateTenderInput, geoBounds [][]float64) int
		CreateUser   func(childComplexity int, input ent.CreateUserInput) int
		DeletePlot   func(childComplexity int, id xid.ID) int
		DeleteTender func(childComplexity int, id xid.ID) int
		UpdateArea   func(childComplexity int, id xid.ID, input ent.UpdateAreaInput) int
		UpdatePlot   func(childComplexity int, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) int
		UpdateTender func(childComplexity int, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64) int
		UpdateUser   func(childComplexity int, id xid.ID, input ent.UpdateUserInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Plot struct {
		ColorHex   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		District   func(childComplexity int) int
		DistrictID func(childComplexity int) int
		GeoBounds  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	PlotConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PlotEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Province struct {
		Adcode    func(childComplexity int) int
		Area      func(childComplexity int) int
		AreaID    func(childComplexity int) int
		Center    func(childComplexity int) int
		Cities    func(childComplexity int) int
		Country   func(childComplexity int) int
		CountryID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Districts func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Tenders   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ProvinceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProvinceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Areas        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.AreaWhereInput) int
		Cities       func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.CityWhereInput) int
		Countries    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.CountryWhereInput) int
		Customers    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CustomerOrder, where *ent.CustomerWhereInput) int
		Districts    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.DistrictWhereInput) int
		Node         func(childComplexity int, id xid.ID) int
		Nodes        func(childComplexity int, ids []xid.ID) int
		Plots        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.PlotWhereInput) int
		Provinces    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.ProvinceWhereInput) int
		Session      func(childComplexity int) int
		Tenders      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.TenderOrder, where *ent.TenderWhereInput) int
		Users        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.UserWhereInput) int
		VisitRecords func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.VisitRecordWhereInput) int
	}

	Session struct {
		AvatarURL func(childComplexity int) int
		Email     func(childComplexity int) int
		IsAdmin   func(childComplexity int) int
		IsLeader  func(childComplexity int) int
		Name      func(childComplexity int) int
		UserID    func(childComplexity int) int
		Username  func(childComplexity int) int
	}

	Tender struct {
		Address                              func(childComplexity int) int
		Area                                 func(childComplexity int) int
		AreaID                               func(childComplexity int) int
		Attachements                         func(childComplexity int) int
		BiddingDate                          func(childComplexity int) int
		BiddingInstructions                  func(childComplexity int) int
		City                                 func(childComplexity int) int
		CityID                               func(childComplexity int) int
		Code                                 func(childComplexity int) int
		CompetitivePartnershipRating         func(childComplexity int) int
		CompetitivePartnershipRatingOverview func(childComplexity int) int
		CompetitorSituations                 func(childComplexity int) int
		ConsultingFirm                       func(childComplexity int) int
		ContractForm                         func(childComplexity int) int
		Contractor                           func(childComplexity int) int
		CostEngineer                         func(childComplexity int) int
		CreatedAt                            func(childComplexity int) int
		CreatedBy                            func(childComplexity int) int
		CreatedByID                          func(childComplexity int) int
		CreditAndPaymentRating               func(childComplexity int) int
		CreditAndPaymentRatingOverview       func(childComplexity int) int
		Customer                             func(childComplexity int) int
		CustomerID                           func(childComplexity int) int
		CustomerRelationshipRating           func(childComplexity int) int
		CustomerRelationshipRatingOverview   func(childComplexity int) int
		DesignUnit                           func(childComplexity int) int
		DiscoveryDate                        func(childComplexity int) int
		District                             func(childComplexity int) int
		DistrictID                           func(childComplexity int) int
		EstimatedAmount                      func(childComplexity int) int
		EstimatedProjectEndDate              func(childComplexity int) int
		EstimatedProjectStartDate            func(childComplexity int) int
		FacadeConsultant                     func(childComplexity int) int
		Finder                               func(childComplexity int) int
		FinderID                             func(childComplexity int) int
		FollowingSales                       func(childComplexity int) int
		FullAddress                          func(childComplexity int) int
		GeoBounds                            func(childComplexity int) int
		GeoCoordinate                        func(childComplexity int) int
		ID                                   func(childComplexity int) int
		Images                               func(childComplexity int) int
		KeyProject                           func(childComplexity int) int
		ManagementCompany                    func(childComplexity int) int
		Name                                 func(childComplexity int) int
		OwnerSituations                      func(childComplexity int) int
		PrepareToBid                         func(childComplexity int) int
		ProjectCode                          func(childComplexity int) int
		ProjectDefinition                    func(childComplexity int) int
		ProjectType                          func(childComplexity int) int
		Province                             func(childComplexity int) int
		ProvinceID                           func(childComplexity int) int
		Remark                               func(childComplexity int) int
		SizeAndValueRating                   func(childComplexity int) int
		SizeAndValueRatingOverview           func(childComplexity int) int
		Status                               func(childComplexity int) int
		TenderDate                           func(childComplexity int) int
		TenderForm                           func(childComplexity int) int
		TenderSituations                     func(childComplexity int) int
		TenderingAgency                      func(childComplexity int) int
		TimeLimitRating                      func(childComplexity int) int
		TimeLimitRatingOverview              func(childComplexity int) int
		UpdatedAt                            func(childComplexity int) int
		VisitRecords                         func(childComplexity int) int
	}

	TenderConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TenderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	User struct {
		Areas        func(childComplexity int) int
		AvatarURL    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Customers    func(childComplexity int) int
		Disabled     func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAdmin      func(childComplexity int) int
		IsLeader     func(childComplexity int) int
		Leader       func(childComplexity int) int
		LeaderID     func(childComplexity int) int
		Name         func(childComplexity int) int
		OpenID       func(childComplexity int) int
		TeamMembers  func(childComplexity int) int
		Tenders      func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Username     func(childComplexity int) int
		VisitRecords func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	VisitRecord struct {
		CommContent func(childComplexity int) int
		CommPeople  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Customer    func(childComplexity int) int
		CustomerID  func(childComplexity int) int
		Date        func(childComplexity int) int
		FollowUpBys func(childComplexity int) int
		ID          func(childComplexity int) int
		NextStep    func(childComplexity int) int
		Tender      func(childComplexity int) int
		TenderID    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		VisitType   func(childComplexity int) int
	}

	VisitRecordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VisitRecordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Area.center":
		if e.complexity.Area.Center == nil {
			break
		}

		return e.complexity.Area.Center(childComplexity), true

	case "Area.code":
		if e.complexity.Area.Code == nil {
			break
		}

		return e.complexity.Area.Code(childComplexity), true

	case "Area.createdAt":
		if e.complexity.Area.CreatedAt == nil {
			break
		}

		return e.complexity.Area.CreatedAt(childComplexity), true

	case "Area.customers":
		if e.complexity.Area.Customers == nil {
			break
		}

		return e.complexity.Area.Customers(childComplexity), true

	case "Area.id":
		if e.complexity.Area.ID == nil {
			break
		}

		return e.complexity.Area.ID(childComplexity), true

	case "Area.name":
		if e.complexity.Area.Name == nil {
			break
		}

		return e.complexity.Area.Name(childComplexity), true

	case "Area.provinces":
		if e.complexity.Area.Provinces == nil {
			break
		}

		return e.complexity.Area.Provinces(childComplexity), true

	case "Area.sales":
		if e.complexity.Area.Sales == nil {
			break
		}

		return e.complexity.Area.Sales(childComplexity), true

	case "Area.tenders":
		if e.complexity.Area.Tenders == nil {
			break
		}

		return e.complexity.Area.Tenders(childComplexity), true

	case "Area.updatedAt":
		if e.complexity.Area.UpdatedAt == nil {
			break
		}

		return e.complexity.Area.UpdatedAt(childComplexity), true

	case "AreaConnection.edges":
		if e.complexity.AreaConnection.Edges == nil {
			break
		}

		return e.complexity.AreaConnection.Edges(childComplexity), true

	case "AreaConnection.pageInfo":
		if e.complexity.AreaConnection.PageInfo == nil {
			break
		}

		return e.complexity.AreaConnection.PageInfo(childComplexity), true

	case "AreaConnection.totalCount":
		if e.complexity.AreaConnection.TotalCount == nil {
			break
		}

		return e.complexity.AreaConnection.TotalCount(childComplexity), true

	case "AreaEdge.cursor":
		if e.complexity.AreaEdge.Cursor == nil {
			break
		}

		return e.complexity.AreaEdge.Cursor(childComplexity), true

	case "AreaEdge.node":
		if e.complexity.AreaEdge.Node == nil {
			break
		}

		return e.complexity.AreaEdge.Node(childComplexity), true

	case "City.adcode":
		if e.complexity.City.Adcode == nil {
			break
		}

		return e.complexity.City.Adcode(childComplexity), true

	case "City.center":
		if e.complexity.City.Center == nil {
			break
		}

		return e.complexity.City.Center(childComplexity), true

	case "City.createdAt":
		if e.complexity.City.CreatedAt == nil {
			break
		}

		return e.complexity.City.CreatedAt(childComplexity), true

	case "City.districts":
		if e.complexity.City.Districts == nil {
			break
		}

		return e.complexity.City.Districts(childComplexity), true

	case "City.id":
		if e.complexity.City.ID == nil {
			break
		}

		return e.complexity.City.ID(childComplexity), true

	case "City.name":
		if e.complexity.City.Name == nil {
			break
		}

		return e.complexity.City.Name(childComplexity), true

	case "City.provCode":
		if e.complexity.City.ProvCode == nil {
			break
		}

		return e.complexity.City.ProvCode(childComplexity), true

	case "City.province":
		if e.complexity.City.Province == nil {
			break
		}

		return e.complexity.City.Province(childComplexity), true

	case "City.provinceID":
		if e.complexity.City.ProvinceID == nil {
			break
		}

		return e.complexity.City.ProvinceID(childComplexity), true

	case "City.tenders":
		if e.complexity.City.Tenders == nil {
			break
		}

		return e.complexity.City.Tenders(childComplexity), true

	case "City.updatedAt":
		if e.complexity.City.UpdatedAt == nil {
			break
		}

		return e.complexity.City.UpdatedAt(childComplexity), true

	case "CityConnection.edges":
		if e.complexity.CityConnection.Edges == nil {
			break
		}

		return e.complexity.CityConnection.Edges(childComplexity), true

	case "CityConnection.pageInfo":
		if e.complexity.CityConnection.PageInfo == nil {
			break
		}

		return e.complexity.CityConnection.PageInfo(childComplexity), true

	case "CityConnection.totalCount":
		if e.complexity.CityConnection.TotalCount == nil {
			break
		}

		return e.complexity.CityConnection.TotalCount(childComplexity), true

	case "CityEdge.cursor":
		if e.complexity.CityEdge.Cursor == nil {
			break
		}

		return e.complexity.CityEdge.Cursor(childComplexity), true

	case "CityEdge.node":
		if e.complexity.CityEdge.Node == nil {
			break
		}

		return e.complexity.CityEdge.Node(childComplexity), true

	case "Country.adcode":
		if e.complexity.Country.Adcode == nil {
			break
		}

		return e.complexity.Country.Adcode(childComplexity), true

	case "Country.center":
		if e.complexity.Country.Center == nil {
			break
		}

		return e.complexity.Country.Center(childComplexity), true

	case "Country.createdAt":
		if e.complexity.Country.CreatedAt == nil {
			break
		}

		return e.complexity.Country.CreatedAt(childComplexity), true

	case "Country.id":
		if e.complexity.Country.ID == nil {
			break
		}

		return e.complexity.Country.ID(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.provinces":
		if e.complexity.Country.Provinces == nil {
			break
		}

		return e.complexity.Country.Provinces(childComplexity), true

	case "Country.updatedAt":
		if e.complexity.Country.UpdatedAt == nil {
			break
		}

		return e.complexity.Country.UpdatedAt(childComplexity), true

	case "CountryConnection.edges":
		if e.complexity.CountryConnection.Edges == nil {
			break
		}

		return e.complexity.CountryConnection.Edges(childComplexity), true

	case "CountryConnection.pageInfo":
		if e.complexity.CountryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CountryConnection.PageInfo(childComplexity), true

	case "CountryConnection.totalCount":
		if e.complexity.CountryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CountryConnection.TotalCount(childComplexity), true

	case "CountryEdge.cursor":
		if e.complexity.CountryEdge.Cursor == nil {
			break
		}

		return e.complexity.CountryEdge.Cursor(childComplexity), true

	case "CountryEdge.node":
		if e.complexity.CountryEdge.Node == nil {
			break
		}

		return e.complexity.CountryEdge.Node(childComplexity), true

	case "Customer.area":
		if e.complexity.Customer.Area == nil {
			break
		}

		return e.complexity.Customer.Area(childComplexity), true

	case "Customer.areaID":
		if e.complexity.Customer.AreaID == nil {
			break
		}

		return e.complexity.Customer.AreaID(childComplexity), true

	case "Customer.contactPerson":
		if e.complexity.Customer.ContactPerson == nil {
			break
		}

		return e.complexity.Customer.ContactPerson(childComplexity), true

	case "Customer.contactPersonEmail":
		if e.complexity.Customer.ContactPersonEmail == nil {
			break
		}

		return e.complexity.Customer.ContactPersonEmail(childComplexity), true

	case "Customer.contactPersonPhone":
		if e.complexity.Customer.ContactPersonPhone == nil {
			break
		}

		return e.complexity.Customer.ContactPersonPhone(childComplexity), true

	case "Customer.contactPersonPosition":
		if e.complexity.Customer.ContactPersonPosition == nil {
			break
		}

		return e.complexity.Customer.ContactPersonPosition(childComplexity), true

	case "Customer.createdAt":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.createdBy":
		if e.complexity.Customer.CreatedBy == nil {
			break
		}

		return e.complexity.Customer.CreatedBy(childComplexity), true

	case "Customer.createdByID":
		if e.complexity.Customer.CreatedByID == nil {
			break
		}

		return e.complexity.Customer.CreatedByID(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.industry":
		if e.complexity.Customer.Industry == nil {
			break
		}

		return e.complexity.Customer.Industry(childComplexity), true

	case "Customer.name":
		if e.complexity.Customer.Name == nil {
			break
		}

		return e.complexity.Customer.Name(childComplexity), true

	case "Customer.ownerType":
		if e.complexity.Customer.OwnerType == nil {
			break
		}

		return e.complexity.Customer.OwnerType(childComplexity), true

	case "Customer.sales":
		if e.complexity.Customer.Sales == nil {
			break
		}

		return e.complexity.Customer.Sales(childComplexity), true

	case "Customer.salesID":
		if e.complexity.Customer.SalesID == nil {
			break
		}

		return e.complexity.Customer.SalesID(childComplexity), true

	case "Customer.size":
		if e.complexity.Customer.Size == nil {
			break
		}

		return e.complexity.Customer.Size(childComplexity), true

	case "Customer.tenders":
		if e.complexity.Customer.Tenders == nil {
			break
		}

		return e.complexity.Customer.Tenders(childComplexity), true

	case "Customer.updatedAt":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "Customer.visitRecords":
		if e.complexity.Customer.VisitRecords == nil {
			break
		}

		return e.complexity.Customer.VisitRecords(childComplexity), true

	case "CustomerConnection.edges":
		if e.complexity.CustomerConnection.Edges == nil {
			break
		}

		return e.complexity.CustomerConnection.Edges(childComplexity), true

	case "CustomerConnection.pageInfo":
		if e.complexity.CustomerConnection.PageInfo == nil {
			break
		}

		return e.complexity.CustomerConnection.PageInfo(childComplexity), true

	case "CustomerConnection.totalCount":
		if e.complexity.CustomerConnection.TotalCount == nil {
			break
		}

		return e.complexity.CustomerConnection.TotalCount(childComplexity), true

	case "CustomerEdge.cursor":
		if e.complexity.CustomerEdge.Cursor == nil {
			break
		}

		return e.complexity.CustomerEdge.Cursor(childComplexity), true

	case "CustomerEdge.node":
		if e.complexity.CustomerEdge.Node == nil {
			break
		}

		return e.complexity.CustomerEdge.Node(childComplexity), true

	case "District.adcode":
		if e.complexity.District.Adcode == nil {
			break
		}

		return e.complexity.District.Adcode(childComplexity), true

	case "District.center":
		if e.complexity.District.Center == nil {
			break
		}

		return e.complexity.District.Center(childComplexity), true

	case "District.city":
		if e.complexity.District.City == nil {
			break
		}

		return e.complexity.District.City(childComplexity), true

	case "District.cityCode":
		if e.complexity.District.CityCode == nil {
			break
		}

		return e.complexity.District.CityCode(childComplexity), true

	case "District.cityID":
		if e.complexity.District.CityID == nil {
			break
		}

		return e.complexity.District.CityID(childComplexity), true

	case "District.createdAt":
		if e.complexity.District.CreatedAt == nil {
			break
		}

		return e.complexity.District.CreatedAt(childComplexity), true

	case "District.id":
		if e.complexity.District.ID == nil {
			break
		}

		return e.complexity.District.ID(childComplexity), true

	case "District.name":
		if e.complexity.District.Name == nil {
			break
		}

		return e.complexity.District.Name(childComplexity), true

	case "District.plots":
		if e.complexity.District.Plots == nil {
			break
		}

		return e.complexity.District.Plots(childComplexity), true

	case "District.provCode":
		if e.complexity.District.ProvCode == nil {
			break
		}

		return e.complexity.District.ProvCode(childComplexity), true

	case "District.province":
		if e.complexity.District.Province == nil {
			break
		}

		return e.complexity.District.Province(childComplexity), true

	case "District.provinceID":
		if e.complexity.District.ProvinceID == nil {
			break
		}

		return e.complexity.District.ProvinceID(childComplexity), true

	case "District.tenders":
		if e.complexity.District.Tenders == nil {
			break
		}

		return e.complexity.District.Tenders(childComplexity), true

	case "District.updatedAt":
		if e.complexity.District.UpdatedAt == nil {
			break
		}

		return e.complexity.District.UpdatedAt(childComplexity), true

	case "DistrictConnection.edges":
		if e.complexity.DistrictConnection.Edges == nil {
			break
		}

		return e.complexity.DistrictConnection.Edges(childComplexity), true

	case "DistrictConnection.pageInfo":
		if e.complexity.DistrictConnection.PageInfo == nil {
			break
		}

		return e.complexity.DistrictConnection.PageInfo(childComplexity), true

	case "DistrictConnection.totalCount":
		if e.complexity.DistrictConnection.TotalCount == nil {
			break
		}

		return e.complexity.DistrictConnection.TotalCount(childComplexity), true

	case "DistrictEdge.cursor":
		if e.complexity.DistrictEdge.Cursor == nil {
			break
		}

		return e.complexity.DistrictEdge.Cursor(childComplexity), true

	case "DistrictEdge.node":
		if e.complexity.DistrictEdge.Node == nil {
			break
		}

		return e.complexity.DistrictEdge.Node(childComplexity), true

	case "GeoJson.coordinates":
		if e.complexity.GeoJson.Coordinates == nil {
			break
		}

		return e.complexity.GeoJson.Coordinates(childComplexity), true

	case "GeoJson.type":
		if e.complexity.GeoJson.Type == nil {
			break
		}

		return e.complexity.GeoJson.Type(childComplexity), true

	case "Mutation.createArea":
		if e.complexity.Mutation.CreateArea == nil {
			break
		}

		args, err := ec.field_Mutation_createArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateArea(childComplexity, args["input"].(ent.CreateAreaInput)), true

	case "Mutation.createPlot":
		if e.complexity.Mutation.CreatePlot == nil {
			break
		}

		args, err := ec.field_Mutation_createPlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlot(childComplexity, args["input"].(ent.CreatePlotInput), args["geoBounds"].([][]float64)), true

	case "Mutation.createTender":
		if e.complexity.Mutation.CreateTender == nil {
			break
		}

		args, err := ec.field_Mutation_createTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTender(childComplexity, args["input"].(ent.CreateTenderInput), args["geoBounds"].([][]float64)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(ent.CreateUserInput)), true

	case "Mutation.deletePlot":
		if e.complexity.Mutation.DeletePlot == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlot(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deleteTender":
		if e.complexity.Mutation.DeleteTender == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTender(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.updateArea":
		if e.complexity.Mutation.UpdateArea == nil {
			break
		}

		args, err := ec.field_Mutation_updateArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateArea(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateAreaInput)), true

	case "Mutation.updatePlot":
		if e.complexity.Mutation.UpdatePlot == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlot(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdatePlotInput), args["geoBounds"].([][]float64)), true

	case "Mutation.updateTender":
		if e.complexity.Mutation.UpdateTender == nil {
			break
		}

		args, err := ec.field_Mutation_updateTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTender(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateTenderInput), args["geoBounds"].([][]float64)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateUserInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Plot.colorHex":
		if e.complexity.Plot.ColorHex == nil {
			break
		}

		return e.complexity.Plot.ColorHex(childComplexity), true

	case "Plot.createdAt":
		if e.complexity.Plot.CreatedAt == nil {
			break
		}

		return e.complexity.Plot.CreatedAt(childComplexity), true

	case "Plot.district":
		if e.complexity.Plot.District == nil {
			break
		}

		return e.complexity.Plot.District(childComplexity), true

	case "Plot.districtID":
		if e.complexity.Plot.DistrictID == nil {
			break
		}

		return e.complexity.Plot.DistrictID(childComplexity), true

	case "Plot.geoBounds":
		if e.complexity.Plot.GeoBounds == nil {
			break
		}

		return e.complexity.Plot.GeoBounds(childComplexity), true

	case "Plot.id":
		if e.complexity.Plot.ID == nil {
			break
		}

		return e.complexity.Plot.ID(childComplexity), true

	case "Plot.name":
		if e.complexity.Plot.Name == nil {
			break
		}

		return e.complexity.Plot.Name(childComplexity), true

	case "Plot.updatedAt":
		if e.complexity.Plot.UpdatedAt == nil {
			break
		}

		return e.complexity.Plot.UpdatedAt(childComplexity), true

	case "PlotConnection.edges":
		if e.complexity.PlotConnection.Edges == nil {
			break
		}

		return e.complexity.PlotConnection.Edges(childComplexity), true

	case "PlotConnection.pageInfo":
		if e.complexity.PlotConnection.PageInfo == nil {
			break
		}

		return e.complexity.PlotConnection.PageInfo(childComplexity), true

	case "PlotConnection.totalCount":
		if e.complexity.PlotConnection.TotalCount == nil {
			break
		}

		return e.complexity.PlotConnection.TotalCount(childComplexity), true

	case "PlotEdge.cursor":
		if e.complexity.PlotEdge.Cursor == nil {
			break
		}

		return e.complexity.PlotEdge.Cursor(childComplexity), true

	case "PlotEdge.node":
		if e.complexity.PlotEdge.Node == nil {
			break
		}

		return e.complexity.PlotEdge.Node(childComplexity), true

	case "Province.adcode":
		if e.complexity.Province.Adcode == nil {
			break
		}

		return e.complexity.Province.Adcode(childComplexity), true

	case "Province.area":
		if e.complexity.Province.Area == nil {
			break
		}

		return e.complexity.Province.Area(childComplexity), true

	case "Province.areaID":
		if e.complexity.Province.AreaID == nil {
			break
		}

		return e.complexity.Province.AreaID(childComplexity), true

	case "Province.center":
		if e.complexity.Province.Center == nil {
			break
		}

		return e.complexity.Province.Center(childComplexity), true

	case "Province.cities":
		if e.complexity.Province.Cities == nil {
			break
		}

		return e.complexity.Province.Cities(childComplexity), true

	case "Province.country":
		if e.complexity.Province.Country == nil {
			break
		}

		return e.complexity.Province.Country(childComplexity), true

	case "Province.countryID":
		if e.complexity.Province.CountryID == nil {
			break
		}

		return e.complexity.Province.CountryID(childComplexity), true

	case "Province.createdAt":
		if e.complexity.Province.CreatedAt == nil {
			break
		}

		return e.complexity.Province.CreatedAt(childComplexity), true

	case "Province.districts":
		if e.complexity.Province.Districts == nil {
			break
		}

		return e.complexity.Province.Districts(childComplexity), true

	case "Province.id":
		if e.complexity.Province.ID == nil {
			break
		}

		return e.complexity.Province.ID(childComplexity), true

	case "Province.name":
		if e.complexity.Province.Name == nil {
			break
		}

		return e.complexity.Province.Name(childComplexity), true

	case "Province.tenders":
		if e.complexity.Province.Tenders == nil {
			break
		}

		return e.complexity.Province.Tenders(childComplexity), true

	case "Province.updatedAt":
		if e.complexity.Province.UpdatedAt == nil {
			break
		}

		return e.complexity.Province.UpdatedAt(childComplexity), true

	case "ProvinceConnection.edges":
		if e.complexity.ProvinceConnection.Edges == nil {
			break
		}

		return e.complexity.ProvinceConnection.Edges(childComplexity), true

	case "ProvinceConnection.pageInfo":
		if e.complexity.ProvinceConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProvinceConnection.PageInfo(childComplexity), true

	case "ProvinceConnection.totalCount":
		if e.complexity.ProvinceConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProvinceConnection.TotalCount(childComplexity), true

	case "ProvinceEdge.cursor":
		if e.complexity.ProvinceEdge.Cursor == nil {
			break
		}

		return e.complexity.ProvinceEdge.Cursor(childComplexity), true

	case "ProvinceEdge.node":
		if e.complexity.ProvinceEdge.Node == nil {
			break
		}

		return e.complexity.ProvinceEdge.Node(childComplexity), true

	case "Query.areas":
		if e.complexity.Query.Areas == nil {
			break
		}

		args, err := ec.field_Query_areas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Areas(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.AreaWhereInput)), true

	case "Query.cities":
		if e.complexity.Query.Cities == nil {
			break
		}

		args, err := ec.field_Query_cities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cities(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.CityWhereInput)), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		args, err := ec.field_Query_countries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Countries(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.CountryWhereInput)), true

	case "Query.customers":
		if e.complexity.Query.Customers == nil {
			break
		}

		args, err := ec.field_Query_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customers(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.CustomerOrder), args["where"].(*ent.CustomerWhereInput)), true

	case "Query.districts":
		if e.complexity.Query.Districts == nil {
			break
		}

		args, err := ec.field_Query_districts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Districts(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.DistrictWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(xid.ID)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]xid.ID)), true

	case "Query.plots":
		if e.complexity.Query.Plots == nil {
			break
		}

		args, err := ec.field_Query_plots_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Plots(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.PlotWhereInput)), true

	case "Query.provinces":
		if e.complexity.Query.Provinces == nil {
			break
		}

		args, err := ec.field_Query_provinces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Provinces(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.ProvinceWhereInput)), true

	case "Query.session":
		if e.complexity.Query.Session == nil {
			break
		}

		return e.complexity.Query.Session(childComplexity), true

	case "Query.tenders":
		if e.complexity.Query.Tenders == nil {
			break
		}

		args, err := ec.field_Query_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.UserWhereInput)), true

	case "Query.visitRecords":
		if e.complexity.Query.VisitRecords == nil {
			break
		}

		args, err := ec.field_Query_visitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["where"].(*ent.VisitRecordWhereInput)), true

	case "Session.avatarUrl":
		if e.complexity.Session.AvatarURL == nil {
			break
		}

		return e.complexity.Session.AvatarURL(childComplexity), true

	case "Session.email":
		if e.complexity.Session.Email == nil {
			break
		}

		return e.complexity.Session.Email(childComplexity), true

	case "Session.isAdmin":
		if e.complexity.Session.IsAdmin == nil {
			break
		}

		return e.complexity.Session.IsAdmin(childComplexity), true

	case "Session.isLeader":
		if e.complexity.Session.IsLeader == nil {
			break
		}

		return e.complexity.Session.IsLeader(childComplexity), true

	case "Session.name":
		if e.complexity.Session.Name == nil {
			break
		}

		return e.complexity.Session.Name(childComplexity), true

	case "Session.userId":
		if e.complexity.Session.UserID == nil {
			break
		}

		return e.complexity.Session.UserID(childComplexity), true

	case "Session.username":
		if e.complexity.Session.Username == nil {
			break
		}

		return e.complexity.Session.Username(childComplexity), true

	case "Tender.address":
		if e.complexity.Tender.Address == nil {
			break
		}

		return e.complexity.Tender.Address(childComplexity), true

	case "Tender.area":
		if e.complexity.Tender.Area == nil {
			break
		}

		return e.complexity.Tender.Area(childComplexity), true

	case "Tender.areaID":
		if e.complexity.Tender.AreaID == nil {
			break
		}

		return e.complexity.Tender.AreaID(childComplexity), true

	case "Tender.attachements":
		if e.complexity.Tender.Attachements == nil {
			break
		}

		return e.complexity.Tender.Attachements(childComplexity), true

	case "Tender.biddingDate":
		if e.complexity.Tender.BiddingDate == nil {
			break
		}

		return e.complexity.Tender.BiddingDate(childComplexity), true

	case "Tender.biddingInstructions":
		if e.complexity.Tender.BiddingInstructions == nil {
			break
		}

		return e.complexity.Tender.BiddingInstructions(childComplexity), true

	case "Tender.city":
		if e.complexity.Tender.City == nil {
			break
		}

		return e.complexity.Tender.City(childComplexity), true

	case "Tender.cityID":
		if e.complexity.Tender.CityID == nil {
			break
		}

		return e.complexity.Tender.CityID(childComplexity), true

	case "Tender.code":
		if e.complexity.Tender.Code == nil {
			break
		}

		return e.complexity.Tender.Code(childComplexity), true

	case "Tender.competitivePartnershipRating":
		if e.complexity.Tender.CompetitivePartnershipRating == nil {
			break
		}

		return e.complexity.Tender.CompetitivePartnershipRating(childComplexity), true

	case "Tender.competitivePartnershipRatingOverview":
		if e.complexity.Tender.CompetitivePartnershipRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CompetitivePartnershipRatingOverview(childComplexity), true

	case "Tender.competitorSituations":
		if e.complexity.Tender.CompetitorSituations == nil {
			break
		}

		return e.complexity.Tender.CompetitorSituations(childComplexity), true

	case "Tender.consultingFirm":
		if e.complexity.Tender.ConsultingFirm == nil {
			break
		}

		return e.complexity.Tender.ConsultingFirm(childComplexity), true

	case "Tender.contractForm":
		if e.complexity.Tender.ContractForm == nil {
			break
		}

		return e.complexity.Tender.ContractForm(childComplexity), true

	case "Tender.contractor":
		if e.complexity.Tender.Contractor == nil {
			break
		}

		return e.complexity.Tender.Contractor(childComplexity), true

	case "Tender.costEngineer":
		if e.complexity.Tender.CostEngineer == nil {
			break
		}

		return e.complexity.Tender.CostEngineer(childComplexity), true

	case "Tender.createdAt":
		if e.complexity.Tender.CreatedAt == nil {
			break
		}

		return e.complexity.Tender.CreatedAt(childComplexity), true

	case "Tender.createdBy":
		if e.complexity.Tender.CreatedBy == nil {
			break
		}

		return e.complexity.Tender.CreatedBy(childComplexity), true

	case "Tender.createdByID":
		if e.complexity.Tender.CreatedByID == nil {
			break
		}

		return e.complexity.Tender.CreatedByID(childComplexity), true

	case "Tender.creditAndPaymentRating":
		if e.complexity.Tender.CreditAndPaymentRating == nil {
			break
		}

		return e.complexity.Tender.CreditAndPaymentRating(childComplexity), true

	case "Tender.creditAndPaymentRatingOverview":
		if e.complexity.Tender.CreditAndPaymentRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CreditAndPaymentRatingOverview(childComplexity), true

	case "Tender.customer":
		if e.complexity.Tender.Customer == nil {
			break
		}

		return e.complexity.Tender.Customer(childComplexity), true

	case "Tender.customerID":
		if e.complexity.Tender.CustomerID == nil {
			break
		}

		return e.complexity.Tender.CustomerID(childComplexity), true

	case "Tender.customerRelationshipRating":
		if e.complexity.Tender.CustomerRelationshipRating == nil {
			break
		}

		return e.complexity.Tender.CustomerRelationshipRating(childComplexity), true

	case "Tender.customerRelationshipRatingOverview":
		if e.complexity.Tender.CustomerRelationshipRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CustomerRelationshipRatingOverview(childComplexity), true

	case "Tender.designUnit":
		if e.complexity.Tender.DesignUnit == nil {
			break
		}

		return e.complexity.Tender.DesignUnit(childComplexity), true

	case "Tender.discoveryDate":
		if e.complexity.Tender.DiscoveryDate == nil {
			break
		}

		return e.complexity.Tender.DiscoveryDate(childComplexity), true

	case "Tender.district":
		if e.complexity.Tender.District == nil {
			break
		}

		return e.complexity.Tender.District(childComplexity), true

	case "Tender.districtID":
		if e.complexity.Tender.DistrictID == nil {
			break
		}

		return e.complexity.Tender.DistrictID(childComplexity), true

	case "Tender.estimatedAmount":
		if e.complexity.Tender.EstimatedAmount == nil {
			break
		}

		return e.complexity.Tender.EstimatedAmount(childComplexity), true

	case "Tender.estimatedProjectEndDate":
		if e.complexity.Tender.EstimatedProjectEndDate == nil {
			break
		}

		return e.complexity.Tender.EstimatedProjectEndDate(childComplexity), true

	case "Tender.estimatedProjectStartDate":
		if e.complexity.Tender.EstimatedProjectStartDate == nil {
			break
		}

		return e.complexity.Tender.EstimatedProjectStartDate(childComplexity), true

	case "Tender.facadeConsultant":
		if e.complexity.Tender.FacadeConsultant == nil {
			break
		}

		return e.complexity.Tender.FacadeConsultant(childComplexity), true

	case "Tender.finder":
		if e.complexity.Tender.Finder == nil {
			break
		}

		return e.complexity.Tender.Finder(childComplexity), true

	case "Tender.finderID":
		if e.complexity.Tender.FinderID == nil {
			break
		}

		return e.complexity.Tender.FinderID(childComplexity), true

	case "Tender.followingSales":
		if e.complexity.Tender.FollowingSales == nil {
			break
		}

		return e.complexity.Tender.FollowingSales(childComplexity), true

	case "Tender.fullAddress":
		if e.complexity.Tender.FullAddress == nil {
			break
		}

		return e.complexity.Tender.FullAddress(childComplexity), true

	case "Tender.geoBounds":
		if e.complexity.Tender.GeoBounds == nil {
			break
		}

		return e.complexity.Tender.GeoBounds(childComplexity), true

	case "Tender.geoCoordinate":
		if e.complexity.Tender.GeoCoordinate == nil {
			break
		}

		return e.complexity.Tender.GeoCoordinate(childComplexity), true

	case "Tender.id":
		if e.complexity.Tender.ID == nil {
			break
		}

		return e.complexity.Tender.ID(childComplexity), true

	case "Tender.images":
		if e.complexity.Tender.Images == nil {
			break
		}

		return e.complexity.Tender.Images(childComplexity), true

	case "Tender.keyProject":
		if e.complexity.Tender.KeyProject == nil {
			break
		}

		return e.complexity.Tender.KeyProject(childComplexity), true

	case "Tender.managementCompany":
		if e.complexity.Tender.ManagementCompany == nil {
			break
		}

		return e.complexity.Tender.ManagementCompany(childComplexity), true

	case "Tender.name":
		if e.complexity.Tender.Name == nil {
			break
		}

		return e.complexity.Tender.Name(childComplexity), true

	case "Tender.ownerSituations":
		if e.complexity.Tender.OwnerSituations == nil {
			break
		}

		return e.complexity.Tender.OwnerSituations(childComplexity), true

	case "Tender.prepareToBid":
		if e.complexity.Tender.PrepareToBid == nil {
			break
		}

		return e.complexity.Tender.PrepareToBid(childComplexity), true

	case "Tender.projectCode":
		if e.complexity.Tender.ProjectCode == nil {
			break
		}

		return e.complexity.Tender.ProjectCode(childComplexity), true

	case "Tender.projectDefinition":
		if e.complexity.Tender.ProjectDefinition == nil {
			break
		}

		return e.complexity.Tender.ProjectDefinition(childComplexity), true

	case "Tender.projectType":
		if e.complexity.Tender.ProjectType == nil {
			break
		}

		return e.complexity.Tender.ProjectType(childComplexity), true

	case "Tender.province":
		if e.complexity.Tender.Province == nil {
			break
		}

		return e.complexity.Tender.Province(childComplexity), true

	case "Tender.provinceID":
		if e.complexity.Tender.ProvinceID == nil {
			break
		}

		return e.complexity.Tender.ProvinceID(childComplexity), true

	case "Tender.remark":
		if e.complexity.Tender.Remark == nil {
			break
		}

		return e.complexity.Tender.Remark(childComplexity), true

	case "Tender.sizeAndValueRating":
		if e.complexity.Tender.SizeAndValueRating == nil {
			break
		}

		return e.complexity.Tender.SizeAndValueRating(childComplexity), true

	case "Tender.sizeAndValueRatingOverview":
		if e.complexity.Tender.SizeAndValueRatingOverview == nil {
			break
		}

		return e.complexity.Tender.SizeAndValueRatingOverview(childComplexity), true

	case "Tender.status":
		if e.complexity.Tender.Status == nil {
			break
		}

		return e.complexity.Tender.Status(childComplexity), true

	case "Tender.tenderDate":
		if e.complexity.Tender.TenderDate == nil {
			break
		}

		return e.complexity.Tender.TenderDate(childComplexity), true

	case "Tender.tenderForm":
		if e.complexity.Tender.TenderForm == nil {
			break
		}

		return e.complexity.Tender.TenderForm(childComplexity), true

	case "Tender.tenderSituations":
		if e.complexity.Tender.TenderSituations == nil {
			break
		}

		return e.complexity.Tender.TenderSituations(childComplexity), true

	case "Tender.tenderingAgency":
		if e.complexity.Tender.TenderingAgency == nil {
			break
		}

		return e.complexity.Tender.TenderingAgency(childComplexity), true

	case "Tender.timeLimitRating":
		if e.complexity.Tender.TimeLimitRating == nil {
			break
		}

		return e.complexity.Tender.TimeLimitRating(childComplexity), true

	case "Tender.timeLimitRatingOverview":
		if e.complexity.Tender.TimeLimitRatingOverview == nil {
			break
		}

		return e.complexity.Tender.TimeLimitRatingOverview(childComplexity), true

	case "Tender.updatedAt":
		if e.complexity.Tender.UpdatedAt == nil {
			break
		}

		return e.complexity.Tender.UpdatedAt(childComplexity), true

	case "Tender.visitRecords":
		if e.complexity.Tender.VisitRecords == nil {
			break
		}

		return e.complexity.Tender.VisitRecords(childComplexity), true

	case "TenderConnection.edges":
		if e.complexity.TenderConnection.Edges == nil {
			break
		}

		return e.complexity.TenderConnection.Edges(childComplexity), true

	case "TenderConnection.pageInfo":
		if e.complexity.TenderConnection.PageInfo == nil {
			break
		}

		return e.complexity.TenderConnection.PageInfo(childComplexity), true

	case "TenderConnection.totalCount":
		if e.complexity.TenderConnection.TotalCount == nil {
			break
		}

		return e.complexity.TenderConnection.TotalCount(childComplexity), true

	case "TenderEdge.cursor":
		if e.complexity.TenderEdge.Cursor == nil {
			break
		}

		return e.complexity.TenderEdge.Cursor(childComplexity), true

	case "TenderEdge.node":
		if e.complexity.TenderEdge.Node == nil {
			break
		}

		return e.complexity.TenderEdge.Node(childComplexity), true

	case "User.areas":
		if e.complexity.User.Areas == nil {
			break
		}

		return e.complexity.User.Areas(childComplexity), true

	case "User.avatarURL":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.customers":
		if e.complexity.User.Customers == nil {
			break
		}

		return e.complexity.User.Customers(childComplexity), true

	case "User.disabled":
		if e.complexity.User.Disabled == nil {
			break
		}

		return e.complexity.User.Disabled(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isAdmin":
		if e.complexity.User.IsAdmin == nil {
			break
		}

		return e.complexity.User.IsAdmin(childComplexity), true

	case "User.isLeader":
		if e.complexity.User.IsLeader == nil {
			break
		}

		return e.complexity.User.IsLeader(childComplexity), true

	case "User.leader":
		if e.complexity.User.Leader == nil {
			break
		}

		return e.complexity.User.Leader(childComplexity), true

	case "User.leaderID":
		if e.complexity.User.LeaderID == nil {
			break
		}

		return e.complexity.User.LeaderID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.openID":
		if e.complexity.User.OpenID == nil {
			break
		}

		return e.complexity.User.OpenID(childComplexity), true

	case "User.teamMembers":
		if e.complexity.User.TeamMembers == nil {
			break
		}

		return e.complexity.User.TeamMembers(childComplexity), true

	case "User.tenders":
		if e.complexity.User.Tenders == nil {
			break
		}

		return e.complexity.User.Tenders(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.visitRecords":
		if e.complexity.User.VisitRecords == nil {
			break
		}

		return e.complexity.User.VisitRecords(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "VisitRecord.commContent":
		if e.complexity.VisitRecord.CommContent == nil {
			break
		}

		return e.complexity.VisitRecord.CommContent(childComplexity), true

	case "VisitRecord.commPeople":
		if e.complexity.VisitRecord.CommPeople == nil {
			break
		}

		return e.complexity.VisitRecord.CommPeople(childComplexity), true

	case "VisitRecord.createdAt":
		if e.complexity.VisitRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VisitRecord.CreatedAt(childComplexity), true

	case "VisitRecord.customer":
		if e.complexity.VisitRecord.Customer == nil {
			break
		}

		return e.complexity.VisitRecord.Customer(childComplexity), true

	case "VisitRecord.customerID":
		if e.complexity.VisitRecord.CustomerID == nil {
			break
		}

		return e.complexity.VisitRecord.CustomerID(childComplexity), true

	case "VisitRecord.date":
		if e.complexity.VisitRecord.Date == nil {
			break
		}

		return e.complexity.VisitRecord.Date(childComplexity), true

	case "VisitRecord.followupbys":
		if e.complexity.VisitRecord.FollowUpBys == nil {
			break
		}

		return e.complexity.VisitRecord.FollowUpBys(childComplexity), true

	case "VisitRecord.id":
		if e.complexity.VisitRecord.ID == nil {
			break
		}

		return e.complexity.VisitRecord.ID(childComplexity), true

	case "VisitRecord.nextStep":
		if e.complexity.VisitRecord.NextStep == nil {
			break
		}

		return e.complexity.VisitRecord.NextStep(childComplexity), true

	case "VisitRecord.tender":
		if e.complexity.VisitRecord.Tender == nil {
			break
		}

		return e.complexity.VisitRecord.Tender(childComplexity), true

	case "VisitRecord.tenderID":
		if e.complexity.VisitRecord.TenderID == nil {
			break
		}

		return e.complexity.VisitRecord.TenderID(childComplexity), true

	case "VisitRecord.updatedAt":
		if e.complexity.VisitRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VisitRecord.UpdatedAt(childComplexity), true

	case "VisitRecord.visitType":
		if e.complexity.VisitRecord.VisitType == nil {
			break
		}

		return e.complexity.VisitRecord.VisitType(childComplexity), true

	case "VisitRecordConnection.edges":
		if e.complexity.VisitRecordConnection.Edges == nil {
			break
		}

		return e.complexity.VisitRecordConnection.Edges(childComplexity), true

	case "VisitRecordConnection.pageInfo":
		if e.complexity.VisitRecordConnection.PageInfo == nil {
			break
		}

		return e.complexity.VisitRecordConnection.PageInfo(childComplexity), true

	case "VisitRecordConnection.totalCount":
		if e.complexity.VisitRecordConnection.TotalCount == nil {
			break
		}

		return e.complexity.VisitRecordConnection.TotalCount(childComplexity), true

	case "VisitRecordEdge.cursor":
		if e.complexity.VisitRecordEdge.Cursor == nil {
			break
		}

		return e.complexity.VisitRecordEdge.Cursor(childComplexity), true

	case "VisitRecordEdge.node":
		if e.complexity.VisitRecordEdge.Node == nil {
			break
		}

		return e.complexity.VisitRecordEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAreaWhereInput,
		ec.unmarshalInputCityWhereInput,
		ec.unmarshalInputCountryWhereInput,
		ec.unmarshalInputCreateAreaInput,
		ec.unmarshalInputCreateCityInput,
		ec.unmarshalInputCreateCountryInput,
		ec.unmarshalInputCreateCustomerInput,
		ec.unmarshalInputCreateDistrictInput,
		ec.unmarshalInputCreatePlotInput,
		ec.unmarshalInputCreateProvinceInput,
		ec.unmarshalInputCreateTenderInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateVisitRecordInput,
		ec.unmarshalInputCustomerOrder,
		ec.unmarshalInputCustomerWhereInput,
		ec.unmarshalInputDistrictWhereInput,
		ec.unmarshalInputPlotWhereInput,
		ec.unmarshalInputProvinceWhereInput,
		ec.unmarshalInputTenderOrder,
		ec.unmarshalInputTenderWhereInput,
		ec.unmarshalInputUpdateAreaInput,
		ec.unmarshalInputUpdateCityInput,
		ec.unmarshalInputUpdateCountryInput,
		ec.unmarshalInputUpdateCustomerInput,
		ec.unmarshalInputUpdateDistrictInput,
		ec.unmarshalInputUpdatePlotInput,
		ec.unmarshalInputUpdateProvinceInput,
		ec.unmarshalInputUpdateTenderInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateVisitRecordInput,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputVisitRecordWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Area implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  code: String!
  customers: [Customer!]
  tenders: [Tender!]
  sales: [User!]
  provinces: [Province!]
}
"""
A connection to a list of items.
"""
type AreaConnection {
  """
  A list of edges.
  """
  edges: [AreaEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AreaEdge {
  """
  The item at the end of the edge.
  """
  node: Area
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AreaWhereInput is used for filtering Area objects.
Input was generated by ent.
"""
input AreaWhereInput {
  not: AreaWhereInput
  and: [AreaWhereInput!]
  or: [AreaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  sales edge predicates
  """
  hasSales: Boolean
  hasSalesWith: [UserWhereInput!]
  """
  provinces edge predicates
  """
  hasProvinces: Boolean
  hasProvincesWith: [ProvinceWhereInput!]
}
type City implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  name: String!
  provinceID: ID!
  districts: [District!]
  province: Province!
  tenders: [Tender!]
}
"""
A connection to a list of items.
"""
type CityConnection {
  """
  A list of edges.
  """
  edges: [CityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CityEdge {
  """
  The item at the end of the edge.
  """
  node: City
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CityWhereInput is used for filtering City objects.
Input was generated by ent.
"""
input CityWhereInput {
  not: CityWhereInput
  and: [CityWhereInput!]
  or: [CityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
}
type Country implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  provinces: [Province!]
}
"""
A connection to a list of items.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  provinces edge predicates
  """
  hasProvinces: Boolean
  hasProvincesWith: [ProvinceWhereInput!]
}
"""
CreateAreaInput is used for create Area object.
Input was generated by ent.
"""
input CreateAreaInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  code: String!
  customerIDs: [ID!]
  tenderIDs: [ID!]
  saleIDs: [ID!]
  provinceIDs: [ID!]
}
"""
CreateCityInput is used for create City object.
Input was generated by ent.
"""
input CreateCityInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  name: String!
  districtIDs: [ID!]
  provinceID: ID!
  tenderIDs: [ID!]
}
"""
CreateCountryInput is used for create Country object.
Input was generated by ent.
"""
input CreateCountryInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  provinceIDs: [ID!]
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  ownerType: Int
  industry: Int!
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  tenderIDs: [ID!]
  salesID: ID
  createdByID: ID!
  visitRecordIDs: [ID!]
}
"""
CreateDistrictInput is used for create District object.
Input was generated by ent.
"""
input CreateDistrictInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
  tenderIDs: [ID!]
  plotIDs: [ID!]
}
"""
CreatePlotInput is used for create Plot object.
Input was generated by ent.
"""
input CreatePlotInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  colorHex: String!
  districtID: ID!
}
"""
CreateProvinceInput is used for create Province object.
Input was generated by ent.
"""
input CreateProvinceInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  districtIDs: [ID!]
  cityIDs: [ID!]
  countryID: ID!
  tenderIDs: [ID!]
  areaID: ID
}
"""
CreateTenderInput is used for create Tender object.
Input was generated by ent.
"""
input CreateTenderInput {
  createdAt: Time
  updatedAt: Time
  code: String!
  status: Int
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  discoveryDate: Time!
  address: String
  fullAddress: String
  contractor: String
  sizeAndValueRating: Int
  sizeAndValueRatingOverview: String
  creditAndPaymentRating: Int
  creditAndPaymentRatingOverview: String
  timeLimitRating: Int
  timeLimitRatingOverview: String
  customerRelationshipRating: Int
  customerRelationshipRatingOverview: String
  competitivePartnershipRating: Int
  competitivePartnershipRatingOverview: String
  prepareToBid: Boolean
  projectCode: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  projectType: String
  attachements: [String!]
  remark: String
  images: [String!]
  tenderSituations: String
  ownerSituations: String
  biddingInstructions: String
  competitorSituations: String
  costEngineer: String
  tenderForm: String
  contractForm: String
  managementCompany: String
  tenderingAgency: String
  biddingDate: Time
  facadeConsultant: String
  designUnit: String
  consultingFirm: String
  keyProject: Boolean
  areaID: ID!
  customerID: ID!
  finderID: ID!
  createdByID: ID!
  followingSaleIDs: [ID!]
  provinceID: ID!
  cityID: ID
  districtID: ID!
  visitRecordIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  email: String!
  username: String!
  openID: String!
  avatarURL: String!
  disabled: Boolean
  isAdmin: Boolean
  isLeader: Boolean
  areaIDs: [ID!]
  customerIDs: [ID!]
  leaderID: ID
  teamMemberIDs: [ID!]
  tenderIDs: [ID!]
  visitRecordIDs: [ID!]
}
"""
CreateVisitRecordInput is used for create VisitRecord object.
Input was generated by ent.
"""
input CreateVisitRecordInput {
  createdAt: Time
  updatedAt: Time
  visitType: Int
  commPeople: String!
  commContent: String!
  nextStep: String
  date: Time!
  tenderID: ID
  customerID: ID
  followupbyIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  ownerType: Int
  industry: Int!
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  salesID: ID
  createdByID: ID!
  area: Area!
  tenders: [Tender!]
  sales: User
  createdBy: User!
  visitRecords: [VisitRecord!]
}
"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  A list of edges.
  """
  edges: [CustomerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Customer connections
"""
input CustomerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Customers.
  """
  field: CustomerOrderField!
}
"""
Properties by which Customer connections can be ordered.
"""
enum CustomerOrderField {
  NAME
  OWNER_TYPE
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  owner_type field predicates
  """
  ownerType: Int
  ownerTypeNEQ: Int
  ownerTypeIn: [Int!]
  ownerTypeNotIn: [Int!]
  ownerTypeGT: Int
  ownerTypeGTE: Int
  ownerTypeLT: Int
  ownerTypeLTE: Int
  ownerTypeIsNil: Boolean
  ownerTypeNotNil: Boolean
  """
  industry field predicates
  """
  industry: Int
  industryNEQ: Int
  industryIn: [Int!]
  industryNotIn: [Int!]
  industryGT: Int
  industryGTE: Int
  industryLT: Int
  industryLTE: Int
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  sizeIsNil: Boolean
  sizeNotNil: Boolean
  """
  contact_person field predicates
  """
  contactPerson: String
  contactPersonNEQ: String
  contactPersonIn: [String!]
  contactPersonNotIn: [String!]
  contactPersonGT: String
  contactPersonGTE: String
  contactPersonLT: String
  contactPersonLTE: String
  contactPersonContains: String
  contactPersonHasPrefix: String
  contactPersonHasSuffix: String
  contactPersonIsNil: Boolean
  contactPersonNotNil: Boolean
  contactPersonEqualFold: String
  contactPersonContainsFold: String
  """
  contact_person_position field predicates
  """
  contactPersonPosition: String
  contactPersonPositionNEQ: String
  contactPersonPositionIn: [String!]
  contactPersonPositionNotIn: [String!]
  contactPersonPositionGT: String
  contactPersonPositionGTE: String
  contactPersonPositionLT: String
  contactPersonPositionLTE: String
  contactPersonPositionContains: String
  contactPersonPositionHasPrefix: String
  contactPersonPositionHasSuffix: String
  contactPersonPositionIsNil: Boolean
  contactPersonPositionNotNil: Boolean
  contactPersonPositionEqualFold: String
  contactPersonPositionContainsFold: String
  """
  contact_person_phone field predicates
  """
  contactPersonPhone: String
  contactPersonPhoneNEQ: String
  contactPersonPhoneIn: [String!]
  contactPersonPhoneNotIn: [String!]
  contactPersonPhoneGT: String
  contactPersonPhoneGTE: String
  contactPersonPhoneLT: String
  contactPersonPhoneLTE: String
  contactPersonPhoneContains: String
  contactPersonPhoneHasPrefix: String
  contactPersonPhoneHasSuffix: String
  contactPersonPhoneIsNil: Boolean
  contactPersonPhoneNotNil: Boolean
  contactPersonPhoneEqualFold: String
  contactPersonPhoneContainsFold: String
  """
  contact_person_email field predicates
  """
  contactPersonEmail: String
  contactPersonEmailNEQ: String
  contactPersonEmailIn: [String!]
  contactPersonEmailNotIn: [String!]
  contactPersonEmailGT: String
  contactPersonEmailGTE: String
  contactPersonEmailLT: String
  contactPersonEmailLTE: String
  contactPersonEmailContains: String
  contactPersonEmailHasPrefix: String
  contactPersonEmailHasSuffix: String
  contactPersonEmailIsNil: Boolean
  contactPersonEmailNotNil: Boolean
  contactPersonEmailEqualFold: String
  contactPersonEmailContainsFold: String
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  sales_id field predicates
  """
  salesID: ID
  salesIDNEQ: ID
  salesIDIn: [ID!]
  salesIDNotIn: [ID!]
  salesIDGT: ID
  salesIDGTE: ID
  salesIDLT: ID
  salesIDLTE: ID
  salesIDContains: ID
  salesIDHasPrefix: ID
  salesIDHasSuffix: ID
  salesIDIsNil: Boolean
  salesIDNotNil: Boolean
  salesIDEqualFold: ID
  salesIDContainsFold: ID
  """
  created_by_id field predicates
  """
  createdByID: ID
  createdByIDNEQ: ID
  createdByIDIn: [ID!]
  createdByIDNotIn: [ID!]
  createdByIDGT: ID
  createdByIDGTE: ID
  createdByIDLT: ID
  createdByIDLTE: ID
  createdByIDContains: ID
  createdByIDHasPrefix: ID
  createdByIDHasSuffix: ID
  createdByIDEqualFold: ID
  createdByIDContainsFold: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  sales edge predicates
  """
  hasSales: Boolean
  hasSalesWith: [UserWhereInput!]
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
}
type District implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
  province: Province!
  city: City
  tenders: [Tender!]
  plots: [Plot!]
}
"""
A connection to a list of items.
"""
type DistrictConnection {
  """
  A list of edges.
  """
  edges: [DistrictEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DistrictEdge {
  """
  The item at the end of the edge.
  """
  node: District
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DistrictWhereInput is used for filtering District objects.
Input was generated by ent.
"""
input DistrictWhereInput {
  not: DistrictWhereInput
  and: [DistrictWhereInput!]
  or: [DistrictWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  city_code field predicates
  """
  cityCode: Int
  cityCodeNEQ: Int
  cityCodeIn: [Int!]
  cityCodeNotIn: [Int!]
  cityCodeGT: Int
  cityCodeGTE: Int
  cityCodeLT: Int
  cityCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  city_id field predicates
  """
  cityID: ID
  cityIDNEQ: ID
  cityIDIn: [ID!]
  cityIDNotIn: [ID!]
  cityIDGT: ID
  cityIDGTE: ID
  cityIDLT: ID
  cityIDLTE: ID
  cityIDContains: ID
  cityIDHasPrefix: ID
  cityIDHasSuffix: ID
  cityIDIsNil: Boolean
  cityIDNotNil: Boolean
  cityIDEqualFold: ID
  cityIDContainsFold: ID
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  city edge predicates
  """
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  plots edge predicates
  """
  hasPlots: Boolean
  hasPlotsWith: [PlotWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "cscd-bds/store/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Plot implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  colorHex: String!
  districtID: ID!
  district: District!
}
"""
A connection to a list of items.
"""
type PlotConnection {
  """
  A list of edges.
  """
  edges: [PlotEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PlotEdge {
  """
  The item at the end of the edge.
  """
  node: Plot
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PlotWhereInput is used for filtering Plot objects.
Input was generated by ent.
"""
input PlotWhereInput {
  not: PlotWhereInput
  and: [PlotWhereInput!]
  or: [PlotWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  color_hex field predicates
  """
  colorHex: String
  colorHexNEQ: String
  colorHexIn: [String!]
  colorHexNotIn: [String!]
  colorHexGT: String
  colorHexGTE: String
  colorHexLT: String
  colorHexLTE: String
  colorHexContains: String
  colorHexHasPrefix: String
  colorHexHasSuffix: String
  colorHexEqualFold: String
  colorHexContainsFold: String
  """
  district_id field predicates
  """
  districtID: ID
  districtIDNEQ: ID
  districtIDIn: [ID!]
  districtIDNotIn: [ID!]
  districtIDGT: ID
  districtIDGTE: ID
  districtIDLT: ID
  districtIDLTE: ID
  districtIDContains: ID
  districtIDHasPrefix: ID
  districtIDHasSuffix: ID
  districtIDEqualFold: ID
  districtIDContainsFold: ID
  """
  district edge predicates
  """
  hasDistrict: Boolean
  hasDistrictWith: [DistrictWhereInput!]
}
type Province implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  countryID: ID!
  areaID: ID
  districts: [District!]
  cities: [City!]
  country: Country!
  tenders: [Tender!]
  area: Area
}
"""
A connection to a list of items.
"""
type ProvinceConnection {
  """
  A list of edges.
  """
  edges: [ProvinceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProvinceEdge {
  """
  The item at the end of the edge.
  """
  node: Province
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProvinceWhereInput is used for filtering Province objects.
Input was generated by ent.
"""
input ProvinceWhereInput {
  not: ProvinceWhereInput
  and: [ProvinceWhereInput!]
  or: [ProvinceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  country_id field predicates
  """
  countryID: ID
  countryIDNEQ: ID
  countryIDIn: [ID!]
  countryIDNotIn: [ID!]
  countryIDGT: ID
  countryIDGTE: ID
  countryIDLT: ID
  countryIDLTE: ID
  countryIDContains: ID
  countryIDHasPrefix: ID
  countryIDHasSuffix: ID
  countryIDEqualFold: ID
  countryIDContainsFold: ID
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDIsNil: Boolean
  areaIDNotNil: Boolean
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  cities edge predicates
  """
  hasCities: Boolean
  hasCitiesWith: [CityWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  areas(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Areas returned from the connection.
    """
    where: AreaWhereInput
  ): AreaConnection!
  cities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cities returned from the connection.
    """
    where: CityWhereInput
  ): CityConnection!
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Countries returned from the connection.
    """
    where: CountryWhereInput
  ): CountryConnection!
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Customers returned from the connection.
    """
    orderBy: CustomerOrder

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Districts returned from the connection.
    """
    where: DistrictWhereInput
  ): DistrictConnection!
  plots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Plots returned from the connection.
    """
    where: PlotWhereInput
  ): PlotConnection!
  provinces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Provinces returned from the connection.
    """
    where: ProvinceWhereInput
  ): ProvinceConnection!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: TenderOrder

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  visitRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for VisitRecords returned from the connection.
    """
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
}
type Tender implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  code: String!
  status: Int!
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  discoveryDate: Time!
  address: String
  fullAddress: String
  contractor: String
  sizeAndValueRating: Int
  sizeAndValueRatingOverview: String
  creditAndPaymentRating: Int
  creditAndPaymentRatingOverview: String
  timeLimitRating: Int
  timeLimitRatingOverview: String
  customerRelationshipRating: Int
  customerRelationshipRatingOverview: String
  competitivePartnershipRating: Int
  competitivePartnershipRatingOverview: String
  prepareToBid: Boolean!
  projectCode: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  projectType: String
  attachements: [String!]
  remark: String
  images: [String!]
  tenderSituations: String
  ownerSituations: String
  biddingInstructions: String
  competitorSituations: String
  costEngineer: String
  tenderForm: String
  contractForm: String
  managementCompany: String
  tenderingAgency: String
  biddingDate: Time
  facadeConsultant: String
  designUnit: String
  consultingFirm: String
  keyProject: Boolean!
  areaID: ID!
  provinceID: ID!
  cityID: ID
  districtID: ID!
  customerID: ID!
  finderID: ID!
  createdByID: ID!
  area: Area!
  customer: Customer!
  finder: User!
  createdBy: User!
  followingSales: [User!]
  province: Province!
  city: City
  district: District!
  visitRecords: [VisitRecord!]
}
"""
A connection to a list of items.
"""
type TenderConnection {
  """
  A list of edges.
  """
  edges: [TenderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenderEdge {
  """
  The item at the end of the edge.
  """
  node: Tender
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tender connections
"""
input TenderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tenders.
  """
  field: TenderOrderField!
}
"""
Properties by which Tender connections can be ordered.
"""
enum TenderOrderField {
  NAME
}
"""
TenderWhereInput is used for filtering Tender objects.
Input was generated by ent.
"""
input TenderWhereInput {
  not: TenderWhereInput
  and: [TenderWhereInput!]
  or: [TenderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  status field predicates
  """
  status: Int
  statusNEQ: Int
  statusIn: [Int!]
  statusNotIn: [Int!]
  statusGT: Int
  statusGTE: Int
  statusLT: Int
  statusLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  estimated_amount field predicates
  """
  estimatedAmount: Float
  estimatedAmountNEQ: Float
  estimatedAmountIn: [Float!]
  estimatedAmountNotIn: [Float!]
  estimatedAmountGT: Float
  estimatedAmountGTE: Float
  estimatedAmountLT: Float
  estimatedAmountLTE: Float
  estimatedAmountIsNil: Boolean
  estimatedAmountNotNil: Boolean
  """
  tender_date field predicates
  """
  tenderDate: Time
  tenderDateNEQ: Time
  tenderDateIn: [Time!]
  tenderDateNotIn: [Time!]
  tenderDateGT: Time
  tenderDateGTE: Time
  tenderDateLT: Time
  tenderDateLTE: Time
  tenderDateIsNil: Boolean
  tenderDateNotNil: Boolean
  """
  discovery_date field predicates
  """
  discoveryDate: Time
  discoveryDateNEQ: Time
  discoveryDateIn: [Time!]
  discoveryDateNotIn: [Time!]
  discoveryDateGT: Time
  discoveryDateGTE: Time
  discoveryDateLT: Time
  discoveryDateLTE: Time
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  full_address field predicates
  """
  fullAddress: String
  fullAddressNEQ: String
  fullAddressIn: [String!]
  fullAddressNotIn: [String!]
  fullAddressGT: String
  fullAddressGTE: String
  fullAddressLT: String
  fullAddressLTE: String
  fullAddressContains: String
  fullAddressHasPrefix: String
  fullAddressHasSuffix: String
  fullAddressIsNil: Boolean
  fullAddressNotNil: Boolean
  fullAddressEqualFold: String
  fullAddressContainsFold: String
  """
  contractor field predicates
  """
  contractor: String
  contractorNEQ: String
  contractorIn: [String!]
  contractorNotIn: [String!]
  contractorGT: String
  contractorGTE: String
  contractorLT: String
  contractorLTE: String
  contractorContains: String
  contractorHasPrefix: String
  contractorHasSuffix: String
  contractorIsNil: Boolean
  contractorNotNil: Boolean
  contractorEqualFold: String
  contractorContainsFold: String
  """
  size_and_value_rating field predicates
  """
  sizeAndValueRating: Int
  sizeAndValueRatingNEQ: Int
  sizeAndValueRatingIn: [Int!]
  sizeAndValueRatingNotIn: [Int!]
  sizeAndValueRatingGT: Int
  sizeAndValueRatingGTE: Int
  sizeAndValueRatingLT: Int
  sizeAndValueRatingLTE: Int
  sizeAndValueRatingIsNil: Boolean
  sizeAndValueRatingNotNil: Boolean
  """
  size_and_value_rating_overview field predicates
  """
  sizeAndValueRatingOverview: String
  sizeAndValueRatingOverviewNEQ: String
  sizeAndValueRatingOverviewIn: [String!]
  sizeAndValueRatingOverviewNotIn: [String!]
  sizeAndValueRatingOverviewGT: String
  sizeAndValueRatingOverviewGTE: String
  sizeAndValueRatingOverviewLT: String
  sizeAndValueRatingOverviewLTE: String
  sizeAndValueRatingOverviewContains: String
  sizeAndValueRatingOverviewHasPrefix: String
  sizeAndValueRatingOverviewHasSuffix: String
  sizeAndValueRatingOverviewIsNil: Boolean
  sizeAndValueRatingOverviewNotNil: Boolean
  sizeAndValueRatingOverviewEqualFold: String
  sizeAndValueRatingOverviewContainsFold: String
  """
  credit_and_payment_rating field predicates
  """
  creditAndPaymentRating: Int
  creditAndPaymentRatingNEQ: Int
  creditAndPaymentRatingIn: [Int!]
  creditAndPaymentRatingNotIn: [Int!]
  creditAndPaymentRatingGT: Int
  creditAndPaymentRatingGTE: Int
  creditAndPaymentRatingLT: Int
  creditAndPaymentRatingLTE: Int
  creditAndPaymentRatingIsNil: Boolean
  creditAndPaymentRatingNotNil: Boolean
  """
  credit_and_payment_rating_overview field predicates
  """
  creditAndPaymentRatingOverview: String
  creditAndPaymentRatingOverviewNEQ: String
  creditAndPaymentRatingOverviewIn: [String!]
  creditAndPaymentRatingOverviewNotIn: [String!]
  creditAndPaymentRatingOverviewGT: String
  creditAndPaymentRatingOverviewGTE: String
  creditAndPaymentRatingOverviewLT: String
  creditAndPaymentRatingOverviewLTE: String
  creditAndPaymentRatingOverviewContains: String
  creditAndPaymentRatingOverviewHasPrefix: String
  creditAndPaymentRatingOverviewHasSuffix: String
  creditAndPaymentRatingOverviewIsNil: Boolean
  creditAndPaymentRatingOverviewNotNil: Boolean
  creditAndPaymentRatingOverviewEqualFold: String
  creditAndPaymentRatingOverviewContainsFold: String
  """
  time_limit_rating field predicates
  """
  timeLimitRating: Int
  timeLimitRatingNEQ: Int
  timeLimitRatingIn: [Int!]
  timeLimitRatingNotIn: [Int!]
  timeLimitRatingGT: Int
  timeLimitRatingGTE: Int
  timeLimitRatingLT: Int
  timeLimitRatingLTE: Int
  timeLimitRatingIsNil: Boolean
  timeLimitRatingNotNil: Boolean
  """
  time_limit_rating_overview field predicates
  """
  timeLimitRatingOverview: String
  timeLimitRatingOverviewNEQ: String
  timeLimitRatingOverviewIn: [String!]
  timeLimitRatingOverviewNotIn: [String!]
  timeLimitRatingOverviewGT: String
  timeLimitRatingOverviewGTE: String
  timeLimitRatingOverviewLT: String
  timeLimitRatingOverviewLTE: String
  timeLimitRatingOverviewContains: String
  timeLimitRatingOverviewHasPrefix: String
  timeLimitRatingOverviewHasSuffix: String
  timeLimitRatingOverviewIsNil: Boolean
  timeLimitRatingOverviewNotNil: Boolean
  timeLimitRatingOverviewEqualFold: String
  timeLimitRatingOverviewContainsFold: String
  """
  customer_relationship_rating field predicates
  """
  customerRelationshipRating: Int
  customerRelationshipRatingNEQ: Int
  customerRelationshipRatingIn: [Int!]
  customerRelationshipRatingNotIn: [Int!]
  customerRelationshipRatingGT: Int
  customerRelationshipRatingGTE: Int
  customerRelationshipRatingLT: Int
  customerRelationshipRatingLTE: Int
  customerRelationshipRatingIsNil: Boolean
  customerRelationshipRatingNotNil: Boolean
  """
  customer_relationship_rating_overview field predicates
  """
  customerRelationshipRatingOverview: String
  customerRelationshipRatingOverviewNEQ: String
  customerRelationshipRatingOverviewIn: [String!]
  customerRelationshipRatingOverviewNotIn: [String!]
  customerRelationshipRatingOverviewGT: String
  customerRelationshipRatingOverviewGTE: String
  customerRelationshipRatingOverviewLT: String
  customerRelationshipRatingOverviewLTE: String
  customerRelationshipRatingOverviewContains: String
  customerRelationshipRatingOverviewHasPrefix: String
  customerRelationshipRatingOverviewHasSuffix: String
  customerRelationshipRatingOverviewIsNil: Boolean
  customerRelationshipRatingOverviewNotNil: Boolean
  customerRelationshipRatingOverviewEqualFold: String
  customerRelationshipRatingOverviewContainsFold: String
  """
  competitive_partnership_rating field predicates
  """
  competitivePartnershipRating: Int
  competitivePartnershipRatingNEQ: Int
  competitivePartnershipRatingIn: [Int!]
  competitivePartnershipRatingNotIn: [Int!]
  competitivePartnershipRatingGT: Int
  competitivePartnershipRatingGTE: Int
  competitivePartnershipRatingLT: Int
  competitivePartnershipRatingLTE: Int
  competitivePartnershipRatingIsNil: Boolean
  competitivePartnershipRatingNotNil: Boolean
  """
  competitive_partnership_rating_overview field predicates
  """
  competitivePartnershipRatingOverview: String
  competitivePartnershipRatingOverviewNEQ: String
  competitivePartnershipRatingOverviewIn: [String!]
  competitivePartnershipRatingOverviewNotIn: [String!]
  competitivePartnershipRatingOverviewGT: String
  competitivePartnershipRatingOverviewGTE: String
  competitivePartnershipRatingOverviewLT: String
  competitivePartnershipRatingOverviewLTE: String
  competitivePartnershipRatingOverviewContains: String
  competitivePartnershipRatingOverviewHasPrefix: String
  competitivePartnershipRatingOverviewHasSuffix: String
  competitivePartnershipRatingOverviewIsNil: Boolean
  competitivePartnershipRatingOverviewNotNil: Boolean
  competitivePartnershipRatingOverviewEqualFold: String
  competitivePartnershipRatingOverviewContainsFold: String
  """
  prepare_to_bid field predicates
  """
  prepareToBid: Boolean
  prepareToBidNEQ: Boolean
  """
  project_code field predicates
  """
  projectCode: String
  projectCodeNEQ: String
  projectCodeIn: [String!]
  projectCodeNotIn: [String!]
  projectCodeGT: String
  projectCodeGTE: String
  projectCodeLT: String
  projectCodeLTE: String
  projectCodeContains: String
  projectCodeHasPrefix: String
  projectCodeHasSuffix: String
  projectCodeIsNil: Boolean
  projectCodeNotNil: Boolean
  projectCodeEqualFold: String
  projectCodeContainsFold: String
  """
  project_definition field predicates
  """
  projectDefinition: String
  projectDefinitionNEQ: String
  projectDefinitionIn: [String!]
  projectDefinitionNotIn: [String!]
  projectDefinitionGT: String
  projectDefinitionGTE: String
  projectDefinitionLT: String
  projectDefinitionLTE: String
  projectDefinitionContains: String
  projectDefinitionHasPrefix: String
  projectDefinitionHasSuffix: String
  projectDefinitionIsNil: Boolean
  projectDefinitionNotNil: Boolean
  projectDefinitionEqualFold: String
  projectDefinitionContainsFold: String
  """
  estimated_project_start_date field predicates
  """
  estimatedProjectStartDate: Time
  estimatedProjectStartDateNEQ: Time
  estimatedProjectStartDateIn: [Time!]
  estimatedProjectStartDateNotIn: [Time!]
  estimatedProjectStartDateGT: Time
  estimatedProjectStartDateGTE: Time
  estimatedProjectStartDateLT: Time
  estimatedProjectStartDateLTE: Time
  estimatedProjectStartDateIsNil: Boolean
  estimatedProjectStartDateNotNil: Boolean
  """
  estimated_project_end_date field predicates
  """
  estimatedProjectEndDate: Time
  estimatedProjectEndDateNEQ: Time
  estimatedProjectEndDateIn: [Time!]
  estimatedProjectEndDateNotIn: [Time!]
  estimatedProjectEndDateGT: Time
  estimatedProjectEndDateGTE: Time
  estimatedProjectEndDateLT: Time
  estimatedProjectEndDateLTE: Time
  estimatedProjectEndDateIsNil: Boolean
  estimatedProjectEndDateNotNil: Boolean
  """
  project_type field predicates
  """
  projectType: String
  projectTypeNEQ: String
  projectTypeIn: [String!]
  projectTypeNotIn: [String!]
  projectTypeGT: String
  projectTypeGTE: String
  projectTypeLT: String
  projectTypeLTE: String
  projectTypeContains: String
  projectTypeHasPrefix: String
  projectTypeHasSuffix: String
  projectTypeIsNil: Boolean
  projectTypeNotNil: Boolean
  projectTypeEqualFold: String
  projectTypeContainsFold: String
  """
  remark field predicates
  """
  remark: String
  remarkNEQ: String
  remarkIn: [String!]
  remarkNotIn: [String!]
  remarkGT: String
  remarkGTE: String
  remarkLT: String
  remarkLTE: String
  remarkContains: String
  remarkHasPrefix: String
  remarkHasSuffix: String
  remarkIsNil: Boolean
  remarkNotNil: Boolean
  remarkEqualFold: String
  remarkContainsFold: String
  """
  tender_situations field predicates
  """
  tenderSituations: String
  tenderSituationsNEQ: String
  tenderSituationsIn: [String!]
  tenderSituationsNotIn: [String!]
  tenderSituationsGT: String
  tenderSituationsGTE: String
  tenderSituationsLT: String
  tenderSituationsLTE: String
  tenderSituationsContains: String
  tenderSituationsHasPrefix: String
  tenderSituationsHasSuffix: String
  tenderSituationsIsNil: Boolean
  tenderSituationsNotNil: Boolean
  tenderSituationsEqualFold: String
  tenderSituationsContainsFold: String
  """
  owner_situations field predicates
  """
  ownerSituations: String
  ownerSituationsNEQ: String
  ownerSituationsIn: [String!]
  ownerSituationsNotIn: [String!]
  ownerSituationsGT: String
  ownerSituationsGTE: String
  ownerSituationsLT: String
  ownerSituationsLTE: String
  ownerSituationsContains: String
  ownerSituationsHasPrefix: String
  ownerSituationsHasSuffix: String
  ownerSituationsIsNil: Boolean
  ownerSituationsNotNil: Boolean
  ownerSituationsEqualFold: String
  ownerSituationsContainsFold: String
  """
  bidding_instructions field predicates
  """
  biddingInstructions: String
  biddingInstructionsNEQ: String
  biddingInstructionsIn: [String!]
  biddingInstructionsNotIn: [String!]
  biddingInstructionsGT: String
  biddingInstructionsGTE: String
  biddingInstructionsLT: String
  biddingInstructionsLTE: String
  biddingInstructionsContains: String
  biddingInstructionsHasPrefix: String
  biddingInstructionsHasSuffix: String
  biddingInstructionsIsNil: Boolean
  biddingInstructionsNotNil: Boolean
  biddingInstructionsEqualFold: String
  biddingInstructionsContainsFold: String
  """
  competitor_situations field predicates
  """
  competitorSituations: String
  competitorSituationsNEQ: String
  competitorSituationsIn: [String!]
  competitorSituationsNotIn: [String!]
  competitorSituationsGT: String
  competitorSituationsGTE: String
  competitorSituationsLT: String
  competitorSituationsLTE: String
  competitorSituationsContains: String
  competitorSituationsHasPrefix: String
  competitorSituationsHasSuffix: String
  competitorSituationsIsNil: Boolean
  competitorSituationsNotNil: Boolean
  competitorSituationsEqualFold: String
  competitorSituationsContainsFold: String
  """
  cost_engineer field predicates
  """
  costEngineer: String
  costEngineerNEQ: String
  costEngineerIn: [String!]
  costEngineerNotIn: [String!]
  costEngineerGT: String
  costEngineerGTE: String
  costEngineerLT: String
  costEngineerLTE: String
  costEngineerContains: String
  costEngineerHasPrefix: String
  costEngineerHasSuffix: String
  costEngineerIsNil: Boolean
  costEngineerNotNil: Boolean
  costEngineerEqualFold: String
  costEngineerContainsFold: String
  """
  tender_form field predicates
  """
  tenderForm: String
  tenderFormNEQ: String
  tenderFormIn: [String!]
  tenderFormNotIn: [String!]
  tenderFormGT: String
  tenderFormGTE: String
  tenderFormLT: String
  tenderFormLTE: String
  tenderFormContains: String
  tenderFormHasPrefix: String
  tenderFormHasSuffix: String
  tenderFormIsNil: Boolean
  tenderFormNotNil: Boolean
  tenderFormEqualFold: String
  tenderFormContainsFold: String
  """
  contract_form field predicates
  """
  contractForm: String
  contractFormNEQ: String
  contractFormIn: [String!]
  contractFormNotIn: [String!]
  contractFormGT: String
  contractFormGTE: String
  contractFormLT: String
  contractFormLTE: String
  contractFormContains: String
  contractFormHasPrefix: String
  contractFormHasSuffix: String
  contractFormIsNil: Boolean
  contractFormNotNil: Boolean
  contractFormEqualFold: String
  contractFormContainsFold: String
  """
  management_company field predicates
  """
  managementCompany: String
  managementCompanyNEQ: String
  managementCompanyIn: [String!]
  managementCompanyNotIn: [String!]
  managementCompanyGT: String
  managementCompanyGTE: String
  managementCompanyLT: String
  managementCompanyLTE: String
  managementCompanyContains: String
  managementCompanyHasPrefix: String
  managementCompanyHasSuffix: String
  managementCompanyIsNil: Boolean
  managementCompanyNotNil: Boolean
  managementCompanyEqualFold: String
  managementCompanyContainsFold: String
  """
  tendering_agency field predicates
  """
  tenderingAgency: String
  tenderingAgencyNEQ: String
  tenderingAgencyIn: [String!]
  tenderingAgencyNotIn: [String!]
  tenderingAgencyGT: String
  tenderingAgencyGTE: String
  tenderingAgencyLT: String
  tenderingAgencyLTE: String
  tenderingAgencyContains: String
  tenderingAgencyHasPrefix: String
  tenderingAgencyHasSuffix: String
  tenderingAgencyIsNil: Boolean
  tenderingAgencyNotNil: Boolean
  tenderingAgencyEqualFold: String
  tenderingAgencyContainsFold: String
  """
  bidding_date field predicates
  """
  biddingDate: Time
  biddingDateNEQ: Time
  biddingDateIn: [Time!]
  biddingDateNotIn: [Time!]
  biddingDateGT: Time
  biddingDateGTE: Time
  biddingDateLT: Time
  biddingDateLTE: Time
  biddingDateIsNil: Boolean
  biddingDateNotNil: Boolean
  """
  facade_consultant field predicates
  """
  facadeConsultant: String
  facadeConsultantNEQ: String
  facadeConsultantIn: [String!]
  facadeConsultantNotIn: [String!]
  facadeConsultantGT: String
  facadeConsultantGTE: String
  facadeConsultantLT: String
  facadeConsultantLTE: String
  facadeConsultantContains: String
  facadeConsultantHasPrefix: String
  facadeConsultantHasSuffix: String
  facadeConsultantIsNil: Boolean
  facadeConsultantNotNil: Boolean
  facadeConsultantEqualFold: String
  facadeConsultantContainsFold: String
  """
  design_unit field predicates
  """
  designUnit: String
  designUnitNEQ: String
  designUnitIn: [String!]
  designUnitNotIn: [String!]
  designUnitGT: String
  designUnitGTE: String
  designUnitLT: String
  designUnitLTE: String
  designUnitContains: String
  designUnitHasPrefix: String
  designUnitHasSuffix: String
  designUnitIsNil: Boolean
  designUnitNotNil: Boolean
  designUnitEqualFold: String
  designUnitContainsFold: String
  """
  consulting_firm field predicates
  """
  consultingFirm: String
  consultingFirmNEQ: String
  consultingFirmIn: [String!]
  consultingFirmNotIn: [String!]
  consultingFirmGT: String
  consultingFirmGTE: String
  consultingFirmLT: String
  consultingFirmLTE: String
  consultingFirmContains: String
  consultingFirmHasPrefix: String
  consultingFirmHasSuffix: String
  consultingFirmIsNil: Boolean
  consultingFirmNotNil: Boolean
  consultingFirmEqualFold: String
  consultingFirmContainsFold: String
  """
  key_project field predicates
  """
  keyProject: Boolean
  keyProjectNEQ: Boolean
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  city_id field predicates
  """
  cityID: ID
  cityIDNEQ: ID
  cityIDIn: [ID!]
  cityIDNotIn: [ID!]
  cityIDGT: ID
  cityIDGTE: ID
  cityIDLT: ID
  cityIDLTE: ID
  cityIDContains: ID
  cityIDHasPrefix: ID
  cityIDHasSuffix: ID
  cityIDIsNil: Boolean
  cityIDNotNil: Boolean
  cityIDEqualFold: ID
  cityIDContainsFold: ID
  """
  district_id field predicates
  """
  districtID: ID
  districtIDNEQ: ID
  districtIDIn: [ID!]
  districtIDNotIn: [ID!]
  districtIDGT: ID
  districtIDGTE: ID
  districtIDLT: ID
  districtIDLTE: ID
  districtIDContains: ID
  districtIDHasPrefix: ID
  districtIDHasSuffix: ID
  districtIDEqualFold: ID
  districtIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDGT: ID
  customerIDGTE: ID
  customerIDLT: ID
  customerIDLTE: ID
  customerIDContains: ID
  customerIDHasPrefix: ID
  customerIDHasSuffix: ID
  customerIDEqualFold: ID
  customerIDContainsFold: ID
  """
  finder_id field predicates
  """
  finderID: ID
  finderIDNEQ: ID
  finderIDIn: [ID!]
  finderIDNotIn: [ID!]
  finderIDGT: ID
  finderIDGTE: ID
  finderIDLT: ID
  finderIDLTE: ID
  finderIDContains: ID
  finderIDHasPrefix: ID
  finderIDHasSuffix: ID
  finderIDEqualFold: ID
  finderIDContainsFold: ID
  """
  created_by_id field predicates
  """
  createdByID: ID
  createdByIDNEQ: ID
  createdByIDIn: [ID!]
  createdByIDNotIn: [ID!]
  createdByIDGT: ID
  createdByIDGTE: ID
  createdByIDLT: ID
  createdByIDLTE: ID
  createdByIDContains: ID
  createdByIDHasPrefix: ID
  createdByIDHasSuffix: ID
  createdByIDEqualFold: ID
  createdByIDContainsFold: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """
  finder edge predicates
  """
  hasFinder: Boolean
  hasFinderWith: [UserWhereInput!]
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  following_sales edge predicates
  """
  hasFollowingSales: Boolean
  hasFollowingSalesWith: [UserWhereInput!]
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  city edge predicates
  """
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
  """
  district edge predicates
  """
  hasDistrict: Boolean
  hasDistrictWith: [DistrictWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
}
"""
UpdateAreaInput is used for update Area object.
Input was generated by ent.
"""
input UpdateAreaInput {
  updatedAt: Time
  name: String
  code: String
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addSaleIDs: [ID!]
  removeSaleIDs: [ID!]
  clearSales: Boolean
  addProvinceIDs: [ID!]
  removeProvinceIDs: [ID!]
  clearProvinces: Boolean
}
"""
UpdateCityInput is used for update City object.
Input was generated by ent.
"""
input UpdateCityInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  provinceID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
}
"""
UpdateCountryInput is used for update Country object.
Input was generated by ent.
"""
input UpdateCountryInput {
  updatedAt: Time
  adcode: Int
  name: String
  addProvinceIDs: [ID!]
  removeProvinceIDs: [ID!]
  clearProvinces: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  updatedAt: Time
  name: String
  ownerType: Int
  clearOwnerType: Boolean
  industry: Int
  size: Int
  clearSize: Boolean
  contactPerson: String
  clearContactPerson: Boolean
  contactPersonPosition: String
  clearContactPersonPosition: Boolean
  contactPersonPhone: String
  clearContactPersonPhone: Boolean
  contactPersonEmail: String
  clearContactPersonEmail: Boolean
  areaID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  salesID: ID
  clearSales: Boolean
  createdByID: ID
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
}
"""
UpdateDistrictInput is used for update District object.
Input was generated by ent.
"""
input UpdateDistrictInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  cityCode: Int
  name: String
  provinceID: ID
  cityID: ID
  clearCity: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addPlotIDs: [ID!]
  removePlotIDs: [ID!]
  clearPlots: Boolean
}
"""
UpdatePlotInput is used for update Plot object.
Input was generated by ent.
"""
input UpdatePlotInput {
  updatedAt: Time
  name: String
  colorHex: String
  districtID: ID
}
"""
UpdateProvinceInput is used for update Province object.
Input was generated by ent.
"""
input UpdateProvinceInput {
  updatedAt: Time
  adcode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  addCityIDs: [ID!]
  removeCityIDs: [ID!]
  clearCities: Boolean
  countryID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  areaID: ID
  clearArea: Boolean
}
"""
UpdateTenderInput is used for update Tender object.
Input was generated by ent.
"""
input UpdateTenderInput {
  updatedAt: Time
  code: String
  status: Int
  name: String
  estimatedAmount: Float
  clearEstimatedAmount: Boolean
  tenderDate: Time
  clearTenderDate: Boolean
  discoveryDate: Time
  address: String
  clearAddress: Boolean
  fullAddress: String
  clearFullAddress: Boolean
  contractor: String
  clearContractor: Boolean
  sizeAndValueRating: Int
  clearSizeAndValueRating: Boolean
  sizeAndValueRatingOverview: String
  clearSizeAndValueRatingOverview: Boolean
  creditAndPaymentRating: Int
  clearCreditAndPaymentRating: Boolean
  creditAndPaymentRatingOverview: String
  clearCreditAndPaymentRatingOverview: Boolean
  timeLimitRating: Int
  clearTimeLimitRating: Boolean
  timeLimitRatingOverview: String
  clearTimeLimitRatingOverview: Boolean
  customerRelationshipRating: Int
  clearCustomerRelationshipRating: Boolean
  customerRelationshipRatingOverview: String
  clearCustomerRelationshipRatingOverview: Boolean
  competitivePartnershipRating: Int
  clearCompetitivePartnershipRating: Boolean
  competitivePartnershipRatingOverview: String
  clearCompetitivePartnershipRatingOverview: Boolean
  prepareToBid: Boolean
  projectCode: String
  clearProjectCode: Boolean
  projectDefinition: String
  clearProjectDefinition: Boolean
  estimatedProjectStartDate: Time
  clearEstimatedProjectStartDate: Boolean
  estimatedProjectEndDate: Time
  clearEstimatedProjectEndDate: Boolean
  projectType: String
  clearProjectType: Boolean
  attachements: [String!]
  appendAttachements: [String!]
  clearAttachements: Boolean
  remark: String
  clearRemark: Boolean
  images: [String!]
  appendImages: [String!]
  clearImages: Boolean
  tenderSituations: String
  clearTenderSituations: Boolean
  ownerSituations: String
  clearOwnerSituations: Boolean
  biddingInstructions: String
  clearBiddingInstructions: Boolean
  competitorSituations: String
  clearCompetitorSituations: Boolean
  costEngineer: String
  clearCostEngineer: Boolean
  tenderForm: String
  clearTenderForm: Boolean
  contractForm: String
  clearContractForm: Boolean
  managementCompany: String
  clearManagementCompany: Boolean
  tenderingAgency: String
  clearTenderingAgency: Boolean
  biddingDate: Time
  clearBiddingDate: Boolean
  facadeConsultant: String
  clearFacadeConsultant: Boolean
  designUnit: String
  clearDesignUnit: Boolean
  consultingFirm: String
  clearConsultingFirm: Boolean
  keyProject: Boolean
  areaID: ID
  customerID: ID
  finderID: ID
  createdByID: ID
  addFollowingSaleIDs: [ID!]
  removeFollowingSaleIDs: [ID!]
  clearFollowingSales: Boolean
  provinceID: ID
  cityID: ID
  clearCity: Boolean
  districtID: ID
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  name: String
  email: String
  username: String
  openID: String
  avatarURL: String
  disabled: Boolean
  isAdmin: Boolean
  isLeader: Boolean
  addAreaIDs: [ID!]
  removeAreaIDs: [ID!]
  clearAreas: Boolean
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  leaderID: ID
  clearLeader: Boolean
  addTeamMemberIDs: [ID!]
  removeTeamMemberIDs: [ID!]
  clearTeamMembers: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
}
"""
UpdateVisitRecordInput is used for update VisitRecord object.
Input was generated by ent.
"""
input UpdateVisitRecordInput {
  updatedAt: Time
  visitType: Int
  commPeople: String
  commContent: String
  nextStep: String
  clearNextStep: Boolean
  date: Time
  tenderID: ID
  clearTender: Boolean
  customerID: ID
  clearCustomer: Boolean
  addFollowUpByIDs: [ID!]
  removeFollowUpByIDs: [ID!]
  clearFollowUpBys: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  email: String!
  username: String!
  openID: String!
  avatarURL: String!
  disabled: Boolean!
  isAdmin: Boolean!
  isLeader: Boolean!
  leaderID: ID
  areas: [Area!]
  customers: [Customer!]
  leader: User
  teamMembers: [User!]
  tenders: [Tender!]
  visitRecords: [VisitRecord!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  open_id field predicates
  """
  openID: String
  openIDNEQ: String
  openIDIn: [String!]
  openIDNotIn: [String!]
  openIDGT: String
  openIDGTE: String
  openIDLT: String
  openIDLTE: String
  openIDContains: String
  openIDHasPrefix: String
  openIDHasSuffix: String
  openIDEqualFold: String
  openIDContainsFold: String
  """
  avatar_url field predicates
  """
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """
  disabled field predicates
  """
  disabled: Boolean
  disabledNEQ: Boolean
  """
  is_admin field predicates
  """
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """
  is_leader field predicates
  """
  isLeader: Boolean
  isLeaderNEQ: Boolean
  """
  leader_id field predicates
  """
  leaderID: ID
  leaderIDNEQ: ID
  leaderIDIn: [ID!]
  leaderIDNotIn: [ID!]
  leaderIDGT: ID
  leaderIDGTE: ID
  leaderIDLT: ID
  leaderIDLTE: ID
  leaderIDContains: ID
  leaderIDHasPrefix: ID
  leaderIDHasSuffix: ID
  leaderIDIsNil: Boolean
  leaderIDNotNil: Boolean
  leaderIDEqualFold: ID
  leaderIDContainsFold: ID
  """
  areas edge predicates
  """
  hasAreas: Boolean
  hasAreasWith: [AreaWhereInput!]
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  leader edge predicates
  """
  hasLeader: Boolean
  hasLeaderWith: [UserWhereInput!]
  """
  team_members edge predicates
  """
  hasTeamMembers: Boolean
  hasTeamMembersWith: [UserWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
}
type VisitRecord implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  visitType: Int!
  commPeople: String!
  commContent: String!
  nextStep: String
  date: Time!
  tenderID: ID
  customerID: ID
  tender: Tender
  customer: Customer
  followupbys: [User!] @goField(name: "FollowUpBys", forceResolver: false)
}
"""
A connection to a list of items.
"""
type VisitRecordConnection {
  """
  A list of edges.
  """
  edges: [VisitRecordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type VisitRecordEdge {
  """
  The item at the end of the edge.
  """
  node: VisitRecord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
VisitRecordWhereInput is used for filtering VisitRecord objects.
Input was generated by ent.
"""
input VisitRecordWhereInput {
  not: VisitRecordWhereInput
  and: [VisitRecordWhereInput!]
  or: [VisitRecordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  visit_type field predicates
  """
  visitType: Int
  visitTypeNEQ: Int
  visitTypeIn: [Int!]
  visitTypeNotIn: [Int!]
  visitTypeGT: Int
  visitTypeGTE: Int
  visitTypeLT: Int
  visitTypeLTE: Int
  """
  comm_people field predicates
  """
  commPeople: String
  commPeopleNEQ: String
  commPeopleIn: [String!]
  commPeopleNotIn: [String!]
  commPeopleGT: String
  commPeopleGTE: String
  commPeopleLT: String
  commPeopleLTE: String
  commPeopleContains: String
  commPeopleHasPrefix: String
  commPeopleHasSuffix: String
  commPeopleEqualFold: String
  commPeopleContainsFold: String
  """
  comm_content field predicates
  """
  commContent: String
  commContentNEQ: String
  commContentIn: [String!]
  commContentNotIn: [String!]
  commContentGT: String
  commContentGTE: String
  commContentLT: String
  commContentLTE: String
  commContentContains: String
  commContentHasPrefix: String
  commContentHasSuffix: String
  commContentEqualFold: String
  commContentContainsFold: String
  """
  next_step field predicates
  """
  nextStep: String
  nextStepNEQ: String
  nextStepIn: [String!]
  nextStepNotIn: [String!]
  nextStepGT: String
  nextStepGTE: String
  nextStepLT: String
  nextStepLTE: String
  nextStepContains: String
  nextStepHasPrefix: String
  nextStepHasSuffix: String
  nextStepIsNil: Boolean
  nextStepNotNil: Boolean
  nextStepEqualFold: String
  nextStepContainsFold: String
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  tender_id field predicates
  """
  tenderID: ID
  tenderIDNEQ: ID
  tenderIDIn: [ID!]
  tenderIDNotIn: [ID!]
  tenderIDGT: ID
  tenderIDGTE: ID
  tenderIDLT: ID
  tenderIDLTE: ID
  tenderIDContains: ID
  tenderIDHasPrefix: ID
  tenderIDHasSuffix: ID
  tenderIDIsNil: Boolean
  tenderIDNotNil: Boolean
  tenderIDEqualFold: ID
  tenderIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDGT: ID
  customerIDGTE: ID
  customerIDLT: ID
  customerIDLTE: ID
  customerIDContains: ID
  customerIDHasPrefix: ID
  customerIDHasSuffix: ID
  customerIDIsNil: Boolean
  customerIDNotNil: Boolean
  customerIDEqualFold: ID
  customerIDContainsFold: ID
  """
  tender edge predicates
  """
  hasTender: Boolean
  hasTenderWith: [TenderWhereInput!]
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """
  followUpBys edge predicates
  """
  hasFollowUpBys: Boolean
  hasFollowUpBysWith: [UserWhereInput!]
}
`, BuiltIn: false},
	{Name: "../geo_coordinate.graphql", Input: `extend type Tender {
  geoCoordinate: GeoJson
  geoBounds: [[Float]]
}

extend type Area {
  center: GeoJson
}

extend type Country {
  center: GeoJson
}

extend type Province {
  center: GeoJson
}

extend type City {
  center: GeoJson
}

extend type District {
  center: GeoJson
}

type GeoJson {
  type: String!
  coordinates: [Float!]!
}
`, BuiltIn: false},
	{Name: "../mutation.graphql", Input: `type Mutation {
  createArea(input: CreateAreaInput!): Area!
  updateArea(id: ID!, input: UpdateAreaInput!): Area!

  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!

  createTender(input: CreateTenderInput!, geoBounds: [[Float!]!]): Tender!
  updateTender(
    id: ID!
    input: UpdateTenderInput!
    geoBounds: [[Float!]!]
  ): Tender!
  deleteTender(id: ID!): Tender!

  createPlot(input: CreatePlotInput!, geoBounds: [[Float!]!]): Plot!
  updatePlot(id: ID!, input: UpdatePlotInput!, geoBounds: [[Float!]!]): Plot!
  deletePlot(id: ID!): Plot!
}
`, BuiltIn: false},
	{Name: "../plot.graphql", Input: `extend type Plot {
  geoBounds: [[Float!]!]
}
`, BuiltIn: false},
	{Name: "../scaler.graphql", Input: `scalar Time
`, BuiltIn: false},
	{Name: "../session.graphql", Input: `type Session {
  userId: String!
  name: String!
  username: String!
  email: String!
  avatarUrl: String!
  isAdmin: Boolean!
  isLeader: Boolean!
}

extend type Query {
  session: Session!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
