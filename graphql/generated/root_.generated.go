// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Area() AreaResolver
	City() CityResolver
	Country() CountryResolver
	District() DistrictResolver
	Mutation() MutationResolver
	Province() ProvinceResolver
	Query() QueryResolver
	Tender() TenderResolver
	User() UserResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Area struct {
		Center       func(childComplexity int) int
		Code         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Customers    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CustomerOrder, where *ent.CustomerWhereInput) int
		ID           func(childComplexity int) int
		LeaderChatID func(childComplexity int) int
		Name         func(childComplexity int) int
		Provinces    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.ProvinceOrder, where *ent.ProvinceWhereInput) int
		SalesChatID  func(childComplexity int) int
		Tenders      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt    func(childComplexity int) int
		Users        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
	}

	AreaConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AreaEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	City struct {
		Adcode     func(childComplexity int) int
		Center     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Districts  func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.DistrictOrder, where *ent.DistrictWhereInput) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		ProvCode   func(childComplexity int) int
		Province   func(childComplexity int) int
		ProvinceID func(childComplexity int) int
		Tenders    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt  func(childComplexity int) int
	}

	CityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Competitor struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		ShortName  func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		WonTenders func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
	}

	CompetitorConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CompetitorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Country struct {
		Adcode    func(childComplexity int) int
		Center    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Provinces func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.ProvinceOrder, where *ent.ProvinceWhereInput) int
		UpdatedAt func(childComplexity int) int
	}

	CountryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CountryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Customer struct {
		Approver              func(childComplexity int) int
		ApproverID            func(childComplexity int) int
		Area                  func(childComplexity int) int
		AreaID                func(childComplexity int) int
		ContactPerson         func(childComplexity int) int
		ContactPersonEmail    func(childComplexity int) int
		ContactPersonPhone    func(childComplexity int) int
		ContactPersonPosition func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		CreatedByID           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Industry              func(childComplexity int) int
		IsApproved            func(childComplexity int) int
		Name                  func(childComplexity int) int
		OwnerType             func(childComplexity int) int
		Sales                 func(childComplexity int) int
		SalesID               func(childComplexity int) int
		Size                  func(childComplexity int) int
		Tenders               func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt             func(childComplexity int) int
		VisitRecords          func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) int
	}

	CustomerConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CustomerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	District struct {
		Adcode     func(childComplexity int) int
		Center     func(childComplexity int) int
		City       func(childComplexity int) int
		CityCode   func(childComplexity int) int
		CityID     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Plots      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.PlotOrder, where *ent.PlotWhereInput) int
		ProvCode   func(childComplexity int) int
		Province   func(childComplexity int) int
		ProvinceID func(childComplexity int) int
		Tenders    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt  func(childComplexity int) int
	}

	DistrictConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DistrictEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FeishuUser struct {
		AvatarURL func(childComplexity int) int
		Email     func(childComplexity int) int
		Name      func(childComplexity int) int
		OpenID    func(childComplexity int) int
	}

	GeoJson struct {
		Coordinates func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	Location struct {
		Address  func(childComplexity int) int
		City     func(childComplexity int) int
		District func(childComplexity int) int
		ID       func(childComplexity int) int
		Lat      func(childComplexity int) int
		Lng      func(childComplexity int) int
		Name     func(childComplexity int) int
		Province func(childComplexity int) int
	}

	Mutation struct {
		CreateArea        func(childComplexity int, input ent.CreateAreaInput) int
		CreateCompetitor  func(childComplexity int, input ent.CreateCompetitorInput) int
		CreateCustomer    func(childComplexity int, input ent.CreateCustomerInput) int
		CreatePlot        func(childComplexity int, input ent.CreatePlotInput, geoBounds [][]float64) int
		CreateTender      func(childComplexity int, input ent.CreateTenderInput, geoBounds [][]float64, imageFileNames []string, attachmentFileNames []string, geoCoordinate []float64) int
		CreateUser        func(childComplexity int, input ent.CreateUserInput) int
		CreateVisitRecord func(childComplexity int, input ent.CreateVisitRecordInput) int
		DeleteCompetitor  func(childComplexity int, id xid.ID) int
		DeleteCustomer    func(childComplexity int, id xid.ID) int
		DeletePlot        func(childComplexity int, id xid.ID) int
		DeleteTender      func(childComplexity int, id xid.ID) int
		DeleteUser        func(childComplexity int, id xid.ID) int
		DeleteVisitRecord func(childComplexity int, id xid.ID) int
		UpdateArea        func(childComplexity int, id xid.ID, input ent.UpdateAreaInput) int
		UpdateCompetitor  func(childComplexity int, id xid.ID, input ent.UpdateCompetitorInput) int
		UpdateCustomer    func(childComplexity int, id xid.ID, input ent.UpdateCustomerInput) int
		UpdatePlot        func(childComplexity int, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) int
		UpdateProject     func(childComplexity int, id xid.ID, input ent.UpdateProjectInput) int
		UpdateTender      func(childComplexity int, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64, imageFileNames []string, removeImageFileNames []string, attachmentFileNames []string, removeAttachmentFileNames []string, geoCoordinate []float64) int
		UpdateUser        func(childComplexity int, id xid.ID, input ent.UpdateUserInput) int
		UpdateVisitRecord func(childComplexity int, id xid.ID, input ent.UpdateVisitRecordInput) int
	}

	Operation struct {
		CjeLj     func(childComplexity int) int
		CjeYs     func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		XjlLj     func(childComplexity int) int
		XjlYs     func(childComplexity int) int
		Xmglf     func(childComplexity int) int
		Xmsjf     func(childComplexity int) int
		YyeLj     func(childComplexity int) int
		YyeYs     func(childComplexity int) int
	}

	OperationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OperationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	POI struct {
		Address  func(childComplexity int) int
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Plot struct {
		ColorHex   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		District   func(childComplexity int) int
		DistrictID func(childComplexity int) int
		GeoBounds  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	PlotConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PlotEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PotentialTender struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	PotentialTenderConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PotentialTenderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Project struct {
		AccumulatedNonStatutoryDeductions       func(childComplexity int) int
		AccumulatedNonStatutoryDeductionsPeriod func(childComplexity int) int
		AccumulatedStatutoryDeductions          func(childComplexity int) int
		AccumulatedStatutoryDeductionsPeriod    func(childComplexity int) int
		AluminumBudgetPercentage                func(childComplexity int) int
		AluminumPlateBudgetPercentage           func(childComplexity int) int
		Areas                                   func(childComplexity int) int
		BulkMaterialsCompletedQuantity          func(childComplexity int) int
		BulkMaterialsTotalOrderQuantity         func(childComplexity int) int
		BulkMaterialsUncompletedQuantity        func(childComplexity int) int
		Cje                                     func(childComplexity int) int
		Code                                    func(childComplexity int) int
		ConType                                 func(childComplexity int) int
		Consultant                              func(childComplexity int) int
		ContractorApplyAmount                   func(childComplexity int) int
		ContractorApplyCount                    func(childComplexity int) int
		ContractorApproveAmount                 func(childComplexity int) int
		ContractorApproveCount                  func(childComplexity int) int
		CreatedAt                               func(childComplexity int) int
		DesignRatedWeight                       func(childComplexity int) int
		DiagramBdFinishCount                    func(childComplexity int) int
		DiagramBdTotalCount                     func(childComplexity int) int
		DiagramCApprovalRatioDenominator        func(childComplexity int) int
		DiagramCApprovalRatioNumerator          func(childComplexity int) int
		DiagramConstructionFinishCount          func(childComplexity int) int
		DiagramConstructionTotalCount           func(childComplexity int) int
		DiagramProcessingFinishCount            func(childComplexity int) int
		DiagramProcessingTotalCount             func(childComplexity int) int
		EffectiveContractAmount                 func(childComplexity int) int
		EndDate                                 func(childComplexity int) int
		FsDate                                  func(childComplexity int) int
		GlassBudgetPercentage                   func(childComplexity int) int
		ID                                      func(childComplexity int) int
		InstallProgress                         func(childComplexity int) int
		IronBudgetPercentage                    func(childComplexity int) int
		IsFinished                              func(childComplexity int) int
		ItemStockWeight                         func(childComplexity int) int
		Jzs                                     func(childComplexity int) int
		Manager                                 func(childComplexity int) int
		MaterialLoss                            func(childComplexity int) int
		Mcn                                     func(childComplexity int) int
		MilestoneDoneMonth                      func(childComplexity int) int
		MilestoneDoneYear                       func(childComplexity int) int
		MilestonePlanMonth                      func(childComplexity int) int
		MilestonePlanYear                       func(childComplexity int) int
		Mntyr                                   func(childComplexity int) int
		Name                                    func(childComplexity int) int
		OpDate                                  func(childComplexity int) int
		Owner                                   func(childComplexity int) int
		OwnerApplyAmount                        func(childComplexity int) int
		OwnerApplyCount                         func(childComplexity int) int
		OwnerApproveAmount                      func(childComplexity int) int
		OwnerApproveCount                       func(childComplexity int) int
		PalletsInStock                          func(childComplexity int) int
		PartsInStock                            func(childComplexity int) int
		PlanOverdueCount                        func(childComplexity int) int
		PlanOverdueMonthCount                   func(childComplexity int) int
		PlanTotalCount                          func(childComplexity int) int
		PmArea                                  func(childComplexity int) int
		PmMonthActual                           func(childComplexity int) int
		PmMonthTarget                           func(childComplexity int) int
		PmTotal                                 func(childComplexity int) int
		PmYearActual                            func(childComplexity int) int
		PmYearTarget                            func(childComplexity int) int
		PmYesterday                             func(childComplexity int) int
		ProcessingWeight                        func(childComplexity int) int
		ProjectStaffs                           func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectStaffOrder, where *ent.ProjectStaffWhereInput) int
		QualityRanking                          func(childComplexity int) int
		QualityScore                            func(childComplexity int) int
		StartDate                               func(childComplexity int) int
		TotalContractAmount                     func(childComplexity int) int
		UnitComponentInstallation               func(childComplexity int) int
		UnitComponentProduction                 func(childComplexity int) int
		UnitComponentTotal                      func(childComplexity int) int
		UnitInventoryTotal                      func(childComplexity int) int
		UpdatedAt                               func(childComplexity int) int
		Users                                   func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
		VaApplyAmount                           func(childComplexity int) int
		VaApproveAmount                         func(childComplexity int) int
		Vos                                     func(childComplexity int) int
		Xjl                                     func(childComplexity int) int
		Xmfzr                                   func(childComplexity int) int
		XmglfLj                                 func(childComplexity int) int
		XmglfYs                                 func(childComplexity int) int
		Xmsjf                                   func(childComplexity int) int
		Yye                                     func(childComplexity int) int
	}

	ProjectConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProjectStaff struct {
		CreatedAt    func(childComplexity int) int
		Cym          func(childComplexity int) int
		Design       func(childComplexity int) int
		ID           func(childComplexity int) int
		Installation func(childComplexity int) int
		Management   func(childComplexity int) int
		Project      func(childComplexity int) int
		ProjectID    func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	ProjectStaffConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProjectStaffEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProjectVO struct {
		ApplyAmount   func(childComplexity int) int
		ApproveAmount func(childComplexity int) int
		Azjd          func(childComplexity int) int
		ChangeType    func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		IsApproved    func(childComplexity int) int
		Project       func(childComplexity int) int
		ProjectID     func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Yxhyze        func(childComplexity int) int
	}

	Province struct {
		Adcode    func(childComplexity int) int
		Area      func(childComplexity int) int
		AreaID    func(childComplexity int) int
		Center    func(childComplexity int) int
		Cities    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CityOrder, where *ent.CityWhereInput) int
		Country   func(childComplexity int) int
		CountryID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Districts func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.DistrictOrder, where *ent.DistrictWhereInput) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Tenders   func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt func(childComplexity int) int
	}

	ProvinceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProvinceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		AmapRegeo        func(childComplexity int, lng float64, lat float64) int
		Areas            func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.AreaOrder, where *ent.AreaWhereInput) int
		BiToken          func(childComplexity int) int
		Cities           func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CityOrder, where *ent.CityWhereInput) int
		Competitors      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CompetitorOrder, where *ent.CompetitorWhereInput) int
		Countries        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CountryOrder, where *ent.CountryWhereInput) int
		Customers        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CustomerOrder, where *ent.CustomerWhereInput) int
		Districts        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.DistrictOrder, where *ent.DistrictWhereInput) int
		Inputtips        func(childComplexity int, areaID xid.ID, keyword string) int
		Node             func(childComplexity int, id xid.ID) int
		Nodes            func(childComplexity int, ids []xid.ID) int
		Operations       func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.OperationOrder, where *ent.OperationWhereInput) int
		Plots            func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.PlotOrder, where *ent.PlotWhereInput) int
		PotentialTenders func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.PotentialTenderOrder, where *ent.PotentialTenderWhereInput) int
		ProjectStaffs    func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectStaffOrder, where *ent.ProjectStaffWhereInput) int
		Projects         func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectOrder, where *ent.ProjectWhereInput) int
		Provinces        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.ProvinceOrder, where *ent.ProvinceWhereInput) int
		SearchFeishuUser func(childComplexity int, keyword string) int
		SearchLocation   func(childComplexity int, keyword string) int
		Session          func(childComplexity int) int
		Tenders          func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		TopCompetitors   func(childComplexity int, first *int) int
		Users            func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
		VisitRecords     func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) int
	}

	Session struct {
		AvatarURL     func(childComplexity int) int
		Email         func(childComplexity int) int
		HasEditAccess func(childComplexity int) int
		HasMapAccess  func(childComplexity int) int
		IsAdmin       func(childComplexity int) int
		IsCeo         func(childComplexity int) int
		IsSuperAdmin  func(childComplexity int) int
		Name          func(childComplexity int) int
		UserID        func(childComplexity int) int
		Username      func(childComplexity int) int
	}

	Tender struct {
		Address                              func(childComplexity int) int
		Approver                             func(childComplexity int) int
		ApproverID                           func(childComplexity int) int
		Architect                            func(childComplexity int) int
		Area                                 func(childComplexity int) int
		AreaID                               func(childComplexity int) int
		Attachements                         func(childComplexity int) int
		BiddingDate                          func(childComplexity int) int
		BiddingInstructions                  func(childComplexity int) int
		City                                 func(childComplexity int) int
		CityID                               func(childComplexity int) int
		Classify                             func(childComplexity int) int
		Code                                 func(childComplexity int) int
		CompetitivePartnershipRating         func(childComplexity int) int
		CompetitivePartnershipRatingOverview func(childComplexity int) int
		Competitor                           func(childComplexity int) int
		CompetitorID                         func(childComplexity int) int
		CompetitorSituations                 func(childComplexity int) int
		ConstructionArea                     func(childComplexity int) int
		ConsultingFirm                       func(childComplexity int) int
		ContractForm                         func(childComplexity int) int
		Contractor                           func(childComplexity int) int
		CostEngineer                         func(childComplexity int) int
		CreatedAt                            func(childComplexity int) int
		CreatedBy                            func(childComplexity int) int
		CreatedByID                          func(childComplexity int) int
		CreditAndPaymentRating               func(childComplexity int) int
		CreditAndPaymentRatingOverview       func(childComplexity int) int
		CurrentProgress                      func(childComplexity int) int
		Customer                             func(childComplexity int) int
		CustomerID                           func(childComplexity int) int
		CustomerRelationshipRating           func(childComplexity int) int
		CustomerRelationshipRatingOverview   func(childComplexity int) int
		DesignUnit                           func(childComplexity int) int
		Developer                            func(childComplexity int) int
		DiscoveryDate                        func(childComplexity int) int
		District                             func(childComplexity int) int
		DistrictID                           func(childComplexity int) int
		EstimatedAmount                      func(childComplexity int) int
		EstimatedProjectEndDate              func(childComplexity int) int
		EstimatedProjectStartDate            func(childComplexity int) int
		FacadeConsultant                     func(childComplexity int) int
		Finder                               func(childComplexity int) int
		FinderID                             func(childComplexity int) int
		FollowingSales                       func(childComplexity int) int
		FullAddress                          func(childComplexity int) int
		GeoBounds                            func(childComplexity int) int
		GeoCoordinate                        func(childComplexity int) int
		ID                                   func(childComplexity int) int
		Images                               func(childComplexity int) int
		IsApproved                           func(childComplexity int) int
		KeyProject                           func(childComplexity int) int
		LastTenderAmount                     func(childComplexity int) int
		LevelInvolved                        func(childComplexity int) int
		ManagementCompany                    func(childComplexity int) int
		Name                                 func(childComplexity int) int
		OwnerSituations                      func(childComplexity int) int
		PrepareToBid                         func(childComplexity int) int
		ProjectCode                          func(childComplexity int) int
		ProjectDefinition                    func(childComplexity int) int
		ProjectType                          func(childComplexity int) int
		Province                             func(childComplexity int) int
		ProvinceID                           func(childComplexity int) int
		Remark                               func(childComplexity int) int
		SizeAndValueRating                   func(childComplexity int) int
		SizeAndValueRatingOverview           func(childComplexity int) int
		Status                               func(childComplexity int) int
		TenderClosingDate                    func(childComplexity int) int
		TenderCode                           func(childComplexity int) int
		TenderDate                           func(childComplexity int) int
		TenderForm                           func(childComplexity int) int
		TenderSituations                     func(childComplexity int) int
		TenderWinAmount                      func(childComplexity int) int
		TenderWinCompany                     func(childComplexity int) int
		TenderWinDate                        func(childComplexity int) int
		TenderingAgency                      func(childComplexity int) int
		TimeLimitRating                      func(childComplexity int) int
		TimeLimitRatingOverview              func(childComplexity int) int
		UpdatedAt                            func(childComplexity int) int
		VisitRecords                         func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) int
	}

	TenderConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TenderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TopCompetitor struct {
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		ShortName       func(childComplexity int) int
		WonTendersCount func(childComplexity int) int
	}

	User struct {
		Areas          func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.AreaOrder, where *ent.AreaWhereInput) int
		AvatarURL      func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Customers      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CustomerOrder, where *ent.CustomerWhereInput) int
		Disabled       func(childComplexity int) int
		Email          func(childComplexity int) int
		HasEditAccess  func(childComplexity int) int
		HasMapAccess   func(childComplexity int) int
		ID             func(childComplexity int) int
		IsAdmin        func(childComplexity int) int
		IsCeo          func(childComplexity int) int
		IsSuperAdmin   func(childComplexity int) int
		Leader         func(childComplexity int) int
		LeaderID       func(childComplexity int) int
		MyTenders      func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		MyVisitRecords func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) int
		Name           func(childComplexity int) int
		OpenID         func(childComplexity int) int
		Projects       func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectOrder, where *ent.ProjectWhereInput) int
		TeamMembers    func(childComplexity int) int
		Tenders        func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) int
		UpdatedAt      func(childComplexity int) int
		Username       func(childComplexity int) int
		VisitRecords   func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	VisitRecord struct {
		CommContent func(childComplexity int) int
		CommPeople  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Customer    func(childComplexity int) int
		CustomerID  func(childComplexity int) int
		Date        func(childComplexity int) int
		FollowUpBys func(childComplexity int, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
		ID          func(childComplexity int) int
		NextStep    func(childComplexity int) int
		Tender      func(childComplexity int) int
		TenderID    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		VisitType   func(childComplexity int) int
	}

	VisitRecordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	VisitRecordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Area.center":
		if e.complexity.Area.Center == nil {
			break
		}

		return e.complexity.Area.Center(childComplexity), true

	case "Area.code":
		if e.complexity.Area.Code == nil {
			break
		}

		return e.complexity.Area.Code(childComplexity), true

	case "Area.createdAt":
		if e.complexity.Area.CreatedAt == nil {
			break
		}

		return e.complexity.Area.CreatedAt(childComplexity), true

	case "Area.customers":
		if e.complexity.Area.Customers == nil {
			break
		}

		args, err := ec.field_Area_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Area.Customers(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.CustomerOrder), args["where"].(*ent.CustomerWhereInput)), true

	case "Area.id":
		if e.complexity.Area.ID == nil {
			break
		}

		return e.complexity.Area.ID(childComplexity), true

	case "Area.leaderChatID":
		if e.complexity.Area.LeaderChatID == nil {
			break
		}

		return e.complexity.Area.LeaderChatID(childComplexity), true

	case "Area.name":
		if e.complexity.Area.Name == nil {
			break
		}

		return e.complexity.Area.Name(childComplexity), true

	case "Area.provinces":
		if e.complexity.Area.Provinces == nil {
			break
		}

		args, err := ec.field_Area_provinces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Area.Provinces(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.ProvinceOrder), args["where"].(*ent.ProvinceWhereInput)), true

	case "Area.salesChatID":
		if e.complexity.Area.SalesChatID == nil {
			break
		}

		return e.complexity.Area.SalesChatID(childComplexity), true

	case "Area.tenders":
		if e.complexity.Area.Tenders == nil {
			break
		}

		args, err := ec.field_Area_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Area.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "Area.updatedAt":
		if e.complexity.Area.UpdatedAt == nil {
			break
		}

		return e.complexity.Area.UpdatedAt(childComplexity), true

	case "Area.users":
		if e.complexity.Area.Users == nil {
			break
		}

		args, err := ec.field_Area_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Area.Users(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "AreaConnection.edges":
		if e.complexity.AreaConnection.Edges == nil {
			break
		}

		return e.complexity.AreaConnection.Edges(childComplexity), true

	case "AreaConnection.pageInfo":
		if e.complexity.AreaConnection.PageInfo == nil {
			break
		}

		return e.complexity.AreaConnection.PageInfo(childComplexity), true

	case "AreaConnection.totalCount":
		if e.complexity.AreaConnection.TotalCount == nil {
			break
		}

		return e.complexity.AreaConnection.TotalCount(childComplexity), true

	case "AreaEdge.cursor":
		if e.complexity.AreaEdge.Cursor == nil {
			break
		}

		return e.complexity.AreaEdge.Cursor(childComplexity), true

	case "AreaEdge.node":
		if e.complexity.AreaEdge.Node == nil {
			break
		}

		return e.complexity.AreaEdge.Node(childComplexity), true

	case "City.adcode":
		if e.complexity.City.Adcode == nil {
			break
		}

		return e.complexity.City.Adcode(childComplexity), true

	case "City.center":
		if e.complexity.City.Center == nil {
			break
		}

		return e.complexity.City.Center(childComplexity), true

	case "City.createdAt":
		if e.complexity.City.CreatedAt == nil {
			break
		}

		return e.complexity.City.CreatedAt(childComplexity), true

	case "City.districts":
		if e.complexity.City.Districts == nil {
			break
		}

		args, err := ec.field_City_districts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.City.Districts(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.DistrictOrder), args["where"].(*ent.DistrictWhereInput)), true

	case "City.id":
		if e.complexity.City.ID == nil {
			break
		}

		return e.complexity.City.ID(childComplexity), true

	case "City.name":
		if e.complexity.City.Name == nil {
			break
		}

		return e.complexity.City.Name(childComplexity), true

	case "City.provCode":
		if e.complexity.City.ProvCode == nil {
			break
		}

		return e.complexity.City.ProvCode(childComplexity), true

	case "City.province":
		if e.complexity.City.Province == nil {
			break
		}

		return e.complexity.City.Province(childComplexity), true

	case "City.provinceID":
		if e.complexity.City.ProvinceID == nil {
			break
		}

		return e.complexity.City.ProvinceID(childComplexity), true

	case "City.tenders":
		if e.complexity.City.Tenders == nil {
			break
		}

		args, err := ec.field_City_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.City.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "City.updatedAt":
		if e.complexity.City.UpdatedAt == nil {
			break
		}

		return e.complexity.City.UpdatedAt(childComplexity), true

	case "CityConnection.edges":
		if e.complexity.CityConnection.Edges == nil {
			break
		}

		return e.complexity.CityConnection.Edges(childComplexity), true

	case "CityConnection.pageInfo":
		if e.complexity.CityConnection.PageInfo == nil {
			break
		}

		return e.complexity.CityConnection.PageInfo(childComplexity), true

	case "CityConnection.totalCount":
		if e.complexity.CityConnection.TotalCount == nil {
			break
		}

		return e.complexity.CityConnection.TotalCount(childComplexity), true

	case "CityEdge.cursor":
		if e.complexity.CityEdge.Cursor == nil {
			break
		}

		return e.complexity.CityEdge.Cursor(childComplexity), true

	case "CityEdge.node":
		if e.complexity.CityEdge.Node == nil {
			break
		}

		return e.complexity.CityEdge.Node(childComplexity), true

	case "Competitor.createdAt":
		if e.complexity.Competitor.CreatedAt == nil {
			break
		}

		return e.complexity.Competitor.CreatedAt(childComplexity), true

	case "Competitor.id":
		if e.complexity.Competitor.ID == nil {
			break
		}

		return e.complexity.Competitor.ID(childComplexity), true

	case "Competitor.name":
		if e.complexity.Competitor.Name == nil {
			break
		}

		return e.complexity.Competitor.Name(childComplexity), true

	case "Competitor.shortName":
		if e.complexity.Competitor.ShortName == nil {
			break
		}

		return e.complexity.Competitor.ShortName(childComplexity), true

	case "Competitor.updatedAt":
		if e.complexity.Competitor.UpdatedAt == nil {
			break
		}

		return e.complexity.Competitor.UpdatedAt(childComplexity), true

	case "Competitor.wonTenders":
		if e.complexity.Competitor.WonTenders == nil {
			break
		}

		args, err := ec.field_Competitor_wonTenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Competitor.WonTenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "CompetitorConnection.edges":
		if e.complexity.CompetitorConnection.Edges == nil {
			break
		}

		return e.complexity.CompetitorConnection.Edges(childComplexity), true

	case "CompetitorConnection.pageInfo":
		if e.complexity.CompetitorConnection.PageInfo == nil {
			break
		}

		return e.complexity.CompetitorConnection.PageInfo(childComplexity), true

	case "CompetitorConnection.totalCount":
		if e.complexity.CompetitorConnection.TotalCount == nil {
			break
		}

		return e.complexity.CompetitorConnection.TotalCount(childComplexity), true

	case "CompetitorEdge.cursor":
		if e.complexity.CompetitorEdge.Cursor == nil {
			break
		}

		return e.complexity.CompetitorEdge.Cursor(childComplexity), true

	case "CompetitorEdge.node":
		if e.complexity.CompetitorEdge.Node == nil {
			break
		}

		return e.complexity.CompetitorEdge.Node(childComplexity), true

	case "Country.adcode":
		if e.complexity.Country.Adcode == nil {
			break
		}

		return e.complexity.Country.Adcode(childComplexity), true

	case "Country.center":
		if e.complexity.Country.Center == nil {
			break
		}

		return e.complexity.Country.Center(childComplexity), true

	case "Country.createdAt":
		if e.complexity.Country.CreatedAt == nil {
			break
		}

		return e.complexity.Country.CreatedAt(childComplexity), true

	case "Country.id":
		if e.complexity.Country.ID == nil {
			break
		}

		return e.complexity.Country.ID(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.provinces":
		if e.complexity.Country.Provinces == nil {
			break
		}

		args, err := ec.field_Country_provinces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Country.Provinces(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.ProvinceOrder), args["where"].(*ent.ProvinceWhereInput)), true

	case "Country.updatedAt":
		if e.complexity.Country.UpdatedAt == nil {
			break
		}

		return e.complexity.Country.UpdatedAt(childComplexity), true

	case "CountryConnection.edges":
		if e.complexity.CountryConnection.Edges == nil {
			break
		}

		return e.complexity.CountryConnection.Edges(childComplexity), true

	case "CountryConnection.pageInfo":
		if e.complexity.CountryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CountryConnection.PageInfo(childComplexity), true

	case "CountryConnection.totalCount":
		if e.complexity.CountryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CountryConnection.TotalCount(childComplexity), true

	case "CountryEdge.cursor":
		if e.complexity.CountryEdge.Cursor == nil {
			break
		}

		return e.complexity.CountryEdge.Cursor(childComplexity), true

	case "CountryEdge.node":
		if e.complexity.CountryEdge.Node == nil {
			break
		}

		return e.complexity.CountryEdge.Node(childComplexity), true

	case "Customer.approver":
		if e.complexity.Customer.Approver == nil {
			break
		}

		return e.complexity.Customer.Approver(childComplexity), true

	case "Customer.approverID":
		if e.complexity.Customer.ApproverID == nil {
			break
		}

		return e.complexity.Customer.ApproverID(childComplexity), true

	case "Customer.area":
		if e.complexity.Customer.Area == nil {
			break
		}

		return e.complexity.Customer.Area(childComplexity), true

	case "Customer.areaID":
		if e.complexity.Customer.AreaID == nil {
			break
		}

		return e.complexity.Customer.AreaID(childComplexity), true

	case "Customer.contactPerson":
		if e.complexity.Customer.ContactPerson == nil {
			break
		}

		return e.complexity.Customer.ContactPerson(childComplexity), true

	case "Customer.contactPersonEmail":
		if e.complexity.Customer.ContactPersonEmail == nil {
			break
		}

		return e.complexity.Customer.ContactPersonEmail(childComplexity), true

	case "Customer.contactPersonPhone":
		if e.complexity.Customer.ContactPersonPhone == nil {
			break
		}

		return e.complexity.Customer.ContactPersonPhone(childComplexity), true

	case "Customer.contactPersonPosition":
		if e.complexity.Customer.ContactPersonPosition == nil {
			break
		}

		return e.complexity.Customer.ContactPersonPosition(childComplexity), true

	case "Customer.createdAt":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.createdBy":
		if e.complexity.Customer.CreatedBy == nil {
			break
		}

		return e.complexity.Customer.CreatedBy(childComplexity), true

	case "Customer.createdByID":
		if e.complexity.Customer.CreatedByID == nil {
			break
		}

		return e.complexity.Customer.CreatedByID(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.industry":
		if e.complexity.Customer.Industry == nil {
			break
		}

		return e.complexity.Customer.Industry(childComplexity), true

	case "Customer.isApproved":
		if e.complexity.Customer.IsApproved == nil {
			break
		}

		return e.complexity.Customer.IsApproved(childComplexity), true

	case "Customer.name":
		if e.complexity.Customer.Name == nil {
			break
		}

		return e.complexity.Customer.Name(childComplexity), true

	case "Customer.ownerType":
		if e.complexity.Customer.OwnerType == nil {
			break
		}

		return e.complexity.Customer.OwnerType(childComplexity), true

	case "Customer.sales":
		if e.complexity.Customer.Sales == nil {
			break
		}

		return e.complexity.Customer.Sales(childComplexity), true

	case "Customer.salesID":
		if e.complexity.Customer.SalesID == nil {
			break
		}

		return e.complexity.Customer.SalesID(childComplexity), true

	case "Customer.size":
		if e.complexity.Customer.Size == nil {
			break
		}

		return e.complexity.Customer.Size(childComplexity), true

	case "Customer.tenders":
		if e.complexity.Customer.Tenders == nil {
			break
		}

		args, err := ec.field_Customer_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "Customer.updatedAt":
		if e.complexity.Customer.UpdatedAt == nil {
			break
		}

		return e.complexity.Customer.UpdatedAt(childComplexity), true

	case "Customer.visitRecords":
		if e.complexity.Customer.VisitRecords == nil {
			break
		}

		args, err := ec.field_Customer_visitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Customer.VisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.VisitRecordOrder), args["where"].(*ent.VisitRecordWhereInput)), true

	case "CustomerConnection.edges":
		if e.complexity.CustomerConnection.Edges == nil {
			break
		}

		return e.complexity.CustomerConnection.Edges(childComplexity), true

	case "CustomerConnection.pageInfo":
		if e.complexity.CustomerConnection.PageInfo == nil {
			break
		}

		return e.complexity.CustomerConnection.PageInfo(childComplexity), true

	case "CustomerConnection.totalCount":
		if e.complexity.CustomerConnection.TotalCount == nil {
			break
		}

		return e.complexity.CustomerConnection.TotalCount(childComplexity), true

	case "CustomerEdge.cursor":
		if e.complexity.CustomerEdge.Cursor == nil {
			break
		}

		return e.complexity.CustomerEdge.Cursor(childComplexity), true

	case "CustomerEdge.node":
		if e.complexity.CustomerEdge.Node == nil {
			break
		}

		return e.complexity.CustomerEdge.Node(childComplexity), true

	case "District.adcode":
		if e.complexity.District.Adcode == nil {
			break
		}

		return e.complexity.District.Adcode(childComplexity), true

	case "District.center":
		if e.complexity.District.Center == nil {
			break
		}

		return e.complexity.District.Center(childComplexity), true

	case "District.city":
		if e.complexity.District.City == nil {
			break
		}

		return e.complexity.District.City(childComplexity), true

	case "District.cityCode":
		if e.complexity.District.CityCode == nil {
			break
		}

		return e.complexity.District.CityCode(childComplexity), true

	case "District.cityID":
		if e.complexity.District.CityID == nil {
			break
		}

		return e.complexity.District.CityID(childComplexity), true

	case "District.createdAt":
		if e.complexity.District.CreatedAt == nil {
			break
		}

		return e.complexity.District.CreatedAt(childComplexity), true

	case "District.id":
		if e.complexity.District.ID == nil {
			break
		}

		return e.complexity.District.ID(childComplexity), true

	case "District.name":
		if e.complexity.District.Name == nil {
			break
		}

		return e.complexity.District.Name(childComplexity), true

	case "District.plots":
		if e.complexity.District.Plots == nil {
			break
		}

		args, err := ec.field_District_plots_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.District.Plots(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.PlotOrder), args["where"].(*ent.PlotWhereInput)), true

	case "District.provCode":
		if e.complexity.District.ProvCode == nil {
			break
		}

		return e.complexity.District.ProvCode(childComplexity), true

	case "District.province":
		if e.complexity.District.Province == nil {
			break
		}

		return e.complexity.District.Province(childComplexity), true

	case "District.provinceID":
		if e.complexity.District.ProvinceID == nil {
			break
		}

		return e.complexity.District.ProvinceID(childComplexity), true

	case "District.tenders":
		if e.complexity.District.Tenders == nil {
			break
		}

		args, err := ec.field_District_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.District.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "District.updatedAt":
		if e.complexity.District.UpdatedAt == nil {
			break
		}

		return e.complexity.District.UpdatedAt(childComplexity), true

	case "DistrictConnection.edges":
		if e.complexity.DistrictConnection.Edges == nil {
			break
		}

		return e.complexity.DistrictConnection.Edges(childComplexity), true

	case "DistrictConnection.pageInfo":
		if e.complexity.DistrictConnection.PageInfo == nil {
			break
		}

		return e.complexity.DistrictConnection.PageInfo(childComplexity), true

	case "DistrictConnection.totalCount":
		if e.complexity.DistrictConnection.TotalCount == nil {
			break
		}

		return e.complexity.DistrictConnection.TotalCount(childComplexity), true

	case "DistrictEdge.cursor":
		if e.complexity.DistrictEdge.Cursor == nil {
			break
		}

		return e.complexity.DistrictEdge.Cursor(childComplexity), true

	case "DistrictEdge.node":
		if e.complexity.DistrictEdge.Node == nil {
			break
		}

		return e.complexity.DistrictEdge.Node(childComplexity), true

	case "FeishuUser.avatarUrl":
		if e.complexity.FeishuUser.AvatarURL == nil {
			break
		}

		return e.complexity.FeishuUser.AvatarURL(childComplexity), true

	case "FeishuUser.email":
		if e.complexity.FeishuUser.Email == nil {
			break
		}

		return e.complexity.FeishuUser.Email(childComplexity), true

	case "FeishuUser.name":
		if e.complexity.FeishuUser.Name == nil {
			break
		}

		return e.complexity.FeishuUser.Name(childComplexity), true

	case "FeishuUser.openId":
		if e.complexity.FeishuUser.OpenID == nil {
			break
		}

		return e.complexity.FeishuUser.OpenID(childComplexity), true

	case "GeoJson.coordinates":
		if e.complexity.GeoJson.Coordinates == nil {
			break
		}

		return e.complexity.GeoJson.Coordinates(childComplexity), true

	case "GeoJson.type":
		if e.complexity.GeoJson.Type == nil {
			break
		}

		return e.complexity.GeoJson.Type(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true

	case "Location.city":
		if e.complexity.Location.City == nil {
			break
		}

		return e.complexity.Location.City(childComplexity), true

	case "Location.district":
		if e.complexity.Location.District == nil {
			break
		}

		return e.complexity.Location.District(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.lat":
		if e.complexity.Location.Lat == nil {
			break
		}

		return e.complexity.Location.Lat(childComplexity), true

	case "Location.lng":
		if e.complexity.Location.Lng == nil {
			break
		}

		return e.complexity.Location.Lng(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Location.province":
		if e.complexity.Location.Province == nil {
			break
		}

		return e.complexity.Location.Province(childComplexity), true

	case "Mutation.createArea":
		if e.complexity.Mutation.CreateArea == nil {
			break
		}

		args, err := ec.field_Mutation_createArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateArea(childComplexity, args["input"].(ent.CreateAreaInput)), true

	case "Mutation.createCompetitor":
		if e.complexity.Mutation.CreateCompetitor == nil {
			break
		}

		args, err := ec.field_Mutation_createCompetitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompetitor(childComplexity, args["input"].(ent.CreateCompetitorInput)), true

	case "Mutation.createCustomer":
		if e.complexity.Mutation.CreateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomer(childComplexity, args["input"].(ent.CreateCustomerInput)), true

	case "Mutation.createPlot":
		if e.complexity.Mutation.CreatePlot == nil {
			break
		}

		args, err := ec.field_Mutation_createPlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlot(childComplexity, args["input"].(ent.CreatePlotInput), args["geoBounds"].([][]float64)), true

	case "Mutation.createTender":
		if e.complexity.Mutation.CreateTender == nil {
			break
		}

		args, err := ec.field_Mutation_createTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTender(childComplexity, args["input"].(ent.CreateTenderInput), args["geoBounds"].([][]float64), args["imageFileNames"].([]string), args["attachmentFileNames"].([]string), args["geoCoordinate"].([]float64)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(ent.CreateUserInput)), true

	case "Mutation.createVisitRecord":
		if e.complexity.Mutation.CreateVisitRecord == nil {
			break
		}

		args, err := ec.field_Mutation_createVisitRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVisitRecord(childComplexity, args["input"].(ent.CreateVisitRecordInput)), true

	case "Mutation.deleteCompetitor":
		if e.complexity.Mutation.DeleteCompetitor == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompetitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompetitor(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deleteCustomer":
		if e.complexity.Mutation.DeleteCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCustomer(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deletePlot":
		if e.complexity.Mutation.DeletePlot == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlot(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deleteTender":
		if e.complexity.Mutation.DeleteTender == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTender(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.deleteVisitRecord":
		if e.complexity.Mutation.DeleteVisitRecord == nil {
			break
		}

		args, err := ec.field_Mutation_deleteVisitRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVisitRecord(childComplexity, args["id"].(xid.ID)), true

	case "Mutation.updateArea":
		if e.complexity.Mutation.UpdateArea == nil {
			break
		}

		args, err := ec.field_Mutation_updateArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateArea(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateAreaInput)), true

	case "Mutation.updateCompetitor":
		if e.complexity.Mutation.UpdateCompetitor == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompetitor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompetitor(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateCompetitorInput)), true

	case "Mutation.updateCustomer":
		if e.complexity.Mutation.UpdateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomer(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateCustomerInput)), true

	case "Mutation.updatePlot":
		if e.complexity.Mutation.UpdatePlot == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlot(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdatePlotInput), args["geoBounds"].([][]float64)), true

	case "Mutation.updateProject":
		if e.complexity.Mutation.UpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_updateProject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProject(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateProjectInput)), true

	case "Mutation.updateTender":
		if e.complexity.Mutation.UpdateTender == nil {
			break
		}

		args, err := ec.field_Mutation_updateTender_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTender(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateTenderInput), args["geoBounds"].([][]float64), args["imageFileNames"].([]string), args["removeImageFileNames"].([]string), args["attachmentFileNames"].([]string), args["removeAttachmentFileNames"].([]string), args["geoCoordinate"].([]float64)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateUserInput)), true

	case "Mutation.updateVisitRecord":
		if e.complexity.Mutation.UpdateVisitRecord == nil {
			break
		}

		args, err := ec.field_Mutation_updateVisitRecord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVisitRecord(childComplexity, args["id"].(xid.ID), args["input"].(ent.UpdateVisitRecordInput)), true

	case "Operation.cjeLj":
		if e.complexity.Operation.CjeLj == nil {
			break
		}

		return e.complexity.Operation.CjeLj(childComplexity), true

	case "Operation.cjeYs":
		if e.complexity.Operation.CjeYs == nil {
			break
		}

		return e.complexity.Operation.CjeYs(childComplexity), true

	case "Operation.createdAt":
		if e.complexity.Operation.CreatedAt == nil {
			break
		}

		return e.complexity.Operation.CreatedAt(childComplexity), true

	case "Operation.id":
		if e.complexity.Operation.ID == nil {
			break
		}

		return e.complexity.Operation.ID(childComplexity), true

	case "Operation.updatedAt":
		if e.complexity.Operation.UpdatedAt == nil {
			break
		}

		return e.complexity.Operation.UpdatedAt(childComplexity), true

	case "Operation.xjlLj":
		if e.complexity.Operation.XjlLj == nil {
			break
		}

		return e.complexity.Operation.XjlLj(childComplexity), true

	case "Operation.xjlYs":
		if e.complexity.Operation.XjlYs == nil {
			break
		}

		return e.complexity.Operation.XjlYs(childComplexity), true

	case "Operation.xmglf":
		if e.complexity.Operation.Xmglf == nil {
			break
		}

		return e.complexity.Operation.Xmglf(childComplexity), true

	case "Operation.xmsjf":
		if e.complexity.Operation.Xmsjf == nil {
			break
		}

		return e.complexity.Operation.Xmsjf(childComplexity), true

	case "Operation.yyeLj":
		if e.complexity.Operation.YyeLj == nil {
			break
		}

		return e.complexity.Operation.YyeLj(childComplexity), true

	case "Operation.yyeYs":
		if e.complexity.Operation.YyeYs == nil {
			break
		}

		return e.complexity.Operation.YyeYs(childComplexity), true

	case "OperationConnection.edges":
		if e.complexity.OperationConnection.Edges == nil {
			break
		}

		return e.complexity.OperationConnection.Edges(childComplexity), true

	case "OperationConnection.pageInfo":
		if e.complexity.OperationConnection.PageInfo == nil {
			break
		}

		return e.complexity.OperationConnection.PageInfo(childComplexity), true

	case "OperationConnection.totalCount":
		if e.complexity.OperationConnection.TotalCount == nil {
			break
		}

		return e.complexity.OperationConnection.TotalCount(childComplexity), true

	case "OperationEdge.cursor":
		if e.complexity.OperationEdge.Cursor == nil {
			break
		}

		return e.complexity.OperationEdge.Cursor(childComplexity), true

	case "OperationEdge.node":
		if e.complexity.OperationEdge.Node == nil {
			break
		}

		return e.complexity.OperationEdge.Node(childComplexity), true

	case "POI.address":
		if e.complexity.POI.Address == nil {
			break
		}

		return e.complexity.POI.Address(childComplexity), true

	case "POI.id":
		if e.complexity.POI.ID == nil {
			break
		}

		return e.complexity.POI.ID(childComplexity), true

	case "POI.location":
		if e.complexity.POI.Location == nil {
			break
		}

		return e.complexity.POI.Location(childComplexity), true

	case "POI.name":
		if e.complexity.POI.Name == nil {
			break
		}

		return e.complexity.POI.Name(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Plot.colorHex":
		if e.complexity.Plot.ColorHex == nil {
			break
		}

		return e.complexity.Plot.ColorHex(childComplexity), true

	case "Plot.createdAt":
		if e.complexity.Plot.CreatedAt == nil {
			break
		}

		return e.complexity.Plot.CreatedAt(childComplexity), true

	case "Plot.district":
		if e.complexity.Plot.District == nil {
			break
		}

		return e.complexity.Plot.District(childComplexity), true

	case "Plot.districtID":
		if e.complexity.Plot.DistrictID == nil {
			break
		}

		return e.complexity.Plot.DistrictID(childComplexity), true

	case "Plot.geoBounds":
		if e.complexity.Plot.GeoBounds == nil {
			break
		}

		return e.complexity.Plot.GeoBounds(childComplexity), true

	case "Plot.id":
		if e.complexity.Plot.ID == nil {
			break
		}

		return e.complexity.Plot.ID(childComplexity), true

	case "Plot.name":
		if e.complexity.Plot.Name == nil {
			break
		}

		return e.complexity.Plot.Name(childComplexity), true

	case "Plot.updatedAt":
		if e.complexity.Plot.UpdatedAt == nil {
			break
		}

		return e.complexity.Plot.UpdatedAt(childComplexity), true

	case "PlotConnection.edges":
		if e.complexity.PlotConnection.Edges == nil {
			break
		}

		return e.complexity.PlotConnection.Edges(childComplexity), true

	case "PlotConnection.pageInfo":
		if e.complexity.PlotConnection.PageInfo == nil {
			break
		}

		return e.complexity.PlotConnection.PageInfo(childComplexity), true

	case "PlotConnection.totalCount":
		if e.complexity.PlotConnection.TotalCount == nil {
			break
		}

		return e.complexity.PlotConnection.TotalCount(childComplexity), true

	case "PlotEdge.cursor":
		if e.complexity.PlotEdge.Cursor == nil {
			break
		}

		return e.complexity.PlotEdge.Cursor(childComplexity), true

	case "PlotEdge.node":
		if e.complexity.PlotEdge.Node == nil {
			break
		}

		return e.complexity.PlotEdge.Node(childComplexity), true

	case "PotentialTender.createdAt":
		if e.complexity.PotentialTender.CreatedAt == nil {
			break
		}

		return e.complexity.PotentialTender.CreatedAt(childComplexity), true

	case "PotentialTender.id":
		if e.complexity.PotentialTender.ID == nil {
			break
		}

		return e.complexity.PotentialTender.ID(childComplexity), true

	case "PotentialTender.updatedAt":
		if e.complexity.PotentialTender.UpdatedAt == nil {
			break
		}

		return e.complexity.PotentialTender.UpdatedAt(childComplexity), true

	case "PotentialTenderConnection.edges":
		if e.complexity.PotentialTenderConnection.Edges == nil {
			break
		}

		return e.complexity.PotentialTenderConnection.Edges(childComplexity), true

	case "PotentialTenderConnection.pageInfo":
		if e.complexity.PotentialTenderConnection.PageInfo == nil {
			break
		}

		return e.complexity.PotentialTenderConnection.PageInfo(childComplexity), true

	case "PotentialTenderConnection.totalCount":
		if e.complexity.PotentialTenderConnection.TotalCount == nil {
			break
		}

		return e.complexity.PotentialTenderConnection.TotalCount(childComplexity), true

	case "PotentialTenderEdge.cursor":
		if e.complexity.PotentialTenderEdge.Cursor == nil {
			break
		}

		return e.complexity.PotentialTenderEdge.Cursor(childComplexity), true

	case "PotentialTenderEdge.node":
		if e.complexity.PotentialTenderEdge.Node == nil {
			break
		}

		return e.complexity.PotentialTenderEdge.Node(childComplexity), true

	case "Project.accumulatedNonStatutoryDeductions":
		if e.complexity.Project.AccumulatedNonStatutoryDeductions == nil {
			break
		}

		return e.complexity.Project.AccumulatedNonStatutoryDeductions(childComplexity), true

	case "Project.accumulatedNonStatutoryDeductionsPeriod":
		if e.complexity.Project.AccumulatedNonStatutoryDeductionsPeriod == nil {
			break
		}

		return e.complexity.Project.AccumulatedNonStatutoryDeductionsPeriod(childComplexity), true

	case "Project.accumulatedStatutoryDeductions":
		if e.complexity.Project.AccumulatedStatutoryDeductions == nil {
			break
		}

		return e.complexity.Project.AccumulatedStatutoryDeductions(childComplexity), true

	case "Project.accumulatedStatutoryDeductionsPeriod":
		if e.complexity.Project.AccumulatedStatutoryDeductionsPeriod == nil {
			break
		}

		return e.complexity.Project.AccumulatedStatutoryDeductionsPeriod(childComplexity), true

	case "Project.aluminumBudgetPercentage":
		if e.complexity.Project.AluminumBudgetPercentage == nil {
			break
		}

		return e.complexity.Project.AluminumBudgetPercentage(childComplexity), true

	case "Project.aluminumPlateBudgetPercentage":
		if e.complexity.Project.AluminumPlateBudgetPercentage == nil {
			break
		}

		return e.complexity.Project.AluminumPlateBudgetPercentage(childComplexity), true

	case "Project.areas":
		if e.complexity.Project.Areas == nil {
			break
		}

		return e.complexity.Project.Areas(childComplexity), true

	case "Project.bulkMaterialsCompletedQuantity":
		if e.complexity.Project.BulkMaterialsCompletedQuantity == nil {
			break
		}

		return e.complexity.Project.BulkMaterialsCompletedQuantity(childComplexity), true

	case "Project.bulkMaterialsTotalOrderQuantity":
		if e.complexity.Project.BulkMaterialsTotalOrderQuantity == nil {
			break
		}

		return e.complexity.Project.BulkMaterialsTotalOrderQuantity(childComplexity), true

	case "Project.bulkMaterialsUncompletedQuantity":
		if e.complexity.Project.BulkMaterialsUncompletedQuantity == nil {
			break
		}

		return e.complexity.Project.BulkMaterialsUncompletedQuantity(childComplexity), true

	case "Project.cje":
		if e.complexity.Project.Cje == nil {
			break
		}

		return e.complexity.Project.Cje(childComplexity), true

	case "Project.code":
		if e.complexity.Project.Code == nil {
			break
		}

		return e.complexity.Project.Code(childComplexity), true

	case "Project.conType":
		if e.complexity.Project.ConType == nil {
			break
		}

		return e.complexity.Project.ConType(childComplexity), true

	case "Project.consultant":
		if e.complexity.Project.Consultant == nil {
			break
		}

		return e.complexity.Project.Consultant(childComplexity), true

	case "Project.contractorApplyAmount":
		if e.complexity.Project.ContractorApplyAmount == nil {
			break
		}

		return e.complexity.Project.ContractorApplyAmount(childComplexity), true

	case "Project.contractorApplyCount":
		if e.complexity.Project.ContractorApplyCount == nil {
			break
		}

		return e.complexity.Project.ContractorApplyCount(childComplexity), true

	case "Project.contractorApproveAmount":
		if e.complexity.Project.ContractorApproveAmount == nil {
			break
		}

		return e.complexity.Project.ContractorApproveAmount(childComplexity), true

	case "Project.contractorApproveCount":
		if e.complexity.Project.ContractorApproveCount == nil {
			break
		}

		return e.complexity.Project.ContractorApproveCount(childComplexity), true

	case "Project.createdAt":
		if e.complexity.Project.CreatedAt == nil {
			break
		}

		return e.complexity.Project.CreatedAt(childComplexity), true

	case "Project.designRatedWeight":
		if e.complexity.Project.DesignRatedWeight == nil {
			break
		}

		return e.complexity.Project.DesignRatedWeight(childComplexity), true

	case "Project.diagramBdFinishCount":
		if e.complexity.Project.DiagramBdFinishCount == nil {
			break
		}

		return e.complexity.Project.DiagramBdFinishCount(childComplexity), true

	case "Project.diagramBdTotalCount":
		if e.complexity.Project.DiagramBdTotalCount == nil {
			break
		}

		return e.complexity.Project.DiagramBdTotalCount(childComplexity), true

	case "Project.diagramCApprovalRatioDenominator":
		if e.complexity.Project.DiagramCApprovalRatioDenominator == nil {
			break
		}

		return e.complexity.Project.DiagramCApprovalRatioDenominator(childComplexity), true

	case "Project.diagramCApprovalRatioNumerator":
		if e.complexity.Project.DiagramCApprovalRatioNumerator == nil {
			break
		}

		return e.complexity.Project.DiagramCApprovalRatioNumerator(childComplexity), true

	case "Project.diagramConstructionFinishCount":
		if e.complexity.Project.DiagramConstructionFinishCount == nil {
			break
		}

		return e.complexity.Project.DiagramConstructionFinishCount(childComplexity), true

	case "Project.diagramConstructionTotalCount":
		if e.complexity.Project.DiagramConstructionTotalCount == nil {
			break
		}

		return e.complexity.Project.DiagramConstructionTotalCount(childComplexity), true

	case "Project.diagramProcessingFinishCount":
		if e.complexity.Project.DiagramProcessingFinishCount == nil {
			break
		}

		return e.complexity.Project.DiagramProcessingFinishCount(childComplexity), true

	case "Project.diagramProcessingTotalCount":
		if e.complexity.Project.DiagramProcessingTotalCount == nil {
			break
		}

		return e.complexity.Project.DiagramProcessingTotalCount(childComplexity), true

	case "Project.effectiveContractAmount":
		if e.complexity.Project.EffectiveContractAmount == nil {
			break
		}

		return e.complexity.Project.EffectiveContractAmount(childComplexity), true

	case "Project.endDate":
		if e.complexity.Project.EndDate == nil {
			break
		}

		return e.complexity.Project.EndDate(childComplexity), true

	case "Project.fsDate":
		if e.complexity.Project.FsDate == nil {
			break
		}

		return e.complexity.Project.FsDate(childComplexity), true

	case "Project.glassBudgetPercentage":
		if e.complexity.Project.GlassBudgetPercentage == nil {
			break
		}

		return e.complexity.Project.GlassBudgetPercentage(childComplexity), true

	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true

	case "Project.installProgress":
		if e.complexity.Project.InstallProgress == nil {
			break
		}

		return e.complexity.Project.InstallProgress(childComplexity), true

	case "Project.ironBudgetPercentage":
		if e.complexity.Project.IronBudgetPercentage == nil {
			break
		}

		return e.complexity.Project.IronBudgetPercentage(childComplexity), true

	case "Project.isFinished":
		if e.complexity.Project.IsFinished == nil {
			break
		}

		return e.complexity.Project.IsFinished(childComplexity), true

	case "Project.itemStockWeight":
		if e.complexity.Project.ItemStockWeight == nil {
			break
		}

		return e.complexity.Project.ItemStockWeight(childComplexity), true

	case "Project.jzs":
		if e.complexity.Project.Jzs == nil {
			break
		}

		return e.complexity.Project.Jzs(childComplexity), true

	case "Project.manager":
		if e.complexity.Project.Manager == nil {
			break
		}

		return e.complexity.Project.Manager(childComplexity), true

	case "Project.materialLoss":
		if e.complexity.Project.MaterialLoss == nil {
			break
		}

		return e.complexity.Project.MaterialLoss(childComplexity), true

	case "Project.mcn":
		if e.complexity.Project.Mcn == nil {
			break
		}

		return e.complexity.Project.Mcn(childComplexity), true

	case "Project.milestoneDoneMonth":
		if e.complexity.Project.MilestoneDoneMonth == nil {
			break
		}

		return e.complexity.Project.MilestoneDoneMonth(childComplexity), true

	case "Project.milestoneDoneYear":
		if e.complexity.Project.MilestoneDoneYear == nil {
			break
		}

		return e.complexity.Project.MilestoneDoneYear(childComplexity), true

	case "Project.milestonePlanMonth":
		if e.complexity.Project.MilestonePlanMonth == nil {
			break
		}

		return e.complexity.Project.MilestonePlanMonth(childComplexity), true

	case "Project.milestonePlanYear":
		if e.complexity.Project.MilestonePlanYear == nil {
			break
		}

		return e.complexity.Project.MilestonePlanYear(childComplexity), true

	case "Project.mntyr":
		if e.complexity.Project.Mntyr == nil {
			break
		}

		return e.complexity.Project.Mntyr(childComplexity), true

	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true

	case "Project.opDate":
		if e.complexity.Project.OpDate == nil {
			break
		}

		return e.complexity.Project.OpDate(childComplexity), true

	case "Project.owner":
		if e.complexity.Project.Owner == nil {
			break
		}

		return e.complexity.Project.Owner(childComplexity), true

	case "Project.ownerApplyAmount":
		if e.complexity.Project.OwnerApplyAmount == nil {
			break
		}

		return e.complexity.Project.OwnerApplyAmount(childComplexity), true

	case "Project.ownerApplyCount":
		if e.complexity.Project.OwnerApplyCount == nil {
			break
		}

		return e.complexity.Project.OwnerApplyCount(childComplexity), true

	case "Project.ownerApproveAmount":
		if e.complexity.Project.OwnerApproveAmount == nil {
			break
		}

		return e.complexity.Project.OwnerApproveAmount(childComplexity), true

	case "Project.ownerApproveCount":
		if e.complexity.Project.OwnerApproveCount == nil {
			break
		}

		return e.complexity.Project.OwnerApproveCount(childComplexity), true

	case "Project.palletsInStock":
		if e.complexity.Project.PalletsInStock == nil {
			break
		}

		return e.complexity.Project.PalletsInStock(childComplexity), true

	case "Project.partsInStock":
		if e.complexity.Project.PartsInStock == nil {
			break
		}

		return e.complexity.Project.PartsInStock(childComplexity), true

	case "Project.planOverdueCount":
		if e.complexity.Project.PlanOverdueCount == nil {
			break
		}

		return e.complexity.Project.PlanOverdueCount(childComplexity), true

	case "Project.planOverdueMonthCount":
		if e.complexity.Project.PlanOverdueMonthCount == nil {
			break
		}

		return e.complexity.Project.PlanOverdueMonthCount(childComplexity), true

	case "Project.planTotalCount":
		if e.complexity.Project.PlanTotalCount == nil {
			break
		}

		return e.complexity.Project.PlanTotalCount(childComplexity), true

	case "Project.pmArea":
		if e.complexity.Project.PmArea == nil {
			break
		}

		return e.complexity.Project.PmArea(childComplexity), true

	case "Project.pmMonthActual":
		if e.complexity.Project.PmMonthActual == nil {
			break
		}

		return e.complexity.Project.PmMonthActual(childComplexity), true

	case "Project.pmMonthTarget":
		if e.complexity.Project.PmMonthTarget == nil {
			break
		}

		return e.complexity.Project.PmMonthTarget(childComplexity), true

	case "Project.pmTotal":
		if e.complexity.Project.PmTotal == nil {
			break
		}

		return e.complexity.Project.PmTotal(childComplexity), true

	case "Project.pmYearActual":
		if e.complexity.Project.PmYearActual == nil {
			break
		}

		return e.complexity.Project.PmYearActual(childComplexity), true

	case "Project.pmYearTarget":
		if e.complexity.Project.PmYearTarget == nil {
			break
		}

		return e.complexity.Project.PmYearTarget(childComplexity), true

	case "Project.pmYesterday":
		if e.complexity.Project.PmYesterday == nil {
			break
		}

		return e.complexity.Project.PmYesterday(childComplexity), true

	case "Project.processingWeight":
		if e.complexity.Project.ProcessingWeight == nil {
			break
		}

		return e.complexity.Project.ProcessingWeight(childComplexity), true

	case "Project.projectStaffs":
		if e.complexity.Project.ProjectStaffs == nil {
			break
		}

		args, err := ec.field_Project_projectStaffs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.ProjectStaffs(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.ProjectStaffOrder), args["where"].(*ent.ProjectStaffWhereInput)), true

	case "Project.qualityRanking":
		if e.complexity.Project.QualityRanking == nil {
			break
		}

		return e.complexity.Project.QualityRanking(childComplexity), true

	case "Project.qualityScore":
		if e.complexity.Project.QualityScore == nil {
			break
		}

		return e.complexity.Project.QualityScore(childComplexity), true

	case "Project.startDate":
		if e.complexity.Project.StartDate == nil {
			break
		}

		return e.complexity.Project.StartDate(childComplexity), true

	case "Project.totalContractAmount":
		if e.complexity.Project.TotalContractAmount == nil {
			break
		}

		return e.complexity.Project.TotalContractAmount(childComplexity), true

	case "Project.unitComponentInstallation":
		if e.complexity.Project.UnitComponentInstallation == nil {
			break
		}

		return e.complexity.Project.UnitComponentInstallation(childComplexity), true

	case "Project.unitComponentProduction":
		if e.complexity.Project.UnitComponentProduction == nil {
			break
		}

		return e.complexity.Project.UnitComponentProduction(childComplexity), true

	case "Project.unitComponentTotal":
		if e.complexity.Project.UnitComponentTotal == nil {
			break
		}

		return e.complexity.Project.UnitComponentTotal(childComplexity), true

	case "Project.unitInventoryTotal":
		if e.complexity.Project.UnitInventoryTotal == nil {
			break
		}

		return e.complexity.Project.UnitInventoryTotal(childComplexity), true

	case "Project.updatedAt":
		if e.complexity.Project.UpdatedAt == nil {
			break
		}

		return e.complexity.Project.UpdatedAt(childComplexity), true

	case "Project.users":
		if e.complexity.Project.Users == nil {
			break
		}

		args, err := ec.field_Project_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Project.Users(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "Project.vaApplyAmount":
		if e.complexity.Project.VaApplyAmount == nil {
			break
		}

		return e.complexity.Project.VaApplyAmount(childComplexity), true

	case "Project.vaApproveAmount":
		if e.complexity.Project.VaApproveAmount == nil {
			break
		}

		return e.complexity.Project.VaApproveAmount(childComplexity), true

	case "Project.vos":
		if e.complexity.Project.Vos == nil {
			break
		}

		return e.complexity.Project.Vos(childComplexity), true

	case "Project.xjl":
		if e.complexity.Project.Xjl == nil {
			break
		}

		return e.complexity.Project.Xjl(childComplexity), true

	case "Project.xmfzr":
		if e.complexity.Project.Xmfzr == nil {
			break
		}

		return e.complexity.Project.Xmfzr(childComplexity), true

	case "Project.xmglfLj":
		if e.complexity.Project.XmglfLj == nil {
			break
		}

		return e.complexity.Project.XmglfLj(childComplexity), true

	case "Project.xmglfYs":
		if e.complexity.Project.XmglfYs == nil {
			break
		}

		return e.complexity.Project.XmglfYs(childComplexity), true

	case "Project.xmsjf":
		if e.complexity.Project.Xmsjf == nil {
			break
		}

		return e.complexity.Project.Xmsjf(childComplexity), true

	case "Project.yye":
		if e.complexity.Project.Yye == nil {
			break
		}

		return e.complexity.Project.Yye(childComplexity), true

	case "ProjectConnection.edges":
		if e.complexity.ProjectConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectConnection.Edges(childComplexity), true

	case "ProjectConnection.pageInfo":
		if e.complexity.ProjectConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectConnection.PageInfo(childComplexity), true

	case "ProjectConnection.totalCount":
		if e.complexity.ProjectConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectConnection.TotalCount(childComplexity), true

	case "ProjectEdge.cursor":
		if e.complexity.ProjectEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectEdge.Cursor(childComplexity), true

	case "ProjectEdge.node":
		if e.complexity.ProjectEdge.Node == nil {
			break
		}

		return e.complexity.ProjectEdge.Node(childComplexity), true

	case "ProjectStaff.createdAt":
		if e.complexity.ProjectStaff.CreatedAt == nil {
			break
		}

		return e.complexity.ProjectStaff.CreatedAt(childComplexity), true

	case "ProjectStaff.cym":
		if e.complexity.ProjectStaff.Cym == nil {
			break
		}

		return e.complexity.ProjectStaff.Cym(childComplexity), true

	case "ProjectStaff.design":
		if e.complexity.ProjectStaff.Design == nil {
			break
		}

		return e.complexity.ProjectStaff.Design(childComplexity), true

	case "ProjectStaff.id":
		if e.complexity.ProjectStaff.ID == nil {
			break
		}

		return e.complexity.ProjectStaff.ID(childComplexity), true

	case "ProjectStaff.installation":
		if e.complexity.ProjectStaff.Installation == nil {
			break
		}

		return e.complexity.ProjectStaff.Installation(childComplexity), true

	case "ProjectStaff.management":
		if e.complexity.ProjectStaff.Management == nil {
			break
		}

		return e.complexity.ProjectStaff.Management(childComplexity), true

	case "ProjectStaff.project":
		if e.complexity.ProjectStaff.Project == nil {
			break
		}

		return e.complexity.ProjectStaff.Project(childComplexity), true

	case "ProjectStaff.projectID":
		if e.complexity.ProjectStaff.ProjectID == nil {
			break
		}

		return e.complexity.ProjectStaff.ProjectID(childComplexity), true

	case "ProjectStaff.updatedAt":
		if e.complexity.ProjectStaff.UpdatedAt == nil {
			break
		}

		return e.complexity.ProjectStaff.UpdatedAt(childComplexity), true

	case "ProjectStaffConnection.edges":
		if e.complexity.ProjectStaffConnection.Edges == nil {
			break
		}

		return e.complexity.ProjectStaffConnection.Edges(childComplexity), true

	case "ProjectStaffConnection.pageInfo":
		if e.complexity.ProjectStaffConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProjectStaffConnection.PageInfo(childComplexity), true

	case "ProjectStaffConnection.totalCount":
		if e.complexity.ProjectStaffConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProjectStaffConnection.TotalCount(childComplexity), true

	case "ProjectStaffEdge.cursor":
		if e.complexity.ProjectStaffEdge.Cursor == nil {
			break
		}

		return e.complexity.ProjectStaffEdge.Cursor(childComplexity), true

	case "ProjectStaffEdge.node":
		if e.complexity.ProjectStaffEdge.Node == nil {
			break
		}

		return e.complexity.ProjectStaffEdge.Node(childComplexity), true

	case "ProjectVO.applyAmount":
		if e.complexity.ProjectVO.ApplyAmount == nil {
			break
		}

		return e.complexity.ProjectVO.ApplyAmount(childComplexity), true

	case "ProjectVO.approveAmount":
		if e.complexity.ProjectVO.ApproveAmount == nil {
			break
		}

		return e.complexity.ProjectVO.ApproveAmount(childComplexity), true

	case "ProjectVO.azjd":
		if e.complexity.ProjectVO.Azjd == nil {
			break
		}

		return e.complexity.ProjectVO.Azjd(childComplexity), true

	case "ProjectVO.changeType":
		if e.complexity.ProjectVO.ChangeType == nil {
			break
		}

		return e.complexity.ProjectVO.ChangeType(childComplexity), true

	case "ProjectVO.createdAt":
		if e.complexity.ProjectVO.CreatedAt == nil {
			break
		}

		return e.complexity.ProjectVO.CreatedAt(childComplexity), true

	case "ProjectVO.id":
		if e.complexity.ProjectVO.ID == nil {
			break
		}

		return e.complexity.ProjectVO.ID(childComplexity), true

	case "ProjectVO.isApproved":
		if e.complexity.ProjectVO.IsApproved == nil {
			break
		}

		return e.complexity.ProjectVO.IsApproved(childComplexity), true

	case "ProjectVO.project":
		if e.complexity.ProjectVO.Project == nil {
			break
		}

		return e.complexity.ProjectVO.Project(childComplexity), true

	case "ProjectVO.projectID":
		if e.complexity.ProjectVO.ProjectID == nil {
			break
		}

		return e.complexity.ProjectVO.ProjectID(childComplexity), true

	case "ProjectVO.updatedAt":
		if e.complexity.ProjectVO.UpdatedAt == nil {
			break
		}

		return e.complexity.ProjectVO.UpdatedAt(childComplexity), true

	case "ProjectVO.yxhyze":
		if e.complexity.ProjectVO.Yxhyze == nil {
			break
		}

		return e.complexity.ProjectVO.Yxhyze(childComplexity), true

	case "Province.adcode":
		if e.complexity.Province.Adcode == nil {
			break
		}

		return e.complexity.Province.Adcode(childComplexity), true

	case "Province.area":
		if e.complexity.Province.Area == nil {
			break
		}

		return e.complexity.Province.Area(childComplexity), true

	case "Province.areaID":
		if e.complexity.Province.AreaID == nil {
			break
		}

		return e.complexity.Province.AreaID(childComplexity), true

	case "Province.center":
		if e.complexity.Province.Center == nil {
			break
		}

		return e.complexity.Province.Center(childComplexity), true

	case "Province.cities":
		if e.complexity.Province.Cities == nil {
			break
		}

		args, err := ec.field_Province_cities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Province.Cities(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.CityOrder), args["where"].(*ent.CityWhereInput)), true

	case "Province.country":
		if e.complexity.Province.Country == nil {
			break
		}

		return e.complexity.Province.Country(childComplexity), true

	case "Province.countryID":
		if e.complexity.Province.CountryID == nil {
			break
		}

		return e.complexity.Province.CountryID(childComplexity), true

	case "Province.createdAt":
		if e.complexity.Province.CreatedAt == nil {
			break
		}

		return e.complexity.Province.CreatedAt(childComplexity), true

	case "Province.districts":
		if e.complexity.Province.Districts == nil {
			break
		}

		args, err := ec.field_Province_districts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Province.Districts(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.DistrictOrder), args["where"].(*ent.DistrictWhereInput)), true

	case "Province.id":
		if e.complexity.Province.ID == nil {
			break
		}

		return e.complexity.Province.ID(childComplexity), true

	case "Province.name":
		if e.complexity.Province.Name == nil {
			break
		}

		return e.complexity.Province.Name(childComplexity), true

	case "Province.tenders":
		if e.complexity.Province.Tenders == nil {
			break
		}

		args, err := ec.field_Province_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Province.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "Province.updatedAt":
		if e.complexity.Province.UpdatedAt == nil {
			break
		}

		return e.complexity.Province.UpdatedAt(childComplexity), true

	case "ProvinceConnection.edges":
		if e.complexity.ProvinceConnection.Edges == nil {
			break
		}

		return e.complexity.ProvinceConnection.Edges(childComplexity), true

	case "ProvinceConnection.pageInfo":
		if e.complexity.ProvinceConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProvinceConnection.PageInfo(childComplexity), true

	case "ProvinceConnection.totalCount":
		if e.complexity.ProvinceConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProvinceConnection.TotalCount(childComplexity), true

	case "ProvinceEdge.cursor":
		if e.complexity.ProvinceEdge.Cursor == nil {
			break
		}

		return e.complexity.ProvinceEdge.Cursor(childComplexity), true

	case "ProvinceEdge.node":
		if e.complexity.ProvinceEdge.Node == nil {
			break
		}

		return e.complexity.ProvinceEdge.Node(childComplexity), true

	case "Query.amapRegeo":
		if e.complexity.Query.AmapRegeo == nil {
			break
		}

		args, err := ec.field_Query_amapRegeo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AmapRegeo(childComplexity, args["lng"].(float64), args["lat"].(float64)), true

	case "Query.areas":
		if e.complexity.Query.Areas == nil {
			break
		}

		args, err := ec.field_Query_areas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Areas(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.AreaOrder), args["where"].(*ent.AreaWhereInput)), true

	case "Query.biToken":
		if e.complexity.Query.BiToken == nil {
			break
		}

		return e.complexity.Query.BiToken(childComplexity), true

	case "Query.cities":
		if e.complexity.Query.Cities == nil {
			break
		}

		args, err := ec.field_Query_cities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cities(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.CityOrder), args["where"].(*ent.CityWhereInput)), true

	case "Query.competitors":
		if e.complexity.Query.Competitors == nil {
			break
		}

		args, err := ec.field_Query_competitors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Competitors(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.CompetitorOrder), args["where"].(*ent.CompetitorWhereInput)), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		args, err := ec.field_Query_countries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Countries(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.CountryOrder), args["where"].(*ent.CountryWhereInput)), true

	case "Query.customers":
		if e.complexity.Query.Customers == nil {
			break
		}

		args, err := ec.field_Query_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Customers(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.CustomerOrder), args["where"].(*ent.CustomerWhereInput)), true

	case "Query.districts":
		if e.complexity.Query.Districts == nil {
			break
		}

		args, err := ec.field_Query_districts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Districts(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.DistrictOrder), args["where"].(*ent.DistrictWhereInput)), true

	case "Query.inputtips":
		if e.complexity.Query.Inputtips == nil {
			break
		}

		args, err := ec.field_Query_inputtips_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Inputtips(childComplexity, args["areaId"].(xid.ID), args["keyword"].(string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(xid.ID)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]xid.ID)), true

	case "Query.operations":
		if e.complexity.Query.Operations == nil {
			break
		}

		args, err := ec.field_Query_operations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Operations(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.OperationOrder), args["where"].(*ent.OperationWhereInput)), true

	case "Query.plots":
		if e.complexity.Query.Plots == nil {
			break
		}

		args, err := ec.field_Query_plots_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Plots(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.PlotOrder), args["where"].(*ent.PlotWhereInput)), true

	case "Query.potentialTenders":
		if e.complexity.Query.PotentialTenders == nil {
			break
		}

		args, err := ec.field_Query_potentialTenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PotentialTenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.PotentialTenderOrder), args["where"].(*ent.PotentialTenderWhereInput)), true

	case "Query.projectStaffs":
		if e.complexity.Query.ProjectStaffs == nil {
			break
		}

		args, err := ec.field_Query_projectStaffs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectStaffs(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.ProjectStaffOrder), args["where"].(*ent.ProjectStaffWhereInput)), true

	case "Query.projects":
		if e.complexity.Query.Projects == nil {
			break
		}

		args, err := ec.field_Query_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Projects(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "Query.provinces":
		if e.complexity.Query.Provinces == nil {
			break
		}

		args, err := ec.field_Query_provinces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Provinces(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.ProvinceOrder), args["where"].(*ent.ProvinceWhereInput)), true

	case "Query.searchFeishuUser":
		if e.complexity.Query.SearchFeishuUser == nil {
			break
		}

		args, err := ec.field_Query_searchFeishuUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFeishuUser(childComplexity, args["keyword"].(string)), true

	case "Query.searchLocation":
		if e.complexity.Query.SearchLocation == nil {
			break
		}

		args, err := ec.field_Query_searchLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchLocation(childComplexity, args["keyword"].(string)), true

	case "Query.session":
		if e.complexity.Query.Session == nil {
			break
		}

		return e.complexity.Query.Session(childComplexity), true

	case "Query.tenders":
		if e.complexity.Query.Tenders == nil {
			break
		}

		args, err := ec.field_Query_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "Query.topCompetitors":
		if e.complexity.Query.TopCompetitors == nil {
			break
		}

		args, err := ec.field_Query_topCompetitors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TopCompetitors(childComplexity, args["first"].(*int)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "Query.visitRecords":
		if e.complexity.Query.VisitRecords == nil {
			break
		}

		args, err := ec.field_Query_visitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.VisitRecordOrder), args["where"].(*ent.VisitRecordWhereInput)), true

	case "Session.avatarUrl":
		if e.complexity.Session.AvatarURL == nil {
			break
		}

		return e.complexity.Session.AvatarURL(childComplexity), true

	case "Session.email":
		if e.complexity.Session.Email == nil {
			break
		}

		return e.complexity.Session.Email(childComplexity), true

	case "Session.hasEditAccess":
		if e.complexity.Session.HasEditAccess == nil {
			break
		}

		return e.complexity.Session.HasEditAccess(childComplexity), true

	case "Session.hasMapAccess":
		if e.complexity.Session.HasMapAccess == nil {
			break
		}

		return e.complexity.Session.HasMapAccess(childComplexity), true

	case "Session.isAdmin":
		if e.complexity.Session.IsAdmin == nil {
			break
		}

		return e.complexity.Session.IsAdmin(childComplexity), true

	case "Session.isCeo":
		if e.complexity.Session.IsCeo == nil {
			break
		}

		return e.complexity.Session.IsCeo(childComplexity), true

	case "Session.isSuperAdmin":
		if e.complexity.Session.IsSuperAdmin == nil {
			break
		}

		return e.complexity.Session.IsSuperAdmin(childComplexity), true

	case "Session.name":
		if e.complexity.Session.Name == nil {
			break
		}

		return e.complexity.Session.Name(childComplexity), true

	case "Session.userId":
		if e.complexity.Session.UserID == nil {
			break
		}

		return e.complexity.Session.UserID(childComplexity), true

	case "Session.username":
		if e.complexity.Session.Username == nil {
			break
		}

		return e.complexity.Session.Username(childComplexity), true

	case "Tender.address":
		if e.complexity.Tender.Address == nil {
			break
		}

		return e.complexity.Tender.Address(childComplexity), true

	case "Tender.approver":
		if e.complexity.Tender.Approver == nil {
			break
		}

		return e.complexity.Tender.Approver(childComplexity), true

	case "Tender.approverID":
		if e.complexity.Tender.ApproverID == nil {
			break
		}

		return e.complexity.Tender.ApproverID(childComplexity), true

	case "Tender.architect":
		if e.complexity.Tender.Architect == nil {
			break
		}

		return e.complexity.Tender.Architect(childComplexity), true

	case "Tender.area":
		if e.complexity.Tender.Area == nil {
			break
		}

		return e.complexity.Tender.Area(childComplexity), true

	case "Tender.areaID":
		if e.complexity.Tender.AreaID == nil {
			break
		}

		return e.complexity.Tender.AreaID(childComplexity), true

	case "Tender.attachements":
		if e.complexity.Tender.Attachements == nil {
			break
		}

		return e.complexity.Tender.Attachements(childComplexity), true

	case "Tender.biddingDate":
		if e.complexity.Tender.BiddingDate == nil {
			break
		}

		return e.complexity.Tender.BiddingDate(childComplexity), true

	case "Tender.biddingInstructions":
		if e.complexity.Tender.BiddingInstructions == nil {
			break
		}

		return e.complexity.Tender.BiddingInstructions(childComplexity), true

	case "Tender.city":
		if e.complexity.Tender.City == nil {
			break
		}

		return e.complexity.Tender.City(childComplexity), true

	case "Tender.cityID":
		if e.complexity.Tender.CityID == nil {
			break
		}

		return e.complexity.Tender.CityID(childComplexity), true

	case "Tender.classify":
		if e.complexity.Tender.Classify == nil {
			break
		}

		return e.complexity.Tender.Classify(childComplexity), true

	case "Tender.code":
		if e.complexity.Tender.Code == nil {
			break
		}

		return e.complexity.Tender.Code(childComplexity), true

	case "Tender.competitivePartnershipRating":
		if e.complexity.Tender.CompetitivePartnershipRating == nil {
			break
		}

		return e.complexity.Tender.CompetitivePartnershipRating(childComplexity), true

	case "Tender.competitivePartnershipRatingOverview":
		if e.complexity.Tender.CompetitivePartnershipRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CompetitivePartnershipRatingOverview(childComplexity), true

	case "Tender.competitor":
		if e.complexity.Tender.Competitor == nil {
			break
		}

		return e.complexity.Tender.Competitor(childComplexity), true

	case "Tender.competitorID":
		if e.complexity.Tender.CompetitorID == nil {
			break
		}

		return e.complexity.Tender.CompetitorID(childComplexity), true

	case "Tender.competitorSituations":
		if e.complexity.Tender.CompetitorSituations == nil {
			break
		}

		return e.complexity.Tender.CompetitorSituations(childComplexity), true

	case "Tender.constructionArea":
		if e.complexity.Tender.ConstructionArea == nil {
			break
		}

		return e.complexity.Tender.ConstructionArea(childComplexity), true

	case "Tender.consultingFirm":
		if e.complexity.Tender.ConsultingFirm == nil {
			break
		}

		return e.complexity.Tender.ConsultingFirm(childComplexity), true

	case "Tender.contractForm":
		if e.complexity.Tender.ContractForm == nil {
			break
		}

		return e.complexity.Tender.ContractForm(childComplexity), true

	case "Tender.contractor":
		if e.complexity.Tender.Contractor == nil {
			break
		}

		return e.complexity.Tender.Contractor(childComplexity), true

	case "Tender.costEngineer":
		if e.complexity.Tender.CostEngineer == nil {
			break
		}

		return e.complexity.Tender.CostEngineer(childComplexity), true

	case "Tender.createdAt":
		if e.complexity.Tender.CreatedAt == nil {
			break
		}

		return e.complexity.Tender.CreatedAt(childComplexity), true

	case "Tender.createdBy":
		if e.complexity.Tender.CreatedBy == nil {
			break
		}

		return e.complexity.Tender.CreatedBy(childComplexity), true

	case "Tender.createdByID":
		if e.complexity.Tender.CreatedByID == nil {
			break
		}

		return e.complexity.Tender.CreatedByID(childComplexity), true

	case "Tender.creditAndPaymentRating":
		if e.complexity.Tender.CreditAndPaymentRating == nil {
			break
		}

		return e.complexity.Tender.CreditAndPaymentRating(childComplexity), true

	case "Tender.creditAndPaymentRatingOverview":
		if e.complexity.Tender.CreditAndPaymentRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CreditAndPaymentRatingOverview(childComplexity), true

	case "Tender.currentProgress":
		if e.complexity.Tender.CurrentProgress == nil {
			break
		}

		return e.complexity.Tender.CurrentProgress(childComplexity), true

	case "Tender.customer":
		if e.complexity.Tender.Customer == nil {
			break
		}

		return e.complexity.Tender.Customer(childComplexity), true

	case "Tender.customerID":
		if e.complexity.Tender.CustomerID == nil {
			break
		}

		return e.complexity.Tender.CustomerID(childComplexity), true

	case "Tender.customerRelationshipRating":
		if e.complexity.Tender.CustomerRelationshipRating == nil {
			break
		}

		return e.complexity.Tender.CustomerRelationshipRating(childComplexity), true

	case "Tender.customerRelationshipRatingOverview":
		if e.complexity.Tender.CustomerRelationshipRatingOverview == nil {
			break
		}

		return e.complexity.Tender.CustomerRelationshipRatingOverview(childComplexity), true

	case "Tender.designUnit":
		if e.complexity.Tender.DesignUnit == nil {
			break
		}

		return e.complexity.Tender.DesignUnit(childComplexity), true

	case "Tender.developer":
		if e.complexity.Tender.Developer == nil {
			break
		}

		return e.complexity.Tender.Developer(childComplexity), true

	case "Tender.discoveryDate":
		if e.complexity.Tender.DiscoveryDate == nil {
			break
		}

		return e.complexity.Tender.DiscoveryDate(childComplexity), true

	case "Tender.district":
		if e.complexity.Tender.District == nil {
			break
		}

		return e.complexity.Tender.District(childComplexity), true

	case "Tender.districtID":
		if e.complexity.Tender.DistrictID == nil {
			break
		}

		return e.complexity.Tender.DistrictID(childComplexity), true

	case "Tender.estimatedAmount":
		if e.complexity.Tender.EstimatedAmount == nil {
			break
		}

		return e.complexity.Tender.EstimatedAmount(childComplexity), true

	case "Tender.estimatedProjectEndDate":
		if e.complexity.Tender.EstimatedProjectEndDate == nil {
			break
		}

		return e.complexity.Tender.EstimatedProjectEndDate(childComplexity), true

	case "Tender.estimatedProjectStartDate":
		if e.complexity.Tender.EstimatedProjectStartDate == nil {
			break
		}

		return e.complexity.Tender.EstimatedProjectStartDate(childComplexity), true

	case "Tender.facadeConsultant":
		if e.complexity.Tender.FacadeConsultant == nil {
			break
		}

		return e.complexity.Tender.FacadeConsultant(childComplexity), true

	case "Tender.finder":
		if e.complexity.Tender.Finder == nil {
			break
		}

		return e.complexity.Tender.Finder(childComplexity), true

	case "Tender.finderID":
		if e.complexity.Tender.FinderID == nil {
			break
		}

		return e.complexity.Tender.FinderID(childComplexity), true

	case "Tender.followingSales":
		if e.complexity.Tender.FollowingSales == nil {
			break
		}

		return e.complexity.Tender.FollowingSales(childComplexity), true

	case "Tender.fullAddress":
		if e.complexity.Tender.FullAddress == nil {
			break
		}

		return e.complexity.Tender.FullAddress(childComplexity), true

	case "Tender.geoBounds":
		if e.complexity.Tender.GeoBounds == nil {
			break
		}

		return e.complexity.Tender.GeoBounds(childComplexity), true

	case "Tender.geoCoordinate":
		if e.complexity.Tender.GeoCoordinate == nil {
			break
		}

		return e.complexity.Tender.GeoCoordinate(childComplexity), true

	case "Tender.id":
		if e.complexity.Tender.ID == nil {
			break
		}

		return e.complexity.Tender.ID(childComplexity), true

	case "Tender.images":
		if e.complexity.Tender.Images == nil {
			break
		}

		return e.complexity.Tender.Images(childComplexity), true

	case "Tender.isApproved":
		if e.complexity.Tender.IsApproved == nil {
			break
		}

		return e.complexity.Tender.IsApproved(childComplexity), true

	case "Tender.keyProject":
		if e.complexity.Tender.KeyProject == nil {
			break
		}

		return e.complexity.Tender.KeyProject(childComplexity), true

	case "Tender.lastTenderAmount":
		if e.complexity.Tender.LastTenderAmount == nil {
			break
		}

		return e.complexity.Tender.LastTenderAmount(childComplexity), true

	case "Tender.levelInvolved":
		if e.complexity.Tender.LevelInvolved == nil {
			break
		}

		return e.complexity.Tender.LevelInvolved(childComplexity), true

	case "Tender.managementCompany":
		if e.complexity.Tender.ManagementCompany == nil {
			break
		}

		return e.complexity.Tender.ManagementCompany(childComplexity), true

	case "Tender.name":
		if e.complexity.Tender.Name == nil {
			break
		}

		return e.complexity.Tender.Name(childComplexity), true

	case "Tender.ownerSituations":
		if e.complexity.Tender.OwnerSituations == nil {
			break
		}

		return e.complexity.Tender.OwnerSituations(childComplexity), true

	case "Tender.prepareToBid":
		if e.complexity.Tender.PrepareToBid == nil {
			break
		}

		return e.complexity.Tender.PrepareToBid(childComplexity), true

	case "Tender.projectCode":
		if e.complexity.Tender.ProjectCode == nil {
			break
		}

		return e.complexity.Tender.ProjectCode(childComplexity), true

	case "Tender.projectDefinition":
		if e.complexity.Tender.ProjectDefinition == nil {
			break
		}

		return e.complexity.Tender.ProjectDefinition(childComplexity), true

	case "Tender.projectType":
		if e.complexity.Tender.ProjectType == nil {
			break
		}

		return e.complexity.Tender.ProjectType(childComplexity), true

	case "Tender.province":
		if e.complexity.Tender.Province == nil {
			break
		}

		return e.complexity.Tender.Province(childComplexity), true

	case "Tender.provinceID":
		if e.complexity.Tender.ProvinceID == nil {
			break
		}

		return e.complexity.Tender.ProvinceID(childComplexity), true

	case "Tender.remark":
		if e.complexity.Tender.Remark == nil {
			break
		}

		return e.complexity.Tender.Remark(childComplexity), true

	case "Tender.sizeAndValueRating":
		if e.complexity.Tender.SizeAndValueRating == nil {
			break
		}

		return e.complexity.Tender.SizeAndValueRating(childComplexity), true

	case "Tender.sizeAndValueRatingOverview":
		if e.complexity.Tender.SizeAndValueRatingOverview == nil {
			break
		}

		return e.complexity.Tender.SizeAndValueRatingOverview(childComplexity), true

	case "Tender.status":
		if e.complexity.Tender.Status == nil {
			break
		}

		return e.complexity.Tender.Status(childComplexity), true

	case "Tender.tenderClosingDate":
		if e.complexity.Tender.TenderClosingDate == nil {
			break
		}

		return e.complexity.Tender.TenderClosingDate(childComplexity), true

	case "Tender.tenderCode":
		if e.complexity.Tender.TenderCode == nil {
			break
		}

		return e.complexity.Tender.TenderCode(childComplexity), true

	case "Tender.tenderDate":
		if e.complexity.Tender.TenderDate == nil {
			break
		}

		return e.complexity.Tender.TenderDate(childComplexity), true

	case "Tender.tenderForm":
		if e.complexity.Tender.TenderForm == nil {
			break
		}

		return e.complexity.Tender.TenderForm(childComplexity), true

	case "Tender.tenderSituations":
		if e.complexity.Tender.TenderSituations == nil {
			break
		}

		return e.complexity.Tender.TenderSituations(childComplexity), true

	case "Tender.tenderWinAmount":
		if e.complexity.Tender.TenderWinAmount == nil {
			break
		}

		return e.complexity.Tender.TenderWinAmount(childComplexity), true

	case "Tender.tenderWinCompany":
		if e.complexity.Tender.TenderWinCompany == nil {
			break
		}

		return e.complexity.Tender.TenderWinCompany(childComplexity), true

	case "Tender.tenderWinDate":
		if e.complexity.Tender.TenderWinDate == nil {
			break
		}

		return e.complexity.Tender.TenderWinDate(childComplexity), true

	case "Tender.tenderingAgency":
		if e.complexity.Tender.TenderingAgency == nil {
			break
		}

		return e.complexity.Tender.TenderingAgency(childComplexity), true

	case "Tender.timeLimitRating":
		if e.complexity.Tender.TimeLimitRating == nil {
			break
		}

		return e.complexity.Tender.TimeLimitRating(childComplexity), true

	case "Tender.timeLimitRatingOverview":
		if e.complexity.Tender.TimeLimitRatingOverview == nil {
			break
		}

		return e.complexity.Tender.TimeLimitRatingOverview(childComplexity), true

	case "Tender.updatedAt":
		if e.complexity.Tender.UpdatedAt == nil {
			break
		}

		return e.complexity.Tender.UpdatedAt(childComplexity), true

	case "Tender.visitRecords":
		if e.complexity.Tender.VisitRecords == nil {
			break
		}

		args, err := ec.field_Tender_visitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tender.VisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.VisitRecordOrder), args["where"].(*ent.VisitRecordWhereInput)), true

	case "TenderConnection.edges":
		if e.complexity.TenderConnection.Edges == nil {
			break
		}

		return e.complexity.TenderConnection.Edges(childComplexity), true

	case "TenderConnection.pageInfo":
		if e.complexity.TenderConnection.PageInfo == nil {
			break
		}

		return e.complexity.TenderConnection.PageInfo(childComplexity), true

	case "TenderConnection.totalCount":
		if e.complexity.TenderConnection.TotalCount == nil {
			break
		}

		return e.complexity.TenderConnection.TotalCount(childComplexity), true

	case "TenderEdge.cursor":
		if e.complexity.TenderEdge.Cursor == nil {
			break
		}

		return e.complexity.TenderEdge.Cursor(childComplexity), true

	case "TenderEdge.node":
		if e.complexity.TenderEdge.Node == nil {
			break
		}

		return e.complexity.TenderEdge.Node(childComplexity), true

	case "TopCompetitor.id":
		if e.complexity.TopCompetitor.ID == nil {
			break
		}

		return e.complexity.TopCompetitor.ID(childComplexity), true

	case "TopCompetitor.name":
		if e.complexity.TopCompetitor.Name == nil {
			break
		}

		return e.complexity.TopCompetitor.Name(childComplexity), true

	case "TopCompetitor.shortName":
		if e.complexity.TopCompetitor.ShortName == nil {
			break
		}

		return e.complexity.TopCompetitor.ShortName(childComplexity), true

	case "TopCompetitor.wonTendersCount":
		if e.complexity.TopCompetitor.WonTendersCount == nil {
			break
		}

		return e.complexity.TopCompetitor.WonTendersCount(childComplexity), true

	case "User.areas":
		if e.complexity.User.Areas == nil {
			break
		}

		args, err := ec.field_User_areas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Areas(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.AreaOrder), args["where"].(*ent.AreaWhereInput)), true

	case "User.avatarURL":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.customers":
		if e.complexity.User.Customers == nil {
			break
		}

		args, err := ec.field_User_customers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Customers(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.CustomerOrder), args["where"].(*ent.CustomerWhereInput)), true

	case "User.disabled":
		if e.complexity.User.Disabled == nil {
			break
		}

		return e.complexity.User.Disabled(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.hasEditAccess":
		if e.complexity.User.HasEditAccess == nil {
			break
		}

		return e.complexity.User.HasEditAccess(childComplexity), true

	case "User.hasMapAccess":
		if e.complexity.User.HasMapAccess == nil {
			break
		}

		return e.complexity.User.HasMapAccess(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isAdmin":
		if e.complexity.User.IsAdmin == nil {
			break
		}

		return e.complexity.User.IsAdmin(childComplexity), true

	case "User.isCeo":
		if e.complexity.User.IsCeo == nil {
			break
		}

		return e.complexity.User.IsCeo(childComplexity), true

	case "User.isSuperAdmin":
		if e.complexity.User.IsSuperAdmin == nil {
			break
		}

		return e.complexity.User.IsSuperAdmin(childComplexity), true

	case "User.leader":
		if e.complexity.User.Leader == nil {
			break
		}

		return e.complexity.User.Leader(childComplexity), true

	case "User.leaderID":
		if e.complexity.User.LeaderID == nil {
			break
		}

		return e.complexity.User.LeaderID(childComplexity), true

	case "User.myTenders":
		if e.complexity.User.MyTenders == nil {
			break
		}

		args, err := ec.field_User_myTenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.MyTenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "User.myVisitRecords":
		if e.complexity.User.MyVisitRecords == nil {
			break
		}

		args, err := ec.field_User_myVisitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.MyVisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.VisitRecordOrder), args["where"].(*ent.VisitRecordWhereInput)), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.openID":
		if e.complexity.User.OpenID == nil {
			break
		}

		return e.complexity.User.OpenID(childComplexity), true

	case "User.projects":
		if e.complexity.User.Projects == nil {
			break
		}

		args, err := ec.field_User_projects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Projects(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.ProjectOrder), args["where"].(*ent.ProjectWhereInput)), true

	case "User.teamMembers":
		if e.complexity.User.TeamMembers == nil {
			break
		}

		return e.complexity.User.TeamMembers(childComplexity), true

	case "User.tenders":
		if e.complexity.User.Tenders == nil {
			break
		}

		args, err := ec.field_User_tenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Tenders(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.TenderOrder), args["where"].(*ent.TenderWhereInput)), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.visitRecords":
		if e.complexity.User.VisitRecords == nil {
			break
		}

		args, err := ec.field_User_visitRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.VisitRecords(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].([]*ent.VisitRecordOrder), args["where"].(*ent.VisitRecordWhereInput)), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "VisitRecord.commContent":
		if e.complexity.VisitRecord.CommContent == nil {
			break
		}

		return e.complexity.VisitRecord.CommContent(childComplexity), true

	case "VisitRecord.commPeople":
		if e.complexity.VisitRecord.CommPeople == nil {
			break
		}

		return e.complexity.VisitRecord.CommPeople(childComplexity), true

	case "VisitRecord.createdAt":
		if e.complexity.VisitRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VisitRecord.CreatedAt(childComplexity), true

	case "VisitRecord.customer":
		if e.complexity.VisitRecord.Customer == nil {
			break
		}

		return e.complexity.VisitRecord.Customer(childComplexity), true

	case "VisitRecord.customerID":
		if e.complexity.VisitRecord.CustomerID == nil {
			break
		}

		return e.complexity.VisitRecord.CustomerID(childComplexity), true

	case "VisitRecord.date":
		if e.complexity.VisitRecord.Date == nil {
			break
		}

		return e.complexity.VisitRecord.Date(childComplexity), true

	case "VisitRecord.followupbys":
		if e.complexity.VisitRecord.FollowUpBys == nil {
			break
		}

		args, err := ec.field_VisitRecord_followupbys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VisitRecord.FollowUpBys(childComplexity, args["after"].(*entgql.Cursor[xid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[xid.ID]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "VisitRecord.id":
		if e.complexity.VisitRecord.ID == nil {
			break
		}

		return e.complexity.VisitRecord.ID(childComplexity), true

	case "VisitRecord.nextStep":
		if e.complexity.VisitRecord.NextStep == nil {
			break
		}

		return e.complexity.VisitRecord.NextStep(childComplexity), true

	case "VisitRecord.tender":
		if e.complexity.VisitRecord.Tender == nil {
			break
		}

		return e.complexity.VisitRecord.Tender(childComplexity), true

	case "VisitRecord.tenderID":
		if e.complexity.VisitRecord.TenderID == nil {
			break
		}

		return e.complexity.VisitRecord.TenderID(childComplexity), true

	case "VisitRecord.updatedAt":
		if e.complexity.VisitRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VisitRecord.UpdatedAt(childComplexity), true

	case "VisitRecord.visitType":
		if e.complexity.VisitRecord.VisitType == nil {
			break
		}

		return e.complexity.VisitRecord.VisitType(childComplexity), true

	case "VisitRecordConnection.edges":
		if e.complexity.VisitRecordConnection.Edges == nil {
			break
		}

		return e.complexity.VisitRecordConnection.Edges(childComplexity), true

	case "VisitRecordConnection.pageInfo":
		if e.complexity.VisitRecordConnection.PageInfo == nil {
			break
		}

		return e.complexity.VisitRecordConnection.PageInfo(childComplexity), true

	case "VisitRecordConnection.totalCount":
		if e.complexity.VisitRecordConnection.TotalCount == nil {
			break
		}

		return e.complexity.VisitRecordConnection.TotalCount(childComplexity), true

	case "VisitRecordEdge.cursor":
		if e.complexity.VisitRecordEdge.Cursor == nil {
			break
		}

		return e.complexity.VisitRecordEdge.Cursor(childComplexity), true

	case "VisitRecordEdge.node":
		if e.complexity.VisitRecordEdge.Node == nil {
			break
		}

		return e.complexity.VisitRecordEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAreaOrder,
		ec.unmarshalInputAreaWhereInput,
		ec.unmarshalInputCityOrder,
		ec.unmarshalInputCityWhereInput,
		ec.unmarshalInputCompetitorOrder,
		ec.unmarshalInputCompetitorWhereInput,
		ec.unmarshalInputCountryOrder,
		ec.unmarshalInputCountryWhereInput,
		ec.unmarshalInputCreateAreaInput,
		ec.unmarshalInputCreateCityInput,
		ec.unmarshalInputCreateCompetitorInput,
		ec.unmarshalInputCreateCountryInput,
		ec.unmarshalInputCreateCustomerInput,
		ec.unmarshalInputCreateDistrictInput,
		ec.unmarshalInputCreatePlotInput,
		ec.unmarshalInputCreatePotentialTenderInput,
		ec.unmarshalInputCreateProvinceInput,
		ec.unmarshalInputCreateTenderInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateVisitRecordInput,
		ec.unmarshalInputCustomerOrder,
		ec.unmarshalInputCustomerWhereInput,
		ec.unmarshalInputDistrictOrder,
		ec.unmarshalInputDistrictWhereInput,
		ec.unmarshalInputOperationOrder,
		ec.unmarshalInputOperationWhereInput,
		ec.unmarshalInputPlotOrder,
		ec.unmarshalInputPlotWhereInput,
		ec.unmarshalInputPotentialTenderOrder,
		ec.unmarshalInputPotentialTenderWhereInput,
		ec.unmarshalInputProjectOrder,
		ec.unmarshalInputProjectStaffOrder,
		ec.unmarshalInputProjectStaffWhereInput,
		ec.unmarshalInputProjectVOOrder,
		ec.unmarshalInputProjectVOWhereInput,
		ec.unmarshalInputProjectWhereInput,
		ec.unmarshalInputProvinceOrder,
		ec.unmarshalInputProvinceWhereInput,
		ec.unmarshalInputTenderOrder,
		ec.unmarshalInputTenderWhereInput,
		ec.unmarshalInputUpdateAreaInput,
		ec.unmarshalInputUpdateCityInput,
		ec.unmarshalInputUpdateCompetitorInput,
		ec.unmarshalInputUpdateCountryInput,
		ec.unmarshalInputUpdateCustomerInput,
		ec.unmarshalInputUpdateDistrictInput,
		ec.unmarshalInputUpdatePlotInput,
		ec.unmarshalInputUpdatePotentialTenderInput,
		ec.unmarshalInputUpdateProjectInput,
		ec.unmarshalInputUpdateProvinceInput,
		ec.unmarshalInputUpdateTenderInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateVisitRecordInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputVisitRecordOrder,
		ec.unmarshalInputVisitRecordWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Area implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  code: String!
  leaderChatID: String
  salesChatID: String
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Customers returned from the connection.
    """
    orderBy: [CustomerOrder!]

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  provinces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Provinces returned from the connection.
    """
    orderBy: ProvinceOrder

    """
    Filtering options for Provinces returned from the connection.
    """
    where: ProvinceWhereInput
  ): ProvinceConnection!
}
"""
A connection to a list of items.
"""
type AreaConnection {
  """
  A list of edges.
  """
  edges: [AreaEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AreaEdge {
  """
  The item at the end of the edge.
  """
  node: Area
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Area connections
"""
input AreaOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Areas.
  """
  field: AreaOrderField!
}
"""
Properties by which Area connections can be ordered.
"""
enum AreaOrderField {
  CREATED_AT
}
"""
AreaWhereInput is used for filtering Area objects.
Input was generated by ent.
"""
input AreaWhereInput {
  not: AreaWhereInput
  and: [AreaWhereInput!]
  or: [AreaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  leader_chat_id field predicates
  """
  leaderChatID: String
  leaderChatIDNEQ: String
  leaderChatIDIn: [String!]
  leaderChatIDNotIn: [String!]
  leaderChatIDGT: String
  leaderChatIDGTE: String
  leaderChatIDLT: String
  leaderChatIDLTE: String
  leaderChatIDContains: String
  leaderChatIDHasPrefix: String
  leaderChatIDHasSuffix: String
  leaderChatIDIsNil: Boolean
  leaderChatIDNotNil: Boolean
  leaderChatIDEqualFold: String
  leaderChatIDContainsFold: String
  """
  sales_chat_id field predicates
  """
  salesChatID: String
  salesChatIDNEQ: String
  salesChatIDIn: [String!]
  salesChatIDNotIn: [String!]
  salesChatIDGT: String
  salesChatIDGTE: String
  salesChatIDLT: String
  salesChatIDLTE: String
  salesChatIDContains: String
  salesChatIDHasPrefix: String
  salesChatIDHasSuffix: String
  salesChatIDIsNil: Boolean
  salesChatIDNotNil: Boolean
  salesChatIDEqualFold: String
  salesChatIDContainsFold: String
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  provinces edge predicates
  """
  hasProvinces: Boolean
  hasProvincesWith: [ProvinceWhereInput!]
}
type City implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  name: String!
  provinceID: ID!
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Districts returned from the connection.
    """
    orderBy: DistrictOrder

    """
    Filtering options for Districts returned from the connection.
    """
    where: DistrictWhereInput
  ): DistrictConnection!
  province: Province!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
}
"""
A connection to a list of items.
"""
type CityConnection {
  """
  A list of edges.
  """
  edges: [CityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CityEdge {
  """
  The item at the end of the edge.
  """
  node: City
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for City connections
"""
input CityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Cities.
  """
  field: CityOrderField!
}
"""
Properties by which City connections can be ordered.
"""
enum CityOrderField {
  CREATED_AT
}
"""
CityWhereInput is used for filtering City objects.
Input was generated by ent.
"""
input CityWhereInput {
  not: CityWhereInput
  and: [CityWhereInput!]
  or: [CityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
}
type Competitor implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  shortName: String!
  name: String!
  wonTenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
}
"""
A connection to a list of items.
"""
type CompetitorConnection {
  """
  A list of edges.
  """
  edges: [CompetitorEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CompetitorEdge {
  """
  The item at the end of the edge.
  """
  node: Competitor
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Competitor connections
"""
input CompetitorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Competitors.
  """
  field: CompetitorOrderField!
}
"""
Properties by which Competitor connections can be ordered.
"""
enum CompetitorOrderField {
  CREATED_AT
  NAME
}
"""
CompetitorWhereInput is used for filtering Competitor objects.
Input was generated by ent.
"""
input CompetitorWhereInput {
  not: CompetitorWhereInput
  and: [CompetitorWhereInput!]
  or: [CompetitorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  short_name field predicates
  """
  shortName: String
  shortNameNEQ: String
  shortNameIn: [String!]
  shortNameNotIn: [String!]
  shortNameGT: String
  shortNameGTE: String
  shortNameLT: String
  shortNameLTE: String
  shortNameContains: String
  shortNameHasPrefix: String
  shortNameHasSuffix: String
  shortNameEqualFold: String
  shortNameContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  won_tenders edge predicates
  """
  hasWonTenders: Boolean
  hasWonTendersWith: [TenderWhereInput!]
}
type Country implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  provinces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Provinces returned from the connection.
    """
    orderBy: ProvinceOrder

    """
    Filtering options for Provinces returned from the connection.
    """
    where: ProvinceWhereInput
  ): ProvinceConnection!
}
"""
A connection to a list of items.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Country connections
"""
input CountryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Countries.
  """
  field: CountryOrderField!
}
"""
Properties by which Country connections can be ordered.
"""
enum CountryOrderField {
  CREATED_AT
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  provinces edge predicates
  """
  hasProvinces: Boolean
  hasProvincesWith: [ProvinceWhereInput!]
}
"""
CreateAreaInput is used for create Area object.
Input was generated by ent.
"""
input CreateAreaInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  code: String!
  leaderChatID: String
  salesChatID: String
  customerIDs: [ID!]
  tenderIDs: [ID!]
  userIDs: [ID!]
  provinceIDs: [ID!]
}
"""
CreateCityInput is used for create City object.
Input was generated by ent.
"""
input CreateCityInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  name: String!
  districtIDs: [ID!]
  provinceID: ID!
  tenderIDs: [ID!]
}
"""
CreateCompetitorInput is used for create Competitor object.
Input was generated by ent.
"""
input CreateCompetitorInput {
  createdAt: Time
  updatedAt: Time
  shortName: String!
  name: String!
  wonTenderIDs: [ID!]
}
"""
CreateCountryInput is used for create Country object.
Input was generated by ent.
"""
input CreateCountryInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  provinceIDs: [ID!]
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  isApproved: Boolean
  ownerType: Int
  industry: Int
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  tenderIDs: [ID!]
  salesID: ID
  createdByID: ID
  approverID: ID
  visitRecordIDs: [ID!]
}
"""
CreateDistrictInput is used for create District object.
Input was generated by ent.
"""
input CreateDistrictInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
  tenderIDs: [ID!]
  plotIDs: [ID!]
}
"""
CreatePlotInput is used for create Plot object.
Input was generated by ent.
"""
input CreatePlotInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  colorHex: String!
  districtID: ID!
}
"""
CreatePotentialTenderInput is used for create PotentialTender object.
Input was generated by ent.
"""
input CreatePotentialTenderInput {
  createdAt: Time
  updatedAt: Time
}
"""
CreateProvinceInput is used for create Province object.
Input was generated by ent.
"""
input CreateProvinceInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  districtIDs: [ID!]
  cityIDs: [ID!]
  countryID: ID!
  tenderIDs: [ID!]
  areaID: ID
}
"""
CreateTenderInput is used for create Tender object.
Input was generated by ent.
"""
input CreateTenderInput {
  createdAt: Time
  updatedAt: Time
  code: String!
  status: Int
  isApproved: Boolean
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  classify: Int
  discoveryDate: Time!
  address: String
  fullAddress: String
  contractor: String
  levelInvolved: Int
  sizeAndValueRating: Int
  sizeAndValueRatingOverview: String
  creditAndPaymentRating: Int
  creditAndPaymentRatingOverview: String
  timeLimitRating: Int
  timeLimitRatingOverview: String
  customerRelationshipRating: Int
  customerRelationshipRatingOverview: String
  competitivePartnershipRating: Int
  competitivePartnershipRatingOverview: String
  prepareToBid: Boolean
  projectCode: String
  projectType: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  attachements: [String!]
  remark: String
  images: [String!]
  tenderSituations: String
  ownerSituations: String
  biddingInstructions: String
  competitorSituations: String
  costEngineer: String
  tenderForm: String
  contractForm: String
  managementCompany: String
  tenderingAgency: String
  biddingDate: Time
  facadeConsultant: String
  designUnit: String
  consultingFirm: String
  keyProject: Boolean
  currentProgress: String
  tenderWinCompany: String
  """
  投標編號，只限港澳
  """
  tenderCode: String
  """
  則師，只限港澳
  """
  architect: String
  """
  業主，只限港澳
  """
  developer: String
  """
  交標日期，只限港澳
  """
  tenderClosingDate: Time
  """
  施工面積，只限港澳
  """
  constructionArea: String
  """
  得標日期，只限港澳
  """
  tenderWinDate: Time
  """
  得標金額
  """
  tenderWinAmount: Float
  """
  最後一次投標金額，只限港澳
  """
  lastTenderAmount: Float
  areaID: ID!
  customerID: ID
  finderID: ID
  createdByID: ID
  followingSaleIDs: [ID!]
  provinceID: ID
  cityID: ID
  districtID: ID
  visitRecordIDs: [ID!]
  competitorID: ID
  approverID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  openID: String!
  name: String
  email: String
  username: String
  avatarURL: String
  disabled: Boolean
  isAdmin: Boolean
  isCeo: Boolean
  isSuperAdmin: Boolean
  hasMapAccess: Boolean
  hasEditAccess: Boolean
  areaIDs: [ID!]
  customerIDs: [ID!]
  leaderID: ID
  teamMemberIDs: [ID!]
  tenderIDs: [ID!]
  visitRecordIDs: [ID!]
  projectIDs: [ID!]
}
"""
CreateVisitRecordInput is used for create VisitRecord object.
Input was generated by ent.
"""
input CreateVisitRecordInput {
  createdAt: Time
  updatedAt: Time
  visitType: Int
  commPeople: String!
  commContent: String!
  nextStep: String
  date: Time!
  tenderID: ID
  customerID: ID!
  followupbyIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  isApproved: Boolean!
  ownerType: Int
  industry: Int
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  salesID: ID
  createdByID: ID
  approverID: ID
  area: Area!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  sales: User
  createdBy: User
  approver: User
  visitRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for VisitRecords returned from the connection.
    """
    orderBy: [VisitRecordOrder!]

    """
    Filtering options for VisitRecords returned from the connection.
    """
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
}
"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  A list of edges.
  """
  edges: [CustomerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Customer connections
"""
input CustomerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Customers.
  """
  field: CustomerOrderField!
}
"""
Properties by which Customer connections can be ordered.
"""
enum CustomerOrderField {
  CREATED_AT
  NAME
  OWNER_TYPE
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  is_approved field predicates
  """
  isApproved: Boolean
  isApprovedNEQ: Boolean
  """
  owner_type field predicates
  """
  ownerType: Int
  ownerTypeNEQ: Int
  ownerTypeIn: [Int!]
  ownerTypeNotIn: [Int!]
  ownerTypeGT: Int
  ownerTypeGTE: Int
  ownerTypeLT: Int
  ownerTypeLTE: Int
  ownerTypeIsNil: Boolean
  ownerTypeNotNil: Boolean
  """
  industry field predicates
  """
  industry: Int
  industryNEQ: Int
  industryIn: [Int!]
  industryNotIn: [Int!]
  industryGT: Int
  industryGTE: Int
  industryLT: Int
  industryLTE: Int
  industryIsNil: Boolean
  industryNotNil: Boolean
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  sizeIsNil: Boolean
  sizeNotNil: Boolean
  """
  contact_person field predicates
  """
  contactPerson: String
  contactPersonNEQ: String
  contactPersonIn: [String!]
  contactPersonNotIn: [String!]
  contactPersonGT: String
  contactPersonGTE: String
  contactPersonLT: String
  contactPersonLTE: String
  contactPersonContains: String
  contactPersonHasPrefix: String
  contactPersonHasSuffix: String
  contactPersonIsNil: Boolean
  contactPersonNotNil: Boolean
  contactPersonEqualFold: String
  contactPersonContainsFold: String
  """
  contact_person_position field predicates
  """
  contactPersonPosition: String
  contactPersonPositionNEQ: String
  contactPersonPositionIn: [String!]
  contactPersonPositionNotIn: [String!]
  contactPersonPositionGT: String
  contactPersonPositionGTE: String
  contactPersonPositionLT: String
  contactPersonPositionLTE: String
  contactPersonPositionContains: String
  contactPersonPositionHasPrefix: String
  contactPersonPositionHasSuffix: String
  contactPersonPositionIsNil: Boolean
  contactPersonPositionNotNil: Boolean
  contactPersonPositionEqualFold: String
  contactPersonPositionContainsFold: String
  """
  contact_person_phone field predicates
  """
  contactPersonPhone: String
  contactPersonPhoneNEQ: String
  contactPersonPhoneIn: [String!]
  contactPersonPhoneNotIn: [String!]
  contactPersonPhoneGT: String
  contactPersonPhoneGTE: String
  contactPersonPhoneLT: String
  contactPersonPhoneLTE: String
  contactPersonPhoneContains: String
  contactPersonPhoneHasPrefix: String
  contactPersonPhoneHasSuffix: String
  contactPersonPhoneIsNil: Boolean
  contactPersonPhoneNotNil: Boolean
  contactPersonPhoneEqualFold: String
  contactPersonPhoneContainsFold: String
  """
  contact_person_email field predicates
  """
  contactPersonEmail: String
  contactPersonEmailNEQ: String
  contactPersonEmailIn: [String!]
  contactPersonEmailNotIn: [String!]
  contactPersonEmailGT: String
  contactPersonEmailGTE: String
  contactPersonEmailLT: String
  contactPersonEmailLTE: String
  contactPersonEmailContains: String
  contactPersonEmailHasPrefix: String
  contactPersonEmailHasSuffix: String
  contactPersonEmailIsNil: Boolean
  contactPersonEmailNotNil: Boolean
  contactPersonEmailEqualFold: String
  contactPersonEmailContainsFold: String
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  sales_id field predicates
  """
  salesID: ID
  salesIDNEQ: ID
  salesIDIn: [ID!]
  salesIDNotIn: [ID!]
  salesIDGT: ID
  salesIDGTE: ID
  salesIDLT: ID
  salesIDLTE: ID
  salesIDContains: ID
  salesIDHasPrefix: ID
  salesIDHasSuffix: ID
  salesIDIsNil: Boolean
  salesIDNotNil: Boolean
  salesIDEqualFold: ID
  salesIDContainsFold: ID
  """
  created_by_id field predicates
  """
  createdByID: ID
  createdByIDNEQ: ID
  createdByIDIn: [ID!]
  createdByIDNotIn: [ID!]
  createdByIDGT: ID
  createdByIDGTE: ID
  createdByIDLT: ID
  createdByIDLTE: ID
  createdByIDContains: ID
  createdByIDHasPrefix: ID
  createdByIDHasSuffix: ID
  createdByIDIsNil: Boolean
  createdByIDNotNil: Boolean
  createdByIDEqualFold: ID
  createdByIDContainsFold: ID
  """
  approver_id field predicates
  """
  approverID: ID
  approverIDNEQ: ID
  approverIDIn: [ID!]
  approverIDNotIn: [ID!]
  approverIDGT: ID
  approverIDGTE: ID
  approverIDLT: ID
  approverIDLTE: ID
  approverIDContains: ID
  approverIDHasPrefix: ID
  approverIDHasSuffix: ID
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: ID
  approverIDContainsFold: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  sales edge predicates
  """
  hasSales: Boolean
  hasSalesWith: [UserWhereInput!]
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  approver edge predicates
  """
  hasApprover: Boolean
  hasApproverWith: [UserWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
}
type District implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
  province: Province!
  city: City
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  plots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Plots returned from the connection.
    """
    orderBy: PlotOrder

    """
    Filtering options for Plots returned from the connection.
    """
    where: PlotWhereInput
  ): PlotConnection!
}
"""
A connection to a list of items.
"""
type DistrictConnection {
  """
  A list of edges.
  """
  edges: [DistrictEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DistrictEdge {
  """
  The item at the end of the edge.
  """
  node: District
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for District connections
"""
input DistrictOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Districts.
  """
  field: DistrictOrderField!
}
"""
Properties by which District connections can be ordered.
"""
enum DistrictOrderField {
  CREATED_AT
}
"""
DistrictWhereInput is used for filtering District objects.
Input was generated by ent.
"""
input DistrictWhereInput {
  not: DistrictWhereInput
  and: [DistrictWhereInput!]
  or: [DistrictWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  city_code field predicates
  """
  cityCode: Int
  cityCodeNEQ: Int
  cityCodeIn: [Int!]
  cityCodeNotIn: [Int!]
  cityCodeGT: Int
  cityCodeGTE: Int
  cityCodeLT: Int
  cityCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  city_id field predicates
  """
  cityID: ID
  cityIDNEQ: ID
  cityIDIn: [ID!]
  cityIDNotIn: [ID!]
  cityIDGT: ID
  cityIDGTE: ID
  cityIDLT: ID
  cityIDLTE: ID
  cityIDContains: ID
  cityIDHasPrefix: ID
  cityIDHasSuffix: ID
  cityIDIsNil: Boolean
  cityIDNotNil: Boolean
  cityIDEqualFold: ID
  cityIDContainsFold: ID
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  city edge predicates
  """
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  plots edge predicates
  """
  hasPlots: Boolean
  hasPlotsWith: [PlotWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "cscd-bds/store/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Operation implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """
  成交额预算
  """
  cjeYs: Float
  """
  成交额累计
  """
  cjeLj: Float
  """
  营业额预算
  """
  yyeYs: Float
  """
  营业额累计
  """
  yyeLj: Float
  """
  现金流预算
  """
  xjlYs: Float
  """
  现金流累计
  """
  xjlLj: Float
  """
  项目管理费
  """
  xmglf: Float
  """
  项目设计费
  """
  xmsjf: Float
}
"""
A connection to a list of items.
"""
type OperationConnection {
  """
  A list of edges.
  """
  edges: [OperationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OperationEdge {
  """
  The item at the end of the edge.
  """
  node: Operation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Operation connections
"""
input OperationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Operations.
  """
  field: OperationOrderField!
}
"""
Properties by which Operation connections can be ordered.
"""
enum OperationOrderField {
  CREATED_AT
}
"""
OperationWhereInput is used for filtering Operation objects.
Input was generated by ent.
"""
input OperationWhereInput {
  not: OperationWhereInput
  and: [OperationWhereInput!]
  or: [OperationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  cje_ys field predicates
  """
  cjeYs: Float
  cjeYsNEQ: Float
  cjeYsIn: [Float!]
  cjeYsNotIn: [Float!]
  cjeYsGT: Float
  cjeYsGTE: Float
  cjeYsLT: Float
  cjeYsLTE: Float
  cjeYsIsNil: Boolean
  cjeYsNotNil: Boolean
  """
  cje_lj field predicates
  """
  cjeLj: Float
  cjeLjNEQ: Float
  cjeLjIn: [Float!]
  cjeLjNotIn: [Float!]
  cjeLjGT: Float
  cjeLjGTE: Float
  cjeLjLT: Float
  cjeLjLTE: Float
  cjeLjIsNil: Boolean
  cjeLjNotNil: Boolean
  """
  yye_ys field predicates
  """
  yyeYs: Float
  yyeYsNEQ: Float
  yyeYsIn: [Float!]
  yyeYsNotIn: [Float!]
  yyeYsGT: Float
  yyeYsGTE: Float
  yyeYsLT: Float
  yyeYsLTE: Float
  yyeYsIsNil: Boolean
  yyeYsNotNil: Boolean
  """
  yye_lj field predicates
  """
  yyeLj: Float
  yyeLjNEQ: Float
  yyeLjIn: [Float!]
  yyeLjNotIn: [Float!]
  yyeLjGT: Float
  yyeLjGTE: Float
  yyeLjLT: Float
  yyeLjLTE: Float
  yyeLjIsNil: Boolean
  yyeLjNotNil: Boolean
  """
  xjl_ys field predicates
  """
  xjlYs: Float
  xjlYsNEQ: Float
  xjlYsIn: [Float!]
  xjlYsNotIn: [Float!]
  xjlYsGT: Float
  xjlYsGTE: Float
  xjlYsLT: Float
  xjlYsLTE: Float
  xjlYsIsNil: Boolean
  xjlYsNotNil: Boolean
  """
  xjl_lj field predicates
  """
  xjlLj: Float
  xjlLjNEQ: Float
  xjlLjIn: [Float!]
  xjlLjNotIn: [Float!]
  xjlLjGT: Float
  xjlLjGTE: Float
  xjlLjLT: Float
  xjlLjLTE: Float
  xjlLjIsNil: Boolean
  xjlLjNotNil: Boolean
  """
  xmglf field predicates
  """
  xmglf: Float
  xmglfNEQ: Float
  xmglfIn: [Float!]
  xmglfNotIn: [Float!]
  xmglfGT: Float
  xmglfGTE: Float
  xmglfLT: Float
  xmglfLTE: Float
  xmglfIsNil: Boolean
  xmglfNotNil: Boolean
  """
  xmsjf field predicates
  """
  xmsjf: Float
  xmsjfNEQ: Float
  xmsjfIn: [Float!]
  xmsjfNotIn: [Float!]
  xmsjfGT: Float
  xmsjfGTE: Float
  xmsjfLT: Float
  xmsjfLTE: Float
  xmsjfIsNil: Boolean
  xmsjfNotNil: Boolean
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Plot implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  colorHex: String!
  districtID: ID!
  district: District!
}
"""
A connection to a list of items.
"""
type PlotConnection {
  """
  A list of edges.
  """
  edges: [PlotEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PlotEdge {
  """
  The item at the end of the edge.
  """
  node: Plot
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Plot connections
"""
input PlotOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Plots.
  """
  field: PlotOrderField!
}
"""
Properties by which Plot connections can be ordered.
"""
enum PlotOrderField {
  CREATED_AT
}
"""
PlotWhereInput is used for filtering Plot objects.
Input was generated by ent.
"""
input PlotWhereInput {
  not: PlotWhereInput
  and: [PlotWhereInput!]
  or: [PlotWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  color_hex field predicates
  """
  colorHex: String
  colorHexNEQ: String
  colorHexIn: [String!]
  colorHexNotIn: [String!]
  colorHexGT: String
  colorHexGTE: String
  colorHexLT: String
  colorHexLTE: String
  colorHexContains: String
  colorHexHasPrefix: String
  colorHexHasSuffix: String
  colorHexEqualFold: String
  colorHexContainsFold: String
  """
  district_id field predicates
  """
  districtID: ID
  districtIDNEQ: ID
  districtIDIn: [ID!]
  districtIDNotIn: [ID!]
  districtIDGT: ID
  districtIDGTE: ID
  districtIDLT: ID
  districtIDLTE: ID
  districtIDContains: ID
  districtIDHasPrefix: ID
  districtIDHasSuffix: ID
  districtIDEqualFold: ID
  districtIDContainsFold: ID
  """
  district edge predicates
  """
  hasDistrict: Boolean
  hasDistrictWith: [DistrictWhereInput!]
}
type PotentialTender implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
}
"""
A connection to a list of items.
"""
type PotentialTenderConnection {
  """
  A list of edges.
  """
  edges: [PotentialTenderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PotentialTenderEdge {
  """
  The item at the end of the edge.
  """
  node: PotentialTender
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PotentialTender connections
"""
input PotentialTenderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PotentialTenders.
  """
  field: PotentialTenderOrderField!
}
"""
Properties by which PotentialTender connections can be ordered.
"""
enum PotentialTenderOrderField {
  CREATED_AT
}
"""
PotentialTenderWhereInput is used for filtering PotentialTender objects.
Input was generated by ent.
"""
input PotentialTenderWhereInput {
  not: PotentialTenderWhereInput
  and: [PotentialTenderWhereInput!]
  or: [PotentialTenderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
}
type Project implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  code: String!
  """
  地盤經理
  """
  manager: String
  name: String
  """
  客戶
  """
  owner: String
  """
  建築師
  """
  jzs: String
  """
  總承包商
  """
  mcn: String
  """
  幕墻顧問
  """
  consultant: String
  """
  工程規模
  """
  areas: String
  """
  開工日期
  """
  startDate: Time
  """
  封頂日期
  """
  fsDate: Time
  """
  開始安裝日期
  """
  opDate: Time
  """
  竣工日期
  """
  endDate: Time
  """
  維修保養期
  """
  mntyr: String
  """
  中標形式
  """
  conType: String
  """
  是否完成
  """
  isFinished: Boolean!
  """
  成交额
  """
  cje: Float
  """
  营业额
  """
  yye: Float
  """
  现金流
  """
  xjl: Float
  """
  项目管理费预算
  """
  xmglfYs: Float
  """
  项目管理费累计
  """
  xmglfLj: Float
  """
  项目设计费
  """
  xmsjf: Float
  """
  项目负责人
  """
  xmfzr: String
  """
  业主申请总额
  """
  ownerApplyAmount: Float
  """
  业主申请数量
  """
  ownerApplyCount: Int
  """
  业主批复总额
  """
  ownerApproveAmount: Float
  """
  业主批复数量
  """
  ownerApproveCount: Int
  """
  总包申请总额
  """
  contractorApplyAmount: Float
  """
  总包申请数量
  """
  contractorApplyCount: Int
  """
  总包批复总额
  """
  contractorApproveAmount: Float
  """
  总包批复数量
  """
  contractorApproveCount: Int
  """
  安装进度
  """
  installProgress: Float
  """
  有效合同金额
  """
  effectiveContractAmount: Float
  """
  分判VA申请总额
  """
  vaApplyAmount: Float
  """
  分判VA批复总额
  """
  vaApproveAmount: Float
  """
  累计法定扣款
  """
  accumulatedStatutoryDeductions: Float
  """
  累计非法定扣款
  """
  accumulatedNonStatutoryDeductions: Float
  """
  本期法定扣款
  """
  accumulatedStatutoryDeductionsPeriod: Float
  """
  本期非法定扣款
  """
  accumulatedNonStatutoryDeductionsPeriod: Float
  """
  合約总额
  """
  totalContractAmount: Float
  """
  鋁板預算百分比
  """
  aluminumPlateBudgetPercentage: Float
  """
  鋁型材預算百分比
  """
  aluminumBudgetPercentage: Float
  """
  玻璃預算百分比
  """
  glassBudgetPercentage: Float
  """
  鐵型材預算百分比
  """
  ironBudgetPercentage: Float
  """
  里程碑計劃年份
  """
  milestonePlanYear: Int
  """
  里程碑計劃月份
  """
  milestonePlanMonth: Int
  """
  里程碑完成年份
  """
  milestoneDoneYear: Int
  """
  里程碑完成月份
  """
  milestoneDoneMonth: Int
  """
  生产管理面积
  """
  pmArea: Float
  """
  生产管理當年累計生產
  """
  pmYearTarget: Float
  """
  生产管理當月累計生產
  """
  pmMonthTarget: Float
  """
  生产管理當年實際生產
  """
  pmYearActual: Float
  """
  生产管理當月實際生產
  """
  pmMonthActual: Float
  """
  生产管理累計生產
  """
  pmTotal: Float
  """
  生产管理昨日生產
  """
  pmYesterday: Float
  """
  單元件庫存累計
  """
  unitInventoryTotal: Float
  """
  單元件總數
  """
  unitComponentTotal: Float
  """
  單元件生產數量
  """
  unitComponentProduction: Float
  """
  單元件安裝數量
  """
  unitComponentInstallation: Float
  """
  物料損失金額
  """
  materialLoss: Float
  """
  设计定额重量
  """
  designRatedWeight: Float
  """
  加工图成型重量
  """
  processingWeight: Float
  """
  項目物料庫存重量
  """
  itemStockWeight: Float
  """
  卡板庫存數量
  """
  palletsInStock: Float
  """
  散件庫存數量
  """
  partsInStock: Float
  """
  質量得分
  """
  qualityScore: Float
  """
  質量排名
  """
  qualityRanking: Float
  """
  散件總訂貨數量
  """
  bulkMaterialsTotalOrderQuantity: Float
  """
  散件已完成數量
  """
  bulkMaterialsCompletedQuantity: Float
  """
  散件未完成數量
  """
  bulkMaterialsUncompletedQuantity: Float
  """
  計劃總數
  """
  planTotalCount: Int
  """
  計劃超期數量
  """
  planOverdueCount: Int
  """
  當月計劃超期數量
  """
  planOverdueMonthCount: Int
  """
  BD圖紙完成數量
  """
  diagramBdFinishCount: Int
  """
  BD圖紙總數
  """
  diagramBdTotalCount: Int
  """
  施工圖紙完成數量
  """
  diagramConstructionFinishCount: Int
  """
  施工圖紙總數
  """
  diagramConstructionTotalCount: Int
  """
  加工圖完成數量
  """
  diagramProcessingFinishCount: Int
  """
  加工圖總數
  """
  diagramProcessingTotalCount: Int
  """
  C版批圖率分子
  """
  diagramCApprovalRatioNumerator: Int
  """
  C版批圖率分母
  """
  diagramCApprovalRatioDenominator: Int
  vos: [ProjectVO!]
  projectStaffs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProjectStaffs returned from the connection.
    """
    orderBy: [ProjectStaffOrder!]

    """
    Filtering options for ProjectStaffs returned from the connection.
    """
    where: ProjectStaffWhereInput
  ): ProjectStaffConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
A connection to a list of items.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProjectEdge {
  """
  The item at the end of the edge.
  """
  node: Project
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Project connections
"""
input ProjectOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Projects.
  """
  field: ProjectOrderField!
}
"""
Properties by which Project connections can be ordered.
"""
enum ProjectOrderField {
  CREATED_AT
  CODE
  NAME
}
type ProjectStaff implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """
  Code-YYYY-MM
  """
  cym: String!
  """
  安裝人數
  """
  installation: Float
  """
  管理人數
  """
  management: Float
  """
  設計人數
  """
  design: Float
  projectID: ID!
  project: Project!
}
"""
A connection to a list of items.
"""
type ProjectStaffConnection {
  """
  A list of edges.
  """
  edges: [ProjectStaffEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProjectStaffEdge {
  """
  The item at the end of the edge.
  """
  node: ProjectStaff
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ProjectStaff connections
"""
input ProjectStaffOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProjectStaffs.
  """
  field: ProjectStaffOrderField!
}
"""
Properties by which ProjectStaff connections can be ordered.
"""
enum ProjectStaffOrderField {
  CREATED_AT
}
"""
ProjectStaffWhereInput is used for filtering ProjectStaff objects.
Input was generated by ent.
"""
input ProjectStaffWhereInput {
  not: ProjectStaffWhereInput
  and: [ProjectStaffWhereInput!]
  or: [ProjectStaffWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  cym field predicates
  """
  cym: String
  cymNEQ: String
  cymIn: [String!]
  cymNotIn: [String!]
  cymGT: String
  cymGTE: String
  cymLT: String
  cymLTE: String
  cymContains: String
  cymHasPrefix: String
  cymHasSuffix: String
  cymEqualFold: String
  cymContainsFold: String
  """
  installation field predicates
  """
  installation: Float
  installationNEQ: Float
  installationIn: [Float!]
  installationNotIn: [Float!]
  installationGT: Float
  installationGTE: Float
  installationLT: Float
  installationLTE: Float
  installationIsNil: Boolean
  installationNotNil: Boolean
  """
  management field predicates
  """
  management: Float
  managementNEQ: Float
  managementIn: [Float!]
  managementNotIn: [Float!]
  managementGT: Float
  managementGTE: Float
  managementLT: Float
  managementLTE: Float
  managementIsNil: Boolean
  managementNotNil: Boolean
  """
  design field predicates
  """
  design: Float
  designNEQ: Float
  designIn: [Float!]
  designNotIn: [Float!]
  designGT: Float
  designGTE: Float
  designLT: Float
  designLTE: Float
  designIsNil: Boolean
  designNotNil: Boolean
  """
  project_id field predicates
  """
  projectID: ID
  projectIDNEQ: ID
  projectIDIn: [ID!]
  projectIDNotIn: [ID!]
  projectIDGT: ID
  projectIDGTE: ID
  projectIDLT: ID
  projectIDLTE: ID
  projectIDContains: ID
  projectIDHasPrefix: ID
  projectIDHasSuffix: ID
  projectIDEqualFold: ID
  projectIDContainsFold: ID
  """
  project edge predicates
  """
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
type ProjectVO implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  projectID: ID!
  """
  变更类型
  """
  changeType: Int!
  """
  是否已批复
  """
  isApproved: Boolean!
  """
  安装进度
  """
  azjd: Float
  """
  有效合约总额
  """
  yxhyze: Float
  """
  申请总额
  """
  applyAmount: Float
  """
  批复总额
  """
  approveAmount: Float
  project: Project!
}
"""
Ordering options for ProjectVO connections
"""
input ProjectVOOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ProjectVOs.
  """
  field: ProjectVOOrderField!
}
"""
Properties by which ProjectVO connections can be ordered.
"""
enum ProjectVOOrderField {
  CREATED_AT
}
"""
ProjectVOWhereInput is used for filtering ProjectVO objects.
Input was generated by ent.
"""
input ProjectVOWhereInput {
  not: ProjectVOWhereInput
  and: [ProjectVOWhereInput!]
  or: [ProjectVOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  project_id field predicates
  """
  projectID: ID
  projectIDNEQ: ID
  projectIDIn: [ID!]
  projectIDNotIn: [ID!]
  projectIDGT: ID
  projectIDGTE: ID
  projectIDLT: ID
  projectIDLTE: ID
  projectIDContains: ID
  projectIDHasPrefix: ID
  projectIDHasSuffix: ID
  projectIDEqualFold: ID
  projectIDContainsFold: ID
  """
  change_type field predicates
  """
  changeType: Int
  changeTypeNEQ: Int
  changeTypeIn: [Int!]
  changeTypeNotIn: [Int!]
  changeTypeGT: Int
  changeTypeGTE: Int
  changeTypeLT: Int
  changeTypeLTE: Int
  """
  is_approved field predicates
  """
  isApproved: Boolean
  isApprovedNEQ: Boolean
  """
  azjd field predicates
  """
  azjd: Float
  azjdNEQ: Float
  azjdIn: [Float!]
  azjdNotIn: [Float!]
  azjdGT: Float
  azjdGTE: Float
  azjdLT: Float
  azjdLTE: Float
  azjdIsNil: Boolean
  azjdNotNil: Boolean
  """
  yxhyze field predicates
  """
  yxhyze: Float
  yxhyzeNEQ: Float
  yxhyzeIn: [Float!]
  yxhyzeNotIn: [Float!]
  yxhyzeGT: Float
  yxhyzeGTE: Float
  yxhyzeLT: Float
  yxhyzeLTE: Float
  yxhyzeIsNil: Boolean
  yxhyzeNotNil: Boolean
  """
  apply_amount field predicates
  """
  applyAmount: Float
  applyAmountNEQ: Float
  applyAmountIn: [Float!]
  applyAmountNotIn: [Float!]
  applyAmountGT: Float
  applyAmountGTE: Float
  applyAmountLT: Float
  applyAmountLTE: Float
  applyAmountIsNil: Boolean
  applyAmountNotNil: Boolean
  """
  approve_amount field predicates
  """
  approveAmount: Float
  approveAmountNEQ: Float
  approveAmountIn: [Float!]
  approveAmountNotIn: [Float!]
  approveAmountGT: Float
  approveAmountGTE: Float
  approveAmountLT: Float
  approveAmountLTE: Float
  approveAmountIsNil: Boolean
  approveAmountNotNil: Boolean
  """
  project edge predicates
  """
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  manager field predicates
  """
  manager: String
  managerNEQ: String
  managerIn: [String!]
  managerNotIn: [String!]
  managerGT: String
  managerGTE: String
  managerLT: String
  managerLTE: String
  managerContains: String
  managerHasPrefix: String
  managerHasSuffix: String
  managerIsNil: Boolean
  managerNotNil: Boolean
  managerEqualFold: String
  managerContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  owner field predicates
  """
  owner: String
  ownerNEQ: String
  ownerIn: [String!]
  ownerNotIn: [String!]
  ownerGT: String
  ownerGTE: String
  ownerLT: String
  ownerLTE: String
  ownerContains: String
  ownerHasPrefix: String
  ownerHasSuffix: String
  ownerIsNil: Boolean
  ownerNotNil: Boolean
  ownerEqualFold: String
  ownerContainsFold: String
  """
  jzs field predicates
  """
  jzs: String
  jzsNEQ: String
  jzsIn: [String!]
  jzsNotIn: [String!]
  jzsGT: String
  jzsGTE: String
  jzsLT: String
  jzsLTE: String
  jzsContains: String
  jzsHasPrefix: String
  jzsHasSuffix: String
  jzsIsNil: Boolean
  jzsNotNil: Boolean
  jzsEqualFold: String
  jzsContainsFold: String
  """
  mcn field predicates
  """
  mcn: String
  mcnNEQ: String
  mcnIn: [String!]
  mcnNotIn: [String!]
  mcnGT: String
  mcnGTE: String
  mcnLT: String
  mcnLTE: String
  mcnContains: String
  mcnHasPrefix: String
  mcnHasSuffix: String
  mcnIsNil: Boolean
  mcnNotNil: Boolean
  mcnEqualFold: String
  mcnContainsFold: String
  """
  consultant field predicates
  """
  consultant: String
  consultantNEQ: String
  consultantIn: [String!]
  consultantNotIn: [String!]
  consultantGT: String
  consultantGTE: String
  consultantLT: String
  consultantLTE: String
  consultantContains: String
  consultantHasPrefix: String
  consultantHasSuffix: String
  consultantIsNil: Boolean
  consultantNotNil: Boolean
  consultantEqualFold: String
  consultantContainsFold: String
  """
  areas field predicates
  """
  areas: String
  areasNEQ: String
  areasIn: [String!]
  areasNotIn: [String!]
  areasGT: String
  areasGTE: String
  areasLT: String
  areasLTE: String
  areasContains: String
  areasHasPrefix: String
  areasHasSuffix: String
  areasIsNil: Boolean
  areasNotNil: Boolean
  areasEqualFold: String
  areasContainsFold: String
  """
  start_date field predicates
  """
  startDate: Time
  startDateNEQ: Time
  startDateIn: [Time!]
  startDateNotIn: [Time!]
  startDateGT: Time
  startDateGTE: Time
  startDateLT: Time
  startDateLTE: Time
  startDateIsNil: Boolean
  startDateNotNil: Boolean
  """
  fs_date field predicates
  """
  fsDate: Time
  fsDateNEQ: Time
  fsDateIn: [Time!]
  fsDateNotIn: [Time!]
  fsDateGT: Time
  fsDateGTE: Time
  fsDateLT: Time
  fsDateLTE: Time
  fsDateIsNil: Boolean
  fsDateNotNil: Boolean
  """
  op_date field predicates
  """
  opDate: Time
  opDateNEQ: Time
  opDateIn: [Time!]
  opDateNotIn: [Time!]
  opDateGT: Time
  opDateGTE: Time
  opDateLT: Time
  opDateLTE: Time
  opDateIsNil: Boolean
  opDateNotNil: Boolean
  """
  end_date field predicates
  """
  endDate: Time
  endDateNEQ: Time
  endDateIn: [Time!]
  endDateNotIn: [Time!]
  endDateGT: Time
  endDateGTE: Time
  endDateLT: Time
  endDateLTE: Time
  endDateIsNil: Boolean
  endDateNotNil: Boolean
  """
  mntyr field predicates
  """
  mntyr: String
  mntyrNEQ: String
  mntyrIn: [String!]
  mntyrNotIn: [String!]
  mntyrGT: String
  mntyrGTE: String
  mntyrLT: String
  mntyrLTE: String
  mntyrContains: String
  mntyrHasPrefix: String
  mntyrHasSuffix: String
  mntyrIsNil: Boolean
  mntyrNotNil: Boolean
  mntyrEqualFold: String
  mntyrContainsFold: String
  """
  con_type field predicates
  """
  conType: String
  conTypeNEQ: String
  conTypeIn: [String!]
  conTypeNotIn: [String!]
  conTypeGT: String
  conTypeGTE: String
  conTypeLT: String
  conTypeLTE: String
  conTypeContains: String
  conTypeHasPrefix: String
  conTypeHasSuffix: String
  conTypeIsNil: Boolean
  conTypeNotNil: Boolean
  conTypeEqualFold: String
  conTypeContainsFold: String
  """
  is_finished field predicates
  """
  isFinished: Boolean
  isFinishedNEQ: Boolean
  """
  cje field predicates
  """
  cje: Float
  cjeNEQ: Float
  cjeIn: [Float!]
  cjeNotIn: [Float!]
  cjeGT: Float
  cjeGTE: Float
  cjeLT: Float
  cjeLTE: Float
  cjeIsNil: Boolean
  cjeNotNil: Boolean
  """
  yye field predicates
  """
  yye: Float
  yyeNEQ: Float
  yyeIn: [Float!]
  yyeNotIn: [Float!]
  yyeGT: Float
  yyeGTE: Float
  yyeLT: Float
  yyeLTE: Float
  yyeIsNil: Boolean
  yyeNotNil: Boolean
  """
  xjl field predicates
  """
  xjl: Float
  xjlNEQ: Float
  xjlIn: [Float!]
  xjlNotIn: [Float!]
  xjlGT: Float
  xjlGTE: Float
  xjlLT: Float
  xjlLTE: Float
  xjlIsNil: Boolean
  xjlNotNil: Boolean
  """
  xmglf_ys field predicates
  """
  xmglfYs: Float
  xmglfYsNEQ: Float
  xmglfYsIn: [Float!]
  xmglfYsNotIn: [Float!]
  xmglfYsGT: Float
  xmglfYsGTE: Float
  xmglfYsLT: Float
  xmglfYsLTE: Float
  xmglfYsIsNil: Boolean
  xmglfYsNotNil: Boolean
  """
  xmglf_lj field predicates
  """
  xmglfLj: Float
  xmglfLjNEQ: Float
  xmglfLjIn: [Float!]
  xmglfLjNotIn: [Float!]
  xmglfLjGT: Float
  xmglfLjGTE: Float
  xmglfLjLT: Float
  xmglfLjLTE: Float
  xmglfLjIsNil: Boolean
  xmglfLjNotNil: Boolean
  """
  xmsjf field predicates
  """
  xmsjf: Float
  xmsjfNEQ: Float
  xmsjfIn: [Float!]
  xmsjfNotIn: [Float!]
  xmsjfGT: Float
  xmsjfGTE: Float
  xmsjfLT: Float
  xmsjfLTE: Float
  xmsjfIsNil: Boolean
  xmsjfNotNil: Boolean
  """
  xmfzr field predicates
  """
  xmfzr: String
  xmfzrNEQ: String
  xmfzrIn: [String!]
  xmfzrNotIn: [String!]
  xmfzrGT: String
  xmfzrGTE: String
  xmfzrLT: String
  xmfzrLTE: String
  xmfzrContains: String
  xmfzrHasPrefix: String
  xmfzrHasSuffix: String
  xmfzrIsNil: Boolean
  xmfzrNotNil: Boolean
  xmfzrEqualFold: String
  xmfzrContainsFold: String
  """
  owner_apply_amount field predicates
  """
  ownerApplyAmount: Float
  ownerApplyAmountNEQ: Float
  ownerApplyAmountIn: [Float!]
  ownerApplyAmountNotIn: [Float!]
  ownerApplyAmountGT: Float
  ownerApplyAmountGTE: Float
  ownerApplyAmountLT: Float
  ownerApplyAmountLTE: Float
  ownerApplyAmountIsNil: Boolean
  ownerApplyAmountNotNil: Boolean
  """
  owner_apply_count field predicates
  """
  ownerApplyCount: Int
  ownerApplyCountNEQ: Int
  ownerApplyCountIn: [Int!]
  ownerApplyCountNotIn: [Int!]
  ownerApplyCountGT: Int
  ownerApplyCountGTE: Int
  ownerApplyCountLT: Int
  ownerApplyCountLTE: Int
  ownerApplyCountIsNil: Boolean
  ownerApplyCountNotNil: Boolean
  """
  owner_approve_amount field predicates
  """
  ownerApproveAmount: Float
  ownerApproveAmountNEQ: Float
  ownerApproveAmountIn: [Float!]
  ownerApproveAmountNotIn: [Float!]
  ownerApproveAmountGT: Float
  ownerApproveAmountGTE: Float
  ownerApproveAmountLT: Float
  ownerApproveAmountLTE: Float
  ownerApproveAmountIsNil: Boolean
  ownerApproveAmountNotNil: Boolean
  """
  owner_approve_count field predicates
  """
  ownerApproveCount: Int
  ownerApproveCountNEQ: Int
  ownerApproveCountIn: [Int!]
  ownerApproveCountNotIn: [Int!]
  ownerApproveCountGT: Int
  ownerApproveCountGTE: Int
  ownerApproveCountLT: Int
  ownerApproveCountLTE: Int
  ownerApproveCountIsNil: Boolean
  ownerApproveCountNotNil: Boolean
  """
  contractor_apply_amount field predicates
  """
  contractorApplyAmount: Float
  contractorApplyAmountNEQ: Float
  contractorApplyAmountIn: [Float!]
  contractorApplyAmountNotIn: [Float!]
  contractorApplyAmountGT: Float
  contractorApplyAmountGTE: Float
  contractorApplyAmountLT: Float
  contractorApplyAmountLTE: Float
  contractorApplyAmountIsNil: Boolean
  contractorApplyAmountNotNil: Boolean
  """
  contractor_apply_count field predicates
  """
  contractorApplyCount: Int
  contractorApplyCountNEQ: Int
  contractorApplyCountIn: [Int!]
  contractorApplyCountNotIn: [Int!]
  contractorApplyCountGT: Int
  contractorApplyCountGTE: Int
  contractorApplyCountLT: Int
  contractorApplyCountLTE: Int
  contractorApplyCountIsNil: Boolean
  contractorApplyCountNotNil: Boolean
  """
  contractor_approve_amount field predicates
  """
  contractorApproveAmount: Float
  contractorApproveAmountNEQ: Float
  contractorApproveAmountIn: [Float!]
  contractorApproveAmountNotIn: [Float!]
  contractorApproveAmountGT: Float
  contractorApproveAmountGTE: Float
  contractorApproveAmountLT: Float
  contractorApproveAmountLTE: Float
  contractorApproveAmountIsNil: Boolean
  contractorApproveAmountNotNil: Boolean
  """
  contractor_approve_count field predicates
  """
  contractorApproveCount: Int
  contractorApproveCountNEQ: Int
  contractorApproveCountIn: [Int!]
  contractorApproveCountNotIn: [Int!]
  contractorApproveCountGT: Int
  contractorApproveCountGTE: Int
  contractorApproveCountLT: Int
  contractorApproveCountLTE: Int
  contractorApproveCountIsNil: Boolean
  contractorApproveCountNotNil: Boolean
  """
  install_progress field predicates
  """
  installProgress: Float
  installProgressNEQ: Float
  installProgressIn: [Float!]
  installProgressNotIn: [Float!]
  installProgressGT: Float
  installProgressGTE: Float
  installProgressLT: Float
  installProgressLTE: Float
  installProgressIsNil: Boolean
  installProgressNotNil: Boolean
  """
  effective_contract_amount field predicates
  """
  effectiveContractAmount: Float
  effectiveContractAmountNEQ: Float
  effectiveContractAmountIn: [Float!]
  effectiveContractAmountNotIn: [Float!]
  effectiveContractAmountGT: Float
  effectiveContractAmountGTE: Float
  effectiveContractAmountLT: Float
  effectiveContractAmountLTE: Float
  effectiveContractAmountIsNil: Boolean
  effectiveContractAmountNotNil: Boolean
  """
  va_apply_amount field predicates
  """
  vaApplyAmount: Float
  vaApplyAmountNEQ: Float
  vaApplyAmountIn: [Float!]
  vaApplyAmountNotIn: [Float!]
  vaApplyAmountGT: Float
  vaApplyAmountGTE: Float
  vaApplyAmountLT: Float
  vaApplyAmountLTE: Float
  vaApplyAmountIsNil: Boolean
  vaApplyAmountNotNil: Boolean
  """
  va_approve_amount field predicates
  """
  vaApproveAmount: Float
  vaApproveAmountNEQ: Float
  vaApproveAmountIn: [Float!]
  vaApproveAmountNotIn: [Float!]
  vaApproveAmountGT: Float
  vaApproveAmountGTE: Float
  vaApproveAmountLT: Float
  vaApproveAmountLTE: Float
  vaApproveAmountIsNil: Boolean
  vaApproveAmountNotNil: Boolean
  """
  accumulated_statutory_deductions field predicates
  """
  accumulatedStatutoryDeductions: Float
  accumulatedStatutoryDeductionsNEQ: Float
  accumulatedStatutoryDeductionsIn: [Float!]
  accumulatedStatutoryDeductionsNotIn: [Float!]
  accumulatedStatutoryDeductionsGT: Float
  accumulatedStatutoryDeductionsGTE: Float
  accumulatedStatutoryDeductionsLT: Float
  accumulatedStatutoryDeductionsLTE: Float
  accumulatedStatutoryDeductionsIsNil: Boolean
  accumulatedStatutoryDeductionsNotNil: Boolean
  """
  accumulated_non_statutory_deductions field predicates
  """
  accumulatedNonStatutoryDeductions: Float
  accumulatedNonStatutoryDeductionsNEQ: Float
  accumulatedNonStatutoryDeductionsIn: [Float!]
  accumulatedNonStatutoryDeductionsNotIn: [Float!]
  accumulatedNonStatutoryDeductionsGT: Float
  accumulatedNonStatutoryDeductionsGTE: Float
  accumulatedNonStatutoryDeductionsLT: Float
  accumulatedNonStatutoryDeductionsLTE: Float
  accumulatedNonStatutoryDeductionsIsNil: Boolean
  accumulatedNonStatutoryDeductionsNotNil: Boolean
  """
  accumulated_statutory_deductions_period field predicates
  """
  accumulatedStatutoryDeductionsPeriod: Float
  accumulatedStatutoryDeductionsPeriodNEQ: Float
  accumulatedStatutoryDeductionsPeriodIn: [Float!]
  accumulatedStatutoryDeductionsPeriodNotIn: [Float!]
  accumulatedStatutoryDeductionsPeriodGT: Float
  accumulatedStatutoryDeductionsPeriodGTE: Float
  accumulatedStatutoryDeductionsPeriodLT: Float
  accumulatedStatutoryDeductionsPeriodLTE: Float
  accumulatedStatutoryDeductionsPeriodIsNil: Boolean
  accumulatedStatutoryDeductionsPeriodNotNil: Boolean
  """
  accumulated_non_statutory_deductions_period field predicates
  """
  accumulatedNonStatutoryDeductionsPeriod: Float
  accumulatedNonStatutoryDeductionsPeriodNEQ: Float
  accumulatedNonStatutoryDeductionsPeriodIn: [Float!]
  accumulatedNonStatutoryDeductionsPeriodNotIn: [Float!]
  accumulatedNonStatutoryDeductionsPeriodGT: Float
  accumulatedNonStatutoryDeductionsPeriodGTE: Float
  accumulatedNonStatutoryDeductionsPeriodLT: Float
  accumulatedNonStatutoryDeductionsPeriodLTE: Float
  accumulatedNonStatutoryDeductionsPeriodIsNil: Boolean
  accumulatedNonStatutoryDeductionsPeriodNotNil: Boolean
  """
  total_contract_amount field predicates
  """
  totalContractAmount: Float
  totalContractAmountNEQ: Float
  totalContractAmountIn: [Float!]
  totalContractAmountNotIn: [Float!]
  totalContractAmountGT: Float
  totalContractAmountGTE: Float
  totalContractAmountLT: Float
  totalContractAmountLTE: Float
  totalContractAmountIsNil: Boolean
  totalContractAmountNotNil: Boolean
  """
  aluminum_plate_budget_percentage field predicates
  """
  aluminumPlateBudgetPercentage: Float
  aluminumPlateBudgetPercentageNEQ: Float
  aluminumPlateBudgetPercentageIn: [Float!]
  aluminumPlateBudgetPercentageNotIn: [Float!]
  aluminumPlateBudgetPercentageGT: Float
  aluminumPlateBudgetPercentageGTE: Float
  aluminumPlateBudgetPercentageLT: Float
  aluminumPlateBudgetPercentageLTE: Float
  aluminumPlateBudgetPercentageIsNil: Boolean
  aluminumPlateBudgetPercentageNotNil: Boolean
  """
  aluminum_budget_percentage field predicates
  """
  aluminumBudgetPercentage: Float
  aluminumBudgetPercentageNEQ: Float
  aluminumBudgetPercentageIn: [Float!]
  aluminumBudgetPercentageNotIn: [Float!]
  aluminumBudgetPercentageGT: Float
  aluminumBudgetPercentageGTE: Float
  aluminumBudgetPercentageLT: Float
  aluminumBudgetPercentageLTE: Float
  aluminumBudgetPercentageIsNil: Boolean
  aluminumBudgetPercentageNotNil: Boolean
  """
  glass_budget_percentage field predicates
  """
  glassBudgetPercentage: Float
  glassBudgetPercentageNEQ: Float
  glassBudgetPercentageIn: [Float!]
  glassBudgetPercentageNotIn: [Float!]
  glassBudgetPercentageGT: Float
  glassBudgetPercentageGTE: Float
  glassBudgetPercentageLT: Float
  glassBudgetPercentageLTE: Float
  glassBudgetPercentageIsNil: Boolean
  glassBudgetPercentageNotNil: Boolean
  """
  iron_budget_percentage field predicates
  """
  ironBudgetPercentage: Float
  ironBudgetPercentageNEQ: Float
  ironBudgetPercentageIn: [Float!]
  ironBudgetPercentageNotIn: [Float!]
  ironBudgetPercentageGT: Float
  ironBudgetPercentageGTE: Float
  ironBudgetPercentageLT: Float
  ironBudgetPercentageLTE: Float
  ironBudgetPercentageIsNil: Boolean
  ironBudgetPercentageNotNil: Boolean
  """
  milestone_plan_year field predicates
  """
  milestonePlanYear: Int
  milestonePlanYearNEQ: Int
  milestonePlanYearIn: [Int!]
  milestonePlanYearNotIn: [Int!]
  milestonePlanYearGT: Int
  milestonePlanYearGTE: Int
  milestonePlanYearLT: Int
  milestonePlanYearLTE: Int
  milestonePlanYearIsNil: Boolean
  milestonePlanYearNotNil: Boolean
  """
  milestone_plan_month field predicates
  """
  milestonePlanMonth: Int
  milestonePlanMonthNEQ: Int
  milestonePlanMonthIn: [Int!]
  milestonePlanMonthNotIn: [Int!]
  milestonePlanMonthGT: Int
  milestonePlanMonthGTE: Int
  milestonePlanMonthLT: Int
  milestonePlanMonthLTE: Int
  milestonePlanMonthIsNil: Boolean
  milestonePlanMonthNotNil: Boolean
  """
  milestone_done_year field predicates
  """
  milestoneDoneYear: Int
  milestoneDoneYearNEQ: Int
  milestoneDoneYearIn: [Int!]
  milestoneDoneYearNotIn: [Int!]
  milestoneDoneYearGT: Int
  milestoneDoneYearGTE: Int
  milestoneDoneYearLT: Int
  milestoneDoneYearLTE: Int
  milestoneDoneYearIsNil: Boolean
  milestoneDoneYearNotNil: Boolean
  """
  milestone_done_month field predicates
  """
  milestoneDoneMonth: Int
  milestoneDoneMonthNEQ: Int
  milestoneDoneMonthIn: [Int!]
  milestoneDoneMonthNotIn: [Int!]
  milestoneDoneMonthGT: Int
  milestoneDoneMonthGTE: Int
  milestoneDoneMonthLT: Int
  milestoneDoneMonthLTE: Int
  milestoneDoneMonthIsNil: Boolean
  milestoneDoneMonthNotNil: Boolean
  """
  pm_area field predicates
  """
  pmArea: Float
  pmAreaNEQ: Float
  pmAreaIn: [Float!]
  pmAreaNotIn: [Float!]
  pmAreaGT: Float
  pmAreaGTE: Float
  pmAreaLT: Float
  pmAreaLTE: Float
  pmAreaIsNil: Boolean
  pmAreaNotNil: Boolean
  """
  pm_year_target field predicates
  """
  pmYearTarget: Float
  pmYearTargetNEQ: Float
  pmYearTargetIn: [Float!]
  pmYearTargetNotIn: [Float!]
  pmYearTargetGT: Float
  pmYearTargetGTE: Float
  pmYearTargetLT: Float
  pmYearTargetLTE: Float
  pmYearTargetIsNil: Boolean
  pmYearTargetNotNil: Boolean
  """
  pm_month_target field predicates
  """
  pmMonthTarget: Float
  pmMonthTargetNEQ: Float
  pmMonthTargetIn: [Float!]
  pmMonthTargetNotIn: [Float!]
  pmMonthTargetGT: Float
  pmMonthTargetGTE: Float
  pmMonthTargetLT: Float
  pmMonthTargetLTE: Float
  pmMonthTargetIsNil: Boolean
  pmMonthTargetNotNil: Boolean
  """
  pm_year_actual field predicates
  """
  pmYearActual: Float
  pmYearActualNEQ: Float
  pmYearActualIn: [Float!]
  pmYearActualNotIn: [Float!]
  pmYearActualGT: Float
  pmYearActualGTE: Float
  pmYearActualLT: Float
  pmYearActualLTE: Float
  pmYearActualIsNil: Boolean
  pmYearActualNotNil: Boolean
  """
  pm_month_actual field predicates
  """
  pmMonthActual: Float
  pmMonthActualNEQ: Float
  pmMonthActualIn: [Float!]
  pmMonthActualNotIn: [Float!]
  pmMonthActualGT: Float
  pmMonthActualGTE: Float
  pmMonthActualLT: Float
  pmMonthActualLTE: Float
  pmMonthActualIsNil: Boolean
  pmMonthActualNotNil: Boolean
  """
  pm_total field predicates
  """
  pmTotal: Float
  pmTotalNEQ: Float
  pmTotalIn: [Float!]
  pmTotalNotIn: [Float!]
  pmTotalGT: Float
  pmTotalGTE: Float
  pmTotalLT: Float
  pmTotalLTE: Float
  pmTotalIsNil: Boolean
  pmTotalNotNil: Boolean
  """
  pm_yesterday field predicates
  """
  pmYesterday: Float
  pmYesterdayNEQ: Float
  pmYesterdayIn: [Float!]
  pmYesterdayNotIn: [Float!]
  pmYesterdayGT: Float
  pmYesterdayGTE: Float
  pmYesterdayLT: Float
  pmYesterdayLTE: Float
  pmYesterdayIsNil: Boolean
  pmYesterdayNotNil: Boolean
  """
  unit_inventory_total field predicates
  """
  unitInventoryTotal: Float
  unitInventoryTotalNEQ: Float
  unitInventoryTotalIn: [Float!]
  unitInventoryTotalNotIn: [Float!]
  unitInventoryTotalGT: Float
  unitInventoryTotalGTE: Float
  unitInventoryTotalLT: Float
  unitInventoryTotalLTE: Float
  unitInventoryTotalIsNil: Boolean
  unitInventoryTotalNotNil: Boolean
  """
  unit_component_total field predicates
  """
  unitComponentTotal: Float
  unitComponentTotalNEQ: Float
  unitComponentTotalIn: [Float!]
  unitComponentTotalNotIn: [Float!]
  unitComponentTotalGT: Float
  unitComponentTotalGTE: Float
  unitComponentTotalLT: Float
  unitComponentTotalLTE: Float
  unitComponentTotalIsNil: Boolean
  unitComponentTotalNotNil: Boolean
  """
  unit_component_production field predicates
  """
  unitComponentProduction: Float
  unitComponentProductionNEQ: Float
  unitComponentProductionIn: [Float!]
  unitComponentProductionNotIn: [Float!]
  unitComponentProductionGT: Float
  unitComponentProductionGTE: Float
  unitComponentProductionLT: Float
  unitComponentProductionLTE: Float
  unitComponentProductionIsNil: Boolean
  unitComponentProductionNotNil: Boolean
  """
  unit_component_installation field predicates
  """
  unitComponentInstallation: Float
  unitComponentInstallationNEQ: Float
  unitComponentInstallationIn: [Float!]
  unitComponentInstallationNotIn: [Float!]
  unitComponentInstallationGT: Float
  unitComponentInstallationGTE: Float
  unitComponentInstallationLT: Float
  unitComponentInstallationLTE: Float
  unitComponentInstallationIsNil: Boolean
  unitComponentInstallationNotNil: Boolean
  """
  material_loss field predicates
  """
  materialLoss: Float
  materialLossNEQ: Float
  materialLossIn: [Float!]
  materialLossNotIn: [Float!]
  materialLossGT: Float
  materialLossGTE: Float
  materialLossLT: Float
  materialLossLTE: Float
  materialLossIsNil: Boolean
  materialLossNotNil: Boolean
  """
  design_rated_weight field predicates
  """
  designRatedWeight: Float
  designRatedWeightNEQ: Float
  designRatedWeightIn: [Float!]
  designRatedWeightNotIn: [Float!]
  designRatedWeightGT: Float
  designRatedWeightGTE: Float
  designRatedWeightLT: Float
  designRatedWeightLTE: Float
  designRatedWeightIsNil: Boolean
  designRatedWeightNotNil: Boolean
  """
  processing_weight field predicates
  """
  processingWeight: Float
  processingWeightNEQ: Float
  processingWeightIn: [Float!]
  processingWeightNotIn: [Float!]
  processingWeightGT: Float
  processingWeightGTE: Float
  processingWeightLT: Float
  processingWeightLTE: Float
  processingWeightIsNil: Boolean
  processingWeightNotNil: Boolean
  """
  item_stock_weight field predicates
  """
  itemStockWeight: Float
  itemStockWeightNEQ: Float
  itemStockWeightIn: [Float!]
  itemStockWeightNotIn: [Float!]
  itemStockWeightGT: Float
  itemStockWeightGTE: Float
  itemStockWeightLT: Float
  itemStockWeightLTE: Float
  itemStockWeightIsNil: Boolean
  itemStockWeightNotNil: Boolean
  """
  pallets_in_stock field predicates
  """
  palletsInStock: Float
  palletsInStockNEQ: Float
  palletsInStockIn: [Float!]
  palletsInStockNotIn: [Float!]
  palletsInStockGT: Float
  palletsInStockGTE: Float
  palletsInStockLT: Float
  palletsInStockLTE: Float
  palletsInStockIsNil: Boolean
  palletsInStockNotNil: Boolean
  """
  parts_in_stock field predicates
  """
  partsInStock: Float
  partsInStockNEQ: Float
  partsInStockIn: [Float!]
  partsInStockNotIn: [Float!]
  partsInStockGT: Float
  partsInStockGTE: Float
  partsInStockLT: Float
  partsInStockLTE: Float
  partsInStockIsNil: Boolean
  partsInStockNotNil: Boolean
  """
  quality_score field predicates
  """
  qualityScore: Float
  qualityScoreNEQ: Float
  qualityScoreIn: [Float!]
  qualityScoreNotIn: [Float!]
  qualityScoreGT: Float
  qualityScoreGTE: Float
  qualityScoreLT: Float
  qualityScoreLTE: Float
  qualityScoreIsNil: Boolean
  qualityScoreNotNil: Boolean
  """
  quality_ranking field predicates
  """
  qualityRanking: Float
  qualityRankingNEQ: Float
  qualityRankingIn: [Float!]
  qualityRankingNotIn: [Float!]
  qualityRankingGT: Float
  qualityRankingGTE: Float
  qualityRankingLT: Float
  qualityRankingLTE: Float
  qualityRankingIsNil: Boolean
  qualityRankingNotNil: Boolean
  """
  bulk_materials_total_order_quantity field predicates
  """
  bulkMaterialsTotalOrderQuantity: Float
  bulkMaterialsTotalOrderQuantityNEQ: Float
  bulkMaterialsTotalOrderQuantityIn: [Float!]
  bulkMaterialsTotalOrderQuantityNotIn: [Float!]
  bulkMaterialsTotalOrderQuantityGT: Float
  bulkMaterialsTotalOrderQuantityGTE: Float
  bulkMaterialsTotalOrderQuantityLT: Float
  bulkMaterialsTotalOrderQuantityLTE: Float
  bulkMaterialsTotalOrderQuantityIsNil: Boolean
  bulkMaterialsTotalOrderQuantityNotNil: Boolean
  """
  bulk_materials_completed_quantity field predicates
  """
  bulkMaterialsCompletedQuantity: Float
  bulkMaterialsCompletedQuantityNEQ: Float
  bulkMaterialsCompletedQuantityIn: [Float!]
  bulkMaterialsCompletedQuantityNotIn: [Float!]
  bulkMaterialsCompletedQuantityGT: Float
  bulkMaterialsCompletedQuantityGTE: Float
  bulkMaterialsCompletedQuantityLT: Float
  bulkMaterialsCompletedQuantityLTE: Float
  bulkMaterialsCompletedQuantityIsNil: Boolean
  bulkMaterialsCompletedQuantityNotNil: Boolean
  """
  bulk_materials_uncompleted_quantity field predicates
  """
  bulkMaterialsUncompletedQuantity: Float
  bulkMaterialsUncompletedQuantityNEQ: Float
  bulkMaterialsUncompletedQuantityIn: [Float!]
  bulkMaterialsUncompletedQuantityNotIn: [Float!]
  bulkMaterialsUncompletedQuantityGT: Float
  bulkMaterialsUncompletedQuantityGTE: Float
  bulkMaterialsUncompletedQuantityLT: Float
  bulkMaterialsUncompletedQuantityLTE: Float
  bulkMaterialsUncompletedQuantityIsNil: Boolean
  bulkMaterialsUncompletedQuantityNotNil: Boolean
  """
  plan_total_count field predicates
  """
  planTotalCount: Int
  planTotalCountNEQ: Int
  planTotalCountIn: [Int!]
  planTotalCountNotIn: [Int!]
  planTotalCountGT: Int
  planTotalCountGTE: Int
  planTotalCountLT: Int
  planTotalCountLTE: Int
  planTotalCountIsNil: Boolean
  planTotalCountNotNil: Boolean
  """
  plan_overdue_count field predicates
  """
  planOverdueCount: Int
  planOverdueCountNEQ: Int
  planOverdueCountIn: [Int!]
  planOverdueCountNotIn: [Int!]
  planOverdueCountGT: Int
  planOverdueCountGTE: Int
  planOverdueCountLT: Int
  planOverdueCountLTE: Int
  planOverdueCountIsNil: Boolean
  planOverdueCountNotNil: Boolean
  """
  plan_overdue_month_count field predicates
  """
  planOverdueMonthCount: Int
  planOverdueMonthCountNEQ: Int
  planOverdueMonthCountIn: [Int!]
  planOverdueMonthCountNotIn: [Int!]
  planOverdueMonthCountGT: Int
  planOverdueMonthCountGTE: Int
  planOverdueMonthCountLT: Int
  planOverdueMonthCountLTE: Int
  planOverdueMonthCountIsNil: Boolean
  planOverdueMonthCountNotNil: Boolean
  """
  diagram_bd_finish_count field predicates
  """
  diagramBdFinishCount: Int
  diagramBdFinishCountNEQ: Int
  diagramBdFinishCountIn: [Int!]
  diagramBdFinishCountNotIn: [Int!]
  diagramBdFinishCountGT: Int
  diagramBdFinishCountGTE: Int
  diagramBdFinishCountLT: Int
  diagramBdFinishCountLTE: Int
  diagramBdFinishCountIsNil: Boolean
  diagramBdFinishCountNotNil: Boolean
  """
  diagram_bd_total_count field predicates
  """
  diagramBdTotalCount: Int
  diagramBdTotalCountNEQ: Int
  diagramBdTotalCountIn: [Int!]
  diagramBdTotalCountNotIn: [Int!]
  diagramBdTotalCountGT: Int
  diagramBdTotalCountGTE: Int
  diagramBdTotalCountLT: Int
  diagramBdTotalCountLTE: Int
  diagramBdTotalCountIsNil: Boolean
  diagramBdTotalCountNotNil: Boolean
  """
  diagram_construction_finish_count field predicates
  """
  diagramConstructionFinishCount: Int
  diagramConstructionFinishCountNEQ: Int
  diagramConstructionFinishCountIn: [Int!]
  diagramConstructionFinishCountNotIn: [Int!]
  diagramConstructionFinishCountGT: Int
  diagramConstructionFinishCountGTE: Int
  diagramConstructionFinishCountLT: Int
  diagramConstructionFinishCountLTE: Int
  diagramConstructionFinishCountIsNil: Boolean
  diagramConstructionFinishCountNotNil: Boolean
  """
  diagram_construction_total_count field predicates
  """
  diagramConstructionTotalCount: Int
  diagramConstructionTotalCountNEQ: Int
  diagramConstructionTotalCountIn: [Int!]
  diagramConstructionTotalCountNotIn: [Int!]
  diagramConstructionTotalCountGT: Int
  diagramConstructionTotalCountGTE: Int
  diagramConstructionTotalCountLT: Int
  diagramConstructionTotalCountLTE: Int
  diagramConstructionTotalCountIsNil: Boolean
  diagramConstructionTotalCountNotNil: Boolean
  """
  diagram_processing_finish_count field predicates
  """
  diagramProcessingFinishCount: Int
  diagramProcessingFinishCountNEQ: Int
  diagramProcessingFinishCountIn: [Int!]
  diagramProcessingFinishCountNotIn: [Int!]
  diagramProcessingFinishCountGT: Int
  diagramProcessingFinishCountGTE: Int
  diagramProcessingFinishCountLT: Int
  diagramProcessingFinishCountLTE: Int
  diagramProcessingFinishCountIsNil: Boolean
  diagramProcessingFinishCountNotNil: Boolean
  """
  diagram_processing_total_count field predicates
  """
  diagramProcessingTotalCount: Int
  diagramProcessingTotalCountNEQ: Int
  diagramProcessingTotalCountIn: [Int!]
  diagramProcessingTotalCountNotIn: [Int!]
  diagramProcessingTotalCountGT: Int
  diagramProcessingTotalCountGTE: Int
  diagramProcessingTotalCountLT: Int
  diagramProcessingTotalCountLTE: Int
  diagramProcessingTotalCountIsNil: Boolean
  diagramProcessingTotalCountNotNil: Boolean
  """
  diagram_c_approval_ratio_numerator field predicates
  """
  diagramCApprovalRatioNumerator: Int
  diagramCApprovalRatioNumeratorNEQ: Int
  diagramCApprovalRatioNumeratorIn: [Int!]
  diagramCApprovalRatioNumeratorNotIn: [Int!]
  diagramCApprovalRatioNumeratorGT: Int
  diagramCApprovalRatioNumeratorGTE: Int
  diagramCApprovalRatioNumeratorLT: Int
  diagramCApprovalRatioNumeratorLTE: Int
  diagramCApprovalRatioNumeratorIsNil: Boolean
  diagramCApprovalRatioNumeratorNotNil: Boolean
  """
  diagram_c_approval_ratio_denominator field predicates
  """
  diagramCApprovalRatioDenominator: Int
  diagramCApprovalRatioDenominatorNEQ: Int
  diagramCApprovalRatioDenominatorIn: [Int!]
  diagramCApprovalRatioDenominatorNotIn: [Int!]
  diagramCApprovalRatioDenominatorGT: Int
  diagramCApprovalRatioDenominatorGTE: Int
  diagramCApprovalRatioDenominatorLT: Int
  diagramCApprovalRatioDenominatorLTE: Int
  diagramCApprovalRatioDenominatorIsNil: Boolean
  diagramCApprovalRatioDenominatorNotNil: Boolean
  """
  vos edge predicates
  """
  hasVos: Boolean
  hasVosWith: [ProjectVOWhereInput!]
  """
  project_staffs edge predicates
  """
  hasProjectStaffs: Boolean
  hasProjectStaffsWith: [ProjectStaffWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type Province implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  countryID: ID!
  areaID: ID
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Districts returned from the connection.
    """
    orderBy: DistrictOrder

    """
    Filtering options for Districts returned from the connection.
    """
    where: DistrictWhereInput
  ): DistrictConnection!
  cities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cities returned from the connection.
    """
    orderBy: CityOrder

    """
    Filtering options for Cities returned from the connection.
    """
    where: CityWhereInput
  ): CityConnection!
  country: Country!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  area: Area
}
"""
A connection to a list of items.
"""
type ProvinceConnection {
  """
  A list of edges.
  """
  edges: [ProvinceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProvinceEdge {
  """
  The item at the end of the edge.
  """
  node: Province
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Province connections
"""
input ProvinceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Provinces.
  """
  field: ProvinceOrderField!
}
"""
Properties by which Province connections can be ordered.
"""
enum ProvinceOrderField {
  CREATED_AT
}
"""
ProvinceWhereInput is used for filtering Province objects.
Input was generated by ent.
"""
input ProvinceWhereInput {
  not: ProvinceWhereInput
  and: [ProvinceWhereInput!]
  or: [ProvinceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  country_id field predicates
  """
  countryID: ID
  countryIDNEQ: ID
  countryIDIn: [ID!]
  countryIDNotIn: [ID!]
  countryIDGT: ID
  countryIDGTE: ID
  countryIDLT: ID
  countryIDLTE: ID
  countryIDContains: ID
  countryIDHasPrefix: ID
  countryIDHasSuffix: ID
  countryIDEqualFold: ID
  countryIDContainsFold: ID
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDIsNil: Boolean
  areaIDNotNil: Boolean
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  cities edge predicates
  """
  hasCities: Boolean
  hasCitiesWith: [CityWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  areas(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Areas returned from the connection.
    """
    orderBy: AreaOrder

    """
    Filtering options for Areas returned from the connection.
    """
    where: AreaWhereInput
  ): AreaConnection!
  cities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cities returned from the connection.
    """
    orderBy: CityOrder

    """
    Filtering options for Cities returned from the connection.
    """
    where: CityWhereInput
  ): CityConnection!
  competitors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Competitors returned from the connection.
    """
    orderBy: [CompetitorOrder!]

    """
    Filtering options for Competitors returned from the connection.
    """
    where: CompetitorWhereInput
  ): CompetitorConnection!
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Countries returned from the connection.
    """
    orderBy: CountryOrder

    """
    Filtering options for Countries returned from the connection.
    """
    where: CountryWhereInput
  ): CountryConnection!
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Customers returned from the connection.
    """
    orderBy: [CustomerOrder!]

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Districts returned from the connection.
    """
    orderBy: DistrictOrder

    """
    Filtering options for Districts returned from the connection.
    """
    where: DistrictWhereInput
  ): DistrictConnection!
  operations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Operations returned from the connection.
    """
    orderBy: OperationOrder

    """
    Filtering options for Operations returned from the connection.
    """
    where: OperationWhereInput
  ): OperationConnection!
  plots(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Plots returned from the connection.
    """
    orderBy: PlotOrder

    """
    Filtering options for Plots returned from the connection.
    """
    where: PlotWhereInput
  ): PlotConnection!
  potentialTenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PotentialTenders returned from the connection.
    """
    orderBy: [PotentialTenderOrder!]

    """
    Filtering options for PotentialTenders returned from the connection.
    """
    where: PotentialTenderWhereInput
  ): PotentialTenderConnection!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Projects returned from the connection.
    """
    orderBy: [ProjectOrder!]

    """
    Filtering options for Projects returned from the connection.
    """
    where: ProjectWhereInput
  ): ProjectConnection!
  projectStaffs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ProjectStaffs returned from the connection.
    """
    orderBy: [ProjectStaffOrder!]

    """
    Filtering options for ProjectStaffs returned from the connection.
    """
    where: ProjectStaffWhereInput
  ): ProjectStaffConnection!
  provinces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Provinces returned from the connection.
    """
    orderBy: ProvinceOrder

    """
    Filtering options for Provinces returned from the connection.
    """
    where: ProvinceWhereInput
  ): ProvinceConnection!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  visitRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for VisitRecords returned from the connection.
    """
    orderBy: [VisitRecordOrder!]

    """
    Filtering options for VisitRecords returned from the connection.
    """
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
}
type Tender implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  code: String!
  status: Int!
  isApproved: Boolean!
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  classify: Int
  discoveryDate: Time!
  address: String
  fullAddress: String
  contractor: String
  levelInvolved: Int
  sizeAndValueRating: Int
  sizeAndValueRatingOverview: String
  creditAndPaymentRating: Int
  creditAndPaymentRatingOverview: String
  timeLimitRating: Int
  timeLimitRatingOverview: String
  customerRelationshipRating: Int
  customerRelationshipRatingOverview: String
  competitivePartnershipRating: Int
  competitivePartnershipRatingOverview: String
  prepareToBid: Boolean!
  projectCode: String
  projectType: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  attachements: [String!]
  remark: String
  images: [String!]
  tenderSituations: String
  ownerSituations: String
  biddingInstructions: String
  competitorSituations: String
  costEngineer: String
  tenderForm: String
  contractForm: String
  managementCompany: String
  tenderingAgency: String
  biddingDate: Time
  facadeConsultant: String
  designUnit: String
  consultingFirm: String
  keyProject: Boolean!
  currentProgress: String
  tenderWinCompany: String
  """
  投標編號，只限港澳
  """
  tenderCode: String
  """
  則師，只限港澳
  """
  architect: String
  """
  業主，只限港澳
  """
  developer: String
  """
  交標日期，只限港澳
  """
  tenderClosingDate: Time
  """
  施工面積，只限港澳
  """
  constructionArea: String
  """
  得標日期，只限港澳
  """
  tenderWinDate: Time
  """
  得標金額
  """
  tenderWinAmount: Float
  """
  最後一次投標金額，只限港澳
  """
  lastTenderAmount: Float
  areaID: ID!
  provinceID: ID
  cityID: ID
  districtID: ID
  customerID: ID
  finderID: ID
  createdByID: ID
  competitorID: ID
  approverID: ID
  area: Area!
  customer: Customer
  finder: User
  createdBy: User
  followingSales: [User!]
  province: Province
  city: City
  district: District
  visitRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for VisitRecords returned from the connection.
    """
    orderBy: [VisitRecordOrder!]

    """
    Filtering options for VisitRecords returned from the connection.
    """
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
  competitor: Competitor
  approver: User
}
"""
A connection to a list of items.
"""
type TenderConnection {
  """
  A list of edges.
  """
  edges: [TenderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenderEdge {
  """
  The item at the end of the edge.
  """
  node: Tender
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tender connections
"""
input TenderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tenders.
  """
  field: TenderOrderField!
}
"""
Properties by which Tender connections can be ordered.
"""
enum TenderOrderField {
  CREATED_AT
  NAME
  TENDER_DATE
  CLOSING_DATE
}
"""
TenderWhereInput is used for filtering Tender objects.
Input was generated by ent.
"""
input TenderWhereInput {
  not: TenderWhereInput
  and: [TenderWhereInput!]
  or: [TenderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  status field predicates
  """
  status: Int
  statusNEQ: Int
  statusIn: [Int!]
  statusNotIn: [Int!]
  statusGT: Int
  statusGTE: Int
  statusLT: Int
  statusLTE: Int
  """
  is_approved field predicates
  """
  isApproved: Boolean
  isApprovedNEQ: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  estimated_amount field predicates
  """
  estimatedAmount: Float
  estimatedAmountNEQ: Float
  estimatedAmountIn: [Float!]
  estimatedAmountNotIn: [Float!]
  estimatedAmountGT: Float
  estimatedAmountGTE: Float
  estimatedAmountLT: Float
  estimatedAmountLTE: Float
  estimatedAmountIsNil: Boolean
  estimatedAmountNotNil: Boolean
  """
  tender_date field predicates
  """
  tenderDate: Time
  tenderDateNEQ: Time
  tenderDateIn: [Time!]
  tenderDateNotIn: [Time!]
  tenderDateGT: Time
  tenderDateGTE: Time
  tenderDateLT: Time
  tenderDateLTE: Time
  tenderDateIsNil: Boolean
  tenderDateNotNil: Boolean
  """
  classify field predicates
  """
  classify: Int
  classifyNEQ: Int
  classifyIn: [Int!]
  classifyNotIn: [Int!]
  classifyGT: Int
  classifyGTE: Int
  classifyLT: Int
  classifyLTE: Int
  classifyIsNil: Boolean
  classifyNotNil: Boolean
  """
  discovery_date field predicates
  """
  discoveryDate: Time
  discoveryDateNEQ: Time
  discoveryDateIn: [Time!]
  discoveryDateNotIn: [Time!]
  discoveryDateGT: Time
  discoveryDateGTE: Time
  discoveryDateLT: Time
  discoveryDateLTE: Time
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  full_address field predicates
  """
  fullAddress: String
  fullAddressNEQ: String
  fullAddressIn: [String!]
  fullAddressNotIn: [String!]
  fullAddressGT: String
  fullAddressGTE: String
  fullAddressLT: String
  fullAddressLTE: String
  fullAddressContains: String
  fullAddressHasPrefix: String
  fullAddressHasSuffix: String
  fullAddressIsNil: Boolean
  fullAddressNotNil: Boolean
  fullAddressEqualFold: String
  fullAddressContainsFold: String
  """
  contractor field predicates
  """
  contractor: String
  contractorNEQ: String
  contractorIn: [String!]
  contractorNotIn: [String!]
  contractorGT: String
  contractorGTE: String
  contractorLT: String
  contractorLTE: String
  contractorContains: String
  contractorHasPrefix: String
  contractorHasSuffix: String
  contractorIsNil: Boolean
  contractorNotNil: Boolean
  contractorEqualFold: String
  contractorContainsFold: String
  """
  level_involved field predicates
  """
  levelInvolved: Int
  levelInvolvedNEQ: Int
  levelInvolvedIn: [Int!]
  levelInvolvedNotIn: [Int!]
  levelInvolvedGT: Int
  levelInvolvedGTE: Int
  levelInvolvedLT: Int
  levelInvolvedLTE: Int
  levelInvolvedIsNil: Boolean
  levelInvolvedNotNil: Boolean
  """
  size_and_value_rating field predicates
  """
  sizeAndValueRating: Int
  sizeAndValueRatingNEQ: Int
  sizeAndValueRatingIn: [Int!]
  sizeAndValueRatingNotIn: [Int!]
  sizeAndValueRatingGT: Int
  sizeAndValueRatingGTE: Int
  sizeAndValueRatingLT: Int
  sizeAndValueRatingLTE: Int
  sizeAndValueRatingIsNil: Boolean
  sizeAndValueRatingNotNil: Boolean
  """
  size_and_value_rating_overview field predicates
  """
  sizeAndValueRatingOverview: String
  sizeAndValueRatingOverviewNEQ: String
  sizeAndValueRatingOverviewIn: [String!]
  sizeAndValueRatingOverviewNotIn: [String!]
  sizeAndValueRatingOverviewGT: String
  sizeAndValueRatingOverviewGTE: String
  sizeAndValueRatingOverviewLT: String
  sizeAndValueRatingOverviewLTE: String
  sizeAndValueRatingOverviewContains: String
  sizeAndValueRatingOverviewHasPrefix: String
  sizeAndValueRatingOverviewHasSuffix: String
  sizeAndValueRatingOverviewIsNil: Boolean
  sizeAndValueRatingOverviewNotNil: Boolean
  sizeAndValueRatingOverviewEqualFold: String
  sizeAndValueRatingOverviewContainsFold: String
  """
  credit_and_payment_rating field predicates
  """
  creditAndPaymentRating: Int
  creditAndPaymentRatingNEQ: Int
  creditAndPaymentRatingIn: [Int!]
  creditAndPaymentRatingNotIn: [Int!]
  creditAndPaymentRatingGT: Int
  creditAndPaymentRatingGTE: Int
  creditAndPaymentRatingLT: Int
  creditAndPaymentRatingLTE: Int
  creditAndPaymentRatingIsNil: Boolean
  creditAndPaymentRatingNotNil: Boolean
  """
  credit_and_payment_rating_overview field predicates
  """
  creditAndPaymentRatingOverview: String
  creditAndPaymentRatingOverviewNEQ: String
  creditAndPaymentRatingOverviewIn: [String!]
  creditAndPaymentRatingOverviewNotIn: [String!]
  creditAndPaymentRatingOverviewGT: String
  creditAndPaymentRatingOverviewGTE: String
  creditAndPaymentRatingOverviewLT: String
  creditAndPaymentRatingOverviewLTE: String
  creditAndPaymentRatingOverviewContains: String
  creditAndPaymentRatingOverviewHasPrefix: String
  creditAndPaymentRatingOverviewHasSuffix: String
  creditAndPaymentRatingOverviewIsNil: Boolean
  creditAndPaymentRatingOverviewNotNil: Boolean
  creditAndPaymentRatingOverviewEqualFold: String
  creditAndPaymentRatingOverviewContainsFold: String
  """
  time_limit_rating field predicates
  """
  timeLimitRating: Int
  timeLimitRatingNEQ: Int
  timeLimitRatingIn: [Int!]
  timeLimitRatingNotIn: [Int!]
  timeLimitRatingGT: Int
  timeLimitRatingGTE: Int
  timeLimitRatingLT: Int
  timeLimitRatingLTE: Int
  timeLimitRatingIsNil: Boolean
  timeLimitRatingNotNil: Boolean
  """
  time_limit_rating_overview field predicates
  """
  timeLimitRatingOverview: String
  timeLimitRatingOverviewNEQ: String
  timeLimitRatingOverviewIn: [String!]
  timeLimitRatingOverviewNotIn: [String!]
  timeLimitRatingOverviewGT: String
  timeLimitRatingOverviewGTE: String
  timeLimitRatingOverviewLT: String
  timeLimitRatingOverviewLTE: String
  timeLimitRatingOverviewContains: String
  timeLimitRatingOverviewHasPrefix: String
  timeLimitRatingOverviewHasSuffix: String
  timeLimitRatingOverviewIsNil: Boolean
  timeLimitRatingOverviewNotNil: Boolean
  timeLimitRatingOverviewEqualFold: String
  timeLimitRatingOverviewContainsFold: String
  """
  customer_relationship_rating field predicates
  """
  customerRelationshipRating: Int
  customerRelationshipRatingNEQ: Int
  customerRelationshipRatingIn: [Int!]
  customerRelationshipRatingNotIn: [Int!]
  customerRelationshipRatingGT: Int
  customerRelationshipRatingGTE: Int
  customerRelationshipRatingLT: Int
  customerRelationshipRatingLTE: Int
  customerRelationshipRatingIsNil: Boolean
  customerRelationshipRatingNotNil: Boolean
  """
  customer_relationship_rating_overview field predicates
  """
  customerRelationshipRatingOverview: String
  customerRelationshipRatingOverviewNEQ: String
  customerRelationshipRatingOverviewIn: [String!]
  customerRelationshipRatingOverviewNotIn: [String!]
  customerRelationshipRatingOverviewGT: String
  customerRelationshipRatingOverviewGTE: String
  customerRelationshipRatingOverviewLT: String
  customerRelationshipRatingOverviewLTE: String
  customerRelationshipRatingOverviewContains: String
  customerRelationshipRatingOverviewHasPrefix: String
  customerRelationshipRatingOverviewHasSuffix: String
  customerRelationshipRatingOverviewIsNil: Boolean
  customerRelationshipRatingOverviewNotNil: Boolean
  customerRelationshipRatingOverviewEqualFold: String
  customerRelationshipRatingOverviewContainsFold: String
  """
  competitive_partnership_rating field predicates
  """
  competitivePartnershipRating: Int
  competitivePartnershipRatingNEQ: Int
  competitivePartnershipRatingIn: [Int!]
  competitivePartnershipRatingNotIn: [Int!]
  competitivePartnershipRatingGT: Int
  competitivePartnershipRatingGTE: Int
  competitivePartnershipRatingLT: Int
  competitivePartnershipRatingLTE: Int
  competitivePartnershipRatingIsNil: Boolean
  competitivePartnershipRatingNotNil: Boolean
  """
  competitive_partnership_rating_overview field predicates
  """
  competitivePartnershipRatingOverview: String
  competitivePartnershipRatingOverviewNEQ: String
  competitivePartnershipRatingOverviewIn: [String!]
  competitivePartnershipRatingOverviewNotIn: [String!]
  competitivePartnershipRatingOverviewGT: String
  competitivePartnershipRatingOverviewGTE: String
  competitivePartnershipRatingOverviewLT: String
  competitivePartnershipRatingOverviewLTE: String
  competitivePartnershipRatingOverviewContains: String
  competitivePartnershipRatingOverviewHasPrefix: String
  competitivePartnershipRatingOverviewHasSuffix: String
  competitivePartnershipRatingOverviewIsNil: Boolean
  competitivePartnershipRatingOverviewNotNil: Boolean
  competitivePartnershipRatingOverviewEqualFold: String
  competitivePartnershipRatingOverviewContainsFold: String
  """
  prepare_to_bid field predicates
  """
  prepareToBid: Boolean
  prepareToBidNEQ: Boolean
  """
  project_code field predicates
  """
  projectCode: String
  projectCodeNEQ: String
  projectCodeIn: [String!]
  projectCodeNotIn: [String!]
  projectCodeGT: String
  projectCodeGTE: String
  projectCodeLT: String
  projectCodeLTE: String
  projectCodeContains: String
  projectCodeHasPrefix: String
  projectCodeHasSuffix: String
  projectCodeIsNil: Boolean
  projectCodeNotNil: Boolean
  projectCodeEqualFold: String
  projectCodeContainsFold: String
  """
  project_type field predicates
  """
  projectType: String
  projectTypeNEQ: String
  projectTypeIn: [String!]
  projectTypeNotIn: [String!]
  projectTypeGT: String
  projectTypeGTE: String
  projectTypeLT: String
  projectTypeLTE: String
  projectTypeContains: String
  projectTypeHasPrefix: String
  projectTypeHasSuffix: String
  projectTypeIsNil: Boolean
  projectTypeNotNil: Boolean
  projectTypeEqualFold: String
  projectTypeContainsFold: String
  """
  project_definition field predicates
  """
  projectDefinition: String
  projectDefinitionNEQ: String
  projectDefinitionIn: [String!]
  projectDefinitionNotIn: [String!]
  projectDefinitionGT: String
  projectDefinitionGTE: String
  projectDefinitionLT: String
  projectDefinitionLTE: String
  projectDefinitionContains: String
  projectDefinitionHasPrefix: String
  projectDefinitionHasSuffix: String
  projectDefinitionIsNil: Boolean
  projectDefinitionNotNil: Boolean
  projectDefinitionEqualFold: String
  projectDefinitionContainsFold: String
  """
  estimated_project_start_date field predicates
  """
  estimatedProjectStartDate: Time
  estimatedProjectStartDateNEQ: Time
  estimatedProjectStartDateIn: [Time!]
  estimatedProjectStartDateNotIn: [Time!]
  estimatedProjectStartDateGT: Time
  estimatedProjectStartDateGTE: Time
  estimatedProjectStartDateLT: Time
  estimatedProjectStartDateLTE: Time
  estimatedProjectStartDateIsNil: Boolean
  estimatedProjectStartDateNotNil: Boolean
  """
  estimated_project_end_date field predicates
  """
  estimatedProjectEndDate: Time
  estimatedProjectEndDateNEQ: Time
  estimatedProjectEndDateIn: [Time!]
  estimatedProjectEndDateNotIn: [Time!]
  estimatedProjectEndDateGT: Time
  estimatedProjectEndDateGTE: Time
  estimatedProjectEndDateLT: Time
  estimatedProjectEndDateLTE: Time
  estimatedProjectEndDateIsNil: Boolean
  estimatedProjectEndDateNotNil: Boolean
  """
  remark field predicates
  """
  remark: String
  remarkNEQ: String
  remarkIn: [String!]
  remarkNotIn: [String!]
  remarkGT: String
  remarkGTE: String
  remarkLT: String
  remarkLTE: String
  remarkContains: String
  remarkHasPrefix: String
  remarkHasSuffix: String
  remarkIsNil: Boolean
  remarkNotNil: Boolean
  remarkEqualFold: String
  remarkContainsFold: String
  """
  tender_situations field predicates
  """
  tenderSituations: String
  tenderSituationsNEQ: String
  tenderSituationsIn: [String!]
  tenderSituationsNotIn: [String!]
  tenderSituationsGT: String
  tenderSituationsGTE: String
  tenderSituationsLT: String
  tenderSituationsLTE: String
  tenderSituationsContains: String
  tenderSituationsHasPrefix: String
  tenderSituationsHasSuffix: String
  tenderSituationsIsNil: Boolean
  tenderSituationsNotNil: Boolean
  tenderSituationsEqualFold: String
  tenderSituationsContainsFold: String
  """
  owner_situations field predicates
  """
  ownerSituations: String
  ownerSituationsNEQ: String
  ownerSituationsIn: [String!]
  ownerSituationsNotIn: [String!]
  ownerSituationsGT: String
  ownerSituationsGTE: String
  ownerSituationsLT: String
  ownerSituationsLTE: String
  ownerSituationsContains: String
  ownerSituationsHasPrefix: String
  ownerSituationsHasSuffix: String
  ownerSituationsIsNil: Boolean
  ownerSituationsNotNil: Boolean
  ownerSituationsEqualFold: String
  ownerSituationsContainsFold: String
  """
  bidding_instructions field predicates
  """
  biddingInstructions: String
  biddingInstructionsNEQ: String
  biddingInstructionsIn: [String!]
  biddingInstructionsNotIn: [String!]
  biddingInstructionsGT: String
  biddingInstructionsGTE: String
  biddingInstructionsLT: String
  biddingInstructionsLTE: String
  biddingInstructionsContains: String
  biddingInstructionsHasPrefix: String
  biddingInstructionsHasSuffix: String
  biddingInstructionsIsNil: Boolean
  biddingInstructionsNotNil: Boolean
  biddingInstructionsEqualFold: String
  biddingInstructionsContainsFold: String
  """
  competitor_situations field predicates
  """
  competitorSituations: String
  competitorSituationsNEQ: String
  competitorSituationsIn: [String!]
  competitorSituationsNotIn: [String!]
  competitorSituationsGT: String
  competitorSituationsGTE: String
  competitorSituationsLT: String
  competitorSituationsLTE: String
  competitorSituationsContains: String
  competitorSituationsHasPrefix: String
  competitorSituationsHasSuffix: String
  competitorSituationsIsNil: Boolean
  competitorSituationsNotNil: Boolean
  competitorSituationsEqualFold: String
  competitorSituationsContainsFold: String
  """
  cost_engineer field predicates
  """
  costEngineer: String
  costEngineerNEQ: String
  costEngineerIn: [String!]
  costEngineerNotIn: [String!]
  costEngineerGT: String
  costEngineerGTE: String
  costEngineerLT: String
  costEngineerLTE: String
  costEngineerContains: String
  costEngineerHasPrefix: String
  costEngineerHasSuffix: String
  costEngineerIsNil: Boolean
  costEngineerNotNil: Boolean
  costEngineerEqualFold: String
  costEngineerContainsFold: String
  """
  tender_form field predicates
  """
  tenderForm: String
  tenderFormNEQ: String
  tenderFormIn: [String!]
  tenderFormNotIn: [String!]
  tenderFormGT: String
  tenderFormGTE: String
  tenderFormLT: String
  tenderFormLTE: String
  tenderFormContains: String
  tenderFormHasPrefix: String
  tenderFormHasSuffix: String
  tenderFormIsNil: Boolean
  tenderFormNotNil: Boolean
  tenderFormEqualFold: String
  tenderFormContainsFold: String
  """
  contract_form field predicates
  """
  contractForm: String
  contractFormNEQ: String
  contractFormIn: [String!]
  contractFormNotIn: [String!]
  contractFormGT: String
  contractFormGTE: String
  contractFormLT: String
  contractFormLTE: String
  contractFormContains: String
  contractFormHasPrefix: String
  contractFormHasSuffix: String
  contractFormIsNil: Boolean
  contractFormNotNil: Boolean
  contractFormEqualFold: String
  contractFormContainsFold: String
  """
  management_company field predicates
  """
  managementCompany: String
  managementCompanyNEQ: String
  managementCompanyIn: [String!]
  managementCompanyNotIn: [String!]
  managementCompanyGT: String
  managementCompanyGTE: String
  managementCompanyLT: String
  managementCompanyLTE: String
  managementCompanyContains: String
  managementCompanyHasPrefix: String
  managementCompanyHasSuffix: String
  managementCompanyIsNil: Boolean
  managementCompanyNotNil: Boolean
  managementCompanyEqualFold: String
  managementCompanyContainsFold: String
  """
  tendering_agency field predicates
  """
  tenderingAgency: String
  tenderingAgencyNEQ: String
  tenderingAgencyIn: [String!]
  tenderingAgencyNotIn: [String!]
  tenderingAgencyGT: String
  tenderingAgencyGTE: String
  tenderingAgencyLT: String
  tenderingAgencyLTE: String
  tenderingAgencyContains: String
  tenderingAgencyHasPrefix: String
  tenderingAgencyHasSuffix: String
  tenderingAgencyIsNil: Boolean
  tenderingAgencyNotNil: Boolean
  tenderingAgencyEqualFold: String
  tenderingAgencyContainsFold: String
  """
  bidding_date field predicates
  """
  biddingDate: Time
  biddingDateNEQ: Time
  biddingDateIn: [Time!]
  biddingDateNotIn: [Time!]
  biddingDateGT: Time
  biddingDateGTE: Time
  biddingDateLT: Time
  biddingDateLTE: Time
  biddingDateIsNil: Boolean
  biddingDateNotNil: Boolean
  """
  facade_consultant field predicates
  """
  facadeConsultant: String
  facadeConsultantNEQ: String
  facadeConsultantIn: [String!]
  facadeConsultantNotIn: [String!]
  facadeConsultantGT: String
  facadeConsultantGTE: String
  facadeConsultantLT: String
  facadeConsultantLTE: String
  facadeConsultantContains: String
  facadeConsultantHasPrefix: String
  facadeConsultantHasSuffix: String
  facadeConsultantIsNil: Boolean
  facadeConsultantNotNil: Boolean
  facadeConsultantEqualFold: String
  facadeConsultantContainsFold: String
  """
  design_unit field predicates
  """
  designUnit: String
  designUnitNEQ: String
  designUnitIn: [String!]
  designUnitNotIn: [String!]
  designUnitGT: String
  designUnitGTE: String
  designUnitLT: String
  designUnitLTE: String
  designUnitContains: String
  designUnitHasPrefix: String
  designUnitHasSuffix: String
  designUnitIsNil: Boolean
  designUnitNotNil: Boolean
  designUnitEqualFold: String
  designUnitContainsFold: String
  """
  consulting_firm field predicates
  """
  consultingFirm: String
  consultingFirmNEQ: String
  consultingFirmIn: [String!]
  consultingFirmNotIn: [String!]
  consultingFirmGT: String
  consultingFirmGTE: String
  consultingFirmLT: String
  consultingFirmLTE: String
  consultingFirmContains: String
  consultingFirmHasPrefix: String
  consultingFirmHasSuffix: String
  consultingFirmIsNil: Boolean
  consultingFirmNotNil: Boolean
  consultingFirmEqualFold: String
  consultingFirmContainsFold: String
  """
  key_project field predicates
  """
  keyProject: Boolean
  keyProjectNEQ: Boolean
  """
  current_progress field predicates
  """
  currentProgress: String
  currentProgressNEQ: String
  currentProgressIn: [String!]
  currentProgressNotIn: [String!]
  currentProgressGT: String
  currentProgressGTE: String
  currentProgressLT: String
  currentProgressLTE: String
  currentProgressContains: String
  currentProgressHasPrefix: String
  currentProgressHasSuffix: String
  currentProgressIsNil: Boolean
  currentProgressNotNil: Boolean
  currentProgressEqualFold: String
  currentProgressContainsFold: String
  """
  tender_win_company field predicates
  """
  tenderWinCompany: String
  tenderWinCompanyNEQ: String
  tenderWinCompanyIn: [String!]
  tenderWinCompanyNotIn: [String!]
  tenderWinCompanyGT: String
  tenderWinCompanyGTE: String
  tenderWinCompanyLT: String
  tenderWinCompanyLTE: String
  tenderWinCompanyContains: String
  tenderWinCompanyHasPrefix: String
  tenderWinCompanyHasSuffix: String
  tenderWinCompanyIsNil: Boolean
  tenderWinCompanyNotNil: Boolean
  tenderWinCompanyEqualFold: String
  tenderWinCompanyContainsFold: String
  """
  tender_code field predicates
  """
  tenderCode: String
  tenderCodeNEQ: String
  tenderCodeIn: [String!]
  tenderCodeNotIn: [String!]
  tenderCodeGT: String
  tenderCodeGTE: String
  tenderCodeLT: String
  tenderCodeLTE: String
  tenderCodeContains: String
  tenderCodeHasPrefix: String
  tenderCodeHasSuffix: String
  tenderCodeIsNil: Boolean
  tenderCodeNotNil: Boolean
  tenderCodeEqualFold: String
  tenderCodeContainsFold: String
  """
  architect field predicates
  """
  architect: String
  architectNEQ: String
  architectIn: [String!]
  architectNotIn: [String!]
  architectGT: String
  architectGTE: String
  architectLT: String
  architectLTE: String
  architectContains: String
  architectHasPrefix: String
  architectHasSuffix: String
  architectIsNil: Boolean
  architectNotNil: Boolean
  architectEqualFold: String
  architectContainsFold: String
  """
  developer field predicates
  """
  developer: String
  developerNEQ: String
  developerIn: [String!]
  developerNotIn: [String!]
  developerGT: String
  developerGTE: String
  developerLT: String
  developerLTE: String
  developerContains: String
  developerHasPrefix: String
  developerHasSuffix: String
  developerIsNil: Boolean
  developerNotNil: Boolean
  developerEqualFold: String
  developerContainsFold: String
  """
  tender_closing_date field predicates
  """
  tenderClosingDate: Time
  tenderClosingDateNEQ: Time
  tenderClosingDateIn: [Time!]
  tenderClosingDateNotIn: [Time!]
  tenderClosingDateGT: Time
  tenderClosingDateGTE: Time
  tenderClosingDateLT: Time
  tenderClosingDateLTE: Time
  tenderClosingDateIsNil: Boolean
  tenderClosingDateNotNil: Boolean
  """
  construction_area field predicates
  """
  constructionArea: String
  constructionAreaNEQ: String
  constructionAreaIn: [String!]
  constructionAreaNotIn: [String!]
  constructionAreaGT: String
  constructionAreaGTE: String
  constructionAreaLT: String
  constructionAreaLTE: String
  constructionAreaContains: String
  constructionAreaHasPrefix: String
  constructionAreaHasSuffix: String
  constructionAreaIsNil: Boolean
  constructionAreaNotNil: Boolean
  constructionAreaEqualFold: String
  constructionAreaContainsFold: String
  """
  tender_win_date field predicates
  """
  tenderWinDate: Time
  tenderWinDateNEQ: Time
  tenderWinDateIn: [Time!]
  tenderWinDateNotIn: [Time!]
  tenderWinDateGT: Time
  tenderWinDateGTE: Time
  tenderWinDateLT: Time
  tenderWinDateLTE: Time
  tenderWinDateIsNil: Boolean
  tenderWinDateNotNil: Boolean
  """
  tender_win_amount field predicates
  """
  tenderWinAmount: Float
  tenderWinAmountNEQ: Float
  tenderWinAmountIn: [Float!]
  tenderWinAmountNotIn: [Float!]
  tenderWinAmountGT: Float
  tenderWinAmountGTE: Float
  tenderWinAmountLT: Float
  tenderWinAmountLTE: Float
  tenderWinAmountIsNil: Boolean
  tenderWinAmountNotNil: Boolean
  """
  last_tender_amount field predicates
  """
  lastTenderAmount: Float
  lastTenderAmountNEQ: Float
  lastTenderAmountIn: [Float!]
  lastTenderAmountNotIn: [Float!]
  lastTenderAmountGT: Float
  lastTenderAmountGTE: Float
  lastTenderAmountLT: Float
  lastTenderAmountLTE: Float
  lastTenderAmountIsNil: Boolean
  lastTenderAmountNotNil: Boolean
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  areaIDContains: ID
  areaIDHasPrefix: ID
  areaIDHasSuffix: ID
  areaIDEqualFold: ID
  areaIDContainsFold: ID
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  provinceIDContains: ID
  provinceIDHasPrefix: ID
  provinceIDHasSuffix: ID
  provinceIDIsNil: Boolean
  provinceIDNotNil: Boolean
  provinceIDEqualFold: ID
  provinceIDContainsFold: ID
  """
  city_id field predicates
  """
  cityID: ID
  cityIDNEQ: ID
  cityIDIn: [ID!]
  cityIDNotIn: [ID!]
  cityIDGT: ID
  cityIDGTE: ID
  cityIDLT: ID
  cityIDLTE: ID
  cityIDContains: ID
  cityIDHasPrefix: ID
  cityIDHasSuffix: ID
  cityIDIsNil: Boolean
  cityIDNotNil: Boolean
  cityIDEqualFold: ID
  cityIDContainsFold: ID
  """
  district_id field predicates
  """
  districtID: ID
  districtIDNEQ: ID
  districtIDIn: [ID!]
  districtIDNotIn: [ID!]
  districtIDGT: ID
  districtIDGTE: ID
  districtIDLT: ID
  districtIDLTE: ID
  districtIDContains: ID
  districtIDHasPrefix: ID
  districtIDHasSuffix: ID
  districtIDIsNil: Boolean
  districtIDNotNil: Boolean
  districtIDEqualFold: ID
  districtIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDGT: ID
  customerIDGTE: ID
  customerIDLT: ID
  customerIDLTE: ID
  customerIDContains: ID
  customerIDHasPrefix: ID
  customerIDHasSuffix: ID
  customerIDIsNil: Boolean
  customerIDNotNil: Boolean
  customerIDEqualFold: ID
  customerIDContainsFold: ID
  """
  finder_id field predicates
  """
  finderID: ID
  finderIDNEQ: ID
  finderIDIn: [ID!]
  finderIDNotIn: [ID!]
  finderIDGT: ID
  finderIDGTE: ID
  finderIDLT: ID
  finderIDLTE: ID
  finderIDContains: ID
  finderIDHasPrefix: ID
  finderIDHasSuffix: ID
  finderIDIsNil: Boolean
  finderIDNotNil: Boolean
  finderIDEqualFold: ID
  finderIDContainsFold: ID
  """
  created_by_id field predicates
  """
  createdByID: ID
  createdByIDNEQ: ID
  createdByIDIn: [ID!]
  createdByIDNotIn: [ID!]
  createdByIDGT: ID
  createdByIDGTE: ID
  createdByIDLT: ID
  createdByIDLTE: ID
  createdByIDContains: ID
  createdByIDHasPrefix: ID
  createdByIDHasSuffix: ID
  createdByIDIsNil: Boolean
  createdByIDNotNil: Boolean
  createdByIDEqualFold: ID
  createdByIDContainsFold: ID
  """
  competitor_id field predicates
  """
  competitorID: ID
  competitorIDNEQ: ID
  competitorIDIn: [ID!]
  competitorIDNotIn: [ID!]
  competitorIDGT: ID
  competitorIDGTE: ID
  competitorIDLT: ID
  competitorIDLTE: ID
  competitorIDContains: ID
  competitorIDHasPrefix: ID
  competitorIDHasSuffix: ID
  competitorIDIsNil: Boolean
  competitorIDNotNil: Boolean
  competitorIDEqualFold: ID
  competitorIDContainsFold: ID
  """
  approver_id field predicates
  """
  approverID: ID
  approverIDNEQ: ID
  approverIDIn: [ID!]
  approverIDNotIn: [ID!]
  approverIDGT: ID
  approverIDGTE: ID
  approverIDLT: ID
  approverIDLTE: ID
  approverIDContains: ID
  approverIDHasPrefix: ID
  approverIDHasSuffix: ID
  approverIDIsNil: Boolean
  approverIDNotNil: Boolean
  approverIDEqualFold: ID
  approverIDContainsFold: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """
  finder edge predicates
  """
  hasFinder: Boolean
  hasFinderWith: [UserWhereInput!]
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """
  following_sales edge predicates
  """
  hasFollowingSales: Boolean
  hasFollowingSalesWith: [UserWhereInput!]
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  city edge predicates
  """
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
  """
  district edge predicates
  """
  hasDistrict: Boolean
  hasDistrictWith: [DistrictWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
  """
  competitor edge predicates
  """
  hasCompetitor: Boolean
  hasCompetitorWith: [CompetitorWhereInput!]
  """
  approver edge predicates
  """
  hasApprover: Boolean
  hasApproverWith: [UserWhereInput!]
}
"""
UpdateAreaInput is used for update Area object.
Input was generated by ent.
"""
input UpdateAreaInput {
  updatedAt: Time
  name: String
  code: String
  leaderChatID: String
  clearLeaderChatID: Boolean
  salesChatID: String
  clearSalesChatID: Boolean
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addProvinceIDs: [ID!]
  removeProvinceIDs: [ID!]
  clearProvinces: Boolean
}
"""
UpdateCityInput is used for update City object.
Input was generated by ent.
"""
input UpdateCityInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  provinceID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
}
"""
UpdateCompetitorInput is used for update Competitor object.
Input was generated by ent.
"""
input UpdateCompetitorInput {
  updatedAt: Time
  shortName: String
  name: String
  addWonTenderIDs: [ID!]
  removeWonTenderIDs: [ID!]
  clearWonTenders: Boolean
}
"""
UpdateCountryInput is used for update Country object.
Input was generated by ent.
"""
input UpdateCountryInput {
  updatedAt: Time
  adcode: Int
  name: String
  addProvinceIDs: [ID!]
  removeProvinceIDs: [ID!]
  clearProvinces: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  updatedAt: Time
  name: String
  isApproved: Boolean
  ownerType: Int
  clearOwnerType: Boolean
  industry: Int
  clearIndustry: Boolean
  size: Int
  clearSize: Boolean
  contactPerson: String
  clearContactPerson: Boolean
  contactPersonPosition: String
  clearContactPersonPosition: Boolean
  contactPersonPhone: String
  clearContactPersonPhone: Boolean
  contactPersonEmail: String
  clearContactPersonEmail: Boolean
  areaID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  salesID: ID
  clearSales: Boolean
  createdByID: ID
  clearCreatedBy: Boolean
  approverID: ID
  clearApprover: Boolean
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
}
"""
UpdateDistrictInput is used for update District object.
Input was generated by ent.
"""
input UpdateDistrictInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  cityCode: Int
  name: String
  provinceID: ID
  cityID: ID
  clearCity: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addPlotIDs: [ID!]
  removePlotIDs: [ID!]
  clearPlots: Boolean
}
"""
UpdatePlotInput is used for update Plot object.
Input was generated by ent.
"""
input UpdatePlotInput {
  updatedAt: Time
  name: String
  colorHex: String
  districtID: ID
}
"""
UpdatePotentialTenderInput is used for update PotentialTender object.
Input was generated by ent.
"""
input UpdatePotentialTenderInput {
  updatedAt: Time
}
"""
UpdateProjectInput is used for update Project object.
Input was generated by ent.
"""
input UpdateProjectInput {
  updatedAt: Time
  code: String
  """
  地盤經理
  """
  manager: String
  clearManager: Boolean
  name: String
  clearName: Boolean
  """
  客戶
  """
  owner: String
  clearOwner: Boolean
  """
  建築師
  """
  jzs: String
  clearJzs: Boolean
  """
  總承包商
  """
  mcn: String
  clearMcn: Boolean
  """
  幕墻顧問
  """
  consultant: String
  clearConsultant: Boolean
  """
  工程規模
  """
  areas: String
  clearAreas: Boolean
  """
  開工日期
  """
  startDate: Time
  clearStartDate: Boolean
  """
  封頂日期
  """
  fsDate: Time
  clearFsDate: Boolean
  """
  開始安裝日期
  """
  opDate: Time
  clearOpDate: Boolean
  """
  竣工日期
  """
  endDate: Time
  clearEndDate: Boolean
  """
  維修保養期
  """
  mntyr: String
  clearMntyr: Boolean
  """
  中標形式
  """
  conType: String
  clearConType: Boolean
  """
  是否完成
  """
  isFinished: Boolean
  """
  成交额
  """
  cje: Float
  clearCje: Boolean
  """
  营业额
  """
  yye: Float
  clearYye: Boolean
  """
  现金流
  """
  xjl: Float
  clearXjl: Boolean
  """
  项目管理费预算
  """
  xmglfYs: Float
  clearXmglfYs: Boolean
  """
  项目管理费累计
  """
  xmglfLj: Float
  clearXmglfLj: Boolean
  """
  项目设计费
  """
  xmsjf: Float
  clearXmsjf: Boolean
  """
  项目负责人
  """
  xmfzr: String
  clearXmfzr: Boolean
  """
  业主申请总额
  """
  ownerApplyAmount: Float
  clearOwnerApplyAmount: Boolean
  """
  业主申请数量
  """
  ownerApplyCount: Int
  clearOwnerApplyCount: Boolean
  """
  业主批复总额
  """
  ownerApproveAmount: Float
  clearOwnerApproveAmount: Boolean
  """
  业主批复数量
  """
  ownerApproveCount: Int
  clearOwnerApproveCount: Boolean
  """
  总包申请总额
  """
  contractorApplyAmount: Float
  clearContractorApplyAmount: Boolean
  """
  总包申请数量
  """
  contractorApplyCount: Int
  clearContractorApplyCount: Boolean
  """
  总包批复总额
  """
  contractorApproveAmount: Float
  clearContractorApproveAmount: Boolean
  """
  总包批复数量
  """
  contractorApproveCount: Int
  clearContractorApproveCount: Boolean
  """
  安装进度
  """
  installProgress: Float
  clearInstallProgress: Boolean
  """
  有效合同金额
  """
  effectiveContractAmount: Float
  clearEffectiveContractAmount: Boolean
  """
  分判VA申请总额
  """
  vaApplyAmount: Float
  clearVaApplyAmount: Boolean
  """
  分判VA批复总额
  """
  vaApproveAmount: Float
  clearVaApproveAmount: Boolean
  """
  累计法定扣款
  """
  accumulatedStatutoryDeductions: Float
  clearAccumulatedStatutoryDeductions: Boolean
  """
  累计非法定扣款
  """
  accumulatedNonStatutoryDeductions: Float
  clearAccumulatedNonStatutoryDeductions: Boolean
  """
  本期法定扣款
  """
  accumulatedStatutoryDeductionsPeriod: Float
  clearAccumulatedStatutoryDeductionsPeriod: Boolean
  """
  本期非法定扣款
  """
  accumulatedNonStatutoryDeductionsPeriod: Float
  clearAccumulatedNonStatutoryDeductionsPeriod: Boolean
  """
  合約总额
  """
  totalContractAmount: Float
  clearTotalContractAmount: Boolean
  """
  鋁板預算百分比
  """
  aluminumPlateBudgetPercentage: Float
  clearAluminumPlateBudgetPercentage: Boolean
  """
  鋁型材預算百分比
  """
  aluminumBudgetPercentage: Float
  clearAluminumBudgetPercentage: Boolean
  """
  玻璃預算百分比
  """
  glassBudgetPercentage: Float
  clearGlassBudgetPercentage: Boolean
  """
  鐵型材預算百分比
  """
  ironBudgetPercentage: Float
  clearIronBudgetPercentage: Boolean
  """
  里程碑計劃年份
  """
  milestonePlanYear: Int
  clearMilestonePlanYear: Boolean
  """
  里程碑計劃月份
  """
  milestonePlanMonth: Int
  clearMilestonePlanMonth: Boolean
  """
  里程碑完成年份
  """
  milestoneDoneYear: Int
  clearMilestoneDoneYear: Boolean
  """
  里程碑完成月份
  """
  milestoneDoneMonth: Int
  clearMilestoneDoneMonth: Boolean
  """
  生产管理面积
  """
  pmArea: Float
  clearPmArea: Boolean
  """
  生产管理當年累計生產
  """
  pmYearTarget: Float
  clearPmYearTarget: Boolean
  """
  生产管理當月累計生產
  """
  pmMonthTarget: Float
  clearPmMonthTarget: Boolean
  """
  生产管理當年實際生產
  """
  pmYearActual: Float
  clearPmYearActual: Boolean
  """
  生产管理當月實際生產
  """
  pmMonthActual: Float
  clearPmMonthActual: Boolean
  """
  生产管理累計生產
  """
  pmTotal: Float
  clearPmTotal: Boolean
  """
  生产管理昨日生產
  """
  pmYesterday: Float
  clearPmYesterday: Boolean
  """
  單元件庫存累計
  """
  unitInventoryTotal: Float
  clearUnitInventoryTotal: Boolean
  """
  單元件總數
  """
  unitComponentTotal: Float
  clearUnitComponentTotal: Boolean
  """
  單元件生產數量
  """
  unitComponentProduction: Float
  clearUnitComponentProduction: Boolean
  """
  單元件安裝數量
  """
  unitComponentInstallation: Float
  clearUnitComponentInstallation: Boolean
  """
  物料損失金額
  """
  materialLoss: Float
  clearMaterialLoss: Boolean
  """
  设计定额重量
  """
  designRatedWeight: Float
  clearDesignRatedWeight: Boolean
  """
  加工图成型重量
  """
  processingWeight: Float
  clearProcessingWeight: Boolean
  """
  項目物料庫存重量
  """
  itemStockWeight: Float
  clearItemStockWeight: Boolean
  """
  卡板庫存數量
  """
  palletsInStock: Float
  clearPalletsInStock: Boolean
  """
  散件庫存數量
  """
  partsInStock: Float
  clearPartsInStock: Boolean
  """
  質量得分
  """
  qualityScore: Float
  clearQualityScore: Boolean
  """
  質量排名
  """
  qualityRanking: Float
  clearQualityRanking: Boolean
  """
  散件總訂貨數量
  """
  bulkMaterialsTotalOrderQuantity: Float
  clearBulkMaterialsTotalOrderQuantity: Boolean
  """
  散件已完成數量
  """
  bulkMaterialsCompletedQuantity: Float
  clearBulkMaterialsCompletedQuantity: Boolean
  """
  散件未完成數量
  """
  bulkMaterialsUncompletedQuantity: Float
  clearBulkMaterialsUncompletedQuantity: Boolean
  """
  計劃總數
  """
  planTotalCount: Int
  clearPlanTotalCount: Boolean
  """
  計劃超期數量
  """
  planOverdueCount: Int
  clearPlanOverdueCount: Boolean
  """
  當月計劃超期數量
  """
  planOverdueMonthCount: Int
  clearPlanOverdueMonthCount: Boolean
  """
  BD圖紙完成數量
  """
  diagramBdFinishCount: Int
  clearDiagramBdFinishCount: Boolean
  """
  BD圖紙總數
  """
  diagramBdTotalCount: Int
  clearDiagramBdTotalCount: Boolean
  """
  施工圖紙完成數量
  """
  diagramConstructionFinishCount: Int
  clearDiagramConstructionFinishCount: Boolean
  """
  施工圖紙總數
  """
  diagramConstructionTotalCount: Int
  clearDiagramConstructionTotalCount: Boolean
  """
  加工圖完成數量
  """
  diagramProcessingFinishCount: Int
  clearDiagramProcessingFinishCount: Boolean
  """
  加工圖總數
  """
  diagramProcessingTotalCount: Int
  clearDiagramProcessingTotalCount: Boolean
  """
  C版批圖率分子
  """
  diagramCApprovalRatioNumerator: Int
  clearDiagramCApprovalRatioNumerator: Boolean
  """
  C版批圖率分母
  """
  diagramCApprovalRatioDenominator: Int
  clearDiagramCApprovalRatioDenominator: Boolean
  addVoIDs: [ID!]
  removeVoIDs: [ID!]
  clearVos: Boolean
  addProjectStaffIDs: [ID!]
  removeProjectStaffIDs: [ID!]
  clearProjectStaffs: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
}
"""
UpdateProvinceInput is used for update Province object.
Input was generated by ent.
"""
input UpdateProvinceInput {
  updatedAt: Time
  adcode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  addCityIDs: [ID!]
  removeCityIDs: [ID!]
  clearCities: Boolean
  countryID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  areaID: ID
  clearArea: Boolean
}
"""
UpdateTenderInput is used for update Tender object.
Input was generated by ent.
"""
input UpdateTenderInput {
  updatedAt: Time
  code: String
  status: Int
  isApproved: Boolean
  name: String
  estimatedAmount: Float
  clearEstimatedAmount: Boolean
  tenderDate: Time
  clearTenderDate: Boolean
  classify: Int
  clearClassify: Boolean
  discoveryDate: Time
  address: String
  clearAddress: Boolean
  fullAddress: String
  clearFullAddress: Boolean
  contractor: String
  clearContractor: Boolean
  levelInvolved: Int
  clearLevelInvolved: Boolean
  sizeAndValueRating: Int
  clearSizeAndValueRating: Boolean
  sizeAndValueRatingOverview: String
  clearSizeAndValueRatingOverview: Boolean
  creditAndPaymentRating: Int
  clearCreditAndPaymentRating: Boolean
  creditAndPaymentRatingOverview: String
  clearCreditAndPaymentRatingOverview: Boolean
  timeLimitRating: Int
  clearTimeLimitRating: Boolean
  timeLimitRatingOverview: String
  clearTimeLimitRatingOverview: Boolean
  customerRelationshipRating: Int
  clearCustomerRelationshipRating: Boolean
  customerRelationshipRatingOverview: String
  clearCustomerRelationshipRatingOverview: Boolean
  competitivePartnershipRating: Int
  clearCompetitivePartnershipRating: Boolean
  competitivePartnershipRatingOverview: String
  clearCompetitivePartnershipRatingOverview: Boolean
  prepareToBid: Boolean
  projectCode: String
  clearProjectCode: Boolean
  projectType: String
  clearProjectType: Boolean
  projectDefinition: String
  clearProjectDefinition: Boolean
  estimatedProjectStartDate: Time
  clearEstimatedProjectStartDate: Boolean
  estimatedProjectEndDate: Time
  clearEstimatedProjectEndDate: Boolean
  attachements: [String!]
  appendAttachements: [String!]
  clearAttachements: Boolean
  remark: String
  clearRemark: Boolean
  images: [String!]
  appendImages: [String!]
  clearImages: Boolean
  tenderSituations: String
  clearTenderSituations: Boolean
  ownerSituations: String
  clearOwnerSituations: Boolean
  biddingInstructions: String
  clearBiddingInstructions: Boolean
  competitorSituations: String
  clearCompetitorSituations: Boolean
  costEngineer: String
  clearCostEngineer: Boolean
  tenderForm: String
  clearTenderForm: Boolean
  contractForm: String
  clearContractForm: Boolean
  managementCompany: String
  clearManagementCompany: Boolean
  tenderingAgency: String
  clearTenderingAgency: Boolean
  biddingDate: Time
  clearBiddingDate: Boolean
  facadeConsultant: String
  clearFacadeConsultant: Boolean
  designUnit: String
  clearDesignUnit: Boolean
  consultingFirm: String
  clearConsultingFirm: Boolean
  keyProject: Boolean
  currentProgress: String
  clearCurrentProgress: Boolean
  tenderWinCompany: String
  clearTenderWinCompany: Boolean
  """
  投標編號，只限港澳
  """
  tenderCode: String
  clearTenderCode: Boolean
  """
  則師，只限港澳
  """
  architect: String
  clearArchitect: Boolean
  """
  業主，只限港澳
  """
  developer: String
  clearDeveloper: Boolean
  """
  交標日期，只限港澳
  """
  tenderClosingDate: Time
  clearTenderClosingDate: Boolean
  """
  施工面積，只限港澳
  """
  constructionArea: String
  clearConstructionArea: Boolean
  """
  得標日期，只限港澳
  """
  tenderWinDate: Time
  clearTenderWinDate: Boolean
  """
  得標金額
  """
  tenderWinAmount: Float
  clearTenderWinAmount: Boolean
  """
  最後一次投標金額，只限港澳
  """
  lastTenderAmount: Float
  clearLastTenderAmount: Boolean
  areaID: ID
  customerID: ID
  clearCustomer: Boolean
  finderID: ID
  clearFinder: Boolean
  createdByID: ID
  clearCreatedBy: Boolean
  addFollowingSaleIDs: [ID!]
  removeFollowingSaleIDs: [ID!]
  clearFollowingSales: Boolean
  provinceID: ID
  clearProvince: Boolean
  cityID: ID
  clearCity: Boolean
  districtID: ID
  clearDistrict: Boolean
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
  competitorID: ID
  clearCompetitor: Boolean
  approverID: ID
  clearApprover: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  openID: String
  name: String
  clearName: Boolean
  email: String
  clearEmail: Boolean
  username: String
  clearUsername: Boolean
  avatarURL: String
  clearAvatarURL: Boolean
  disabled: Boolean
  isAdmin: Boolean
  isCeo: Boolean
  isSuperAdmin: Boolean
  hasMapAccess: Boolean
  hasEditAccess: Boolean
  addAreaIDs: [ID!]
  removeAreaIDs: [ID!]
  clearAreas: Boolean
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  leaderID: ID
  clearLeader: Boolean
  addTeamMemberIDs: [ID!]
  removeTeamMemberIDs: [ID!]
  clearTeamMembers: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addVisitRecordIDs: [ID!]
  removeVisitRecordIDs: [ID!]
  clearVisitRecords: Boolean
  addProjectIDs: [ID!]
  removeProjectIDs: [ID!]
  clearProjects: Boolean
}
"""
UpdateVisitRecordInput is used for update VisitRecord object.
Input was generated by ent.
"""
input UpdateVisitRecordInput {
  updatedAt: Time
  visitType: Int
  commPeople: String
  commContent: String
  nextStep: String
  clearNextStep: Boolean
  date: Time
  tenderID: ID
  clearTender: Boolean
  customerID: ID
  addFollowUpByIDs: [ID!]
  removeFollowUpByIDs: [ID!]
  clearFollowUpBys: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  openID: String!
  name: String
  email: String
  username: String
  avatarURL: String
  disabled: Boolean!
  isAdmin: Boolean!
  isCeo: Boolean!
  isSuperAdmin: Boolean!
  hasMapAccess: Boolean!
  hasEditAccess: Boolean!
  leaderID: ID
  areas(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Areas returned from the connection.
    """
    orderBy: AreaOrder

    """
    Filtering options for Areas returned from the connection.
    """
    where: AreaWhereInput
  ): AreaConnection!
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Customers returned from the connection.
    """
    orderBy: [CustomerOrder!]

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  leader: User
  teamMembers: [User!]
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenders returned from the connection.
    """
    orderBy: [TenderOrder!]

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  visitRecords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for VisitRecords returned from the connection.
    """
    orderBy: [VisitRecordOrder!]

    """
    Filtering options for VisitRecords returned from the connection.
    """
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Projects returned from the connection.
    """
    orderBy: [ProjectOrder!]

    """
    Filtering options for Projects returned from the connection.
    """
    where: ProjectWhereInput
  ): ProjectConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  open_id field predicates
  """
  openID: String
  openIDNEQ: String
  openIDIn: [String!]
  openIDNotIn: [String!]
  openIDGT: String
  openIDGTE: String
  openIDLT: String
  openIDLTE: String
  openIDContains: String
  openIDHasPrefix: String
  openIDHasSuffix: String
  openIDEqualFold: String
  openIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  avatar_url field predicates
  """
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """
  disabled field predicates
  """
  disabled: Boolean
  disabledNEQ: Boolean
  """
  is_admin field predicates
  """
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """
  is_ceo field predicates
  """
  isCeo: Boolean
  isCeoNEQ: Boolean
  """
  is_super_admin field predicates
  """
  isSuperAdmin: Boolean
  isSuperAdminNEQ: Boolean
  """
  has_map_access field predicates
  """
  hasMapAccess: Boolean
  hasMapAccessNEQ: Boolean
  """
  has_edit_access field predicates
  """
  hasEditAccess: Boolean
  hasEditAccessNEQ: Boolean
  """
  leader_id field predicates
  """
  leaderID: ID
  leaderIDNEQ: ID
  leaderIDIn: [ID!]
  leaderIDNotIn: [ID!]
  leaderIDGT: ID
  leaderIDGTE: ID
  leaderIDLT: ID
  leaderIDLTE: ID
  leaderIDContains: ID
  leaderIDHasPrefix: ID
  leaderIDHasSuffix: ID
  leaderIDIsNil: Boolean
  leaderIDNotNil: Boolean
  leaderIDEqualFold: ID
  leaderIDContainsFold: ID
  """
  areas edge predicates
  """
  hasAreas: Boolean
  hasAreasWith: [AreaWhereInput!]
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  leader edge predicates
  """
  hasLeader: Boolean
  hasLeaderWith: [UserWhereInput!]
  """
  team_members edge predicates
  """
  hasTeamMembers: Boolean
  hasTeamMembersWith: [UserWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  visit_records edge predicates
  """
  hasVisitRecords: Boolean
  hasVisitRecordsWith: [VisitRecordWhereInput!]
  """
  projects edge predicates
  """
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
}
type VisitRecord implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  visitType: Int!
  commPeople: String!
  commContent: String!
  nextStep: String
  date: Time!
  tenderID: ID
  customerID: ID!
  tender: Tender
  customer: Customer!
  followupbys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection! @goField(name: "FollowUpBys", forceResolver: false)
}
"""
A connection to a list of items.
"""
type VisitRecordConnection {
  """
  A list of edges.
  """
  edges: [VisitRecordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type VisitRecordEdge {
  """
  The item at the end of the edge.
  """
  node: VisitRecord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for VisitRecord connections
"""
input VisitRecordOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order VisitRecords.
  """
  field: VisitRecordOrderField!
}
"""
Properties by which VisitRecord connections can be ordered.
"""
enum VisitRecordOrderField {
  CREATED_AT
  DATE
}
"""
VisitRecordWhereInput is used for filtering VisitRecord objects.
Input was generated by ent.
"""
input VisitRecordWhereInput {
  not: VisitRecordWhereInput
  and: [VisitRecordWhereInput!]
  or: [VisitRecordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  visit_type field predicates
  """
  visitType: Int
  visitTypeNEQ: Int
  visitTypeIn: [Int!]
  visitTypeNotIn: [Int!]
  visitTypeGT: Int
  visitTypeGTE: Int
  visitTypeLT: Int
  visitTypeLTE: Int
  """
  comm_people field predicates
  """
  commPeople: String
  commPeopleNEQ: String
  commPeopleIn: [String!]
  commPeopleNotIn: [String!]
  commPeopleGT: String
  commPeopleGTE: String
  commPeopleLT: String
  commPeopleLTE: String
  commPeopleContains: String
  commPeopleHasPrefix: String
  commPeopleHasSuffix: String
  commPeopleEqualFold: String
  commPeopleContainsFold: String
  """
  comm_content field predicates
  """
  commContent: String
  commContentNEQ: String
  commContentIn: [String!]
  commContentNotIn: [String!]
  commContentGT: String
  commContentGTE: String
  commContentLT: String
  commContentLTE: String
  commContentContains: String
  commContentHasPrefix: String
  commContentHasSuffix: String
  commContentEqualFold: String
  commContentContainsFold: String
  """
  next_step field predicates
  """
  nextStep: String
  nextStepNEQ: String
  nextStepIn: [String!]
  nextStepNotIn: [String!]
  nextStepGT: String
  nextStepGTE: String
  nextStepLT: String
  nextStepLTE: String
  nextStepContains: String
  nextStepHasPrefix: String
  nextStepHasSuffix: String
  nextStepIsNil: Boolean
  nextStepNotNil: Boolean
  nextStepEqualFold: String
  nextStepContainsFold: String
  """
  date field predicates
  """
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  """
  tender_id field predicates
  """
  tenderID: ID
  tenderIDNEQ: ID
  tenderIDIn: [ID!]
  tenderIDNotIn: [ID!]
  tenderIDGT: ID
  tenderIDGTE: ID
  tenderIDLT: ID
  tenderIDLTE: ID
  tenderIDContains: ID
  tenderIDHasPrefix: ID
  tenderIDHasSuffix: ID
  tenderIDIsNil: Boolean
  tenderIDNotNil: Boolean
  tenderIDEqualFold: ID
  tenderIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDGT: ID
  customerIDGTE: ID
  customerIDLT: ID
  customerIDLTE: ID
  customerIDContains: ID
  customerIDHasPrefix: ID
  customerIDHasSuffix: ID
  customerIDEqualFold: ID
  customerIDContainsFold: ID
  """
  tender edge predicates
  """
  hasTender: Boolean
  hasTenderWith: [TenderWhereInput!]
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """
  followUpBys edge predicates
  """
  hasFollowUpBys: Boolean
  hasFollowUpBysWith: [UserWhereInput!]
}
`, BuiltIn: false},
	{Name: "../geo_coordinate.graphql", Input: `extend type Tender {
  geoCoordinate: GeoJson
  geoBounds: [[Float]]
}

extend type Area {
  center: GeoJson
}

extend type Country {
  center: GeoJson
}

extend type Province {
  center: GeoJson
}

extend type City {
  center: GeoJson
}

extend type District {
  center: GeoJson
}

type GeoJson {
  type: String!
  coordinates: [Float!]!
}
`, BuiltIn: false},
	{Name: "../mutation.graphql", Input: `type Mutation {
  createArea(input: CreateAreaInput!): AreaConnection!
  updateArea(id: ID!, input: UpdateAreaInput!): Area!

  createUser(input: CreateUserInput!): UserConnection!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): User!

  createCustomer(input: CreateCustomerInput!): CustomerConnection!
  updateCustomer(id: ID!, input: UpdateCustomerInput!): Customer!
  deleteCustomer(id: ID!): Customer!

  createTender(
    input: CreateTenderInput!
    geoBounds: [[Float!]!]
    imageFileNames: [String!]!
    attachmentFileNames: [String!]!
    geoCoordinate: [Float!]
  ): TenderConnection!
  updateTender(
    id: ID!
    input: UpdateTenderInput!
    geoBounds: [[Float!]!]
    imageFileNames: [String!]
    removeImageFileNames: [String!]
    attachmentFileNames: [String!]
    removeAttachmentFileNames: [String!]
    geoCoordinate: [Float!]
  ): Tender!
  deleteTender(id: ID!): Tender!

  createPlot(input: CreatePlotInput!, geoBounds: [[Float!]!]): PlotConnection!
  updatePlot(id: ID!, input: UpdatePlotInput!, geoBounds: [[Float!]!]): Plot!
  deletePlot(id: ID!): Plot!

  createVisitRecord(input: CreateVisitRecordInput!): VisitRecordConnection!
  updateVisitRecord(id: ID!, input: UpdateVisitRecordInput!): VisitRecord!
  deleteVisitRecord(id: ID!): VisitRecord!

  createCompetitor(input: CreateCompetitorInput!): Competitor!
  updateCompetitor(id: ID!, input: UpdateCompetitorInput!): Competitor!
  deleteCompetitor(id: ID!): Competitor!

  updateProject(id: ID!, input: UpdateProjectInput!): Project!
}
`, BuiltIn: false},
	{Name: "../plot.graphql", Input: `extend type Plot {
  geoBounds: [[Float!]!]
}
`, BuiltIn: false},
	{Name: "../query.graphql", Input: `extend type Query {
  searchFeishuUser(keyword: String!): [FeishuUser!]!

  searchLocation(keyword: String!): [Location!]!

  inputtips(areaId: ID!, keyword: String!): [Location!]!
  amapRegeo(lng: Float!, lat: Float!): [Location!]!

  topCompetitors(first: Int = 10): [TopCompetitor!]!

  biToken: String!
}

extend type User {
  myTenders(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: [TenderOrder!]
    where: TenderWhereInput
  ): TenderConnection!
  myVisitRecords(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: [VisitRecordOrder!]
    where: VisitRecordWhereInput
  ): VisitRecordConnection!
}

type FeishuUser {
  openId: String!
  name: String!
  email: String!
  avatarUrl: String!
}

type Location {
  id: ID!
  name: String!
  address: String!
  province: Province!
  city: City
  district: District!
  lng: Float!
  lat: Float!
}

type TopCompetitor {
  id: ID!
  name: String!
  shortName: String!
  wonTendersCount: Int!
}

type POI {
  id: ID!
  name: String!
  address: String!
  location: Location!
}
`, BuiltIn: false},
	{Name: "../scaler.graphql", Input: `scalar Time
`, BuiltIn: false},
	{Name: "../session.graphql", Input: `type Session {
  userId: String!
  name: String!
  username: String!
  email: String!
  avatarUrl: String!
  isAdmin: Boolean!
  isSuperAdmin: Boolean!
  isCeo: Boolean!
  hasMapAccess: Boolean!
  hasEditAccess: Boolean!
}

extend type Query {
  session: Session!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
