// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"cscd-bds/graphql/model"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	CreateArea(ctx context.Context, input ent.CreateAreaInput) (*ent.AreaConnection, error)
	UpdateArea(ctx context.Context, id xid.ID, input ent.UpdateAreaInput) (*ent.Area, error)
	CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.UserConnection, error)
	UpdateUser(ctx context.Context, id xid.ID, input ent.UpdateUserInput) (*ent.User, error)
	DeleteUser(ctx context.Context, id xid.ID) (*ent.User, error)
	CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.CustomerConnection, error)
	UpdateCustomer(ctx context.Context, id xid.ID, input ent.UpdateCustomerInput) (*ent.Customer, error)
	DeleteCustomer(ctx context.Context, id xid.ID) (*ent.Customer, error)
	UpdateCustomerRequest(ctx context.Context, id xid.ID, input ent.UpdateCustomerInput) (*ent.Customer, error)
	ApproveCustomerRequest(ctx context.Context, id xid.ID) (*ent.Customer, error)
	RejectCustomerRequest(ctx context.Context, id xid.ID) (*ent.Customer, error)
	CreateTender(ctx context.Context, input ent.CreateTenderInput, geoBounds [][]float64, imageFileNames []string, attachmentFileNames []string, geoCoordinate []float64) (*ent.TenderConnection, error)
	UpdateTender(ctx context.Context, id xid.ID, input ent.UpdateTenderInput, geoBounds [][]float64, imageFileNames []string, removeImageFileNames []string, attachmentFileNames []string, removeAttachmentFileNames []string, geoCoordinate []float64) (*ent.Tender, error)
	DeleteTender(ctx context.Context, id xid.ID) (*ent.Tender, error)
	WinTender(ctx context.Context, id xid.ID, input model.WinTenderInput) (*ent.Tender, error)
	LoseTender(ctx context.Context, id xid.ID, input model.LoseTenderInput) (*ent.Tender, error)
	CreatePlot(ctx context.Context, input ent.CreatePlotInput, geoBounds [][]float64) (*ent.PlotConnection, error)
	UpdatePlot(ctx context.Context, id xid.ID, input ent.UpdatePlotInput, geoBounds [][]float64) (*ent.Plot, error)
	DeletePlot(ctx context.Context, id xid.ID) (*ent.Plot, error)
	CreateVisitRecord(ctx context.Context, input ent.CreateVisitRecordInput) (*ent.VisitRecordConnection, error)
	UpdateVisitRecord(ctx context.Context, id xid.ID, input ent.UpdateVisitRecordInput) (*ent.VisitRecord, error)
	DeleteVisitRecord(ctx context.Context, id xid.ID) (*ent.VisitRecord, error)
	CreateCompetitor(ctx context.Context, input ent.CreateCompetitorInput) (*ent.Competitor, error)
	UpdateCompetitor(ctx context.Context, id xid.ID, input ent.UpdateCompetitorInput) (*ent.Competitor, error)
	DeleteCompetitor(ctx context.Context, id xid.ID) (*ent.Competitor, error)
	UpdateProject(ctx context.Context, id xid.ID, input ent.UpdateProjectInput) (*ent.Project, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_approveCustomerRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_approveCustomerRequest_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_approveCustomerRequest_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createArea_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createArea_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createArea_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateAreaInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateAreaInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateAreaInput2cscdᚑbdsᚋstoreᚋentᚐCreateAreaInput(ctx, tmp)
	}

	var zeroVal ent.CreateAreaInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCompetitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCompetitor_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCompetitor_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateCompetitorInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateCompetitorInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCompetitorInput2cscdᚑbdsᚋstoreᚋentᚐCreateCompetitorInput(ctx, tmp)
	}

	var zeroVal ent.CreateCompetitorInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCustomerInput2cscdᚑbdsᚋstoreᚋentᚐCreateCustomerInput(ctx, tmp)
	}

	var zeroVal ent.CreateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createPlot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createPlot_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	arg1, err := ec.field_Mutation_createPlot_argsGeoBounds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoBounds"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_createPlot_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreatePlotInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreatePlotInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreatePlotInput2cscdᚑbdsᚋstoreᚋentᚐCreatePlotInput(ctx, tmp)
	}

	var zeroVal ent.CreatePlotInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createPlot_argsGeoBounds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([][]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoBounds"]
	if !ok {
		var zeroVal [][]float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoBounds"))
	if tmp, ok := rawArgs["geoBounds"]; ok {
		return ec.unmarshalOFloat2ᚕᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal [][]float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTender_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createTender_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	arg1, err := ec.field_Mutation_createTender_argsGeoBounds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoBounds"] = arg1
	arg2, err := ec.field_Mutation_createTender_argsImageFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["imageFileNames"] = arg2
	arg3, err := ec.field_Mutation_createTender_argsAttachmentFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["attachmentFileNames"] = arg3
	arg4, err := ec.field_Mutation_createTender_argsGeoCoordinate(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoCoordinate"] = arg4
	return args, nil
}
func (ec *executionContext) field_Mutation_createTender_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateTenderInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateTenderInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTenderInput2cscdᚑbdsᚋstoreᚋentᚐCreateTenderInput(ctx, tmp)
	}

	var zeroVal ent.CreateTenderInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTender_argsGeoBounds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([][]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoBounds"]
	if !ok {
		var zeroVal [][]float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoBounds"))
	if tmp, ok := rawArgs["geoBounds"]; ok {
		return ec.unmarshalOFloat2ᚕᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal [][]float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTender_argsImageFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["imageFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("imageFileNames"))
	if tmp, ok := rawArgs["imageFileNames"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTender_argsAttachmentFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["attachmentFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentFileNames"))
	if tmp, ok := rawArgs["attachmentFileNames"]; ok {
		return ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTender_argsGeoCoordinate(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoCoordinate"]
	if !ok {
		var zeroVal []float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoCoordinate"))
	if tmp, ok := rawArgs["geoCoordinate"]; ok {
		return ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal []float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateUserInput2cscdᚑbdsᚋstoreᚋentᚐCreateUserInput(ctx, tmp)
	}

	var zeroVal ent.CreateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createVisitRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_createVisitRecord_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createVisitRecord_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.CreateVisitRecordInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.CreateVisitRecordInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateVisitRecordInput2cscdᚑbdsᚋstoreᚋentᚐCreateVisitRecordInput(ctx, tmp)
	}

	var zeroVal ent.CreateVisitRecordInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCompetitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteCompetitor_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCompetitor_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deletePlot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deletePlot_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deletePlot_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTender_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteTender_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTender_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteUser_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteVisitRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_deleteVisitRecord_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteVisitRecord_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_loseTender_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_loseTender_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_loseTender_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_loseTender_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_loseTender_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.LoseTenderInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.LoseTenderInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNLoseTenderInput2cscdᚑbdsᚋgraphqlᚋmodelᚐLoseTenderInput(ctx, tmp)
	}

	var zeroVal model.LoseTenderInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_rejectCustomerRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_rejectCustomerRequest_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_rejectCustomerRequest_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateArea_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateArea_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateArea_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateArea_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateArea_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateAreaInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateAreaInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateAreaInput2cscdᚑbdsᚋstoreᚋentᚐUpdateAreaInput(ctx, tmp)
	}

	var zeroVal ent.UpdateAreaInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompetitor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCompetitor_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCompetitor_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCompetitor_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCompetitor_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateCompetitorInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateCompetitorInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCompetitorInput2cscdᚑbdsᚋstoreᚋentᚐUpdateCompetitorInput(ctx, tmp)
	}

	var zeroVal ent.UpdateCompetitorInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomerRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCustomerRequest_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCustomerRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCustomerRequest_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomerRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCustomerInput2cscdᚑbdsᚋstoreᚋentᚐUpdateCustomerInput(ctx, tmp)
	}

	var zeroVal ent.UpdateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateCustomer_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateCustomer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateCustomer_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateCustomer_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateCustomerInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateCustomerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateCustomerInput2cscdᚑbdsᚋstoreᚋentᚐUpdateCustomerInput(ctx, tmp)
	}

	var zeroVal ent.UpdateCustomerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePlot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updatePlot_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updatePlot_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	arg2, err := ec.field_Mutation_updatePlot_argsGeoBounds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoBounds"] = arg2
	return args, nil
}
func (ec *executionContext) field_Mutation_updatePlot_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePlot_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdatePlotInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdatePlotInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdatePlotInput2cscdᚑbdsᚋstoreᚋentᚐUpdatePlotInput(ctx, tmp)
	}

	var zeroVal ent.UpdatePlotInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updatePlot_argsGeoBounds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([][]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoBounds"]
	if !ok {
		var zeroVal [][]float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoBounds"))
	if tmp, ok := rawArgs["geoBounds"]; ok {
		return ec.unmarshalOFloat2ᚕᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal [][]float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateProject_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateProject_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateProject_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateProject_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateProjectInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateProjectInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateProjectInput2cscdᚑbdsᚋstoreᚋentᚐUpdateProjectInput(ctx, tmp)
	}

	var zeroVal ent.UpdateProjectInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateTender_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateTender_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	arg2, err := ec.field_Mutation_updateTender_argsGeoBounds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoBounds"] = arg2
	arg3, err := ec.field_Mutation_updateTender_argsImageFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["imageFileNames"] = arg3
	arg4, err := ec.field_Mutation_updateTender_argsRemoveImageFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["removeImageFileNames"] = arg4
	arg5, err := ec.field_Mutation_updateTender_argsAttachmentFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["attachmentFileNames"] = arg5
	arg6, err := ec.field_Mutation_updateTender_argsRemoveAttachmentFileNames(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["removeAttachmentFileNames"] = arg6
	arg7, err := ec.field_Mutation_updateTender_argsGeoCoordinate(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["geoCoordinate"] = arg7
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTender_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateTenderInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateTenderInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTenderInput2cscdᚑbdsᚋstoreᚋentᚐUpdateTenderInput(ctx, tmp)
	}

	var zeroVal ent.UpdateTenderInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsGeoBounds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([][]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoBounds"]
	if !ok {
		var zeroVal [][]float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoBounds"))
	if tmp, ok := rawArgs["geoBounds"]; ok {
		return ec.unmarshalOFloat2ᚕᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal [][]float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsImageFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["imageFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("imageFileNames"))
	if tmp, ok := rawArgs["imageFileNames"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsRemoveImageFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["removeImageFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("removeImageFileNames"))
	if tmp, ok := rawArgs["removeImageFileNames"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsAttachmentFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["attachmentFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentFileNames"))
	if tmp, ok := rawArgs["attachmentFileNames"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsRemoveAttachmentFileNames(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["removeAttachmentFileNames"]
	if !ok {
		var zeroVal []string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAttachmentFileNames"))
	if tmp, ok := rawArgs["removeAttachmentFileNames"]; ok {
		return ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
	}

	var zeroVal []string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTender_argsGeoCoordinate(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["geoCoordinate"]
	if !ok {
		var zeroVal []float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("geoCoordinate"))
	if tmp, ok := rawArgs["geoCoordinate"]; ok {
		return ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, tmp)
	}

	var zeroVal []float64
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateUser_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateUser_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateUser_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateUser_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateUserInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateUserInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateUserInput2cscdᚑbdsᚋstoreᚋentᚐUpdateUserInput(ctx, tmp)
	}

	var zeroVal ent.UpdateUserInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateVisitRecord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_updateVisitRecord_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateVisitRecord_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateVisitRecord_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateVisitRecord_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (ent.UpdateVisitRecordInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal ent.UpdateVisitRecordInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateVisitRecordInput2cscdᚑbdsᚋstoreᚋentᚐUpdateVisitRecordInput(ctx, tmp)
	}

	var zeroVal ent.UpdateVisitRecordInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_winTender_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Mutation_winTender_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_winTender_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_winTender_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_winTender_argsInput(
	ctx context.Context,
	rawArgs map[string]interface{},
) (model.WinTenderInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["input"]
	if !ok {
		var zeroVal model.WinTenderInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNWinTenderInput2cscdᚑbdsᚋgraphqlᚋmodelᚐWinTenderInput(ctx, tmp)
	}

	var zeroVal model.WinTenderInput
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_createArea(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateArea(rctx, fc.Args["input"].(ent.CreateAreaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AreaConnection)
	fc.Result = res
	return ec.marshalNAreaConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createArea(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AreaConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AreaConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AreaConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AreaConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createArea_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateArea(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateArea(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateAreaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Area)
	fc.Result = res
	return ec.marshalNArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateArea(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Area_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Area_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Area_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Area_name(ctx, field)
			case "code":
				return ec.fieldContext_Area_code(ctx, field)
			case "leaderChatID":
				return ec.fieldContext_Area_leaderChatID(ctx, field)
			case "salesChatID":
				return ec.fieldContext_Area_salesChatID(ctx, field)
			case "customers":
				return ec.fieldContext_Area_customers(ctx, field)
			case "tenders":
				return ec.fieldContext_Area_tenders(ctx, field)
			case "users":
				return ec.fieldContext_Area_users(ctx, field)
			case "provinces":
				return ec.fieldContext_Area_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Area_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Area", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateArea_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(ent.CreateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomer(rctx, fc.Args["input"].(ent.CreateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CustomerConnection)
	fc.Result = res
	return ec.marshalNCustomerConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CustomerConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CustomerConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CustomerConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomer(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCustomer(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCustomerRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCustomerRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCustomerRequest(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateCustomerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCustomerRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCustomerRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveCustomerRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveCustomerRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveCustomerRequest(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveCustomerRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveCustomerRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectCustomerRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectCustomerRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RejectCustomerRequest(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectCustomerRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectCustomerRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTender(rctx, fc.Args["input"].(ent.CreateTenderInput), fc.Args["geoBounds"].([][]float64), fc.Args["imageFileNames"].([]string), fc.Args["attachmentFileNames"].([]string), fc.Args["geoCoordinate"].([]float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTender(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateTenderInput), fc.Args["geoBounds"].([][]float64), fc.Args["imageFileNames"].([]string), fc.Args["removeImageFileNames"].([]string), fc.Args["attachmentFileNames"].([]string), fc.Args["removeAttachmentFileNames"].([]string), fc.Args["geoCoordinate"].([]float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTender(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_winTender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_winTender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().WinTender(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(model.WinTenderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_winTender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_winTender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loseTender(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loseTender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoseTender(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(model.LoseTenderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loseTender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loseTender_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlot(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePlot(rctx, fc.Args["input"].(ent.CreatePlotInput), fc.Args["geoBounds"].([][]float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.PlotConnection)
	fc.Result = res
	return ec.marshalNPlotConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PlotConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PlotConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PlotConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlotConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlot_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlot(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlot(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdatePlotInput), fc.Args["geoBounds"].([][]float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Plot)
	fc.Result = res
	return ec.marshalNPlot2ᚖcscdᚑbdsᚋstoreᚋentᚐPlot(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plot_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plot_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plot_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Plot_name(ctx, field)
			case "colorHex":
				return ec.fieldContext_Plot_colorHex(ctx, field)
			case "districtID":
				return ec.fieldContext_Plot_districtID(ctx, field)
			case "district":
				return ec.fieldContext_Plot_district(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Plot_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plot", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlot_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlot(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePlot(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Plot)
	fc.Result = res
	return ec.marshalNPlot2ᚖcscdᚑbdsᚋstoreᚋentᚐPlot(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plot_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plot_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plot_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Plot_name(ctx, field)
			case "colorHex":
				return ec.fieldContext_Plot_colorHex(ctx, field)
			case "districtID":
				return ec.fieldContext_Plot_districtID(ctx, field)
			case "district":
				return ec.fieldContext_Plot_district(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Plot_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plot", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlot_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVisitRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createVisitRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVisitRecord(rctx, fc.Args["input"].(ent.CreateVisitRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createVisitRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVisitRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVisitRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVisitRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVisitRecord(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateVisitRecordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecord)
	fc.Result = res
	return ec.marshalNVisitRecord2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVisitRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VisitRecord_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_VisitRecord_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VisitRecord_updatedAt(ctx, field)
			case "visitType":
				return ec.fieldContext_VisitRecord_visitType(ctx, field)
			case "commPeople":
				return ec.fieldContext_VisitRecord_commPeople(ctx, field)
			case "commContent":
				return ec.fieldContext_VisitRecord_commContent(ctx, field)
			case "nextStep":
				return ec.fieldContext_VisitRecord_nextStep(ctx, field)
			case "date":
				return ec.fieldContext_VisitRecord_date(ctx, field)
			case "tenderID":
				return ec.fieldContext_VisitRecord_tenderID(ctx, field)
			case "customerID":
				return ec.fieldContext_VisitRecord_customerID(ctx, field)
			case "tender":
				return ec.fieldContext_VisitRecord_tender(ctx, field)
			case "customer":
				return ec.fieldContext_VisitRecord_customer(ctx, field)
			case "followupbys":
				return ec.fieldContext_VisitRecord_followupbys(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVisitRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteVisitRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteVisitRecord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVisitRecord(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecord)
	fc.Result = res
	return ec.marshalNVisitRecord2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteVisitRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VisitRecord_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_VisitRecord_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VisitRecord_updatedAt(ctx, field)
			case "visitType":
				return ec.fieldContext_VisitRecord_visitType(ctx, field)
			case "commPeople":
				return ec.fieldContext_VisitRecord_commPeople(ctx, field)
			case "commContent":
				return ec.fieldContext_VisitRecord_commContent(ctx, field)
			case "nextStep":
				return ec.fieldContext_VisitRecord_nextStep(ctx, field)
			case "date":
				return ec.fieldContext_VisitRecord_date(ctx, field)
			case "tenderID":
				return ec.fieldContext_VisitRecord_tenderID(ctx, field)
			case "customerID":
				return ec.fieldContext_VisitRecord_customerID(ctx, field)
			case "tender":
				return ec.fieldContext_VisitRecord_tender(ctx, field)
			case "customer":
				return ec.fieldContext_VisitRecord_customer(ctx, field)
			case "followupbys":
				return ec.fieldContext_VisitRecord_followupbys(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteVisitRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompetitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompetitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompetitor(rctx, fc.Args["input"].(ent.CreateCompetitorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Competitor)
	fc.Result = res
	return ec.marshalNCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompetitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Competitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competitor_updatedAt(ctx, field)
			case "shortName":
				return ec.fieldContext_Competitor_shortName(ctx, field)
			case "name":
				return ec.fieldContext_Competitor_name(ctx, field)
			case "tenders":
				return ec.fieldContext_Competitor_tenders(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompetitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompetitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompetitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompetitor(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateCompetitorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Competitor)
	fc.Result = res
	return ec.marshalNCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompetitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Competitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competitor_updatedAt(ctx, field)
			case "shortName":
				return ec.fieldContext_Competitor_shortName(ctx, field)
			case "name":
				return ec.fieldContext_Competitor_name(ctx, field)
			case "tenders":
				return ec.fieldContext_Competitor_tenders(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompetitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCompetitor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCompetitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompetitor(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Competitor)
	fc.Result = res
	return ec.marshalNCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCompetitor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Competitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competitor_updatedAt(ctx, field)
			case "shortName":
				return ec.fieldContext_Competitor_shortName(ctx, field)
			case "name":
				return ec.fieldContext_Competitor_name(ctx, field)
			case "tenders":
				return ec.fieldContext_Competitor_tenders(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCompetitor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProject(rctx, fc.Args["id"].(xid.ID), fc.Args["input"].(ent.UpdateProjectInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Project_code(ctx, field)
			case "manager":
				return ec.fieldContext_Project_manager(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "owner":
				return ec.fieldContext_Project_owner(ctx, field)
			case "jzs":
				return ec.fieldContext_Project_jzs(ctx, field)
			case "mcn":
				return ec.fieldContext_Project_mcn(ctx, field)
			case "consultant":
				return ec.fieldContext_Project_consultant(ctx, field)
			case "areas":
				return ec.fieldContext_Project_areas(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "fsDate":
				return ec.fieldContext_Project_fsDate(ctx, field)
			case "opDate":
				return ec.fieldContext_Project_opDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "mntyr":
				return ec.fieldContext_Project_mntyr(ctx, field)
			case "conType":
				return ec.fieldContext_Project_conType(ctx, field)
			case "isFinished":
				return ec.fieldContext_Project_isFinished(ctx, field)
			case "cje":
				return ec.fieldContext_Project_cje(ctx, field)
			case "yye":
				return ec.fieldContext_Project_yye(ctx, field)
			case "xjl":
				return ec.fieldContext_Project_xjl(ctx, field)
			case "xmglfYs":
				return ec.fieldContext_Project_xmglfYs(ctx, field)
			case "xmglfLj":
				return ec.fieldContext_Project_xmglfLj(ctx, field)
			case "xmsjf":
				return ec.fieldContext_Project_xmsjf(ctx, field)
			case "xmfzr":
				return ec.fieldContext_Project_xmfzr(ctx, field)
			case "ownerApplyAmount":
				return ec.fieldContext_Project_ownerApplyAmount(ctx, field)
			case "ownerApplyCount":
				return ec.fieldContext_Project_ownerApplyCount(ctx, field)
			case "ownerApproveAmount":
				return ec.fieldContext_Project_ownerApproveAmount(ctx, field)
			case "ownerApproveCount":
				return ec.fieldContext_Project_ownerApproveCount(ctx, field)
			case "contractorApplyAmount":
				return ec.fieldContext_Project_contractorApplyAmount(ctx, field)
			case "contractorApplyCount":
				return ec.fieldContext_Project_contractorApplyCount(ctx, field)
			case "contractorApproveAmount":
				return ec.fieldContext_Project_contractorApproveAmount(ctx, field)
			case "contractorApproveCount":
				return ec.fieldContext_Project_contractorApproveCount(ctx, field)
			case "installProgress":
				return ec.fieldContext_Project_installProgress(ctx, field)
			case "effectiveContractAmount":
				return ec.fieldContext_Project_effectiveContractAmount(ctx, field)
			case "vaApplyAmount":
				return ec.fieldContext_Project_vaApplyAmount(ctx, field)
			case "vaApproveAmount":
				return ec.fieldContext_Project_vaApproveAmount(ctx, field)
			case "accumulatedStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedStatutoryDeductions(ctx, field)
			case "accumulatedNonStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductions(ctx, field)
			case "accumulatedStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedStatutoryDeductionsPeriod(ctx, field)
			case "accumulatedNonStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field)
			case "totalContractAmount":
				return ec.fieldContext_Project_totalContractAmount(ctx, field)
			case "aluminumPlateBudgetPercentage":
				return ec.fieldContext_Project_aluminumPlateBudgetPercentage(ctx, field)
			case "aluminumBudgetPercentage":
				return ec.fieldContext_Project_aluminumBudgetPercentage(ctx, field)
			case "glassBudgetPercentage":
				return ec.fieldContext_Project_glassBudgetPercentage(ctx, field)
			case "ironBudgetPercentage":
				return ec.fieldContext_Project_ironBudgetPercentage(ctx, field)
			case "milestonePlanYear":
				return ec.fieldContext_Project_milestonePlanYear(ctx, field)
			case "milestonePlanMonth":
				return ec.fieldContext_Project_milestonePlanMonth(ctx, field)
			case "milestoneDoneYear":
				return ec.fieldContext_Project_milestoneDoneYear(ctx, field)
			case "milestoneDoneMonth":
				return ec.fieldContext_Project_milestoneDoneMonth(ctx, field)
			case "pmArea":
				return ec.fieldContext_Project_pmArea(ctx, field)
			case "pmYearTarget":
				return ec.fieldContext_Project_pmYearTarget(ctx, field)
			case "pmMonthTarget":
				return ec.fieldContext_Project_pmMonthTarget(ctx, field)
			case "pmYearActual":
				return ec.fieldContext_Project_pmYearActual(ctx, field)
			case "pmMonthActual":
				return ec.fieldContext_Project_pmMonthActual(ctx, field)
			case "pmTotal":
				return ec.fieldContext_Project_pmTotal(ctx, field)
			case "pmYesterday":
				return ec.fieldContext_Project_pmYesterday(ctx, field)
			case "unitInventoryTotal":
				return ec.fieldContext_Project_unitInventoryTotal(ctx, field)
			case "unitComponentTotal":
				return ec.fieldContext_Project_unitComponentTotal(ctx, field)
			case "unitComponentProduction":
				return ec.fieldContext_Project_unitComponentProduction(ctx, field)
			case "unitComponentInstallation":
				return ec.fieldContext_Project_unitComponentInstallation(ctx, field)
			case "materialLoss":
				return ec.fieldContext_Project_materialLoss(ctx, field)
			case "designRatedWeight":
				return ec.fieldContext_Project_designRatedWeight(ctx, field)
			case "processingWeight":
				return ec.fieldContext_Project_processingWeight(ctx, field)
			case "itemStockWeight":
				return ec.fieldContext_Project_itemStockWeight(ctx, field)
			case "palletsInStock":
				return ec.fieldContext_Project_palletsInStock(ctx, field)
			case "partsInStock":
				return ec.fieldContext_Project_partsInStock(ctx, field)
			case "qualityScore":
				return ec.fieldContext_Project_qualityScore(ctx, field)
			case "qualityRanking":
				return ec.fieldContext_Project_qualityRanking(ctx, field)
			case "bulkMaterialsTotalOrderQuantity":
				return ec.fieldContext_Project_bulkMaterialsTotalOrderQuantity(ctx, field)
			case "bulkMaterialsCompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsCompletedQuantity(ctx, field)
			case "bulkMaterialsUncompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsUncompletedQuantity(ctx, field)
			case "planTotalCount":
				return ec.fieldContext_Project_planTotalCount(ctx, field)
			case "planOverdueCount":
				return ec.fieldContext_Project_planOverdueCount(ctx, field)
			case "planOverdueMonthCount":
				return ec.fieldContext_Project_planOverdueMonthCount(ctx, field)
			case "diagramBdFinishCount":
				return ec.fieldContext_Project_diagramBdFinishCount(ctx, field)
			case "diagramBdTotalCount":
				return ec.fieldContext_Project_diagramBdTotalCount(ctx, field)
			case "diagramConstructionFinishCount":
				return ec.fieldContext_Project_diagramConstructionFinishCount(ctx, field)
			case "diagramConstructionTotalCount":
				return ec.fieldContext_Project_diagramConstructionTotalCount(ctx, field)
			case "diagramProcessingFinishCount":
				return ec.fieldContext_Project_diagramProcessingFinishCount(ctx, field)
			case "diagramProcessingTotalCount":
				return ec.fieldContext_Project_diagramProcessingTotalCount(ctx, field)
			case "diagramCApprovalRatioNumerator":
				return ec.fieldContext_Project_diagramCApprovalRatioNumerator(ctx, field)
			case "diagramCApprovalRatioDenominator":
				return ec.fieldContext_Project_diagramCApprovalRatioDenominator(ctx, field)
			case "vos":
				return ec.fieldContext_Project_vos(ctx, field)
			case "projectStaffs":
				return ec.fieldContext_Project_projectStaffs(ctx, field)
			case "users":
				return ec.fieldContext_Project_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputLoseTenderInput(ctx context.Context, obj interface{}) (model.LoseTenderInput, error) {
	var it model.LoseTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"competitors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "competitors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitors"))
			data, err := ec.unmarshalNWinLostTenderCompetitorInput2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐWinLostTenderCompetitorInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Competitors = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWinLostTenderCompetitorInput(ctx context.Context, obj interface{}) (model.WinLostTenderCompetitorInput, error) {
	var it model.WinLostTenderCompetitorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "amount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWinTenderInput(ctx context.Context, obj interface{}) (model.WinTenderInput, error) {
	var it model.WinTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"projectCode", "projectDefinition", "tenderWinAmount", "competitors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "competitors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitors"))
			data, err := ec.unmarshalNWinLostTenderCompetitorInput2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐWinLostTenderCompetitorInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Competitors = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createArea":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createArea(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateArea":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateArea(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCustomer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCustomer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCustomerRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCustomerRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveCustomerRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveCustomerRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectCustomerRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectCustomerRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTender":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTender(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTender":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTender(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTender":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTender(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "winTender":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_winTender(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loseTender":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loseTender(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPlot":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlot(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePlot":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlot(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePlot":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlot(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVisitRecord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVisitRecord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateVisitRecord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVisitRecord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteVisitRecord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteVisitRecord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompetitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompetitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCompetitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompetitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCompetitor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCompetitor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNLoseTenderInput2cscdᚑbdsᚋgraphqlᚋmodelᚐLoseTenderInput(ctx context.Context, v interface{}) (model.LoseTenderInput, error) {
	res, err := ec.unmarshalInputLoseTenderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWinLostTenderCompetitorInput2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐWinLostTenderCompetitorInputᚄ(ctx context.Context, v interface{}) ([]*model.WinLostTenderCompetitorInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.WinLostTenderCompetitorInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWinLostTenderCompetitorInput2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐWinLostTenderCompetitorInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNWinLostTenderCompetitorInput2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐWinLostTenderCompetitorInput(ctx context.Context, v interface{}) (*model.WinLostTenderCompetitorInput, error) {
	res, err := ec.unmarshalInputWinLostTenderCompetitorInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWinTenderInput2cscdᚑbdsᚋgraphqlᚋmodelᚐWinTenderInput(ctx context.Context, v interface{}) (model.WinTenderInput, error) {
	res, err := ec.unmarshalInputWinTenderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
