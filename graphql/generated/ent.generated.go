// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"cscd-bds/graphql/model"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type AreaResolver interface {
	Center(ctx context.Context, obj *ent.Area) (*model.GeoJSON, error)
}
type CityResolver interface {
	Center(ctx context.Context, obj *ent.City) (*model.GeoJSON, error)
}
type CountryResolver interface {
	Center(ctx context.Context, obj *ent.Country) (*model.GeoJSON, error)
}
type CustomerResolver interface {
	Draft(ctx context.Context, obj *ent.Customer) (*model.CustomerDraft, error)
}
type DistrictResolver interface {
	Center(ctx context.Context, obj *ent.District) (*model.GeoJSON, error)
}
type ProvinceResolver interface {
	Center(ctx context.Context, obj *ent.Province) (*model.GeoJSON, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id xid.ID) (ent.Noder, error)
	Nodes(ctx context.Context, ids []xid.ID) ([]ent.Noder, error)
	Areas(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.AreaOrder, where *ent.AreaWhereInput) (*ent.AreaConnection, error)
	Cities(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CityOrder, where *ent.CityWhereInput) (*ent.CityConnection, error)
	Competitors(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CompetitorOrder, where *ent.CompetitorWhereInput) (*ent.CompetitorConnection, error)
	Countries(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.CountryOrder, where *ent.CountryWhereInput) (*ent.CountryConnection, error)
	Customers(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.CustomerOrder, where *ent.CustomerWhereInput) (*ent.CustomerConnection, error)
	Districts(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.DistrictOrder, where *ent.DistrictWhereInput) (*ent.DistrictConnection, error)
	Operations(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.OperationOrder, where *ent.OperationWhereInput) (*ent.OperationConnection, error)
	Plots(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.PlotOrder, where *ent.PlotWhereInput) (*ent.PlotConnection, error)
	PotentialTenders(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.PotentialTenderOrder, where *ent.PotentialTenderWhereInput) (*ent.PotentialTenderConnection, error)
	Projects(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectOrder, where *ent.ProjectWhereInput) (*ent.ProjectConnection, error)
	ProjectStaffs(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.ProjectStaffOrder, where *ent.ProjectStaffWhereInput) (*ent.ProjectStaffConnection, error)
	Provinces(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.ProvinceOrder, where *ent.ProvinceWhereInput) (*ent.ProvinceConnection, error)
	Tenders(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) (*ent.TenderConnection, error)
	TenderCompetitors(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderCompetitorOrder, where *ent.TenderCompetitorWhereInput) (*ent.TenderCompetitorConnection, error)
	TenderProfiles(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderProfileOrder, where *ent.TenderProfileWhereInput) (*ent.TenderProfileConnection, error)
	Users(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error)
	VisitRecords(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) (*ent.VisitRecordConnection, error)
	SearchFeishuUser(ctx context.Context, keyword string) ([]*model.FeishuUser, error)
	SearchLocation(ctx context.Context, keyword string) ([]*model.Location, error)
	Inputtips(ctx context.Context, areaID xid.ID, keyword string) ([]*model.Location, error)
	AmapRegeo(ctx context.Context, lng float64, lat float64) ([]*model.Location, error)
	TopCompetitors(ctx context.Context, first *int) ([]*model.TopCompetitor, error)
	BiToken(ctx context.Context) (string, error)
	Session(ctx context.Context) (*model.Session, error)
}
type TenderResolver interface {
	GeoCoordinate(ctx context.Context, obj *ent.Tender) (*model.GeoJSON, error)
}
type UserResolver interface {
	MyTenders(ctx context.Context, obj *ent.User, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.TenderOrder, where *ent.TenderWhereInput) (*ent.TenderConnection, error)
	MyVisitRecords(ctx context.Context, obj *ent.User, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy []*ent.VisitRecordOrder, where *ent.VisitRecordWhereInput) (*ent.VisitRecordConnection, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Area_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Area_customers_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Area_customers_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Area_customers_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Area_customers_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Area_customers_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Area_customers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Area_customers_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_customers_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_customers_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_customers_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_customers_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.CustomerOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.CustomerOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCustomerOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.CustomerOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Area_customers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Area_provinces_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Area_provinces_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Area_provinces_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Area_provinces_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Area_provinces_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Area_provinces_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Area_provinces_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.ProvinceOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProvinceOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrder(ctx, tmp)
	}

	var zeroVal *ent.ProvinceOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Area_provinces_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProvinceWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProvinceWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Area_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Area_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Area_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Area_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Area_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Area_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Area_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Area_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Area_users_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Area_users_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Area_users_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Area_users_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Area_users_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Area_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Area_users_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.UserOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOUserOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrder(ctx, tmp)
	}

	var zeroVal *ent.UserOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Area_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_City_districts_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_City_districts_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_City_districts_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_City_districts_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_City_districts_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_City_districts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_City_districts_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.DistrictOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalODistrictOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrder(ctx, tmp)
	}

	var zeroVal *ent.DistrictOrder
	return zeroVal, nil
}

func (ec *executionContext) field_City_districts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.DistrictWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalODistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx, tmp)
	}

	var zeroVal *ent.DistrictWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_City_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_City_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_City_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_City_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_City_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_City_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_City_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_City_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Country_provinces_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Country_provinces_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Country_provinces_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Country_provinces_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Country_provinces_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Country_provinces_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Country_provinces_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.ProvinceOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProvinceOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrder(ctx, tmp)
	}

	var zeroVal *ent.ProvinceOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Country_provinces_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProvinceWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProvinceWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Customer_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Customer_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Customer_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Customer_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Customer_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Customer_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Customer_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Customer_visitRecords_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Customer_visitRecords_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Customer_visitRecords_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Customer_visitRecords_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Customer_visitRecords_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Customer_visitRecords_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Customer_visitRecords_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.VisitRecordOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.VisitRecordOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.VisitRecordOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Customer_visitRecords_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.VisitRecordWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.VisitRecordWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, tmp)
	}

	var zeroVal *ent.VisitRecordWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_District_plots_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_District_plots_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_District_plots_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_District_plots_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_District_plots_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_District_plots_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_District_plots_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PlotOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.PlotOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPlotOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrder(ctx, tmp)
	}

	var zeroVal *ent.PlotOrder
	return zeroVal, nil
}

func (ec *executionContext) field_District_plots_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PlotWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.PlotWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx, tmp)
	}

	var zeroVal *ent.PlotWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_District_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_District_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_District_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_District_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_District_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_District_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_District_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_District_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Project_projectStaffs_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Project_projectStaffs_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Project_projectStaffs_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Project_projectStaffs_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Project_projectStaffs_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Project_projectStaffs_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Project_projectStaffs_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.ProjectStaffOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.ProjectStaffOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectStaffOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.ProjectStaffOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Project_projectStaffs_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProjectStaffWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProjectStaffWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProjectStaffWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Project_users_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Project_users_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Project_users_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Project_users_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Project_users_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Project_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Project_users_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.UserOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOUserOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrder(ctx, tmp)
	}

	var zeroVal *ent.UserOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Project_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Province_cities_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Province_cities_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Province_cities_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Province_cities_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Province_cities_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Province_cities_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Province_cities_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CityOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.CityOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCityOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrder(ctx, tmp)
	}

	var zeroVal *ent.CityOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Province_cities_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CityWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CityWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CityWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Province_districts_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Province_districts_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Province_districts_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Province_districts_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Province_districts_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Province_districts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Province_districts_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.DistrictOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalODistrictOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrder(ctx, tmp)
	}

	var zeroVal *ent.DistrictOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Province_districts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.DistrictWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalODistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx, tmp)
	}

	var zeroVal *ent.DistrictWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Province_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Province_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Province_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Province_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Province_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Province_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Province_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Province_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["name"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_amapRegeo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_amapRegeo_argsLng(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lng"] = arg0
	arg1, err := ec.field_Query_amapRegeo_argsLat(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["lat"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_amapRegeo_argsLng(
	ctx context.Context,
	rawArgs map[string]interface{},
) (float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["lng"]
	if !ok {
		var zeroVal float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lng"))
	if tmp, ok := rawArgs["lng"]; ok {
		return ec.unmarshalNFloat2float64(ctx, tmp)
	}

	var zeroVal float64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_amapRegeo_argsLat(
	ctx context.Context,
	rawArgs map[string]interface{},
) (float64, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["lat"]
	if !ok {
		var zeroVal float64
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
	if tmp, ok := rawArgs["lat"]; ok {
		return ec.unmarshalNFloat2float64(ctx, tmp)
	}

	var zeroVal float64
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_areas_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_areas_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_areas_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_areas_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_areas_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_areas_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_areas_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AreaOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.AreaOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOAreaOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrder(ctx, tmp)
	}

	var zeroVal *ent.AreaOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_areas_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AreaWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.AreaWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx, tmp)
	}

	var zeroVal *ent.AreaWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_cities_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_cities_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_cities_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_cities_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_cities_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_cities_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_cities_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CityOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.CityOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCityOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrder(ctx, tmp)
	}

	var zeroVal *ent.CityOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cities_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CityWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CityWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CityWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_competitors_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_competitors_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_competitors_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_competitors_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_competitors_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_competitors_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_competitors_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.CompetitorOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.CompetitorOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCompetitorOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.CompetitorOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_competitors_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CompetitorWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CompetitorWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CompetitorWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_countries_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_countries_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_countries_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_countries_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_countries_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_countries_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_countries_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CountryOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.CountryOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCountryOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryOrder(ctx, tmp)
	}

	var zeroVal *ent.CountryOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_countries_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CountryWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CountryWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCountryWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CountryWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_customers_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_customers_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_customers_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_customers_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_customers_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_customers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_customers_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.CustomerOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.CustomerOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCustomerOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.CustomerOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_customers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_districts_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_districts_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_districts_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_districts_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_districts_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_districts_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_districts_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.DistrictOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalODistrictOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrder(ctx, tmp)
	}

	var zeroVal *ent.DistrictOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_districts_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.DistrictWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.DistrictWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalODistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx, tmp)
	}

	var zeroVal *ent.DistrictWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_inputtips_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_inputtips_argsAreaID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["areaId"] = arg0
	arg1, err := ec.field_Query_inputtips_argsKeyword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["keyword"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_inputtips_argsAreaID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["areaId"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("areaId"))
	if tmp, ok := rawArgs["areaId"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_inputtips_argsKeyword(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["keyword"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
	if tmp, ok := rawArgs["keyword"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_node_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_node_argsID(
	ctx context.Context,
	rawArgs map[string]interface{},
) (xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["id"]
	if !ok {
		var zeroVal xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, tmp)
	}

	var zeroVal xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_nodes_argsIds(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_nodes_argsIds(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]xid.ID, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["ids"]
	if !ok {
		var zeroVal []xid.ID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
	if tmp, ok := rawArgs["ids"]; ok {
		return ec.unmarshalNID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, tmp)
	}

	var zeroVal []xid.ID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_operations_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_operations_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_operations_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_operations_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_operations_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_operations_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_operations_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.OperationOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.OperationOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOOperationOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationOrder(ctx, tmp)
	}

	var zeroVal *ent.OperationOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_operations_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.OperationWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.OperationWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOOperationWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInput(ctx, tmp)
	}

	var zeroVal *ent.OperationWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_plots_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_plots_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_plots_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_plots_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_plots_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_plots_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_plots_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PlotOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.PlotOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPlotOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrder(ctx, tmp)
	}

	var zeroVal *ent.PlotOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_plots_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PlotWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.PlotWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx, tmp)
	}

	var zeroVal *ent.PlotWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_potentialTenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_potentialTenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_potentialTenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_potentialTenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_potentialTenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_potentialTenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_potentialTenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.PotentialTenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.PotentialTenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOPotentialTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.PotentialTenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_potentialTenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.PotentialTenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.PotentialTenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOPotentialTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.PotentialTenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_projectStaffs_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_projectStaffs_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_projectStaffs_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_projectStaffs_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_projectStaffs_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_projectStaffs_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_projectStaffs_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.ProjectStaffOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.ProjectStaffOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectStaffOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.ProjectStaffOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projectStaffs_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProjectStaffWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProjectStaffWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProjectStaffWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_projects_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_projects_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_projects_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_projects_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_projects_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_projects_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_projects_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.ProjectOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.ProjectOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.ProjectOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_projects_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProjectWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProjectWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProjectWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_provinces_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_provinces_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_provinces_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_provinces_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_provinces_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_provinces_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_provinces_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.ProvinceOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProvinceOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrder(ctx, tmp)
	}

	var zeroVal *ent.ProvinceOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_provinces_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProvinceWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProvinceWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProvinceWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_searchFeishuUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_searchFeishuUser_argsKeyword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["keyword"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_searchFeishuUser_argsKeyword(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["keyword"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
	if tmp, ok := rawArgs["keyword"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_searchLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_searchLocation_argsKeyword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["keyword"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_searchLocation_argsKeyword(
	ctx context.Context,
	rawArgs map[string]interface{},
) (string, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["keyword"]
	if !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
	if tmp, ok := rawArgs["keyword"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_tenderCompetitors_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_tenderCompetitors_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_tenderCompetitors_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_tenderCompetitors_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_tenderCompetitors_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_tenderCompetitors_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_tenderCompetitors_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderCompetitorOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderCompetitorOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderCompetitorOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderCompetitorOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderCompetitors_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderCompetitorWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderCompetitorWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderCompetitorWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_tenderProfiles_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_tenderProfiles_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_tenderProfiles_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_tenderProfiles_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_tenderProfiles_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_tenderProfiles_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_tenderProfiles_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderProfileOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderProfileOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderProfileOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderProfileOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenderProfiles_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderProfileWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderProfileWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderProfileWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_topCompetitors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_topCompetitors_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_topCompetitors_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_users_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_users_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_users_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_users_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_users_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_users_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_users_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.UserOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOUserOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrder(ctx, tmp)
	}

	var zeroVal *ent.UserOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_users_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Query_visitRecords_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Query_visitRecords_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Query_visitRecords_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Query_visitRecords_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Query_visitRecords_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Query_visitRecords_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Query_visitRecords_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.VisitRecordOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.VisitRecordOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.VisitRecordOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Query_visitRecords_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.VisitRecordWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.VisitRecordWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, tmp)
	}

	var zeroVal *ent.VisitRecordWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Tender_profiles_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Tender_profiles_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Tender_profiles_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Tender_profiles_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Tender_profiles_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Tender_profiles_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Tender_profiles_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderProfileOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderProfileOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderProfileOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderProfileOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_profiles_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderProfileWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderProfileWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderProfileWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_Tender_visitRecords_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_Tender_visitRecords_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_Tender_visitRecords_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_Tender_visitRecords_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_Tender_visitRecords_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_Tender_visitRecords_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_Tender_visitRecords_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.VisitRecordOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.VisitRecordOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.VisitRecordOrder
	return zeroVal, nil
}

func (ec *executionContext) field_Tender_visitRecords_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.VisitRecordWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.VisitRecordWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, tmp)
	}

	var zeroVal *ent.VisitRecordWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_areas_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_areas_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_areas_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_areas_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_areas_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_areas_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_areas_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AreaOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.AreaOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOAreaOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrder(ctx, tmp)
	}

	var zeroVal *ent.AreaOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_areas_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.AreaWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.AreaWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx, tmp)
	}

	var zeroVal *ent.AreaWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_customers_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_customers_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_customers_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_customers_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_customers_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_customers_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_customers_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.CustomerOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.CustomerOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOCustomerOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.CustomerOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_customers_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.CustomerWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.CustomerWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx, tmp)
	}

	var zeroVal *ent.CustomerWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_myTenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_myTenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_myTenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_myTenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_myTenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_myTenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_myTenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_myTenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_myVisitRecords_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_myVisitRecords_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_myVisitRecords_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_myVisitRecords_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_myVisitRecords_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_myVisitRecords_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_myVisitRecords_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.VisitRecordOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.VisitRecordOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.VisitRecordOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_myVisitRecords_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.VisitRecordWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.VisitRecordWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, tmp)
	}

	var zeroVal *ent.VisitRecordWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_projects_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_projects_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_projects_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_projects_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_projects_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_projects_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_projects_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.ProjectOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.ProjectOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOProjectOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.ProjectOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_projects_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.ProjectWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.ProjectWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx, tmp)
	}

	var zeroVal *ent.ProjectWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_tenders_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_tenders_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_tenders_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_tenders_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_tenders_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_tenders_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_tenders_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.TenderOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.TenderOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.TenderOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_tenders_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.TenderWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.TenderWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, tmp)
	}

	var zeroVal *ent.TenderWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_User_visitRecords_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_User_visitRecords_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_User_visitRecords_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_User_visitRecords_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_User_visitRecords_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_User_visitRecords_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_User_visitRecords_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) ([]*ent.VisitRecordOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal []*ent.VisitRecordOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx, tmp)
	}

	var zeroVal []*ent.VisitRecordOrder
	return zeroVal, nil
}

func (ec *executionContext) field_User_visitRecords_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.VisitRecordWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.VisitRecordWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, tmp)
	}

	var zeroVal *ent.VisitRecordWhereInput
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	arg0, err := ec.field_VisitRecord_followupbys_argsAfter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := ec.field_VisitRecord_followupbys_argsFirst(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := ec.field_VisitRecord_followupbys_argsBefore(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := ec.field_VisitRecord_followupbys_argsLast(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := ec.field_VisitRecord_followupbys_argsOrderBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	arg5, err := ec.field_VisitRecord_followupbys_argsWhere(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["where"] = arg5
	return args, nil
}
func (ec *executionContext) field_VisitRecord_followupbys_argsAfter(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["after"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
	if tmp, ok := rawArgs["after"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_argsFirst(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["first"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
	if tmp, ok := rawArgs["first"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_argsBefore(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*entgql.Cursor[xid.ID], error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["before"]
	if !ok {
		var zeroVal *entgql.Cursor[xid.ID]
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
	if tmp, ok := rawArgs["before"]; ok {
		return ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
	}

	var zeroVal *entgql.Cursor[xid.ID]
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_argsLast(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*int, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["last"]
	if !ok {
		var zeroVal *int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
	if tmp, ok := rawArgs["last"]; ok {
		return ec.unmarshalOInt2ᚖint(ctx, tmp)
	}

	var zeroVal *int
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_argsOrderBy(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserOrder, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["orderBy"]
	if !ok {
		var zeroVal *ent.UserOrder
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
	if tmp, ok := rawArgs["orderBy"]; ok {
		return ec.unmarshalOUserOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrder(ctx, tmp)
	}

	var zeroVal *ent.UserOrder
	return zeroVal, nil
}

func (ec *executionContext) field_VisitRecord_followupbys_argsWhere(
	ctx context.Context,
	rawArgs map[string]interface{},
) (*ent.UserWhereInput, error) {
	// We won't call the directive if the argument is null.
	// Set call_argument_directives_with_null to true to call directives
	// even if the argument is null.
	_, ok := rawArgs["where"]
	if !ok {
		var zeroVal *ent.UserWhereInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
	if tmp, ok := rawArgs["where"]; ok {
		return ec.unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, tmp)
	}

	var zeroVal *ent.UserWhereInput
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Area_id(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_name(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_code(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_leaderChatID(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_leaderChatID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderChatID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_leaderChatID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_salesChatID(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_salesChatID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesChatID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_salesChatID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Area_customers(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.CustomerOrder), fc.Args["where"].(*ent.CustomerWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CustomerConnection)
	fc.Result = res
	return ec.marshalNCustomerConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_customers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CustomerConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CustomerConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CustomerConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Area_customers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Area_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Area_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Area_users(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.UserOrder), fc.Args["where"].(*ent.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Area_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Area_provinces(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_provinces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provinces(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.ProvinceOrder), fc.Args["where"].(*ent.ProvinceWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProvinceConnection)
	fc.Result = res
	return ec.marshalNProvinceConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_provinces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProvinceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProvinceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProvinceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProvinceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Area_provinces_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Area_center(ctx context.Context, field graphql.CollectedField, obj *ent.Area) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Area_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Area().Center(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Area_center(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Area",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AreaConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.AreaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AreaConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.AreaEdge)
	fc.Result = res
	return ec.marshalOAreaEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AreaConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AreaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AreaEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AreaEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AreaEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AreaConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.AreaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AreaConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AreaConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AreaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AreaConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.AreaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AreaConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AreaConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AreaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AreaEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.AreaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AreaEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AreaEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AreaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Area_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Area_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Area_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Area_name(ctx, field)
			case "code":
				return ec.fieldContext_Area_code(ctx, field)
			case "leaderChatID":
				return ec.fieldContext_Area_leaderChatID(ctx, field)
			case "salesChatID":
				return ec.fieldContext_Area_salesChatID(ctx, field)
			case "customers":
				return ec.fieldContext_Area_customers(ctx, field)
			case "tenders":
				return ec.fieldContext_Area_tenders(ctx, field)
			case "users":
				return ec.fieldContext_Area_users(ctx, field)
			case "provinces":
				return ec.fieldContext_Area_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Area_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Area", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AreaEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.AreaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AreaEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AreaEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AreaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_id(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_adcode(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_adcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_adcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_provCode(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_provCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_provCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_name(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_provinceID(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_provinceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_provinceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_districts(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_districts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Districts(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.DistrictOrder), fc.Args["where"].(*ent.DistrictWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DistrictConnection)
	fc.Result = res
	return ec.marshalNDistrictConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_districts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DistrictConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DistrictConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DistrictConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DistrictConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_City_districts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _City_province(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Province)
	fc.Result = res
	return ec.marshalNProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Province_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Province_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Province_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Province_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Province_name(ctx, field)
			case "countryID":
				return ec.fieldContext_Province_countryID(ctx, field)
			case "areaID":
				return ec.fieldContext_Province_areaID(ctx, field)
			case "districts":
				return ec.fieldContext_Province_districts(ctx, field)
			case "cities":
				return ec.fieldContext_Province_cities(ctx, field)
			case "country":
				return ec.fieldContext_Province_country(ctx, field)
			case "tenders":
				return ec.fieldContext_Province_tenders(ctx, field)
			case "area":
				return ec.fieldContext_Province_area(ctx, field)
			case "center":
				return ec.fieldContext_Province_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Province", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _City_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_City_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _City_center(ctx context.Context, field graphql.CollectedField, obj *ent.City) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_City_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.City().Center(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_City_center(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CityConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CityConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CityEdge)
	fc.Result = res
	return ec.marshalOCityEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CityConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CityEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CityEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CityEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CityConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CityConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CityConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CityConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CityConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CityConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CityConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CityConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CityEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CityEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CityEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.City)
	fc.Result = res
	return ec.marshalOCity2ᚖcscdᚑbdsᚋstoreᚋentᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CityEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CityEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_City_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_City_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_City_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_City_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_City_provCode(ctx, field)
			case "name":
				return ec.fieldContext_City_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_City_provinceID(ctx, field)
			case "districts":
				return ec.fieldContext_City_districts(ctx, field)
			case "province":
				return ec.fieldContext_City_province(ctx, field)
			case "tenders":
				return ec.fieldContext_City_tenders(ctx, field)
			case "center":
				return ec.fieldContext_City_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type City", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CityEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CityEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CityEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CityEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CityEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_id(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_shortName(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_shortName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_shortName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_name(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Competitor_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.Competitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Competitor_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TenderCompetitor)
	fc.Result = res
	return ec.marshalOTenderCompetitor2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Competitor_tenders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Competitor",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenderCompetitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenderCompetitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenderCompetitor_updatedAt(ctx, field)
			case "tenderID":
				return ec.fieldContext_TenderCompetitor_tenderID(ctx, field)
			case "competitorID":
				return ec.fieldContext_TenderCompetitor_competitorID(ctx, field)
			case "amount":
				return ec.fieldContext_TenderCompetitor_amount(ctx, field)
			case "tender":
				return ec.fieldContext_TenderCompetitor_tender(ctx, field)
			case "competitor":
				return ec.fieldContext_TenderCompetitor_competitor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderCompetitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetitorConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetitorConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CompetitorEdge)
	fc.Result = res
	return ec.marshalOCompetitorEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetitorConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CompetitorEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CompetitorEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetitorEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetitorConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetitorConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetitorConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetitorConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetitorConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetitorConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetitorEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CompetitorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetitorEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Competitor)
	fc.Result = res
	return ec.marshalOCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetitorEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetitorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Competitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competitor_updatedAt(ctx, field)
			case "shortName":
				return ec.fieldContext_Competitor_shortName(ctx, field)
			case "name":
				return ec.fieldContext_Competitor_name(ctx, field)
			case "tenders":
				return ec.fieldContext_Competitor_tenders(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompetitorEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CompetitorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompetitorEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompetitorEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompetitorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_id(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_adcode(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_adcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_adcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_name(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_provinces(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_provinces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provinces(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.ProvinceOrder), fc.Args["where"].(*ent.ProvinceWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProvinceConnection)
	fc.Result = res
	return ec.marshalNProvinceConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_provinces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProvinceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProvinceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProvinceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProvinceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Country_provinces_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Country_center(ctx context.Context, field graphql.CollectedField, obj *ent.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Country().Center(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_center(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CountryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CountryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CountryConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CountryEdge)
	fc.Result = res
	return ec.marshalOCountryEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CountryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CountryEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CountryEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CountryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CountryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CountryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CountryConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CountryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CountryConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CountryConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CountryConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CountryConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CountryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CountryEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CountryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CountryEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖcscdᚑbdsᚋstoreᚋentᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CountryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CountryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Country_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Country_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Country_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Country_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "provinces":
				return ec.fieldContext_Country_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Country_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CountryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CountryEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CountryEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CountryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CountryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_name(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_approvalStatus(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_approvalStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_approvalStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_ownerType(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_ownerType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_ownerType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_industry(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_industry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_industry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_size(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_contactPerson(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_contactPerson(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_contactPerson(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_contactPersonPosition(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_contactPersonPosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersonPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_contactPersonPosition(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_contactPersonPhone(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_contactPersonPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersonPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_contactPersonPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_contactPersonEmail(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_contactPersonEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersonEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_contactPersonEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_areaID(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_areaID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_areaID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_salesID(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_salesID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_salesID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdByID(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdByID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedByID(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedByID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_approverID(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_approverID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_approverID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_area(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Area)
	fc.Result = res
	return ec.marshalNArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_area(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Area_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Area_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Area_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Area_name(ctx, field)
			case "code":
				return ec.fieldContext_Area_code(ctx, field)
			case "leaderChatID":
				return ec.fieldContext_Area_leaderChatID(ctx, field)
			case "salesChatID":
				return ec.fieldContext_Area_salesChatID(ctx, field)
			case "customers":
				return ec.fieldContext_Area_customers(ctx, field)
			case "tenders":
				return ec.fieldContext_Area_tenders(ctx, field)
			case "users":
				return ec.fieldContext_Area_users(ctx, field)
			case "provinces":
				return ec.fieldContext_Area_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Area_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Area", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_sales(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_sales(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sales(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_sales(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_createdBy(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_updatedBy(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_updatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_approver(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_approver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_approver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Customer_visitRecords(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_visitRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitRecords(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.VisitRecordOrder), fc.Args["where"].(*ent.VisitRecordWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_visitRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Customer_visitRecords_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Customer_draft(ctx context.Context, field graphql.CollectedField, obj *ent.Customer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Customer_draft(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Customer().Draft(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomerDraft)
	fc.Result = res
	return ec.marshalOCustomerDraft2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐCustomerDraft(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Customer_draft(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_CustomerDraft_name(ctx, field)
			case "ownerType":
				return ec.fieldContext_CustomerDraft_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_CustomerDraft_industry(ctx, field)
			case "size":
				return ec.fieldContext_CustomerDraft_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_CustomerDraft_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_CustomerDraft_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_CustomerDraft_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_CustomerDraft_contactPersonEmail(ctx, field)
			case "area":
				return ec.fieldContext_CustomerDraft_area(ctx, field)
			case "sales":
				return ec.fieldContext_CustomerDraft_sales(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerDraft", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CustomerConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CustomerEdge)
	fc.Result = res
	return ec.marshalOCustomerEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CustomerEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CustomerEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.CustomerConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.CustomerConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CustomerEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CustomerEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_id(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_adcode(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_adcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_adcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_provCode(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_provCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_provCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_cityCode(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_cityCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_cityCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_name(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_provinceID(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_provinceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_provinceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_cityID(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_cityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_cityID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_province(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Province)
	fc.Result = res
	return ec.marshalNProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Province_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Province_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Province_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Province_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Province_name(ctx, field)
			case "countryID":
				return ec.fieldContext_Province_countryID(ctx, field)
			case "areaID":
				return ec.fieldContext_Province_areaID(ctx, field)
			case "districts":
				return ec.fieldContext_Province_districts(ctx, field)
			case "cities":
				return ec.fieldContext_Province_cities(ctx, field)
			case "country":
				return ec.fieldContext_Province_country(ctx, field)
			case "tenders":
				return ec.fieldContext_Province_tenders(ctx, field)
			case "area":
				return ec.fieldContext_Province_area(ctx, field)
			case "center":
				return ec.fieldContext_Province_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Province", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_city(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.City)
	fc.Result = res
	return ec.marshalOCity2ᚖcscdᚑbdsᚋstoreᚋentᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_City_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_City_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_City_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_City_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_City_provCode(ctx, field)
			case "name":
				return ec.fieldContext_City_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_City_provinceID(ctx, field)
			case "districts":
				return ec.fieldContext_City_districts(ctx, field)
			case "province":
				return ec.fieldContext_City_province(ctx, field)
			case "tenders":
				return ec.fieldContext_City_tenders(ctx, field)
			case "center":
				return ec.fieldContext_City_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type City", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _District_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_District_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _District_plots(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_plots(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plots(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.PlotOrder), fc.Args["where"].(*ent.PlotWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.PlotConnection)
	fc.Result = res
	return ec.marshalNPlotConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_plots(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PlotConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PlotConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PlotConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlotConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_District_plots_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _District_center(ctx context.Context, field graphql.CollectedField, obj *ent.District) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_District_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.District().Center(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_District_center(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DistrictConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.DistrictConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DistrictConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.DistrictEdge)
	fc.Result = res
	return ec.marshalODistrictEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DistrictConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DistrictConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_DistrictEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_DistrictEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DistrictEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DistrictConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.DistrictConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DistrictConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DistrictConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DistrictConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DistrictConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.DistrictConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DistrictConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DistrictConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DistrictConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DistrictEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.DistrictEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DistrictEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.District)
	fc.Result = res
	return ec.marshalODistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DistrictEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DistrictEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_District_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_District_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_District_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_District_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_District_provCode(ctx, field)
			case "cityCode":
				return ec.fieldContext_District_cityCode(ctx, field)
			case "name":
				return ec.fieldContext_District_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_District_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_District_cityID(ctx, field)
			case "province":
				return ec.fieldContext_District_province(ctx, field)
			case "city":
				return ec.fieldContext_District_city(ctx, field)
			case "tenders":
				return ec.fieldContext_District_tenders(ctx, field)
			case "plots":
				return ec.fieldContext_District_plots(ctx, field)
			case "center":
				return ec.fieldContext_District_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type District", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DistrictEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.DistrictEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DistrictEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DistrictEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DistrictEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_id(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_cjeYs(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_cjeYs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CjeYs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_cjeYs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_cjeLj(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_cjeLj(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CjeLj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_cjeLj(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_yyeYs(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_yyeYs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YyeYs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_yyeYs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_yyeLj(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_yyeLj(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YyeLj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_yyeLj(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_xjlYs(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_xjlYs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XjlYs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_xjlYs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_xjlLj(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_xjlLj(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XjlLj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_xjlLj(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_xmglf(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_xmglf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xmglf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_xmglf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Operation_xmsjf(ctx context.Context, field graphql.CollectedField, obj *ent.Operation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Operation_xmsjf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xmsjf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Operation_xmsjf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Operation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.OperationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.OperationEdge)
	fc.Result = res
	return ec.marshalOOperationEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐOperationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_OperationEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_OperationEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.OperationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.OperationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.OperationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Operation)
	fc.Result = res
	return ec.marshalOOperation2ᚖcscdᚑbdsᚋstoreᚋentᚐOperation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Operation_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Operation_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Operation_updatedAt(ctx, field)
			case "cjeYs":
				return ec.fieldContext_Operation_cjeYs(ctx, field)
			case "cjeLj":
				return ec.fieldContext_Operation_cjeLj(ctx, field)
			case "yyeYs":
				return ec.fieldContext_Operation_yyeYs(ctx, field)
			case "yyeLj":
				return ec.fieldContext_Operation_yyeLj(ctx, field)
			case "xjlYs":
				return ec.fieldContext_Operation_xjlYs(ctx, field)
			case "xjlLj":
				return ec.fieldContext_Operation_xjlLj(ctx, field)
			case "xmglf":
				return ec.fieldContext_Operation_xmglf(ctx, field)
			case "xmsjf":
				return ec.fieldContext_Operation_xmsjf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Operation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.OperationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[xid.ID]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[xid.ID]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[xid.ID]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[xid.ID]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_id(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_name(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_colorHex(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_colorHex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorHex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_colorHex(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_districtID(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_districtID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_districtID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_district(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_district(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.District)
	fc.Result = res
	return ec.marshalNDistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_district(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_District_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_District_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_District_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_District_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_District_provCode(ctx, field)
			case "cityCode":
				return ec.fieldContext_District_cityCode(ctx, field)
			case "name":
				return ec.fieldContext_District_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_District_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_District_cityID(ctx, field)
			case "province":
				return ec.fieldContext_District_province(ctx, field)
			case "city":
				return ec.fieldContext_District_city(ctx, field)
			case "tenders":
				return ec.fieldContext_District_tenders(ctx, field)
			case "plots":
				return ec.fieldContext_District_plots(ctx, field)
			case "center":
				return ec.fieldContext_District_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type District", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plot_geoBounds(ctx context.Context, field graphql.CollectedField, obj *ent.Plot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plot_geoBounds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeoBounds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([][]float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕᚕfloat64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plot_geoBounds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plot",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlotConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.PlotConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlotConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PlotEdge)
	fc.Result = res
	return ec.marshalOPlotEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlotConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlotConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PlotEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PlotEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlotEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlotConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.PlotConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlotConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlotConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlotConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlotConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.PlotConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlotConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlotConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlotConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlotEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.PlotEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlotEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Plot)
	fc.Result = res
	return ec.marshalOPlot2ᚖcscdᚑbdsᚋstoreᚋentᚐPlot(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlotEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlotEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plot_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plot_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plot_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Plot_name(ctx, field)
			case "colorHex":
				return ec.fieldContext_Plot_colorHex(ctx, field)
			case "districtID":
				return ec.fieldContext_Plot_districtID(ctx, field)
			case "district":
				return ec.fieldContext_Plot_district(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Plot_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plot", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlotEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.PlotEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlotEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlotEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlotEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_id(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_refURL(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_refURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_refURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_title(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_description(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_requirement(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_requirement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requirement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_requirement(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_address(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_date(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_type(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_status(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_amount(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_size(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_location(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_contact(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_contact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_contactPhone(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_contactPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_contactPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_contactEmail(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_contactEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_contactEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTender_contactAddress(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTender_contactAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTender_contactAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTenderConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTenderConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PotentialTenderEdge)
	fc.Result = res
	return ec.marshalOPotentialTenderEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTenderConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_PotentialTenderEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_PotentialTenderEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PotentialTenderEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTenderConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTenderConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTenderConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTenderConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTenderConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTenderConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTenderEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTenderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTenderEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.PotentialTender)
	fc.Result = res
	return ec.marshalOPotentialTender2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTenderEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTenderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PotentialTender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_PotentialTender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PotentialTender_updatedAt(ctx, field)
			case "refURL":
				return ec.fieldContext_PotentialTender_refURL(ctx, field)
			case "title":
				return ec.fieldContext_PotentialTender_title(ctx, field)
			case "description":
				return ec.fieldContext_PotentialTender_description(ctx, field)
			case "requirement":
				return ec.fieldContext_PotentialTender_requirement(ctx, field)
			case "address":
				return ec.fieldContext_PotentialTender_address(ctx, field)
			case "date":
				return ec.fieldContext_PotentialTender_date(ctx, field)
			case "type":
				return ec.fieldContext_PotentialTender_type(ctx, field)
			case "status":
				return ec.fieldContext_PotentialTender_status(ctx, field)
			case "amount":
				return ec.fieldContext_PotentialTender_amount(ctx, field)
			case "size":
				return ec.fieldContext_PotentialTender_size(ctx, field)
			case "location":
				return ec.fieldContext_PotentialTender_location(ctx, field)
			case "contact":
				return ec.fieldContext_PotentialTender_contact(ctx, field)
			case "contactPhone":
				return ec.fieldContext_PotentialTender_contactPhone(ctx, field)
			case "contactEmail":
				return ec.fieldContext_PotentialTender_contactEmail(ctx, field)
			case "contactAddress":
				return ec.fieldContext_PotentialTender_contactAddress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PotentialTender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PotentialTenderEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.PotentialTenderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PotentialTenderEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PotentialTenderEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PotentialTenderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_code(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_manager(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_manager(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_manager(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_owner(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_jzs(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_jzs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jzs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_jzs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_mcn(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_mcn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mcn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_mcn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_consultant(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_consultant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Consultant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_consultant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_areas(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_areas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Areas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_areas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_startDate(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_fsDate(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_fsDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FsDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_fsDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_opDate(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_opDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_opDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_endDate(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_mntyr(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_mntyr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mntyr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_mntyr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_conType(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_conType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_conType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_isFinished(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_isFinished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_isFinished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_cje(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_cje(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cje, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_cje(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_yye(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_yye(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_yye(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_xjl(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_xjl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xjl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_xjl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_xmglfYs(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_xmglfYs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XmglfYs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_xmglfYs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_xmglfLj(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_xmglfLj(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XmglfLj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_xmglfLj(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_xmsjf(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_xmsjf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xmsjf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_xmsjf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_xmfzr(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_xmfzr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xmfzr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_xmfzr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_ownerApplyAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_ownerApplyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerApplyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_ownerApplyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_ownerApplyCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_ownerApplyCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerApplyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_ownerApplyCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_ownerApproveAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_ownerApproveAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerApproveAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_ownerApproveAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_ownerApproveCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_ownerApproveCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerApproveCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_ownerApproveCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_contractorApplyAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_contractorApplyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorApplyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_contractorApplyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_contractorApplyCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_contractorApplyCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorApplyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_contractorApplyCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_contractorApproveAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_contractorApproveAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorApproveAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_contractorApproveAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_contractorApproveCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_contractorApproveCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorApproveCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_contractorApproveCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_installProgress(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_installProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstallProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_installProgress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_effectiveContractAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_effectiveContractAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveContractAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_effectiveContractAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_vaApplyAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_vaApplyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VaApplyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_vaApplyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_vaApproveAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_vaApproveAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VaApproveAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_vaApproveAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_accumulatedStatutoryDeductions(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_accumulatedStatutoryDeductions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedStatutoryDeductions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_accumulatedStatutoryDeductions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_accumulatedNonStatutoryDeductions(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_accumulatedNonStatutoryDeductions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedNonStatutoryDeductions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_accumulatedNonStatutoryDeductions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_accumulatedStatutoryDeductionsPeriod(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_accumulatedStatutoryDeductionsPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedStatutoryDeductionsPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_accumulatedStatutoryDeductionsPeriod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_accumulatedNonStatutoryDeductionsPeriod(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulatedNonStatutoryDeductionsPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_totalContractAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_totalContractAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalContractAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_totalContractAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_aluminumPlateBudgetPercentage(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_aluminumPlateBudgetPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AluminumPlateBudgetPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_aluminumPlateBudgetPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_aluminumBudgetPercentage(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_aluminumBudgetPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AluminumBudgetPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_aluminumBudgetPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_glassBudgetPercentage(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_glassBudgetPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlassBudgetPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_glassBudgetPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_ironBudgetPercentage(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_ironBudgetPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IronBudgetPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_ironBudgetPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_milestonePlanYear(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_milestonePlanYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestonePlanYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_milestonePlanYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_milestonePlanMonth(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_milestonePlanMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestonePlanMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_milestonePlanMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_milestoneDoneYear(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_milestoneDoneYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestoneDoneYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_milestoneDoneYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_milestoneDoneMonth(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_milestoneDoneMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MilestoneDoneMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_milestoneDoneMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmArea(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmYearTarget(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmYearTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmYearTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmYearTarget(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmMonthTarget(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmMonthTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmMonthTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmMonthTarget(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmYearActual(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmYearActual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmYearActual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmYearActual(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmMonthActual(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmMonthActual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmMonthActual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmMonthActual(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmTotal(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmTotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_pmYesterday(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_pmYesterday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PmYesterday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_pmYesterday(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_unitInventoryTotal(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_unitInventoryTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitInventoryTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_unitInventoryTotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_unitComponentTotal(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_unitComponentTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitComponentTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_unitComponentTotal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_unitComponentProduction(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_unitComponentProduction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitComponentProduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_unitComponentProduction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_unitComponentInstallation(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_unitComponentInstallation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitComponentInstallation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_unitComponentInstallation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_materialLoss(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_materialLoss(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialLoss, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_materialLoss(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_designRatedWeight(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_designRatedWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesignRatedWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_designRatedWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_processingWeight(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_processingWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_processingWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_itemStockWeight(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_itemStockWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemStockWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_itemStockWeight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_palletsInStock(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_palletsInStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PalletsInStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_palletsInStock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_partsInStock(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_partsInStock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartsInStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_partsInStock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_qualityScore(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_qualityScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_qualityScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_qualityRanking(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_qualityRanking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityRanking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_qualityRanking(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_bulkMaterialsTotalOrderQuantity(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_bulkMaterialsTotalOrderQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkMaterialsTotalOrderQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_bulkMaterialsTotalOrderQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_bulkMaterialsCompletedQuantity(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_bulkMaterialsCompletedQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkMaterialsCompletedQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_bulkMaterialsCompletedQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_bulkMaterialsUncompletedQuantity(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_bulkMaterialsUncompletedQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkMaterialsUncompletedQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_bulkMaterialsUncompletedQuantity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_planTotalCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_planTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_planTotalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_planOverdueCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_planOverdueCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanOverdueCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_planOverdueCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_planOverdueMonthCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_planOverdueMonthCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanOverdueMonthCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_planOverdueMonthCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramBdFinishCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramBdFinishCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramBdFinishCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramBdFinishCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramBdTotalCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramBdTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramBdTotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramBdTotalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramConstructionFinishCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramConstructionFinishCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramConstructionFinishCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramConstructionFinishCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramConstructionTotalCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramConstructionTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramConstructionTotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramConstructionTotalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramProcessingFinishCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramProcessingFinishCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramProcessingFinishCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramProcessingFinishCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramProcessingTotalCount(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramProcessingTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramProcessingTotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramProcessingTotalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramCApprovalRatioNumerator(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramCApprovalRatioNumerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramCApprovalRatioNumerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramCApprovalRatioNumerator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_diagramCApprovalRatioDenominator(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_diagramCApprovalRatioDenominator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramCApprovalRatioDenominator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_diagramCApprovalRatioDenominator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_vos(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_vos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vos(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProjectVO)
	fc.Result = res
	return ec.marshalOProjectVO2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_vos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectVO_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProjectVO_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ProjectVO_updatedAt(ctx, field)
			case "projectID":
				return ec.fieldContext_ProjectVO_projectID(ctx, field)
			case "changeType":
				return ec.fieldContext_ProjectVO_changeType(ctx, field)
			case "isApproved":
				return ec.fieldContext_ProjectVO_isApproved(ctx, field)
			case "azjd":
				return ec.fieldContext_ProjectVO_azjd(ctx, field)
			case "yxhyze":
				return ec.fieldContext_ProjectVO_yxhyze(ctx, field)
			case "applyAmount":
				return ec.fieldContext_ProjectVO_applyAmount(ctx, field)
			case "approveAmount":
				return ec.fieldContext_ProjectVO_approveAmount(ctx, field)
			case "project":
				return ec.fieldContext_ProjectVO_project(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectVO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_projectStaffs(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_projectStaffs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectStaffs(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.ProjectStaffOrder), fc.Args["where"].(*ent.ProjectStaffWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectStaffConnection)
	fc.Result = res
	return ec.marshalNProjectStaffConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_projectStaffs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectStaffConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectStaffConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectStaffConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectStaffConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_projectStaffs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Project_users(ctx context.Context, field graphql.CollectedField, obj *ent.Project) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Project_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.UserOrder), fc.Args["where"].(*ent.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Project_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Project_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProjectEdge)
	fc.Result = res
	return ec.marshalOProjectEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProjectEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProjectEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalOProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Project_code(ctx, field)
			case "manager":
				return ec.fieldContext_Project_manager(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "owner":
				return ec.fieldContext_Project_owner(ctx, field)
			case "jzs":
				return ec.fieldContext_Project_jzs(ctx, field)
			case "mcn":
				return ec.fieldContext_Project_mcn(ctx, field)
			case "consultant":
				return ec.fieldContext_Project_consultant(ctx, field)
			case "areas":
				return ec.fieldContext_Project_areas(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "fsDate":
				return ec.fieldContext_Project_fsDate(ctx, field)
			case "opDate":
				return ec.fieldContext_Project_opDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "mntyr":
				return ec.fieldContext_Project_mntyr(ctx, field)
			case "conType":
				return ec.fieldContext_Project_conType(ctx, field)
			case "isFinished":
				return ec.fieldContext_Project_isFinished(ctx, field)
			case "cje":
				return ec.fieldContext_Project_cje(ctx, field)
			case "yye":
				return ec.fieldContext_Project_yye(ctx, field)
			case "xjl":
				return ec.fieldContext_Project_xjl(ctx, field)
			case "xmglfYs":
				return ec.fieldContext_Project_xmglfYs(ctx, field)
			case "xmglfLj":
				return ec.fieldContext_Project_xmglfLj(ctx, field)
			case "xmsjf":
				return ec.fieldContext_Project_xmsjf(ctx, field)
			case "xmfzr":
				return ec.fieldContext_Project_xmfzr(ctx, field)
			case "ownerApplyAmount":
				return ec.fieldContext_Project_ownerApplyAmount(ctx, field)
			case "ownerApplyCount":
				return ec.fieldContext_Project_ownerApplyCount(ctx, field)
			case "ownerApproveAmount":
				return ec.fieldContext_Project_ownerApproveAmount(ctx, field)
			case "ownerApproveCount":
				return ec.fieldContext_Project_ownerApproveCount(ctx, field)
			case "contractorApplyAmount":
				return ec.fieldContext_Project_contractorApplyAmount(ctx, field)
			case "contractorApplyCount":
				return ec.fieldContext_Project_contractorApplyCount(ctx, field)
			case "contractorApproveAmount":
				return ec.fieldContext_Project_contractorApproveAmount(ctx, field)
			case "contractorApproveCount":
				return ec.fieldContext_Project_contractorApproveCount(ctx, field)
			case "installProgress":
				return ec.fieldContext_Project_installProgress(ctx, field)
			case "effectiveContractAmount":
				return ec.fieldContext_Project_effectiveContractAmount(ctx, field)
			case "vaApplyAmount":
				return ec.fieldContext_Project_vaApplyAmount(ctx, field)
			case "vaApproveAmount":
				return ec.fieldContext_Project_vaApproveAmount(ctx, field)
			case "accumulatedStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedStatutoryDeductions(ctx, field)
			case "accumulatedNonStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductions(ctx, field)
			case "accumulatedStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedStatutoryDeductionsPeriod(ctx, field)
			case "accumulatedNonStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field)
			case "totalContractAmount":
				return ec.fieldContext_Project_totalContractAmount(ctx, field)
			case "aluminumPlateBudgetPercentage":
				return ec.fieldContext_Project_aluminumPlateBudgetPercentage(ctx, field)
			case "aluminumBudgetPercentage":
				return ec.fieldContext_Project_aluminumBudgetPercentage(ctx, field)
			case "glassBudgetPercentage":
				return ec.fieldContext_Project_glassBudgetPercentage(ctx, field)
			case "ironBudgetPercentage":
				return ec.fieldContext_Project_ironBudgetPercentage(ctx, field)
			case "milestonePlanYear":
				return ec.fieldContext_Project_milestonePlanYear(ctx, field)
			case "milestonePlanMonth":
				return ec.fieldContext_Project_milestonePlanMonth(ctx, field)
			case "milestoneDoneYear":
				return ec.fieldContext_Project_milestoneDoneYear(ctx, field)
			case "milestoneDoneMonth":
				return ec.fieldContext_Project_milestoneDoneMonth(ctx, field)
			case "pmArea":
				return ec.fieldContext_Project_pmArea(ctx, field)
			case "pmYearTarget":
				return ec.fieldContext_Project_pmYearTarget(ctx, field)
			case "pmMonthTarget":
				return ec.fieldContext_Project_pmMonthTarget(ctx, field)
			case "pmYearActual":
				return ec.fieldContext_Project_pmYearActual(ctx, field)
			case "pmMonthActual":
				return ec.fieldContext_Project_pmMonthActual(ctx, field)
			case "pmTotal":
				return ec.fieldContext_Project_pmTotal(ctx, field)
			case "pmYesterday":
				return ec.fieldContext_Project_pmYesterday(ctx, field)
			case "unitInventoryTotal":
				return ec.fieldContext_Project_unitInventoryTotal(ctx, field)
			case "unitComponentTotal":
				return ec.fieldContext_Project_unitComponentTotal(ctx, field)
			case "unitComponentProduction":
				return ec.fieldContext_Project_unitComponentProduction(ctx, field)
			case "unitComponentInstallation":
				return ec.fieldContext_Project_unitComponentInstallation(ctx, field)
			case "materialLoss":
				return ec.fieldContext_Project_materialLoss(ctx, field)
			case "designRatedWeight":
				return ec.fieldContext_Project_designRatedWeight(ctx, field)
			case "processingWeight":
				return ec.fieldContext_Project_processingWeight(ctx, field)
			case "itemStockWeight":
				return ec.fieldContext_Project_itemStockWeight(ctx, field)
			case "palletsInStock":
				return ec.fieldContext_Project_palletsInStock(ctx, field)
			case "partsInStock":
				return ec.fieldContext_Project_partsInStock(ctx, field)
			case "qualityScore":
				return ec.fieldContext_Project_qualityScore(ctx, field)
			case "qualityRanking":
				return ec.fieldContext_Project_qualityRanking(ctx, field)
			case "bulkMaterialsTotalOrderQuantity":
				return ec.fieldContext_Project_bulkMaterialsTotalOrderQuantity(ctx, field)
			case "bulkMaterialsCompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsCompletedQuantity(ctx, field)
			case "bulkMaterialsUncompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsUncompletedQuantity(ctx, field)
			case "planTotalCount":
				return ec.fieldContext_Project_planTotalCount(ctx, field)
			case "planOverdueCount":
				return ec.fieldContext_Project_planOverdueCount(ctx, field)
			case "planOverdueMonthCount":
				return ec.fieldContext_Project_planOverdueMonthCount(ctx, field)
			case "diagramBdFinishCount":
				return ec.fieldContext_Project_diagramBdFinishCount(ctx, field)
			case "diagramBdTotalCount":
				return ec.fieldContext_Project_diagramBdTotalCount(ctx, field)
			case "diagramConstructionFinishCount":
				return ec.fieldContext_Project_diagramConstructionFinishCount(ctx, field)
			case "diagramConstructionTotalCount":
				return ec.fieldContext_Project_diagramConstructionTotalCount(ctx, field)
			case "diagramProcessingFinishCount":
				return ec.fieldContext_Project_diagramProcessingFinishCount(ctx, field)
			case "diagramProcessingTotalCount":
				return ec.fieldContext_Project_diagramProcessingTotalCount(ctx, field)
			case "diagramCApprovalRatioNumerator":
				return ec.fieldContext_Project_diagramCApprovalRatioNumerator(ctx, field)
			case "diagramCApprovalRatioDenominator":
				return ec.fieldContext_Project_diagramCApprovalRatioDenominator(ctx, field)
			case "vos":
				return ec.fieldContext_Project_vos(ctx, field)
			case "projectStaffs":
				return ec.fieldContext_Project_projectStaffs(ctx, field)
			case "users":
				return ec.fieldContext_Project_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_id(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_cym(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_cym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_cym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_installation(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_installation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Installation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_installation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_management(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_management(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Management, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_management(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_design(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_design(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Design, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_design(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_projectID(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_projectID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaff_project(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaff) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaff_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaff_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaff",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Project_code(ctx, field)
			case "manager":
				return ec.fieldContext_Project_manager(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "owner":
				return ec.fieldContext_Project_owner(ctx, field)
			case "jzs":
				return ec.fieldContext_Project_jzs(ctx, field)
			case "mcn":
				return ec.fieldContext_Project_mcn(ctx, field)
			case "consultant":
				return ec.fieldContext_Project_consultant(ctx, field)
			case "areas":
				return ec.fieldContext_Project_areas(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "fsDate":
				return ec.fieldContext_Project_fsDate(ctx, field)
			case "opDate":
				return ec.fieldContext_Project_opDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "mntyr":
				return ec.fieldContext_Project_mntyr(ctx, field)
			case "conType":
				return ec.fieldContext_Project_conType(ctx, field)
			case "isFinished":
				return ec.fieldContext_Project_isFinished(ctx, field)
			case "cje":
				return ec.fieldContext_Project_cje(ctx, field)
			case "yye":
				return ec.fieldContext_Project_yye(ctx, field)
			case "xjl":
				return ec.fieldContext_Project_xjl(ctx, field)
			case "xmglfYs":
				return ec.fieldContext_Project_xmglfYs(ctx, field)
			case "xmglfLj":
				return ec.fieldContext_Project_xmglfLj(ctx, field)
			case "xmsjf":
				return ec.fieldContext_Project_xmsjf(ctx, field)
			case "xmfzr":
				return ec.fieldContext_Project_xmfzr(ctx, field)
			case "ownerApplyAmount":
				return ec.fieldContext_Project_ownerApplyAmount(ctx, field)
			case "ownerApplyCount":
				return ec.fieldContext_Project_ownerApplyCount(ctx, field)
			case "ownerApproveAmount":
				return ec.fieldContext_Project_ownerApproveAmount(ctx, field)
			case "ownerApproveCount":
				return ec.fieldContext_Project_ownerApproveCount(ctx, field)
			case "contractorApplyAmount":
				return ec.fieldContext_Project_contractorApplyAmount(ctx, field)
			case "contractorApplyCount":
				return ec.fieldContext_Project_contractorApplyCount(ctx, field)
			case "contractorApproveAmount":
				return ec.fieldContext_Project_contractorApproveAmount(ctx, field)
			case "contractorApproveCount":
				return ec.fieldContext_Project_contractorApproveCount(ctx, field)
			case "installProgress":
				return ec.fieldContext_Project_installProgress(ctx, field)
			case "effectiveContractAmount":
				return ec.fieldContext_Project_effectiveContractAmount(ctx, field)
			case "vaApplyAmount":
				return ec.fieldContext_Project_vaApplyAmount(ctx, field)
			case "vaApproveAmount":
				return ec.fieldContext_Project_vaApproveAmount(ctx, field)
			case "accumulatedStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedStatutoryDeductions(ctx, field)
			case "accumulatedNonStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductions(ctx, field)
			case "accumulatedStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedStatutoryDeductionsPeriod(ctx, field)
			case "accumulatedNonStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field)
			case "totalContractAmount":
				return ec.fieldContext_Project_totalContractAmount(ctx, field)
			case "aluminumPlateBudgetPercentage":
				return ec.fieldContext_Project_aluminumPlateBudgetPercentage(ctx, field)
			case "aluminumBudgetPercentage":
				return ec.fieldContext_Project_aluminumBudgetPercentage(ctx, field)
			case "glassBudgetPercentage":
				return ec.fieldContext_Project_glassBudgetPercentage(ctx, field)
			case "ironBudgetPercentage":
				return ec.fieldContext_Project_ironBudgetPercentage(ctx, field)
			case "milestonePlanYear":
				return ec.fieldContext_Project_milestonePlanYear(ctx, field)
			case "milestonePlanMonth":
				return ec.fieldContext_Project_milestonePlanMonth(ctx, field)
			case "milestoneDoneYear":
				return ec.fieldContext_Project_milestoneDoneYear(ctx, field)
			case "milestoneDoneMonth":
				return ec.fieldContext_Project_milestoneDoneMonth(ctx, field)
			case "pmArea":
				return ec.fieldContext_Project_pmArea(ctx, field)
			case "pmYearTarget":
				return ec.fieldContext_Project_pmYearTarget(ctx, field)
			case "pmMonthTarget":
				return ec.fieldContext_Project_pmMonthTarget(ctx, field)
			case "pmYearActual":
				return ec.fieldContext_Project_pmYearActual(ctx, field)
			case "pmMonthActual":
				return ec.fieldContext_Project_pmMonthActual(ctx, field)
			case "pmTotal":
				return ec.fieldContext_Project_pmTotal(ctx, field)
			case "pmYesterday":
				return ec.fieldContext_Project_pmYesterday(ctx, field)
			case "unitInventoryTotal":
				return ec.fieldContext_Project_unitInventoryTotal(ctx, field)
			case "unitComponentTotal":
				return ec.fieldContext_Project_unitComponentTotal(ctx, field)
			case "unitComponentProduction":
				return ec.fieldContext_Project_unitComponentProduction(ctx, field)
			case "unitComponentInstallation":
				return ec.fieldContext_Project_unitComponentInstallation(ctx, field)
			case "materialLoss":
				return ec.fieldContext_Project_materialLoss(ctx, field)
			case "designRatedWeight":
				return ec.fieldContext_Project_designRatedWeight(ctx, field)
			case "processingWeight":
				return ec.fieldContext_Project_processingWeight(ctx, field)
			case "itemStockWeight":
				return ec.fieldContext_Project_itemStockWeight(ctx, field)
			case "palletsInStock":
				return ec.fieldContext_Project_palletsInStock(ctx, field)
			case "partsInStock":
				return ec.fieldContext_Project_partsInStock(ctx, field)
			case "qualityScore":
				return ec.fieldContext_Project_qualityScore(ctx, field)
			case "qualityRanking":
				return ec.fieldContext_Project_qualityRanking(ctx, field)
			case "bulkMaterialsTotalOrderQuantity":
				return ec.fieldContext_Project_bulkMaterialsTotalOrderQuantity(ctx, field)
			case "bulkMaterialsCompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsCompletedQuantity(ctx, field)
			case "bulkMaterialsUncompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsUncompletedQuantity(ctx, field)
			case "planTotalCount":
				return ec.fieldContext_Project_planTotalCount(ctx, field)
			case "planOverdueCount":
				return ec.fieldContext_Project_planOverdueCount(ctx, field)
			case "planOverdueMonthCount":
				return ec.fieldContext_Project_planOverdueMonthCount(ctx, field)
			case "diagramBdFinishCount":
				return ec.fieldContext_Project_diagramBdFinishCount(ctx, field)
			case "diagramBdTotalCount":
				return ec.fieldContext_Project_diagramBdTotalCount(ctx, field)
			case "diagramConstructionFinishCount":
				return ec.fieldContext_Project_diagramConstructionFinishCount(ctx, field)
			case "diagramConstructionTotalCount":
				return ec.fieldContext_Project_diagramConstructionTotalCount(ctx, field)
			case "diagramProcessingFinishCount":
				return ec.fieldContext_Project_diagramProcessingFinishCount(ctx, field)
			case "diagramProcessingTotalCount":
				return ec.fieldContext_Project_diagramProcessingTotalCount(ctx, field)
			case "diagramCApprovalRatioNumerator":
				return ec.fieldContext_Project_diagramCApprovalRatioNumerator(ctx, field)
			case "diagramCApprovalRatioDenominator":
				return ec.fieldContext_Project_diagramCApprovalRatioDenominator(ctx, field)
			case "vos":
				return ec.fieldContext_Project_vos(ctx, field)
			case "projectStaffs":
				return ec.fieldContext_Project_projectStaffs(ctx, field)
			case "users":
				return ec.fieldContext_Project_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaffConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaffConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaffConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProjectStaffEdge)
	fc.Result = res
	return ec.marshalOProjectStaffEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaffConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaffConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProjectStaffEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProjectStaffEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectStaffEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaffConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaffConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaffConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaffConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaffConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaffConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaffConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaffConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaffConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaffConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaffEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaffEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaffEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectStaff)
	fc.Result = res
	return ec.marshalOProjectStaff2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaff(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaffEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaffEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectStaff_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProjectStaff_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ProjectStaff_updatedAt(ctx, field)
			case "cym":
				return ec.fieldContext_ProjectStaff_cym(ctx, field)
			case "installation":
				return ec.fieldContext_ProjectStaff_installation(ctx, field)
			case "management":
				return ec.fieldContext_ProjectStaff_management(ctx, field)
			case "design":
				return ec.fieldContext_ProjectStaff_design(ctx, field)
			case "projectID":
				return ec.fieldContext_ProjectStaff_projectID(ctx, field)
			case "project":
				return ec.fieldContext_ProjectStaff_project(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectStaff", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectStaffEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectStaffEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectStaffEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectStaffEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectStaffEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_id(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_projectID(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_projectID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_changeType(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_changeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_changeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_isApproved(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_isApproved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApproved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_isApproved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_azjd(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_azjd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Azjd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_azjd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_yxhyze(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_yxhyze(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Yxhyze, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_yxhyze(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_applyAmount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_applyAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_applyAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_approveAmount(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_approveAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_approveAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectVO_project(ctx context.Context, field graphql.CollectedField, obj *ent.ProjectVO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProjectVO_project(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Project(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Project)
	fc.Result = res
	return ec.marshalNProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProjectVO_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectVO",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Project_code(ctx, field)
			case "manager":
				return ec.fieldContext_Project_manager(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "owner":
				return ec.fieldContext_Project_owner(ctx, field)
			case "jzs":
				return ec.fieldContext_Project_jzs(ctx, field)
			case "mcn":
				return ec.fieldContext_Project_mcn(ctx, field)
			case "consultant":
				return ec.fieldContext_Project_consultant(ctx, field)
			case "areas":
				return ec.fieldContext_Project_areas(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "fsDate":
				return ec.fieldContext_Project_fsDate(ctx, field)
			case "opDate":
				return ec.fieldContext_Project_opDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "mntyr":
				return ec.fieldContext_Project_mntyr(ctx, field)
			case "conType":
				return ec.fieldContext_Project_conType(ctx, field)
			case "isFinished":
				return ec.fieldContext_Project_isFinished(ctx, field)
			case "cje":
				return ec.fieldContext_Project_cje(ctx, field)
			case "yye":
				return ec.fieldContext_Project_yye(ctx, field)
			case "xjl":
				return ec.fieldContext_Project_xjl(ctx, field)
			case "xmglfYs":
				return ec.fieldContext_Project_xmglfYs(ctx, field)
			case "xmglfLj":
				return ec.fieldContext_Project_xmglfLj(ctx, field)
			case "xmsjf":
				return ec.fieldContext_Project_xmsjf(ctx, field)
			case "xmfzr":
				return ec.fieldContext_Project_xmfzr(ctx, field)
			case "ownerApplyAmount":
				return ec.fieldContext_Project_ownerApplyAmount(ctx, field)
			case "ownerApplyCount":
				return ec.fieldContext_Project_ownerApplyCount(ctx, field)
			case "ownerApproveAmount":
				return ec.fieldContext_Project_ownerApproveAmount(ctx, field)
			case "ownerApproveCount":
				return ec.fieldContext_Project_ownerApproveCount(ctx, field)
			case "contractorApplyAmount":
				return ec.fieldContext_Project_contractorApplyAmount(ctx, field)
			case "contractorApplyCount":
				return ec.fieldContext_Project_contractorApplyCount(ctx, field)
			case "contractorApproveAmount":
				return ec.fieldContext_Project_contractorApproveAmount(ctx, field)
			case "contractorApproveCount":
				return ec.fieldContext_Project_contractorApproveCount(ctx, field)
			case "installProgress":
				return ec.fieldContext_Project_installProgress(ctx, field)
			case "effectiveContractAmount":
				return ec.fieldContext_Project_effectiveContractAmount(ctx, field)
			case "vaApplyAmount":
				return ec.fieldContext_Project_vaApplyAmount(ctx, field)
			case "vaApproveAmount":
				return ec.fieldContext_Project_vaApproveAmount(ctx, field)
			case "accumulatedStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedStatutoryDeductions(ctx, field)
			case "accumulatedNonStatutoryDeductions":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductions(ctx, field)
			case "accumulatedStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedStatutoryDeductionsPeriod(ctx, field)
			case "accumulatedNonStatutoryDeductionsPeriod":
				return ec.fieldContext_Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field)
			case "totalContractAmount":
				return ec.fieldContext_Project_totalContractAmount(ctx, field)
			case "aluminumPlateBudgetPercentage":
				return ec.fieldContext_Project_aluminumPlateBudgetPercentage(ctx, field)
			case "aluminumBudgetPercentage":
				return ec.fieldContext_Project_aluminumBudgetPercentage(ctx, field)
			case "glassBudgetPercentage":
				return ec.fieldContext_Project_glassBudgetPercentage(ctx, field)
			case "ironBudgetPercentage":
				return ec.fieldContext_Project_ironBudgetPercentage(ctx, field)
			case "milestonePlanYear":
				return ec.fieldContext_Project_milestonePlanYear(ctx, field)
			case "milestonePlanMonth":
				return ec.fieldContext_Project_milestonePlanMonth(ctx, field)
			case "milestoneDoneYear":
				return ec.fieldContext_Project_milestoneDoneYear(ctx, field)
			case "milestoneDoneMonth":
				return ec.fieldContext_Project_milestoneDoneMonth(ctx, field)
			case "pmArea":
				return ec.fieldContext_Project_pmArea(ctx, field)
			case "pmYearTarget":
				return ec.fieldContext_Project_pmYearTarget(ctx, field)
			case "pmMonthTarget":
				return ec.fieldContext_Project_pmMonthTarget(ctx, field)
			case "pmYearActual":
				return ec.fieldContext_Project_pmYearActual(ctx, field)
			case "pmMonthActual":
				return ec.fieldContext_Project_pmMonthActual(ctx, field)
			case "pmTotal":
				return ec.fieldContext_Project_pmTotal(ctx, field)
			case "pmYesterday":
				return ec.fieldContext_Project_pmYesterday(ctx, field)
			case "unitInventoryTotal":
				return ec.fieldContext_Project_unitInventoryTotal(ctx, field)
			case "unitComponentTotal":
				return ec.fieldContext_Project_unitComponentTotal(ctx, field)
			case "unitComponentProduction":
				return ec.fieldContext_Project_unitComponentProduction(ctx, field)
			case "unitComponentInstallation":
				return ec.fieldContext_Project_unitComponentInstallation(ctx, field)
			case "materialLoss":
				return ec.fieldContext_Project_materialLoss(ctx, field)
			case "designRatedWeight":
				return ec.fieldContext_Project_designRatedWeight(ctx, field)
			case "processingWeight":
				return ec.fieldContext_Project_processingWeight(ctx, field)
			case "itemStockWeight":
				return ec.fieldContext_Project_itemStockWeight(ctx, field)
			case "palletsInStock":
				return ec.fieldContext_Project_palletsInStock(ctx, field)
			case "partsInStock":
				return ec.fieldContext_Project_partsInStock(ctx, field)
			case "qualityScore":
				return ec.fieldContext_Project_qualityScore(ctx, field)
			case "qualityRanking":
				return ec.fieldContext_Project_qualityRanking(ctx, field)
			case "bulkMaterialsTotalOrderQuantity":
				return ec.fieldContext_Project_bulkMaterialsTotalOrderQuantity(ctx, field)
			case "bulkMaterialsCompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsCompletedQuantity(ctx, field)
			case "bulkMaterialsUncompletedQuantity":
				return ec.fieldContext_Project_bulkMaterialsUncompletedQuantity(ctx, field)
			case "planTotalCount":
				return ec.fieldContext_Project_planTotalCount(ctx, field)
			case "planOverdueCount":
				return ec.fieldContext_Project_planOverdueCount(ctx, field)
			case "planOverdueMonthCount":
				return ec.fieldContext_Project_planOverdueMonthCount(ctx, field)
			case "diagramBdFinishCount":
				return ec.fieldContext_Project_diagramBdFinishCount(ctx, field)
			case "diagramBdTotalCount":
				return ec.fieldContext_Project_diagramBdTotalCount(ctx, field)
			case "diagramConstructionFinishCount":
				return ec.fieldContext_Project_diagramConstructionFinishCount(ctx, field)
			case "diagramConstructionTotalCount":
				return ec.fieldContext_Project_diagramConstructionTotalCount(ctx, field)
			case "diagramProcessingFinishCount":
				return ec.fieldContext_Project_diagramProcessingFinishCount(ctx, field)
			case "diagramProcessingTotalCount":
				return ec.fieldContext_Project_diagramProcessingTotalCount(ctx, field)
			case "diagramCApprovalRatioNumerator":
				return ec.fieldContext_Project_diagramCApprovalRatioNumerator(ctx, field)
			case "diagramCApprovalRatioDenominator":
				return ec.fieldContext_Project_diagramCApprovalRatioDenominator(ctx, field)
			case "vos":
				return ec.fieldContext_Project_vos(ctx, field)
			case "projectStaffs":
				return ec.fieldContext_Project_projectStaffs(ctx, field)
			case "users":
				return ec.fieldContext_Project_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_id(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_adcode(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_adcode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_adcode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_name(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_countryID(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_countryID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_countryID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_areaID(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_areaID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_areaID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_districts(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_districts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Districts(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.DistrictOrder), fc.Args["where"].(*ent.DistrictWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DistrictConnection)
	fc.Result = res
	return ec.marshalNDistrictConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_districts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DistrictConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DistrictConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DistrictConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DistrictConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Province_districts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Province_cities(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_cities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cities(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.CityOrder), fc.Args["where"].(*ent.CityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CityConnection)
	fc.Result = res
	return ec.marshalNCityConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCityConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_cities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CityConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CityConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CityConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CityConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Province_cities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Province_country(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚖcscdᚑbdsᚋstoreᚋentᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_country(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Country_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Country_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Country_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Country_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "provinces":
				return ec.fieldContext_Country_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Country_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Province_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Province_area(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Area)
	fc.Result = res
	return ec.marshalOArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_area(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Area_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Area_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Area_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Area_name(ctx, field)
			case "code":
				return ec.fieldContext_Area_code(ctx, field)
			case "leaderChatID":
				return ec.fieldContext_Area_leaderChatID(ctx, field)
			case "salesChatID":
				return ec.fieldContext_Area_salesChatID(ctx, field)
			case "customers":
				return ec.fieldContext_Area_customers(ctx, field)
			case "tenders":
				return ec.fieldContext_Area_tenders(ctx, field)
			case "users":
				return ec.fieldContext_Area_users(ctx, field)
			case "provinces":
				return ec.fieldContext_Area_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Area_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Area", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Province_center(ctx context.Context, field graphql.CollectedField, obj *ent.Province) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Province_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Province().Center(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Province_center(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvinceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.ProvinceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvinceConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProvinceEdge)
	fc.Result = res
	return ec.marshalOProvinceEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvinceConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvinceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ProvinceEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ProvinceEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProvinceEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvinceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.ProvinceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvinceConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvinceConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvinceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvinceConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.ProvinceConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvinceConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvinceConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvinceConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvinceEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.ProvinceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvinceEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Province)
	fc.Result = res
	return ec.marshalOProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvinceEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvinceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Province_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Province_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Province_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Province_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Province_name(ctx, field)
			case "countryID":
				return ec.fieldContext_Province_countryID(ctx, field)
			case "areaID":
				return ec.fieldContext_Province_areaID(ctx, field)
			case "districts":
				return ec.fieldContext_Province_districts(ctx, field)
			case "cities":
				return ec.fieldContext_Province_cities(ctx, field)
			case "country":
				return ec.fieldContext_Province_country(ctx, field)
			case "tenders":
				return ec.fieldContext_Province_tenders(ctx, field)
			case "area":
				return ec.fieldContext_Province_area(ctx, field)
			case "center":
				return ec.fieldContext_Province_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Province", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvinceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.ProvinceEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvinceEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvinceEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvinceEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2cscdᚑbdsᚋstoreᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]xid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕcscdᚑbdsᚋstoreᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_areas(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_areas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Areas(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.AreaOrder), fc.Args["where"].(*ent.AreaWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AreaConnection)
	fc.Result = res
	return ec.marshalNAreaConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_areas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AreaConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AreaConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AreaConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AreaConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_areas_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Cities(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.CityOrder), fc.Args["where"].(*ent.CityWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CityConnection)
	fc.Result = res
	return ec.marshalNCityConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCityConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CityConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CityConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CityConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CityConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_competitors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_competitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Competitors(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.CompetitorOrder), fc.Args["where"].(*ent.CompetitorWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CompetitorConnection)
	fc.Result = res
	return ec.marshalNCompetitorConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_competitors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CompetitorConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CompetitorConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CompetitorConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompetitorConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_competitors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_countries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Countries(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.CountryOrder), fc.Args["where"].(*ent.CountryWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CountryConnection)
	fc.Result = res
	return ec.marshalNCountryConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_countries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CountryConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CountryConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CountryConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CountryConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_countries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_customers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Customers(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.CustomerOrder), fc.Args["where"].(*ent.CustomerWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CustomerConnection)
	fc.Result = res
	return ec.marshalNCustomerConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_customers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CustomerConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CustomerConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CustomerConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_customers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_districts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_districts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Districts(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.DistrictOrder), fc.Args["where"].(*ent.DistrictWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DistrictConnection)
	fc.Result = res
	return ec.marshalNDistrictConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_districts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_DistrictConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DistrictConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DistrictConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DistrictConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_districts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_operations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_operations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Operations(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.OperationOrder), fc.Args["where"].(*ent.OperationWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.OperationConnection)
	fc.Result = res
	return ec.marshalNOperationConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_operations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OperationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OperationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OperationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_operations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_plots(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_plots(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Plots(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.PlotOrder), fc.Args["where"].(*ent.PlotWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.PlotConnection)
	fc.Result = res
	return ec.marshalNPlotConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_plots(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PlotConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PlotConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PlotConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlotConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_plots_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_potentialTenders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_potentialTenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PotentialTenders(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.PotentialTenderOrder), fc.Args["where"].(*ent.PotentialTenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.PotentialTenderConnection)
	fc.Result = res
	return ec.marshalNPotentialTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_potentialTenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_PotentialTenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_PotentialTenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_PotentialTenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PotentialTenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_potentialTenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Projects(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.ProjectOrder), fc.Args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectConnection)
	fc.Result = res
	return ec.marshalNProjectConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_projects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_projects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projectStaffs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_projectStaffs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProjectStaffs(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.ProjectStaffOrder), fc.Args["where"].(*ent.ProjectStaffWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectStaffConnection)
	fc.Result = res
	return ec.marshalNProjectStaffConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_projectStaffs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectStaffConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectStaffConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectStaffConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectStaffConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_projectStaffs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_provinces(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_provinces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Provinces(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.ProvinceOrder), fc.Args["where"].(*ent.ProvinceWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProvinceConnection)
	fc.Result = res
	return ec.marshalNProvinceConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_provinces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProvinceConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProvinceConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProvinceConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProvinceConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_provinces_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tenders(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenderCompetitors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenderCompetitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TenderCompetitors(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderCompetitorOrder), fc.Args["where"].(*ent.TenderCompetitorWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderCompetitorConnection)
	fc.Result = res
	return ec.marshalNTenderCompetitorConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenderCompetitors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderCompetitorConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderCompetitorConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderCompetitorConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderCompetitorConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenderCompetitors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenderProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenderProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TenderProfiles(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderProfileOrder), fc.Args["where"].(*ent.TenderProfileWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderProfileConnection)
	fc.Result = res
	return ec.marshalNTenderProfileConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenderProfiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderProfileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderProfileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderProfileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderProfileConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenderProfiles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.UserOrder), fc.Args["where"].(*ent.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_visitRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_visitRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VisitRecords(rctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.VisitRecordOrder), fc.Args["where"].(*ent.VisitRecordWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_visitRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_visitRecords_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchFeishuUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchFeishuUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFeishuUser(rctx, fc.Args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FeishuUser)
	fc.Result = res
	return ec.marshalNFeishuUser2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐFeishuUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchFeishuUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "openId":
				return ec.fieldContext_FeishuUser_openId(ctx, field)
			case "name":
				return ec.fieldContext_FeishuUser_name(ctx, field)
			case "email":
				return ec.fieldContext_FeishuUser_email(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_FeishuUser_avatarUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FeishuUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchFeishuUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchLocation(rctx, fc.Args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "province":
				return ec.fieldContext_Location_province(ctx, field)
			case "city":
				return ec.fieldContext_Location_city(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "lng":
				return ec.fieldContext_Location_lng(ctx, field)
			case "lat":
				return ec.fieldContext_Location_lat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_inputtips(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_inputtips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Inputtips(rctx, fc.Args["areaId"].(xid.ID), fc.Args["keyword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_inputtips(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "province":
				return ec.fieldContext_Location_province(ctx, field)
			case "city":
				return ec.fieldContext_Location_city(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "lng":
				return ec.fieldContext_Location_lng(ctx, field)
			case "lat":
				return ec.fieldContext_Location_lat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_inputtips_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_amapRegeo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_amapRegeo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AmapRegeo(rctx, fc.Args["lng"].(float64), fc.Args["lat"].(float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_amapRegeo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "province":
				return ec.fieldContext_Location_province(ctx, field)
			case "city":
				return ec.fieldContext_Location_city(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "lng":
				return ec.fieldContext_Location_lng(ctx, field)
			case "lat":
				return ec.fieldContext_Location_lat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_amapRegeo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_topCompetitors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_topCompetitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TopCompetitors(rctx, fc.Args["first"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TopCompetitor)
	fc.Result = res
	return ec.marshalNTopCompetitor2ᚕᚖcscdᚑbdsᚋgraphqlᚋmodelᚐTopCompetitorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_topCompetitors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopCompetitor_id(ctx, field)
			case "name":
				return ec.fieldContext_TopCompetitor_name(ctx, field)
			case "shortName":
				return ec.fieldContext_TopCompetitor_shortName(ctx, field)
			case "wonTendersCount":
				return ec.fieldContext_TopCompetitor_wonTendersCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopCompetitor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_topCompetitors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_biToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_biToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BiToken(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_biToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_session(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Session(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_session(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_Session_userId(ctx, field)
			case "name":
				return ec.fieldContext_Session_name(ctx, field)
			case "username":
				return ec.fieldContext_Session_username(ctx, field)
			case "email":
				return ec.fieldContext_Session_email(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_Session_avatarUrl(ctx, field)
			case "isAdmin":
				return ec.fieldContext_Session_isAdmin(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_Session_isSuperAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_Session_isCeo(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_Session_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_Session_hasEditAccess(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_id(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_code(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_status(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_approvalStatus(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_approvalStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_approvalStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_approvalMsgID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_approvalMsgID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalMsgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_approvalMsgID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_name(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_estimatedAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_estimatedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_estimatedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_classify(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_classify(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Classify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_classify(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_discoveryDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_discoveryDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_discoveryDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_address(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_fullAddress(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_fullAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_fullAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_contractor(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_contractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_contractor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_levelInvolved(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_levelInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LevelInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_levelInvolved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_sizeAndValueRating(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeAndValueRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_sizeAndValueRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_sizeAndValueRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeAndValueRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_sizeAndValueRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_creditAndPaymentRating(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditAndPaymentRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_creditAndPaymentRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_creditAndPaymentRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditAndPaymentRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_creditAndPaymentRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_timeLimitRating(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_timeLimitRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeLimitRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_timeLimitRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_timeLimitRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeLimitRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_timeLimitRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_customerRelationshipRating(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerRelationshipRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_customerRelationshipRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_customerRelationshipRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerRelationshipRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_customerRelationshipRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_competitivePartnershipRating(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitivePartnershipRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_competitivePartnershipRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_competitivePartnershipRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitivePartnershipRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_competitivePartnershipRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_prepareToBid(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_prepareToBid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrepareToBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_prepareToBid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_projectCode(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_projectCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_projectCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_projectType(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_projectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_projectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_projectDefinition(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_projectDefinition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectDefinition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_projectDefinition(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_estimatedProjectStartDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedProjectStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_estimatedProjectStartDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_estimatedProjectEndDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedProjectEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_estimatedProjectEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_attachements(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_attachements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_attachements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_remark(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_remark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_images(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderSituations(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_ownerSituations(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_ownerSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_ownerSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_biddingInstructions(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_biddingInstructions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BiddingInstructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_biddingInstructions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_competitorSituations(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_competitorSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitorSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_competitorSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_costEngineer(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_costEngineer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostEngineer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_costEngineer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderForm(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_contractForm(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_contractForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_contractForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_managementCompany(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_managementCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagementCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_managementCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderingAgency(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderingAgency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderingAgency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_biddingDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_biddingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BiddingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_biddingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_facadeConsultant(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_facadeConsultant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacadeConsultant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_facadeConsultant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_designUnit(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_designUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesignUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_designUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_consultingFirm(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_consultingFirm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsultingFirm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_consultingFirm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_keyProject(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_keyProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_keyProject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_currentProgress(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_currentProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_currentProgress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderWinCompany(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderWinCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderWinCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderCode(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_architect(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_architect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_architect(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_developer(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Developer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderClosingDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderClosingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderClosingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderClosingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_constructionArea(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_constructionArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_constructionArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderWinDate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderWinDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderWinDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_tenderWinAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_tenderWinAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_tenderWinAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_lastTenderAmount(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_lastTenderAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTenderAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_lastTenderAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_areaID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_areaID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_areaID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_provinceID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_provinceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_provinceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_cityID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_cityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_cityID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_districtID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_districtID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_districtID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_customerID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_customerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_customerID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_finderID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_finderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_finderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_createdByID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_createdByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_createdByID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_approverID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_approverID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_approverID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_updatedByID(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_updatedByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_updatedByID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_area(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_area(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Area)
	fc.Result = res
	return ec.marshalNArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_area(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Area_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Area_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Area_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Area_name(ctx, field)
			case "code":
				return ec.fieldContext_Area_code(ctx, field)
			case "leaderChatID":
				return ec.fieldContext_Area_leaderChatID(ctx, field)
			case "salesChatID":
				return ec.fieldContext_Area_salesChatID(ctx, field)
			case "customers":
				return ec.fieldContext_Area_customers(ctx, field)
			case "tenders":
				return ec.fieldContext_Area_tenders(ctx, field)
			case "users":
				return ec.fieldContext_Area_users(ctx, field)
			case "provinces":
				return ec.fieldContext_Area_provinces(ctx, field)
			case "center":
				return ec.fieldContext_Area_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Area", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_profiles(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_profiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profiles(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderProfileOrder), fc.Args["where"].(*ent.TenderProfileWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderProfileConnection)
	fc.Result = res
	return ec.marshalNTenderProfileConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_profiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderProfileConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderProfileConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderProfileConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderProfileConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tender_profiles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Tender_competitors(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_competitors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competitors(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TenderCompetitor)
	fc.Result = res
	return ec.marshalOTenderCompetitor2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_competitors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenderCompetitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenderCompetitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenderCompetitor_updatedAt(ctx, field)
			case "tenderID":
				return ec.fieldContext_TenderCompetitor_tenderID(ctx, field)
			case "competitorID":
				return ec.fieldContext_TenderCompetitor_competitorID(ctx, field)
			case "amount":
				return ec.fieldContext_TenderCompetitor_amount(ctx, field)
			case "tender":
				return ec.fieldContext_TenderCompetitor_tender(ctx, field)
			case "competitor":
				return ec.fieldContext_TenderCompetitor_competitor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderCompetitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_customer(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_finder(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_finder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finder(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_finder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_createdBy(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_followingSales(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_followingSales(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowingSales(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_followingSales(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_province(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Province)
	fc.Result = res
	return ec.marshalOProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Province_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Province_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Province_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Province_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Province_name(ctx, field)
			case "countryID":
				return ec.fieldContext_Province_countryID(ctx, field)
			case "areaID":
				return ec.fieldContext_Province_areaID(ctx, field)
			case "districts":
				return ec.fieldContext_Province_districts(ctx, field)
			case "cities":
				return ec.fieldContext_Province_cities(ctx, field)
			case "country":
				return ec.fieldContext_Province_country(ctx, field)
			case "tenders":
				return ec.fieldContext_Province_tenders(ctx, field)
			case "area":
				return ec.fieldContext_Province_area(ctx, field)
			case "center":
				return ec.fieldContext_Province_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Province", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_city(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.City)
	fc.Result = res
	return ec.marshalOCity2ᚖcscdᚑbdsᚋstoreᚋentᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_City_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_City_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_City_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_City_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_City_provCode(ctx, field)
			case "name":
				return ec.fieldContext_City_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_City_provinceID(ctx, field)
			case "districts":
				return ec.fieldContext_City_districts(ctx, field)
			case "province":
				return ec.fieldContext_City_province(ctx, field)
			case "tenders":
				return ec.fieldContext_City_tenders(ctx, field)
			case "center":
				return ec.fieldContext_City_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type City", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_district(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_district(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.District)
	fc.Result = res
	return ec.marshalODistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_district(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_District_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_District_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_District_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_District_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_District_provCode(ctx, field)
			case "cityCode":
				return ec.fieldContext_District_cityCode(ctx, field)
			case "name":
				return ec.fieldContext_District_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_District_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_District_cityID(ctx, field)
			case "province":
				return ec.fieldContext_District_province(ctx, field)
			case "city":
				return ec.fieldContext_District_city(ctx, field)
			case "tenders":
				return ec.fieldContext_District_tenders(ctx, field)
			case "plots":
				return ec.fieldContext_District_plots(ctx, field)
			case "center":
				return ec.fieldContext_District_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type District", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_visitRecords(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_visitRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitRecords(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.VisitRecordOrder), fc.Args["where"].(*ent.VisitRecordWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_visitRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tender_visitRecords_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Tender_approver(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_approver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_approver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_updatedBy(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_updatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_geoCoordinate(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_geoCoordinate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tender().GeoCoordinate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GeoJSON)
	fc.Result = res
	return ec.marshalOGeoJson2ᚖcscdᚑbdsᚋgraphqlᚋmodelᚐGeoJSON(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_geoCoordinate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_GeoJson_type(ctx, field)
			case "coordinates":
				return ec.fieldContext_GeoJson_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GeoJson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tender_geoBounds(ctx context.Context, field graphql.CollectedField, obj *ent.Tender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tender_geoBounds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeoBounds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([][]float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕᚕfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tender_geoBounds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_id(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_tenderID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_tenderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_tenderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_competitorID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_competitorID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_competitorID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_amount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_amount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_tender(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_tender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tender(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_tender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "profiles":
				return ec.fieldContext_Tender_profiles(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitor_competitor(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitor_competitor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Competitor(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Competitor)
	fc.Result = res
	return ec.marshalNCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitor_competitor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitor",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Competitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Competitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Competitor_updatedAt(ctx, field)
			case "shortName":
				return ec.fieldContext_Competitor_shortName(ctx, field)
			case "name":
				return ec.fieldContext_Competitor_name(ctx, field)
			case "tenders":
				return ec.fieldContext_Competitor_tenders(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Competitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitorConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitorConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TenderCompetitorEdge)
	fc.Result = res
	return ec.marshalOTenderCompetitorEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitorConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TenderCompetitorEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TenderCompetitorEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderCompetitorEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitorConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitorConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitorConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitorConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitorConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitorConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitorConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitorConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitorEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitorEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TenderCompetitor)
	fc.Result = res
	return ec.marshalOTenderCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitorEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenderCompetitor_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenderCompetitor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenderCompetitor_updatedAt(ctx, field)
			case "tenderID":
				return ec.fieldContext_TenderCompetitor_tenderID(ctx, field)
			case "competitorID":
				return ec.fieldContext_TenderCompetitor_competitorID(ctx, field)
			case "amount":
				return ec.fieldContext_TenderCompetitor_amount(ctx, field)
			case "tender":
				return ec.fieldContext_TenderCompetitor_tender(ctx, field)
			case "competitor":
				return ec.fieldContext_TenderCompetitor_competitor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderCompetitor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderCompetitorEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TenderCompetitorEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderCompetitorEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderCompetitorEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderCompetitorEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TenderEdge)
	fc.Result = res
	return ec.marshalOTenderEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TenderEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TenderEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TenderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalOTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "profiles":
				return ec.fieldContext_Tender_profiles(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TenderEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_id(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_status(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_approvalStatus(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_approvalStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_approvalStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_approvalMsgID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_approvalMsgID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApprovalMsgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_approvalMsgID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_name(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_estimatedAmount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_estimatedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_estimatedAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_classify(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_classify(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Classify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_classify(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_discoveryDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_discoveryDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscoveryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_discoveryDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_address(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_fullAddress(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_fullAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_fullAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_contractor(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_contractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_contractor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_levelInvolved(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_levelInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LevelInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_levelInvolved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_sizeAndValueRating(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_sizeAndValueRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeAndValueRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_sizeAndValueRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_sizeAndValueRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_sizeAndValueRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeAndValueRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_sizeAndValueRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_creditAndPaymentRating(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_creditAndPaymentRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditAndPaymentRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_creditAndPaymentRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_creditAndPaymentRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_creditAndPaymentRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditAndPaymentRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_creditAndPaymentRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_timeLimitRating(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_timeLimitRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeLimitRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_timeLimitRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_timeLimitRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_timeLimitRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeLimitRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_timeLimitRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_customerRelationshipRating(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_customerRelationshipRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerRelationshipRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_customerRelationshipRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_customerRelationshipRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_customerRelationshipRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerRelationshipRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_customerRelationshipRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_competitivePartnershipRating(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_competitivePartnershipRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitivePartnershipRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_competitivePartnershipRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_competitivePartnershipRatingOverview(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_competitivePartnershipRatingOverview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitivePartnershipRatingOverview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_competitivePartnershipRatingOverview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_prepareToBid(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_prepareToBid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrepareToBid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_prepareToBid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_projectCode(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_projectCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_projectCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_projectType(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_projectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_projectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_projectDefinition(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_projectDefinition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectDefinition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_projectDefinition(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_estimatedProjectStartDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_estimatedProjectStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedProjectStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_estimatedProjectStartDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_estimatedProjectEndDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_estimatedProjectEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedProjectEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_estimatedProjectEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_attachments(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_attachments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_geoCoordinate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_geoCoordinate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeoCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕfloat64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_geoCoordinate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_remark(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_remark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_remark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_images(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_images(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderSituations(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_ownerSituations(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_ownerSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_ownerSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_biddingInstructions(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_biddingInstructions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BiddingInstructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_biddingInstructions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_competitorSituations(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_competitorSituations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompetitorSituations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_competitorSituations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_costEngineer(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_costEngineer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostEngineer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_costEngineer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderForm(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_contractForm(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_contractForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_contractForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_managementCompany(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_managementCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagementCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_managementCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderingAgency(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderingAgency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderingAgency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderingAgency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_biddingDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_biddingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BiddingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_biddingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_facadeConsultant(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_facadeConsultant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacadeConsultant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_facadeConsultant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_designUnit(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_designUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesignUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_designUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_consultingFirm(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_consultingFirm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsultingFirm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_consultingFirm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_keyProject(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_keyProject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_keyProject(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_currentProgress(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_currentProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_currentProgress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderWinCompany(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderWinCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderWinCompany(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderCode(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_architect(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_architect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Architect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_architect(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_developer(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_developer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Developer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_developer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderClosingDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderClosingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderClosingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderClosingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_constructionArea(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_constructionArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructionArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_constructionArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderWinDate(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderWinDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderWinDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderWinAmount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderWinAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderWinAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderWinAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_lastTenderAmount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_lastTenderAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTenderAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_lastTenderAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tenderID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tenderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tenderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_provinceID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_provinceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_provinceID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_cityID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_cityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_cityID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_districtID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_districtID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_districtID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_customerID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_customerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_customerID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_finderID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_finderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_finderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_createdByID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_createdByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_createdByID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_approverID(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_approverID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_approverID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_tender(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_tender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tender(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_tender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "profiles":
				return ec.fieldContext_Tender_profiles(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_customer(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalOCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_finder(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_finder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finder(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_finder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_createdBy(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_province(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_province(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Province)
	fc.Result = res
	return ec.marshalOProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_province(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Province_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Province_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Province_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_Province_adcode(ctx, field)
			case "name":
				return ec.fieldContext_Province_name(ctx, field)
			case "countryID":
				return ec.fieldContext_Province_countryID(ctx, field)
			case "areaID":
				return ec.fieldContext_Province_areaID(ctx, field)
			case "districts":
				return ec.fieldContext_Province_districts(ctx, field)
			case "cities":
				return ec.fieldContext_Province_cities(ctx, field)
			case "country":
				return ec.fieldContext_Province_country(ctx, field)
			case "tenders":
				return ec.fieldContext_Province_tenders(ctx, field)
			case "area":
				return ec.fieldContext_Province_area(ctx, field)
			case "center":
				return ec.fieldContext_Province_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Province", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_city(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.City)
	fc.Result = res
	return ec.marshalOCity2ᚖcscdᚑbdsᚋstoreᚋentᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_City_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_City_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_City_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_City_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_City_provCode(ctx, field)
			case "name":
				return ec.fieldContext_City_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_City_provinceID(ctx, field)
			case "districts":
				return ec.fieldContext_City_districts(ctx, field)
			case "province":
				return ec.fieldContext_City_province(ctx, field)
			case "tenders":
				return ec.fieldContext_City_tenders(ctx, field)
			case "center":
				return ec.fieldContext_City_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type City", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_district(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_district(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.District)
	fc.Result = res
	return ec.marshalODistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_district(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_District_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_District_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_District_updatedAt(ctx, field)
			case "adcode":
				return ec.fieldContext_District_adcode(ctx, field)
			case "provCode":
				return ec.fieldContext_District_provCode(ctx, field)
			case "cityCode":
				return ec.fieldContext_District_cityCode(ctx, field)
			case "name":
				return ec.fieldContext_District_name(ctx, field)
			case "provinceID":
				return ec.fieldContext_District_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_District_cityID(ctx, field)
			case "province":
				return ec.fieldContext_District_province(ctx, field)
			case "city":
				return ec.fieldContext_District_city(ctx, field)
			case "tenders":
				return ec.fieldContext_District_tenders(ctx, field)
			case "plots":
				return ec.fieldContext_District_plots(ctx, field)
			case "center":
				return ec.fieldContext_District_center(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type District", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfile_approver(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfile_approver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfile_approver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfileConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfileConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TenderProfileEdge)
	fc.Result = res
	return ec.marshalOTenderProfileEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfileConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TenderProfileEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TenderProfileEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderProfileEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfileConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfileConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfileConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfileConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfileConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfileConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfileConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfileConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfileEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfileEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.TenderProfile)
	fc.Result = res
	return ec.marshalOTenderProfile2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfileEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenderProfile_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenderProfile_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenderProfile_updatedAt(ctx, field)
			case "status":
				return ec.fieldContext_TenderProfile_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_TenderProfile_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_TenderProfile_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_TenderProfile_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_TenderProfile_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_TenderProfile_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_TenderProfile_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_TenderProfile_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_TenderProfile_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_TenderProfile_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_TenderProfile_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_TenderProfile_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_TenderProfile_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_TenderProfile_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_TenderProfile_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_TenderProfile_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_TenderProfile_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_TenderProfile_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_TenderProfile_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_TenderProfile_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_TenderProfile_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_TenderProfile_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_TenderProfile_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_TenderProfile_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_TenderProfile_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_TenderProfile_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_TenderProfile_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_TenderProfile_estimatedProjectEndDate(ctx, field)
			case "attachments":
				return ec.fieldContext_TenderProfile_attachments(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_TenderProfile_geoCoordinate(ctx, field)
			case "remark":
				return ec.fieldContext_TenderProfile_remark(ctx, field)
			case "images":
				return ec.fieldContext_TenderProfile_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_TenderProfile_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_TenderProfile_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_TenderProfile_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_TenderProfile_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_TenderProfile_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_TenderProfile_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_TenderProfile_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_TenderProfile_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_TenderProfile_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_TenderProfile_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_TenderProfile_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_TenderProfile_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_TenderProfile_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_TenderProfile_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_TenderProfile_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_TenderProfile_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_TenderProfile_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_TenderProfile_architect(ctx, field)
			case "developer":
				return ec.fieldContext_TenderProfile_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_TenderProfile_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_TenderProfile_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_TenderProfile_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_TenderProfile_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_TenderProfile_lastTenderAmount(ctx, field)
			case "tenderID":
				return ec.fieldContext_TenderProfile_tenderID(ctx, field)
			case "provinceID":
				return ec.fieldContext_TenderProfile_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_TenderProfile_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_TenderProfile_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_TenderProfile_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_TenderProfile_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_TenderProfile_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_TenderProfile_approverID(ctx, field)
			case "tender":
				return ec.fieldContext_TenderProfile_tender(ctx, field)
			case "customer":
				return ec.fieldContext_TenderProfile_customer(ctx, field)
			case "finder":
				return ec.fieldContext_TenderProfile_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_TenderProfile_createdBy(ctx, field)
			case "province":
				return ec.fieldContext_TenderProfile_province(ctx, field)
			case "city":
				return ec.fieldContext_TenderProfile_city(ctx, field)
			case "district":
				return ec.fieldContext_TenderProfile_district(ctx, field)
			case "approver":
				return ec.fieldContext_TenderProfile_approver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenderProfileEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TenderProfileEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenderProfileEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenderProfileEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenderProfileEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_openID(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_openID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_openID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarURL(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_avatarURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_avatarURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_disabled(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_disabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isAdmin(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isAdmin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isCeo(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isCeo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCeo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isCeo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isSuperAdmin(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isSuperAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isSuperAdmin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hasMapAccess(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hasMapAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasMapAccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hasMapAccess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_hasEditAccess(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_hasEditAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasEditAccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_hasEditAccess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_leaderID(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_leaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_leaderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_areas(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_areas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Areas(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.AreaOrder), fc.Args["where"].(*ent.AreaWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AreaConnection)
	fc.Result = res
	return ec.marshalNAreaConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_areas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AreaConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AreaConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AreaConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AreaConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_areas_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_customers(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_customers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customers(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.CustomerOrder), fc.Args["where"].(*ent.CustomerWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CustomerConnection)
	fc.Result = res
	return ec.marshalNCustomerConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_customers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CustomerConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CustomerConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CustomerConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_customers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_leader(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_leader(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_teamMembers(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_teamMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamMembers(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_teamMembers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_tenders(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_tenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenders(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_tenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_tenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_visitRecords(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_visitRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitRecords(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.VisitRecordOrder), fc.Args["where"].(*ent.VisitRecordWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_visitRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_visitRecords_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_projects(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_projects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Projects(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.ProjectOrder), fc.Args["where"].(*ent.ProjectWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProjectConnection)
	fc.Result = res
	return ec.marshalNProjectConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_projects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_ProjectConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ProjectConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_ProjectConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_projects_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_myTenders(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_myTenders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().MyTenders(rctx, obj, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.TenderOrder), fc.Args["where"].(*ent.TenderWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TenderConnection)
	fc.Result = res
	return ec.marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_myTenders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenderConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenderConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenderConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenderConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_myTenders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _User_myVisitRecords(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_myVisitRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().MyVisitRecords(rctx, obj, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*ent.VisitRecordOrder), fc.Args["where"].(*ent.VisitRecordWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecordConnection)
	fc.Result = res
	return ec.marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_myVisitRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_VisitRecordConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_User_myVisitRecords_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.UserConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.UserEdge)
	fc.Result = res
	return ec.marshalOUserEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_UserEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_UserEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.UserConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.UserConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "openID":
				return ec.fieldContext_User_openID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "avatarURL":
				return ec.fieldContext_User_avatarURL(ctx, field)
			case "disabled":
				return ec.fieldContext_User_disabled(ctx, field)
			case "isAdmin":
				return ec.fieldContext_User_isAdmin(ctx, field)
			case "isCeo":
				return ec.fieldContext_User_isCeo(ctx, field)
			case "isSuperAdmin":
				return ec.fieldContext_User_isSuperAdmin(ctx, field)
			case "hasMapAccess":
				return ec.fieldContext_User_hasMapAccess(ctx, field)
			case "hasEditAccess":
				return ec.fieldContext_User_hasEditAccess(ctx, field)
			case "leaderID":
				return ec.fieldContext_User_leaderID(ctx, field)
			case "areas":
				return ec.fieldContext_User_areas(ctx, field)
			case "customers":
				return ec.fieldContext_User_customers(ctx, field)
			case "leader":
				return ec.fieldContext_User_leader(ctx, field)
			case "teamMembers":
				return ec.fieldContext_User_teamMembers(ctx, field)
			case "tenders":
				return ec.fieldContext_User_tenders(ctx, field)
			case "visitRecords":
				return ec.fieldContext_User_visitRecords(ctx, field)
			case "projects":
				return ec.fieldContext_User_projects(ctx, field)
			case "myTenders":
				return ec.fieldContext_User_myTenders(ctx, field)
			case "myVisitRecords":
				return ec.fieldContext_User_myVisitRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_id(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_visitType(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_visitType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisitType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_visitType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_commPeople(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_commPeople(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommPeople, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_commPeople(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_commContent(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_commContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_commContent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_nextStep(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_nextStep(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_nextStep(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_date(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_tenderID(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_tenderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*xid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_tenderID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_customerID(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_customerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(xid.ID)
	fc.Result = res
	return ec.marshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_customerID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_tender(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_tender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tender(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Tender)
	fc.Result = res
	return ec.marshalOTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_tender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tender_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tender_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tender_updatedAt(ctx, field)
			case "code":
				return ec.fieldContext_Tender_code(ctx, field)
			case "status":
				return ec.fieldContext_Tender_status(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Tender_approvalStatus(ctx, field)
			case "approvalMsgID":
				return ec.fieldContext_Tender_approvalMsgID(ctx, field)
			case "name":
				return ec.fieldContext_Tender_name(ctx, field)
			case "estimatedAmount":
				return ec.fieldContext_Tender_estimatedAmount(ctx, field)
			case "tenderDate":
				return ec.fieldContext_Tender_tenderDate(ctx, field)
			case "classify":
				return ec.fieldContext_Tender_classify(ctx, field)
			case "discoveryDate":
				return ec.fieldContext_Tender_discoveryDate(ctx, field)
			case "address":
				return ec.fieldContext_Tender_address(ctx, field)
			case "fullAddress":
				return ec.fieldContext_Tender_fullAddress(ctx, field)
			case "contractor":
				return ec.fieldContext_Tender_contractor(ctx, field)
			case "levelInvolved":
				return ec.fieldContext_Tender_levelInvolved(ctx, field)
			case "sizeAndValueRating":
				return ec.fieldContext_Tender_sizeAndValueRating(ctx, field)
			case "sizeAndValueRatingOverview":
				return ec.fieldContext_Tender_sizeAndValueRatingOverview(ctx, field)
			case "creditAndPaymentRating":
				return ec.fieldContext_Tender_creditAndPaymentRating(ctx, field)
			case "creditAndPaymentRatingOverview":
				return ec.fieldContext_Tender_creditAndPaymentRatingOverview(ctx, field)
			case "timeLimitRating":
				return ec.fieldContext_Tender_timeLimitRating(ctx, field)
			case "timeLimitRatingOverview":
				return ec.fieldContext_Tender_timeLimitRatingOverview(ctx, field)
			case "customerRelationshipRating":
				return ec.fieldContext_Tender_customerRelationshipRating(ctx, field)
			case "customerRelationshipRatingOverview":
				return ec.fieldContext_Tender_customerRelationshipRatingOverview(ctx, field)
			case "competitivePartnershipRating":
				return ec.fieldContext_Tender_competitivePartnershipRating(ctx, field)
			case "competitivePartnershipRatingOverview":
				return ec.fieldContext_Tender_competitivePartnershipRatingOverview(ctx, field)
			case "prepareToBid":
				return ec.fieldContext_Tender_prepareToBid(ctx, field)
			case "projectCode":
				return ec.fieldContext_Tender_projectCode(ctx, field)
			case "projectType":
				return ec.fieldContext_Tender_projectType(ctx, field)
			case "projectDefinition":
				return ec.fieldContext_Tender_projectDefinition(ctx, field)
			case "estimatedProjectStartDate":
				return ec.fieldContext_Tender_estimatedProjectStartDate(ctx, field)
			case "estimatedProjectEndDate":
				return ec.fieldContext_Tender_estimatedProjectEndDate(ctx, field)
			case "attachements":
				return ec.fieldContext_Tender_attachements(ctx, field)
			case "remark":
				return ec.fieldContext_Tender_remark(ctx, field)
			case "images":
				return ec.fieldContext_Tender_images(ctx, field)
			case "tenderSituations":
				return ec.fieldContext_Tender_tenderSituations(ctx, field)
			case "ownerSituations":
				return ec.fieldContext_Tender_ownerSituations(ctx, field)
			case "biddingInstructions":
				return ec.fieldContext_Tender_biddingInstructions(ctx, field)
			case "competitorSituations":
				return ec.fieldContext_Tender_competitorSituations(ctx, field)
			case "costEngineer":
				return ec.fieldContext_Tender_costEngineer(ctx, field)
			case "tenderForm":
				return ec.fieldContext_Tender_tenderForm(ctx, field)
			case "contractForm":
				return ec.fieldContext_Tender_contractForm(ctx, field)
			case "managementCompany":
				return ec.fieldContext_Tender_managementCompany(ctx, field)
			case "tenderingAgency":
				return ec.fieldContext_Tender_tenderingAgency(ctx, field)
			case "biddingDate":
				return ec.fieldContext_Tender_biddingDate(ctx, field)
			case "facadeConsultant":
				return ec.fieldContext_Tender_facadeConsultant(ctx, field)
			case "designUnit":
				return ec.fieldContext_Tender_designUnit(ctx, field)
			case "consultingFirm":
				return ec.fieldContext_Tender_consultingFirm(ctx, field)
			case "keyProject":
				return ec.fieldContext_Tender_keyProject(ctx, field)
			case "currentProgress":
				return ec.fieldContext_Tender_currentProgress(ctx, field)
			case "tenderWinCompany":
				return ec.fieldContext_Tender_tenderWinCompany(ctx, field)
			case "tenderCode":
				return ec.fieldContext_Tender_tenderCode(ctx, field)
			case "architect":
				return ec.fieldContext_Tender_architect(ctx, field)
			case "developer":
				return ec.fieldContext_Tender_developer(ctx, field)
			case "tenderClosingDate":
				return ec.fieldContext_Tender_tenderClosingDate(ctx, field)
			case "constructionArea":
				return ec.fieldContext_Tender_constructionArea(ctx, field)
			case "tenderWinDate":
				return ec.fieldContext_Tender_tenderWinDate(ctx, field)
			case "tenderWinAmount":
				return ec.fieldContext_Tender_tenderWinAmount(ctx, field)
			case "lastTenderAmount":
				return ec.fieldContext_Tender_lastTenderAmount(ctx, field)
			case "areaID":
				return ec.fieldContext_Tender_areaID(ctx, field)
			case "provinceID":
				return ec.fieldContext_Tender_provinceID(ctx, field)
			case "cityID":
				return ec.fieldContext_Tender_cityID(ctx, field)
			case "districtID":
				return ec.fieldContext_Tender_districtID(ctx, field)
			case "customerID":
				return ec.fieldContext_Tender_customerID(ctx, field)
			case "finderID":
				return ec.fieldContext_Tender_finderID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Tender_createdByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Tender_approverID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Tender_updatedByID(ctx, field)
			case "area":
				return ec.fieldContext_Tender_area(ctx, field)
			case "profiles":
				return ec.fieldContext_Tender_profiles(ctx, field)
			case "competitors":
				return ec.fieldContext_Tender_competitors(ctx, field)
			case "customer":
				return ec.fieldContext_Tender_customer(ctx, field)
			case "finder":
				return ec.fieldContext_Tender_finder(ctx, field)
			case "createdBy":
				return ec.fieldContext_Tender_createdBy(ctx, field)
			case "followingSales":
				return ec.fieldContext_Tender_followingSales(ctx, field)
			case "province":
				return ec.fieldContext_Tender_province(ctx, field)
			case "city":
				return ec.fieldContext_Tender_city(ctx, field)
			case "district":
				return ec.fieldContext_Tender_district(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Tender_visitRecords(ctx, field)
			case "approver":
				return ec.fieldContext_Tender_approver(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Tender_updatedBy(ctx, field)
			case "geoCoordinate":
				return ec.fieldContext_Tender_geoCoordinate(ctx, field)
			case "geoBounds":
				return ec.fieldContext_Tender_geoBounds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_customer(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_customer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Customer_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Customer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Customer_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Customer_name(ctx, field)
			case "approvalStatus":
				return ec.fieldContext_Customer_approvalStatus(ctx, field)
			case "ownerType":
				return ec.fieldContext_Customer_ownerType(ctx, field)
			case "industry":
				return ec.fieldContext_Customer_industry(ctx, field)
			case "size":
				return ec.fieldContext_Customer_size(ctx, field)
			case "contactPerson":
				return ec.fieldContext_Customer_contactPerson(ctx, field)
			case "contactPersonPosition":
				return ec.fieldContext_Customer_contactPersonPosition(ctx, field)
			case "contactPersonPhone":
				return ec.fieldContext_Customer_contactPersonPhone(ctx, field)
			case "contactPersonEmail":
				return ec.fieldContext_Customer_contactPersonEmail(ctx, field)
			case "areaID":
				return ec.fieldContext_Customer_areaID(ctx, field)
			case "salesID":
				return ec.fieldContext_Customer_salesID(ctx, field)
			case "createdByID":
				return ec.fieldContext_Customer_createdByID(ctx, field)
			case "updatedByID":
				return ec.fieldContext_Customer_updatedByID(ctx, field)
			case "approverID":
				return ec.fieldContext_Customer_approverID(ctx, field)
			case "area":
				return ec.fieldContext_Customer_area(ctx, field)
			case "tenders":
				return ec.fieldContext_Customer_tenders(ctx, field)
			case "sales":
				return ec.fieldContext_Customer_sales(ctx, field)
			case "createdBy":
				return ec.fieldContext_Customer_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Customer_updatedBy(ctx, field)
			case "approver":
				return ec.fieldContext_Customer_approver(ctx, field)
			case "visitRecords":
				return ec.fieldContext_Customer_visitRecords(ctx, field)
			case "draft":
				return ec.fieldContext_Customer_draft(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Customer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecord_followupbys(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecord_followupbys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowUpBys(ctx, fc.Args["after"].(*entgql.Cursor[xid.ID]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[xid.ID]), fc.Args["last"].(*int), fc.Args["orderBy"].(*ent.UserOrder), fc.Args["where"].(*ent.UserWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecord_followupbys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecord",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_UserConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_VisitRecord_followupbys_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecordConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecordConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecordConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.VisitRecordEdge)
	fc.Result = res
	return ec.marshalOVisitRecordEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecordConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecordConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_VisitRecordEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_VisitRecordEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecordEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecordConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecordConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecordConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[xid.ID])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecordConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecordConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecordConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecordConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecordConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecordConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecordConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecordEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecordEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecordEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.VisitRecord)
	fc.Result = res
	return ec.marshalOVisitRecord2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecordEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecordEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_VisitRecord_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_VisitRecord_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_VisitRecord_updatedAt(ctx, field)
			case "visitType":
				return ec.fieldContext_VisitRecord_visitType(ctx, field)
			case "commPeople":
				return ec.fieldContext_VisitRecord_commPeople(ctx, field)
			case "commContent":
				return ec.fieldContext_VisitRecord_commContent(ctx, field)
			case "nextStep":
				return ec.fieldContext_VisitRecord_nextStep(ctx, field)
			case "date":
				return ec.fieldContext_VisitRecord_date(ctx, field)
			case "tenderID":
				return ec.fieldContext_VisitRecord_tenderID(ctx, field)
			case "customerID":
				return ec.fieldContext_VisitRecord_customerID(ctx, field)
			case "tender":
				return ec.fieldContext_VisitRecord_tender(ctx, field)
			case "customer":
				return ec.fieldContext_VisitRecord_customer(ctx, field)
			case "followupbys":
				return ec.fieldContext_VisitRecord_followupbys(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VisitRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VisitRecordEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.VisitRecordEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VisitRecordEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[xid.ID])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VisitRecordEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VisitRecordEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAreaOrder(ctx context.Context, obj interface{}) (ent.AreaOrder, error) {
	var it ent.AreaOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNAreaOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAreaWhereInput(ctx context.Context, obj interface{}) (ent.AreaWhereInput, error) {
	var it ent.AreaWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "code", "codeNEQ", "codeIn", "codeNotIn", "codeGT", "codeGTE", "codeLT", "codeLTE", "codeContains", "codeHasPrefix", "codeHasSuffix", "codeEqualFold", "codeContainsFold", "leaderChatID", "leaderChatIDNEQ", "leaderChatIDIn", "leaderChatIDNotIn", "leaderChatIDGT", "leaderChatIDGTE", "leaderChatIDLT", "leaderChatIDLTE", "leaderChatIDContains", "leaderChatIDHasPrefix", "leaderChatIDHasSuffix", "leaderChatIDIsNil", "leaderChatIDNotNil", "leaderChatIDEqualFold", "leaderChatIDContainsFold", "salesChatID", "salesChatIDNEQ", "salesChatIDIn", "salesChatIDNotIn", "salesChatIDGT", "salesChatIDGTE", "salesChatIDLT", "salesChatIDLTE", "salesChatIDContains", "salesChatIDHasPrefix", "salesChatIDHasSuffix", "salesChatIDIsNil", "salesChatIDNotNil", "salesChatIDEqualFold", "salesChatIDContainsFold", "hasCustomers", "hasCustomersWith", "hasTenders", "hasTendersWith", "hasUsers", "hasUsersWith", "hasProvinces", "hasProvincesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "codeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNEQ = data
		case "codeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeIn = data
		case "codeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNotIn = data
		case "codeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGT = data
		case "codeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGTE = data
		case "codeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLT = data
		case "codeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLTE = data
		case "codeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContains = data
		case "codeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasPrefix = data
		case "codeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasSuffix = data
		case "codeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeEqualFold = data
		case "codeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContainsFold = data
		case "leaderChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatID = data
		case "leaderChatIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDNEQ = data
		case "leaderChatIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDIn = data
		case "leaderChatIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDNotIn = data
		case "leaderChatIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDGT = data
		case "leaderChatIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDGTE = data
		case "leaderChatIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDLT = data
		case "leaderChatIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDLTE = data
		case "leaderChatIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDContains = data
		case "leaderChatIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDHasPrefix = data
		case "leaderChatIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDHasSuffix = data
		case "leaderChatIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDIsNil = data
		case "leaderChatIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDNotNil = data
		case "leaderChatIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDEqualFold = data
		case "leaderChatIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatIDContainsFold = data
		case "salesChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatID = data
		case "salesChatIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDNEQ = data
		case "salesChatIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDIn = data
		case "salesChatIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDNotIn = data
		case "salesChatIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDGT = data
		case "salesChatIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDGTE = data
		case "salesChatIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDLT = data
		case "salesChatIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDLTE = data
		case "salesChatIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDContains = data
		case "salesChatIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDHasPrefix = data
		case "salesChatIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDHasSuffix = data
		case "salesChatIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDIsNil = data
		case "salesChatIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDNotNil = data
		case "salesChatIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDEqualFold = data
		case "salesChatIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatIDContainsFold = data
		case "hasCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomers = data
		case "hasCustomersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomersWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomersWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		case "hasUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsers = data
		case "hasUsersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsersWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsersWith = data
		case "hasProvinces":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinces"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinces = data
		case "hasProvincesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvincesWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvincesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityOrder(ctx context.Context, obj interface{}) (ent.CityOrder, error) {
	var it ent.CityOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCityOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityWhereInput(ctx context.Context, obj interface{}) (ent.CityWhereInput, error) {
	var it ent.CityWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "adcode", "adcodeNEQ", "adcodeIn", "adcodeNotIn", "adcodeGT", "adcodeGTE", "adcodeLT", "adcodeLTE", "provCode", "provCodeNEQ", "provCodeIn", "provCodeNotIn", "provCodeGT", "provCodeGTE", "provCodeLT", "provCodeLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "provinceID", "provinceIDNEQ", "provinceIDIn", "provinceIDNotIn", "provinceIDGT", "provinceIDGTE", "provinceIDLT", "provinceIDLTE", "provinceIDContains", "provinceIDHasPrefix", "provinceIDHasSuffix", "provinceIDEqualFold", "provinceIDContainsFold", "hasDistricts", "hasDistrictsWith", "hasProvince", "hasProvinceWith", "hasTenders", "hasTendersWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "adcodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNEQ = data
		case "adcodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeIn = data
		case "adcodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNotIn = data
		case "adcodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGT = data
		case "adcodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGTE = data
		case "adcodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLT = data
		case "adcodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLTE = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "provCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeNEQ = data
		case "provCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeIn = data
		case "provCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeNotIn = data
		case "provCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeGT = data
		case "provCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeGTE = data
		case "provCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeLT = data
		case "provCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "provinceIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNEQ = data
		case "provinceIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIn = data
		case "provinceIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotIn = data
		case "provinceIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGT = data
		case "provinceIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGTE = data
		case "provinceIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLT = data
		case "provinceIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLTE = data
		case "provinceIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContains = data
		case "provinceIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasPrefix = data
		case "provinceIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasSuffix = data
		case "provinceIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDEqualFold = data
		case "provinceIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContainsFold = data
		case "hasDistricts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistricts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistricts = data
		case "hasDistrictsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrictsWith"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrictsWith = data
		case "hasProvince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvince"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvince = data
		case "hasProvinceWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinceWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinceWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompetitorOrder(ctx context.Context, obj interface{}) (ent.CompetitorOrder, error) {
	var it ent.CompetitorOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompetitorWhereInput(ctx context.Context, obj interface{}) (ent.CompetitorWhereInput, error) {
	var it ent.CompetitorWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "shortName", "shortNameNEQ", "shortNameIn", "shortNameNotIn", "shortNameGT", "shortNameGTE", "shortNameLT", "shortNameLTE", "shortNameContains", "shortNameHasPrefix", "shortNameHasSuffix", "shortNameEqualFold", "shortNameContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "hasTenders", "hasTendersWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "shortName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortName = data
		case "shortNameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameNEQ = data
		case "shortNameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameIn = data
		case "shortNameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameNotIn = data
		case "shortNameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameGT = data
		case "shortNameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameGTE = data
		case "shortNameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameLT = data
		case "shortNameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameLTE = data
		case "shortNameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameContains = data
		case "shortNameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameHasPrefix = data
		case "shortNameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameHasSuffix = data
		case "shortNameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameEqualFold = data
		case "shortNameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortNameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortNameContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCountryOrder(ctx context.Context, obj interface{}) (ent.CountryOrder, error) {
	var it ent.CountryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCountryOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCountryWhereInput(ctx context.Context, obj interface{}) (ent.CountryWhereInput, error) {
	var it ent.CountryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "adcode", "adcodeNEQ", "adcodeIn", "adcodeNotIn", "adcodeGT", "adcodeGTE", "adcodeLT", "adcodeLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "hasProvinces", "hasProvincesWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCountryWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCountryWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCountryWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "adcodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNEQ = data
		case "adcodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeIn = data
		case "adcodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNotIn = data
		case "adcodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGT = data
		case "adcodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGTE = data
		case "adcodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLT = data
		case "adcodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "hasProvinces":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinces"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinces = data
		case "hasProvincesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvincesWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvincesWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAreaInput(ctx context.Context, obj interface{}) (ent.CreateAreaInput, error) {
	var it ent.CreateAreaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "name", "code", "leaderChatID", "salesChatID", "customerIDs", "tenderIDs", "userIDs", "provinceIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "leaderChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatID = data
		case "salesChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatID = data
		case "customerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDs = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		case "userIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserIDs = data
		case "provinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCityInput(ctx context.Context, obj interface{}) (ent.CreateCityInput, error) {
	var it ent.CreateCityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "adcode", "provCode", "name", "districtIDs", "provinceID", "tenderIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "districtIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDs = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompetitorInput(ctx context.Context, obj interface{}) (ent.CreateCompetitorInput, error) {
	var it ent.CreateCompetitorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "shortName", "name", "tenderIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "shortName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCountryInput(ctx context.Context, obj interface{}) (ent.CreateCountryInput, error) {
	var it ent.CreateCountryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "adcode", "name", "provinceIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "provinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerInput(ctx context.Context, obj interface{}) (ent.CreateCustomerInput, error) {
	var it ent.CreateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "name", "approvalStatus", "ownerType", "industry", "size", "contactPerson", "contactPersonPosition", "contactPersonPhone", "contactPersonEmail", "areaID", "tenderIDs", "salesID", "createdByID", "updatedByID", "approverID", "visitRecordIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "ownerType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerType = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "contactPerson":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPerson"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPerson = data
		case "contactPersonPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPosition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPosition = data
		case "contactPersonPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhone = data
		case "contactPersonEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmail = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		case "salesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesID = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "visitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitRecordIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDistrictInput(ctx context.Context, obj interface{}) (ent.CreateDistrictInput, error) {
	var it ent.CreateDistrictInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "adcode", "provCode", "cityCode", "name", "provinceID", "cityID", "tenderIDs", "plotIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "cityCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		case "plotIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plotIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlotIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePlotInput(ctx context.Context, obj interface{}) (ent.CreatePlotInput, error) {
	var it ent.CreatePlotInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "name", "colorHex", "districtID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "colorHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHex"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHex = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePotentialTenderInput(ctx context.Context, obj interface{}) (ent.CreatePotentialTenderInput, error) {
	var it ent.CreatePotentialTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "refURL", "title", "description", "requirement", "address", "date", "type", "status", "amount", "size", "location", "contact", "contactPhone", "contactEmail", "contactAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "refURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURL"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURL = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "requirement":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirement"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Requirement = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contact = data
		case "contactPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhone = data
		case "contactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmail = data
		case "contactAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProvinceInput(ctx context.Context, obj interface{}) (ent.CreateProvinceInput, error) {
	var it ent.CreateProvinceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "adcode", "name", "districtIDs", "cityIDs", "countryID", "tenderIDs", "areaID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "districtIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDs = data
		case "cityIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDs = data
		case "countryID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryID = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTenderCompetitorInput(ctx context.Context, obj interface{}) (ent.CreateTenderCompetitorInput, error) {
	var it ent.CreateTenderCompetitorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "amount", "tenderID", "competitorID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "competitorID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTenderInput(ctx context.Context, obj interface{}) (ent.CreateTenderInput, error) {
	var it ent.CreateTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "code", "status", "approvalStatus", "approvalMsgID", "name", "estimatedAmount", "tenderDate", "classify", "discoveryDate", "address", "fullAddress", "contractor", "levelInvolved", "sizeAndValueRating", "sizeAndValueRatingOverview", "creditAndPaymentRating", "creditAndPaymentRatingOverview", "timeLimitRating", "timeLimitRatingOverview", "customerRelationshipRating", "customerRelationshipRatingOverview", "competitivePartnershipRating", "competitivePartnershipRatingOverview", "prepareToBid", "projectCode", "projectType", "projectDefinition", "estimatedProjectStartDate", "estimatedProjectEndDate", "attachements", "remark", "images", "tenderSituations", "ownerSituations", "biddingInstructions", "competitorSituations", "costEngineer", "tenderForm", "contractForm", "managementCompany", "tenderingAgency", "biddingDate", "facadeConsultant", "designUnit", "consultingFirm", "keyProject", "currentProgress", "tenderWinCompany", "tenderCode", "architect", "developer", "tenderClosingDate", "constructionArea", "tenderWinDate", "tenderWinAmount", "lastTenderAmount", "areaID", "profileIDs", "competitorIDs", "customerID", "finderID", "createdByID", "followingSaleIDs", "provinceID", "cityID", "districtID", "visitRecordIDs", "approverID", "updatedByID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "estimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmount = data
		case "tenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDate = data
		case "classify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classify"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Classify = data
		case "discoveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDate = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "fullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddress = data
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "levelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolved"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolved = data
		case "sizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRating = data
		case "sizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverview = data
		case "creditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRating = data
		case "creditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverview = data
		case "timeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRating = data
		case "timeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverview = data
		case "customerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRating = data
		case "customerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverview = data
		case "competitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRating = data
		case "competitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverview = data
		case "prepareToBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBid"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBid = data
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "projectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectType = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "estimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDate = data
		case "estimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDate = data
		case "attachements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachements"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attachements = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Images = data
		case "tenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituations = data
		case "ownerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituations = data
		case "biddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructions"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructions = data
		case "competitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituations = data
		case "costEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineer = data
		case "tenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderForm = data
		case "contractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractForm = data
		case "managementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompany = data
		case "tenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgency = data
		case "biddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDate = data
		case "facadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultant = data
		case "designUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnit = data
		case "consultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirm = data
		case "keyProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProject = data
		case "currentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgress = data
		case "tenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompany = data
		case "tenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCode = data
		case "architect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architect"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Architect = data
		case "developer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Developer = data
		case "tenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDate = data
		case "constructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionArea"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionArea = data
		case "tenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDate = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "lastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmount = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "profileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileIDs = data
		case "competitorIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDs = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "finderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderID = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "followingSaleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("followingSaleIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FollowingSaleIDs = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "visitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitRecordIDs = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTenderProfileInput(ctx context.Context, obj interface{}) (ent.CreateTenderProfileInput, error) {
	var it ent.CreateTenderProfileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "status", "approvalStatus", "approvalMsgID", "name", "estimatedAmount", "tenderDate", "classify", "discoveryDate", "address", "fullAddress", "contractor", "levelInvolved", "sizeAndValueRating", "sizeAndValueRatingOverview", "creditAndPaymentRating", "creditAndPaymentRatingOverview", "timeLimitRating", "timeLimitRatingOverview", "customerRelationshipRating", "customerRelationshipRatingOverview", "competitivePartnershipRating", "competitivePartnershipRatingOverview", "prepareToBid", "projectCode", "projectType", "projectDefinition", "estimatedProjectStartDate", "estimatedProjectEndDate", "attachments", "geoCoordinate", "remark", "images", "tenderSituations", "ownerSituations", "biddingInstructions", "competitorSituations", "costEngineer", "tenderForm", "contractForm", "managementCompany", "tenderingAgency", "biddingDate", "facadeConsultant", "designUnit", "consultingFirm", "keyProject", "currentProgress", "tenderWinCompany", "tenderCode", "architect", "developer", "tenderClosingDate", "constructionArea", "tenderWinDate", "tenderWinAmount", "lastTenderAmount", "tenderID", "customerID", "finderID", "createdByID", "provinceID", "cityID", "districtID", "approverID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "estimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmount = data
		case "tenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDate = data
		case "classify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classify"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Classify = data
		case "discoveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDate = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "fullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddress = data
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "levelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolved"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolved = data
		case "sizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRating = data
		case "sizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverview = data
		case "creditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRating = data
		case "creditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverview = data
		case "timeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRating = data
		case "timeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverview = data
		case "customerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRating = data
		case "customerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverview = data
		case "competitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRating = data
		case "competitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverview = data
		case "prepareToBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBid"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBid = data
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "projectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectType = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "estimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDate = data
		case "estimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDate = data
		case "attachments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attachments = data
		case "geoCoordinate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("geoCoordinate"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GeoCoordinate = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Images = data
		case "tenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituations = data
		case "ownerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituations = data
		case "biddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructions"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructions = data
		case "competitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituations = data
		case "costEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineer = data
		case "tenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderForm = data
		case "contractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractForm = data
		case "managementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompany = data
		case "tenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgency = data
		case "biddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDate = data
		case "facadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultant = data
		case "designUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnit = data
		case "consultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirm = data
		case "keyProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProject = data
		case "currentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgress = data
		case "tenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompany = data
		case "tenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCode = data
		case "architect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architect"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Architect = data
		case "developer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Developer = data
		case "tenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDate = data
		case "constructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionArea"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionArea = data
		case "tenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDate = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "lastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmount = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "finderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderID = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj interface{}) (ent.CreateUserInput, error) {
	var it ent.CreateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "openID", "name", "email", "username", "avatarURL", "disabled", "isAdmin", "isCeo", "isSuperAdmin", "hasMapAccess", "hasEditAccess", "areaIDs", "customerIDs", "leaderID", "teamMemberIDs", "tenderIDs", "visitRecordIDs", "projectIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "openID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "avatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		case "isCeo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCeo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCeo = data
		case "isSuperAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSuperAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsSuperAdmin = data
		case "hasMapAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMapAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMapAccess = data
		case "hasEditAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditAccess = data
		case "areaIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDs = data
		case "customerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDs = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "teamMemberIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamMemberIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeamMemberIDs = data
		case "tenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDs = data
		case "visitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitRecordIDs = data
		case "projectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateVisitRecordInput(ctx context.Context, obj interface{}) (ent.CreateVisitRecordInput, error) {
	var it ent.CreateVisitRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"createdAt", "updatedAt", "visitType", "commPeople", "commContent", "nextStep", "date", "tenderID", "customerID", "followupbyIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "visitType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitType = data
		case "commPeople":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeople"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeople = data
		case "commContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContent"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContent = data
		case "nextStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStep"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStep = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalNID2cscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "followupbyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("followupbyIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FollowUpByIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerOrder(ctx context.Context, obj interface{}) (ent.CustomerOrder, error) {
	var it ent.CustomerOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCustomerOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerWhereInput(ctx context.Context, obj interface{}) (ent.CustomerWhereInput, error) {
	var it ent.CustomerWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "approvalStatus", "approvalStatusNEQ", "approvalStatusIn", "approvalStatusNotIn", "approvalStatusGT", "approvalStatusGTE", "approvalStatusLT", "approvalStatusLTE", "ownerType", "ownerTypeNEQ", "ownerTypeIn", "ownerTypeNotIn", "ownerTypeGT", "ownerTypeGTE", "ownerTypeLT", "ownerTypeLTE", "ownerTypeIsNil", "ownerTypeNotNil", "industry", "industryNEQ", "industryIn", "industryNotIn", "industryGT", "industryGTE", "industryLT", "industryLTE", "industryIsNil", "industryNotNil", "size", "sizeNEQ", "sizeIn", "sizeNotIn", "sizeGT", "sizeGTE", "sizeLT", "sizeLTE", "sizeIsNil", "sizeNotNil", "contactPerson", "contactPersonNEQ", "contactPersonIn", "contactPersonNotIn", "contactPersonGT", "contactPersonGTE", "contactPersonLT", "contactPersonLTE", "contactPersonContains", "contactPersonHasPrefix", "contactPersonHasSuffix", "contactPersonIsNil", "contactPersonNotNil", "contactPersonEqualFold", "contactPersonContainsFold", "contactPersonPosition", "contactPersonPositionNEQ", "contactPersonPositionIn", "contactPersonPositionNotIn", "contactPersonPositionGT", "contactPersonPositionGTE", "contactPersonPositionLT", "contactPersonPositionLTE", "contactPersonPositionContains", "contactPersonPositionHasPrefix", "contactPersonPositionHasSuffix", "contactPersonPositionIsNil", "contactPersonPositionNotNil", "contactPersonPositionEqualFold", "contactPersonPositionContainsFold", "contactPersonPhone", "contactPersonPhoneNEQ", "contactPersonPhoneIn", "contactPersonPhoneNotIn", "contactPersonPhoneGT", "contactPersonPhoneGTE", "contactPersonPhoneLT", "contactPersonPhoneLTE", "contactPersonPhoneContains", "contactPersonPhoneHasPrefix", "contactPersonPhoneHasSuffix", "contactPersonPhoneIsNil", "contactPersonPhoneNotNil", "contactPersonPhoneEqualFold", "contactPersonPhoneContainsFold", "contactPersonEmail", "contactPersonEmailNEQ", "contactPersonEmailIn", "contactPersonEmailNotIn", "contactPersonEmailGT", "contactPersonEmailGTE", "contactPersonEmailLT", "contactPersonEmailLTE", "contactPersonEmailContains", "contactPersonEmailHasPrefix", "contactPersonEmailHasSuffix", "contactPersonEmailIsNil", "contactPersonEmailNotNil", "contactPersonEmailEqualFold", "contactPersonEmailContainsFold", "areaID", "areaIDNEQ", "areaIDIn", "areaIDNotIn", "areaIDGT", "areaIDGTE", "areaIDLT", "areaIDLTE", "areaIDContains", "areaIDHasPrefix", "areaIDHasSuffix", "areaIDEqualFold", "areaIDContainsFold", "salesID", "salesIDNEQ", "salesIDIn", "salesIDNotIn", "salesIDGT", "salesIDGTE", "salesIDLT", "salesIDLTE", "salesIDContains", "salesIDHasPrefix", "salesIDHasSuffix", "salesIDIsNil", "salesIDNotNil", "salesIDEqualFold", "salesIDContainsFold", "createdByID", "createdByIDNEQ", "createdByIDIn", "createdByIDNotIn", "createdByIDGT", "createdByIDGTE", "createdByIDLT", "createdByIDLTE", "createdByIDContains", "createdByIDHasPrefix", "createdByIDHasSuffix", "createdByIDIsNil", "createdByIDNotNil", "createdByIDEqualFold", "createdByIDContainsFold", "updatedByID", "updatedByIDNEQ", "updatedByIDIn", "updatedByIDNotIn", "updatedByIDGT", "updatedByIDGTE", "updatedByIDLT", "updatedByIDLTE", "updatedByIDContains", "updatedByIDHasPrefix", "updatedByIDHasSuffix", "updatedByIDIsNil", "updatedByIDNotNil", "updatedByIDEqualFold", "updatedByIDContainsFold", "approverID", "approverIDNEQ", "approverIDIn", "approverIDNotIn", "approverIDGT", "approverIDGTE", "approverIDLT", "approverIDLTE", "approverIDContains", "approverIDHasPrefix", "approverIDHasSuffix", "approverIDIsNil", "approverIDNotNil", "approverIDEqualFold", "approverIDContainsFold", "hasArea", "hasAreaWith", "hasTenders", "hasTendersWith", "hasSales", "hasSalesWith", "hasCreatedBy", "hasCreatedByWith", "hasUpdatedBy", "hasUpdatedByWith", "hasApprover", "hasApproverWith", "hasVisitRecords", "hasVisitRecordsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNEQ = data
		case "approvalStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusIn = data
		case "approvalStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNotIn = data
		case "approvalStatusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGT = data
		case "approvalStatusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGTE = data
		case "approvalStatusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLT = data
		case "approvalStatusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLTE = data
		case "ownerType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerType = data
		case "ownerTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeNEQ = data
		case "ownerTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeIn = data
		case "ownerTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeNotIn = data
		case "ownerTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeGT = data
		case "ownerTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeGTE = data
		case "ownerTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeLT = data
		case "ownerTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeLTE = data
		case "ownerTypeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeIsNil = data
		case "ownerTypeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerTypeNotNil = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "industryNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNEQ = data
		case "industryIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryIn = data
		case "industryNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNotIn = data
		case "industryGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGT = data
		case "industryGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGTE = data
		case "industryLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryLT = data
		case "industryLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryLTE = data
		case "industryIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryIsNil = data
		case "industryNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryNotNil = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "sizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNEQ = data
		case "sizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIn = data
		case "sizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotIn = data
		case "sizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGT = data
		case "sizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGTE = data
		case "sizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLT = data
		case "sizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLTE = data
		case "sizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIsNil = data
		case "sizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotNil = data
		case "contactPerson":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPerson"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPerson = data
		case "contactPersonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonNEQ = data
		case "contactPersonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonIn = data
		case "contactPersonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonNotIn = data
		case "contactPersonGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonGT = data
		case "contactPersonGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonGTE = data
		case "contactPersonLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonLT = data
		case "contactPersonLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonLTE = data
		case "contactPersonContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonContains = data
		case "contactPersonHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonHasPrefix = data
		case "contactPersonHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonHasSuffix = data
		case "contactPersonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonIsNil = data
		case "contactPersonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonNotNil = data
		case "contactPersonEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEqualFold = data
		case "contactPersonContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonContainsFold = data
		case "contactPersonPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPosition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPosition = data
		case "contactPersonPositionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionNEQ = data
		case "contactPersonPositionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionIn = data
		case "contactPersonPositionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionNotIn = data
		case "contactPersonPositionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionGT = data
		case "contactPersonPositionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionGTE = data
		case "contactPersonPositionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionLT = data
		case "contactPersonPositionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionLTE = data
		case "contactPersonPositionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionContains = data
		case "contactPersonPositionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionHasPrefix = data
		case "contactPersonPositionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionHasSuffix = data
		case "contactPersonPositionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionIsNil = data
		case "contactPersonPositionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionNotNil = data
		case "contactPersonPositionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionEqualFold = data
		case "contactPersonPositionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPositionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPositionContainsFold = data
		case "contactPersonPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhone = data
		case "contactPersonPhoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneNEQ = data
		case "contactPersonPhoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneIn = data
		case "contactPersonPhoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneNotIn = data
		case "contactPersonPhoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneGT = data
		case "contactPersonPhoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneGTE = data
		case "contactPersonPhoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneLT = data
		case "contactPersonPhoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneLTE = data
		case "contactPersonPhoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneContains = data
		case "contactPersonPhoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneHasPrefix = data
		case "contactPersonPhoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneHasSuffix = data
		case "contactPersonPhoneIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneIsNil = data
		case "contactPersonPhoneNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneNotNil = data
		case "contactPersonPhoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneEqualFold = data
		case "contactPersonPhoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhoneContainsFold = data
		case "contactPersonEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmail = data
		case "contactPersonEmailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailNEQ = data
		case "contactPersonEmailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailIn = data
		case "contactPersonEmailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailNotIn = data
		case "contactPersonEmailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailGT = data
		case "contactPersonEmailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailGTE = data
		case "contactPersonEmailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailLT = data
		case "contactPersonEmailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailLTE = data
		case "contactPersonEmailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailContains = data
		case "contactPersonEmailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailHasPrefix = data
		case "contactPersonEmailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailHasSuffix = data
		case "contactPersonEmailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailIsNil = data
		case "contactPersonEmailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailNotNil = data
		case "contactPersonEmailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailEqualFold = data
		case "contactPersonEmailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmailContainsFold = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "areaIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNEQ = data
		case "areaIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDIn = data
		case "areaIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNotIn = data
		case "areaIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGT = data
		case "areaIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGTE = data
		case "areaIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLT = data
		case "areaIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLTE = data
		case "areaIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContains = data
		case "areaIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasPrefix = data
		case "areaIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasSuffix = data
		case "areaIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDEqualFold = data
		case "areaIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContainsFold = data
		case "salesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesID = data
		case "salesIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDNEQ = data
		case "salesIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDIn = data
		case "salesIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDNotIn = data
		case "salesIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDGT = data
		case "salesIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDGTE = data
		case "salesIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDLT = data
		case "salesIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDLTE = data
		case "salesIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDContains = data
		case "salesIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDHasPrefix = data
		case "salesIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDHasSuffix = data
		case "salesIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDIsNil = data
		case "salesIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDNotNil = data
		case "salesIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDEqualFold = data
		case "salesIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesIDContainsFold = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "createdByIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNEQ = data
		case "createdByIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIn = data
		case "createdByIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotIn = data
		case "createdByIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGT = data
		case "createdByIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGTE = data
		case "createdByIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLT = data
		case "createdByIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLTE = data
		case "createdByIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContains = data
		case "createdByIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasPrefix = data
		case "createdByIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasSuffix = data
		case "createdByIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIsNil = data
		case "createdByIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotNil = data
		case "createdByIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDEqualFold = data
		case "createdByIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContainsFold = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		case "updatedByIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNEQ = data
		case "updatedByIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDIn = data
		case "updatedByIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNotIn = data
		case "updatedByIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDGT = data
		case "updatedByIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDGTE = data
		case "updatedByIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDLT = data
		case "updatedByIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDLTE = data
		case "updatedByIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDContains = data
		case "updatedByIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDHasPrefix = data
		case "updatedByIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDHasSuffix = data
		case "updatedByIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDIsNil = data
		case "updatedByIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNotNil = data
		case "updatedByIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDEqualFold = data
		case "updatedByIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDContainsFold = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "approverIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNEQ = data
		case "approverIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIn = data
		case "approverIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotIn = data
		case "approverIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGT = data
		case "approverIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGTE = data
		case "approverIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLT = data
		case "approverIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLTE = data
		case "approverIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContains = data
		case "approverIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasPrefix = data
		case "approverIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasSuffix = data
		case "approverIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIsNil = data
		case "approverIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotNil = data
		case "approverIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDEqualFold = data
		case "approverIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContainsFold = data
		case "hasArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArea"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArea = data
		case "hasAreaWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAreaWith"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAreaWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		case "hasSales":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSales"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSales = data
		case "hasSalesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSalesWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSalesWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasUpdatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUpdatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUpdatedBy = data
		case "hasUpdatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUpdatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUpdatedByWith = data
		case "hasApprover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprover"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprover = data
		case "hasApproverWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApproverWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApproverWith = data
		case "hasVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecords"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecords = data
		case "hasVisitRecordsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecordsWith"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecordsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictOrder(ctx context.Context, obj interface{}) (ent.DistrictOrder, error) {
	var it ent.DistrictOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNDistrictOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictWhereInput(ctx context.Context, obj interface{}) (ent.DistrictWhereInput, error) {
	var it ent.DistrictWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "adcode", "adcodeNEQ", "adcodeIn", "adcodeNotIn", "adcodeGT", "adcodeGTE", "adcodeLT", "adcodeLTE", "provCode", "provCodeNEQ", "provCodeIn", "provCodeNotIn", "provCodeGT", "provCodeGTE", "provCodeLT", "provCodeLTE", "cityCode", "cityCodeNEQ", "cityCodeIn", "cityCodeNotIn", "cityCodeGT", "cityCodeGTE", "cityCodeLT", "cityCodeLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "provinceID", "provinceIDNEQ", "provinceIDIn", "provinceIDNotIn", "provinceIDGT", "provinceIDGTE", "provinceIDLT", "provinceIDLTE", "provinceIDContains", "provinceIDHasPrefix", "provinceIDHasSuffix", "provinceIDEqualFold", "provinceIDContainsFold", "cityID", "cityIDNEQ", "cityIDIn", "cityIDNotIn", "cityIDGT", "cityIDGTE", "cityIDLT", "cityIDLTE", "cityIDContains", "cityIDHasPrefix", "cityIDHasSuffix", "cityIDIsNil", "cityIDNotNil", "cityIDEqualFold", "cityIDContainsFold", "hasProvince", "hasProvinceWith", "hasCity", "hasCityWith", "hasTenders", "hasTendersWith", "hasPlots", "hasPlotsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalODistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "adcodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNEQ = data
		case "adcodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeIn = data
		case "adcodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNotIn = data
		case "adcodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGT = data
		case "adcodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGTE = data
		case "adcodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLT = data
		case "adcodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLTE = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "provCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeNEQ = data
		case "provCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeIn = data
		case "provCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeNotIn = data
		case "provCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeGT = data
		case "provCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeGTE = data
		case "provCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeLT = data
		case "provCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCodeLTE = data
		case "cityCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCode = data
		case "cityCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeNEQ = data
		case "cityCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeIn = data
		case "cityCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeNotIn = data
		case "cityCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeGT = data
		case "cityCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeGTE = data
		case "cityCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeLT = data
		case "cityCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCodeLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "provinceIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNEQ = data
		case "provinceIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIn = data
		case "provinceIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotIn = data
		case "provinceIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGT = data
		case "provinceIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGTE = data
		case "provinceIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLT = data
		case "provinceIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLTE = data
		case "provinceIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContains = data
		case "provinceIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasPrefix = data
		case "provinceIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasSuffix = data
		case "provinceIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDEqualFold = data
		case "provinceIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContainsFold = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "cityIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNEQ = data
		case "cityIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIn = data
		case "cityIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotIn = data
		case "cityIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGT = data
		case "cityIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGTE = data
		case "cityIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLT = data
		case "cityIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLTE = data
		case "cityIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContains = data
		case "cityIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasPrefix = data
		case "cityIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasSuffix = data
		case "cityIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIsNil = data
		case "cityIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotNil = data
		case "cityIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDEqualFold = data
		case "cityIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContainsFold = data
		case "hasProvince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvince"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvince = data
		case "hasProvinceWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinceWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinceWith = data
		case "hasCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCity"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCity = data
		case "hasCityWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCityWith"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCityWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		case "hasPlots":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPlots"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPlots = data
		case "hasPlotsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPlotsWith"))
			data, err := ec.unmarshalOPlotWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPlotsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperationOrder(ctx context.Context, obj interface{}) (ent.OperationOrder, error) {
	var it ent.OperationOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNOperationOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOperationWhereInput(ctx context.Context, obj interface{}) (ent.OperationWhereInput, error) {
	var it ent.OperationWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "cjeYs", "cjeYsNEQ", "cjeYsIn", "cjeYsNotIn", "cjeYsGT", "cjeYsGTE", "cjeYsLT", "cjeYsLTE", "cjeYsIsNil", "cjeYsNotNil", "cjeLj", "cjeLjNEQ", "cjeLjIn", "cjeLjNotIn", "cjeLjGT", "cjeLjGTE", "cjeLjLT", "cjeLjLTE", "cjeLjIsNil", "cjeLjNotNil", "yyeYs", "yyeYsNEQ", "yyeYsIn", "yyeYsNotIn", "yyeYsGT", "yyeYsGTE", "yyeYsLT", "yyeYsLTE", "yyeYsIsNil", "yyeYsNotNil", "yyeLj", "yyeLjNEQ", "yyeLjIn", "yyeLjNotIn", "yyeLjGT", "yyeLjGTE", "yyeLjLT", "yyeLjLTE", "yyeLjIsNil", "yyeLjNotNil", "xjlYs", "xjlYsNEQ", "xjlYsIn", "xjlYsNotIn", "xjlYsGT", "xjlYsGTE", "xjlYsLT", "xjlYsLTE", "xjlYsIsNil", "xjlYsNotNil", "xjlLj", "xjlLjNEQ", "xjlLjIn", "xjlLjNotIn", "xjlLjGT", "xjlLjGTE", "xjlLjLT", "xjlLjLTE", "xjlLjIsNil", "xjlLjNotNil", "xmglf", "xmglfNEQ", "xmglfIn", "xmglfNotIn", "xmglfGT", "xmglfGTE", "xmglfLT", "xmglfLTE", "xmglfIsNil", "xmglfNotNil", "xmsjf", "xmsjfNEQ", "xmsjfIn", "xmsjfNotIn", "xmsjfGT", "xmsjfGTE", "xmsjfLT", "xmsjfLTE", "xmsjfIsNil", "xmsjfNotNil"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOOperationWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOOperationWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOOperationWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "cjeYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYs"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYs = data
		case "cjeYsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsNEQ = data
		case "cjeYsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsIn = data
		case "cjeYsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsNotIn = data
		case "cjeYsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsGT = data
		case "cjeYsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsGTE = data
		case "cjeYsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsLT = data
		case "cjeYsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsLTE = data
		case "cjeYsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsIsNil = data
		case "cjeYsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeYsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeYsNotNil = data
		case "cjeLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLj"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLj = data
		case "cjeLjNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjNEQ = data
		case "cjeLjIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjIn = data
		case "cjeLjNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjNotIn = data
		case "cjeLjGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjGT = data
		case "cjeLjGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjGTE = data
		case "cjeLjLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjLT = data
		case "cjeLjLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjLTE = data
		case "cjeLjIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjIsNil = data
		case "cjeLjNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLjNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLjNotNil = data
		case "yyeYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYs"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYs = data
		case "yyeYsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsNEQ = data
		case "yyeYsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsIn = data
		case "yyeYsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsNotIn = data
		case "yyeYsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsGT = data
		case "yyeYsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsGTE = data
		case "yyeYsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsLT = data
		case "yyeYsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsLTE = data
		case "yyeYsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsIsNil = data
		case "yyeYsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeYsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeYsNotNil = data
		case "yyeLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLj"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLj = data
		case "yyeLjNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjNEQ = data
		case "yyeLjIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjIn = data
		case "yyeLjNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjNotIn = data
		case "yyeLjGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjGT = data
		case "yyeLjGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjGTE = data
		case "yyeLjLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjLT = data
		case "yyeLjLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjLTE = data
		case "yyeLjIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjIsNil = data
		case "yyeLjNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLjNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLjNotNil = data
		case "xjlYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYs"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYs = data
		case "xjlYsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsNEQ = data
		case "xjlYsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsIn = data
		case "xjlYsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsNotIn = data
		case "xjlYsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsGT = data
		case "xjlYsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsGTE = data
		case "xjlYsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsLT = data
		case "xjlYsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsLTE = data
		case "xjlYsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsIsNil = data
		case "xjlYsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlYsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlYsNotNil = data
		case "xjlLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLj"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLj = data
		case "xjlLjNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjNEQ = data
		case "xjlLjIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjIn = data
		case "xjlLjNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjNotIn = data
		case "xjlLjGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjGT = data
		case "xjlLjGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjGTE = data
		case "xjlLjLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjLT = data
		case "xjlLjLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjLTE = data
		case "xjlLjIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjIsNil = data
		case "xjlLjNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLjNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLjNotNil = data
		case "xmglf":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglf"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmglf = data
		case "xmglfNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfNEQ = data
		case "xmglfIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfIn = data
		case "xmglfNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfNotIn = data
		case "xmglfGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfGT = data
		case "xmglfGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfGTE = data
		case "xmglfLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLT = data
		case "xmglfLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLTE = data
		case "xmglfIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfIsNil = data
		case "xmglfNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfNotNil = data
		case "xmsjf":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjf"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmsjf = data
		case "xmsjfNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNEQ = data
		case "xmsjfIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfIn = data
		case "xmsjfNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNotIn = data
		case "xmsjfGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfGT = data
		case "xmsjfGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfGTE = data
		case "xmsjfLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfLT = data
		case "xmsjfLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfLTE = data
		case "xmsjfIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfIsNil = data
		case "xmsjfNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNotNil = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlotOrder(ctx context.Context, obj interface{}) (ent.PlotOrder, error) {
	var it ent.PlotOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPlotOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlotWhereInput(ctx context.Context, obj interface{}) (ent.PlotWhereInput, error) {
	var it ent.PlotWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "colorHex", "colorHexNEQ", "colorHexIn", "colorHexNotIn", "colorHexGT", "colorHexGTE", "colorHexLT", "colorHexLTE", "colorHexContains", "colorHexHasPrefix", "colorHexHasSuffix", "colorHexEqualFold", "colorHexContainsFold", "districtID", "districtIDNEQ", "districtIDIn", "districtIDNotIn", "districtIDGT", "districtIDGTE", "districtIDLT", "districtIDLTE", "districtIDContains", "districtIDHasPrefix", "districtIDHasSuffix", "districtIDEqualFold", "districtIDContainsFold", "hasDistrict", "hasDistrictWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPlotWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPlotWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "colorHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHex"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHex = data
		case "colorHexNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexNEQ = data
		case "colorHexIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexIn = data
		case "colorHexNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexNotIn = data
		case "colorHexGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexGT = data
		case "colorHexGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexGTE = data
		case "colorHexLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexLT = data
		case "colorHexLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexLTE = data
		case "colorHexContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexContains = data
		case "colorHexHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexHasPrefix = data
		case "colorHexHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexHasSuffix = data
		case "colorHexEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexEqualFold = data
		case "colorHexContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHexContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHexContainsFold = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "districtIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNEQ = data
		case "districtIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDIn = data
		case "districtIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNotIn = data
		case "districtIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGT = data
		case "districtIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGTE = data
		case "districtIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLT = data
		case "districtIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLTE = data
		case "districtIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContains = data
		case "districtIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasPrefix = data
		case "districtIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasSuffix = data
		case "districtIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDEqualFold = data
		case "districtIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContainsFold = data
		case "hasDistrict":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrict"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrict = data
		case "hasDistrictWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrictWith"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrictWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPotentialTenderOrder(ctx context.Context, obj interface{}) (ent.PotentialTenderOrder, error) {
	var it ent.PotentialTenderOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNPotentialTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPotentialTenderWhereInput(ctx context.Context, obj interface{}) (ent.PotentialTenderWhereInput, error) {
	var it ent.PotentialTenderWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "refURL", "refURLNEQ", "refURLIn", "refURLNotIn", "refURLGT", "refURLGTE", "refURLLT", "refURLLTE", "refURLContains", "refURLHasPrefix", "refURLHasSuffix", "refURLEqualFold", "refURLContainsFold", "title", "titleNEQ", "titleIn", "titleNotIn", "titleGT", "titleGTE", "titleLT", "titleLTE", "titleContains", "titleHasPrefix", "titleHasSuffix", "titleEqualFold", "titleContainsFold", "description", "descriptionNEQ", "descriptionIn", "descriptionNotIn", "descriptionGT", "descriptionGTE", "descriptionLT", "descriptionLTE", "descriptionContains", "descriptionHasPrefix", "descriptionHasSuffix", "descriptionIsNil", "descriptionNotNil", "descriptionEqualFold", "descriptionContainsFold", "requirement", "requirementNEQ", "requirementIn", "requirementNotIn", "requirementGT", "requirementGTE", "requirementLT", "requirementLTE", "requirementContains", "requirementHasPrefix", "requirementHasSuffix", "requirementIsNil", "requirementNotNil", "requirementEqualFold", "requirementContainsFold", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "dateContains", "dateHasPrefix", "dateHasSuffix", "dateIsNil", "dateNotNil", "dateEqualFold", "dateContainsFold", "type", "typeNEQ", "typeIn", "typeNotIn", "typeGT", "typeGTE", "typeLT", "typeLTE", "typeContains", "typeHasPrefix", "typeHasSuffix", "typeIsNil", "typeNotNil", "typeEqualFold", "typeContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "statusGT", "statusGTE", "statusLT", "statusLTE", "statusContains", "statusHasPrefix", "statusHasSuffix", "statusIsNil", "statusNotNil", "statusEqualFold", "statusContainsFold", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "amountContains", "amountHasPrefix", "amountHasSuffix", "amountIsNil", "amountNotNil", "amountEqualFold", "amountContainsFold", "size", "sizeNEQ", "sizeIn", "sizeNotIn", "sizeGT", "sizeGTE", "sizeLT", "sizeLTE", "sizeContains", "sizeHasPrefix", "sizeHasSuffix", "sizeIsNil", "sizeNotNil", "sizeEqualFold", "sizeContainsFold", "location", "locationNEQ", "locationIn", "locationNotIn", "locationGT", "locationGTE", "locationLT", "locationLTE", "locationContains", "locationHasPrefix", "locationHasSuffix", "locationIsNil", "locationNotNil", "locationEqualFold", "locationContainsFold", "contact", "contactNEQ", "contactIn", "contactNotIn", "contactGT", "contactGTE", "contactLT", "contactLTE", "contactContains", "contactHasPrefix", "contactHasSuffix", "contactIsNil", "contactNotNil", "contactEqualFold", "contactContainsFold", "contactPhone", "contactPhoneNEQ", "contactPhoneIn", "contactPhoneNotIn", "contactPhoneGT", "contactPhoneGTE", "contactPhoneLT", "contactPhoneLTE", "contactPhoneContains", "contactPhoneHasPrefix", "contactPhoneHasSuffix", "contactPhoneIsNil", "contactPhoneNotNil", "contactPhoneEqualFold", "contactPhoneContainsFold", "contactEmail", "contactEmailNEQ", "contactEmailIn", "contactEmailNotIn", "contactEmailGT", "contactEmailGTE", "contactEmailLT", "contactEmailLTE", "contactEmailContains", "contactEmailHasPrefix", "contactEmailHasSuffix", "contactEmailIsNil", "contactEmailNotNil", "contactEmailEqualFold", "contactEmailContainsFold", "contactAddress", "contactAddressNEQ", "contactAddressIn", "contactAddressNotIn", "contactAddressGT", "contactAddressGTE", "contactAddressLT", "contactAddressLTE", "contactAddressContains", "contactAddressHasPrefix", "contactAddressHasSuffix", "contactAddressIsNil", "contactAddressNotNil", "contactAddressEqualFold", "contactAddressContainsFold"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPotentialTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPotentialTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPotentialTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "refURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURL = data
		case "refURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLNEQ = data
		case "refURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLIn = data
		case "refURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLNotIn = data
		case "refURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLGT = data
		case "refURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLGTE = data
		case "refURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLLT = data
		case "refURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLLTE = data
		case "refURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLContains = data
		case "refURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLHasPrefix = data
		case "refURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLHasSuffix = data
		case "refURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLEqualFold = data
		case "refURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURLContainsFold = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "titleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNEQ = data
		case "titleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleIn = data
		case "titleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleNotIn = data
		case "titleGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGT = data
		case "titleGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleGTE = data
		case "titleLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLT = data
		case "titleLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleLTE = data
		case "titleContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContains = data
		case "titleHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasPrefix = data
		case "titleHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleHasSuffix = data
		case "titleEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleEqualFold = data
		case "titleContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("titleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TitleContainsFold = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "descriptionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNEQ = data
		case "descriptionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIn = data
		case "descriptionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotIn = data
		case "descriptionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGT = data
		case "descriptionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionGTE = data
		case "descriptionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLT = data
		case "descriptionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionLTE = data
		case "descriptionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContains = data
		case "descriptionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasPrefix = data
		case "descriptionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionHasSuffix = data
		case "descriptionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionIsNil = data
		case "descriptionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionNotNil = data
		case "descriptionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionEqualFold = data
		case "descriptionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DescriptionContainsFold = data
		case "requirement":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirement"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Requirement = data
		case "requirementNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementNEQ = data
		case "requirementIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementIn = data
		case "requirementNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementNotIn = data
		case "requirementGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementGT = data
		case "requirementGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementGTE = data
		case "requirementLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementLT = data
		case "requirementLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementLTE = data
		case "requirementContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementContains = data
		case "requirementHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementHasPrefix = data
		case "requirementHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementHasSuffix = data
		case "requirementIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementIsNil = data
		case "requirementNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementNotNil = data
		case "requirementEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementEqualFold = data
		case "requirementContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirementContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequirementContainsFold = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "dateContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateContains = data
		case "dateHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateHasPrefix = data
		case "dateHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateHasSuffix = data
		case "dateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIsNil = data
		case "dateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotNil = data
		case "dateEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateEqualFold = data
		case "dateContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateContainsFold = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "typeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGT = data
		case "typeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGTE = data
		case "typeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLT = data
		case "typeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLTE = data
		case "typeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContains = data
		case "typeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasPrefix = data
		case "typeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasSuffix = data
		case "typeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIsNil = data
		case "typeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotNil = data
		case "typeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeEqualFold = data
		case "typeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "statusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGT = data
		case "statusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGTE = data
		case "statusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLT = data
		case "statusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLTE = data
		case "statusContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusContains = data
		case "statusHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusHasPrefix = data
		case "statusHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusHasSuffix = data
		case "statusIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIsNil = data
		case "statusNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotNil = data
		case "statusEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusEqualFold = data
		case "statusContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusContainsFold = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "amountContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountContains = data
		case "amountHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountHasPrefix = data
		case "amountHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountHasSuffix = data
		case "amountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIsNil = data
		case "amountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotNil = data
		case "amountEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountEqualFold = data
		case "amountContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountContainsFold = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "sizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNEQ = data
		case "sizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIn = data
		case "sizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotIn = data
		case "sizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGT = data
		case "sizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeGTE = data
		case "sizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLT = data
		case "sizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeLTE = data
		case "sizeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContains = data
		case "sizeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasPrefix = data
		case "sizeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeHasSuffix = data
		case "sizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeIsNil = data
		case "sizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeNotNil = data
		case "sizeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeEqualFold = data
		case "sizeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeContainsFold = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "locationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNEQ = data
		case "locationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIn = data
		case "locationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotIn = data
		case "locationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGT = data
		case "locationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationGTE = data
		case "locationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLT = data
		case "locationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationLTE = data
		case "locationContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContains = data
		case "locationHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasPrefix = data
		case "locationHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationHasSuffix = data
		case "locationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationIsNil = data
		case "locationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationNotNil = data
		case "locationEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationEqualFold = data
		case "locationContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationContainsFold = data
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contact = data
		case "contactNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactNEQ = data
		case "contactIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactIn = data
		case "contactNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactNotIn = data
		case "contactGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactGT = data
		case "contactGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactGTE = data
		case "contactLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactLT = data
		case "contactLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactLTE = data
		case "contactContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactContains = data
		case "contactHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactHasPrefix = data
		case "contactHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactHasSuffix = data
		case "contactIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactIsNil = data
		case "contactNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactNotNil = data
		case "contactEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEqualFold = data
		case "contactContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactContainsFold = data
		case "contactPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhone = data
		case "contactPhoneNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneNEQ = data
		case "contactPhoneIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneIn = data
		case "contactPhoneNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneNotIn = data
		case "contactPhoneGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneGT = data
		case "contactPhoneGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneGTE = data
		case "contactPhoneLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneLT = data
		case "contactPhoneLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneLTE = data
		case "contactPhoneContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneContains = data
		case "contactPhoneHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneHasPrefix = data
		case "contactPhoneHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneHasSuffix = data
		case "contactPhoneIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneIsNil = data
		case "contactPhoneNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneNotNil = data
		case "contactPhoneEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneEqualFold = data
		case "contactPhoneContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhoneContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhoneContainsFold = data
		case "contactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmail = data
		case "contactEmailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailNEQ = data
		case "contactEmailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailIn = data
		case "contactEmailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailNotIn = data
		case "contactEmailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailGT = data
		case "contactEmailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailGTE = data
		case "contactEmailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailLT = data
		case "contactEmailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailLTE = data
		case "contactEmailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailContains = data
		case "contactEmailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailHasPrefix = data
		case "contactEmailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailHasSuffix = data
		case "contactEmailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailIsNil = data
		case "contactEmailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailNotNil = data
		case "contactEmailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailEqualFold = data
		case "contactEmailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmailContainsFold = data
		case "contactAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddress = data
		case "contactAddressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressNEQ = data
		case "contactAddressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressIn = data
		case "contactAddressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressNotIn = data
		case "contactAddressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressGT = data
		case "contactAddressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressGTE = data
		case "contactAddressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressLT = data
		case "contactAddressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressLTE = data
		case "contactAddressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressContains = data
		case "contactAddressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressHasPrefix = data
		case "contactAddressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressHasSuffix = data
		case "contactAddressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressIsNil = data
		case "contactAddressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressNotNil = data
		case "contactAddressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressEqualFold = data
		case "contactAddressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddressContainsFold = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectOrder(ctx context.Context, obj interface{}) (ent.ProjectOrder, error) {
	var it ent.ProjectOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProjectOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectStaffOrder(ctx context.Context, obj interface{}) (ent.ProjectStaffOrder, error) {
	var it ent.ProjectStaffOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProjectStaffOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectStaffWhereInput(ctx context.Context, obj interface{}) (ent.ProjectStaffWhereInput, error) {
	var it ent.ProjectStaffWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "cym", "cymNEQ", "cymIn", "cymNotIn", "cymGT", "cymGTE", "cymLT", "cymLTE", "cymContains", "cymHasPrefix", "cymHasSuffix", "cymEqualFold", "cymContainsFold", "installation", "installationNEQ", "installationIn", "installationNotIn", "installationGT", "installationGTE", "installationLT", "installationLTE", "installationIsNil", "installationNotNil", "management", "managementNEQ", "managementIn", "managementNotIn", "managementGT", "managementGTE", "managementLT", "managementLTE", "managementIsNil", "managementNotNil", "design", "designNEQ", "designIn", "designNotIn", "designGT", "designGTE", "designLT", "designLTE", "designIsNil", "designNotNil", "projectID", "projectIDNEQ", "projectIDIn", "projectIDNotIn", "projectIDGT", "projectIDGTE", "projectIDLT", "projectIDLTE", "projectIDContains", "projectIDHasPrefix", "projectIDHasSuffix", "projectIDEqualFold", "projectIDContainsFold", "hasProject", "hasProjectWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectStaffWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectStaffWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "cym":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cym"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cym = data
		case "cymNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymNEQ = data
		case "cymIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymIn = data
		case "cymNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymNotIn = data
		case "cymGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymGT = data
		case "cymGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymGTE = data
		case "cymLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymLT = data
		case "cymLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymLTE = data
		case "cymContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymContains = data
		case "cymHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymHasPrefix = data
		case "cymHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymHasSuffix = data
		case "cymEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymEqualFold = data
		case "cymContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cymContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CymContainsFold = data
		case "installation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installation"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Installation = data
		case "installationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationNEQ = data
		case "installationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationIn = data
		case "installationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationNotIn = data
		case "installationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationGT = data
		case "installationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationGTE = data
		case "installationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationLT = data
		case "installationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationLTE = data
		case "installationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationIsNil = data
		case "installationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallationNotNil = data
		case "management":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("management"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Management = data
		case "managementNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementNEQ = data
		case "managementIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementIn = data
		case "managementNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementNotIn = data
		case "managementGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementGT = data
		case "managementGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementGTE = data
		case "managementLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementLT = data
		case "managementLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementLTE = data
		case "managementIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementIsNil = data
		case "managementNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementNotNil = data
		case "design":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("design"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Design = data
		case "designNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignNEQ = data
		case "designIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignIn = data
		case "designNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignNotIn = data
		case "designGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignGT = data
		case "designGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignGTE = data
		case "designLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignLT = data
		case "designLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignLTE = data
		case "designIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignIsNil = data
		case "designNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignNotNil = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		case "projectIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDNEQ = data
		case "projectIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDIn = data
		case "projectIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDNotIn = data
		case "projectIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDGT = data
		case "projectIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDGTE = data
		case "projectIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDLT = data
		case "projectIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDLTE = data
		case "projectIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDContains = data
		case "projectIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDHasPrefix = data
		case "projectIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDHasSuffix = data
		case "projectIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDEqualFold = data
		case "projectIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDContainsFold = data
		case "hasProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProject = data
		case "hasProjectWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectVOOrder(ctx context.Context, obj interface{}) (ent.ProjectVOOrder, error) {
	var it ent.ProjectVOOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProjectVOOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectVOWhereInput(ctx context.Context, obj interface{}) (ent.ProjectVOWhereInput, error) {
	var it ent.ProjectVOWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "projectID", "projectIDNEQ", "projectIDIn", "projectIDNotIn", "projectIDGT", "projectIDGTE", "projectIDLT", "projectIDLTE", "projectIDContains", "projectIDHasPrefix", "projectIDHasSuffix", "projectIDEqualFold", "projectIDContainsFold", "changeType", "changeTypeNEQ", "changeTypeIn", "changeTypeNotIn", "changeTypeGT", "changeTypeGTE", "changeTypeLT", "changeTypeLTE", "isApproved", "isApprovedNEQ", "azjd", "azjdNEQ", "azjdIn", "azjdNotIn", "azjdGT", "azjdGTE", "azjdLT", "azjdLTE", "azjdIsNil", "azjdNotNil", "yxhyze", "yxhyzeNEQ", "yxhyzeIn", "yxhyzeNotIn", "yxhyzeGT", "yxhyzeGTE", "yxhyzeLT", "yxhyzeLTE", "yxhyzeIsNil", "yxhyzeNotNil", "applyAmount", "applyAmountNEQ", "applyAmountIn", "applyAmountNotIn", "applyAmountGT", "applyAmountGTE", "applyAmountLT", "applyAmountLTE", "applyAmountIsNil", "applyAmountNotNil", "approveAmount", "approveAmountNEQ", "approveAmountIn", "approveAmountNotIn", "approveAmountGT", "approveAmountGTE", "approveAmountLT", "approveAmountLTE", "approveAmountIsNil", "approveAmountNotNil", "hasProject", "hasProjectWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectVOWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectVOWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectVOWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "projectID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		case "projectIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDNEQ = data
		case "projectIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDIn = data
		case "projectIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDNotIn = data
		case "projectIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDGT = data
		case "projectIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDGTE = data
		case "projectIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDLT = data
		case "projectIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDLTE = data
		case "projectIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDContains = data
		case "projectIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDHasPrefix = data
		case "projectIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDHasSuffix = data
		case "projectIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDEqualFold = data
		case "projectIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectIDContainsFold = data
		case "changeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeType = data
		case "changeTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeNEQ = data
		case "changeTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeIn = data
		case "changeTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeNotIn = data
		case "changeTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeGT = data
		case "changeTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeGTE = data
		case "changeTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeLT = data
		case "changeTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeTypeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeTypeLTE = data
		case "isApproved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isApproved"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsApproved = data
		case "isApprovedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isApprovedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsApprovedNEQ = data
		case "azjd":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjd"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Azjd = data
		case "azjdNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdNEQ = data
		case "azjdIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdIn = data
		case "azjdNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdNotIn = data
		case "azjdGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdGT = data
		case "azjdGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdGTE = data
		case "azjdLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdLT = data
		case "azjdLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdLTE = data
		case "azjdIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdIsNil = data
		case "azjdNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("azjdNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AzjdNotNil = data
		case "yxhyze":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyze"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Yxhyze = data
		case "yxhyzeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeNEQ = data
		case "yxhyzeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeIn = data
		case "yxhyzeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeNotIn = data
		case "yxhyzeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeGT = data
		case "yxhyzeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeGTE = data
		case "yxhyzeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeLT = data
		case "yxhyzeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeLTE = data
		case "yxhyzeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeIsNil = data
		case "yxhyzeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yxhyzeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YxhyzeNotNil = data
		case "applyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmount = data
		case "applyAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountNEQ = data
		case "applyAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountIn = data
		case "applyAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountNotIn = data
		case "applyAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountGT = data
		case "applyAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountGTE = data
		case "applyAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountLT = data
		case "applyAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountLTE = data
		case "applyAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountIsNil = data
		case "applyAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplyAmountNotNil = data
		case "approveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmount = data
		case "approveAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountNEQ = data
		case "approveAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountIn = data
		case "approveAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountNotIn = data
		case "approveAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountGT = data
		case "approveAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountGTE = data
		case "approveAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountLT = data
		case "approveAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountLTE = data
		case "approveAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountIsNil = data
		case "approveAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approveAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproveAmountNotNil = data
		case "hasProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProject = data
		case "hasProjectWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProjectWhereInput(ctx context.Context, obj interface{}) (ent.ProjectWhereInput, error) {
	var it ent.ProjectWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "code", "codeNEQ", "codeIn", "codeNotIn", "codeGT", "codeGTE", "codeLT", "codeLTE", "codeContains", "codeHasPrefix", "codeHasSuffix", "codeEqualFold", "codeContainsFold", "manager", "managerNEQ", "managerIn", "managerNotIn", "managerGT", "managerGTE", "managerLT", "managerLTE", "managerContains", "managerHasPrefix", "managerHasSuffix", "managerIsNil", "managerNotNil", "managerEqualFold", "managerContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "owner", "ownerNEQ", "ownerIn", "ownerNotIn", "ownerGT", "ownerGTE", "ownerLT", "ownerLTE", "ownerContains", "ownerHasPrefix", "ownerHasSuffix", "ownerIsNil", "ownerNotNil", "ownerEqualFold", "ownerContainsFold", "jzs", "jzsNEQ", "jzsIn", "jzsNotIn", "jzsGT", "jzsGTE", "jzsLT", "jzsLTE", "jzsContains", "jzsHasPrefix", "jzsHasSuffix", "jzsIsNil", "jzsNotNil", "jzsEqualFold", "jzsContainsFold", "mcn", "mcnNEQ", "mcnIn", "mcnNotIn", "mcnGT", "mcnGTE", "mcnLT", "mcnLTE", "mcnContains", "mcnHasPrefix", "mcnHasSuffix", "mcnIsNil", "mcnNotNil", "mcnEqualFold", "mcnContainsFold", "consultant", "consultantNEQ", "consultantIn", "consultantNotIn", "consultantGT", "consultantGTE", "consultantLT", "consultantLTE", "consultantContains", "consultantHasPrefix", "consultantHasSuffix", "consultantIsNil", "consultantNotNil", "consultantEqualFold", "consultantContainsFold", "areas", "areasNEQ", "areasIn", "areasNotIn", "areasGT", "areasGTE", "areasLT", "areasLTE", "areasContains", "areasHasPrefix", "areasHasSuffix", "areasIsNil", "areasNotNil", "areasEqualFold", "areasContainsFold", "startDate", "startDateNEQ", "startDateIn", "startDateNotIn", "startDateGT", "startDateGTE", "startDateLT", "startDateLTE", "startDateIsNil", "startDateNotNil", "fsDate", "fsDateNEQ", "fsDateIn", "fsDateNotIn", "fsDateGT", "fsDateGTE", "fsDateLT", "fsDateLTE", "fsDateIsNil", "fsDateNotNil", "opDate", "opDateNEQ", "opDateIn", "opDateNotIn", "opDateGT", "opDateGTE", "opDateLT", "opDateLTE", "opDateIsNil", "opDateNotNil", "endDate", "endDateNEQ", "endDateIn", "endDateNotIn", "endDateGT", "endDateGTE", "endDateLT", "endDateLTE", "endDateIsNil", "endDateNotNil", "mntyr", "mntyrNEQ", "mntyrIn", "mntyrNotIn", "mntyrGT", "mntyrGTE", "mntyrLT", "mntyrLTE", "mntyrContains", "mntyrHasPrefix", "mntyrHasSuffix", "mntyrIsNil", "mntyrNotNil", "mntyrEqualFold", "mntyrContainsFold", "conType", "conTypeNEQ", "conTypeIn", "conTypeNotIn", "conTypeGT", "conTypeGTE", "conTypeLT", "conTypeLTE", "conTypeContains", "conTypeHasPrefix", "conTypeHasSuffix", "conTypeIsNil", "conTypeNotNil", "conTypeEqualFold", "conTypeContainsFold", "isFinished", "isFinishedNEQ", "cje", "cjeNEQ", "cjeIn", "cjeNotIn", "cjeGT", "cjeGTE", "cjeLT", "cjeLTE", "cjeIsNil", "cjeNotNil", "yye", "yyeNEQ", "yyeIn", "yyeNotIn", "yyeGT", "yyeGTE", "yyeLT", "yyeLTE", "yyeIsNil", "yyeNotNil", "xjl", "xjlNEQ", "xjlIn", "xjlNotIn", "xjlGT", "xjlGTE", "xjlLT", "xjlLTE", "xjlIsNil", "xjlNotNil", "xmglfYs", "xmglfYsNEQ", "xmglfYsIn", "xmglfYsNotIn", "xmglfYsGT", "xmglfYsGTE", "xmglfYsLT", "xmglfYsLTE", "xmglfYsIsNil", "xmglfYsNotNil", "xmglfLj", "xmglfLjNEQ", "xmglfLjIn", "xmglfLjNotIn", "xmglfLjGT", "xmglfLjGTE", "xmglfLjLT", "xmglfLjLTE", "xmglfLjIsNil", "xmglfLjNotNil", "xmsjf", "xmsjfNEQ", "xmsjfIn", "xmsjfNotIn", "xmsjfGT", "xmsjfGTE", "xmsjfLT", "xmsjfLTE", "xmsjfIsNil", "xmsjfNotNil", "xmfzr", "xmfzrNEQ", "xmfzrIn", "xmfzrNotIn", "xmfzrGT", "xmfzrGTE", "xmfzrLT", "xmfzrLTE", "xmfzrContains", "xmfzrHasPrefix", "xmfzrHasSuffix", "xmfzrIsNil", "xmfzrNotNil", "xmfzrEqualFold", "xmfzrContainsFold", "ownerApplyAmount", "ownerApplyAmountNEQ", "ownerApplyAmountIn", "ownerApplyAmountNotIn", "ownerApplyAmountGT", "ownerApplyAmountGTE", "ownerApplyAmountLT", "ownerApplyAmountLTE", "ownerApplyAmountIsNil", "ownerApplyAmountNotNil", "ownerApplyCount", "ownerApplyCountNEQ", "ownerApplyCountIn", "ownerApplyCountNotIn", "ownerApplyCountGT", "ownerApplyCountGTE", "ownerApplyCountLT", "ownerApplyCountLTE", "ownerApplyCountIsNil", "ownerApplyCountNotNil", "ownerApproveAmount", "ownerApproveAmountNEQ", "ownerApproveAmountIn", "ownerApproveAmountNotIn", "ownerApproveAmountGT", "ownerApproveAmountGTE", "ownerApproveAmountLT", "ownerApproveAmountLTE", "ownerApproveAmountIsNil", "ownerApproveAmountNotNil", "ownerApproveCount", "ownerApproveCountNEQ", "ownerApproveCountIn", "ownerApproveCountNotIn", "ownerApproveCountGT", "ownerApproveCountGTE", "ownerApproveCountLT", "ownerApproveCountLTE", "ownerApproveCountIsNil", "ownerApproveCountNotNil", "contractorApplyAmount", "contractorApplyAmountNEQ", "contractorApplyAmountIn", "contractorApplyAmountNotIn", "contractorApplyAmountGT", "contractorApplyAmountGTE", "contractorApplyAmountLT", "contractorApplyAmountLTE", "contractorApplyAmountIsNil", "contractorApplyAmountNotNil", "contractorApplyCount", "contractorApplyCountNEQ", "contractorApplyCountIn", "contractorApplyCountNotIn", "contractorApplyCountGT", "contractorApplyCountGTE", "contractorApplyCountLT", "contractorApplyCountLTE", "contractorApplyCountIsNil", "contractorApplyCountNotNil", "contractorApproveAmount", "contractorApproveAmountNEQ", "contractorApproveAmountIn", "contractorApproveAmountNotIn", "contractorApproveAmountGT", "contractorApproveAmountGTE", "contractorApproveAmountLT", "contractorApproveAmountLTE", "contractorApproveAmountIsNil", "contractorApproveAmountNotNil", "contractorApproveCount", "contractorApproveCountNEQ", "contractorApproveCountIn", "contractorApproveCountNotIn", "contractorApproveCountGT", "contractorApproveCountGTE", "contractorApproveCountLT", "contractorApproveCountLTE", "contractorApproveCountIsNil", "contractorApproveCountNotNil", "installProgress", "installProgressNEQ", "installProgressIn", "installProgressNotIn", "installProgressGT", "installProgressGTE", "installProgressLT", "installProgressLTE", "installProgressIsNil", "installProgressNotNil", "effectiveContractAmount", "effectiveContractAmountNEQ", "effectiveContractAmountIn", "effectiveContractAmountNotIn", "effectiveContractAmountGT", "effectiveContractAmountGTE", "effectiveContractAmountLT", "effectiveContractAmountLTE", "effectiveContractAmountIsNil", "effectiveContractAmountNotNil", "vaApplyAmount", "vaApplyAmountNEQ", "vaApplyAmountIn", "vaApplyAmountNotIn", "vaApplyAmountGT", "vaApplyAmountGTE", "vaApplyAmountLT", "vaApplyAmountLTE", "vaApplyAmountIsNil", "vaApplyAmountNotNil", "vaApproveAmount", "vaApproveAmountNEQ", "vaApproveAmountIn", "vaApproveAmountNotIn", "vaApproveAmountGT", "vaApproveAmountGTE", "vaApproveAmountLT", "vaApproveAmountLTE", "vaApproveAmountIsNil", "vaApproveAmountNotNil", "accumulatedStatutoryDeductions", "accumulatedStatutoryDeductionsNEQ", "accumulatedStatutoryDeductionsIn", "accumulatedStatutoryDeductionsNotIn", "accumulatedStatutoryDeductionsGT", "accumulatedStatutoryDeductionsGTE", "accumulatedStatutoryDeductionsLT", "accumulatedStatutoryDeductionsLTE", "accumulatedStatutoryDeductionsIsNil", "accumulatedStatutoryDeductionsNotNil", "accumulatedNonStatutoryDeductions", "accumulatedNonStatutoryDeductionsNEQ", "accumulatedNonStatutoryDeductionsIn", "accumulatedNonStatutoryDeductionsNotIn", "accumulatedNonStatutoryDeductionsGT", "accumulatedNonStatutoryDeductionsGTE", "accumulatedNonStatutoryDeductionsLT", "accumulatedNonStatutoryDeductionsLTE", "accumulatedNonStatutoryDeductionsIsNil", "accumulatedNonStatutoryDeductionsNotNil", "accumulatedStatutoryDeductionsPeriod", "accumulatedStatutoryDeductionsPeriodNEQ", "accumulatedStatutoryDeductionsPeriodIn", "accumulatedStatutoryDeductionsPeriodNotIn", "accumulatedStatutoryDeductionsPeriodGT", "accumulatedStatutoryDeductionsPeriodGTE", "accumulatedStatutoryDeductionsPeriodLT", "accumulatedStatutoryDeductionsPeriodLTE", "accumulatedStatutoryDeductionsPeriodIsNil", "accumulatedStatutoryDeductionsPeriodNotNil", "accumulatedNonStatutoryDeductionsPeriod", "accumulatedNonStatutoryDeductionsPeriodNEQ", "accumulatedNonStatutoryDeductionsPeriodIn", "accumulatedNonStatutoryDeductionsPeriodNotIn", "accumulatedNonStatutoryDeductionsPeriodGT", "accumulatedNonStatutoryDeductionsPeriodGTE", "accumulatedNonStatutoryDeductionsPeriodLT", "accumulatedNonStatutoryDeductionsPeriodLTE", "accumulatedNonStatutoryDeductionsPeriodIsNil", "accumulatedNonStatutoryDeductionsPeriodNotNil", "totalContractAmount", "totalContractAmountNEQ", "totalContractAmountIn", "totalContractAmountNotIn", "totalContractAmountGT", "totalContractAmountGTE", "totalContractAmountLT", "totalContractAmountLTE", "totalContractAmountIsNil", "totalContractAmountNotNil", "aluminumPlateBudgetPercentage", "aluminumPlateBudgetPercentageNEQ", "aluminumPlateBudgetPercentageIn", "aluminumPlateBudgetPercentageNotIn", "aluminumPlateBudgetPercentageGT", "aluminumPlateBudgetPercentageGTE", "aluminumPlateBudgetPercentageLT", "aluminumPlateBudgetPercentageLTE", "aluminumPlateBudgetPercentageIsNil", "aluminumPlateBudgetPercentageNotNil", "aluminumBudgetPercentage", "aluminumBudgetPercentageNEQ", "aluminumBudgetPercentageIn", "aluminumBudgetPercentageNotIn", "aluminumBudgetPercentageGT", "aluminumBudgetPercentageGTE", "aluminumBudgetPercentageLT", "aluminumBudgetPercentageLTE", "aluminumBudgetPercentageIsNil", "aluminumBudgetPercentageNotNil", "glassBudgetPercentage", "glassBudgetPercentageNEQ", "glassBudgetPercentageIn", "glassBudgetPercentageNotIn", "glassBudgetPercentageGT", "glassBudgetPercentageGTE", "glassBudgetPercentageLT", "glassBudgetPercentageLTE", "glassBudgetPercentageIsNil", "glassBudgetPercentageNotNil", "ironBudgetPercentage", "ironBudgetPercentageNEQ", "ironBudgetPercentageIn", "ironBudgetPercentageNotIn", "ironBudgetPercentageGT", "ironBudgetPercentageGTE", "ironBudgetPercentageLT", "ironBudgetPercentageLTE", "ironBudgetPercentageIsNil", "ironBudgetPercentageNotNil", "milestonePlanYear", "milestonePlanYearNEQ", "milestonePlanYearIn", "milestonePlanYearNotIn", "milestonePlanYearGT", "milestonePlanYearGTE", "milestonePlanYearLT", "milestonePlanYearLTE", "milestonePlanYearIsNil", "milestonePlanYearNotNil", "milestonePlanMonth", "milestonePlanMonthNEQ", "milestonePlanMonthIn", "milestonePlanMonthNotIn", "milestonePlanMonthGT", "milestonePlanMonthGTE", "milestonePlanMonthLT", "milestonePlanMonthLTE", "milestonePlanMonthIsNil", "milestonePlanMonthNotNil", "milestoneDoneYear", "milestoneDoneYearNEQ", "milestoneDoneYearIn", "milestoneDoneYearNotIn", "milestoneDoneYearGT", "milestoneDoneYearGTE", "milestoneDoneYearLT", "milestoneDoneYearLTE", "milestoneDoneYearIsNil", "milestoneDoneYearNotNil", "milestoneDoneMonth", "milestoneDoneMonthNEQ", "milestoneDoneMonthIn", "milestoneDoneMonthNotIn", "milestoneDoneMonthGT", "milestoneDoneMonthGTE", "milestoneDoneMonthLT", "milestoneDoneMonthLTE", "milestoneDoneMonthIsNil", "milestoneDoneMonthNotNil", "pmArea", "pmAreaNEQ", "pmAreaIn", "pmAreaNotIn", "pmAreaGT", "pmAreaGTE", "pmAreaLT", "pmAreaLTE", "pmAreaIsNil", "pmAreaNotNil", "pmYearTarget", "pmYearTargetNEQ", "pmYearTargetIn", "pmYearTargetNotIn", "pmYearTargetGT", "pmYearTargetGTE", "pmYearTargetLT", "pmYearTargetLTE", "pmYearTargetIsNil", "pmYearTargetNotNil", "pmMonthTarget", "pmMonthTargetNEQ", "pmMonthTargetIn", "pmMonthTargetNotIn", "pmMonthTargetGT", "pmMonthTargetGTE", "pmMonthTargetLT", "pmMonthTargetLTE", "pmMonthTargetIsNil", "pmMonthTargetNotNil", "pmYearActual", "pmYearActualNEQ", "pmYearActualIn", "pmYearActualNotIn", "pmYearActualGT", "pmYearActualGTE", "pmYearActualLT", "pmYearActualLTE", "pmYearActualIsNil", "pmYearActualNotNil", "pmMonthActual", "pmMonthActualNEQ", "pmMonthActualIn", "pmMonthActualNotIn", "pmMonthActualGT", "pmMonthActualGTE", "pmMonthActualLT", "pmMonthActualLTE", "pmMonthActualIsNil", "pmMonthActualNotNil", "pmTotal", "pmTotalNEQ", "pmTotalIn", "pmTotalNotIn", "pmTotalGT", "pmTotalGTE", "pmTotalLT", "pmTotalLTE", "pmTotalIsNil", "pmTotalNotNil", "pmYesterday", "pmYesterdayNEQ", "pmYesterdayIn", "pmYesterdayNotIn", "pmYesterdayGT", "pmYesterdayGTE", "pmYesterdayLT", "pmYesterdayLTE", "pmYesterdayIsNil", "pmYesterdayNotNil", "unitInventoryTotal", "unitInventoryTotalNEQ", "unitInventoryTotalIn", "unitInventoryTotalNotIn", "unitInventoryTotalGT", "unitInventoryTotalGTE", "unitInventoryTotalLT", "unitInventoryTotalLTE", "unitInventoryTotalIsNil", "unitInventoryTotalNotNil", "unitComponentTotal", "unitComponentTotalNEQ", "unitComponentTotalIn", "unitComponentTotalNotIn", "unitComponentTotalGT", "unitComponentTotalGTE", "unitComponentTotalLT", "unitComponentTotalLTE", "unitComponentTotalIsNil", "unitComponentTotalNotNil", "unitComponentProduction", "unitComponentProductionNEQ", "unitComponentProductionIn", "unitComponentProductionNotIn", "unitComponentProductionGT", "unitComponentProductionGTE", "unitComponentProductionLT", "unitComponentProductionLTE", "unitComponentProductionIsNil", "unitComponentProductionNotNil", "unitComponentInstallation", "unitComponentInstallationNEQ", "unitComponentInstallationIn", "unitComponentInstallationNotIn", "unitComponentInstallationGT", "unitComponentInstallationGTE", "unitComponentInstallationLT", "unitComponentInstallationLTE", "unitComponentInstallationIsNil", "unitComponentInstallationNotNil", "materialLoss", "materialLossNEQ", "materialLossIn", "materialLossNotIn", "materialLossGT", "materialLossGTE", "materialLossLT", "materialLossLTE", "materialLossIsNil", "materialLossNotNil", "designRatedWeight", "designRatedWeightNEQ", "designRatedWeightIn", "designRatedWeightNotIn", "designRatedWeightGT", "designRatedWeightGTE", "designRatedWeightLT", "designRatedWeightLTE", "designRatedWeightIsNil", "designRatedWeightNotNil", "processingWeight", "processingWeightNEQ", "processingWeightIn", "processingWeightNotIn", "processingWeightGT", "processingWeightGTE", "processingWeightLT", "processingWeightLTE", "processingWeightIsNil", "processingWeightNotNil", "itemStockWeight", "itemStockWeightNEQ", "itemStockWeightIn", "itemStockWeightNotIn", "itemStockWeightGT", "itemStockWeightGTE", "itemStockWeightLT", "itemStockWeightLTE", "itemStockWeightIsNil", "itemStockWeightNotNil", "palletsInStock", "palletsInStockNEQ", "palletsInStockIn", "palletsInStockNotIn", "palletsInStockGT", "palletsInStockGTE", "palletsInStockLT", "palletsInStockLTE", "palletsInStockIsNil", "palletsInStockNotNil", "partsInStock", "partsInStockNEQ", "partsInStockIn", "partsInStockNotIn", "partsInStockGT", "partsInStockGTE", "partsInStockLT", "partsInStockLTE", "partsInStockIsNil", "partsInStockNotNil", "qualityScore", "qualityScoreNEQ", "qualityScoreIn", "qualityScoreNotIn", "qualityScoreGT", "qualityScoreGTE", "qualityScoreLT", "qualityScoreLTE", "qualityScoreIsNil", "qualityScoreNotNil", "qualityRanking", "qualityRankingNEQ", "qualityRankingIn", "qualityRankingNotIn", "qualityRankingGT", "qualityRankingGTE", "qualityRankingLT", "qualityRankingLTE", "qualityRankingIsNil", "qualityRankingNotNil", "bulkMaterialsTotalOrderQuantity", "bulkMaterialsTotalOrderQuantityNEQ", "bulkMaterialsTotalOrderQuantityIn", "bulkMaterialsTotalOrderQuantityNotIn", "bulkMaterialsTotalOrderQuantityGT", "bulkMaterialsTotalOrderQuantityGTE", "bulkMaterialsTotalOrderQuantityLT", "bulkMaterialsTotalOrderQuantityLTE", "bulkMaterialsTotalOrderQuantityIsNil", "bulkMaterialsTotalOrderQuantityNotNil", "bulkMaterialsCompletedQuantity", "bulkMaterialsCompletedQuantityNEQ", "bulkMaterialsCompletedQuantityIn", "bulkMaterialsCompletedQuantityNotIn", "bulkMaterialsCompletedQuantityGT", "bulkMaterialsCompletedQuantityGTE", "bulkMaterialsCompletedQuantityLT", "bulkMaterialsCompletedQuantityLTE", "bulkMaterialsCompletedQuantityIsNil", "bulkMaterialsCompletedQuantityNotNil", "bulkMaterialsUncompletedQuantity", "bulkMaterialsUncompletedQuantityNEQ", "bulkMaterialsUncompletedQuantityIn", "bulkMaterialsUncompletedQuantityNotIn", "bulkMaterialsUncompletedQuantityGT", "bulkMaterialsUncompletedQuantityGTE", "bulkMaterialsUncompletedQuantityLT", "bulkMaterialsUncompletedQuantityLTE", "bulkMaterialsUncompletedQuantityIsNil", "bulkMaterialsUncompletedQuantityNotNil", "planTotalCount", "planTotalCountNEQ", "planTotalCountIn", "planTotalCountNotIn", "planTotalCountGT", "planTotalCountGTE", "planTotalCountLT", "planTotalCountLTE", "planTotalCountIsNil", "planTotalCountNotNil", "planOverdueCount", "planOverdueCountNEQ", "planOverdueCountIn", "planOverdueCountNotIn", "planOverdueCountGT", "planOverdueCountGTE", "planOverdueCountLT", "planOverdueCountLTE", "planOverdueCountIsNil", "planOverdueCountNotNil", "planOverdueMonthCount", "planOverdueMonthCountNEQ", "planOverdueMonthCountIn", "planOverdueMonthCountNotIn", "planOverdueMonthCountGT", "planOverdueMonthCountGTE", "planOverdueMonthCountLT", "planOverdueMonthCountLTE", "planOverdueMonthCountIsNil", "planOverdueMonthCountNotNil", "diagramBdFinishCount", "diagramBdFinishCountNEQ", "diagramBdFinishCountIn", "diagramBdFinishCountNotIn", "diagramBdFinishCountGT", "diagramBdFinishCountGTE", "diagramBdFinishCountLT", "diagramBdFinishCountLTE", "diagramBdFinishCountIsNil", "diagramBdFinishCountNotNil", "diagramBdTotalCount", "diagramBdTotalCountNEQ", "diagramBdTotalCountIn", "diagramBdTotalCountNotIn", "diagramBdTotalCountGT", "diagramBdTotalCountGTE", "diagramBdTotalCountLT", "diagramBdTotalCountLTE", "diagramBdTotalCountIsNil", "diagramBdTotalCountNotNil", "diagramConstructionFinishCount", "diagramConstructionFinishCountNEQ", "diagramConstructionFinishCountIn", "diagramConstructionFinishCountNotIn", "diagramConstructionFinishCountGT", "diagramConstructionFinishCountGTE", "diagramConstructionFinishCountLT", "diagramConstructionFinishCountLTE", "diagramConstructionFinishCountIsNil", "diagramConstructionFinishCountNotNil", "diagramConstructionTotalCount", "diagramConstructionTotalCountNEQ", "diagramConstructionTotalCountIn", "diagramConstructionTotalCountNotIn", "diagramConstructionTotalCountGT", "diagramConstructionTotalCountGTE", "diagramConstructionTotalCountLT", "diagramConstructionTotalCountLTE", "diagramConstructionTotalCountIsNil", "diagramConstructionTotalCountNotNil", "diagramProcessingFinishCount", "diagramProcessingFinishCountNEQ", "diagramProcessingFinishCountIn", "diagramProcessingFinishCountNotIn", "diagramProcessingFinishCountGT", "diagramProcessingFinishCountGTE", "diagramProcessingFinishCountLT", "diagramProcessingFinishCountLTE", "diagramProcessingFinishCountIsNil", "diagramProcessingFinishCountNotNil", "diagramProcessingTotalCount", "diagramProcessingTotalCountNEQ", "diagramProcessingTotalCountIn", "diagramProcessingTotalCountNotIn", "diagramProcessingTotalCountGT", "diagramProcessingTotalCountGTE", "diagramProcessingTotalCountLT", "diagramProcessingTotalCountLTE", "diagramProcessingTotalCountIsNil", "diagramProcessingTotalCountNotNil", "diagramCApprovalRatioNumerator", "diagramCApprovalRatioNumeratorNEQ", "diagramCApprovalRatioNumeratorIn", "diagramCApprovalRatioNumeratorNotIn", "diagramCApprovalRatioNumeratorGT", "diagramCApprovalRatioNumeratorGTE", "diagramCApprovalRatioNumeratorLT", "diagramCApprovalRatioNumeratorLTE", "diagramCApprovalRatioNumeratorIsNil", "diagramCApprovalRatioNumeratorNotNil", "diagramCApprovalRatioDenominator", "diagramCApprovalRatioDenominatorNEQ", "diagramCApprovalRatioDenominatorIn", "diagramCApprovalRatioDenominatorNotIn", "diagramCApprovalRatioDenominatorGT", "diagramCApprovalRatioDenominatorGTE", "diagramCApprovalRatioDenominatorLT", "diagramCApprovalRatioDenominatorLTE", "diagramCApprovalRatioDenominatorIsNil", "diagramCApprovalRatioDenominatorNotNil", "hasVos", "hasVosWith", "hasProjectStaffs", "hasProjectStaffsWith", "hasUsers", "hasUsersWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "codeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNEQ = data
		case "codeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeIn = data
		case "codeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNotIn = data
		case "codeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGT = data
		case "codeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGTE = data
		case "codeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLT = data
		case "codeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLTE = data
		case "codeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContains = data
		case "codeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasPrefix = data
		case "codeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasSuffix = data
		case "codeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeEqualFold = data
		case "codeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContainsFold = data
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "managerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerNEQ = data
		case "managerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerIn = data
		case "managerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerNotIn = data
		case "managerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerGT = data
		case "managerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerGTE = data
		case "managerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerLT = data
		case "managerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerLTE = data
		case "managerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerContains = data
		case "managerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerHasPrefix = data
		case "managerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerHasSuffix = data
		case "managerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerIsNil = data
		case "managerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerNotNil = data
		case "managerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerEqualFold = data
		case "managerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "owner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Owner = data
		case "ownerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNEQ = data
		case "ownerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerIn = data
		case "ownerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNotIn = data
		case "ownerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerGT = data
		case "ownerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerGTE = data
		case "ownerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerLT = data
		case "ownerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerLTE = data
		case "ownerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerContains = data
		case "ownerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerHasPrefix = data
		case "ownerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerHasSuffix = data
		case "ownerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerIsNil = data
		case "ownerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerNotNil = data
		case "ownerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerEqualFold = data
		case "ownerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerContainsFold = data
		case "jzs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Jzs = data
		case "jzsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsNEQ = data
		case "jzsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsIn = data
		case "jzsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsNotIn = data
		case "jzsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsGT = data
		case "jzsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsGTE = data
		case "jzsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsLT = data
		case "jzsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsLTE = data
		case "jzsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsContains = data
		case "jzsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsHasPrefix = data
		case "jzsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsHasSuffix = data
		case "jzsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsIsNil = data
		case "jzsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsNotNil = data
		case "jzsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsEqualFold = data
		case "jzsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JzsContainsFold = data
		case "mcn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcn"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mcn = data
		case "mcnNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnNEQ = data
		case "mcnIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnIn = data
		case "mcnNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnNotIn = data
		case "mcnGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnGT = data
		case "mcnGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnGTE = data
		case "mcnLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnLT = data
		case "mcnLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnLTE = data
		case "mcnContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnContains = data
		case "mcnHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnHasPrefix = data
		case "mcnHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnHasSuffix = data
		case "mcnIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnIsNil = data
		case "mcnNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnNotNil = data
		case "mcnEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnEqualFold = data
		case "mcnContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcnContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.McnContainsFold = data
		case "consultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Consultant = data
		case "consultantNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantNEQ = data
		case "consultantIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantIn = data
		case "consultantNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantNotIn = data
		case "consultantGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantGT = data
		case "consultantGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantGTE = data
		case "consultantLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantLT = data
		case "consultantLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantLTE = data
		case "consultantContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantContains = data
		case "consultantHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantHasPrefix = data
		case "consultantHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantHasSuffix = data
		case "consultantIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantIsNil = data
		case "consultantNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantNotNil = data
		case "consultantEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantEqualFold = data
		case "consultantContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultantContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultantContainsFold = data
		case "areas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areas"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Areas = data
		case "areasNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasNEQ = data
		case "areasIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasIn = data
		case "areasNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasNotIn = data
		case "areasGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasGT = data
		case "areasGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasGTE = data
		case "areasLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasLT = data
		case "areasLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasLTE = data
		case "areasContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasContains = data
		case "areasHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasHasPrefix = data
		case "areasHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasHasSuffix = data
		case "areasIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasIsNil = data
		case "areasNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasNotNil = data
		case "areasEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasEqualFold = data
		case "areasContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areasContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreasContainsFold = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "startDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNEQ = data
		case "startDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateIn = data
		case "startDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNotIn = data
		case "startDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGT = data
		case "startDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateGTE = data
		case "startDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLT = data
		case "startDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateLTE = data
		case "startDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateIsNil = data
		case "startDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDateNotNil = data
		case "fsDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDate = data
		case "fsDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateNEQ = data
		case "fsDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateIn = data
		case "fsDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateNotIn = data
		case "fsDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateGT = data
		case "fsDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateGTE = data
		case "fsDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateLT = data
		case "fsDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateLTE = data
		case "fsDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateIsNil = data
		case "fsDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDateNotNil = data
		case "opDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDate = data
		case "opDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateNEQ = data
		case "opDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateIn = data
		case "opDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateNotIn = data
		case "opDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateGT = data
		case "opDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateGTE = data
		case "opDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateLT = data
		case "opDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateLTE = data
		case "opDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateIsNil = data
		case "opDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDateNotNil = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "endDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNEQ = data
		case "endDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateIn = data
		case "endDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNotIn = data
		case "endDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGT = data
		case "endDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateGTE = data
		case "endDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLT = data
		case "endDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateLTE = data
		case "endDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateIsNil = data
		case "endDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDateNotNil = data
		case "mntyr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mntyr = data
		case "mntyrNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrNEQ = data
		case "mntyrIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrIn = data
		case "mntyrNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrNotIn = data
		case "mntyrGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrGT = data
		case "mntyrGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrGTE = data
		case "mntyrLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrLT = data
		case "mntyrLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrLTE = data
		case "mntyrContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrContains = data
		case "mntyrHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrHasPrefix = data
		case "mntyrHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrHasSuffix = data
		case "mntyrIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrIsNil = data
		case "mntyrNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrNotNil = data
		case "mntyrEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrEqualFold = data
		case "mntyrContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyrContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MntyrContainsFold = data
		case "conType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConType = data
		case "conTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeNEQ = data
		case "conTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeIn = data
		case "conTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeNotIn = data
		case "conTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeGT = data
		case "conTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeGTE = data
		case "conTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeLT = data
		case "conTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeLTE = data
		case "conTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeContains = data
		case "conTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeHasPrefix = data
		case "conTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeHasSuffix = data
		case "conTypeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeIsNil = data
		case "conTypeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeNotNil = data
		case "conTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeEqualFold = data
		case "conTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConTypeContainsFold = data
		case "isFinished":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFinished"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsFinished = data
		case "isFinishedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFinishedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsFinishedNEQ = data
		case "cje":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cje"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cje = data
		case "cjeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeNEQ = data
		case "cjeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeIn = data
		case "cjeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeNotIn = data
		case "cjeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeGT = data
		case "cjeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeGTE = data
		case "cjeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLT = data
		case "cjeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeLTE = data
		case "cjeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeIsNil = data
		case "cjeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cjeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CjeNotNil = data
		case "yye":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yye"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Yye = data
		case "yyeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeNEQ = data
		case "yyeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeIn = data
		case "yyeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeNotIn = data
		case "yyeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeGT = data
		case "yyeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeGTE = data
		case "yyeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLT = data
		case "yyeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeLTE = data
		case "yyeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeIsNil = data
		case "yyeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yyeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.YyeNotNil = data
		case "xjl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjl"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xjl = data
		case "xjlNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlNEQ = data
		case "xjlIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlIn = data
		case "xjlNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlNotIn = data
		case "xjlGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlGT = data
		case "xjlGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlGTE = data
		case "xjlLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLT = data
		case "xjlLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlLTE = data
		case "xjlIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlIsNil = data
		case "xjlNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjlNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XjlNotNil = data
		case "xmglfYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYs"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYs = data
		case "xmglfYsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsNEQ = data
		case "xmglfYsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsIn = data
		case "xmglfYsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsNotIn = data
		case "xmglfYsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsGT = data
		case "xmglfYsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsGTE = data
		case "xmglfYsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsLT = data
		case "xmglfYsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsLTE = data
		case "xmglfYsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsIsNil = data
		case "xmglfYsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYsNotNil = data
		case "xmglfLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLj"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLj = data
		case "xmglfLjNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjNEQ = data
		case "xmglfLjIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjIn = data
		case "xmglfLjNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjNotIn = data
		case "xmglfLjGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjGT = data
		case "xmglfLjGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjGTE = data
		case "xmglfLjLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjLT = data
		case "xmglfLjLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjLTE = data
		case "xmglfLjIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjIsNil = data
		case "xmglfLjNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLjNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLjNotNil = data
		case "xmsjf":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjf"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmsjf = data
		case "xmsjfNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNEQ = data
		case "xmsjfIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfIn = data
		case "xmsjfNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNotIn = data
		case "xmsjfGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfGT = data
		case "xmsjfGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfGTE = data
		case "xmsjfLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfLT = data
		case "xmsjfLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfLTE = data
		case "xmsjfIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfIsNil = data
		case "xmsjfNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjfNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmsjfNotNil = data
		case "xmfzr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmfzr = data
		case "xmfzrNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrNEQ = data
		case "xmfzrIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrIn = data
		case "xmfzrNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrNotIn = data
		case "xmfzrGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrGT = data
		case "xmfzrGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrGTE = data
		case "xmfzrLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrLT = data
		case "xmfzrLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrLTE = data
		case "xmfzrContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrContains = data
		case "xmfzrHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrHasPrefix = data
		case "xmfzrHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrHasSuffix = data
		case "xmfzrIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrIsNil = data
		case "xmfzrNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrNotNil = data
		case "xmfzrEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrEqualFold = data
		case "xmfzrContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzrContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmfzrContainsFold = data
		case "ownerApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmount = data
		case "ownerApplyAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountNEQ = data
		case "ownerApplyAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountIn = data
		case "ownerApplyAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountNotIn = data
		case "ownerApplyAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountGT = data
		case "ownerApplyAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountGTE = data
		case "ownerApplyAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountLT = data
		case "ownerApplyAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountLTE = data
		case "ownerApplyAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountIsNil = data
		case "ownerApplyAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmountNotNil = data
		case "ownerApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCount = data
		case "ownerApplyCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountNEQ = data
		case "ownerApplyCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountIn = data
		case "ownerApplyCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountNotIn = data
		case "ownerApplyCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountGT = data
		case "ownerApplyCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountGTE = data
		case "ownerApplyCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountLT = data
		case "ownerApplyCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountLTE = data
		case "ownerApplyCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountIsNil = data
		case "ownerApplyCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCountNotNil = data
		case "ownerApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmount = data
		case "ownerApproveAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountNEQ = data
		case "ownerApproveAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountIn = data
		case "ownerApproveAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountNotIn = data
		case "ownerApproveAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountGT = data
		case "ownerApproveAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountGTE = data
		case "ownerApproveAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountLT = data
		case "ownerApproveAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountLTE = data
		case "ownerApproveAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountIsNil = data
		case "ownerApproveAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmountNotNil = data
		case "ownerApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCount = data
		case "ownerApproveCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountNEQ = data
		case "ownerApproveCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountIn = data
		case "ownerApproveCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountNotIn = data
		case "ownerApproveCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountGT = data
		case "ownerApproveCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountGTE = data
		case "ownerApproveCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountLT = data
		case "ownerApproveCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountLTE = data
		case "ownerApproveCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountIsNil = data
		case "ownerApproveCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCountNotNil = data
		case "contractorApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmount = data
		case "contractorApplyAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountNEQ = data
		case "contractorApplyAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountIn = data
		case "contractorApplyAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountNotIn = data
		case "contractorApplyAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountGT = data
		case "contractorApplyAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountGTE = data
		case "contractorApplyAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountLT = data
		case "contractorApplyAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountLTE = data
		case "contractorApplyAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountIsNil = data
		case "contractorApplyAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmountNotNil = data
		case "contractorApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCount = data
		case "contractorApplyCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountNEQ = data
		case "contractorApplyCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountIn = data
		case "contractorApplyCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountNotIn = data
		case "contractorApplyCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountGT = data
		case "contractorApplyCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountGTE = data
		case "contractorApplyCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountLT = data
		case "contractorApplyCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountLTE = data
		case "contractorApplyCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountIsNil = data
		case "contractorApplyCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCountNotNil = data
		case "contractorApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmount = data
		case "contractorApproveAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountNEQ = data
		case "contractorApproveAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountIn = data
		case "contractorApproveAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountNotIn = data
		case "contractorApproveAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountGT = data
		case "contractorApproveAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountGTE = data
		case "contractorApproveAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountLT = data
		case "contractorApproveAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountLTE = data
		case "contractorApproveAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountIsNil = data
		case "contractorApproveAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmountNotNil = data
		case "contractorApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCount = data
		case "contractorApproveCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountNEQ = data
		case "contractorApproveCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountIn = data
		case "contractorApproveCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountNotIn = data
		case "contractorApproveCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountGT = data
		case "contractorApproveCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountGTE = data
		case "contractorApproveCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountLT = data
		case "contractorApproveCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountLTE = data
		case "contractorApproveCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountIsNil = data
		case "contractorApproveCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCountNotNil = data
		case "installProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgress"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgress = data
		case "installProgressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressNEQ = data
		case "installProgressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressIn = data
		case "installProgressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressNotIn = data
		case "installProgressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressGT = data
		case "installProgressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressGTE = data
		case "installProgressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressLT = data
		case "installProgressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressLTE = data
		case "installProgressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressIsNil = data
		case "installProgressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgressNotNil = data
		case "effectiveContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmount = data
		case "effectiveContractAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountNEQ = data
		case "effectiveContractAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountIn = data
		case "effectiveContractAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountNotIn = data
		case "effectiveContractAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountGT = data
		case "effectiveContractAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountGTE = data
		case "effectiveContractAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountLT = data
		case "effectiveContractAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountLTE = data
		case "effectiveContractAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountIsNil = data
		case "effectiveContractAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmountNotNil = data
		case "vaApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmount = data
		case "vaApplyAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountNEQ = data
		case "vaApplyAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountIn = data
		case "vaApplyAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountNotIn = data
		case "vaApplyAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountGT = data
		case "vaApplyAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountGTE = data
		case "vaApplyAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountLT = data
		case "vaApplyAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountLTE = data
		case "vaApplyAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountIsNil = data
		case "vaApplyAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmountNotNil = data
		case "vaApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmount = data
		case "vaApproveAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountNEQ = data
		case "vaApproveAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountIn = data
		case "vaApproveAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountNotIn = data
		case "vaApproveAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountGT = data
		case "vaApproveAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountGTE = data
		case "vaApproveAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountLT = data
		case "vaApproveAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountLTE = data
		case "vaApproveAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountIsNil = data
		case "vaApproveAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmountNotNil = data
		case "accumulatedStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductions"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductions = data
		case "accumulatedStatutoryDeductionsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsNEQ = data
		case "accumulatedStatutoryDeductionsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsIn = data
		case "accumulatedStatutoryDeductionsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsNotIn = data
		case "accumulatedStatutoryDeductionsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsGT = data
		case "accumulatedStatutoryDeductionsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsGTE = data
		case "accumulatedStatutoryDeductionsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsLT = data
		case "accumulatedStatutoryDeductionsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsLTE = data
		case "accumulatedStatutoryDeductionsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsIsNil = data
		case "accumulatedStatutoryDeductionsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsNotNil = data
		case "accumulatedNonStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductions"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductions = data
		case "accumulatedNonStatutoryDeductionsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsNEQ = data
		case "accumulatedNonStatutoryDeductionsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsIn = data
		case "accumulatedNonStatutoryDeductionsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsNotIn = data
		case "accumulatedNonStatutoryDeductionsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsGT = data
		case "accumulatedNonStatutoryDeductionsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsGTE = data
		case "accumulatedNonStatutoryDeductionsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsLT = data
		case "accumulatedNonStatutoryDeductionsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsLTE = data
		case "accumulatedNonStatutoryDeductionsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsIsNil = data
		case "accumulatedNonStatutoryDeductionsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsNotNil = data
		case "accumulatedStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriod = data
		case "accumulatedStatutoryDeductionsPeriodNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodNEQ = data
		case "accumulatedStatutoryDeductionsPeriodIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodIn = data
		case "accumulatedStatutoryDeductionsPeriodNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodNotIn = data
		case "accumulatedStatutoryDeductionsPeriodGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodGT = data
		case "accumulatedStatutoryDeductionsPeriodGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodGTE = data
		case "accumulatedStatutoryDeductionsPeriodLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodLT = data
		case "accumulatedStatutoryDeductionsPeriodLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodLTE = data
		case "accumulatedStatutoryDeductionsPeriodIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodIsNil = data
		case "accumulatedStatutoryDeductionsPeriodNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriodNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriodNotNil = data
		case "accumulatedNonStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriod = data
		case "accumulatedNonStatutoryDeductionsPeriodNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodNEQ = data
		case "accumulatedNonStatutoryDeductionsPeriodIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodIn = data
		case "accumulatedNonStatutoryDeductionsPeriodNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodNotIn = data
		case "accumulatedNonStatutoryDeductionsPeriodGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodGT = data
		case "accumulatedNonStatutoryDeductionsPeriodGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodGTE = data
		case "accumulatedNonStatutoryDeductionsPeriodLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodLT = data
		case "accumulatedNonStatutoryDeductionsPeriodLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodLTE = data
		case "accumulatedNonStatutoryDeductionsPeriodIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodIsNil = data
		case "accumulatedNonStatutoryDeductionsPeriodNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriodNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriodNotNil = data
		case "totalContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmount = data
		case "totalContractAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountNEQ = data
		case "totalContractAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountIn = data
		case "totalContractAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountNotIn = data
		case "totalContractAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountGT = data
		case "totalContractAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountGTE = data
		case "totalContractAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountLT = data
		case "totalContractAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountLTE = data
		case "totalContractAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountIsNil = data
		case "totalContractAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmountNotNil = data
		case "aluminumPlateBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentage = data
		case "aluminumPlateBudgetPercentageNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageNEQ = data
		case "aluminumPlateBudgetPercentageIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageIn = data
		case "aluminumPlateBudgetPercentageNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageNotIn = data
		case "aluminumPlateBudgetPercentageGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageGT = data
		case "aluminumPlateBudgetPercentageGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageGTE = data
		case "aluminumPlateBudgetPercentageLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageLT = data
		case "aluminumPlateBudgetPercentageLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageLTE = data
		case "aluminumPlateBudgetPercentageIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageIsNil = data
		case "aluminumPlateBudgetPercentageNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentageNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentageNotNil = data
		case "aluminumBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentage = data
		case "aluminumBudgetPercentageNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageNEQ = data
		case "aluminumBudgetPercentageIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageIn = data
		case "aluminumBudgetPercentageNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageNotIn = data
		case "aluminumBudgetPercentageGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageGT = data
		case "aluminumBudgetPercentageGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageGTE = data
		case "aluminumBudgetPercentageLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageLT = data
		case "aluminumBudgetPercentageLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageLTE = data
		case "aluminumBudgetPercentageIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageIsNil = data
		case "aluminumBudgetPercentageNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentageNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentageNotNil = data
		case "glassBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentage = data
		case "glassBudgetPercentageNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageNEQ = data
		case "glassBudgetPercentageIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageIn = data
		case "glassBudgetPercentageNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageNotIn = data
		case "glassBudgetPercentageGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageGT = data
		case "glassBudgetPercentageGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageGTE = data
		case "glassBudgetPercentageLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageLT = data
		case "glassBudgetPercentageLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageLTE = data
		case "glassBudgetPercentageIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageIsNil = data
		case "glassBudgetPercentageNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentageNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentageNotNil = data
		case "ironBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentage = data
		case "ironBudgetPercentageNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageNEQ = data
		case "ironBudgetPercentageIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageIn = data
		case "ironBudgetPercentageNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageNotIn = data
		case "ironBudgetPercentageGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageGT = data
		case "ironBudgetPercentageGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageGTE = data
		case "ironBudgetPercentageLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageLT = data
		case "ironBudgetPercentageLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageLTE = data
		case "ironBudgetPercentageIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageIsNil = data
		case "ironBudgetPercentageNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentageNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentageNotNil = data
		case "milestonePlanYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYear"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYear = data
		case "milestonePlanYearNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearNEQ = data
		case "milestonePlanYearIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearIn = data
		case "milestonePlanYearNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearNotIn = data
		case "milestonePlanYearGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearGT = data
		case "milestonePlanYearGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearGTE = data
		case "milestonePlanYearLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearLT = data
		case "milestonePlanYearLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearLTE = data
		case "milestonePlanYearIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearIsNil = data
		case "milestonePlanYearNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYearNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYearNotNil = data
		case "milestonePlanMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonth = data
		case "milestonePlanMonthNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthNEQ = data
		case "milestonePlanMonthIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthIn = data
		case "milestonePlanMonthNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthNotIn = data
		case "milestonePlanMonthGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthGT = data
		case "milestonePlanMonthGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthGTE = data
		case "milestonePlanMonthLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthLT = data
		case "milestonePlanMonthLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthLTE = data
		case "milestonePlanMonthIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthIsNil = data
		case "milestonePlanMonthNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonthNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonthNotNil = data
		case "milestoneDoneYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYear"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYear = data
		case "milestoneDoneYearNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearNEQ = data
		case "milestoneDoneYearIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearIn = data
		case "milestoneDoneYearNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearNotIn = data
		case "milestoneDoneYearGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearGT = data
		case "milestoneDoneYearGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearGTE = data
		case "milestoneDoneYearLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearLT = data
		case "milestoneDoneYearLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearLTE = data
		case "milestoneDoneYearIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearIsNil = data
		case "milestoneDoneYearNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYearNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYearNotNil = data
		case "milestoneDoneMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonth = data
		case "milestoneDoneMonthNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthNEQ = data
		case "milestoneDoneMonthIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthIn = data
		case "milestoneDoneMonthNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthNotIn = data
		case "milestoneDoneMonthGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthGT = data
		case "milestoneDoneMonthGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthGTE = data
		case "milestoneDoneMonthLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthLT = data
		case "milestoneDoneMonthLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthLTE = data
		case "milestoneDoneMonthIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthIsNil = data
		case "milestoneDoneMonthNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonthNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonthNotNil = data
		case "pmArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmArea"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmArea = data
		case "pmAreaNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaNEQ = data
		case "pmAreaIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaIn = data
		case "pmAreaNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaNotIn = data
		case "pmAreaGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaGT = data
		case "pmAreaGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaGTE = data
		case "pmAreaLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaLT = data
		case "pmAreaLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaLTE = data
		case "pmAreaIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaIsNil = data
		case "pmAreaNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmAreaNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmAreaNotNil = data
		case "pmYearTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTarget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTarget = data
		case "pmYearTargetNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetNEQ = data
		case "pmYearTargetIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetIn = data
		case "pmYearTargetNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetNotIn = data
		case "pmYearTargetGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetGT = data
		case "pmYearTargetGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetGTE = data
		case "pmYearTargetLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetLT = data
		case "pmYearTargetLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetLTE = data
		case "pmYearTargetIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetIsNil = data
		case "pmYearTargetNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTargetNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTargetNotNil = data
		case "pmMonthTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTarget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTarget = data
		case "pmMonthTargetNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetNEQ = data
		case "pmMonthTargetIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetIn = data
		case "pmMonthTargetNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetNotIn = data
		case "pmMonthTargetGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetGT = data
		case "pmMonthTargetGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetGTE = data
		case "pmMonthTargetLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetLT = data
		case "pmMonthTargetLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetLTE = data
		case "pmMonthTargetIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetIsNil = data
		case "pmMonthTargetNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTargetNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTargetNotNil = data
		case "pmYearActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActual"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActual = data
		case "pmYearActualNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualNEQ = data
		case "pmYearActualIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualIn = data
		case "pmYearActualNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualNotIn = data
		case "pmYearActualGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualGT = data
		case "pmYearActualGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualGTE = data
		case "pmYearActualLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualLT = data
		case "pmYearActualLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualLTE = data
		case "pmYearActualIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualIsNil = data
		case "pmYearActualNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActualNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActualNotNil = data
		case "pmMonthActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActual"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActual = data
		case "pmMonthActualNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualNEQ = data
		case "pmMonthActualIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualIn = data
		case "pmMonthActualNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualNotIn = data
		case "pmMonthActualGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualGT = data
		case "pmMonthActualGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualGTE = data
		case "pmMonthActualLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualLT = data
		case "pmMonthActualLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualLTE = data
		case "pmMonthActualIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualIsNil = data
		case "pmMonthActualNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActualNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActualNotNil = data
		case "pmTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotal = data
		case "pmTotalNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalNEQ = data
		case "pmTotalIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalIn = data
		case "pmTotalNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalNotIn = data
		case "pmTotalGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalGT = data
		case "pmTotalGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalGTE = data
		case "pmTotalLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalLT = data
		case "pmTotalLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalLTE = data
		case "pmTotalIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalIsNil = data
		case "pmTotalNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotalNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotalNotNil = data
		case "pmYesterday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterday"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterday = data
		case "pmYesterdayNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayNEQ = data
		case "pmYesterdayIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayIn = data
		case "pmYesterdayNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayNotIn = data
		case "pmYesterdayGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayGT = data
		case "pmYesterdayGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayGTE = data
		case "pmYesterdayLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayLT = data
		case "pmYesterdayLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayLTE = data
		case "pmYesterdayIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayIsNil = data
		case "pmYesterdayNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterdayNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterdayNotNil = data
		case "unitInventoryTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotal = data
		case "unitInventoryTotalNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalNEQ = data
		case "unitInventoryTotalIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalIn = data
		case "unitInventoryTotalNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalNotIn = data
		case "unitInventoryTotalGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalGT = data
		case "unitInventoryTotalGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalGTE = data
		case "unitInventoryTotalLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalLT = data
		case "unitInventoryTotalLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalLTE = data
		case "unitInventoryTotalIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalIsNil = data
		case "unitInventoryTotalNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotalNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotalNotNil = data
		case "unitComponentTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotal = data
		case "unitComponentTotalNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalNEQ = data
		case "unitComponentTotalIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalIn = data
		case "unitComponentTotalNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalNotIn = data
		case "unitComponentTotalGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalGT = data
		case "unitComponentTotalGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalGTE = data
		case "unitComponentTotalLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalLT = data
		case "unitComponentTotalLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalLTE = data
		case "unitComponentTotalIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalIsNil = data
		case "unitComponentTotalNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotalNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotalNotNil = data
		case "unitComponentProduction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProduction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProduction = data
		case "unitComponentProductionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionNEQ = data
		case "unitComponentProductionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionIn = data
		case "unitComponentProductionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionNotIn = data
		case "unitComponentProductionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionGT = data
		case "unitComponentProductionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionGTE = data
		case "unitComponentProductionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionLT = data
		case "unitComponentProductionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionLTE = data
		case "unitComponentProductionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionIsNil = data
		case "unitComponentProductionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProductionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProductionNotNil = data
		case "unitComponentInstallation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallation"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallation = data
		case "unitComponentInstallationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationNEQ = data
		case "unitComponentInstallationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationIn = data
		case "unitComponentInstallationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationNotIn = data
		case "unitComponentInstallationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationGT = data
		case "unitComponentInstallationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationGTE = data
		case "unitComponentInstallationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationLT = data
		case "unitComponentInstallationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationLTE = data
		case "unitComponentInstallationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationIsNil = data
		case "unitComponentInstallationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallationNotNil = data
		case "materialLoss":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLoss"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLoss = data
		case "materialLossNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossNEQ = data
		case "materialLossIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossIn = data
		case "materialLossNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossNotIn = data
		case "materialLossGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossGT = data
		case "materialLossGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossGTE = data
		case "materialLossLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossLT = data
		case "materialLossLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossLTE = data
		case "materialLossIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossIsNil = data
		case "materialLossNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLossNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLossNotNil = data
		case "designRatedWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeight = data
		case "designRatedWeightNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightNEQ = data
		case "designRatedWeightIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightIn = data
		case "designRatedWeightNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightNotIn = data
		case "designRatedWeightGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightGT = data
		case "designRatedWeightGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightGTE = data
		case "designRatedWeightLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightLT = data
		case "designRatedWeightLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightLTE = data
		case "designRatedWeightIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightIsNil = data
		case "designRatedWeightNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeightNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeightNotNil = data
		case "processingWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeight = data
		case "processingWeightNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightNEQ = data
		case "processingWeightIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightIn = data
		case "processingWeightNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightNotIn = data
		case "processingWeightGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightGT = data
		case "processingWeightGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightGTE = data
		case "processingWeightLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightLT = data
		case "processingWeightLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightLTE = data
		case "processingWeightIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightIsNil = data
		case "processingWeightNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeightNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeightNotNil = data
		case "itemStockWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeight = data
		case "itemStockWeightNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightNEQ = data
		case "itemStockWeightIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightIn = data
		case "itemStockWeightNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightNotIn = data
		case "itemStockWeightGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightGT = data
		case "itemStockWeightGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightGTE = data
		case "itemStockWeightLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightLT = data
		case "itemStockWeightLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightLTE = data
		case "itemStockWeightIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightIsNil = data
		case "itemStockWeightNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeightNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeightNotNil = data
		case "palletsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStock = data
		case "palletsInStockNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockNEQ = data
		case "palletsInStockIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockIn = data
		case "palletsInStockNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockNotIn = data
		case "palletsInStockGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockGT = data
		case "palletsInStockGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockGTE = data
		case "palletsInStockLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockLT = data
		case "palletsInStockLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockLTE = data
		case "palletsInStockIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockIsNil = data
		case "palletsInStockNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStockNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStockNotNil = data
		case "partsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStock = data
		case "partsInStockNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockNEQ = data
		case "partsInStockIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockIn = data
		case "partsInStockNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockNotIn = data
		case "partsInStockGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockGT = data
		case "partsInStockGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockGTE = data
		case "partsInStockLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockLT = data
		case "partsInStockLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockLTE = data
		case "partsInStockIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockIsNil = data
		case "partsInStockNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStockNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStockNotNil = data
		case "qualityScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScore"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScore = data
		case "qualityScoreNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreNEQ = data
		case "qualityScoreIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreIn = data
		case "qualityScoreNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreNotIn = data
		case "qualityScoreGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreGT = data
		case "qualityScoreGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreGTE = data
		case "qualityScoreLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreLT = data
		case "qualityScoreLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreLTE = data
		case "qualityScoreIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreIsNil = data
		case "qualityScoreNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScoreNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScoreNotNil = data
		case "qualityRanking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRanking"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRanking = data
		case "qualityRankingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingNEQ = data
		case "qualityRankingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingIn = data
		case "qualityRankingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingNotIn = data
		case "qualityRankingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingGT = data
		case "qualityRankingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingGTE = data
		case "qualityRankingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingLT = data
		case "qualityRankingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingLTE = data
		case "qualityRankingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingIsNil = data
		case "qualityRankingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRankingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRankingNotNil = data
		case "bulkMaterialsTotalOrderQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantity = data
		case "bulkMaterialsTotalOrderQuantityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityNEQ = data
		case "bulkMaterialsTotalOrderQuantityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityIn = data
		case "bulkMaterialsTotalOrderQuantityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityNotIn = data
		case "bulkMaterialsTotalOrderQuantityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityGT = data
		case "bulkMaterialsTotalOrderQuantityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityGTE = data
		case "bulkMaterialsTotalOrderQuantityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityLT = data
		case "bulkMaterialsTotalOrderQuantityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityLTE = data
		case "bulkMaterialsTotalOrderQuantityIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityIsNil = data
		case "bulkMaterialsTotalOrderQuantityNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantityNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantityNotNil = data
		case "bulkMaterialsCompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantity = data
		case "bulkMaterialsCompletedQuantityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityNEQ = data
		case "bulkMaterialsCompletedQuantityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityIn = data
		case "bulkMaterialsCompletedQuantityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityNotIn = data
		case "bulkMaterialsCompletedQuantityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityGT = data
		case "bulkMaterialsCompletedQuantityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityGTE = data
		case "bulkMaterialsCompletedQuantityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityLT = data
		case "bulkMaterialsCompletedQuantityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityLTE = data
		case "bulkMaterialsCompletedQuantityIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityIsNil = data
		case "bulkMaterialsCompletedQuantityNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantityNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantityNotNil = data
		case "bulkMaterialsUncompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantity = data
		case "bulkMaterialsUncompletedQuantityNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityNEQ = data
		case "bulkMaterialsUncompletedQuantityIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityIn = data
		case "bulkMaterialsUncompletedQuantityNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityNotIn = data
		case "bulkMaterialsUncompletedQuantityGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityGT = data
		case "bulkMaterialsUncompletedQuantityGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityGTE = data
		case "bulkMaterialsUncompletedQuantityLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityLT = data
		case "bulkMaterialsUncompletedQuantityLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityLTE = data
		case "bulkMaterialsUncompletedQuantityIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityIsNil = data
		case "bulkMaterialsUncompletedQuantityNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantityNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantityNotNil = data
		case "planTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCount = data
		case "planTotalCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountNEQ = data
		case "planTotalCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountIn = data
		case "planTotalCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountNotIn = data
		case "planTotalCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountGT = data
		case "planTotalCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountGTE = data
		case "planTotalCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountLT = data
		case "planTotalCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountLTE = data
		case "planTotalCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountIsNil = data
		case "planTotalCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCountNotNil = data
		case "planOverdueCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCount = data
		case "planOverdueCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountNEQ = data
		case "planOverdueCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountIn = data
		case "planOverdueCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountNotIn = data
		case "planOverdueCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountGT = data
		case "planOverdueCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountGTE = data
		case "planOverdueCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountLT = data
		case "planOverdueCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountLTE = data
		case "planOverdueCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountIsNil = data
		case "planOverdueCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCountNotNil = data
		case "planOverdueMonthCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCount = data
		case "planOverdueMonthCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountNEQ = data
		case "planOverdueMonthCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountIn = data
		case "planOverdueMonthCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountNotIn = data
		case "planOverdueMonthCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountGT = data
		case "planOverdueMonthCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountGTE = data
		case "planOverdueMonthCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountLT = data
		case "planOverdueMonthCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountLTE = data
		case "planOverdueMonthCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountIsNil = data
		case "planOverdueMonthCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCountNotNil = data
		case "diagramBdFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCount = data
		case "diagramBdFinishCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountNEQ = data
		case "diagramBdFinishCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountIn = data
		case "diagramBdFinishCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountNotIn = data
		case "diagramBdFinishCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountGT = data
		case "diagramBdFinishCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountGTE = data
		case "diagramBdFinishCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountLT = data
		case "diagramBdFinishCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountLTE = data
		case "diagramBdFinishCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountIsNil = data
		case "diagramBdFinishCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCountNotNil = data
		case "diagramBdTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCount = data
		case "diagramBdTotalCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountNEQ = data
		case "diagramBdTotalCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountIn = data
		case "diagramBdTotalCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountNotIn = data
		case "diagramBdTotalCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountGT = data
		case "diagramBdTotalCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountGTE = data
		case "diagramBdTotalCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountLT = data
		case "diagramBdTotalCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountLTE = data
		case "diagramBdTotalCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountIsNil = data
		case "diagramBdTotalCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCountNotNil = data
		case "diagramConstructionFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCount = data
		case "diagramConstructionFinishCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountNEQ = data
		case "diagramConstructionFinishCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountIn = data
		case "diagramConstructionFinishCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountNotIn = data
		case "diagramConstructionFinishCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountGT = data
		case "diagramConstructionFinishCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountGTE = data
		case "diagramConstructionFinishCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountLT = data
		case "diagramConstructionFinishCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountLTE = data
		case "diagramConstructionFinishCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountIsNil = data
		case "diagramConstructionFinishCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCountNotNil = data
		case "diagramConstructionTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCount = data
		case "diagramConstructionTotalCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountNEQ = data
		case "diagramConstructionTotalCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountIn = data
		case "diagramConstructionTotalCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountNotIn = data
		case "diagramConstructionTotalCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountGT = data
		case "diagramConstructionTotalCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountGTE = data
		case "diagramConstructionTotalCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountLT = data
		case "diagramConstructionTotalCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountLTE = data
		case "diagramConstructionTotalCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountIsNil = data
		case "diagramConstructionTotalCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCountNotNil = data
		case "diagramProcessingFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCount = data
		case "diagramProcessingFinishCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountNEQ = data
		case "diagramProcessingFinishCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountIn = data
		case "diagramProcessingFinishCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountNotIn = data
		case "diagramProcessingFinishCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountGT = data
		case "diagramProcessingFinishCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountGTE = data
		case "diagramProcessingFinishCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountLT = data
		case "diagramProcessingFinishCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountLTE = data
		case "diagramProcessingFinishCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountIsNil = data
		case "diagramProcessingFinishCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCountNotNil = data
		case "diagramProcessingTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCount = data
		case "diagramProcessingTotalCountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountNEQ = data
		case "diagramProcessingTotalCountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountIn = data
		case "diagramProcessingTotalCountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountNotIn = data
		case "diagramProcessingTotalCountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountGT = data
		case "diagramProcessingTotalCountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountGTE = data
		case "diagramProcessingTotalCountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountLT = data
		case "diagramProcessingTotalCountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountLTE = data
		case "diagramProcessingTotalCountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountIsNil = data
		case "diagramProcessingTotalCountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCountNotNil = data
		case "diagramCApprovalRatioNumerator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumerator"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumerator = data
		case "diagramCApprovalRatioNumeratorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorNEQ = data
		case "diagramCApprovalRatioNumeratorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorIn = data
		case "diagramCApprovalRatioNumeratorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorNotIn = data
		case "diagramCApprovalRatioNumeratorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorGT = data
		case "diagramCApprovalRatioNumeratorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorGTE = data
		case "diagramCApprovalRatioNumeratorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorLT = data
		case "diagramCApprovalRatioNumeratorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorLTE = data
		case "diagramCApprovalRatioNumeratorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorIsNil = data
		case "diagramCApprovalRatioNumeratorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumeratorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumeratorNotNil = data
		case "diagramCApprovalRatioDenominator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominator"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominator = data
		case "diagramCApprovalRatioDenominatorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorNEQ = data
		case "diagramCApprovalRatioDenominatorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorIn = data
		case "diagramCApprovalRatioDenominatorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorNotIn = data
		case "diagramCApprovalRatioDenominatorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorGT = data
		case "diagramCApprovalRatioDenominatorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorGTE = data
		case "diagramCApprovalRatioDenominatorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorLT = data
		case "diagramCApprovalRatioDenominatorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorLTE = data
		case "diagramCApprovalRatioDenominatorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorIsNil = data
		case "diagramCApprovalRatioDenominatorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominatorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominatorNotNil = data
		case "hasVos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVos"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVos = data
		case "hasVosWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVosWith"))
			data, err := ec.unmarshalOProjectVOWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVosWith = data
		case "hasProjectStaffs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectStaffs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectStaffs = data
		case "hasProjectStaffsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectStaffsWith"))
			data, err := ec.unmarshalOProjectStaffWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectStaffsWith = data
		case "hasUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsers = data
		case "hasUsersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUsersWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUsersWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvinceOrder(ctx context.Context, obj interface{}) (ent.ProvinceOrder, error) {
	var it ent.ProvinceOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNProvinceOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvinceWhereInput(ctx context.Context, obj interface{}) (ent.ProvinceWhereInput, error) {
	var it ent.ProvinceWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "adcode", "adcodeNEQ", "adcodeIn", "adcodeNotIn", "adcodeGT", "adcodeGTE", "adcodeLT", "adcodeLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "countryID", "countryIDNEQ", "countryIDIn", "countryIDNotIn", "countryIDGT", "countryIDGTE", "countryIDLT", "countryIDLTE", "countryIDContains", "countryIDHasPrefix", "countryIDHasSuffix", "countryIDEqualFold", "countryIDContainsFold", "areaID", "areaIDNEQ", "areaIDIn", "areaIDNotIn", "areaIDGT", "areaIDGTE", "areaIDLT", "areaIDLTE", "areaIDContains", "areaIDHasPrefix", "areaIDHasSuffix", "areaIDIsNil", "areaIDNotNil", "areaIDEqualFold", "areaIDContainsFold", "hasDistricts", "hasDistrictsWith", "hasCities", "hasCitiesWith", "hasCountry", "hasCountryWith", "hasTenders", "hasTendersWith", "hasArea", "hasAreaWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "adcodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNEQ = data
		case "adcodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeIn = data
		case "adcodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeNotIn = data
		case "adcodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGT = data
		case "adcodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeGTE = data
		case "adcodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLT = data
		case "adcodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcodeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdcodeLTE = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "countryID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryID = data
		case "countryIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDNEQ = data
		case "countryIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDIn = data
		case "countryIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDNotIn = data
		case "countryIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDGT = data
		case "countryIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDGTE = data
		case "countryIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDLT = data
		case "countryIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDLTE = data
		case "countryIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDContains = data
		case "countryIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDHasPrefix = data
		case "countryIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDHasSuffix = data
		case "countryIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDEqualFold = data
		case "countryIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryIDContainsFold = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "areaIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNEQ = data
		case "areaIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDIn = data
		case "areaIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNotIn = data
		case "areaIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGT = data
		case "areaIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGTE = data
		case "areaIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLT = data
		case "areaIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLTE = data
		case "areaIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContains = data
		case "areaIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasPrefix = data
		case "areaIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasSuffix = data
		case "areaIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDIsNil = data
		case "areaIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNotNil = data
		case "areaIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDEqualFold = data
		case "areaIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContainsFold = data
		case "hasDistricts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistricts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistricts = data
		case "hasDistrictsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrictsWith"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrictsWith = data
		case "hasCities":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCities"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCities = data
		case "hasCitiesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCitiesWith"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCitiesWith = data
		case "hasCountry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCountry"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCountry = data
		case "hasCountryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCountryWith"))
			data, err := ec.unmarshalOCountryWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCountryWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		case "hasArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArea"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArea = data
		case "hasAreaWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAreaWith"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAreaWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderCompetitorOrder(ctx context.Context, obj interface{}) (ent.TenderCompetitorOrder, error) {
	var it ent.TenderCompetitorOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTenderCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderCompetitorWhereInput(ctx context.Context, obj interface{}) (ent.TenderCompetitorWhereInput, error) {
	var it ent.TenderCompetitorWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "tenderID", "tenderIDNEQ", "tenderIDIn", "tenderIDNotIn", "tenderIDGT", "tenderIDGTE", "tenderIDLT", "tenderIDLTE", "tenderIDContains", "tenderIDHasPrefix", "tenderIDHasSuffix", "tenderIDEqualFold", "tenderIDContainsFold", "competitorID", "competitorIDNEQ", "competitorIDIn", "competitorIDNotIn", "competitorIDGT", "competitorIDGTE", "competitorIDLT", "competitorIDLTE", "competitorIDContains", "competitorIDHasPrefix", "competitorIDHasSuffix", "competitorIDEqualFold", "competitorIDContainsFold", "amount", "amountNEQ", "amountIn", "amountNotIn", "amountGT", "amountGTE", "amountLT", "amountLTE", "hasTender", "hasTenderWith", "hasCompetitor", "hasCompetitorWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTenderCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTenderCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTenderCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "tenderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNEQ = data
		case "tenderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDIn = data
		case "tenderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNotIn = data
		case "tenderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGT = data
		case "tenderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGTE = data
		case "tenderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLT = data
		case "tenderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLTE = data
		case "tenderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContains = data
		case "tenderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasPrefix = data
		case "tenderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasSuffix = data
		case "tenderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDEqualFold = data
		case "tenderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContainsFold = data
		case "competitorID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorID = data
		case "competitorIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDNEQ = data
		case "competitorIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDIn = data
		case "competitorIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDNotIn = data
		case "competitorIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDGT = data
		case "competitorIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDGTE = data
		case "competitorIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDLT = data
		case "competitorIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDLTE = data
		case "competitorIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDContains = data
		case "competitorIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDHasPrefix = data
		case "competitorIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDHasSuffix = data
		case "competitorIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDEqualFold = data
		case "competitorIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorIDContainsFold = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "amountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNEQ = data
		case "amountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountIn = data
		case "amountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountNotIn = data
		case "amountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGT = data
		case "amountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountGTE = data
		case "amountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLT = data
		case "amountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AmountLTE = data
		case "hasTender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTender"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTender = data
		case "hasTenderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenderWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenderWith = data
		case "hasCompetitor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompetitor"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompetitor = data
		case "hasCompetitorWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompetitorWith"))
			data, err := ec.unmarshalOCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompetitorWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderOrder(ctx context.Context, obj interface{}) (ent.TenderOrder, error) {
	var it ent.TenderOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderProfileOrder(ctx context.Context, obj interface{}) (ent.TenderProfileOrder, error) {
	var it ent.TenderProfileOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTenderProfileOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderProfileWhereInput(ctx context.Context, obj interface{}) (ent.TenderProfileWhereInput, error) {
	var it ent.TenderProfileWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "status", "statusNEQ", "statusIn", "statusNotIn", "statusGT", "statusGTE", "statusLT", "statusLTE", "approvalStatus", "approvalStatusNEQ", "approvalStatusIn", "approvalStatusNotIn", "approvalStatusGT", "approvalStatusGTE", "approvalStatusLT", "approvalStatusLTE", "approvalMsgID", "approvalMsgIDNEQ", "approvalMsgIDIn", "approvalMsgIDNotIn", "approvalMsgIDGT", "approvalMsgIDGTE", "approvalMsgIDLT", "approvalMsgIDLTE", "approvalMsgIDContains", "approvalMsgIDHasPrefix", "approvalMsgIDHasSuffix", "approvalMsgIDIsNil", "approvalMsgIDNotNil", "approvalMsgIDEqualFold", "approvalMsgIDContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "estimatedAmount", "estimatedAmountNEQ", "estimatedAmountIn", "estimatedAmountNotIn", "estimatedAmountGT", "estimatedAmountGTE", "estimatedAmountLT", "estimatedAmountLTE", "estimatedAmountIsNil", "estimatedAmountNotNil", "tenderDate", "tenderDateNEQ", "tenderDateIn", "tenderDateNotIn", "tenderDateGT", "tenderDateGTE", "tenderDateLT", "tenderDateLTE", "tenderDateIsNil", "tenderDateNotNil", "classify", "classifyNEQ", "classifyIn", "classifyNotIn", "classifyGT", "classifyGTE", "classifyLT", "classifyLTE", "classifyIsNil", "classifyNotNil", "discoveryDate", "discoveryDateNEQ", "discoveryDateIn", "discoveryDateNotIn", "discoveryDateGT", "discoveryDateGTE", "discoveryDateLT", "discoveryDateLTE", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "fullAddress", "fullAddressNEQ", "fullAddressIn", "fullAddressNotIn", "fullAddressGT", "fullAddressGTE", "fullAddressLT", "fullAddressLTE", "fullAddressContains", "fullAddressHasPrefix", "fullAddressHasSuffix", "fullAddressIsNil", "fullAddressNotNil", "fullAddressEqualFold", "fullAddressContainsFold", "contractor", "contractorNEQ", "contractorIn", "contractorNotIn", "contractorGT", "contractorGTE", "contractorLT", "contractorLTE", "contractorContains", "contractorHasPrefix", "contractorHasSuffix", "contractorIsNil", "contractorNotNil", "contractorEqualFold", "contractorContainsFold", "levelInvolved", "levelInvolvedNEQ", "levelInvolvedIn", "levelInvolvedNotIn", "levelInvolvedGT", "levelInvolvedGTE", "levelInvolvedLT", "levelInvolvedLTE", "levelInvolvedIsNil", "levelInvolvedNotNil", "sizeAndValueRating", "sizeAndValueRatingNEQ", "sizeAndValueRatingIn", "sizeAndValueRatingNotIn", "sizeAndValueRatingGT", "sizeAndValueRatingGTE", "sizeAndValueRatingLT", "sizeAndValueRatingLTE", "sizeAndValueRatingIsNil", "sizeAndValueRatingNotNil", "sizeAndValueRatingOverview", "sizeAndValueRatingOverviewNEQ", "sizeAndValueRatingOverviewIn", "sizeAndValueRatingOverviewNotIn", "sizeAndValueRatingOverviewGT", "sizeAndValueRatingOverviewGTE", "sizeAndValueRatingOverviewLT", "sizeAndValueRatingOverviewLTE", "sizeAndValueRatingOverviewContains", "sizeAndValueRatingOverviewHasPrefix", "sizeAndValueRatingOverviewHasSuffix", "sizeAndValueRatingOverviewIsNil", "sizeAndValueRatingOverviewNotNil", "sizeAndValueRatingOverviewEqualFold", "sizeAndValueRatingOverviewContainsFold", "creditAndPaymentRating", "creditAndPaymentRatingNEQ", "creditAndPaymentRatingIn", "creditAndPaymentRatingNotIn", "creditAndPaymentRatingGT", "creditAndPaymentRatingGTE", "creditAndPaymentRatingLT", "creditAndPaymentRatingLTE", "creditAndPaymentRatingIsNil", "creditAndPaymentRatingNotNil", "creditAndPaymentRatingOverview", "creditAndPaymentRatingOverviewNEQ", "creditAndPaymentRatingOverviewIn", "creditAndPaymentRatingOverviewNotIn", "creditAndPaymentRatingOverviewGT", "creditAndPaymentRatingOverviewGTE", "creditAndPaymentRatingOverviewLT", "creditAndPaymentRatingOverviewLTE", "creditAndPaymentRatingOverviewContains", "creditAndPaymentRatingOverviewHasPrefix", "creditAndPaymentRatingOverviewHasSuffix", "creditAndPaymentRatingOverviewIsNil", "creditAndPaymentRatingOverviewNotNil", "creditAndPaymentRatingOverviewEqualFold", "creditAndPaymentRatingOverviewContainsFold", "timeLimitRating", "timeLimitRatingNEQ", "timeLimitRatingIn", "timeLimitRatingNotIn", "timeLimitRatingGT", "timeLimitRatingGTE", "timeLimitRatingLT", "timeLimitRatingLTE", "timeLimitRatingIsNil", "timeLimitRatingNotNil", "timeLimitRatingOverview", "timeLimitRatingOverviewNEQ", "timeLimitRatingOverviewIn", "timeLimitRatingOverviewNotIn", "timeLimitRatingOverviewGT", "timeLimitRatingOverviewGTE", "timeLimitRatingOverviewLT", "timeLimitRatingOverviewLTE", "timeLimitRatingOverviewContains", "timeLimitRatingOverviewHasPrefix", "timeLimitRatingOverviewHasSuffix", "timeLimitRatingOverviewIsNil", "timeLimitRatingOverviewNotNil", "timeLimitRatingOverviewEqualFold", "timeLimitRatingOverviewContainsFold", "customerRelationshipRating", "customerRelationshipRatingNEQ", "customerRelationshipRatingIn", "customerRelationshipRatingNotIn", "customerRelationshipRatingGT", "customerRelationshipRatingGTE", "customerRelationshipRatingLT", "customerRelationshipRatingLTE", "customerRelationshipRatingIsNil", "customerRelationshipRatingNotNil", "customerRelationshipRatingOverview", "customerRelationshipRatingOverviewNEQ", "customerRelationshipRatingOverviewIn", "customerRelationshipRatingOverviewNotIn", "customerRelationshipRatingOverviewGT", "customerRelationshipRatingOverviewGTE", "customerRelationshipRatingOverviewLT", "customerRelationshipRatingOverviewLTE", "customerRelationshipRatingOverviewContains", "customerRelationshipRatingOverviewHasPrefix", "customerRelationshipRatingOverviewHasSuffix", "customerRelationshipRatingOverviewIsNil", "customerRelationshipRatingOverviewNotNil", "customerRelationshipRatingOverviewEqualFold", "customerRelationshipRatingOverviewContainsFold", "competitivePartnershipRating", "competitivePartnershipRatingNEQ", "competitivePartnershipRatingIn", "competitivePartnershipRatingNotIn", "competitivePartnershipRatingGT", "competitivePartnershipRatingGTE", "competitivePartnershipRatingLT", "competitivePartnershipRatingLTE", "competitivePartnershipRatingIsNil", "competitivePartnershipRatingNotNil", "competitivePartnershipRatingOverview", "competitivePartnershipRatingOverviewNEQ", "competitivePartnershipRatingOverviewIn", "competitivePartnershipRatingOverviewNotIn", "competitivePartnershipRatingOverviewGT", "competitivePartnershipRatingOverviewGTE", "competitivePartnershipRatingOverviewLT", "competitivePartnershipRatingOverviewLTE", "competitivePartnershipRatingOverviewContains", "competitivePartnershipRatingOverviewHasPrefix", "competitivePartnershipRatingOverviewHasSuffix", "competitivePartnershipRatingOverviewIsNil", "competitivePartnershipRatingOverviewNotNil", "competitivePartnershipRatingOverviewEqualFold", "competitivePartnershipRatingOverviewContainsFold", "prepareToBid", "prepareToBidNEQ", "projectCode", "projectCodeNEQ", "projectCodeIn", "projectCodeNotIn", "projectCodeGT", "projectCodeGTE", "projectCodeLT", "projectCodeLTE", "projectCodeContains", "projectCodeHasPrefix", "projectCodeHasSuffix", "projectCodeIsNil", "projectCodeNotNil", "projectCodeEqualFold", "projectCodeContainsFold", "projectType", "projectTypeNEQ", "projectTypeIn", "projectTypeNotIn", "projectTypeGT", "projectTypeGTE", "projectTypeLT", "projectTypeLTE", "projectTypeContains", "projectTypeHasPrefix", "projectTypeHasSuffix", "projectTypeIsNil", "projectTypeNotNil", "projectTypeEqualFold", "projectTypeContainsFold", "projectDefinition", "projectDefinitionNEQ", "projectDefinitionIn", "projectDefinitionNotIn", "projectDefinitionGT", "projectDefinitionGTE", "projectDefinitionLT", "projectDefinitionLTE", "projectDefinitionContains", "projectDefinitionHasPrefix", "projectDefinitionHasSuffix", "projectDefinitionIsNil", "projectDefinitionNotNil", "projectDefinitionEqualFold", "projectDefinitionContainsFold", "estimatedProjectStartDate", "estimatedProjectStartDateNEQ", "estimatedProjectStartDateIn", "estimatedProjectStartDateNotIn", "estimatedProjectStartDateGT", "estimatedProjectStartDateGTE", "estimatedProjectStartDateLT", "estimatedProjectStartDateLTE", "estimatedProjectStartDateIsNil", "estimatedProjectStartDateNotNil", "estimatedProjectEndDate", "estimatedProjectEndDateNEQ", "estimatedProjectEndDateIn", "estimatedProjectEndDateNotIn", "estimatedProjectEndDateGT", "estimatedProjectEndDateGTE", "estimatedProjectEndDateLT", "estimatedProjectEndDateLTE", "estimatedProjectEndDateIsNil", "estimatedProjectEndDateNotNil", "remark", "remarkNEQ", "remarkIn", "remarkNotIn", "remarkGT", "remarkGTE", "remarkLT", "remarkLTE", "remarkContains", "remarkHasPrefix", "remarkHasSuffix", "remarkIsNil", "remarkNotNil", "remarkEqualFold", "remarkContainsFold", "tenderSituations", "tenderSituationsNEQ", "tenderSituationsIn", "tenderSituationsNotIn", "tenderSituationsGT", "tenderSituationsGTE", "tenderSituationsLT", "tenderSituationsLTE", "tenderSituationsContains", "tenderSituationsHasPrefix", "tenderSituationsHasSuffix", "tenderSituationsIsNil", "tenderSituationsNotNil", "tenderSituationsEqualFold", "tenderSituationsContainsFold", "ownerSituations", "ownerSituationsNEQ", "ownerSituationsIn", "ownerSituationsNotIn", "ownerSituationsGT", "ownerSituationsGTE", "ownerSituationsLT", "ownerSituationsLTE", "ownerSituationsContains", "ownerSituationsHasPrefix", "ownerSituationsHasSuffix", "ownerSituationsIsNil", "ownerSituationsNotNil", "ownerSituationsEqualFold", "ownerSituationsContainsFold", "biddingInstructions", "biddingInstructionsNEQ", "biddingInstructionsIn", "biddingInstructionsNotIn", "biddingInstructionsGT", "biddingInstructionsGTE", "biddingInstructionsLT", "biddingInstructionsLTE", "biddingInstructionsContains", "biddingInstructionsHasPrefix", "biddingInstructionsHasSuffix", "biddingInstructionsIsNil", "biddingInstructionsNotNil", "biddingInstructionsEqualFold", "biddingInstructionsContainsFold", "competitorSituations", "competitorSituationsNEQ", "competitorSituationsIn", "competitorSituationsNotIn", "competitorSituationsGT", "competitorSituationsGTE", "competitorSituationsLT", "competitorSituationsLTE", "competitorSituationsContains", "competitorSituationsHasPrefix", "competitorSituationsHasSuffix", "competitorSituationsIsNil", "competitorSituationsNotNil", "competitorSituationsEqualFold", "competitorSituationsContainsFold", "costEngineer", "costEngineerNEQ", "costEngineerIn", "costEngineerNotIn", "costEngineerGT", "costEngineerGTE", "costEngineerLT", "costEngineerLTE", "costEngineerContains", "costEngineerHasPrefix", "costEngineerHasSuffix", "costEngineerIsNil", "costEngineerNotNil", "costEngineerEqualFold", "costEngineerContainsFold", "tenderForm", "tenderFormNEQ", "tenderFormIn", "tenderFormNotIn", "tenderFormGT", "tenderFormGTE", "tenderFormLT", "tenderFormLTE", "tenderFormContains", "tenderFormHasPrefix", "tenderFormHasSuffix", "tenderFormIsNil", "tenderFormNotNil", "tenderFormEqualFold", "tenderFormContainsFold", "contractForm", "contractFormNEQ", "contractFormIn", "contractFormNotIn", "contractFormGT", "contractFormGTE", "contractFormLT", "contractFormLTE", "contractFormContains", "contractFormHasPrefix", "contractFormHasSuffix", "contractFormIsNil", "contractFormNotNil", "contractFormEqualFold", "contractFormContainsFold", "managementCompany", "managementCompanyNEQ", "managementCompanyIn", "managementCompanyNotIn", "managementCompanyGT", "managementCompanyGTE", "managementCompanyLT", "managementCompanyLTE", "managementCompanyContains", "managementCompanyHasPrefix", "managementCompanyHasSuffix", "managementCompanyIsNil", "managementCompanyNotNil", "managementCompanyEqualFold", "managementCompanyContainsFold", "tenderingAgency", "tenderingAgencyNEQ", "tenderingAgencyIn", "tenderingAgencyNotIn", "tenderingAgencyGT", "tenderingAgencyGTE", "tenderingAgencyLT", "tenderingAgencyLTE", "tenderingAgencyContains", "tenderingAgencyHasPrefix", "tenderingAgencyHasSuffix", "tenderingAgencyIsNil", "tenderingAgencyNotNil", "tenderingAgencyEqualFold", "tenderingAgencyContainsFold", "biddingDate", "biddingDateNEQ", "biddingDateIn", "biddingDateNotIn", "biddingDateGT", "biddingDateGTE", "biddingDateLT", "biddingDateLTE", "biddingDateIsNil", "biddingDateNotNil", "facadeConsultant", "facadeConsultantNEQ", "facadeConsultantIn", "facadeConsultantNotIn", "facadeConsultantGT", "facadeConsultantGTE", "facadeConsultantLT", "facadeConsultantLTE", "facadeConsultantContains", "facadeConsultantHasPrefix", "facadeConsultantHasSuffix", "facadeConsultantIsNil", "facadeConsultantNotNil", "facadeConsultantEqualFold", "facadeConsultantContainsFold", "designUnit", "designUnitNEQ", "designUnitIn", "designUnitNotIn", "designUnitGT", "designUnitGTE", "designUnitLT", "designUnitLTE", "designUnitContains", "designUnitHasPrefix", "designUnitHasSuffix", "designUnitIsNil", "designUnitNotNil", "designUnitEqualFold", "designUnitContainsFold", "consultingFirm", "consultingFirmNEQ", "consultingFirmIn", "consultingFirmNotIn", "consultingFirmGT", "consultingFirmGTE", "consultingFirmLT", "consultingFirmLTE", "consultingFirmContains", "consultingFirmHasPrefix", "consultingFirmHasSuffix", "consultingFirmIsNil", "consultingFirmNotNil", "consultingFirmEqualFold", "consultingFirmContainsFold", "keyProject", "keyProjectNEQ", "currentProgress", "currentProgressNEQ", "currentProgressIn", "currentProgressNotIn", "currentProgressGT", "currentProgressGTE", "currentProgressLT", "currentProgressLTE", "currentProgressContains", "currentProgressHasPrefix", "currentProgressHasSuffix", "currentProgressIsNil", "currentProgressNotNil", "currentProgressEqualFold", "currentProgressContainsFold", "tenderWinCompany", "tenderWinCompanyNEQ", "tenderWinCompanyIn", "tenderWinCompanyNotIn", "tenderWinCompanyGT", "tenderWinCompanyGTE", "tenderWinCompanyLT", "tenderWinCompanyLTE", "tenderWinCompanyContains", "tenderWinCompanyHasPrefix", "tenderWinCompanyHasSuffix", "tenderWinCompanyIsNil", "tenderWinCompanyNotNil", "tenderWinCompanyEqualFold", "tenderWinCompanyContainsFold", "tenderCode", "tenderCodeNEQ", "tenderCodeIn", "tenderCodeNotIn", "tenderCodeGT", "tenderCodeGTE", "tenderCodeLT", "tenderCodeLTE", "tenderCodeContains", "tenderCodeHasPrefix", "tenderCodeHasSuffix", "tenderCodeIsNil", "tenderCodeNotNil", "tenderCodeEqualFold", "tenderCodeContainsFold", "architect", "architectNEQ", "architectIn", "architectNotIn", "architectGT", "architectGTE", "architectLT", "architectLTE", "architectContains", "architectHasPrefix", "architectHasSuffix", "architectIsNil", "architectNotNil", "architectEqualFold", "architectContainsFold", "developer", "developerNEQ", "developerIn", "developerNotIn", "developerGT", "developerGTE", "developerLT", "developerLTE", "developerContains", "developerHasPrefix", "developerHasSuffix", "developerIsNil", "developerNotNil", "developerEqualFold", "developerContainsFold", "tenderClosingDate", "tenderClosingDateNEQ", "tenderClosingDateIn", "tenderClosingDateNotIn", "tenderClosingDateGT", "tenderClosingDateGTE", "tenderClosingDateLT", "tenderClosingDateLTE", "tenderClosingDateIsNil", "tenderClosingDateNotNil", "constructionArea", "constructionAreaNEQ", "constructionAreaIn", "constructionAreaNotIn", "constructionAreaGT", "constructionAreaGTE", "constructionAreaLT", "constructionAreaLTE", "constructionAreaContains", "constructionAreaHasPrefix", "constructionAreaHasSuffix", "constructionAreaIsNil", "constructionAreaNotNil", "constructionAreaEqualFold", "constructionAreaContainsFold", "tenderWinDate", "tenderWinDateNEQ", "tenderWinDateIn", "tenderWinDateNotIn", "tenderWinDateGT", "tenderWinDateGTE", "tenderWinDateLT", "tenderWinDateLTE", "tenderWinDateIsNil", "tenderWinDateNotNil", "tenderWinAmount", "tenderWinAmountNEQ", "tenderWinAmountIn", "tenderWinAmountNotIn", "tenderWinAmountGT", "tenderWinAmountGTE", "tenderWinAmountLT", "tenderWinAmountLTE", "tenderWinAmountIsNil", "tenderWinAmountNotNil", "lastTenderAmount", "lastTenderAmountNEQ", "lastTenderAmountIn", "lastTenderAmountNotIn", "lastTenderAmountGT", "lastTenderAmountGTE", "lastTenderAmountLT", "lastTenderAmountLTE", "lastTenderAmountIsNil", "lastTenderAmountNotNil", "tenderID", "tenderIDNEQ", "tenderIDIn", "tenderIDNotIn", "tenderIDGT", "tenderIDGTE", "tenderIDLT", "tenderIDLTE", "tenderIDContains", "tenderIDHasPrefix", "tenderIDHasSuffix", "tenderIDEqualFold", "tenderIDContainsFold", "provinceID", "provinceIDNEQ", "provinceIDIn", "provinceIDNotIn", "provinceIDGT", "provinceIDGTE", "provinceIDLT", "provinceIDLTE", "provinceIDContains", "provinceIDHasPrefix", "provinceIDHasSuffix", "provinceIDIsNil", "provinceIDNotNil", "provinceIDEqualFold", "provinceIDContainsFold", "cityID", "cityIDNEQ", "cityIDIn", "cityIDNotIn", "cityIDGT", "cityIDGTE", "cityIDLT", "cityIDLTE", "cityIDContains", "cityIDHasPrefix", "cityIDHasSuffix", "cityIDIsNil", "cityIDNotNil", "cityIDEqualFold", "cityIDContainsFold", "districtID", "districtIDNEQ", "districtIDIn", "districtIDNotIn", "districtIDGT", "districtIDGTE", "districtIDLT", "districtIDLTE", "districtIDContains", "districtIDHasPrefix", "districtIDHasSuffix", "districtIDIsNil", "districtIDNotNil", "districtIDEqualFold", "districtIDContainsFold", "customerID", "customerIDNEQ", "customerIDIn", "customerIDNotIn", "customerIDGT", "customerIDGTE", "customerIDLT", "customerIDLTE", "customerIDContains", "customerIDHasPrefix", "customerIDHasSuffix", "customerIDIsNil", "customerIDNotNil", "customerIDEqualFold", "customerIDContainsFold", "finderID", "finderIDNEQ", "finderIDIn", "finderIDNotIn", "finderIDGT", "finderIDGTE", "finderIDLT", "finderIDLTE", "finderIDContains", "finderIDHasPrefix", "finderIDHasSuffix", "finderIDIsNil", "finderIDNotNil", "finderIDEqualFold", "finderIDContainsFold", "createdByID", "createdByIDNEQ", "createdByIDIn", "createdByIDNotIn", "createdByIDGT", "createdByIDGTE", "createdByIDLT", "createdByIDLTE", "createdByIDContains", "createdByIDHasPrefix", "createdByIDHasSuffix", "createdByIDIsNil", "createdByIDNotNil", "createdByIDEqualFold", "createdByIDContainsFold", "approverID", "approverIDNEQ", "approverIDIn", "approverIDNotIn", "approverIDGT", "approverIDGTE", "approverIDLT", "approverIDLTE", "approverIDContains", "approverIDHasPrefix", "approverIDHasSuffix", "approverIDIsNil", "approverIDNotNil", "approverIDEqualFold", "approverIDContainsFold", "hasTender", "hasTenderWith", "hasCustomer", "hasCustomerWith", "hasFinder", "hasFinderWith", "hasCreatedBy", "hasCreatedByWith", "hasProvince", "hasProvinceWith", "hasCity", "hasCityWith", "hasDistrict", "hasDistrictWith", "hasApprover", "hasApproverWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTenderProfileWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTenderProfileWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "statusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGT = data
		case "statusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGTE = data
		case "statusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLT = data
		case "statusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLTE = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNEQ = data
		case "approvalStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusIn = data
		case "approvalStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNotIn = data
		case "approvalStatusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGT = data
		case "approvalStatusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGTE = data
		case "approvalStatusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLT = data
		case "approvalStatusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLTE = data
		case "approvalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgID = data
		case "approvalMsgIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNEQ = data
		case "approvalMsgIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDIn = data
		case "approvalMsgIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNotIn = data
		case "approvalMsgIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDGT = data
		case "approvalMsgIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDGTE = data
		case "approvalMsgIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDLT = data
		case "approvalMsgIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDLTE = data
		case "approvalMsgIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDContains = data
		case "approvalMsgIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDHasPrefix = data
		case "approvalMsgIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDHasSuffix = data
		case "approvalMsgIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDIsNil = data
		case "approvalMsgIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNotNil = data
		case "approvalMsgIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDEqualFold = data
		case "approvalMsgIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "estimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmount = data
		case "estimatedAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNEQ = data
		case "estimatedAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountIn = data
		case "estimatedAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNotIn = data
		case "estimatedAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountGT = data
		case "estimatedAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountGTE = data
		case "estimatedAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountLT = data
		case "estimatedAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountLTE = data
		case "estimatedAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountIsNil = data
		case "estimatedAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNotNil = data
		case "tenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDate = data
		case "tenderDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNEQ = data
		case "tenderDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateIn = data
		case "tenderDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNotIn = data
		case "tenderDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateGT = data
		case "tenderDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateGTE = data
		case "tenderDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateLT = data
		case "tenderDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateLTE = data
		case "tenderDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateIsNil = data
		case "tenderDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNotNil = data
		case "classify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classify"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Classify = data
		case "classifyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNEQ = data
		case "classifyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyIn = data
		case "classifyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNotIn = data
		case "classifyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyGT = data
		case "classifyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyGTE = data
		case "classifyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyLT = data
		case "classifyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyLTE = data
		case "classifyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyIsNil = data
		case "classifyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNotNil = data
		case "discoveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDate = data
		case "discoveryDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateNEQ = data
		case "discoveryDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateIn = data
		case "discoveryDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateNotIn = data
		case "discoveryDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateGT = data
		case "discoveryDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateGTE = data
		case "discoveryDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateLT = data
		case "discoveryDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateLTE = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "fullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddress = data
		case "fullAddressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNEQ = data
		case "fullAddressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressIn = data
		case "fullAddressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNotIn = data
		case "fullAddressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressGT = data
		case "fullAddressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressGTE = data
		case "fullAddressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressLT = data
		case "fullAddressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressLTE = data
		case "fullAddressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressContains = data
		case "fullAddressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressHasPrefix = data
		case "fullAddressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressHasSuffix = data
		case "fullAddressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressIsNil = data
		case "fullAddressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNotNil = data
		case "fullAddressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressEqualFold = data
		case "fullAddressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressContainsFold = data
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "contractorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNEQ = data
		case "contractorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorIn = data
		case "contractorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNotIn = data
		case "contractorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorGT = data
		case "contractorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorGTE = data
		case "contractorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorLT = data
		case "contractorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorLTE = data
		case "contractorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorContains = data
		case "contractorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorHasPrefix = data
		case "contractorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorHasSuffix = data
		case "contractorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorIsNil = data
		case "contractorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNotNil = data
		case "contractorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorEqualFold = data
		case "contractorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorContainsFold = data
		case "levelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolved"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolved = data
		case "levelInvolvedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNEQ = data
		case "levelInvolvedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedIn = data
		case "levelInvolvedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNotIn = data
		case "levelInvolvedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedGT = data
		case "levelInvolvedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedGTE = data
		case "levelInvolvedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedLT = data
		case "levelInvolvedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedLTE = data
		case "levelInvolvedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedIsNil = data
		case "levelInvolvedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNotNil = data
		case "sizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRating = data
		case "sizeAndValueRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNEQ = data
		case "sizeAndValueRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingIn = data
		case "sizeAndValueRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNotIn = data
		case "sizeAndValueRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingGT = data
		case "sizeAndValueRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingGTE = data
		case "sizeAndValueRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingLT = data
		case "sizeAndValueRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingLTE = data
		case "sizeAndValueRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingIsNil = data
		case "sizeAndValueRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNotNil = data
		case "sizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverview = data
		case "sizeAndValueRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNEQ = data
		case "sizeAndValueRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewIn = data
		case "sizeAndValueRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNotIn = data
		case "sizeAndValueRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewGT = data
		case "sizeAndValueRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewGTE = data
		case "sizeAndValueRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewLT = data
		case "sizeAndValueRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewLTE = data
		case "sizeAndValueRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewContains = data
		case "sizeAndValueRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewHasPrefix = data
		case "sizeAndValueRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewHasSuffix = data
		case "sizeAndValueRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewIsNil = data
		case "sizeAndValueRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNotNil = data
		case "sizeAndValueRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewEqualFold = data
		case "sizeAndValueRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewContainsFold = data
		case "creditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRating = data
		case "creditAndPaymentRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNEQ = data
		case "creditAndPaymentRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingIn = data
		case "creditAndPaymentRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNotIn = data
		case "creditAndPaymentRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingGT = data
		case "creditAndPaymentRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingGTE = data
		case "creditAndPaymentRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingLT = data
		case "creditAndPaymentRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingLTE = data
		case "creditAndPaymentRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingIsNil = data
		case "creditAndPaymentRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNotNil = data
		case "creditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverview = data
		case "creditAndPaymentRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNEQ = data
		case "creditAndPaymentRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewIn = data
		case "creditAndPaymentRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNotIn = data
		case "creditAndPaymentRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewGT = data
		case "creditAndPaymentRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewGTE = data
		case "creditAndPaymentRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewLT = data
		case "creditAndPaymentRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewLTE = data
		case "creditAndPaymentRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewContains = data
		case "creditAndPaymentRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewHasPrefix = data
		case "creditAndPaymentRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewHasSuffix = data
		case "creditAndPaymentRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewIsNil = data
		case "creditAndPaymentRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNotNil = data
		case "creditAndPaymentRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewEqualFold = data
		case "creditAndPaymentRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewContainsFold = data
		case "timeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRating = data
		case "timeLimitRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNEQ = data
		case "timeLimitRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingIn = data
		case "timeLimitRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNotIn = data
		case "timeLimitRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingGT = data
		case "timeLimitRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingGTE = data
		case "timeLimitRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingLT = data
		case "timeLimitRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingLTE = data
		case "timeLimitRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingIsNil = data
		case "timeLimitRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNotNil = data
		case "timeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverview = data
		case "timeLimitRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNEQ = data
		case "timeLimitRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewIn = data
		case "timeLimitRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNotIn = data
		case "timeLimitRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewGT = data
		case "timeLimitRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewGTE = data
		case "timeLimitRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewLT = data
		case "timeLimitRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewLTE = data
		case "timeLimitRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewContains = data
		case "timeLimitRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewHasPrefix = data
		case "timeLimitRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewHasSuffix = data
		case "timeLimitRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewIsNil = data
		case "timeLimitRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNotNil = data
		case "timeLimitRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewEqualFold = data
		case "timeLimitRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewContainsFold = data
		case "customerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRating = data
		case "customerRelationshipRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNEQ = data
		case "customerRelationshipRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingIn = data
		case "customerRelationshipRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNotIn = data
		case "customerRelationshipRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingGT = data
		case "customerRelationshipRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingGTE = data
		case "customerRelationshipRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingLT = data
		case "customerRelationshipRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingLTE = data
		case "customerRelationshipRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingIsNil = data
		case "customerRelationshipRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNotNil = data
		case "customerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverview = data
		case "customerRelationshipRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNEQ = data
		case "customerRelationshipRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewIn = data
		case "customerRelationshipRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNotIn = data
		case "customerRelationshipRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewGT = data
		case "customerRelationshipRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewGTE = data
		case "customerRelationshipRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewLT = data
		case "customerRelationshipRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewLTE = data
		case "customerRelationshipRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewContains = data
		case "customerRelationshipRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewHasPrefix = data
		case "customerRelationshipRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewHasSuffix = data
		case "customerRelationshipRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewIsNil = data
		case "customerRelationshipRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNotNil = data
		case "customerRelationshipRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewEqualFold = data
		case "customerRelationshipRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewContainsFold = data
		case "competitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRating = data
		case "competitivePartnershipRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNEQ = data
		case "competitivePartnershipRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingIn = data
		case "competitivePartnershipRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNotIn = data
		case "competitivePartnershipRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingGT = data
		case "competitivePartnershipRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingGTE = data
		case "competitivePartnershipRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingLT = data
		case "competitivePartnershipRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingLTE = data
		case "competitivePartnershipRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingIsNil = data
		case "competitivePartnershipRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNotNil = data
		case "competitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverview = data
		case "competitivePartnershipRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNEQ = data
		case "competitivePartnershipRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewIn = data
		case "competitivePartnershipRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNotIn = data
		case "competitivePartnershipRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewGT = data
		case "competitivePartnershipRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewGTE = data
		case "competitivePartnershipRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewLT = data
		case "competitivePartnershipRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewLTE = data
		case "competitivePartnershipRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewContains = data
		case "competitivePartnershipRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewHasPrefix = data
		case "competitivePartnershipRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewHasSuffix = data
		case "competitivePartnershipRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewIsNil = data
		case "competitivePartnershipRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNotNil = data
		case "competitivePartnershipRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewEqualFold = data
		case "competitivePartnershipRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewContainsFold = data
		case "prepareToBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBid"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBid = data
		case "prepareToBidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBidNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBidNEQ = data
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "projectCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNEQ = data
		case "projectCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeIn = data
		case "projectCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNotIn = data
		case "projectCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeGT = data
		case "projectCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeGTE = data
		case "projectCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeLT = data
		case "projectCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeLTE = data
		case "projectCodeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeContains = data
		case "projectCodeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeHasPrefix = data
		case "projectCodeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeHasSuffix = data
		case "projectCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeIsNil = data
		case "projectCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNotNil = data
		case "projectCodeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeEqualFold = data
		case "projectCodeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeContainsFold = data
		case "projectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectType = data
		case "projectTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNEQ = data
		case "projectTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeIn = data
		case "projectTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNotIn = data
		case "projectTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeGT = data
		case "projectTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeGTE = data
		case "projectTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeLT = data
		case "projectTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeLTE = data
		case "projectTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeContains = data
		case "projectTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeHasPrefix = data
		case "projectTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeHasSuffix = data
		case "projectTypeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeIsNil = data
		case "projectTypeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNotNil = data
		case "projectTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeEqualFold = data
		case "projectTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeContainsFold = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "projectDefinitionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNEQ = data
		case "projectDefinitionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionIn = data
		case "projectDefinitionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNotIn = data
		case "projectDefinitionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionGT = data
		case "projectDefinitionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionGTE = data
		case "projectDefinitionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionLT = data
		case "projectDefinitionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionLTE = data
		case "projectDefinitionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionContains = data
		case "projectDefinitionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionHasPrefix = data
		case "projectDefinitionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionHasSuffix = data
		case "projectDefinitionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionIsNil = data
		case "projectDefinitionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNotNil = data
		case "projectDefinitionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionEqualFold = data
		case "projectDefinitionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionContainsFold = data
		case "estimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDate = data
		case "estimatedProjectStartDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNEQ = data
		case "estimatedProjectStartDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateIn = data
		case "estimatedProjectStartDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNotIn = data
		case "estimatedProjectStartDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateGT = data
		case "estimatedProjectStartDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateGTE = data
		case "estimatedProjectStartDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateLT = data
		case "estimatedProjectStartDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateLTE = data
		case "estimatedProjectStartDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateIsNil = data
		case "estimatedProjectStartDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNotNil = data
		case "estimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDate = data
		case "estimatedProjectEndDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNEQ = data
		case "estimatedProjectEndDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateIn = data
		case "estimatedProjectEndDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNotIn = data
		case "estimatedProjectEndDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateGT = data
		case "estimatedProjectEndDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateGTE = data
		case "estimatedProjectEndDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateLT = data
		case "estimatedProjectEndDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateLTE = data
		case "estimatedProjectEndDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateIsNil = data
		case "estimatedProjectEndDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNotNil = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		case "remarkNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNEQ = data
		case "remarkIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkIn = data
		case "remarkNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNotIn = data
		case "remarkGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkGT = data
		case "remarkGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkGTE = data
		case "remarkLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkLT = data
		case "remarkLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkLTE = data
		case "remarkContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkContains = data
		case "remarkHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkHasPrefix = data
		case "remarkHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkHasSuffix = data
		case "remarkIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkIsNil = data
		case "remarkNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNotNil = data
		case "remarkEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkEqualFold = data
		case "remarkContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkContainsFold = data
		case "tenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituations = data
		case "tenderSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNEQ = data
		case "tenderSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsIn = data
		case "tenderSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNotIn = data
		case "tenderSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsGT = data
		case "tenderSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsGTE = data
		case "tenderSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsLT = data
		case "tenderSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsLTE = data
		case "tenderSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsContains = data
		case "tenderSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsHasPrefix = data
		case "tenderSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsHasSuffix = data
		case "tenderSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsIsNil = data
		case "tenderSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNotNil = data
		case "tenderSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsEqualFold = data
		case "tenderSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsContainsFold = data
		case "ownerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituations = data
		case "ownerSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNEQ = data
		case "ownerSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsIn = data
		case "ownerSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNotIn = data
		case "ownerSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsGT = data
		case "ownerSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsGTE = data
		case "ownerSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsLT = data
		case "ownerSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsLTE = data
		case "ownerSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsContains = data
		case "ownerSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsHasPrefix = data
		case "ownerSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsHasSuffix = data
		case "ownerSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsIsNil = data
		case "ownerSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNotNil = data
		case "ownerSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsEqualFold = data
		case "ownerSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsContainsFold = data
		case "biddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructions"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructions = data
		case "biddingInstructionsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNEQ = data
		case "biddingInstructionsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsIn = data
		case "biddingInstructionsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNotIn = data
		case "biddingInstructionsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsGT = data
		case "biddingInstructionsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsGTE = data
		case "biddingInstructionsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsLT = data
		case "biddingInstructionsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsLTE = data
		case "biddingInstructionsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsContains = data
		case "biddingInstructionsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsHasPrefix = data
		case "biddingInstructionsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsHasSuffix = data
		case "biddingInstructionsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsIsNil = data
		case "biddingInstructionsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNotNil = data
		case "biddingInstructionsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsEqualFold = data
		case "biddingInstructionsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsContainsFold = data
		case "competitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituations = data
		case "competitorSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNEQ = data
		case "competitorSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsIn = data
		case "competitorSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNotIn = data
		case "competitorSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsGT = data
		case "competitorSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsGTE = data
		case "competitorSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsLT = data
		case "competitorSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsLTE = data
		case "competitorSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsContains = data
		case "competitorSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsHasPrefix = data
		case "competitorSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsHasSuffix = data
		case "competitorSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsIsNil = data
		case "competitorSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNotNil = data
		case "competitorSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsEqualFold = data
		case "competitorSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsContainsFold = data
		case "costEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineer = data
		case "costEngineerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNEQ = data
		case "costEngineerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerIn = data
		case "costEngineerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNotIn = data
		case "costEngineerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerGT = data
		case "costEngineerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerGTE = data
		case "costEngineerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerLT = data
		case "costEngineerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerLTE = data
		case "costEngineerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerContains = data
		case "costEngineerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerHasPrefix = data
		case "costEngineerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerHasSuffix = data
		case "costEngineerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerIsNil = data
		case "costEngineerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNotNil = data
		case "costEngineerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerEqualFold = data
		case "costEngineerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerContainsFold = data
		case "tenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderForm = data
		case "tenderFormNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNEQ = data
		case "tenderFormIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormIn = data
		case "tenderFormNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNotIn = data
		case "tenderFormGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormGT = data
		case "tenderFormGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormGTE = data
		case "tenderFormLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormLT = data
		case "tenderFormLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormLTE = data
		case "tenderFormContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormContains = data
		case "tenderFormHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormHasPrefix = data
		case "tenderFormHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormHasSuffix = data
		case "tenderFormIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormIsNil = data
		case "tenderFormNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNotNil = data
		case "tenderFormEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormEqualFold = data
		case "tenderFormContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormContainsFold = data
		case "contractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractForm = data
		case "contractFormNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNEQ = data
		case "contractFormIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormIn = data
		case "contractFormNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNotIn = data
		case "contractFormGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormGT = data
		case "contractFormGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormGTE = data
		case "contractFormLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormLT = data
		case "contractFormLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormLTE = data
		case "contractFormContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormContains = data
		case "contractFormHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormHasPrefix = data
		case "contractFormHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormHasSuffix = data
		case "contractFormIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormIsNil = data
		case "contractFormNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNotNil = data
		case "contractFormEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormEqualFold = data
		case "contractFormContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormContainsFold = data
		case "managementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompany = data
		case "managementCompanyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNEQ = data
		case "managementCompanyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyIn = data
		case "managementCompanyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNotIn = data
		case "managementCompanyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyGT = data
		case "managementCompanyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyGTE = data
		case "managementCompanyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyLT = data
		case "managementCompanyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyLTE = data
		case "managementCompanyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyContains = data
		case "managementCompanyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyHasPrefix = data
		case "managementCompanyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyHasSuffix = data
		case "managementCompanyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyIsNil = data
		case "managementCompanyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNotNil = data
		case "managementCompanyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyEqualFold = data
		case "managementCompanyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyContainsFold = data
		case "tenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgency = data
		case "tenderingAgencyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNEQ = data
		case "tenderingAgencyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyIn = data
		case "tenderingAgencyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNotIn = data
		case "tenderingAgencyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyGT = data
		case "tenderingAgencyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyGTE = data
		case "tenderingAgencyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyLT = data
		case "tenderingAgencyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyLTE = data
		case "tenderingAgencyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyContains = data
		case "tenderingAgencyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyHasPrefix = data
		case "tenderingAgencyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyHasSuffix = data
		case "tenderingAgencyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyIsNil = data
		case "tenderingAgencyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNotNil = data
		case "tenderingAgencyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyEqualFold = data
		case "tenderingAgencyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyContainsFold = data
		case "biddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDate = data
		case "biddingDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNEQ = data
		case "biddingDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateIn = data
		case "biddingDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNotIn = data
		case "biddingDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateGT = data
		case "biddingDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateGTE = data
		case "biddingDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateLT = data
		case "biddingDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateLTE = data
		case "biddingDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateIsNil = data
		case "biddingDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNotNil = data
		case "facadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultant = data
		case "facadeConsultantNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNEQ = data
		case "facadeConsultantIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantIn = data
		case "facadeConsultantNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNotIn = data
		case "facadeConsultantGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantGT = data
		case "facadeConsultantGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantGTE = data
		case "facadeConsultantLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantLT = data
		case "facadeConsultantLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantLTE = data
		case "facadeConsultantContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantContains = data
		case "facadeConsultantHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantHasPrefix = data
		case "facadeConsultantHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantHasSuffix = data
		case "facadeConsultantIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantIsNil = data
		case "facadeConsultantNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNotNil = data
		case "facadeConsultantEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantEqualFold = data
		case "facadeConsultantContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantContainsFold = data
		case "designUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnit = data
		case "designUnitNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNEQ = data
		case "designUnitIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitIn = data
		case "designUnitNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNotIn = data
		case "designUnitGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitGT = data
		case "designUnitGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitGTE = data
		case "designUnitLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitLT = data
		case "designUnitLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitLTE = data
		case "designUnitContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitContains = data
		case "designUnitHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitHasPrefix = data
		case "designUnitHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitHasSuffix = data
		case "designUnitIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitIsNil = data
		case "designUnitNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNotNil = data
		case "designUnitEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitEqualFold = data
		case "designUnitContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitContainsFold = data
		case "consultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirm = data
		case "consultingFirmNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNEQ = data
		case "consultingFirmIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmIn = data
		case "consultingFirmNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNotIn = data
		case "consultingFirmGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmGT = data
		case "consultingFirmGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmGTE = data
		case "consultingFirmLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmLT = data
		case "consultingFirmLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmLTE = data
		case "consultingFirmContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmContains = data
		case "consultingFirmHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmHasPrefix = data
		case "consultingFirmHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmHasSuffix = data
		case "consultingFirmIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmIsNil = data
		case "consultingFirmNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNotNil = data
		case "consultingFirmEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmEqualFold = data
		case "consultingFirmContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmContainsFold = data
		case "keyProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProject = data
		case "keyProjectNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProjectNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProjectNEQ = data
		case "currentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgress = data
		case "currentProgressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNEQ = data
		case "currentProgressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressIn = data
		case "currentProgressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNotIn = data
		case "currentProgressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressGT = data
		case "currentProgressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressGTE = data
		case "currentProgressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressLT = data
		case "currentProgressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressLTE = data
		case "currentProgressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressContains = data
		case "currentProgressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressHasPrefix = data
		case "currentProgressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressHasSuffix = data
		case "currentProgressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressIsNil = data
		case "currentProgressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNotNil = data
		case "currentProgressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressEqualFold = data
		case "currentProgressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressContainsFold = data
		case "tenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompany = data
		case "tenderWinCompanyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNEQ = data
		case "tenderWinCompanyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyIn = data
		case "tenderWinCompanyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNotIn = data
		case "tenderWinCompanyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyGT = data
		case "tenderWinCompanyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyGTE = data
		case "tenderWinCompanyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyLT = data
		case "tenderWinCompanyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyLTE = data
		case "tenderWinCompanyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyContains = data
		case "tenderWinCompanyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyHasPrefix = data
		case "tenderWinCompanyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyHasSuffix = data
		case "tenderWinCompanyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyIsNil = data
		case "tenderWinCompanyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNotNil = data
		case "tenderWinCompanyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyEqualFold = data
		case "tenderWinCompanyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyContainsFold = data
		case "tenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCode = data
		case "tenderCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNEQ = data
		case "tenderCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeIn = data
		case "tenderCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNotIn = data
		case "tenderCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeGT = data
		case "tenderCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeGTE = data
		case "tenderCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeLT = data
		case "tenderCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeLTE = data
		case "tenderCodeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeContains = data
		case "tenderCodeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeHasPrefix = data
		case "tenderCodeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeHasSuffix = data
		case "tenderCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeIsNil = data
		case "tenderCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNotNil = data
		case "tenderCodeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeEqualFold = data
		case "tenderCodeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeContainsFold = data
		case "architect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architect"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Architect = data
		case "architectNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNEQ = data
		case "architectIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectIn = data
		case "architectNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNotIn = data
		case "architectGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectGT = data
		case "architectGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectGTE = data
		case "architectLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectLT = data
		case "architectLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectLTE = data
		case "architectContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectContains = data
		case "architectHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectHasPrefix = data
		case "architectHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectHasSuffix = data
		case "architectIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectIsNil = data
		case "architectNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNotNil = data
		case "architectEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectEqualFold = data
		case "architectContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectContainsFold = data
		case "developer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Developer = data
		case "developerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNEQ = data
		case "developerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperIn = data
		case "developerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNotIn = data
		case "developerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperGT = data
		case "developerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperGTE = data
		case "developerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperLT = data
		case "developerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperLTE = data
		case "developerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperContains = data
		case "developerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperHasPrefix = data
		case "developerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperHasSuffix = data
		case "developerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperIsNil = data
		case "developerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNotNil = data
		case "developerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperEqualFold = data
		case "developerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperContainsFold = data
		case "tenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDate = data
		case "tenderClosingDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNEQ = data
		case "tenderClosingDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateIn = data
		case "tenderClosingDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNotIn = data
		case "tenderClosingDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateGT = data
		case "tenderClosingDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateGTE = data
		case "tenderClosingDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateLT = data
		case "tenderClosingDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateLTE = data
		case "tenderClosingDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateIsNil = data
		case "tenderClosingDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNotNil = data
		case "constructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionArea"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionArea = data
		case "constructionAreaNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNEQ = data
		case "constructionAreaIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaIn = data
		case "constructionAreaNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNotIn = data
		case "constructionAreaGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaGT = data
		case "constructionAreaGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaGTE = data
		case "constructionAreaLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaLT = data
		case "constructionAreaLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaLTE = data
		case "constructionAreaContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaContains = data
		case "constructionAreaHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaHasPrefix = data
		case "constructionAreaHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaHasSuffix = data
		case "constructionAreaIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaIsNil = data
		case "constructionAreaNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNotNil = data
		case "constructionAreaEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaEqualFold = data
		case "constructionAreaContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaContainsFold = data
		case "tenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDate = data
		case "tenderWinDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNEQ = data
		case "tenderWinDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateIn = data
		case "tenderWinDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNotIn = data
		case "tenderWinDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateGT = data
		case "tenderWinDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateGTE = data
		case "tenderWinDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateLT = data
		case "tenderWinDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateLTE = data
		case "tenderWinDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateIsNil = data
		case "tenderWinDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNotNil = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "tenderWinAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNEQ = data
		case "tenderWinAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountIn = data
		case "tenderWinAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNotIn = data
		case "tenderWinAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountGT = data
		case "tenderWinAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountGTE = data
		case "tenderWinAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountLT = data
		case "tenderWinAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountLTE = data
		case "tenderWinAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountIsNil = data
		case "tenderWinAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNotNil = data
		case "lastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmount = data
		case "lastTenderAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNEQ = data
		case "lastTenderAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountIn = data
		case "lastTenderAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNotIn = data
		case "lastTenderAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountGT = data
		case "lastTenderAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountGTE = data
		case "lastTenderAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountLT = data
		case "lastTenderAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountLTE = data
		case "lastTenderAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountIsNil = data
		case "lastTenderAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNotNil = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "tenderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNEQ = data
		case "tenderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDIn = data
		case "tenderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNotIn = data
		case "tenderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGT = data
		case "tenderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGTE = data
		case "tenderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLT = data
		case "tenderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLTE = data
		case "tenderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContains = data
		case "tenderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasPrefix = data
		case "tenderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasSuffix = data
		case "tenderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDEqualFold = data
		case "tenderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContainsFold = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "provinceIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNEQ = data
		case "provinceIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIn = data
		case "provinceIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotIn = data
		case "provinceIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGT = data
		case "provinceIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGTE = data
		case "provinceIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLT = data
		case "provinceIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLTE = data
		case "provinceIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContains = data
		case "provinceIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasPrefix = data
		case "provinceIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasSuffix = data
		case "provinceIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIsNil = data
		case "provinceIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotNil = data
		case "provinceIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDEqualFold = data
		case "provinceIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContainsFold = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "cityIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNEQ = data
		case "cityIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIn = data
		case "cityIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotIn = data
		case "cityIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGT = data
		case "cityIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGTE = data
		case "cityIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLT = data
		case "cityIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLTE = data
		case "cityIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContains = data
		case "cityIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasPrefix = data
		case "cityIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasSuffix = data
		case "cityIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIsNil = data
		case "cityIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotNil = data
		case "cityIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDEqualFold = data
		case "cityIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContainsFold = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "districtIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNEQ = data
		case "districtIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDIn = data
		case "districtIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNotIn = data
		case "districtIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGT = data
		case "districtIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGTE = data
		case "districtIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLT = data
		case "districtIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLTE = data
		case "districtIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContains = data
		case "districtIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasPrefix = data
		case "districtIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasSuffix = data
		case "districtIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDIsNil = data
		case "districtIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNotNil = data
		case "districtIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDEqualFold = data
		case "districtIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContainsFold = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "customerIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNEQ = data
		case "customerIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDIn = data
		case "customerIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNotIn = data
		case "customerIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGT = data
		case "customerIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGTE = data
		case "customerIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLT = data
		case "customerIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLTE = data
		case "customerIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContains = data
		case "customerIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasPrefix = data
		case "customerIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasSuffix = data
		case "customerIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDIsNil = data
		case "customerIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNotNil = data
		case "customerIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDEqualFold = data
		case "customerIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContainsFold = data
		case "finderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderID = data
		case "finderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNEQ = data
		case "finderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDIn = data
		case "finderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNotIn = data
		case "finderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDGT = data
		case "finderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDGTE = data
		case "finderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDLT = data
		case "finderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDLTE = data
		case "finderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDContains = data
		case "finderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDHasPrefix = data
		case "finderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDHasSuffix = data
		case "finderIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDIsNil = data
		case "finderIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNotNil = data
		case "finderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDEqualFold = data
		case "finderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDContainsFold = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "createdByIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNEQ = data
		case "createdByIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIn = data
		case "createdByIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotIn = data
		case "createdByIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGT = data
		case "createdByIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGTE = data
		case "createdByIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLT = data
		case "createdByIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLTE = data
		case "createdByIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContains = data
		case "createdByIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasPrefix = data
		case "createdByIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasSuffix = data
		case "createdByIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIsNil = data
		case "createdByIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotNil = data
		case "createdByIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDEqualFold = data
		case "createdByIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContainsFold = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "approverIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNEQ = data
		case "approverIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIn = data
		case "approverIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotIn = data
		case "approverIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGT = data
		case "approverIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGTE = data
		case "approverIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLT = data
		case "approverIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLTE = data
		case "approverIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContains = data
		case "approverIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasPrefix = data
		case "approverIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasSuffix = data
		case "approverIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIsNil = data
		case "approverIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotNil = data
		case "approverIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDEqualFold = data
		case "approverIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContainsFold = data
		case "hasTender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTender"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTender = data
		case "hasTenderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenderWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenderWith = data
		case "hasCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomer = data
		case "hasCustomerWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomerWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomerWith = data
		case "hasFinder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinder"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinder = data
		case "hasFinderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinderWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinderWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasProvince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvince"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvince = data
		case "hasProvinceWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinceWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinceWith = data
		case "hasCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCity"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCity = data
		case "hasCityWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCityWith"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCityWith = data
		case "hasDistrict":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrict"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrict = data
		case "hasDistrictWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrictWith"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrictWith = data
		case "hasApprover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprover"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprover = data
		case "hasApproverWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApproverWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApproverWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenderWhereInput(ctx context.Context, obj interface{}) (ent.TenderWhereInput, error) {
	var it ent.TenderWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "code", "codeNEQ", "codeIn", "codeNotIn", "codeGT", "codeGTE", "codeLT", "codeLTE", "codeContains", "codeHasPrefix", "codeHasSuffix", "codeEqualFold", "codeContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "statusGT", "statusGTE", "statusLT", "statusLTE", "approvalStatus", "approvalStatusNEQ", "approvalStatusIn", "approvalStatusNotIn", "approvalStatusGT", "approvalStatusGTE", "approvalStatusLT", "approvalStatusLTE", "approvalMsgID", "approvalMsgIDNEQ", "approvalMsgIDIn", "approvalMsgIDNotIn", "approvalMsgIDGT", "approvalMsgIDGTE", "approvalMsgIDLT", "approvalMsgIDLTE", "approvalMsgIDContains", "approvalMsgIDHasPrefix", "approvalMsgIDHasSuffix", "approvalMsgIDIsNil", "approvalMsgIDNotNil", "approvalMsgIDEqualFold", "approvalMsgIDContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameEqualFold", "nameContainsFold", "estimatedAmount", "estimatedAmountNEQ", "estimatedAmountIn", "estimatedAmountNotIn", "estimatedAmountGT", "estimatedAmountGTE", "estimatedAmountLT", "estimatedAmountLTE", "estimatedAmountIsNil", "estimatedAmountNotNil", "tenderDate", "tenderDateNEQ", "tenderDateIn", "tenderDateNotIn", "tenderDateGT", "tenderDateGTE", "tenderDateLT", "tenderDateLTE", "tenderDateIsNil", "tenderDateNotNil", "classify", "classifyNEQ", "classifyIn", "classifyNotIn", "classifyGT", "classifyGTE", "classifyLT", "classifyLTE", "classifyIsNil", "classifyNotNil", "discoveryDate", "discoveryDateNEQ", "discoveryDateIn", "discoveryDateNotIn", "discoveryDateGT", "discoveryDateGTE", "discoveryDateLT", "discoveryDateLTE", "address", "addressNEQ", "addressIn", "addressNotIn", "addressGT", "addressGTE", "addressLT", "addressLTE", "addressContains", "addressHasPrefix", "addressHasSuffix", "addressIsNil", "addressNotNil", "addressEqualFold", "addressContainsFold", "fullAddress", "fullAddressNEQ", "fullAddressIn", "fullAddressNotIn", "fullAddressGT", "fullAddressGTE", "fullAddressLT", "fullAddressLTE", "fullAddressContains", "fullAddressHasPrefix", "fullAddressHasSuffix", "fullAddressIsNil", "fullAddressNotNil", "fullAddressEqualFold", "fullAddressContainsFold", "contractor", "contractorNEQ", "contractorIn", "contractorNotIn", "contractorGT", "contractorGTE", "contractorLT", "contractorLTE", "contractorContains", "contractorHasPrefix", "contractorHasSuffix", "contractorIsNil", "contractorNotNil", "contractorEqualFold", "contractorContainsFold", "levelInvolved", "levelInvolvedNEQ", "levelInvolvedIn", "levelInvolvedNotIn", "levelInvolvedGT", "levelInvolvedGTE", "levelInvolvedLT", "levelInvolvedLTE", "levelInvolvedIsNil", "levelInvolvedNotNil", "sizeAndValueRating", "sizeAndValueRatingNEQ", "sizeAndValueRatingIn", "sizeAndValueRatingNotIn", "sizeAndValueRatingGT", "sizeAndValueRatingGTE", "sizeAndValueRatingLT", "sizeAndValueRatingLTE", "sizeAndValueRatingIsNil", "sizeAndValueRatingNotNil", "sizeAndValueRatingOverview", "sizeAndValueRatingOverviewNEQ", "sizeAndValueRatingOverviewIn", "sizeAndValueRatingOverviewNotIn", "sizeAndValueRatingOverviewGT", "sizeAndValueRatingOverviewGTE", "sizeAndValueRatingOverviewLT", "sizeAndValueRatingOverviewLTE", "sizeAndValueRatingOverviewContains", "sizeAndValueRatingOverviewHasPrefix", "sizeAndValueRatingOverviewHasSuffix", "sizeAndValueRatingOverviewIsNil", "sizeAndValueRatingOverviewNotNil", "sizeAndValueRatingOverviewEqualFold", "sizeAndValueRatingOverviewContainsFold", "creditAndPaymentRating", "creditAndPaymentRatingNEQ", "creditAndPaymentRatingIn", "creditAndPaymentRatingNotIn", "creditAndPaymentRatingGT", "creditAndPaymentRatingGTE", "creditAndPaymentRatingLT", "creditAndPaymentRatingLTE", "creditAndPaymentRatingIsNil", "creditAndPaymentRatingNotNil", "creditAndPaymentRatingOverview", "creditAndPaymentRatingOverviewNEQ", "creditAndPaymentRatingOverviewIn", "creditAndPaymentRatingOverviewNotIn", "creditAndPaymentRatingOverviewGT", "creditAndPaymentRatingOverviewGTE", "creditAndPaymentRatingOverviewLT", "creditAndPaymentRatingOverviewLTE", "creditAndPaymentRatingOverviewContains", "creditAndPaymentRatingOverviewHasPrefix", "creditAndPaymentRatingOverviewHasSuffix", "creditAndPaymentRatingOverviewIsNil", "creditAndPaymentRatingOverviewNotNil", "creditAndPaymentRatingOverviewEqualFold", "creditAndPaymentRatingOverviewContainsFold", "timeLimitRating", "timeLimitRatingNEQ", "timeLimitRatingIn", "timeLimitRatingNotIn", "timeLimitRatingGT", "timeLimitRatingGTE", "timeLimitRatingLT", "timeLimitRatingLTE", "timeLimitRatingIsNil", "timeLimitRatingNotNil", "timeLimitRatingOverview", "timeLimitRatingOverviewNEQ", "timeLimitRatingOverviewIn", "timeLimitRatingOverviewNotIn", "timeLimitRatingOverviewGT", "timeLimitRatingOverviewGTE", "timeLimitRatingOverviewLT", "timeLimitRatingOverviewLTE", "timeLimitRatingOverviewContains", "timeLimitRatingOverviewHasPrefix", "timeLimitRatingOverviewHasSuffix", "timeLimitRatingOverviewIsNil", "timeLimitRatingOverviewNotNil", "timeLimitRatingOverviewEqualFold", "timeLimitRatingOverviewContainsFold", "customerRelationshipRating", "customerRelationshipRatingNEQ", "customerRelationshipRatingIn", "customerRelationshipRatingNotIn", "customerRelationshipRatingGT", "customerRelationshipRatingGTE", "customerRelationshipRatingLT", "customerRelationshipRatingLTE", "customerRelationshipRatingIsNil", "customerRelationshipRatingNotNil", "customerRelationshipRatingOverview", "customerRelationshipRatingOverviewNEQ", "customerRelationshipRatingOverviewIn", "customerRelationshipRatingOverviewNotIn", "customerRelationshipRatingOverviewGT", "customerRelationshipRatingOverviewGTE", "customerRelationshipRatingOverviewLT", "customerRelationshipRatingOverviewLTE", "customerRelationshipRatingOverviewContains", "customerRelationshipRatingOverviewHasPrefix", "customerRelationshipRatingOverviewHasSuffix", "customerRelationshipRatingOverviewIsNil", "customerRelationshipRatingOverviewNotNil", "customerRelationshipRatingOverviewEqualFold", "customerRelationshipRatingOverviewContainsFold", "competitivePartnershipRating", "competitivePartnershipRatingNEQ", "competitivePartnershipRatingIn", "competitivePartnershipRatingNotIn", "competitivePartnershipRatingGT", "competitivePartnershipRatingGTE", "competitivePartnershipRatingLT", "competitivePartnershipRatingLTE", "competitivePartnershipRatingIsNil", "competitivePartnershipRatingNotNil", "competitivePartnershipRatingOverview", "competitivePartnershipRatingOverviewNEQ", "competitivePartnershipRatingOverviewIn", "competitivePartnershipRatingOverviewNotIn", "competitivePartnershipRatingOverviewGT", "competitivePartnershipRatingOverviewGTE", "competitivePartnershipRatingOverviewLT", "competitivePartnershipRatingOverviewLTE", "competitivePartnershipRatingOverviewContains", "competitivePartnershipRatingOverviewHasPrefix", "competitivePartnershipRatingOverviewHasSuffix", "competitivePartnershipRatingOverviewIsNil", "competitivePartnershipRatingOverviewNotNil", "competitivePartnershipRatingOverviewEqualFold", "competitivePartnershipRatingOverviewContainsFold", "prepareToBid", "prepareToBidNEQ", "projectCode", "projectCodeNEQ", "projectCodeIn", "projectCodeNotIn", "projectCodeGT", "projectCodeGTE", "projectCodeLT", "projectCodeLTE", "projectCodeContains", "projectCodeHasPrefix", "projectCodeHasSuffix", "projectCodeIsNil", "projectCodeNotNil", "projectCodeEqualFold", "projectCodeContainsFold", "projectType", "projectTypeNEQ", "projectTypeIn", "projectTypeNotIn", "projectTypeGT", "projectTypeGTE", "projectTypeLT", "projectTypeLTE", "projectTypeContains", "projectTypeHasPrefix", "projectTypeHasSuffix", "projectTypeIsNil", "projectTypeNotNil", "projectTypeEqualFold", "projectTypeContainsFold", "projectDefinition", "projectDefinitionNEQ", "projectDefinitionIn", "projectDefinitionNotIn", "projectDefinitionGT", "projectDefinitionGTE", "projectDefinitionLT", "projectDefinitionLTE", "projectDefinitionContains", "projectDefinitionHasPrefix", "projectDefinitionHasSuffix", "projectDefinitionIsNil", "projectDefinitionNotNil", "projectDefinitionEqualFold", "projectDefinitionContainsFold", "estimatedProjectStartDate", "estimatedProjectStartDateNEQ", "estimatedProjectStartDateIn", "estimatedProjectStartDateNotIn", "estimatedProjectStartDateGT", "estimatedProjectStartDateGTE", "estimatedProjectStartDateLT", "estimatedProjectStartDateLTE", "estimatedProjectStartDateIsNil", "estimatedProjectStartDateNotNil", "estimatedProjectEndDate", "estimatedProjectEndDateNEQ", "estimatedProjectEndDateIn", "estimatedProjectEndDateNotIn", "estimatedProjectEndDateGT", "estimatedProjectEndDateGTE", "estimatedProjectEndDateLT", "estimatedProjectEndDateLTE", "estimatedProjectEndDateIsNil", "estimatedProjectEndDateNotNil", "remark", "remarkNEQ", "remarkIn", "remarkNotIn", "remarkGT", "remarkGTE", "remarkLT", "remarkLTE", "remarkContains", "remarkHasPrefix", "remarkHasSuffix", "remarkIsNil", "remarkNotNil", "remarkEqualFold", "remarkContainsFold", "tenderSituations", "tenderSituationsNEQ", "tenderSituationsIn", "tenderSituationsNotIn", "tenderSituationsGT", "tenderSituationsGTE", "tenderSituationsLT", "tenderSituationsLTE", "tenderSituationsContains", "tenderSituationsHasPrefix", "tenderSituationsHasSuffix", "tenderSituationsIsNil", "tenderSituationsNotNil", "tenderSituationsEqualFold", "tenderSituationsContainsFold", "ownerSituations", "ownerSituationsNEQ", "ownerSituationsIn", "ownerSituationsNotIn", "ownerSituationsGT", "ownerSituationsGTE", "ownerSituationsLT", "ownerSituationsLTE", "ownerSituationsContains", "ownerSituationsHasPrefix", "ownerSituationsHasSuffix", "ownerSituationsIsNil", "ownerSituationsNotNil", "ownerSituationsEqualFold", "ownerSituationsContainsFold", "biddingInstructions", "biddingInstructionsNEQ", "biddingInstructionsIn", "biddingInstructionsNotIn", "biddingInstructionsGT", "biddingInstructionsGTE", "biddingInstructionsLT", "biddingInstructionsLTE", "biddingInstructionsContains", "biddingInstructionsHasPrefix", "biddingInstructionsHasSuffix", "biddingInstructionsIsNil", "biddingInstructionsNotNil", "biddingInstructionsEqualFold", "biddingInstructionsContainsFold", "competitorSituations", "competitorSituationsNEQ", "competitorSituationsIn", "competitorSituationsNotIn", "competitorSituationsGT", "competitorSituationsGTE", "competitorSituationsLT", "competitorSituationsLTE", "competitorSituationsContains", "competitorSituationsHasPrefix", "competitorSituationsHasSuffix", "competitorSituationsIsNil", "competitorSituationsNotNil", "competitorSituationsEqualFold", "competitorSituationsContainsFold", "costEngineer", "costEngineerNEQ", "costEngineerIn", "costEngineerNotIn", "costEngineerGT", "costEngineerGTE", "costEngineerLT", "costEngineerLTE", "costEngineerContains", "costEngineerHasPrefix", "costEngineerHasSuffix", "costEngineerIsNil", "costEngineerNotNil", "costEngineerEqualFold", "costEngineerContainsFold", "tenderForm", "tenderFormNEQ", "tenderFormIn", "tenderFormNotIn", "tenderFormGT", "tenderFormGTE", "tenderFormLT", "tenderFormLTE", "tenderFormContains", "tenderFormHasPrefix", "tenderFormHasSuffix", "tenderFormIsNil", "tenderFormNotNil", "tenderFormEqualFold", "tenderFormContainsFold", "contractForm", "contractFormNEQ", "contractFormIn", "contractFormNotIn", "contractFormGT", "contractFormGTE", "contractFormLT", "contractFormLTE", "contractFormContains", "contractFormHasPrefix", "contractFormHasSuffix", "contractFormIsNil", "contractFormNotNil", "contractFormEqualFold", "contractFormContainsFold", "managementCompany", "managementCompanyNEQ", "managementCompanyIn", "managementCompanyNotIn", "managementCompanyGT", "managementCompanyGTE", "managementCompanyLT", "managementCompanyLTE", "managementCompanyContains", "managementCompanyHasPrefix", "managementCompanyHasSuffix", "managementCompanyIsNil", "managementCompanyNotNil", "managementCompanyEqualFold", "managementCompanyContainsFold", "tenderingAgency", "tenderingAgencyNEQ", "tenderingAgencyIn", "tenderingAgencyNotIn", "tenderingAgencyGT", "tenderingAgencyGTE", "tenderingAgencyLT", "tenderingAgencyLTE", "tenderingAgencyContains", "tenderingAgencyHasPrefix", "tenderingAgencyHasSuffix", "tenderingAgencyIsNil", "tenderingAgencyNotNil", "tenderingAgencyEqualFold", "tenderingAgencyContainsFold", "biddingDate", "biddingDateNEQ", "biddingDateIn", "biddingDateNotIn", "biddingDateGT", "biddingDateGTE", "biddingDateLT", "biddingDateLTE", "biddingDateIsNil", "biddingDateNotNil", "facadeConsultant", "facadeConsultantNEQ", "facadeConsultantIn", "facadeConsultantNotIn", "facadeConsultantGT", "facadeConsultantGTE", "facadeConsultantLT", "facadeConsultantLTE", "facadeConsultantContains", "facadeConsultantHasPrefix", "facadeConsultantHasSuffix", "facadeConsultantIsNil", "facadeConsultantNotNil", "facadeConsultantEqualFold", "facadeConsultantContainsFold", "designUnit", "designUnitNEQ", "designUnitIn", "designUnitNotIn", "designUnitGT", "designUnitGTE", "designUnitLT", "designUnitLTE", "designUnitContains", "designUnitHasPrefix", "designUnitHasSuffix", "designUnitIsNil", "designUnitNotNil", "designUnitEqualFold", "designUnitContainsFold", "consultingFirm", "consultingFirmNEQ", "consultingFirmIn", "consultingFirmNotIn", "consultingFirmGT", "consultingFirmGTE", "consultingFirmLT", "consultingFirmLTE", "consultingFirmContains", "consultingFirmHasPrefix", "consultingFirmHasSuffix", "consultingFirmIsNil", "consultingFirmNotNil", "consultingFirmEqualFold", "consultingFirmContainsFold", "keyProject", "keyProjectNEQ", "currentProgress", "currentProgressNEQ", "currentProgressIn", "currentProgressNotIn", "currentProgressGT", "currentProgressGTE", "currentProgressLT", "currentProgressLTE", "currentProgressContains", "currentProgressHasPrefix", "currentProgressHasSuffix", "currentProgressIsNil", "currentProgressNotNil", "currentProgressEqualFold", "currentProgressContainsFold", "tenderWinCompany", "tenderWinCompanyNEQ", "tenderWinCompanyIn", "tenderWinCompanyNotIn", "tenderWinCompanyGT", "tenderWinCompanyGTE", "tenderWinCompanyLT", "tenderWinCompanyLTE", "tenderWinCompanyContains", "tenderWinCompanyHasPrefix", "tenderWinCompanyHasSuffix", "tenderWinCompanyIsNil", "tenderWinCompanyNotNil", "tenderWinCompanyEqualFold", "tenderWinCompanyContainsFold", "tenderCode", "tenderCodeNEQ", "tenderCodeIn", "tenderCodeNotIn", "tenderCodeGT", "tenderCodeGTE", "tenderCodeLT", "tenderCodeLTE", "tenderCodeContains", "tenderCodeHasPrefix", "tenderCodeHasSuffix", "tenderCodeIsNil", "tenderCodeNotNil", "tenderCodeEqualFold", "tenderCodeContainsFold", "architect", "architectNEQ", "architectIn", "architectNotIn", "architectGT", "architectGTE", "architectLT", "architectLTE", "architectContains", "architectHasPrefix", "architectHasSuffix", "architectIsNil", "architectNotNil", "architectEqualFold", "architectContainsFold", "developer", "developerNEQ", "developerIn", "developerNotIn", "developerGT", "developerGTE", "developerLT", "developerLTE", "developerContains", "developerHasPrefix", "developerHasSuffix", "developerIsNil", "developerNotNil", "developerEqualFold", "developerContainsFold", "tenderClosingDate", "tenderClosingDateNEQ", "tenderClosingDateIn", "tenderClosingDateNotIn", "tenderClosingDateGT", "tenderClosingDateGTE", "tenderClosingDateLT", "tenderClosingDateLTE", "tenderClosingDateIsNil", "tenderClosingDateNotNil", "constructionArea", "constructionAreaNEQ", "constructionAreaIn", "constructionAreaNotIn", "constructionAreaGT", "constructionAreaGTE", "constructionAreaLT", "constructionAreaLTE", "constructionAreaContains", "constructionAreaHasPrefix", "constructionAreaHasSuffix", "constructionAreaIsNil", "constructionAreaNotNil", "constructionAreaEqualFold", "constructionAreaContainsFold", "tenderWinDate", "tenderWinDateNEQ", "tenderWinDateIn", "tenderWinDateNotIn", "tenderWinDateGT", "tenderWinDateGTE", "tenderWinDateLT", "tenderWinDateLTE", "tenderWinDateIsNil", "tenderWinDateNotNil", "tenderWinAmount", "tenderWinAmountNEQ", "tenderWinAmountIn", "tenderWinAmountNotIn", "tenderWinAmountGT", "tenderWinAmountGTE", "tenderWinAmountLT", "tenderWinAmountLTE", "tenderWinAmountIsNil", "tenderWinAmountNotNil", "lastTenderAmount", "lastTenderAmountNEQ", "lastTenderAmountIn", "lastTenderAmountNotIn", "lastTenderAmountGT", "lastTenderAmountGTE", "lastTenderAmountLT", "lastTenderAmountLTE", "lastTenderAmountIsNil", "lastTenderAmountNotNil", "areaID", "areaIDNEQ", "areaIDIn", "areaIDNotIn", "areaIDGT", "areaIDGTE", "areaIDLT", "areaIDLTE", "areaIDContains", "areaIDHasPrefix", "areaIDHasSuffix", "areaIDEqualFold", "areaIDContainsFold", "provinceID", "provinceIDNEQ", "provinceIDIn", "provinceIDNotIn", "provinceIDGT", "provinceIDGTE", "provinceIDLT", "provinceIDLTE", "provinceIDContains", "provinceIDHasPrefix", "provinceIDHasSuffix", "provinceIDIsNil", "provinceIDNotNil", "provinceIDEqualFold", "provinceIDContainsFold", "cityID", "cityIDNEQ", "cityIDIn", "cityIDNotIn", "cityIDGT", "cityIDGTE", "cityIDLT", "cityIDLTE", "cityIDContains", "cityIDHasPrefix", "cityIDHasSuffix", "cityIDIsNil", "cityIDNotNil", "cityIDEqualFold", "cityIDContainsFold", "districtID", "districtIDNEQ", "districtIDIn", "districtIDNotIn", "districtIDGT", "districtIDGTE", "districtIDLT", "districtIDLTE", "districtIDContains", "districtIDHasPrefix", "districtIDHasSuffix", "districtIDIsNil", "districtIDNotNil", "districtIDEqualFold", "districtIDContainsFold", "customerID", "customerIDNEQ", "customerIDIn", "customerIDNotIn", "customerIDGT", "customerIDGTE", "customerIDLT", "customerIDLTE", "customerIDContains", "customerIDHasPrefix", "customerIDHasSuffix", "customerIDIsNil", "customerIDNotNil", "customerIDEqualFold", "customerIDContainsFold", "finderID", "finderIDNEQ", "finderIDIn", "finderIDNotIn", "finderIDGT", "finderIDGTE", "finderIDLT", "finderIDLTE", "finderIDContains", "finderIDHasPrefix", "finderIDHasSuffix", "finderIDIsNil", "finderIDNotNil", "finderIDEqualFold", "finderIDContainsFold", "createdByID", "createdByIDNEQ", "createdByIDIn", "createdByIDNotIn", "createdByIDGT", "createdByIDGTE", "createdByIDLT", "createdByIDLTE", "createdByIDContains", "createdByIDHasPrefix", "createdByIDHasSuffix", "createdByIDIsNil", "createdByIDNotNil", "createdByIDEqualFold", "createdByIDContainsFold", "approverID", "approverIDNEQ", "approverIDIn", "approverIDNotIn", "approverIDGT", "approverIDGTE", "approverIDLT", "approverIDLTE", "approverIDContains", "approverIDHasPrefix", "approverIDHasSuffix", "approverIDIsNil", "approverIDNotNil", "approverIDEqualFold", "approverIDContainsFold", "updatedByID", "updatedByIDNEQ", "updatedByIDIn", "updatedByIDNotIn", "updatedByIDGT", "updatedByIDGTE", "updatedByIDLT", "updatedByIDLTE", "updatedByIDContains", "updatedByIDHasPrefix", "updatedByIDHasSuffix", "updatedByIDIsNil", "updatedByIDNotNil", "updatedByIDEqualFold", "updatedByIDContainsFold", "hasArea", "hasAreaWith", "hasProfiles", "hasProfilesWith", "hasCompetitors", "hasCompetitorsWith", "hasCustomer", "hasCustomerWith", "hasFinder", "hasFinderWith", "hasCreatedBy", "hasCreatedByWith", "hasFollowingSales", "hasFollowingSalesWith", "hasProvince", "hasProvinceWith", "hasCity", "hasCityWith", "hasDistrict", "hasDistrictWith", "hasVisitRecords", "hasVisitRecordsWith", "hasApprover", "hasApproverWith", "hasUpdatedBy", "hasUpdatedByWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "codeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNEQ = data
		case "codeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeIn = data
		case "codeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeNotIn = data
		case "codeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGT = data
		case "codeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeGTE = data
		case "codeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLT = data
		case "codeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeLTE = data
		case "codeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContains = data
		case "codeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasPrefix = data
		case "codeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeHasSuffix = data
		case "codeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeEqualFold = data
		case "codeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CodeContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "statusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGT = data
		case "statusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGTE = data
		case "statusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLT = data
		case "statusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLTE = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNEQ = data
		case "approvalStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusIn = data
		case "approvalStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusNotIn = data
		case "approvalStatusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGT = data
		case "approvalStatusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusGTE = data
		case "approvalStatusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLT = data
		case "approvalStatusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatusLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatusLTE = data
		case "approvalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgID = data
		case "approvalMsgIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNEQ = data
		case "approvalMsgIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDIn = data
		case "approvalMsgIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNotIn = data
		case "approvalMsgIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDGT = data
		case "approvalMsgIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDGTE = data
		case "approvalMsgIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDLT = data
		case "approvalMsgIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDLTE = data
		case "approvalMsgIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDContains = data
		case "approvalMsgIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDHasPrefix = data
		case "approvalMsgIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDHasSuffix = data
		case "approvalMsgIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDIsNil = data
		case "approvalMsgIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDNotNil = data
		case "approvalMsgIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDEqualFold = data
		case "approvalMsgIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgIDContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "estimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmount = data
		case "estimatedAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNEQ = data
		case "estimatedAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountIn = data
		case "estimatedAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNotIn = data
		case "estimatedAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountGT = data
		case "estimatedAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountGTE = data
		case "estimatedAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountLT = data
		case "estimatedAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountLTE = data
		case "estimatedAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountIsNil = data
		case "estimatedAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmountNotNil = data
		case "tenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDate = data
		case "tenderDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNEQ = data
		case "tenderDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateIn = data
		case "tenderDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNotIn = data
		case "tenderDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateGT = data
		case "tenderDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateGTE = data
		case "tenderDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateLT = data
		case "tenderDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateLTE = data
		case "tenderDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateIsNil = data
		case "tenderDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDateNotNil = data
		case "classify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classify"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Classify = data
		case "classifyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNEQ = data
		case "classifyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyIn = data
		case "classifyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNotIn = data
		case "classifyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyGT = data
		case "classifyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyGTE = data
		case "classifyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyLT = data
		case "classifyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyLTE = data
		case "classifyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyIsNil = data
		case "classifyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classifyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassifyNotNil = data
		case "discoveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDate = data
		case "discoveryDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateNEQ = data
		case "discoveryDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateIn = data
		case "discoveryDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateNotIn = data
		case "discoveryDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateGT = data
		case "discoveryDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateGTE = data
		case "discoveryDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateLT = data
		case "discoveryDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDateLTE = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "addressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNEQ = data
		case "addressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIn = data
		case "addressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotIn = data
		case "addressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGT = data
		case "addressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressGTE = data
		case "addressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLT = data
		case "addressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLTE = data
		case "addressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContains = data
		case "addressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasPrefix = data
		case "addressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressHasSuffix = data
		case "addressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressIsNil = data
		case "addressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressNotNil = data
		case "addressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressEqualFold = data
		case "addressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressContainsFold = data
		case "fullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddress = data
		case "fullAddressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNEQ = data
		case "fullAddressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressIn = data
		case "fullAddressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNotIn = data
		case "fullAddressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressGT = data
		case "fullAddressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressGTE = data
		case "fullAddressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressLT = data
		case "fullAddressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressLTE = data
		case "fullAddressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressContains = data
		case "fullAddressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressHasPrefix = data
		case "fullAddressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressHasSuffix = data
		case "fullAddressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressIsNil = data
		case "fullAddressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressNotNil = data
		case "fullAddressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressEqualFold = data
		case "fullAddressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddressContainsFold = data
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "contractorNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNEQ = data
		case "contractorIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorIn = data
		case "contractorNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNotIn = data
		case "contractorGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorGT = data
		case "contractorGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorGTE = data
		case "contractorLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorLT = data
		case "contractorLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorLTE = data
		case "contractorContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorContains = data
		case "contractorHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorHasPrefix = data
		case "contractorHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorHasSuffix = data
		case "contractorIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorIsNil = data
		case "contractorNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorNotNil = data
		case "contractorEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorEqualFold = data
		case "contractorContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorContainsFold = data
		case "levelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolved"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolved = data
		case "levelInvolvedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNEQ = data
		case "levelInvolvedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedIn = data
		case "levelInvolvedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNotIn = data
		case "levelInvolvedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedGT = data
		case "levelInvolvedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedGTE = data
		case "levelInvolvedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedLT = data
		case "levelInvolvedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedLTE = data
		case "levelInvolvedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedIsNil = data
		case "levelInvolvedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolvedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolvedNotNil = data
		case "sizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRating = data
		case "sizeAndValueRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNEQ = data
		case "sizeAndValueRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingIn = data
		case "sizeAndValueRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNotIn = data
		case "sizeAndValueRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingGT = data
		case "sizeAndValueRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingGTE = data
		case "sizeAndValueRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingLT = data
		case "sizeAndValueRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingLTE = data
		case "sizeAndValueRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingIsNil = data
		case "sizeAndValueRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingNotNil = data
		case "sizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverview = data
		case "sizeAndValueRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNEQ = data
		case "sizeAndValueRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewIn = data
		case "sizeAndValueRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNotIn = data
		case "sizeAndValueRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewGT = data
		case "sizeAndValueRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewGTE = data
		case "sizeAndValueRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewLT = data
		case "sizeAndValueRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewLTE = data
		case "sizeAndValueRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewContains = data
		case "sizeAndValueRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewHasPrefix = data
		case "sizeAndValueRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewHasSuffix = data
		case "sizeAndValueRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewIsNil = data
		case "sizeAndValueRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewNotNil = data
		case "sizeAndValueRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewEqualFold = data
		case "sizeAndValueRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverviewContainsFold = data
		case "creditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRating = data
		case "creditAndPaymentRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNEQ = data
		case "creditAndPaymentRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingIn = data
		case "creditAndPaymentRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNotIn = data
		case "creditAndPaymentRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingGT = data
		case "creditAndPaymentRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingGTE = data
		case "creditAndPaymentRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingLT = data
		case "creditAndPaymentRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingLTE = data
		case "creditAndPaymentRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingIsNil = data
		case "creditAndPaymentRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingNotNil = data
		case "creditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverview = data
		case "creditAndPaymentRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNEQ = data
		case "creditAndPaymentRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewIn = data
		case "creditAndPaymentRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNotIn = data
		case "creditAndPaymentRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewGT = data
		case "creditAndPaymentRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewGTE = data
		case "creditAndPaymentRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewLT = data
		case "creditAndPaymentRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewLTE = data
		case "creditAndPaymentRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewContains = data
		case "creditAndPaymentRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewHasPrefix = data
		case "creditAndPaymentRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewHasSuffix = data
		case "creditAndPaymentRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewIsNil = data
		case "creditAndPaymentRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewNotNil = data
		case "creditAndPaymentRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewEqualFold = data
		case "creditAndPaymentRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverviewContainsFold = data
		case "timeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRating = data
		case "timeLimitRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNEQ = data
		case "timeLimitRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingIn = data
		case "timeLimitRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNotIn = data
		case "timeLimitRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingGT = data
		case "timeLimitRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingGTE = data
		case "timeLimitRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingLT = data
		case "timeLimitRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingLTE = data
		case "timeLimitRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingIsNil = data
		case "timeLimitRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingNotNil = data
		case "timeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverview = data
		case "timeLimitRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNEQ = data
		case "timeLimitRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewIn = data
		case "timeLimitRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNotIn = data
		case "timeLimitRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewGT = data
		case "timeLimitRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewGTE = data
		case "timeLimitRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewLT = data
		case "timeLimitRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewLTE = data
		case "timeLimitRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewContains = data
		case "timeLimitRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewHasPrefix = data
		case "timeLimitRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewHasSuffix = data
		case "timeLimitRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewIsNil = data
		case "timeLimitRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewNotNil = data
		case "timeLimitRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewEqualFold = data
		case "timeLimitRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverviewContainsFold = data
		case "customerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRating = data
		case "customerRelationshipRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNEQ = data
		case "customerRelationshipRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingIn = data
		case "customerRelationshipRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNotIn = data
		case "customerRelationshipRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingGT = data
		case "customerRelationshipRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingGTE = data
		case "customerRelationshipRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingLT = data
		case "customerRelationshipRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingLTE = data
		case "customerRelationshipRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingIsNil = data
		case "customerRelationshipRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingNotNil = data
		case "customerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverview = data
		case "customerRelationshipRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNEQ = data
		case "customerRelationshipRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewIn = data
		case "customerRelationshipRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNotIn = data
		case "customerRelationshipRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewGT = data
		case "customerRelationshipRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewGTE = data
		case "customerRelationshipRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewLT = data
		case "customerRelationshipRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewLTE = data
		case "customerRelationshipRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewContains = data
		case "customerRelationshipRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewHasPrefix = data
		case "customerRelationshipRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewHasSuffix = data
		case "customerRelationshipRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewIsNil = data
		case "customerRelationshipRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewNotNil = data
		case "customerRelationshipRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewEqualFold = data
		case "customerRelationshipRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverviewContainsFold = data
		case "competitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRating = data
		case "competitivePartnershipRatingNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNEQ = data
		case "competitivePartnershipRatingIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingIn = data
		case "competitivePartnershipRatingNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNotIn = data
		case "competitivePartnershipRatingGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingGT = data
		case "competitivePartnershipRatingGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingGTE = data
		case "competitivePartnershipRatingLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingLT = data
		case "competitivePartnershipRatingLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingLTE = data
		case "competitivePartnershipRatingIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingIsNil = data
		case "competitivePartnershipRatingNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingNotNil = data
		case "competitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverview = data
		case "competitivePartnershipRatingOverviewNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNEQ = data
		case "competitivePartnershipRatingOverviewIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewIn = data
		case "competitivePartnershipRatingOverviewNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNotIn = data
		case "competitivePartnershipRatingOverviewGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewGT = data
		case "competitivePartnershipRatingOverviewGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewGTE = data
		case "competitivePartnershipRatingOverviewLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewLT = data
		case "competitivePartnershipRatingOverviewLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewLTE = data
		case "competitivePartnershipRatingOverviewContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewContains = data
		case "competitivePartnershipRatingOverviewHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewHasPrefix = data
		case "competitivePartnershipRatingOverviewHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewHasSuffix = data
		case "competitivePartnershipRatingOverviewIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewIsNil = data
		case "competitivePartnershipRatingOverviewNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewNotNil = data
		case "competitivePartnershipRatingOverviewEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewEqualFold = data
		case "competitivePartnershipRatingOverviewContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverviewContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverviewContainsFold = data
		case "prepareToBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBid"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBid = data
		case "prepareToBidNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBidNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBidNEQ = data
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "projectCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNEQ = data
		case "projectCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeIn = data
		case "projectCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNotIn = data
		case "projectCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeGT = data
		case "projectCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeGTE = data
		case "projectCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeLT = data
		case "projectCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeLTE = data
		case "projectCodeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeContains = data
		case "projectCodeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeHasPrefix = data
		case "projectCodeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeHasSuffix = data
		case "projectCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeIsNil = data
		case "projectCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeNotNil = data
		case "projectCodeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeEqualFold = data
		case "projectCodeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCodeContainsFold = data
		case "projectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectType = data
		case "projectTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNEQ = data
		case "projectTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeIn = data
		case "projectTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNotIn = data
		case "projectTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeGT = data
		case "projectTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeGTE = data
		case "projectTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeLT = data
		case "projectTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeLTE = data
		case "projectTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeContains = data
		case "projectTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeHasPrefix = data
		case "projectTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeHasSuffix = data
		case "projectTypeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeIsNil = data
		case "projectTypeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeNotNil = data
		case "projectTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeEqualFold = data
		case "projectTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectTypeContainsFold = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "projectDefinitionNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNEQ = data
		case "projectDefinitionIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionIn = data
		case "projectDefinitionNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNotIn = data
		case "projectDefinitionGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionGT = data
		case "projectDefinitionGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionGTE = data
		case "projectDefinitionLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionLT = data
		case "projectDefinitionLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionLTE = data
		case "projectDefinitionContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionContains = data
		case "projectDefinitionHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionHasPrefix = data
		case "projectDefinitionHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionHasSuffix = data
		case "projectDefinitionIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionIsNil = data
		case "projectDefinitionNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionNotNil = data
		case "projectDefinitionEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionEqualFold = data
		case "projectDefinitionContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinitionContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinitionContainsFold = data
		case "estimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDate = data
		case "estimatedProjectStartDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNEQ = data
		case "estimatedProjectStartDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateIn = data
		case "estimatedProjectStartDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNotIn = data
		case "estimatedProjectStartDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateGT = data
		case "estimatedProjectStartDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateGTE = data
		case "estimatedProjectStartDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateLT = data
		case "estimatedProjectStartDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateLTE = data
		case "estimatedProjectStartDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateIsNil = data
		case "estimatedProjectStartDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDateNotNil = data
		case "estimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDate = data
		case "estimatedProjectEndDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNEQ = data
		case "estimatedProjectEndDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateIn = data
		case "estimatedProjectEndDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNotIn = data
		case "estimatedProjectEndDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateGT = data
		case "estimatedProjectEndDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateGTE = data
		case "estimatedProjectEndDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateLT = data
		case "estimatedProjectEndDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateLTE = data
		case "estimatedProjectEndDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateIsNil = data
		case "estimatedProjectEndDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDateNotNil = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		case "remarkNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNEQ = data
		case "remarkIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkIn = data
		case "remarkNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNotIn = data
		case "remarkGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkGT = data
		case "remarkGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkGTE = data
		case "remarkLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkLT = data
		case "remarkLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkLTE = data
		case "remarkContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkContains = data
		case "remarkHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkHasPrefix = data
		case "remarkHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkHasSuffix = data
		case "remarkIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkIsNil = data
		case "remarkNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkNotNil = data
		case "remarkEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkEqualFold = data
		case "remarkContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarkContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemarkContainsFold = data
		case "tenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituations = data
		case "tenderSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNEQ = data
		case "tenderSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsIn = data
		case "tenderSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNotIn = data
		case "tenderSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsGT = data
		case "tenderSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsGTE = data
		case "tenderSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsLT = data
		case "tenderSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsLTE = data
		case "tenderSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsContains = data
		case "tenderSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsHasPrefix = data
		case "tenderSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsHasSuffix = data
		case "tenderSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsIsNil = data
		case "tenderSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsNotNil = data
		case "tenderSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsEqualFold = data
		case "tenderSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituationsContainsFold = data
		case "ownerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituations = data
		case "ownerSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNEQ = data
		case "ownerSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsIn = data
		case "ownerSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNotIn = data
		case "ownerSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsGT = data
		case "ownerSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsGTE = data
		case "ownerSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsLT = data
		case "ownerSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsLTE = data
		case "ownerSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsContains = data
		case "ownerSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsHasPrefix = data
		case "ownerSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsHasSuffix = data
		case "ownerSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsIsNil = data
		case "ownerSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsNotNil = data
		case "ownerSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsEqualFold = data
		case "ownerSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituationsContainsFold = data
		case "biddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructions"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructions = data
		case "biddingInstructionsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNEQ = data
		case "biddingInstructionsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsIn = data
		case "biddingInstructionsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNotIn = data
		case "biddingInstructionsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsGT = data
		case "biddingInstructionsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsGTE = data
		case "biddingInstructionsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsLT = data
		case "biddingInstructionsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsLTE = data
		case "biddingInstructionsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsContains = data
		case "biddingInstructionsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsHasPrefix = data
		case "biddingInstructionsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsHasSuffix = data
		case "biddingInstructionsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsIsNil = data
		case "biddingInstructionsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsNotNil = data
		case "biddingInstructionsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsEqualFold = data
		case "biddingInstructionsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructionsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructionsContainsFold = data
		case "competitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituations = data
		case "competitorSituationsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNEQ = data
		case "competitorSituationsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsIn = data
		case "competitorSituationsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNotIn = data
		case "competitorSituationsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsGT = data
		case "competitorSituationsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsGTE = data
		case "competitorSituationsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsLT = data
		case "competitorSituationsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsLTE = data
		case "competitorSituationsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsContains = data
		case "competitorSituationsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsHasPrefix = data
		case "competitorSituationsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsHasSuffix = data
		case "competitorSituationsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsIsNil = data
		case "competitorSituationsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsNotNil = data
		case "competitorSituationsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsEqualFold = data
		case "competitorSituationsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituationsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituationsContainsFold = data
		case "costEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineer = data
		case "costEngineerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNEQ = data
		case "costEngineerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerIn = data
		case "costEngineerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNotIn = data
		case "costEngineerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerGT = data
		case "costEngineerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerGTE = data
		case "costEngineerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerLT = data
		case "costEngineerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerLTE = data
		case "costEngineerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerContains = data
		case "costEngineerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerHasPrefix = data
		case "costEngineerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerHasSuffix = data
		case "costEngineerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerIsNil = data
		case "costEngineerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerNotNil = data
		case "costEngineerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerEqualFold = data
		case "costEngineerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineerContainsFold = data
		case "tenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderForm = data
		case "tenderFormNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNEQ = data
		case "tenderFormIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormIn = data
		case "tenderFormNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNotIn = data
		case "tenderFormGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormGT = data
		case "tenderFormGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormGTE = data
		case "tenderFormLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormLT = data
		case "tenderFormLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormLTE = data
		case "tenderFormContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormContains = data
		case "tenderFormHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormHasPrefix = data
		case "tenderFormHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormHasSuffix = data
		case "tenderFormIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormIsNil = data
		case "tenderFormNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormNotNil = data
		case "tenderFormEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormEqualFold = data
		case "tenderFormContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderFormContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderFormContainsFold = data
		case "contractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractForm = data
		case "contractFormNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNEQ = data
		case "contractFormIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormIn = data
		case "contractFormNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNotIn = data
		case "contractFormGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormGT = data
		case "contractFormGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormGTE = data
		case "contractFormLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormLT = data
		case "contractFormLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormLTE = data
		case "contractFormContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormContains = data
		case "contractFormHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormHasPrefix = data
		case "contractFormHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormHasSuffix = data
		case "contractFormIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormIsNil = data
		case "contractFormNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormNotNil = data
		case "contractFormEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormEqualFold = data
		case "contractFormContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractFormContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractFormContainsFold = data
		case "managementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompany = data
		case "managementCompanyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNEQ = data
		case "managementCompanyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyIn = data
		case "managementCompanyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNotIn = data
		case "managementCompanyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyGT = data
		case "managementCompanyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyGTE = data
		case "managementCompanyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyLT = data
		case "managementCompanyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyLTE = data
		case "managementCompanyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyContains = data
		case "managementCompanyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyHasPrefix = data
		case "managementCompanyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyHasSuffix = data
		case "managementCompanyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyIsNil = data
		case "managementCompanyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyNotNil = data
		case "managementCompanyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyEqualFold = data
		case "managementCompanyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompanyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompanyContainsFold = data
		case "tenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgency = data
		case "tenderingAgencyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNEQ = data
		case "tenderingAgencyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyIn = data
		case "tenderingAgencyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNotIn = data
		case "tenderingAgencyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyGT = data
		case "tenderingAgencyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyGTE = data
		case "tenderingAgencyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyLT = data
		case "tenderingAgencyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyLTE = data
		case "tenderingAgencyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyContains = data
		case "tenderingAgencyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyHasPrefix = data
		case "tenderingAgencyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyHasSuffix = data
		case "tenderingAgencyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyIsNil = data
		case "tenderingAgencyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyNotNil = data
		case "tenderingAgencyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyEqualFold = data
		case "tenderingAgencyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgencyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgencyContainsFold = data
		case "biddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDate = data
		case "biddingDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNEQ = data
		case "biddingDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateIn = data
		case "biddingDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNotIn = data
		case "biddingDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateGT = data
		case "biddingDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateGTE = data
		case "biddingDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateLT = data
		case "biddingDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateLTE = data
		case "biddingDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateIsNil = data
		case "biddingDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDateNotNil = data
		case "facadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultant = data
		case "facadeConsultantNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNEQ = data
		case "facadeConsultantIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantIn = data
		case "facadeConsultantNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNotIn = data
		case "facadeConsultantGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantGT = data
		case "facadeConsultantGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantGTE = data
		case "facadeConsultantLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantLT = data
		case "facadeConsultantLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantLTE = data
		case "facadeConsultantContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantContains = data
		case "facadeConsultantHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantHasPrefix = data
		case "facadeConsultantHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantHasSuffix = data
		case "facadeConsultantIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantIsNil = data
		case "facadeConsultantNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantNotNil = data
		case "facadeConsultantEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantEqualFold = data
		case "facadeConsultantContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultantContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultantContainsFold = data
		case "designUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnit = data
		case "designUnitNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNEQ = data
		case "designUnitIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitIn = data
		case "designUnitNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNotIn = data
		case "designUnitGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitGT = data
		case "designUnitGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitGTE = data
		case "designUnitLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitLT = data
		case "designUnitLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitLTE = data
		case "designUnitContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitContains = data
		case "designUnitHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitHasPrefix = data
		case "designUnitHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitHasSuffix = data
		case "designUnitIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitIsNil = data
		case "designUnitNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitNotNil = data
		case "designUnitEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitEqualFold = data
		case "designUnitContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnitContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnitContainsFold = data
		case "consultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirm = data
		case "consultingFirmNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNEQ = data
		case "consultingFirmIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmIn = data
		case "consultingFirmNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNotIn = data
		case "consultingFirmGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmGT = data
		case "consultingFirmGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmGTE = data
		case "consultingFirmLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmLT = data
		case "consultingFirmLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmLTE = data
		case "consultingFirmContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmContains = data
		case "consultingFirmHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmHasPrefix = data
		case "consultingFirmHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmHasSuffix = data
		case "consultingFirmIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmIsNil = data
		case "consultingFirmNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmNotNil = data
		case "consultingFirmEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmEqualFold = data
		case "consultingFirmContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirmContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirmContainsFold = data
		case "keyProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProject = data
		case "keyProjectNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProjectNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProjectNEQ = data
		case "currentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgress = data
		case "currentProgressNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNEQ = data
		case "currentProgressIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressIn = data
		case "currentProgressNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNotIn = data
		case "currentProgressGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressGT = data
		case "currentProgressGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressGTE = data
		case "currentProgressLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressLT = data
		case "currentProgressLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressLTE = data
		case "currentProgressContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressContains = data
		case "currentProgressHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressHasPrefix = data
		case "currentProgressHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressHasSuffix = data
		case "currentProgressIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressIsNil = data
		case "currentProgressNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressNotNil = data
		case "currentProgressEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressEqualFold = data
		case "currentProgressContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgressContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgressContainsFold = data
		case "tenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompany = data
		case "tenderWinCompanyNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNEQ = data
		case "tenderWinCompanyIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyIn = data
		case "tenderWinCompanyNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNotIn = data
		case "tenderWinCompanyGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyGT = data
		case "tenderWinCompanyGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyGTE = data
		case "tenderWinCompanyLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyLT = data
		case "tenderWinCompanyLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyLTE = data
		case "tenderWinCompanyContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyContains = data
		case "tenderWinCompanyHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyHasPrefix = data
		case "tenderWinCompanyHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyHasSuffix = data
		case "tenderWinCompanyIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyIsNil = data
		case "tenderWinCompanyNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyNotNil = data
		case "tenderWinCompanyEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyEqualFold = data
		case "tenderWinCompanyContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompanyContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompanyContainsFold = data
		case "tenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCode = data
		case "tenderCodeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNEQ = data
		case "tenderCodeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeIn = data
		case "tenderCodeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNotIn = data
		case "tenderCodeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeGT = data
		case "tenderCodeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeGTE = data
		case "tenderCodeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeLT = data
		case "tenderCodeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeLTE = data
		case "tenderCodeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeContains = data
		case "tenderCodeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeHasPrefix = data
		case "tenderCodeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeHasSuffix = data
		case "tenderCodeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeIsNil = data
		case "tenderCodeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeNotNil = data
		case "tenderCodeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeEqualFold = data
		case "tenderCodeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCodeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCodeContainsFold = data
		case "architect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architect"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Architect = data
		case "architectNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNEQ = data
		case "architectIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectIn = data
		case "architectNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNotIn = data
		case "architectGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectGT = data
		case "architectGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectGTE = data
		case "architectLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectLT = data
		case "architectLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectLTE = data
		case "architectContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectContains = data
		case "architectHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectHasPrefix = data
		case "architectHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectHasSuffix = data
		case "architectIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectIsNil = data
		case "architectNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectNotNil = data
		case "architectEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectEqualFold = data
		case "architectContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architectContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchitectContainsFold = data
		case "developer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Developer = data
		case "developerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNEQ = data
		case "developerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperIn = data
		case "developerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNotIn = data
		case "developerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperGT = data
		case "developerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperGTE = data
		case "developerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperLT = data
		case "developerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperLTE = data
		case "developerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperContains = data
		case "developerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperHasPrefix = data
		case "developerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperHasSuffix = data
		case "developerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperIsNil = data
		case "developerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperNotNil = data
		case "developerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperEqualFold = data
		case "developerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeveloperContainsFold = data
		case "tenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDate = data
		case "tenderClosingDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNEQ = data
		case "tenderClosingDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateIn = data
		case "tenderClosingDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNotIn = data
		case "tenderClosingDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateGT = data
		case "tenderClosingDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateGTE = data
		case "tenderClosingDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateLT = data
		case "tenderClosingDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateLTE = data
		case "tenderClosingDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateIsNil = data
		case "tenderClosingDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDateNotNil = data
		case "constructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionArea"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionArea = data
		case "constructionAreaNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNEQ = data
		case "constructionAreaIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaIn = data
		case "constructionAreaNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNotIn = data
		case "constructionAreaGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaGT = data
		case "constructionAreaGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaGTE = data
		case "constructionAreaLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaLT = data
		case "constructionAreaLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaLTE = data
		case "constructionAreaContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaContains = data
		case "constructionAreaHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaHasPrefix = data
		case "constructionAreaHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaHasSuffix = data
		case "constructionAreaIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaIsNil = data
		case "constructionAreaNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaNotNil = data
		case "constructionAreaEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaEqualFold = data
		case "constructionAreaContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionAreaContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionAreaContainsFold = data
		case "tenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDate = data
		case "tenderWinDateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNEQ = data
		case "tenderWinDateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateIn = data
		case "tenderWinDateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNotIn = data
		case "tenderWinDateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateGT = data
		case "tenderWinDateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateGTE = data
		case "tenderWinDateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateLT = data
		case "tenderWinDateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateLTE = data
		case "tenderWinDateIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateIsNil = data
		case "tenderWinDateNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDateNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDateNotNil = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "tenderWinAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNEQ = data
		case "tenderWinAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountIn = data
		case "tenderWinAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNotIn = data
		case "tenderWinAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountGT = data
		case "tenderWinAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountGTE = data
		case "tenderWinAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountLT = data
		case "tenderWinAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountLTE = data
		case "tenderWinAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountIsNil = data
		case "tenderWinAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmountNotNil = data
		case "lastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmount = data
		case "lastTenderAmountNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNEQ"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNEQ = data
		case "lastTenderAmountIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountIn = data
		case "lastTenderAmountNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNotIn"))
			data, err := ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNotIn = data
		case "lastTenderAmountGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountGT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountGT = data
		case "lastTenderAmountGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountGTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountGTE = data
		case "lastTenderAmountLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountLT"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountLT = data
		case "lastTenderAmountLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountLTE"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountLTE = data
		case "lastTenderAmountIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountIsNil = data
		case "lastTenderAmountNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmountNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmountNotNil = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "areaIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNEQ = data
		case "areaIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDIn = data
		case "areaIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDNotIn = data
		case "areaIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGT = data
		case "areaIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDGTE = data
		case "areaIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLT = data
		case "areaIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDLTE = data
		case "areaIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContains = data
		case "areaIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasPrefix = data
		case "areaIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDHasSuffix = data
		case "areaIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDEqualFold = data
		case "areaIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaIDContainsFold = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "provinceIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNEQ = data
		case "provinceIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIn = data
		case "provinceIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotIn = data
		case "provinceIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGT = data
		case "provinceIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDGTE = data
		case "provinceIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLT = data
		case "provinceIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDLTE = data
		case "provinceIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContains = data
		case "provinceIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasPrefix = data
		case "provinceIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDHasSuffix = data
		case "provinceIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDIsNil = data
		case "provinceIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDNotNil = data
		case "provinceIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDEqualFold = data
		case "provinceIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceIDContainsFold = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "cityIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNEQ = data
		case "cityIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIn = data
		case "cityIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotIn = data
		case "cityIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGT = data
		case "cityIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDGTE = data
		case "cityIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLT = data
		case "cityIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDLTE = data
		case "cityIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContains = data
		case "cityIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasPrefix = data
		case "cityIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDHasSuffix = data
		case "cityIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDIsNil = data
		case "cityIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDNotNil = data
		case "cityIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDEqualFold = data
		case "cityIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityIDContainsFold = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "districtIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNEQ = data
		case "districtIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDIn = data
		case "districtIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNotIn = data
		case "districtIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGT = data
		case "districtIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDGTE = data
		case "districtIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLT = data
		case "districtIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDLTE = data
		case "districtIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContains = data
		case "districtIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasPrefix = data
		case "districtIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDHasSuffix = data
		case "districtIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDIsNil = data
		case "districtIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDNotNil = data
		case "districtIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDEqualFold = data
		case "districtIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictIDContainsFold = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "customerIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNEQ = data
		case "customerIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDIn = data
		case "customerIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNotIn = data
		case "customerIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGT = data
		case "customerIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGTE = data
		case "customerIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLT = data
		case "customerIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLTE = data
		case "customerIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContains = data
		case "customerIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasPrefix = data
		case "customerIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasSuffix = data
		case "customerIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDIsNil = data
		case "customerIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNotNil = data
		case "customerIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDEqualFold = data
		case "customerIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContainsFold = data
		case "finderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderID = data
		case "finderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNEQ = data
		case "finderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDIn = data
		case "finderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNotIn = data
		case "finderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDGT = data
		case "finderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDGTE = data
		case "finderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDLT = data
		case "finderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDLTE = data
		case "finderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDContains = data
		case "finderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDHasPrefix = data
		case "finderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDHasSuffix = data
		case "finderIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDIsNil = data
		case "finderIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDNotNil = data
		case "finderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDEqualFold = data
		case "finderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderIDContainsFold = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "createdByIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNEQ = data
		case "createdByIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIn = data
		case "createdByIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotIn = data
		case "createdByIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGT = data
		case "createdByIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDGTE = data
		case "createdByIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLT = data
		case "createdByIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDLTE = data
		case "createdByIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContains = data
		case "createdByIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasPrefix = data
		case "createdByIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDHasSuffix = data
		case "createdByIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDIsNil = data
		case "createdByIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDNotNil = data
		case "createdByIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDEqualFold = data
		case "createdByIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByIDContainsFold = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "approverIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNEQ = data
		case "approverIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIn = data
		case "approverIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotIn = data
		case "approverIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGT = data
		case "approverIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDGTE = data
		case "approverIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLT = data
		case "approverIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDLTE = data
		case "approverIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContains = data
		case "approverIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasPrefix = data
		case "approverIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDHasSuffix = data
		case "approverIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDIsNil = data
		case "approverIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDNotNil = data
		case "approverIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDEqualFold = data
		case "approverIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverIDContainsFold = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		case "updatedByIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNEQ = data
		case "updatedByIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDIn = data
		case "updatedByIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNotIn = data
		case "updatedByIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDGT = data
		case "updatedByIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDGTE = data
		case "updatedByIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDLT = data
		case "updatedByIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDLTE = data
		case "updatedByIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDContains = data
		case "updatedByIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDHasPrefix = data
		case "updatedByIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDHasSuffix = data
		case "updatedByIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDIsNil = data
		case "updatedByIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDNotNil = data
		case "updatedByIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDEqualFold = data
		case "updatedByIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByIDContainsFold = data
		case "hasArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArea"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArea = data
		case "hasAreaWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAreaWith"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAreaWith = data
		case "hasProfiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProfiles"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProfiles = data
		case "hasProfilesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProfilesWith"))
			data, err := ec.unmarshalOTenderProfileWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProfilesWith = data
		case "hasCompetitors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompetitors"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompetitors = data
		case "hasCompetitorsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCompetitorsWith"))
			data, err := ec.unmarshalOTenderCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCompetitorsWith = data
		case "hasCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomer = data
		case "hasCustomerWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomerWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomerWith = data
		case "hasFinder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinder"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinder = data
		case "hasFinderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFinderWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFinderWith = data
		case "hasCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedBy = data
		case "hasCreatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCreatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCreatedByWith = data
		case "hasFollowingSales":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFollowingSales"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFollowingSales = data
		case "hasFollowingSalesWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFollowingSalesWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFollowingSalesWith = data
		case "hasProvince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvince"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvince = data
		case "hasProvinceWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProvinceWith"))
			data, err := ec.unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProvinceWith = data
		case "hasCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCity"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCity = data
		case "hasCityWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCityWith"))
			data, err := ec.unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCityWith = data
		case "hasDistrict":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrict"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrict = data
		case "hasDistrictWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDistrictWith"))
			data, err := ec.unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDistrictWith = data
		case "hasVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecords"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecords = data
		case "hasVisitRecordsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecordsWith"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecordsWith = data
		case "hasApprover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApprover"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApprover = data
		case "hasApproverWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasApproverWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasApproverWith = data
		case "hasUpdatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUpdatedBy"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUpdatedBy = data
		case "hasUpdatedByWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUpdatedByWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUpdatedByWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAreaInput(ctx context.Context, obj interface{}) (ent.UpdateAreaInput, error) {
	var it ent.UpdateAreaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "name", "code", "leaderChatID", "clearLeaderChatID", "salesChatID", "clearSalesChatID", "addCustomerIDs", "removeCustomerIDs", "clearCustomers", "addTenderIDs", "removeTenderIDs", "clearTenders", "addUserIDs", "removeUserIDs", "clearUsers", "addProvinceIDs", "removeProvinceIDs", "clearProvinces"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "leaderChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderChatID = data
		case "clearLeaderChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeaderChatID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeaderChatID = data
		case "salesChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesChatID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesChatID = data
		case "clearSalesChatID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSalesChatID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSalesChatID = data
		case "addCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCustomerIDs = data
		case "removeCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCustomerIDs = data
		case "clearCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomers = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUsers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUsers = data
		case "addProvinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProvinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProvinceIDs = data
		case "removeProvinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProvinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProvinceIDs = data
		case "clearProvinces":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProvinces"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProvinces = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCityInput(ctx context.Context, obj interface{}) (ent.UpdateCityInput, error) {
	var it ent.UpdateCityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "adcode", "provCode", "name", "addDistrictIDs", "removeDistrictIDs", "clearDistricts", "provinceID", "addTenderIDs", "removeTenderIDs", "clearTenders"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "addDistrictIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDistrictIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDistrictIDs = data
		case "removeDistrictIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDistrictIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDistrictIDs = data
		case "clearDistricts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDistricts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDistricts = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompetitorInput(ctx context.Context, obj interface{}) (ent.UpdateCompetitorInput, error) {
	var it ent.UpdateCompetitorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "shortName", "name", "addTenderIDs", "removeTenderIDs", "clearTenders"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "shortName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCountryInput(ctx context.Context, obj interface{}) (ent.UpdateCountryInput, error) {
	var it ent.UpdateCountryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "adcode", "name", "addProvinceIDs", "removeProvinceIDs", "clearProvinces"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "addProvinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProvinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProvinceIDs = data
		case "removeProvinceIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProvinceIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProvinceIDs = data
		case "clearProvinces":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProvinces"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProvinces = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCustomerInput(ctx context.Context, obj interface{}) (ent.UpdateCustomerInput, error) {
	var it ent.UpdateCustomerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "name", "approvalStatus", "ownerType", "clearOwnerType", "industry", "clearIndustry", "size", "clearSize", "contactPerson", "clearContactPerson", "contactPersonPosition", "clearContactPersonPosition", "contactPersonPhone", "clearContactPersonPhone", "contactPersonEmail", "clearContactPersonEmail", "areaID", "addTenderIDs", "removeTenderIDs", "clearTenders", "salesID", "clearSales", "createdByID", "clearCreatedBy", "updatedByID", "clearUpdatedBy", "approverID", "clearApprover", "addVisitRecordIDs", "removeVisitRecordIDs", "clearVisitRecords"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "ownerType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerType = data
		case "clearOwnerType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerType"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerType = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "clearIndustry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIndustry"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIndustry = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "clearSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSize"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSize = data
		case "contactPerson":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPerson"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPerson = data
		case "clearContactPerson":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactPerson"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactPerson = data
		case "contactPersonPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPosition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPosition = data
		case "clearContactPersonPosition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactPersonPosition"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactPersonPosition = data
		case "contactPersonPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonPhone = data
		case "clearContactPersonPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactPersonPhone"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactPersonPhone = data
		case "contactPersonEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPersonEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPersonEmail = data
		case "clearContactPersonEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactPersonEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactPersonEmail = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		case "salesID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salesID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SalesID = data
		case "clearSales":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSales"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSales = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "clearCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedBy = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		case "clearUpdatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedBy = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "clearApprover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprover"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprover = data
		case "addVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddVisitRecordIDs = data
		case "removeVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveVisitRecordIDs = data
		case "clearVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVisitRecords"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVisitRecords = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDistrictInput(ctx context.Context, obj interface{}) (ent.UpdateDistrictInput, error) {
	var it ent.UpdateDistrictInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "adcode", "provCode", "cityCode", "name", "provinceID", "cityID", "clearCity", "addTenderIDs", "removeTenderIDs", "clearTenders", "addPlotIDs", "removePlotIDs", "clearPlots"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "provCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvCode = data
		case "cityCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityCode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityCode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "clearCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCity"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCity = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		case "addPlotIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addPlotIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddPlotIDs = data
		case "removePlotIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removePlotIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemovePlotIDs = data
		case "clearPlots":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPlots"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPlots = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePlotInput(ctx context.Context, obj interface{}) (ent.UpdatePlotInput, error) {
	var it ent.UpdatePlotInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "name", "colorHex", "districtID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "colorHex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colorHex"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ColorHex = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePotentialTenderInput(ctx context.Context, obj interface{}) (ent.UpdatePotentialTenderInput, error) {
	var it ent.UpdatePotentialTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "refURL", "title", "description", "clearDescription", "requirement", "clearRequirement", "address", "clearAddress", "date", "clearDate", "type", "clearType", "status", "clearStatus", "amount", "clearAmount", "size", "clearSize", "location", "clearLocation", "contact", "clearContact", "contactPhone", "clearContactPhone", "contactEmail", "clearContactEmail", "contactAddress", "clearContactAddress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "refURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefURL = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "clearDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDescription"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDescription = data
		case "requirement":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requirement"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Requirement = data
		case "clearRequirement":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRequirement"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRequirement = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "clearAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAddress = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "clearDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDate = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "clearType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearType"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearType = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "clearStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearStatus"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearStatus = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "clearAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAmount = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "clearSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSize"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSize = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "clearLocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLocation"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLocation = data
		case "contact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contact = data
		case "clearContact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContact"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContact = data
		case "contactPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactPhone = data
		case "clearContactPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactPhone"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactPhone = data
		case "contactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmail = data
		case "clearContactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactEmail = data
		case "contactAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactAddress = data
		case "clearContactAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContactAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContactAddress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectInput(ctx context.Context, obj interface{}) (ent.UpdateProjectInput, error) {
	var it ent.UpdateProjectInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "code", "manager", "clearManager", "name", "clearName", "owner", "clearOwner", "jzs", "clearJzs", "mcn", "clearMcn", "consultant", "clearConsultant", "areas", "clearAreas", "startDate", "clearStartDate", "fsDate", "clearFsDate", "opDate", "clearOpDate", "endDate", "clearEndDate", "mntyr", "clearMntyr", "conType", "clearConType", "isFinished", "cje", "clearCje", "yye", "clearYye", "xjl", "clearXjl", "xmglfYs", "clearXmglfYs", "xmglfLj", "clearXmglfLj", "xmsjf", "clearXmsjf", "xmfzr", "clearXmfzr", "ownerApplyAmount", "clearOwnerApplyAmount", "ownerApplyCount", "clearOwnerApplyCount", "ownerApproveAmount", "clearOwnerApproveAmount", "ownerApproveCount", "clearOwnerApproveCount", "contractorApplyAmount", "clearContractorApplyAmount", "contractorApplyCount", "clearContractorApplyCount", "contractorApproveAmount", "clearContractorApproveAmount", "contractorApproveCount", "clearContractorApproveCount", "installProgress", "clearInstallProgress", "effectiveContractAmount", "clearEffectiveContractAmount", "vaApplyAmount", "clearVaApplyAmount", "vaApproveAmount", "clearVaApproveAmount", "accumulatedStatutoryDeductions", "clearAccumulatedStatutoryDeductions", "accumulatedNonStatutoryDeductions", "clearAccumulatedNonStatutoryDeductions", "accumulatedStatutoryDeductionsPeriod", "clearAccumulatedStatutoryDeductionsPeriod", "accumulatedNonStatutoryDeductionsPeriod", "clearAccumulatedNonStatutoryDeductionsPeriod", "totalContractAmount", "clearTotalContractAmount", "aluminumPlateBudgetPercentage", "clearAluminumPlateBudgetPercentage", "aluminumBudgetPercentage", "clearAluminumBudgetPercentage", "glassBudgetPercentage", "clearGlassBudgetPercentage", "ironBudgetPercentage", "clearIronBudgetPercentage", "milestonePlanYear", "clearMilestonePlanYear", "milestonePlanMonth", "clearMilestonePlanMonth", "milestoneDoneYear", "clearMilestoneDoneYear", "milestoneDoneMonth", "clearMilestoneDoneMonth", "pmArea", "clearPmArea", "pmYearTarget", "clearPmYearTarget", "pmMonthTarget", "clearPmMonthTarget", "pmYearActual", "clearPmYearActual", "pmMonthActual", "clearPmMonthActual", "pmTotal", "clearPmTotal", "pmYesterday", "clearPmYesterday", "unitInventoryTotal", "clearUnitInventoryTotal", "unitComponentTotal", "clearUnitComponentTotal", "unitComponentProduction", "clearUnitComponentProduction", "unitComponentInstallation", "clearUnitComponentInstallation", "materialLoss", "clearMaterialLoss", "designRatedWeight", "clearDesignRatedWeight", "processingWeight", "clearProcessingWeight", "itemStockWeight", "clearItemStockWeight", "palletsInStock", "clearPalletsInStock", "partsInStock", "clearPartsInStock", "qualityScore", "clearQualityScore", "qualityRanking", "clearQualityRanking", "bulkMaterialsTotalOrderQuantity", "clearBulkMaterialsTotalOrderQuantity", "bulkMaterialsCompletedQuantity", "clearBulkMaterialsCompletedQuantity", "bulkMaterialsUncompletedQuantity", "clearBulkMaterialsUncompletedQuantity", "planTotalCount", "clearPlanTotalCount", "planOverdueCount", "clearPlanOverdueCount", "planOverdueMonthCount", "clearPlanOverdueMonthCount", "diagramBdFinishCount", "clearDiagramBdFinishCount", "diagramBdTotalCount", "clearDiagramBdTotalCount", "diagramConstructionFinishCount", "clearDiagramConstructionFinishCount", "diagramConstructionTotalCount", "clearDiagramConstructionTotalCount", "diagramProcessingFinishCount", "clearDiagramProcessingFinishCount", "diagramProcessingTotalCount", "clearDiagramProcessingTotalCount", "diagramCApprovalRatioNumerator", "clearDiagramCApprovalRatioNumerator", "diagramCApprovalRatioDenominator", "clearDiagramCApprovalRatioDenominator", "addVoIDs", "removeVoIDs", "clearVos", "addProjectStaffIDs", "removeProjectStaffIDs", "clearProjectStaffs", "addUserIDs", "removeUserIDs", "clearUsers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "clearManager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearManager"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearManager = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "clearName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearName = data
		case "owner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Owner = data
		case "clearOwner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwner"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwner = data
		case "jzs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jzs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Jzs = data
		case "clearJzs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearJzs"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearJzs = data
		case "mcn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mcn"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mcn = data
		case "clearMcn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMcn"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMcn = data
		case "consultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Consultant = data
		case "clearConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearConsultant"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearConsultant = data
		case "areas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areas"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Areas = data
		case "clearAreas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAreas"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAreas = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "clearStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearStartDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearStartDate = data
		case "fsDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fsDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FsDate = data
		case "clearFsDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFsDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFsDate = data
		case "opDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpDate = data
		case "clearOpDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOpDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOpDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "clearEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEndDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEndDate = data
		case "mntyr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mntyr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mntyr = data
		case "clearMntyr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMntyr"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMntyr = data
		case "conType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConType = data
		case "clearConType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearConType"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearConType = data
		case "isFinished":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFinished"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsFinished = data
		case "cje":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cje"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cje = data
		case "clearCje":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCje"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCje = data
		case "yye":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yye"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Yye = data
		case "clearYye":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearYye"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearYye = data
		case "xjl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xjl"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xjl = data
		case "clearXjl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearXjl"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearXjl = data
		case "xmglfYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfYs"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfYs = data
		case "clearXmglfYs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearXmglfYs"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearXmglfYs = data
		case "xmglfLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmglfLj"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.XmglfLj = data
		case "clearXmglfLj":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearXmglfLj"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearXmglfLj = data
		case "xmsjf":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmsjf"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmsjf = data
		case "clearXmsjf":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearXmsjf"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearXmsjf = data
		case "xmfzr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xmfzr"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Xmfzr = data
		case "clearXmfzr":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearXmfzr"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearXmfzr = data
		case "ownerApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyAmount = data
		case "clearOwnerApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerApplyAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerApplyAmount = data
		case "ownerApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApplyCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApplyCount = data
		case "clearOwnerApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerApplyCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerApplyCount = data
		case "ownerApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveAmount = data
		case "clearOwnerApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerApproveAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerApproveAmount = data
		case "ownerApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerApproveCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerApproveCount = data
		case "clearOwnerApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerApproveCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerApproveCount = data
		case "contractorApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyAmount = data
		case "clearContractorApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractorApplyAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractorApplyAmount = data
		case "contractorApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApplyCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApplyCount = data
		case "clearContractorApplyCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractorApplyCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractorApplyCount = data
		case "contractorApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveAmount = data
		case "clearContractorApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractorApproveAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractorApproveAmount = data
		case "contractorApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractorApproveCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractorApproveCount = data
		case "clearContractorApproveCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractorApproveCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractorApproveCount = data
		case "installProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installProgress"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstallProgress = data
		case "clearInstallProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearInstallProgress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearInstallProgress = data
		case "effectiveContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveContractAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveContractAmount = data
		case "clearEffectiveContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEffectiveContractAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEffectiveContractAmount = data
		case "vaApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApplyAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApplyAmount = data
		case "clearVaApplyAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVaApplyAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVaApplyAmount = data
		case "vaApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vaApproveAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VaApproveAmount = data
		case "clearVaApproveAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVaApproveAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVaApproveAmount = data
		case "accumulatedStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductions"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductions = data
		case "clearAccumulatedStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccumulatedStatutoryDeductions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccumulatedStatutoryDeductions = data
		case "accumulatedNonStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductions"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductions = data
		case "clearAccumulatedNonStatutoryDeductions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccumulatedNonStatutoryDeductions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccumulatedNonStatutoryDeductions = data
		case "accumulatedStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedStatutoryDeductionsPeriod = data
		case "clearAccumulatedStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccumulatedStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccumulatedStatutoryDeductionsPeriod = data
		case "accumulatedNonStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatedNonStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccumulatedNonStatutoryDeductionsPeriod = data
		case "clearAccumulatedNonStatutoryDeductionsPeriod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAccumulatedNonStatutoryDeductionsPeriod"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAccumulatedNonStatutoryDeductionsPeriod = data
		case "totalContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalContractAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalContractAmount = data
		case "clearTotalContractAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTotalContractAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTotalContractAmount = data
		case "aluminumPlateBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumPlateBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumPlateBudgetPercentage = data
		case "clearAluminumPlateBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAluminumPlateBudgetPercentage"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAluminumPlateBudgetPercentage = data
		case "aluminumBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aluminumBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AluminumBudgetPercentage = data
		case "clearAluminumBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAluminumBudgetPercentage"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAluminumBudgetPercentage = data
		case "glassBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("glassBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GlassBudgetPercentage = data
		case "clearGlassBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearGlassBudgetPercentage"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearGlassBudgetPercentage = data
		case "ironBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ironBudgetPercentage"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.IronBudgetPercentage = data
		case "clearIronBudgetPercentage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIronBudgetPercentage"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIronBudgetPercentage = data
		case "milestonePlanYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanYear"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanYear = data
		case "clearMilestonePlanYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMilestonePlanYear"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMilestonePlanYear = data
		case "milestonePlanMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestonePlanMonth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestonePlanMonth = data
		case "clearMilestonePlanMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMilestonePlanMonth"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMilestonePlanMonth = data
		case "milestoneDoneYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneYear"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneYear = data
		case "clearMilestoneDoneYear":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMilestoneDoneYear"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMilestoneDoneYear = data
		case "milestoneDoneMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("milestoneDoneMonth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MilestoneDoneMonth = data
		case "clearMilestoneDoneMonth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMilestoneDoneMonth"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMilestoneDoneMonth = data
		case "pmArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmArea"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmArea = data
		case "clearPmArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmArea"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmArea = data
		case "pmYearTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearTarget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearTarget = data
		case "clearPmYearTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmYearTarget"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmYearTarget = data
		case "pmMonthTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthTarget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthTarget = data
		case "clearPmMonthTarget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmMonthTarget"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmMonthTarget = data
		case "pmYearActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYearActual"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYearActual = data
		case "clearPmYearActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmYearActual"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmYearActual = data
		case "pmMonthActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmMonthActual"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmMonthActual = data
		case "clearPmMonthActual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmMonthActual"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmMonthActual = data
		case "pmTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmTotal = data
		case "clearPmTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmTotal"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmTotal = data
		case "pmYesterday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pmYesterday"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PmYesterday = data
		case "clearPmYesterday":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPmYesterday"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPmYesterday = data
		case "unitInventoryTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitInventoryTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitInventoryTotal = data
		case "clearUnitInventoryTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUnitInventoryTotal"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUnitInventoryTotal = data
		case "unitComponentTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentTotal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentTotal = data
		case "clearUnitComponentTotal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUnitComponentTotal"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUnitComponentTotal = data
		case "unitComponentProduction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentProduction"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentProduction = data
		case "clearUnitComponentProduction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUnitComponentProduction"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUnitComponentProduction = data
		case "unitComponentInstallation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitComponentInstallation"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitComponentInstallation = data
		case "clearUnitComponentInstallation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUnitComponentInstallation"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUnitComponentInstallation = data
		case "materialLoss":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("materialLoss"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaterialLoss = data
		case "clearMaterialLoss":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearMaterialLoss"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearMaterialLoss = data
		case "designRatedWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designRatedWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignRatedWeight = data
		case "clearDesignRatedWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDesignRatedWeight"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDesignRatedWeight = data
		case "processingWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processingWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessingWeight = data
		case "clearProcessingWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProcessingWeight"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProcessingWeight = data
		case "itemStockWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemStockWeight"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ItemStockWeight = data
		case "clearItemStockWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearItemStockWeight"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearItemStockWeight = data
		case "palletsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palletsInStock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PalletsInStock = data
		case "clearPalletsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPalletsInStock"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPalletsInStock = data
		case "partsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partsInStock"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PartsInStock = data
		case "clearPartsInStock":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPartsInStock"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPartsInStock = data
		case "qualityScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityScore"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityScore = data
		case "clearQualityScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearQualityScore"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearQualityScore = data
		case "qualityRanking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualityRanking"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.QualityRanking = data
		case "clearQualityRanking":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearQualityRanking"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearQualityRanking = data
		case "bulkMaterialsTotalOrderQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsTotalOrderQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsTotalOrderQuantity = data
		case "clearBulkMaterialsTotalOrderQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBulkMaterialsTotalOrderQuantity"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBulkMaterialsTotalOrderQuantity = data
		case "bulkMaterialsCompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsCompletedQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsCompletedQuantity = data
		case "clearBulkMaterialsCompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBulkMaterialsCompletedQuantity"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBulkMaterialsCompletedQuantity = data
		case "bulkMaterialsUncompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bulkMaterialsUncompletedQuantity"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BulkMaterialsUncompletedQuantity = data
		case "clearBulkMaterialsUncompletedQuantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBulkMaterialsUncompletedQuantity"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBulkMaterialsUncompletedQuantity = data
		case "planTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanTotalCount = data
		case "clearPlanTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPlanTotalCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPlanTotalCount = data
		case "planOverdueCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueCount = data
		case "clearPlanOverdueCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPlanOverdueCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPlanOverdueCount = data
		case "planOverdueMonthCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planOverdueMonthCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlanOverdueMonthCount = data
		case "clearPlanOverdueMonthCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPlanOverdueMonthCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPlanOverdueMonthCount = data
		case "diagramBdFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdFinishCount = data
		case "clearDiagramBdFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramBdFinishCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramBdFinishCount = data
		case "diagramBdTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramBdTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramBdTotalCount = data
		case "clearDiagramBdTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramBdTotalCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramBdTotalCount = data
		case "diagramConstructionFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionFinishCount = data
		case "clearDiagramConstructionFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramConstructionFinishCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramConstructionFinishCount = data
		case "diagramConstructionTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramConstructionTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramConstructionTotalCount = data
		case "clearDiagramConstructionTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramConstructionTotalCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramConstructionTotalCount = data
		case "diagramProcessingFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingFinishCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingFinishCount = data
		case "clearDiagramProcessingFinishCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramProcessingFinishCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramProcessingFinishCount = data
		case "diagramProcessingTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramProcessingTotalCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramProcessingTotalCount = data
		case "clearDiagramProcessingTotalCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramProcessingTotalCount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramProcessingTotalCount = data
		case "diagramCApprovalRatioNumerator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioNumerator"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioNumerator = data
		case "clearDiagramCApprovalRatioNumerator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramCApprovalRatioNumerator"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramCApprovalRatioNumerator = data
		case "diagramCApprovalRatioDenominator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramCApprovalRatioDenominator"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiagramCApprovalRatioDenominator = data
		case "clearDiagramCApprovalRatioDenominator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDiagramCApprovalRatioDenominator"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDiagramCApprovalRatioDenominator = data
		case "addVoIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addVoIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddVoIDs = data
		case "removeVoIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeVoIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveVoIDs = data
		case "clearVos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVos"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVos = data
		case "addProjectStaffIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProjectStaffIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProjectStaffIDs = data
		case "removeProjectStaffIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProjectStaffIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProjectStaffIDs = data
		case "clearProjectStaffs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjectStaffs"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjectStaffs = data
		case "addUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addUserIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddUserIDs = data
		case "removeUserIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeUserIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveUserIDs = data
		case "clearUsers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUsers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUsers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProvinceInput(ctx context.Context, obj interface{}) (ent.UpdateProvinceInput, error) {
	var it ent.UpdateProvinceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "adcode", "name", "addDistrictIDs", "removeDistrictIDs", "clearDistricts", "addCityIDs", "removeCityIDs", "clearCities", "countryID", "addTenderIDs", "removeTenderIDs", "clearTenders", "areaID", "clearArea"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "adcode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adcode"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adcode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "addDistrictIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addDistrictIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddDistrictIDs = data
		case "removeDistrictIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeDistrictIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveDistrictIDs = data
		case "clearDistricts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDistricts"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDistricts = data
		case "addCityIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCityIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCityIDs = data
		case "removeCityIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCityIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCityIDs = data
		case "clearCities":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCities"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCities = data
		case "countryID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryID = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "clearArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearArea"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearArea = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTenderCompetitorInput(ctx context.Context, obj interface{}) (ent.UpdateTenderCompetitorInput, error) {
	var it ent.UpdateTenderCompetitorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "amount", "tenderID", "competitorID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "competitorID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTenderInput(ctx context.Context, obj interface{}) (ent.UpdateTenderInput, error) {
	var it ent.UpdateTenderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "code", "status", "approvalStatus", "approvalMsgID", "clearApprovalMsgID", "name", "estimatedAmount", "clearEstimatedAmount", "tenderDate", "clearTenderDate", "classify", "clearClassify", "discoveryDate", "address", "clearAddress", "fullAddress", "clearFullAddress", "contractor", "clearContractor", "levelInvolved", "clearLevelInvolved", "sizeAndValueRating", "clearSizeAndValueRating", "sizeAndValueRatingOverview", "clearSizeAndValueRatingOverview", "creditAndPaymentRating", "clearCreditAndPaymentRating", "creditAndPaymentRatingOverview", "clearCreditAndPaymentRatingOverview", "timeLimitRating", "clearTimeLimitRating", "timeLimitRatingOverview", "clearTimeLimitRatingOverview", "customerRelationshipRating", "clearCustomerRelationshipRating", "customerRelationshipRatingOverview", "clearCustomerRelationshipRatingOverview", "competitivePartnershipRating", "clearCompetitivePartnershipRating", "competitivePartnershipRatingOverview", "clearCompetitivePartnershipRatingOverview", "prepareToBid", "projectCode", "clearProjectCode", "projectType", "clearProjectType", "projectDefinition", "clearProjectDefinition", "estimatedProjectStartDate", "clearEstimatedProjectStartDate", "estimatedProjectEndDate", "clearEstimatedProjectEndDate", "attachements", "appendAttachements", "clearAttachements", "remark", "clearRemark", "images", "appendImages", "clearImages", "tenderSituations", "clearTenderSituations", "ownerSituations", "clearOwnerSituations", "biddingInstructions", "clearBiddingInstructions", "competitorSituations", "clearCompetitorSituations", "costEngineer", "clearCostEngineer", "tenderForm", "clearTenderForm", "contractForm", "clearContractForm", "managementCompany", "clearManagementCompany", "tenderingAgency", "clearTenderingAgency", "biddingDate", "clearBiddingDate", "facadeConsultant", "clearFacadeConsultant", "designUnit", "clearDesignUnit", "consultingFirm", "clearConsultingFirm", "keyProject", "currentProgress", "clearCurrentProgress", "tenderWinCompany", "clearTenderWinCompany", "tenderCode", "clearTenderCode", "architect", "clearArchitect", "developer", "clearDeveloper", "tenderClosingDate", "clearTenderClosingDate", "constructionArea", "clearConstructionArea", "tenderWinDate", "clearTenderWinDate", "tenderWinAmount", "clearTenderWinAmount", "lastTenderAmount", "clearLastTenderAmount", "areaID", "addProfileIDs", "removeProfileIDs", "clearProfiles", "addCompetitorIDs", "removeCompetitorIDs", "clearCompetitors", "customerID", "clearCustomer", "finderID", "clearFinder", "createdByID", "clearCreatedBy", "addFollowingSaleIDs", "removeFollowingSaleIDs", "clearFollowingSales", "provinceID", "clearProvince", "cityID", "clearCity", "districtID", "clearDistrict", "addVisitRecordIDs", "removeVisitRecordIDs", "clearVisitRecords", "approverID", "clearApprover", "updatedByID", "clearUpdatedBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "approvalStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalStatus"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalStatus = data
		case "approvalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approvalMsgID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApprovalMsgID = data
		case "clearApprovalMsgID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprovalMsgID"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprovalMsgID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "estimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedAmount = data
		case "clearEstimatedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEstimatedAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEstimatedAmount = data
		case "tenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderDate = data
		case "clearTenderDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderDate = data
		case "classify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classify"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Classify = data
		case "clearClassify":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearClassify"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearClassify = data
		case "discoveryDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discoveryDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscoveryDate = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "clearAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAddress = data
		case "fullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullAddress = data
		case "clearFullAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFullAddress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFullAddress = data
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "clearContractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractor"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractor = data
		case "levelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelInvolved"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelInvolved = data
		case "clearLevelInvolved":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLevelInvolved"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLevelInvolved = data
		case "sizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRating = data
		case "clearSizeAndValueRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSizeAndValueRating"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSizeAndValueRating = data
		case "sizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeAndValueRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeAndValueRatingOverview = data
		case "clearSizeAndValueRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearSizeAndValueRatingOverview"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearSizeAndValueRatingOverview = data
		case "creditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRating = data
		case "clearCreditAndPaymentRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreditAndPaymentRating"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreditAndPaymentRating = data
		case "creditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreditAndPaymentRatingOverview = data
		case "clearCreditAndPaymentRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreditAndPaymentRatingOverview"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreditAndPaymentRatingOverview = data
		case "timeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRating = data
		case "clearTimeLimitRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTimeLimitRating"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTimeLimitRating = data
		case "timeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitRatingOverview = data
		case "clearTimeLimitRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTimeLimitRatingOverview"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTimeLimitRatingOverview = data
		case "customerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRating = data
		case "clearCustomerRelationshipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomerRelationshipRating"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomerRelationshipRating = data
		case "customerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerRelationshipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerRelationshipRatingOverview = data
		case "clearCustomerRelationshipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomerRelationshipRatingOverview"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomerRelationshipRatingOverview = data
		case "competitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRating"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRating = data
		case "clearCompetitivePartnershipRating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompetitivePartnershipRating"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompetitivePartnershipRating = data
		case "competitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitivePartnershipRatingOverview = data
		case "clearCompetitivePartnershipRatingOverview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompetitivePartnershipRatingOverview"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompetitivePartnershipRatingOverview = data
		case "prepareToBid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prepareToBid"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PrepareToBid = data
		case "projectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectCode = data
		case "clearProjectCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjectCode"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjectCode = data
		case "projectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectType = data
		case "clearProjectType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjectType"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjectType = data
		case "projectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectDefinition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectDefinition = data
		case "clearProjectDefinition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjectDefinition"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjectDefinition = data
		case "estimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectStartDate = data
		case "clearEstimatedProjectStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEstimatedProjectStartDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEstimatedProjectStartDate = data
		case "estimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedProjectEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedProjectEndDate = data
		case "clearEstimatedProjectEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEstimatedProjectEndDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEstimatedProjectEndDate = data
		case "attachements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachements"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Attachements = data
		case "appendAttachements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appendAttachements"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppendAttachements = data
		case "clearAttachements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAttachements"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAttachements = data
		case "remark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Remark = data
		case "clearRemark":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRemark"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRemark = data
		case "images":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Images = data
		case "appendImages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appendImages"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppendImages = data
		case "clearImages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearImages"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearImages = data
		case "tenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderSituations = data
		case "clearTenderSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderSituations"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderSituations = data
		case "ownerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerSituations = data
		case "clearOwnerSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOwnerSituations"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOwnerSituations = data
		case "biddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingInstructions"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingInstructions = data
		case "clearBiddingInstructions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBiddingInstructions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBiddingInstructions = data
		case "competitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("competitorSituations"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompetitorSituations = data
		case "clearCompetitorSituations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompetitorSituations"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompetitorSituations = data
		case "costEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costEngineer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostEngineer = data
		case "clearCostEngineer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCostEngineer"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCostEngineer = data
		case "tenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderForm = data
		case "clearTenderForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderForm"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderForm = data
		case "contractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractForm = data
		case "clearContractForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearContractForm"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearContractForm = data
		case "managementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managementCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagementCompany = data
		case "clearManagementCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearManagementCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearManagementCompany = data
		case "tenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderingAgency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderingAgency = data
		case "clearTenderingAgency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderingAgency"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderingAgency = data
		case "biddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("biddingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.BiddingDate = data
		case "clearBiddingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearBiddingDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearBiddingDate = data
		case "facadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facadeConsultant"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacadeConsultant = data
		case "clearFacadeConsultant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFacadeConsultant"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFacadeConsultant = data
		case "designUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("designUnit"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesignUnit = data
		case "clearDesignUnit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDesignUnit"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDesignUnit = data
		case "consultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultingFirm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultingFirm = data
		case "clearConsultingFirm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearConsultingFirm"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearConsultingFirm = data
		case "keyProject":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyProject"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyProject = data
		case "currentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentProgress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentProgress = data
		case "clearCurrentProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCurrentProgress"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCurrentProgress = data
		case "tenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinCompany"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinCompany = data
		case "clearTenderWinCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderWinCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderWinCompany = data
		case "tenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderCode = data
		case "clearTenderCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderCode"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderCode = data
		case "architect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("architect"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Architect = data
		case "clearArchitect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearArchitect"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearArchitect = data
		case "developer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("developer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Developer = data
		case "clearDeveloper":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDeveloper"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDeveloper = data
		case "tenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderClosingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderClosingDate = data
		case "clearTenderClosingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderClosingDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderClosingDate = data
		case "constructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constructionArea"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConstructionArea = data
		case "clearConstructionArea":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearConstructionArea"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearConstructionArea = data
		case "tenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinDate = data
		case "clearTenderWinDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderWinDate"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderWinDate = data
		case "tenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderWinAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderWinAmount = data
		case "clearTenderWinAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenderWinAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenderWinAmount = data
		case "lastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastTenderAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastTenderAmount = data
		case "clearLastTenderAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLastTenderAmount"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLastTenderAmount = data
		case "areaID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("areaID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.AreaID = data
		case "addProfileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProfileIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProfileIDs = data
		case "removeProfileIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProfileIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProfileIDs = data
		case "clearProfiles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProfiles"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProfiles = data
		case "addCompetitorIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCompetitorIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCompetitorIDs = data
		case "removeCompetitorIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCompetitorIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCompetitorIDs = data
		case "clearCompetitors":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompetitors"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompetitors = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "clearCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomer"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomer = data
		case "finderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinderID = data
		case "clearFinder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFinder"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFinder = data
		case "createdByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedByID = data
		case "clearCreatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedBy = data
		case "addFollowingSaleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addFollowingSaleIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddFollowingSaleIDs = data
		case "removeFollowingSaleIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeFollowingSaleIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveFollowingSaleIDs = data
		case "clearFollowingSales":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFollowingSales"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFollowingSales = data
		case "provinceID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provinceID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProvinceID = data
		case "clearProvince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProvince"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProvince = data
		case "cityID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cityID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CityID = data
		case "clearCity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCity"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCity = data
		case "districtID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("districtID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DistrictID = data
		case "clearDistrict":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDistrict"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearDistrict = data
		case "addVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddVisitRecordIDs = data
		case "removeVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveVisitRecordIDs = data
		case "clearVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVisitRecords"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVisitRecords = data
		case "approverID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approverID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApproverID = data
		case "clearApprover":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearApprover"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearApprover = data
		case "updatedByID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedByID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedByID = data
		case "clearUpdatedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (ent.UpdateUserInput, error) {
	var it ent.UpdateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "openID", "name", "clearName", "email", "clearEmail", "username", "clearUsername", "avatarURL", "clearAvatarURL", "disabled", "isAdmin", "isCeo", "isSuperAdmin", "hasMapAccess", "hasEditAccess", "addAreaIDs", "removeAreaIDs", "clearAreas", "addCustomerIDs", "removeCustomerIDs", "clearCustomers", "leaderID", "clearLeader", "addTeamMemberIDs", "removeTeamMemberIDs", "clearTeamMembers", "addTenderIDs", "removeTenderIDs", "clearTenders", "addVisitRecordIDs", "removeVisitRecordIDs", "clearVisitRecords", "addProjectIDs", "removeProjectIDs", "clearProjects"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "openID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "clearName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "clearEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEmail"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEmail = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "clearUsername":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUsername"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUsername = data
		case "avatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		case "clearAvatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAvatarURL"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAvatarURL = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		case "isCeo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCeo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCeo = data
		case "isSuperAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSuperAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsSuperAdmin = data
		case "hasMapAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMapAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMapAccess = data
		case "hasEditAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditAccess = data
		case "addAreaIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addAreaIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddAreaIDs = data
		case "removeAreaIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeAreaIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveAreaIDs = data
		case "clearAreas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearAreas"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearAreas = data
		case "addCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCustomerIDs = data
		case "removeCustomerIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCustomerIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCustomerIDs = data
		case "clearCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCustomers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCustomers = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "clearLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLeader"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLeader = data
		case "addTeamMemberIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTeamMemberIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTeamMemberIDs = data
		case "removeTeamMemberIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTeamMemberIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTeamMemberIDs = data
		case "clearTeamMembers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTeamMembers"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTeamMembers = data
		case "addTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddTenderIDs = data
		case "removeTenderIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeTenderIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveTenderIDs = data
		case "clearTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTenders"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTenders = data
		case "addVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddVisitRecordIDs = data
		case "removeVisitRecordIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeVisitRecordIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveVisitRecordIDs = data
		case "clearVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearVisitRecords"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearVisitRecords = data
		case "addProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addProjectIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddProjectIDs = data
		case "removeProjectIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProjectIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveProjectIDs = data
		case "clearProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProjects"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProjects = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateVisitRecordInput(ctx context.Context, obj interface{}) (ent.UpdateVisitRecordInput, error) {
	var it ent.UpdateVisitRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"updatedAt", "visitType", "commPeople", "commContent", "nextStep", "clearNextStep", "date", "tenderID", "clearTender", "customerID", "addFollowUpByIDs", "removeFollowUpByIDs", "clearFollowUpBys"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "visitType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitType = data
		case "commPeople":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeople"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeople = data
		case "commContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContent"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContent = data
		case "nextStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStep"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStep = data
		case "clearNextStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearNextStep"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearNextStep = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "clearTender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearTender"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearTender = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "addFollowUpByIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addFollowUpByIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddFollowUpByIDs = data
		case "removeFollowUpByIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeFollowUpByIDs"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveFollowUpByIDs = data
		case "clearFollowUpBys":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFollowUpBys"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFollowUpBys = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (ent.UserOrder, error) {
	var it ent.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNUserOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhereInput(ctx context.Context, obj interface{}) (ent.UserWhereInput, error) {
	var it ent.UserWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "openID", "openIDNEQ", "openIDIn", "openIDNotIn", "openIDGT", "openIDGTE", "openIDLT", "openIDLTE", "openIDContains", "openIDHasPrefix", "openIDHasSuffix", "openIDEqualFold", "openIDContainsFold", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "email", "emailNEQ", "emailIn", "emailNotIn", "emailGT", "emailGTE", "emailLT", "emailLTE", "emailContains", "emailHasPrefix", "emailHasSuffix", "emailIsNil", "emailNotNil", "emailEqualFold", "emailContainsFold", "username", "usernameNEQ", "usernameIn", "usernameNotIn", "usernameGT", "usernameGTE", "usernameLT", "usernameLTE", "usernameContains", "usernameHasPrefix", "usernameHasSuffix", "usernameIsNil", "usernameNotNil", "usernameEqualFold", "usernameContainsFold", "avatarURL", "avatarURLNEQ", "avatarURLIn", "avatarURLNotIn", "avatarURLGT", "avatarURLGTE", "avatarURLLT", "avatarURLLTE", "avatarURLContains", "avatarURLHasPrefix", "avatarURLHasSuffix", "avatarURLIsNil", "avatarURLNotNil", "avatarURLEqualFold", "avatarURLContainsFold", "disabled", "disabledNEQ", "isAdmin", "isAdminNEQ", "isCeo", "isCeoNEQ", "isSuperAdmin", "isSuperAdminNEQ", "hasMapAccess", "hasMapAccessNEQ", "hasEditAccess", "hasEditAccessNEQ", "leaderID", "leaderIDNEQ", "leaderIDIn", "leaderIDNotIn", "leaderIDGT", "leaderIDGTE", "leaderIDLT", "leaderIDLTE", "leaderIDContains", "leaderIDHasPrefix", "leaderIDHasSuffix", "leaderIDIsNil", "leaderIDNotNil", "leaderIDEqualFold", "leaderIDContainsFold", "hasAreas", "hasAreasWith", "hasCustomers", "hasCustomersWith", "hasLeader", "hasLeaderWith", "hasTeamMembers", "hasTeamMembersWith", "hasTenders", "hasTendersWith", "hasVisitRecords", "hasVisitRecordsWith", "hasProjects", "hasProjectsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "openID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenID = data
		case "openIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDNEQ = data
		case "openIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDIn = data
		case "openIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDNotIn = data
		case "openIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDGT = data
		case "openIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDGTE = data
		case "openIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDLT = data
		case "openIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDLTE = data
		case "openIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDContains = data
		case "openIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDHasPrefix = data
		case "openIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDHasSuffix = data
		case "openIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDEqualFold = data
		case "openIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openIDContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenIDContainsFold = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNEQ = data
		case "emailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIn = data
		case "emailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotIn = data
		case "emailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGT = data
		case "emailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailGTE = data
		case "emailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLT = data
		case "emailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailLTE = data
		case "emailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContains = data
		case "emailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasPrefix = data
		case "emailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailHasSuffix = data
		case "emailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailIsNil = data
		case "emailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailNotNil = data
		case "emailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailEqualFold = data
		case "emailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailContainsFold = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "usernameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNEQ = data
		case "usernameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameIn = data
		case "usernameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNotIn = data
		case "usernameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGT = data
		case "usernameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameGTE = data
		case "usernameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLT = data
		case "usernameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameLTE = data
		case "usernameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContains = data
		case "usernameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasPrefix = data
		case "usernameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameHasSuffix = data
		case "usernameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameIsNil = data
		case "usernameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameNotNil = data
		case "usernameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameEqualFold = data
		case "usernameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsernameContainsFold = data
		case "avatarURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		case "avatarURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLNEQ = data
		case "avatarURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLIn = data
		case "avatarURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLNotIn = data
		case "avatarURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLGT = data
		case "avatarURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLGTE = data
		case "avatarURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLLT = data
		case "avatarURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLLTE = data
		case "avatarURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLContains = data
		case "avatarURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLHasPrefix = data
		case "avatarURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLHasSuffix = data
		case "avatarURLIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLIsNil = data
		case "avatarURLNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLNotNil = data
		case "avatarURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLEqualFold = data
		case "avatarURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURLContainsFold = data
		case "disabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Disabled = data
		case "disabledNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisabledNEQ = data
		case "isAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdmin = data
		case "isAdminNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdminNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAdminNEQ = data
		case "isCeo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCeo"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCeo = data
		case "isCeoNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCeoNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCeoNEQ = data
		case "isSuperAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSuperAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsSuperAdmin = data
		case "isSuperAdminNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSuperAdminNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsSuperAdminNEQ = data
		case "hasMapAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMapAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMapAccess = data
		case "hasMapAccessNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMapAccessNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMapAccessNEQ = data
		case "hasEditAccess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditAccess"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditAccess = data
		case "hasEditAccessNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEditAccessNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEditAccessNEQ = data
		case "leaderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderID = data
		case "leaderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDNEQ = data
		case "leaderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDIn = data
		case "leaderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDNotIn = data
		case "leaderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDGT = data
		case "leaderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDGTE = data
		case "leaderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDLT = data
		case "leaderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDLTE = data
		case "leaderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDContains = data
		case "leaderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDHasPrefix = data
		case "leaderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDHasSuffix = data
		case "leaderIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDIsNil = data
		case "leaderIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDNotNil = data
		case "leaderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDEqualFold = data
		case "leaderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderIDContainsFold = data
		case "hasAreas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAreas"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAreas = data
		case "hasAreasWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasAreasWith"))
			data, err := ec.unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasAreasWith = data
		case "hasCustomers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomers = data
		case "hasCustomersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomersWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomersWith = data
		case "hasLeader":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeader"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeader = data
		case "hasLeaderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasLeaderWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasLeaderWith = data
		case "hasTeamMembers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTeamMembers"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTeamMembers = data
		case "hasTeamMembersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTeamMembersWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTeamMembersWith = data
		case "hasTenders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenders = data
		case "hasTendersWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTendersWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTendersWith = data
		case "hasVisitRecords":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecords"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecords = data
		case "hasVisitRecordsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVisitRecordsWith"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasVisitRecordsWith = data
		case "hasProjects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjects"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjects = data
		case "hasProjectsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProjectsWith"))
			data, err := ec.unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProjectsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVisitRecordOrder(ctx context.Context, obj interface{}) (ent.VisitRecordOrder, error) {
	var it ent.VisitRecordOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNVisitRecordOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVisitRecordWhereInput(ctx context.Context, obj interface{}) (ent.VisitRecordWhereInput, error) {
	var it ent.VisitRecordWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "createdAt", "createdAtNEQ", "createdAtIn", "createdAtNotIn", "createdAtGT", "createdAtGTE", "createdAtLT", "createdAtLTE", "updatedAt", "updatedAtNEQ", "updatedAtIn", "updatedAtNotIn", "updatedAtGT", "updatedAtGTE", "updatedAtLT", "updatedAtLTE", "visitType", "visitTypeNEQ", "visitTypeIn", "visitTypeNotIn", "visitTypeGT", "visitTypeGTE", "visitTypeLT", "visitTypeLTE", "commPeople", "commPeopleNEQ", "commPeopleIn", "commPeopleNotIn", "commPeopleGT", "commPeopleGTE", "commPeopleLT", "commPeopleLTE", "commPeopleContains", "commPeopleHasPrefix", "commPeopleHasSuffix", "commPeopleEqualFold", "commPeopleContainsFold", "commContent", "commContentNEQ", "commContentIn", "commContentNotIn", "commContentGT", "commContentGTE", "commContentLT", "commContentLTE", "commContentContains", "commContentHasPrefix", "commContentHasSuffix", "commContentEqualFold", "commContentContainsFold", "nextStep", "nextStepNEQ", "nextStepIn", "nextStepNotIn", "nextStepGT", "nextStepGTE", "nextStepLT", "nextStepLTE", "nextStepContains", "nextStepHasPrefix", "nextStepHasSuffix", "nextStepIsNil", "nextStepNotNil", "nextStepEqualFold", "nextStepContainsFold", "date", "dateNEQ", "dateIn", "dateNotIn", "dateGT", "dateGTE", "dateLT", "dateLTE", "tenderID", "tenderIDNEQ", "tenderIDIn", "tenderIDNotIn", "tenderIDGT", "tenderIDGTE", "tenderIDLT", "tenderIDLTE", "tenderIDContains", "tenderIDHasPrefix", "tenderIDHasSuffix", "tenderIDIsNil", "tenderIDNotNil", "tenderIDEqualFold", "tenderIDContainsFold", "customerID", "customerIDNEQ", "customerIDIn", "customerIDNotIn", "customerIDGT", "customerIDGTE", "customerIDLT", "customerIDLTE", "customerIDContains", "customerIDHasPrefix", "customerIDHasSuffix", "customerIDEqualFold", "customerIDContainsFold", "hasTender", "hasTenderWith", "hasCustomer", "hasCustomerWith", "hasFollowUpBys", "hasFollowUpBysWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNEQ = data
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDIn = data
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDNotIn = data
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGT = data
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDGTE = data
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLT = data
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IDLTE = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "createdAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNEQ = data
		case "createdAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtIn = data
		case "createdAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtNotIn = data
		case "createdAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGT = data
		case "createdAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtGTE = data
		case "createdAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLT = data
		case "createdAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAtLTE = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "updatedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNEQ = data
		case "updatedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtIn = data
		case "updatedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtNotIn = data
		case "updatedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGT = data
		case "updatedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtGTE = data
		case "updatedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLT = data
		case "updatedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAtLTE = data
		case "visitType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitType"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitType = data
		case "visitTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeNEQ = data
		case "visitTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeIn = data
		case "visitTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeNotIn = data
		case "visitTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeGT = data
		case "visitTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeGTE = data
		case "visitTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeLT = data
		case "visitTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitTypeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.VisitTypeLTE = data
		case "commPeople":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeople"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeople = data
		case "commPeopleNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleNEQ = data
		case "commPeopleIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleIn = data
		case "commPeopleNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleNotIn = data
		case "commPeopleGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleGT = data
		case "commPeopleGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleGTE = data
		case "commPeopleLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleLT = data
		case "commPeopleLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleLTE = data
		case "commPeopleContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleContains = data
		case "commPeopleHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleHasPrefix = data
		case "commPeopleHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleHasSuffix = data
		case "commPeopleEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleEqualFold = data
		case "commPeopleContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commPeopleContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommPeopleContainsFold = data
		case "commContent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContent"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContent = data
		case "commContentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentNEQ = data
		case "commContentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentIn = data
		case "commContentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentNotIn = data
		case "commContentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentGT = data
		case "commContentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentGTE = data
		case "commContentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentLT = data
		case "commContentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentLTE = data
		case "commContentContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentContains = data
		case "commContentHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentHasPrefix = data
		case "commContentHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentHasSuffix = data
		case "commContentEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentEqualFold = data
		case "commContentContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commContentContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommContentContainsFold = data
		case "nextStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStep"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStep = data
		case "nextStepNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepNEQ = data
		case "nextStepIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepIn = data
		case "nextStepNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepNotIn = data
		case "nextStepGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepGT = data
		case "nextStepGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepGTE = data
		case "nextStepLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepLT = data
		case "nextStepLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepLTE = data
		case "nextStepContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepContains = data
		case "nextStepHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepHasPrefix = data
		case "nextStepHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepHasSuffix = data
		case "nextStepIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepIsNil = data
		case "nextStepNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepNotNil = data
		case "nextStepEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepEqualFold = data
		case "nextStepContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextStepContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextStepContainsFold = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		case "dateNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNEQ = data
		case "dateIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateIn = data
		case "dateNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateNotIn = data
		case "dateGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGT = data
		case "dateGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateGTE = data
		case "dateLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLT = data
		case "dateLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateLTE = data
		case "tenderID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderID = data
		case "tenderIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNEQ = data
		case "tenderIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDIn = data
		case "tenderIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNotIn = data
		case "tenderIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGT = data
		case "tenderIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDGTE = data
		case "tenderIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLT = data
		case "tenderIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDLTE = data
		case "tenderIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContains = data
		case "tenderIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasPrefix = data
		case "tenderIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDHasSuffix = data
		case "tenderIDIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDIsNil = data
		case "tenderIDNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDNotNil = data
		case "tenderIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDEqualFold = data
		case "tenderIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenderIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenderIDContainsFold = data
		case "customerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerID"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerID = data
		case "customerIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNEQ"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNEQ = data
		case "customerIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDIn = data
		case "customerIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDNotIn"))
			data, err := ec.unmarshalOID2ᚕcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDNotIn = data
		case "customerIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGT = data
		case "customerIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDGTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDGTE = data
		case "customerIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLT"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLT = data
		case "customerIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDLTE"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDLTE = data
		case "customerIDContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContains"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContains = data
		case "customerIDHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasPrefix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasPrefix = data
		case "customerIDHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDHasSuffix"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDHasSuffix = data
		case "customerIDEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDEqualFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDEqualFold = data
		case "customerIDContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerIDContainsFold"))
			data, err := ec.unmarshalOID2ᚖcscdᚑbdsᚋstoreᚋentᚋschemaᚋxidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomerIDContainsFold = data
		case "hasTender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTender"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTender = data
		case "hasTenderWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTenderWith"))
			data, err := ec.unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTenderWith = data
		case "hasCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomer = data
		case "hasCustomerWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCustomerWith"))
			data, err := ec.unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCustomerWith = data
		case "hasFollowUpBys":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFollowUpBys"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFollowUpBys = data
		case "hasFollowUpBysWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasFollowUpBysWith"))
			data, err := ec.unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasFollowUpBysWith = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.Area:
		if obj == nil {
			return graphql.Null
		}
		return ec._Area(ctx, sel, obj)
	case *ent.City:
		if obj == nil {
			return graphql.Null
		}
		return ec._City(ctx, sel, obj)
	case *ent.Competitor:
		if obj == nil {
			return graphql.Null
		}
		return ec._Competitor(ctx, sel, obj)
	case *ent.Country:
		if obj == nil {
			return graphql.Null
		}
		return ec._Country(ctx, sel, obj)
	case *ent.Customer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Customer(ctx, sel, obj)
	case *ent.District:
		if obj == nil {
			return graphql.Null
		}
		return ec._District(ctx, sel, obj)
	case *ent.Operation:
		if obj == nil {
			return graphql.Null
		}
		return ec._Operation(ctx, sel, obj)
	case *ent.Plot:
		if obj == nil {
			return graphql.Null
		}
		return ec._Plot(ctx, sel, obj)
	case *ent.PotentialTender:
		if obj == nil {
			return graphql.Null
		}
		return ec._PotentialTender(ctx, sel, obj)
	case *ent.Project:
		if obj == nil {
			return graphql.Null
		}
		return ec._Project(ctx, sel, obj)
	case *ent.ProjectStaff:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProjectStaff(ctx, sel, obj)
	case *ent.ProjectVO:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProjectVO(ctx, sel, obj)
	case *ent.Province:
		if obj == nil {
			return graphql.Null
		}
		return ec._Province(ctx, sel, obj)
	case *ent.Tender:
		if obj == nil {
			return graphql.Null
		}
		return ec._Tender(ctx, sel, obj)
	case *ent.TenderCompetitor:
		if obj == nil {
			return graphql.Null
		}
		return ec._TenderCompetitor(ctx, sel, obj)
	case *ent.TenderProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._TenderProfile(ctx, sel, obj)
	case *ent.User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	case *ent.VisitRecord:
		if obj == nil {
			return graphql.Null
		}
		return ec._VisitRecord(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var areaImplementors = []string{"Area", "Node"}

func (ec *executionContext) _Area(ctx context.Context, sel ast.SelectionSet, obj *ent.Area) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Area")
		case "id":
			out.Values[i] = ec._Area_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Area_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Area_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Area_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Area_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "leaderChatID":
			out.Values[i] = ec._Area_leaderChatID(ctx, field, obj)
		case "salesChatID":
			out.Values[i] = ec._Area_salesChatID(ctx, field, obj)
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Area_customers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Area_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Area_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "provinces":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Area_provinces(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "center":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Area_center(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var areaConnectionImplementors = []string{"AreaConnection"}

func (ec *executionContext) _AreaConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.AreaConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaConnection")
		case "edges":
			out.Values[i] = ec._AreaConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AreaConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._AreaConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var areaEdgeImplementors = []string{"AreaEdge"}

func (ec *executionContext) _AreaEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.AreaEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, areaEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AreaEdge")
		case "node":
			out.Values[i] = ec._AreaEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._AreaEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cityImplementors = []string{"City", "Node"}

func (ec *executionContext) _City(ctx context.Context, sel ast.SelectionSet, obj *ent.City) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("City")
		case "id":
			out.Values[i] = ec._City_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._City_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._City_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "adcode":
			out.Values[i] = ec._City_adcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provCode":
			out.Values[i] = ec._City_provCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._City_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provinceID":
			out.Values[i] = ec._City_provinceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "districts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._City_districts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "province":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._City_province(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._City_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "center":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._City_center(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cityConnectionImplementors = []string{"CityConnection"}

func (ec *executionContext) _CityConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CityConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CityConnection")
		case "edges":
			out.Values[i] = ec._CityConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CityConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CityConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cityEdgeImplementors = []string{"CityEdge"}

func (ec *executionContext) _CityEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CityEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CityEdge")
		case "node":
			out.Values[i] = ec._CityEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CityEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competitorImplementors = []string{"Competitor", "Node"}

func (ec *executionContext) _Competitor(ctx context.Context, sel ast.SelectionSet, obj *ent.Competitor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competitorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Competitor")
		case "id":
			out.Values[i] = ec._Competitor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Competitor_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Competitor_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shortName":
			out.Values[i] = ec._Competitor_shortName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Competitor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Competitor_tenders(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competitorConnectionImplementors = []string{"CompetitorConnection"}

func (ec *executionContext) _CompetitorConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CompetitorConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competitorConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompetitorConnection")
		case "edges":
			out.Values[i] = ec._CompetitorConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CompetitorConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CompetitorConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var competitorEdgeImplementors = []string{"CompetitorEdge"}

func (ec *executionContext) _CompetitorEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CompetitorEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, competitorEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompetitorEdge")
		case "node":
			out.Values[i] = ec._CompetitorEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CompetitorEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryImplementors = []string{"Country", "Node"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *ent.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "id":
			out.Values[i] = ec._Country_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Country_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Country_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "adcode":
			out.Values[i] = ec._Country_adcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Country_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provinces":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Country_provinces(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "center":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Country_center(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryConnectionImplementors = []string{"CountryConnection"}

func (ec *executionContext) _CountryConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CountryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountryConnection")
		case "edges":
			out.Values[i] = ec._CountryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CountryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CountryConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryEdgeImplementors = []string{"CountryEdge"}

func (ec *executionContext) _CountryEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CountryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CountryEdge")
		case "node":
			out.Values[i] = ec._CountryEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CountryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerImplementors = []string{"Customer", "Node"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *ent.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Customer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Customer_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Customer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvalStatus":
			out.Values[i] = ec._Customer_approvalStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ownerType":
			out.Values[i] = ec._Customer_ownerType(ctx, field, obj)
		case "industry":
			out.Values[i] = ec._Customer_industry(ctx, field, obj)
		case "size":
			out.Values[i] = ec._Customer_size(ctx, field, obj)
		case "contactPerson":
			out.Values[i] = ec._Customer_contactPerson(ctx, field, obj)
		case "contactPersonPosition":
			out.Values[i] = ec._Customer_contactPersonPosition(ctx, field, obj)
		case "contactPersonPhone":
			out.Values[i] = ec._Customer_contactPersonPhone(ctx, field, obj)
		case "contactPersonEmail":
			out.Values[i] = ec._Customer_contactPersonEmail(ctx, field, obj)
		case "areaID":
			out.Values[i] = ec._Customer_areaID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "salesID":
			out.Values[i] = ec._Customer_salesID(ctx, field, obj)
		case "createdByID":
			out.Values[i] = ec._Customer_createdByID(ctx, field, obj)
		case "updatedByID":
			out.Values[i] = ec._Customer_updatedByID(ctx, field, obj)
		case "approverID":
			out.Values[i] = ec._Customer_approverID(ctx, field, obj)
		case "area":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_area(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sales":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_sales(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_updatedBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_approver(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "visitRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_visitRecords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "draft":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Customer_draft(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerConnectionImplementors = []string{"CustomerConnection"}

func (ec *executionContext) _CustomerConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.CustomerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerConnection")
		case "edges":
			out.Values[i] = ec._CustomerConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CustomerConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CustomerConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerEdgeImplementors = []string{"CustomerEdge"}

func (ec *executionContext) _CustomerEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CustomerEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerEdge")
		case "node":
			out.Values[i] = ec._CustomerEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CustomerEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var districtImplementors = []string{"District", "Node"}

func (ec *executionContext) _District(ctx context.Context, sel ast.SelectionSet, obj *ent.District) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("District")
		case "id":
			out.Values[i] = ec._District_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._District_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._District_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "adcode":
			out.Values[i] = ec._District_adcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provCode":
			out.Values[i] = ec._District_provCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cityCode":
			out.Values[i] = ec._District_cityCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._District_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provinceID":
			out.Values[i] = ec._District_provinceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cityID":
			out.Values[i] = ec._District_cityID(ctx, field, obj)
		case "province":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._District_province(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "city":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._District_city(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._District_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "plots":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._District_plots(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "center":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._District_center(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var districtConnectionImplementors = []string{"DistrictConnection"}

func (ec *executionContext) _DistrictConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.DistrictConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictConnection")
		case "edges":
			out.Values[i] = ec._DistrictConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._DistrictConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._DistrictConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var districtEdgeImplementors = []string{"DistrictEdge"}

func (ec *executionContext) _DistrictEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.DistrictEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DistrictEdge")
		case "node":
			out.Values[i] = ec._DistrictEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._DistrictEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var operationImplementors = []string{"Operation", "Node"}

func (ec *executionContext) _Operation(ctx context.Context, sel ast.SelectionSet, obj *ent.Operation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Operation")
		case "id":
			out.Values[i] = ec._Operation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Operation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Operation_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cjeYs":
			out.Values[i] = ec._Operation_cjeYs(ctx, field, obj)
		case "cjeLj":
			out.Values[i] = ec._Operation_cjeLj(ctx, field, obj)
		case "yyeYs":
			out.Values[i] = ec._Operation_yyeYs(ctx, field, obj)
		case "yyeLj":
			out.Values[i] = ec._Operation_yyeLj(ctx, field, obj)
		case "xjlYs":
			out.Values[i] = ec._Operation_xjlYs(ctx, field, obj)
		case "xjlLj":
			out.Values[i] = ec._Operation_xjlLj(ctx, field, obj)
		case "xmglf":
			out.Values[i] = ec._Operation_xmglf(ctx, field, obj)
		case "xmsjf":
			out.Values[i] = ec._Operation_xmsjf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var operationConnectionImplementors = []string{"OperationConnection"}

func (ec *executionContext) _OperationConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.OperationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationConnection")
		case "edges":
			out.Values[i] = ec._OperationConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._OperationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._OperationConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var operationEdgeImplementors = []string{"OperationEdge"}

func (ec *executionContext) _OperationEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.OperationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationEdge")
		case "node":
			out.Values[i] = ec._OperationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._OperationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[xid.ID]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var plotImplementors = []string{"Plot", "Node"}

func (ec *executionContext) _Plot(ctx context.Context, sel ast.SelectionSet, obj *ent.Plot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, plotImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Plot")
		case "id":
			out.Values[i] = ec._Plot_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Plot_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Plot_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Plot_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "colorHex":
			out.Values[i] = ec._Plot_colorHex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "districtID":
			out.Values[i] = ec._Plot_districtID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "district":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Plot_district(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "geoBounds":
			out.Values[i] = ec._Plot_geoBounds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var plotConnectionImplementors = []string{"PlotConnection"}

func (ec *executionContext) _PlotConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.PlotConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, plotConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlotConnection")
		case "edges":
			out.Values[i] = ec._PlotConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PlotConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PlotConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var plotEdgeImplementors = []string{"PlotEdge"}

func (ec *executionContext) _PlotEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.PlotEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, plotEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlotEdge")
		case "node":
			out.Values[i] = ec._PlotEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._PlotEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var potentialTenderImplementors = []string{"PotentialTender", "Node"}

func (ec *executionContext) _PotentialTender(ctx context.Context, sel ast.SelectionSet, obj *ent.PotentialTender) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, potentialTenderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PotentialTender")
		case "id":
			out.Values[i] = ec._PotentialTender_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._PotentialTender_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PotentialTender_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refURL":
			out.Values[i] = ec._PotentialTender_refURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._PotentialTender_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._PotentialTender_description(ctx, field, obj)
		case "requirement":
			out.Values[i] = ec._PotentialTender_requirement(ctx, field, obj)
		case "address":
			out.Values[i] = ec._PotentialTender_address(ctx, field, obj)
		case "date":
			out.Values[i] = ec._PotentialTender_date(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PotentialTender_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._PotentialTender_status(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._PotentialTender_amount(ctx, field, obj)
		case "size":
			out.Values[i] = ec._PotentialTender_size(ctx, field, obj)
		case "location":
			out.Values[i] = ec._PotentialTender_location(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._PotentialTender_contact(ctx, field, obj)
		case "contactPhone":
			out.Values[i] = ec._PotentialTender_contactPhone(ctx, field, obj)
		case "contactEmail":
			out.Values[i] = ec._PotentialTender_contactEmail(ctx, field, obj)
		case "contactAddress":
			out.Values[i] = ec._PotentialTender_contactAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var potentialTenderConnectionImplementors = []string{"PotentialTenderConnection"}

func (ec *executionContext) _PotentialTenderConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.PotentialTenderConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, potentialTenderConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PotentialTenderConnection")
		case "edges":
			out.Values[i] = ec._PotentialTenderConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PotentialTenderConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._PotentialTenderConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var potentialTenderEdgeImplementors = []string{"PotentialTenderEdge"}

func (ec *executionContext) _PotentialTenderEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.PotentialTenderEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, potentialTenderEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PotentialTenderEdge")
		case "node":
			out.Values[i] = ec._PotentialTenderEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._PotentialTenderEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectImplementors = []string{"Project", "Node"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *ent.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Project_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Project_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Project_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "manager":
			out.Values[i] = ec._Project_manager(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._Project_owner(ctx, field, obj)
		case "jzs":
			out.Values[i] = ec._Project_jzs(ctx, field, obj)
		case "mcn":
			out.Values[i] = ec._Project_mcn(ctx, field, obj)
		case "consultant":
			out.Values[i] = ec._Project_consultant(ctx, field, obj)
		case "areas":
			out.Values[i] = ec._Project_areas(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._Project_startDate(ctx, field, obj)
		case "fsDate":
			out.Values[i] = ec._Project_fsDate(ctx, field, obj)
		case "opDate":
			out.Values[i] = ec._Project_opDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Project_endDate(ctx, field, obj)
		case "mntyr":
			out.Values[i] = ec._Project_mntyr(ctx, field, obj)
		case "conType":
			out.Values[i] = ec._Project_conType(ctx, field, obj)
		case "isFinished":
			out.Values[i] = ec._Project_isFinished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cje":
			out.Values[i] = ec._Project_cje(ctx, field, obj)
		case "yye":
			out.Values[i] = ec._Project_yye(ctx, field, obj)
		case "xjl":
			out.Values[i] = ec._Project_xjl(ctx, field, obj)
		case "xmglfYs":
			out.Values[i] = ec._Project_xmglfYs(ctx, field, obj)
		case "xmglfLj":
			out.Values[i] = ec._Project_xmglfLj(ctx, field, obj)
		case "xmsjf":
			out.Values[i] = ec._Project_xmsjf(ctx, field, obj)
		case "xmfzr":
			out.Values[i] = ec._Project_xmfzr(ctx, field, obj)
		case "ownerApplyAmount":
			out.Values[i] = ec._Project_ownerApplyAmount(ctx, field, obj)
		case "ownerApplyCount":
			out.Values[i] = ec._Project_ownerApplyCount(ctx, field, obj)
		case "ownerApproveAmount":
			out.Values[i] = ec._Project_ownerApproveAmount(ctx, field, obj)
		case "ownerApproveCount":
			out.Values[i] = ec._Project_ownerApproveCount(ctx, field, obj)
		case "contractorApplyAmount":
			out.Values[i] = ec._Project_contractorApplyAmount(ctx, field, obj)
		case "contractorApplyCount":
			out.Values[i] = ec._Project_contractorApplyCount(ctx, field, obj)
		case "contractorApproveAmount":
			out.Values[i] = ec._Project_contractorApproveAmount(ctx, field, obj)
		case "contractorApproveCount":
			out.Values[i] = ec._Project_contractorApproveCount(ctx, field, obj)
		case "installProgress":
			out.Values[i] = ec._Project_installProgress(ctx, field, obj)
		case "effectiveContractAmount":
			out.Values[i] = ec._Project_effectiveContractAmount(ctx, field, obj)
		case "vaApplyAmount":
			out.Values[i] = ec._Project_vaApplyAmount(ctx, field, obj)
		case "vaApproveAmount":
			out.Values[i] = ec._Project_vaApproveAmount(ctx, field, obj)
		case "accumulatedStatutoryDeductions":
			out.Values[i] = ec._Project_accumulatedStatutoryDeductions(ctx, field, obj)
		case "accumulatedNonStatutoryDeductions":
			out.Values[i] = ec._Project_accumulatedNonStatutoryDeductions(ctx, field, obj)
		case "accumulatedStatutoryDeductionsPeriod":
			out.Values[i] = ec._Project_accumulatedStatutoryDeductionsPeriod(ctx, field, obj)
		case "accumulatedNonStatutoryDeductionsPeriod":
			out.Values[i] = ec._Project_accumulatedNonStatutoryDeductionsPeriod(ctx, field, obj)
		case "totalContractAmount":
			out.Values[i] = ec._Project_totalContractAmount(ctx, field, obj)
		case "aluminumPlateBudgetPercentage":
			out.Values[i] = ec._Project_aluminumPlateBudgetPercentage(ctx, field, obj)
		case "aluminumBudgetPercentage":
			out.Values[i] = ec._Project_aluminumBudgetPercentage(ctx, field, obj)
		case "glassBudgetPercentage":
			out.Values[i] = ec._Project_glassBudgetPercentage(ctx, field, obj)
		case "ironBudgetPercentage":
			out.Values[i] = ec._Project_ironBudgetPercentage(ctx, field, obj)
		case "milestonePlanYear":
			out.Values[i] = ec._Project_milestonePlanYear(ctx, field, obj)
		case "milestonePlanMonth":
			out.Values[i] = ec._Project_milestonePlanMonth(ctx, field, obj)
		case "milestoneDoneYear":
			out.Values[i] = ec._Project_milestoneDoneYear(ctx, field, obj)
		case "milestoneDoneMonth":
			out.Values[i] = ec._Project_milestoneDoneMonth(ctx, field, obj)
		case "pmArea":
			out.Values[i] = ec._Project_pmArea(ctx, field, obj)
		case "pmYearTarget":
			out.Values[i] = ec._Project_pmYearTarget(ctx, field, obj)
		case "pmMonthTarget":
			out.Values[i] = ec._Project_pmMonthTarget(ctx, field, obj)
		case "pmYearActual":
			out.Values[i] = ec._Project_pmYearActual(ctx, field, obj)
		case "pmMonthActual":
			out.Values[i] = ec._Project_pmMonthActual(ctx, field, obj)
		case "pmTotal":
			out.Values[i] = ec._Project_pmTotal(ctx, field, obj)
		case "pmYesterday":
			out.Values[i] = ec._Project_pmYesterday(ctx, field, obj)
		case "unitInventoryTotal":
			out.Values[i] = ec._Project_unitInventoryTotal(ctx, field, obj)
		case "unitComponentTotal":
			out.Values[i] = ec._Project_unitComponentTotal(ctx, field, obj)
		case "unitComponentProduction":
			out.Values[i] = ec._Project_unitComponentProduction(ctx, field, obj)
		case "unitComponentInstallation":
			out.Values[i] = ec._Project_unitComponentInstallation(ctx, field, obj)
		case "materialLoss":
			out.Values[i] = ec._Project_materialLoss(ctx, field, obj)
		case "designRatedWeight":
			out.Values[i] = ec._Project_designRatedWeight(ctx, field, obj)
		case "processingWeight":
			out.Values[i] = ec._Project_processingWeight(ctx, field, obj)
		case "itemStockWeight":
			out.Values[i] = ec._Project_itemStockWeight(ctx, field, obj)
		case "palletsInStock":
			out.Values[i] = ec._Project_palletsInStock(ctx, field, obj)
		case "partsInStock":
			out.Values[i] = ec._Project_partsInStock(ctx, field, obj)
		case "qualityScore":
			out.Values[i] = ec._Project_qualityScore(ctx, field, obj)
		case "qualityRanking":
			out.Values[i] = ec._Project_qualityRanking(ctx, field, obj)
		case "bulkMaterialsTotalOrderQuantity":
			out.Values[i] = ec._Project_bulkMaterialsTotalOrderQuantity(ctx, field, obj)
		case "bulkMaterialsCompletedQuantity":
			out.Values[i] = ec._Project_bulkMaterialsCompletedQuantity(ctx, field, obj)
		case "bulkMaterialsUncompletedQuantity":
			out.Values[i] = ec._Project_bulkMaterialsUncompletedQuantity(ctx, field, obj)
		case "planTotalCount":
			out.Values[i] = ec._Project_planTotalCount(ctx, field, obj)
		case "planOverdueCount":
			out.Values[i] = ec._Project_planOverdueCount(ctx, field, obj)
		case "planOverdueMonthCount":
			out.Values[i] = ec._Project_planOverdueMonthCount(ctx, field, obj)
		case "diagramBdFinishCount":
			out.Values[i] = ec._Project_diagramBdFinishCount(ctx, field, obj)
		case "diagramBdTotalCount":
			out.Values[i] = ec._Project_diagramBdTotalCount(ctx, field, obj)
		case "diagramConstructionFinishCount":
			out.Values[i] = ec._Project_diagramConstructionFinishCount(ctx, field, obj)
		case "diagramConstructionTotalCount":
			out.Values[i] = ec._Project_diagramConstructionTotalCount(ctx, field, obj)
		case "diagramProcessingFinishCount":
			out.Values[i] = ec._Project_diagramProcessingFinishCount(ctx, field, obj)
		case "diagramProcessingTotalCount":
			out.Values[i] = ec._Project_diagramProcessingTotalCount(ctx, field, obj)
		case "diagramCApprovalRatioNumerator":
			out.Values[i] = ec._Project_diagramCApprovalRatioNumerator(ctx, field, obj)
		case "diagramCApprovalRatioDenominator":
			out.Values[i] = ec._Project_diagramCApprovalRatioDenominator(ctx, field, obj)
		case "vos":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_vos(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectStaffs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_projectStaffs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Project_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectConnectionImplementors = []string{"ProjectConnection"}

func (ec *executionContext) _ProjectConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectConnection")
		case "edges":
			out.Values[i] = ec._ProjectConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProjectConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProjectConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectEdgeImplementors = []string{"ProjectEdge"}

func (ec *executionContext) _ProjectEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectEdge")
		case "node":
			out.Values[i] = ec._ProjectEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectStaffImplementors = []string{"ProjectStaff", "Node"}

func (ec *executionContext) _ProjectStaff(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectStaff) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectStaffImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectStaff")
		case "id":
			out.Values[i] = ec._ProjectStaff_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ProjectStaff_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ProjectStaff_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cym":
			out.Values[i] = ec._ProjectStaff_cym(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "installation":
			out.Values[i] = ec._ProjectStaff_installation(ctx, field, obj)
		case "management":
			out.Values[i] = ec._ProjectStaff_management(ctx, field, obj)
		case "design":
			out.Values[i] = ec._ProjectStaff_design(ctx, field, obj)
		case "projectID":
			out.Values[i] = ec._ProjectStaff_projectID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "project":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectStaff_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectStaffConnectionImplementors = []string{"ProjectStaffConnection"}

func (ec *executionContext) _ProjectStaffConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectStaffConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectStaffConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectStaffConnection")
		case "edges":
			out.Values[i] = ec._ProjectStaffConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProjectStaffConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProjectStaffConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectStaffEdgeImplementors = []string{"ProjectStaffEdge"}

func (ec *executionContext) _ProjectStaffEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectStaffEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectStaffEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectStaffEdge")
		case "node":
			out.Values[i] = ec._ProjectStaffEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProjectStaffEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectVOImplementors = []string{"ProjectVO", "Node"}

func (ec *executionContext) _ProjectVO(ctx context.Context, sel ast.SelectionSet, obj *ent.ProjectVO) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectVOImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectVO")
		case "id":
			out.Values[i] = ec._ProjectVO_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ProjectVO_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ProjectVO_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "projectID":
			out.Values[i] = ec._ProjectVO_projectID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "changeType":
			out.Values[i] = ec._ProjectVO_changeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isApproved":
			out.Values[i] = ec._ProjectVO_isApproved(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "azjd":
			out.Values[i] = ec._ProjectVO_azjd(ctx, field, obj)
		case "yxhyze":
			out.Values[i] = ec._ProjectVO_yxhyze(ctx, field, obj)
		case "applyAmount":
			out.Values[i] = ec._ProjectVO_applyAmount(ctx, field, obj)
		case "approveAmount":
			out.Values[i] = ec._ProjectVO_approveAmount(ctx, field, obj)
		case "project":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ProjectVO_project(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var provinceImplementors = []string{"Province", "Node"}

func (ec *executionContext) _Province(ctx context.Context, sel ast.SelectionSet, obj *ent.Province) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, provinceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Province")
		case "id":
			out.Values[i] = ec._Province_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Province_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Province_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "adcode":
			out.Values[i] = ec._Province_adcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Province_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "countryID":
			out.Values[i] = ec._Province_countryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "areaID":
			out.Values[i] = ec._Province_areaID(ctx, field, obj)
		case "districts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_districts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_cities(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "country":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_country(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "area":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_area(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "center":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Province_center(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var provinceConnectionImplementors = []string{"ProvinceConnection"}

func (ec *executionContext) _ProvinceConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.ProvinceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, provinceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProvinceConnection")
		case "edges":
			out.Values[i] = ec._ProvinceConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ProvinceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._ProvinceConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var provinceEdgeImplementors = []string{"ProvinceEdge"}

func (ec *executionContext) _ProvinceEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.ProvinceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, provinceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProvinceEdge")
		case "node":
			out.Values[i] = ec._ProvinceEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ProvinceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "areas":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_areas(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "competitors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_competitors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "countries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_countries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_customers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "districts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_districts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "operations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "plots":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_plots(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "potentialTenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_potentialTenders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projects":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projectStaffs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectStaffs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "provinces":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_provinces(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenderCompetitors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenderCompetitors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenderProfiles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenderProfiles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "visitRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_visitRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "searchFeishuUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFeishuUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "searchLocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "inputtips":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_inputtips(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "amapRegeo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_amapRegeo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "topCompetitors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_topCompetitors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "biToken":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_biToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "session":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_session(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderImplementors = []string{"Tender", "Node"}

func (ec *executionContext) _Tender(ctx context.Context, sel ast.SelectionSet, obj *ent.Tender) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tender")
		case "id":
			out.Values[i] = ec._Tender_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Tender_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Tender_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Tender_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Tender_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvalStatus":
			out.Values[i] = ec._Tender_approvalStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvalMsgID":
			out.Values[i] = ec._Tender_approvalMsgID(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Tender_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "estimatedAmount":
			out.Values[i] = ec._Tender_estimatedAmount(ctx, field, obj)
		case "tenderDate":
			out.Values[i] = ec._Tender_tenderDate(ctx, field, obj)
		case "classify":
			out.Values[i] = ec._Tender_classify(ctx, field, obj)
		case "discoveryDate":
			out.Values[i] = ec._Tender_discoveryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._Tender_address(ctx, field, obj)
		case "fullAddress":
			out.Values[i] = ec._Tender_fullAddress(ctx, field, obj)
		case "contractor":
			out.Values[i] = ec._Tender_contractor(ctx, field, obj)
		case "levelInvolved":
			out.Values[i] = ec._Tender_levelInvolved(ctx, field, obj)
		case "sizeAndValueRating":
			out.Values[i] = ec._Tender_sizeAndValueRating(ctx, field, obj)
		case "sizeAndValueRatingOverview":
			out.Values[i] = ec._Tender_sizeAndValueRatingOverview(ctx, field, obj)
		case "creditAndPaymentRating":
			out.Values[i] = ec._Tender_creditAndPaymentRating(ctx, field, obj)
		case "creditAndPaymentRatingOverview":
			out.Values[i] = ec._Tender_creditAndPaymentRatingOverview(ctx, field, obj)
		case "timeLimitRating":
			out.Values[i] = ec._Tender_timeLimitRating(ctx, field, obj)
		case "timeLimitRatingOverview":
			out.Values[i] = ec._Tender_timeLimitRatingOverview(ctx, field, obj)
		case "customerRelationshipRating":
			out.Values[i] = ec._Tender_customerRelationshipRating(ctx, field, obj)
		case "customerRelationshipRatingOverview":
			out.Values[i] = ec._Tender_customerRelationshipRatingOverview(ctx, field, obj)
		case "competitivePartnershipRating":
			out.Values[i] = ec._Tender_competitivePartnershipRating(ctx, field, obj)
		case "competitivePartnershipRatingOverview":
			out.Values[i] = ec._Tender_competitivePartnershipRatingOverview(ctx, field, obj)
		case "prepareToBid":
			out.Values[i] = ec._Tender_prepareToBid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "projectCode":
			out.Values[i] = ec._Tender_projectCode(ctx, field, obj)
		case "projectType":
			out.Values[i] = ec._Tender_projectType(ctx, field, obj)
		case "projectDefinition":
			out.Values[i] = ec._Tender_projectDefinition(ctx, field, obj)
		case "estimatedProjectStartDate":
			out.Values[i] = ec._Tender_estimatedProjectStartDate(ctx, field, obj)
		case "estimatedProjectEndDate":
			out.Values[i] = ec._Tender_estimatedProjectEndDate(ctx, field, obj)
		case "attachements":
			out.Values[i] = ec._Tender_attachements(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._Tender_remark(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Tender_images(ctx, field, obj)
		case "tenderSituations":
			out.Values[i] = ec._Tender_tenderSituations(ctx, field, obj)
		case "ownerSituations":
			out.Values[i] = ec._Tender_ownerSituations(ctx, field, obj)
		case "biddingInstructions":
			out.Values[i] = ec._Tender_biddingInstructions(ctx, field, obj)
		case "competitorSituations":
			out.Values[i] = ec._Tender_competitorSituations(ctx, field, obj)
		case "costEngineer":
			out.Values[i] = ec._Tender_costEngineer(ctx, field, obj)
		case "tenderForm":
			out.Values[i] = ec._Tender_tenderForm(ctx, field, obj)
		case "contractForm":
			out.Values[i] = ec._Tender_contractForm(ctx, field, obj)
		case "managementCompany":
			out.Values[i] = ec._Tender_managementCompany(ctx, field, obj)
		case "tenderingAgency":
			out.Values[i] = ec._Tender_tenderingAgency(ctx, field, obj)
		case "biddingDate":
			out.Values[i] = ec._Tender_biddingDate(ctx, field, obj)
		case "facadeConsultant":
			out.Values[i] = ec._Tender_facadeConsultant(ctx, field, obj)
		case "designUnit":
			out.Values[i] = ec._Tender_designUnit(ctx, field, obj)
		case "consultingFirm":
			out.Values[i] = ec._Tender_consultingFirm(ctx, field, obj)
		case "keyProject":
			out.Values[i] = ec._Tender_keyProject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currentProgress":
			out.Values[i] = ec._Tender_currentProgress(ctx, field, obj)
		case "tenderWinCompany":
			out.Values[i] = ec._Tender_tenderWinCompany(ctx, field, obj)
		case "tenderCode":
			out.Values[i] = ec._Tender_tenderCode(ctx, field, obj)
		case "architect":
			out.Values[i] = ec._Tender_architect(ctx, field, obj)
		case "developer":
			out.Values[i] = ec._Tender_developer(ctx, field, obj)
		case "tenderClosingDate":
			out.Values[i] = ec._Tender_tenderClosingDate(ctx, field, obj)
		case "constructionArea":
			out.Values[i] = ec._Tender_constructionArea(ctx, field, obj)
		case "tenderWinDate":
			out.Values[i] = ec._Tender_tenderWinDate(ctx, field, obj)
		case "tenderWinAmount":
			out.Values[i] = ec._Tender_tenderWinAmount(ctx, field, obj)
		case "lastTenderAmount":
			out.Values[i] = ec._Tender_lastTenderAmount(ctx, field, obj)
		case "areaID":
			out.Values[i] = ec._Tender_areaID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provinceID":
			out.Values[i] = ec._Tender_provinceID(ctx, field, obj)
		case "cityID":
			out.Values[i] = ec._Tender_cityID(ctx, field, obj)
		case "districtID":
			out.Values[i] = ec._Tender_districtID(ctx, field, obj)
		case "customerID":
			out.Values[i] = ec._Tender_customerID(ctx, field, obj)
		case "finderID":
			out.Values[i] = ec._Tender_finderID(ctx, field, obj)
		case "createdByID":
			out.Values[i] = ec._Tender_createdByID(ctx, field, obj)
		case "approverID":
			out.Values[i] = ec._Tender_approverID(ctx, field, obj)
		case "updatedByID":
			out.Values[i] = ec._Tender_updatedByID(ctx, field, obj)
		case "area":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_area(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "profiles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_profiles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "competitors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_competitors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_customer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "finder":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_finder(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "followingSales":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_followingSales(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "province":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_province(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "city":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_city(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "district":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_district(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "visitRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_visitRecords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_approver(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_updatedBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "geoCoordinate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tender_geoCoordinate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "geoBounds":
			out.Values[i] = ec._Tender_geoBounds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderCompetitorImplementors = []string{"TenderCompetitor", "Node"}

func (ec *executionContext) _TenderCompetitor(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderCompetitor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderCompetitorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderCompetitor")
		case "id":
			out.Values[i] = ec._TenderCompetitor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TenderCompetitor_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._TenderCompetitor_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenderID":
			out.Values[i] = ec._TenderCompetitor_tenderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "competitorID":
			out.Values[i] = ec._TenderCompetitor_competitorID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._TenderCompetitor_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tender":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderCompetitor_tender(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "competitor":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderCompetitor_competitor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderCompetitorConnectionImplementors = []string{"TenderCompetitorConnection"}

func (ec *executionContext) _TenderCompetitorConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderCompetitorConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderCompetitorConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderCompetitorConnection")
		case "edges":
			out.Values[i] = ec._TenderCompetitorConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TenderCompetitorConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TenderCompetitorConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderCompetitorEdgeImplementors = []string{"TenderCompetitorEdge"}

func (ec *executionContext) _TenderCompetitorEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderCompetitorEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderCompetitorEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderCompetitorEdge")
		case "node":
			out.Values[i] = ec._TenderCompetitorEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TenderCompetitorEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderConnectionImplementors = []string{"TenderConnection"}

func (ec *executionContext) _TenderConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderConnection")
		case "edges":
			out.Values[i] = ec._TenderConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TenderConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TenderConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderEdgeImplementors = []string{"TenderEdge"}

func (ec *executionContext) _TenderEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderEdge")
		case "node":
			out.Values[i] = ec._TenderEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TenderEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderProfileImplementors = []string{"TenderProfile", "Node"}

func (ec *executionContext) _TenderProfile(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderProfile")
		case "id":
			out.Values[i] = ec._TenderProfile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TenderProfile_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._TenderProfile_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._TenderProfile_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvalStatus":
			out.Values[i] = ec._TenderProfile_approvalStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "approvalMsgID":
			out.Values[i] = ec._TenderProfile_approvalMsgID(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TenderProfile_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "estimatedAmount":
			out.Values[i] = ec._TenderProfile_estimatedAmount(ctx, field, obj)
		case "tenderDate":
			out.Values[i] = ec._TenderProfile_tenderDate(ctx, field, obj)
		case "classify":
			out.Values[i] = ec._TenderProfile_classify(ctx, field, obj)
		case "discoveryDate":
			out.Values[i] = ec._TenderProfile_discoveryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "address":
			out.Values[i] = ec._TenderProfile_address(ctx, field, obj)
		case "fullAddress":
			out.Values[i] = ec._TenderProfile_fullAddress(ctx, field, obj)
		case "contractor":
			out.Values[i] = ec._TenderProfile_contractor(ctx, field, obj)
		case "levelInvolved":
			out.Values[i] = ec._TenderProfile_levelInvolved(ctx, field, obj)
		case "sizeAndValueRating":
			out.Values[i] = ec._TenderProfile_sizeAndValueRating(ctx, field, obj)
		case "sizeAndValueRatingOverview":
			out.Values[i] = ec._TenderProfile_sizeAndValueRatingOverview(ctx, field, obj)
		case "creditAndPaymentRating":
			out.Values[i] = ec._TenderProfile_creditAndPaymentRating(ctx, field, obj)
		case "creditAndPaymentRatingOverview":
			out.Values[i] = ec._TenderProfile_creditAndPaymentRatingOverview(ctx, field, obj)
		case "timeLimitRating":
			out.Values[i] = ec._TenderProfile_timeLimitRating(ctx, field, obj)
		case "timeLimitRatingOverview":
			out.Values[i] = ec._TenderProfile_timeLimitRatingOverview(ctx, field, obj)
		case "customerRelationshipRating":
			out.Values[i] = ec._TenderProfile_customerRelationshipRating(ctx, field, obj)
		case "customerRelationshipRatingOverview":
			out.Values[i] = ec._TenderProfile_customerRelationshipRatingOverview(ctx, field, obj)
		case "competitivePartnershipRating":
			out.Values[i] = ec._TenderProfile_competitivePartnershipRating(ctx, field, obj)
		case "competitivePartnershipRatingOverview":
			out.Values[i] = ec._TenderProfile_competitivePartnershipRatingOverview(ctx, field, obj)
		case "prepareToBid":
			out.Values[i] = ec._TenderProfile_prepareToBid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "projectCode":
			out.Values[i] = ec._TenderProfile_projectCode(ctx, field, obj)
		case "projectType":
			out.Values[i] = ec._TenderProfile_projectType(ctx, field, obj)
		case "projectDefinition":
			out.Values[i] = ec._TenderProfile_projectDefinition(ctx, field, obj)
		case "estimatedProjectStartDate":
			out.Values[i] = ec._TenderProfile_estimatedProjectStartDate(ctx, field, obj)
		case "estimatedProjectEndDate":
			out.Values[i] = ec._TenderProfile_estimatedProjectEndDate(ctx, field, obj)
		case "attachments":
			out.Values[i] = ec._TenderProfile_attachments(ctx, field, obj)
		case "geoCoordinate":
			out.Values[i] = ec._TenderProfile_geoCoordinate(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._TenderProfile_remark(ctx, field, obj)
		case "images":
			out.Values[i] = ec._TenderProfile_images(ctx, field, obj)
		case "tenderSituations":
			out.Values[i] = ec._TenderProfile_tenderSituations(ctx, field, obj)
		case "ownerSituations":
			out.Values[i] = ec._TenderProfile_ownerSituations(ctx, field, obj)
		case "biddingInstructions":
			out.Values[i] = ec._TenderProfile_biddingInstructions(ctx, field, obj)
		case "competitorSituations":
			out.Values[i] = ec._TenderProfile_competitorSituations(ctx, field, obj)
		case "costEngineer":
			out.Values[i] = ec._TenderProfile_costEngineer(ctx, field, obj)
		case "tenderForm":
			out.Values[i] = ec._TenderProfile_tenderForm(ctx, field, obj)
		case "contractForm":
			out.Values[i] = ec._TenderProfile_contractForm(ctx, field, obj)
		case "managementCompany":
			out.Values[i] = ec._TenderProfile_managementCompany(ctx, field, obj)
		case "tenderingAgency":
			out.Values[i] = ec._TenderProfile_tenderingAgency(ctx, field, obj)
		case "biddingDate":
			out.Values[i] = ec._TenderProfile_biddingDate(ctx, field, obj)
		case "facadeConsultant":
			out.Values[i] = ec._TenderProfile_facadeConsultant(ctx, field, obj)
		case "designUnit":
			out.Values[i] = ec._TenderProfile_designUnit(ctx, field, obj)
		case "consultingFirm":
			out.Values[i] = ec._TenderProfile_consultingFirm(ctx, field, obj)
		case "keyProject":
			out.Values[i] = ec._TenderProfile_keyProject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currentProgress":
			out.Values[i] = ec._TenderProfile_currentProgress(ctx, field, obj)
		case "tenderWinCompany":
			out.Values[i] = ec._TenderProfile_tenderWinCompany(ctx, field, obj)
		case "tenderCode":
			out.Values[i] = ec._TenderProfile_tenderCode(ctx, field, obj)
		case "architect":
			out.Values[i] = ec._TenderProfile_architect(ctx, field, obj)
		case "developer":
			out.Values[i] = ec._TenderProfile_developer(ctx, field, obj)
		case "tenderClosingDate":
			out.Values[i] = ec._TenderProfile_tenderClosingDate(ctx, field, obj)
		case "constructionArea":
			out.Values[i] = ec._TenderProfile_constructionArea(ctx, field, obj)
		case "tenderWinDate":
			out.Values[i] = ec._TenderProfile_tenderWinDate(ctx, field, obj)
		case "tenderWinAmount":
			out.Values[i] = ec._TenderProfile_tenderWinAmount(ctx, field, obj)
		case "lastTenderAmount":
			out.Values[i] = ec._TenderProfile_lastTenderAmount(ctx, field, obj)
		case "tenderID":
			out.Values[i] = ec._TenderProfile_tenderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provinceID":
			out.Values[i] = ec._TenderProfile_provinceID(ctx, field, obj)
		case "cityID":
			out.Values[i] = ec._TenderProfile_cityID(ctx, field, obj)
		case "districtID":
			out.Values[i] = ec._TenderProfile_districtID(ctx, field, obj)
		case "customerID":
			out.Values[i] = ec._TenderProfile_customerID(ctx, field, obj)
		case "finderID":
			out.Values[i] = ec._TenderProfile_finderID(ctx, field, obj)
		case "createdByID":
			out.Values[i] = ec._TenderProfile_createdByID(ctx, field, obj)
		case "approverID":
			out.Values[i] = ec._TenderProfile_approverID(ctx, field, obj)
		case "tender":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_tender(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_customer(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "finder":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_finder(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "province":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_province(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "city":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_city(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "district":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_district(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "approver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TenderProfile_approver(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderProfileConnectionImplementors = []string{"TenderProfileConnection"}

func (ec *executionContext) _TenderProfileConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderProfileConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderProfileConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderProfileConnection")
		case "edges":
			out.Values[i] = ec._TenderProfileConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TenderProfileConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TenderProfileConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenderProfileEdgeImplementors = []string{"TenderProfileEdge"}

func (ec *executionContext) _TenderProfileEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TenderProfileEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenderProfileEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenderProfileEdge")
		case "node":
			out.Values[i] = ec._TenderProfileEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TenderProfileEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *ent.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "openID":
			out.Values[i] = ec._User_openID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
		case "avatarURL":
			out.Values[i] = ec._User_avatarURL(ctx, field, obj)
		case "disabled":
			out.Values[i] = ec._User_disabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isAdmin":
			out.Values[i] = ec._User_isAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isCeo":
			out.Values[i] = ec._User_isCeo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isSuperAdmin":
			out.Values[i] = ec._User_isSuperAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasMapAccess":
			out.Values[i] = ec._User_hasMapAccess(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasEditAccess":
			out.Values[i] = ec._User_hasEditAccess(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "leaderID":
			out.Values[i] = ec._User_leaderID(ctx, field, obj)
		case "areas":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_areas(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_customers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "leader":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_leader(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "teamMembers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_teamMembers(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_tenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "visitRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_visitRecords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projects":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_projects(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "myTenders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_myTenders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "myVisitRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_myVisitRecords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userConnectionImplementors = []string{"UserConnection"}

func (ec *executionContext) _UserConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.UserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConnection")
		case "edges":
			out.Values[i] = ec._UserConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._UserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._UserConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "node":
			out.Values[i] = ec._UserEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var visitRecordImplementors = []string{"VisitRecord", "Node"}

func (ec *executionContext) _VisitRecord(ctx context.Context, sel ast.SelectionSet, obj *ent.VisitRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitRecord")
		case "id":
			out.Values[i] = ec._VisitRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._VisitRecord_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._VisitRecord_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "visitType":
			out.Values[i] = ec._VisitRecord_visitType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "commPeople":
			out.Values[i] = ec._VisitRecord_commPeople(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "commContent":
			out.Values[i] = ec._VisitRecord_commContent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "nextStep":
			out.Values[i] = ec._VisitRecord_nextStep(ctx, field, obj)
		case "date":
			out.Values[i] = ec._VisitRecord_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenderID":
			out.Values[i] = ec._VisitRecord_tenderID(ctx, field, obj)
		case "customerID":
			out.Values[i] = ec._VisitRecord_customerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tender":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VisitRecord_tender(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VisitRecord_customer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "followupbys":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VisitRecord_followupbys(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var visitRecordConnectionImplementors = []string{"VisitRecordConnection"}

func (ec *executionContext) _VisitRecordConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.VisitRecordConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitRecordConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitRecordConnection")
		case "edges":
			out.Values[i] = ec._VisitRecordConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._VisitRecordConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._VisitRecordConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var visitRecordEdgeImplementors = []string{"VisitRecordEdge"}

func (ec *executionContext) _VisitRecordEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.VisitRecordEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, visitRecordEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitRecordEdge")
		case "node":
			out.Values[i] = ec._VisitRecordEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._VisitRecordEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNArea2cscdᚑbdsᚋstoreᚋentᚐArea(ctx context.Context, sel ast.SelectionSet, v ent.Area) graphql.Marshaler {
	return ec._Area(ctx, sel, &v)
}

func (ec *executionContext) marshalNArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx context.Context, sel ast.SelectionSet, v *ent.Area) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Area(ctx, sel, v)
}

func (ec *executionContext) marshalNAreaConnection2cscdᚑbdsᚋstoreᚋentᚐAreaConnection(ctx context.Context, sel ast.SelectionSet, v ent.AreaConnection) graphql.Marshaler {
	return ec._AreaConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAreaConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaConnection(ctx context.Context, sel ast.SelectionSet, v *ent.AreaConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AreaConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAreaOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrderField(ctx context.Context, v interface{}) (*ent.AreaOrderField, error) {
	var res = new(ent.AreaOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAreaOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.AreaOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx context.Context, v interface{}) (*ent.AreaWhereInput, error) {
	res, err := ec.unmarshalInputAreaWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCityConnection2cscdᚑbdsᚋstoreᚋentᚐCityConnection(ctx context.Context, sel ast.SelectionSet, v ent.CityConnection) graphql.Marshaler {
	return ec._CityConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCityConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCityConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CityConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CityConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCityOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrderField(ctx context.Context, v interface{}) (*ent.CityOrderField, error) {
	var res = new(ent.CityOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCityOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CityOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx context.Context, v interface{}) (*ent.CityWhereInput, error) {
	res, err := ec.unmarshalInputCityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompetitor2cscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx context.Context, sel ast.SelectionSet, v ent.Competitor) graphql.Marshaler {
	return ec._Competitor(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx context.Context, sel ast.SelectionSet, v *ent.Competitor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Competitor(ctx, sel, v)
}

func (ec *executionContext) marshalNCompetitorConnection2cscdᚑbdsᚋstoreᚋentᚐCompetitorConnection(ctx context.Context, sel ast.SelectionSet, v ent.CompetitorConnection) graphql.Marshaler {
	return ec._CompetitorConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompetitorConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CompetitorConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompetitorConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompetitorOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrder(ctx context.Context, v interface{}) (*ent.CompetitorOrder, error) {
	res, err := ec.unmarshalInputCompetitorOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrderField(ctx context.Context, v interface{}) (*ent.CompetitorOrderField, error) {
	var res = new(ent.CompetitorOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CompetitorOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInput(ctx context.Context, v interface{}) (*ent.CompetitorWhereInput, error) {
	res, err := ec.unmarshalInputCompetitorWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCountry2ᚖcscdᚑbdsᚋstoreᚋentᚐCountry(ctx context.Context, sel ast.SelectionSet, v *ent.Country) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalNCountryConnection2cscdᚑbdsᚋstoreᚋentᚐCountryConnection(ctx context.Context, sel ast.SelectionSet, v ent.CountryConnection) graphql.Marshaler {
	return ec._CountryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCountryConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CountryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CountryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCountryOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryOrderField(ctx context.Context, v interface{}) (*ent.CountryOrderField, error) {
	var res = new(ent.CountryOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCountryOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CountryOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCountryWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInput(ctx context.Context, v interface{}) (*ent.CountryWhereInput, error) {
	res, err := ec.unmarshalInputCountryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateAreaInput2cscdᚑbdsᚋstoreᚋentᚐCreateAreaInput(ctx context.Context, v interface{}) (ent.CreateAreaInput, error) {
	res, err := ec.unmarshalInputCreateAreaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCompetitorInput2cscdᚑbdsᚋstoreᚋentᚐCreateCompetitorInput(ctx context.Context, v interface{}) (ent.CreateCompetitorInput, error) {
	res, err := ec.unmarshalInputCreateCompetitorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateCustomerInput2cscdᚑbdsᚋstoreᚋentᚐCreateCustomerInput(ctx context.Context, v interface{}) (ent.CreateCustomerInput, error) {
	res, err := ec.unmarshalInputCreateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePlotInput2cscdᚑbdsᚋstoreᚋentᚐCreatePlotInput(ctx context.Context, v interface{}) (ent.CreatePlotInput, error) {
	res, err := ec.unmarshalInputCreatePlotInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTenderInput2cscdᚑbdsᚋstoreᚋentᚐCreateTenderInput(ctx context.Context, v interface{}) (ent.CreateTenderInput, error) {
	res, err := ec.unmarshalInputCreateTenderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTenderProfileInput2cscdᚑbdsᚋstoreᚋentᚐCreateTenderProfileInput(ctx context.Context, v interface{}) (ent.CreateTenderProfileInput, error) {
	res, err := ec.unmarshalInputCreateTenderProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2cscdᚑbdsᚋstoreᚋentᚐCreateUserInput(ctx context.Context, v interface{}) (ent.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateVisitRecordInput2cscdᚑbdsᚋstoreᚋentᚐCreateVisitRecordInput(ctx context.Context, v interface{}) (ent.CreateVisitRecordInput, error) {
	res, err := ec.unmarshalInputCreateVisitRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (entgql.Cursor[xid.ID], error) {
	var res entgql.Cursor[xid.ID]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[xid.ID]) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCustomer2cscdᚑbdsᚋstoreᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v ent.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.Customer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerConnection2cscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx context.Context, sel ast.SelectionSet, v ent.CustomerConnection) graphql.Marshaler {
	return ec._CustomerConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerConnection(ctx context.Context, sel ast.SelectionSet, v *ent.CustomerConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrder(ctx context.Context, v interface{}) (*ent.CustomerOrder, error) {
	res, err := ec.unmarshalInputCustomerOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomerOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderField(ctx context.Context, v interface{}) (*ent.CustomerOrderField, error) {
	var res = new(ent.CustomerOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CustomerOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx context.Context, v interface{}) (*ent.CustomerWhereInput, error) {
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx context.Context, sel ast.SelectionSet, v *ent.District) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._District(ctx, sel, v)
}

func (ec *executionContext) marshalNDistrictConnection2cscdᚑbdsᚋstoreᚋentᚐDistrictConnection(ctx context.Context, sel ast.SelectionSet, v ent.DistrictConnection) graphql.Marshaler {
	return ec._DistrictConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDistrictConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictConnection(ctx context.Context, sel ast.SelectionSet, v *ent.DistrictConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DistrictConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDistrictOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrderField(ctx context.Context, v interface{}) (*ent.DistrictOrderField, error) {
	var res = new(ent.DistrictOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDistrictOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.DistrictOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNDistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx context.Context, v interface{}) (*ent.DistrictWhereInput, error) {
	res, err := ec.unmarshalInputDistrictWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNode2ᚕcscdᚑbdsᚋstoreᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2cscdᚑbdsᚋstoreᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNOperationConnection2cscdᚑbdsᚋstoreᚋentᚐOperationConnection(ctx context.Context, sel ast.SelectionSet, v ent.OperationConnection) graphql.Marshaler {
	return ec._OperationConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperationConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationConnection(ctx context.Context, sel ast.SelectionSet, v *ent.OperationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOperationOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationOrderField(ctx context.Context, v interface{}) (*ent.OperationOrderField, error) {
	var res = new(ent.OperationOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperationOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.OperationOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNOperationWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInput(ctx context.Context, v interface{}) (*ent.OperationWhereInput, error) {
	res, err := ec.unmarshalInputOperationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v interface{}) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[xid.ID]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlot2cscdᚑbdsᚋstoreᚋentᚐPlot(ctx context.Context, sel ast.SelectionSet, v ent.Plot) graphql.Marshaler {
	return ec._Plot(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlot2ᚖcscdᚑbdsᚋstoreᚋentᚐPlot(ctx context.Context, sel ast.SelectionSet, v *ent.Plot) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Plot(ctx, sel, v)
}

func (ec *executionContext) marshalNPlotConnection2cscdᚑbdsᚋstoreᚋentᚐPlotConnection(ctx context.Context, sel ast.SelectionSet, v ent.PlotConnection) graphql.Marshaler {
	return ec._PlotConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlotConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotConnection(ctx context.Context, sel ast.SelectionSet, v *ent.PlotConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlotConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlotOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrderField(ctx context.Context, v interface{}) (*ent.PlotOrderField, error) {
	var res = new(ent.PlotOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlotOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.PlotOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx context.Context, v interface{}) (*ent.PlotWhereInput, error) {
	res, err := ec.unmarshalInputPlotWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPotentialTenderConnection2cscdᚑbdsᚋstoreᚋentᚐPotentialTenderConnection(ctx context.Context, sel ast.SelectionSet, v ent.PotentialTenderConnection) graphql.Marshaler {
	return ec._PotentialTenderConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPotentialTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderConnection(ctx context.Context, sel ast.SelectionSet, v *ent.PotentialTenderConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PotentialTenderConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPotentialTenderOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrder(ctx context.Context, v interface{}) (*ent.PotentialTenderOrder, error) {
	res, err := ec.unmarshalInputPotentialTenderOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPotentialTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrderField(ctx context.Context, v interface{}) (*ent.PotentialTenderOrderField, error) {
	var res = new(ent.PotentialTenderOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPotentialTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.PotentialTenderOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNPotentialTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInput(ctx context.Context, v interface{}) (*ent.PotentialTenderWhereInput, error) {
	res, err := ec.unmarshalInputPotentialTenderWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProject2cscdᚑbdsᚋstoreᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v ent.Project) graphql.Marshaler {
	return ec._Project(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectConnection2cscdᚑbdsᚋstoreᚋentᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v ent.ProjectConnection) graphql.Marshaler {
	return ec._ProjectConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrder(ctx context.Context, v interface{}) (*ent.ProjectOrder, error) {
	res, err := ec.unmarshalInputProjectOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderField(ctx context.Context, v interface{}) (*ent.ProjectOrderField, error) {
	var res = new(ent.ProjectOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNProjectStaffConnection2cscdᚑbdsᚋstoreᚋentᚐProjectStaffConnection(ctx context.Context, sel ast.SelectionSet, v ent.ProjectStaffConnection) graphql.Marshaler {
	return ec._ProjectStaffConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectStaffConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectStaffConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectStaffConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectStaffOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrder(ctx context.Context, v interface{}) (*ent.ProjectStaffOrder, error) {
	res, err := ec.unmarshalInputProjectStaffOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectStaffOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderField(ctx context.Context, v interface{}) (*ent.ProjectStaffOrderField, error) {
	var res = new(ent.ProjectStaffOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectStaffOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectStaffOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx context.Context, v interface{}) (*ent.ProjectStaffWhereInput, error) {
	res, err := ec.unmarshalInputProjectStaffWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectVO2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVO(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectVO) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectVO(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectVOOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOOrderField(ctx context.Context, v interface{}) (*ent.ProjectVOOrderField, error) {
	var res = new(ent.ProjectVOOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectVOOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectVOOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProjectVOWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInput(ctx context.Context, v interface{}) (*ent.ProjectVOWhereInput, error) {
	res, err := ec.unmarshalInputProjectVOWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx context.Context, sel ast.SelectionSet, v *ent.Province) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Province(ctx, sel, v)
}

func (ec *executionContext) marshalNProvinceConnection2cscdᚑbdsᚋstoreᚋentᚐProvinceConnection(ctx context.Context, sel ast.SelectionSet, v ent.ProvinceConnection) graphql.Marshaler {
	return ec._ProvinceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNProvinceConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceConnection(ctx context.Context, sel ast.SelectionSet, v *ent.ProvinceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProvinceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProvinceOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrderField(ctx context.Context, v interface{}) (*ent.ProvinceOrderField, error) {
	var res = new(ent.ProvinceOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProvinceOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.ProvinceOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx context.Context, v interface{}) (*ent.ProvinceWhereInput, error) {
	res, err := ec.unmarshalInputProvinceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTender2cscdᚑbdsᚋstoreᚋentᚐTender(ctx context.Context, sel ast.SelectionSet, v ent.Tender) graphql.Marshaler {
	return ec._Tender(ctx, sel, &v)
}

func (ec *executionContext) marshalNTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx context.Context, sel ast.SelectionSet, v *ent.Tender) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tender(ctx, sel, v)
}

func (ec *executionContext) marshalNTenderCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitor(ctx context.Context, sel ast.SelectionSet, v *ent.TenderCompetitor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenderCompetitor(ctx, sel, v)
}

func (ec *executionContext) marshalNTenderCompetitorConnection2cscdᚑbdsᚋstoreᚋentᚐTenderCompetitorConnection(ctx context.Context, sel ast.SelectionSet, v ent.TenderCompetitorConnection) graphql.Marshaler {
	return ec._TenderCompetitorConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenderCompetitorConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TenderCompetitorConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenderCompetitorConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTenderCompetitorOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrder(ctx context.Context, v interface{}) (*ent.TenderCompetitorOrder, error) {
	res, err := ec.unmarshalInputTenderCompetitorOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenderCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrderField(ctx context.Context, v interface{}) (*ent.TenderCompetitorOrderField, error) {
	var res = new(ent.TenderCompetitorOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenderCompetitorOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TenderCompetitorOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNTenderCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInput(ctx context.Context, v interface{}) (*ent.TenderCompetitorWhereInput, error) {
	res, err := ec.unmarshalInputTenderCompetitorWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenderConnection2cscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx context.Context, sel ast.SelectionSet, v ent.TenderConnection) graphql.Marshaler {
	return ec._TenderConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenderConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TenderConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenderConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTenderOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrder(ctx context.Context, v interface{}) (*ent.TenderOrder, error) {
	res, err := ec.unmarshalInputTenderOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderField(ctx context.Context, v interface{}) (*ent.TenderOrderField, error) {
	var res = new(ent.TenderOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenderOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TenderOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNTenderProfileConnection2cscdᚑbdsᚋstoreᚋentᚐTenderProfileConnection(ctx context.Context, sel ast.SelectionSet, v ent.TenderProfileConnection) graphql.Marshaler {
	return ec._TenderProfileConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenderProfileConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileConnection(ctx context.Context, sel ast.SelectionSet, v *ent.TenderProfileConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenderProfileConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTenderProfileOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrder(ctx context.Context, v interface{}) (*ent.TenderProfileOrder, error) {
	res, err := ec.unmarshalInputTenderProfileOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenderProfileOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderField(ctx context.Context, v interface{}) (*ent.TenderProfileOrderField, error) {
	var res = new(ent.TenderProfileOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenderProfileOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.TenderProfileOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx context.Context, v interface{}) (*ent.TenderProfileWhereInput, error) {
	res, err := ec.unmarshalInputTenderProfileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx context.Context, v interface{}) (*ent.TenderWhereInput, error) {
	res, err := ec.unmarshalInputTenderWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateAreaInput2cscdᚑbdsᚋstoreᚋentᚐUpdateAreaInput(ctx context.Context, v interface{}) (ent.UpdateAreaInput, error) {
	res, err := ec.unmarshalInputUpdateAreaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCompetitorInput2cscdᚑbdsᚋstoreᚋentᚐUpdateCompetitorInput(ctx context.Context, v interface{}) (ent.UpdateCompetitorInput, error) {
	res, err := ec.unmarshalInputUpdateCompetitorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCustomerInput2cscdᚑbdsᚋstoreᚋentᚐUpdateCustomerInput(ctx context.Context, v interface{}) (ent.UpdateCustomerInput, error) {
	res, err := ec.unmarshalInputUpdateCustomerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePlotInput2cscdᚑbdsᚋstoreᚋentᚐUpdatePlotInput(ctx context.Context, v interface{}) (ent.UpdatePlotInput, error) {
	res, err := ec.unmarshalInputUpdatePlotInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectInput2cscdᚑbdsᚋstoreᚋentᚐUpdateProjectInput(ctx context.Context, v interface{}) (ent.UpdateProjectInput, error) {
	res, err := ec.unmarshalInputUpdateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTenderInput2cscdᚑbdsᚋstoreᚋentᚐUpdateTenderInput(ctx context.Context, v interface{}) (ent.UpdateTenderInput, error) {
	res, err := ec.unmarshalInputUpdateTenderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2cscdᚑbdsᚋstoreᚋentᚐUpdateUserInput(ctx context.Context, v interface{}) (ent.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateVisitRecordInput2cscdᚑbdsᚋstoreᚋentᚐUpdateVisitRecordInput(ctx context.Context, v interface{}) (ent.UpdateVisitRecordInput, error) {
	res, err := ec.unmarshalInputUpdateVisitRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2cscdᚑbdsᚋstoreᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v ent.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserConnection2cscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v ent.UserConnection) graphql.Marshaler {
	return ec._UserConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v *ent.UserConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrderField(ctx context.Context, v interface{}) (*ent.UserOrderField, error) {
	var res = new(ent.UserOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVisitRecord2cscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx context.Context, sel ast.SelectionSet, v ent.VisitRecord) graphql.Marshaler {
	return ec._VisitRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVisitRecord2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx context.Context, sel ast.SelectionSet, v *ent.VisitRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VisitRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVisitRecordConnection2cscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx context.Context, sel ast.SelectionSet, v ent.VisitRecordConnection) graphql.Marshaler {
	return ec._VisitRecordConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNVisitRecordConnection2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordConnection(ctx context.Context, sel ast.SelectionSet, v *ent.VisitRecordConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VisitRecordConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVisitRecordOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrder(ctx context.Context, v interface{}) (*ent.VisitRecordOrder, error) {
	res, err := ec.unmarshalInputVisitRecordOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVisitRecordOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderField(ctx context.Context, v interface{}) (*ent.VisitRecordOrderField, error) {
	var res = new(ent.VisitRecordOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVisitRecordOrderField2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.VisitRecordOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx context.Context, v interface{}) (*ent.VisitRecordWhereInput, error) {
	res, err := ec.unmarshalInputVisitRecordWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArea2ᚖcscdᚑbdsᚋstoreᚋentᚐArea(ctx context.Context, sel ast.SelectionSet, v *ent.Area) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Area(ctx, sel, v)
}

func (ec *executionContext) marshalOAreaEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.AreaEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAreaEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAreaEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaEdge(ctx context.Context, sel ast.SelectionSet, v *ent.AreaEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AreaEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAreaOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaOrder(ctx context.Context, v interface{}) (*ent.AreaOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAreaOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAreaWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.AreaWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.AreaWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAreaWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐAreaWhereInput(ctx context.Context, v interface{}) (*ent.AreaWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAreaWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCity2ᚖcscdᚑbdsᚋstoreᚋentᚐCity(ctx context.Context, sel ast.SelectionSet, v *ent.City) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._City(ctx, sel, v)
}

func (ec *executionContext) marshalOCityEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCityEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCityEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCityEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCityEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CityEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CityEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCityOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCityOrder(ctx context.Context, v interface{}) (*ent.CityOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCityWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CityWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCityWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCityWhereInput(ctx context.Context, v interface{}) (*ent.CityWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitor(ctx context.Context, sel ast.SelectionSet, v *ent.Competitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Competitor(ctx, sel, v)
}

func (ec *executionContext) marshalOCompetitorEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CompetitorEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompetitorEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompetitorEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CompetitorEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompetitorEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompetitorOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrderᚄ(ctx context.Context, v interface{}) ([]*ent.CompetitorOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CompetitorOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompetitorOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CompetitorWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CompetitorWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCompetitorWhereInput(ctx context.Context, v interface{}) (*ent.CompetitorWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCompetitorWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCountry2ᚖcscdᚑbdsᚋstoreᚋentᚐCountry(ctx context.Context, sel ast.SelectionSet, v *ent.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalOCountryEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CountryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCountryEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCountryEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CountryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CountryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCountryOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryOrder(ctx context.Context, v interface{}) (*ent.CountryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCountryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCountryWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CountryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CountryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCountryWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCountryWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCountryWhereInput(ctx context.Context, v interface{}) (*ent.CountryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCountryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (*entgql.Cursor[xid.ID], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[xid.ID])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[xid.ID]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCustomer2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *ent.Customer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) marshalOCustomerEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.CustomerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCustomerEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCustomerEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CustomerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomerEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomerOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrderᚄ(ctx context.Context, v interface{}) ([]*ent.CustomerOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CustomerOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomerOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CustomerWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCustomerWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐCustomerWhereInput(ctx context.Context, v interface{}) (*ent.CustomerWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCustomerWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODistrict2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrict(ctx context.Context, sel ast.SelectionSet, v *ent.District) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._District(ctx, sel, v)
}

func (ec *executionContext) marshalODistrictEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.DistrictEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODistrictEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODistrictEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictEdge(ctx context.Context, sel ast.SelectionSet, v *ent.DistrictEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DistrictEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalODistrictOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictOrder(ctx context.Context, v interface{}) (*ent.DistrictOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODistrictWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.DistrictWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.DistrictWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODistrictWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐDistrictWhereInput(ctx context.Context, v interface{}) (*ent.DistrictWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONode2cscdᚑbdsᚋstoreᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOOperation2ᚖcscdᚑbdsᚋstoreᚋentᚐOperation(ctx context.Context, sel ast.SelectionSet, v *ent.Operation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Operation(ctx, sel, v)
}

func (ec *executionContext) marshalOOperationEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐOperationEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.OperationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOperationEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOperationEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationEdge(ctx context.Context, sel ast.SelectionSet, v *ent.OperationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOperationOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationOrder(ctx context.Context, v interface{}) (*ent.OperationOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperationOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOperationWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.OperationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.OperationWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOperationWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOperationWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐOperationWhereInput(ctx context.Context, v interface{}) (*ent.OperationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOperationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlot2ᚖcscdᚑbdsᚋstoreᚋentᚐPlot(ctx context.Context, sel ast.SelectionSet, v *ent.Plot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Plot(ctx, sel, v)
}

func (ec *executionContext) marshalOPlotEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.PlotEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPlotEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPlotEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotEdge(ctx context.Context, sel ast.SelectionSet, v *ent.PlotEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlotEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPlotOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotOrder(ctx context.Context, v interface{}) (*ent.PlotOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPlotOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPlotWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PlotWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PlotWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPlotWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPlotWhereInput(ctx context.Context, v interface{}) (*ent.PlotWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPlotWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPotentialTender2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTender(ctx context.Context, sel ast.SelectionSet, v *ent.PotentialTender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PotentialTender(ctx, sel, v)
}

func (ec *executionContext) marshalOPotentialTenderEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.PotentialTenderEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPotentialTenderEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPotentialTenderEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderEdge(ctx context.Context, sel ast.SelectionSet, v *ent.PotentialTenderEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PotentialTenderEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPotentialTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrderᚄ(ctx context.Context, v interface{}) ([]*ent.PotentialTenderOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PotentialTenderOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPotentialTenderOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPotentialTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PotentialTenderWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PotentialTenderWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPotentialTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPotentialTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐPotentialTenderWhereInput(ctx context.Context, v interface{}) (*ent.PotentialTenderWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPotentialTenderWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProject2ᚖcscdᚑbdsᚋstoreᚋentᚐProject(ctx context.Context, sel ast.SelectionSet, v *ent.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrderᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProjectOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProjectStaff2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaff(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectStaff) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectStaff(ctx, sel, v)
}

func (ec *executionContext) marshalOProjectStaffEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProjectStaffEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProjectStaffEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProjectStaffEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectStaffEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProjectStaffEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectStaffOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrderᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectStaffOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProjectStaffOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectStaffOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectStaffWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectStaffWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProjectStaffWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectStaffWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectStaffWhereInput(ctx context.Context, v interface{}) (*ent.ProjectStaffWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectStaffWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectVO2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ProjectVO) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectVO2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVO(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProjectVOWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectVOWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProjectVOWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectVOWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectVOWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectVOWhereInput(ctx context.Context, v interface{}) (*ent.ProjectVOWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectVOWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProjectWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProjectWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProjectWhereInput(ctx context.Context, v interface{}) (*ent.ProjectWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProjectWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProvince2ᚖcscdᚑbdsᚋstoreᚋentᚐProvince(ctx context.Context, sel ast.SelectionSet, v *ent.Province) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Province(ctx, sel, v)
}

func (ec *executionContext) marshalOProvinceEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.ProvinceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProvinceEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProvinceEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceEdge(ctx context.Context, sel ast.SelectionSet, v *ent.ProvinceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProvinceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProvinceOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceOrder(ctx context.Context, v interface{}) (*ent.ProvinceOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProvinceOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProvinceWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ProvinceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ProvinceWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOProvinceWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐProvinceWhereInput(ctx context.Context, v interface{}) (*ent.ProvinceWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProvinceWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTender2ᚖcscdᚑbdsᚋstoreᚋentᚐTender(ctx context.Context, sel ast.SelectionSet, v *ent.Tender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tender(ctx, sel, v)
}

func (ec *executionContext) marshalOTenderCompetitor2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TenderCompetitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTenderCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTenderCompetitor2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitor(ctx context.Context, sel ast.SelectionSet, v *ent.TenderCompetitor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenderCompetitor(ctx, sel, v)
}

func (ec *executionContext) marshalOTenderCompetitorEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TenderCompetitorEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTenderCompetitorEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTenderCompetitorEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TenderCompetitorEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenderCompetitorEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTenderCompetitorOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrderᚄ(ctx context.Context, v interface{}) ([]*ent.TenderCompetitorOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderCompetitorOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderCompetitorOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTenderCompetitorWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TenderCompetitorWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderCompetitorWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTenderCompetitorWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderCompetitorWhereInput(ctx context.Context, v interface{}) (*ent.TenderCompetitorWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenderCompetitorWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTenderEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TenderEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTenderEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTenderEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TenderEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenderEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTenderOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrderᚄ(ctx context.Context, v interface{}) ([]*ent.TenderOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTenderProfile2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfile(ctx context.Context, sel ast.SelectionSet, v *ent.TenderProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenderProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOTenderProfileEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.TenderProfileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTenderProfileEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTenderProfileEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TenderProfileEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenderProfileEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTenderProfileOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrderᚄ(ctx context.Context, v interface{}) ([]*ent.TenderProfileOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderProfileOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderProfileOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTenderProfileWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TenderProfileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderProfileWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTenderProfileWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderProfileWhereInput(ctx context.Context, v interface{}) (*ent.TenderProfileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenderProfileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTenderWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TenderWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TenderWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTenderWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐTenderWhereInput(ctx context.Context, v interface{}) (*ent.TenderWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenderWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖcscdᚑbdsᚋstoreᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *ent.UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐUserOrder(ctx context.Context, v interface{}) (*ent.UserOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.UserWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐUserWhereInput(ctx context.Context, v interface{}) (*ent.UserWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVisitRecord2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecord(ctx context.Context, sel ast.SelectionSet, v *ent.VisitRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VisitRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVisitRecordEdge2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.VisitRecordEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVisitRecordEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVisitRecordEdge2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordEdge(ctx context.Context, sel ast.SelectionSet, v *ent.VisitRecordEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VisitRecordEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVisitRecordOrder2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrderᚄ(ctx context.Context, v interface{}) ([]*ent.VisitRecordOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.VisitRecordOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVisitRecordOrder2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVisitRecordWhereInput2ᚕᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.VisitRecordWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.VisitRecordWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVisitRecordWhereInput2ᚖcscdᚑbdsᚋstoreᚋentᚐVisitRecordWhereInput(ctx context.Context, v interface{}) (*ent.VisitRecordWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVisitRecordWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
