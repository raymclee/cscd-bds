package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/model"
	"cscd-bds/store/ent"

	"github.com/twpayne/go-geom/encoding/ewkbhex"
)

// Center is the resolver for the center field.
func (r *areaResolver) Center(ctx context.Context, obj *ent.Area) (*model.GeoJSON, error) {
	if obj.Center == nil {
		return nil, nil
	}
	coord, err := obj.Center.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.Center.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}

// Center is the resolver for the center field.
func (r *cityResolver) Center(ctx context.Context, obj *ent.City) (*model.GeoJSON, error) {
	if obj.Center == nil {
		return nil, nil
	}
	coord, err := obj.Center.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.Center.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}

// Center is the resolver for the center field.
func (r *countryResolver) Center(ctx context.Context, obj *ent.Country) (*model.GeoJSON, error) {
	if obj.Center == nil {
		return nil, nil
	}
	coord, err := obj.Center.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.Center.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}

// Center is the resolver for the center field.
func (r *districtResolver) Center(ctx context.Context, obj *ent.District) (*model.GeoJSON, error) {
	if obj.Center == nil {
		return nil, nil
	}
	coord, err := obj.Center.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.Center.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}

// Center is the resolver for the center field.
func (r *provinceResolver) Center(ctx context.Context, obj *ent.Province) (*model.GeoJSON, error) {
	if obj.Center == nil {
		return nil, nil
	}
	coord, err := obj.Center.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.Center.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}

// GeoCoordinate is the resolver for the geoCoordinate field.
func (r *tenderResolver) GeoCoordinate(ctx context.Context, obj *ent.Tender) (*model.GeoJSON, error) {
	if obj.GeoCoordinate == nil {
		return nil, nil
	}
	coord, err := obj.GeoCoordinate.Value()
	if err != nil {
		return nil, err
	}
	geoJson, err := ewkbhex.Decode(coord.(string))
	if err != nil {
		return nil, err
	}
	coords := geoJson.FlatCoords()
	return &model.GeoJSON{
		Type:        obj.GeoCoordinate.Type,
		Coordinates: []float64{coords[1], coords[0]},
	}, nil
}
