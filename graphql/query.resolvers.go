package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/model"
	"cscd-bds/store/ent/competitor"
	"cscd-bds/store/ent/district"
	"cscd-bds/store/ent/schema/xid"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"golang.org/x/sync/errgroup"
)

// SearchFeishuUser is the resolver for the searchFeishuUser field.
func (r *queryResolver) SearchFeishuUser(ctx context.Context, keyword string) ([]*model.FeishuUser, error) {
	users, err := r.feishu.SearchFeishuUser(ctx, keyword)
	if err != nil {
		return nil, err
	}

	userIds := make([]string, 0, len(*users))
	for _, user := range *users {
		userIds = append(userIds, user.OpenID)

	}

	userInfos, err := r.feishu.GetUserInfos(ctx, userIds)
	if err != nil {
		return nil, err
	}

	var out []*model.FeishuUser
	for _, userInfo := range userInfos {
		for _, user := range *users {
			if userInfo.OpenId != nil && userInfo.Email != nil && *userInfo.OpenId == user.OpenID {
				out = append(out, &model.FeishuUser{
					OpenID:    user.OpenID,
					Name:      user.Name,
					AvatarURL: user.Avatar.AvatarOrigin,
					Email:     *userInfo.Email,
				})
			}
		}
	}

	return out, nil
}

// SearchLocation is the resolver for the searchLocation field.
func (r *queryResolver) SearchLocation(ctx context.Context, keyword string) ([]*model.Location, error) {
	geoResp, err := r.amap.SearchLocation(keyword)
	if err != nil {
		return nil, fmt.Errorf("failed to search location: %w", err)
	}
	var wg errgroup.Group
	var out []*model.Location
	for _, geo := range geoResp.GeoCodes {
		wg.Go(func() error {
			o := &model.Location{
				ID:          xid.MustNew("AL"),
				FullAddress: geo.FormattedAddress,
			}
			ac, err := strconv.Atoi(geo.AdCode)
			if err != nil {
				return fmt.Errorf("failed to convert adcode: %w", err)
			}
			d, err := r.store.District.Query().Where(district.Adcode(ac)).WithCity().WithProvince().Only(ctx)
			if err != nil {
				return nil
			}
			if d != nil {
				o.City = d.Edges.City
				o.Province = d.Edges.Province
				o.District = d
			}
			out = append(out, o)
			return nil
		})
	}
	if err := wg.Wait(); err != nil {
		return nil, err
	}
	return out, nil
}

// TopCompetitors is the resolver for the topCompetitors field.
func (r *queryResolver) TopCompetitors(ctx context.Context, first *int) ([]*model.TopCompetitor, error) {
	comps, err := r.store.Competitor.Query().
		Order(competitor.ByWonTendersCount(sql.OrderDesc())).
		Limit(13).
		WithWonTenders().
		All(ctx)
	if err != nil {
		return nil, err
	}
	var out []*model.TopCompetitor
	for _, comp := range comps {
		out = append(out, &model.TopCompetitor{
			ID:              xid.ID(fmt.Sprintf("TC-%s", strings.ReplaceAll(string(comp.ID), "CP-", ""))),
			Name:            comp.Name,
			ShortName:       comp.ShortName,
			WonTendersCount: int(len(comp.Edges.WonTenders)),
		})
	}
	return out, nil
}

// BiToken is the resolver for the biToken field.
func (r *queryResolver) BiToken(ctx context.Context) (string, error) {

	resp, err := http.Get("https://bi.fefacade.com/webroot/decision/login/cross/domain?fine_username=ray.mclee&fine_password=ray.mclee830&validity=-1")
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	ss := string(body)[25:348]

	return ss, nil
}
