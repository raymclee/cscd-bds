package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/generated"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"
	"fmt"

	"entgo.io/contrib/entgql"
)

// OwnerType is the resolver for the ownerType field.
func (r *customerResolver) OwnerType(ctx context.Context, obj *ent.Customer) (*int, error) {
	panic(fmt.Errorf("not implemented: OwnerType - ownerType"))
}

// Industry is the resolver for the industry field.
func (r *customerResolver) Industry(ctx context.Context, obj *ent.Customer) (int, error) {
	panic(fmt.Errorf("not implemented: Industry - industry"))
}

// Size is the resolver for the size field.
func (r *customerResolver) Size(ctx context.Context, obj *ent.Customer) (*int, error) {
	panic(fmt.Errorf("not implemented: Size - size"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id xid.ID) (ent.Noder, error) {
	return r.store.Noder(ctx, id, ent.WithNodeType(ent.IDToType))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []*xid.ID) ([]ent.Noder, error) {
	idx := make([]xid.ID, len(ids))
	for i, id := range ids {
		idx[i] = *id
	}
	return r.store.Noders(ctx, idx, ent.WithNodeType(ent.IDToType))
}

// Areas is the resolver for the areas field.
func (r *queryResolver) Areas(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.AreaWhereInput) (*ent.AreaConnection, error) {
	return r.store.Area.Query().Paginate(ctx, after, first, before, last, ent.WithAreaFilter(where.Filter))
}

// Cities is the resolver for the cities field.
func (r *queryResolver) Cities(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.CityWhereInput) (*ent.CityConnection, error) {
	return r.store.City.Query().Paginate(ctx, after, first, before, last, ent.WithCityFilter(where.Filter))
}

// Countries is the resolver for the countries field.
func (r *queryResolver) Countries(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.CountryWhereInput) (*ent.CountryConnection, error) {
	return r.store.Country.Query().Paginate(ctx, after, first, before, last, ent.WithCountryFilter(where.Filter))
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.CustomerWhereInput) (*ent.CustomerConnection, error) {
	return r.store.Customer.Query().Paginate(ctx, after, first, before, last, ent.WithCustomerFilter(where.Filter))
}

// Districts is the resolver for the districts field.
func (r *queryResolver) Districts(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.DistrictWhereInput) (*ent.DistrictConnection, error) {
	return r.store.District.Query().Paginate(ctx, after, first, before, last, ent.WithDistrictFilter(where.Filter))
}

// Provinces is the resolver for the provinces field.
func (r *queryResolver) Provinces(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.ProvinceWhereInput) (*ent.ProvinceConnection, error) {
	return r.store.Province.Query().Paginate(ctx, after, first, before, last, ent.WithProvinceFilter(where.Filter))
}

// Tenders is the resolver for the tenders field.
func (r *queryResolver) Tenders(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.TenderWhereInput) (*ent.TenderConnection, error) {
	return r.store.Tender.Query().Paginate(ctx, after, first, before, last, ent.WithTenderFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.store.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserFilter(where.Filter))
}

// Status is the resolver for the status field.
func (r *tenderResolver) Status(ctx context.Context, obj *ent.Tender) (int, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// SizeAndValueRating is the resolver for the sizeAndValueRating field.
func (r *tenderResolver) SizeAndValueRating(ctx context.Context, obj *ent.Tender) (*int, error) {
	panic(fmt.Errorf("not implemented: SizeAndValueRating - sizeAndValueRating"))
}

// CreditAndPaymentRating is the resolver for the creditAndPaymentRating field.
func (r *tenderResolver) CreditAndPaymentRating(ctx context.Context, obj *ent.Tender) (*int, error) {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRating - creditAndPaymentRating"))
}

// TimeLimitRating is the resolver for the timeLimitRating field.
func (r *tenderResolver) TimeLimitRating(ctx context.Context, obj *ent.Tender) (*int, error) {
	panic(fmt.Errorf("not implemented: TimeLimitRating - timeLimitRating"))
}

// CustomerRelationshipRating is the resolver for the customerRelationshipRating field.
func (r *tenderResolver) CustomerRelationshipRating(ctx context.Context, obj *ent.Tender) (*int, error) {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRating - customerRelationshipRating"))
}

// CompetitivePartnershipRating is the resolver for the competitivePartnershipRating field.
func (r *tenderResolver) CompetitivePartnershipRating(ctx context.Context, obj *ent.Tender) (*int, error) {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRating - competitivePartnershipRating"))
}

// OwnerType is the resolver for the ownerType field.
func (r *createCustomerInputResolver) OwnerType(ctx context.Context, obj *ent.CreateCustomerInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerType - ownerType"))
}

// Industry is the resolver for the industry field.
func (r *createCustomerInputResolver) Industry(ctx context.Context, obj *ent.CreateCustomerInput, data int) error {
	panic(fmt.Errorf("not implemented: Industry - industry"))
}

// Size is the resolver for the size field.
func (r *createCustomerInputResolver) Size(ctx context.Context, obj *ent.CreateCustomerInput, data *int) error {
	panic(fmt.Errorf("not implemented: Size - size"))
}

// Status is the resolver for the status field.
func (r *createTenderInputResolver) Status(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// SizeAndValueRating is the resolver for the sizeAndValueRating field.
func (r *createTenderInputResolver) SizeAndValueRating(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRating - sizeAndValueRating"))
}

// CreditAndPaymentRating is the resolver for the creditAndPaymentRating field.
func (r *createTenderInputResolver) CreditAndPaymentRating(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRating - creditAndPaymentRating"))
}

// TimeLimitRating is the resolver for the timeLimitRating field.
func (r *createTenderInputResolver) TimeLimitRating(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRating - timeLimitRating"))
}

// CustomerRelationshipRating is the resolver for the customerRelationshipRating field.
func (r *createTenderInputResolver) CustomerRelationshipRating(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRating - customerRelationshipRating"))
}

// CompetitivePartnershipRating is the resolver for the competitivePartnershipRating field.
func (r *createTenderInputResolver) CompetitivePartnershipRating(ctx context.Context, obj *ent.CreateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRating - competitivePartnershipRating"))
}

// OwnerType is the resolver for the ownerType field.
func (r *customerWhereInputResolver) OwnerType(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerType - ownerType"))
}

// OwnerTypeNeq is the resolver for the ownerTypeNEQ field.
func (r *customerWhereInputResolver) OwnerTypeNeq(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeNeq - ownerTypeNEQ"))
}

// OwnerTypeIn is the resolver for the ownerTypeIn field.
func (r *customerWhereInputResolver) OwnerTypeIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeIn - ownerTypeIn"))
}

// OwnerTypeNotIn is the resolver for the ownerTypeNotIn field.
func (r *customerWhereInputResolver) OwnerTypeNotIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeNotIn - ownerTypeNotIn"))
}

// OwnerTypeGt is the resolver for the ownerTypeGT field.
func (r *customerWhereInputResolver) OwnerTypeGt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeGt - ownerTypeGT"))
}

// OwnerTypeGte is the resolver for the ownerTypeGTE field.
func (r *customerWhereInputResolver) OwnerTypeGte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeGte - ownerTypeGTE"))
}

// OwnerTypeLt is the resolver for the ownerTypeLT field.
func (r *customerWhereInputResolver) OwnerTypeLt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeLt - ownerTypeLT"))
}

// OwnerTypeLte is the resolver for the ownerTypeLTE field.
func (r *customerWhereInputResolver) OwnerTypeLte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerTypeLte - ownerTypeLTE"))
}

// Industry is the resolver for the industry field.
func (r *customerWhereInputResolver) Industry(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Industry - industry"))
}

// IndustryNeq is the resolver for the industryNEQ field.
func (r *customerWhereInputResolver) IndustryNeq(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: IndustryNeq - industryNEQ"))
}

// IndustryIn is the resolver for the industryIn field.
func (r *customerWhereInputResolver) IndustryIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: IndustryIn - industryIn"))
}

// IndustryNotIn is the resolver for the industryNotIn field.
func (r *customerWhereInputResolver) IndustryNotIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: IndustryNotIn - industryNotIn"))
}

// IndustryGt is the resolver for the industryGT field.
func (r *customerWhereInputResolver) IndustryGt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: IndustryGt - industryGT"))
}

// IndustryGte is the resolver for the industryGTE field.
func (r *customerWhereInputResolver) IndustryGte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: IndustryGte - industryGTE"))
}

// IndustryLt is the resolver for the industryLT field.
func (r *customerWhereInputResolver) IndustryLt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: IndustryLt - industryLT"))
}

// IndustryLte is the resolver for the industryLTE field.
func (r *customerWhereInputResolver) IndustryLte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: IndustryLte - industryLTE"))
}

// Size is the resolver for the size field.
func (r *customerWhereInputResolver) Size(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Size - size"))
}

// SizeNeq is the resolver for the sizeNEQ field.
func (r *customerWhereInputResolver) SizeNeq(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeNeq - sizeNEQ"))
}

// SizeIn is the resolver for the sizeIn field.
func (r *customerWhereInputResolver) SizeIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SizeIn - sizeIn"))
}

// SizeNotIn is the resolver for the sizeNotIn field.
func (r *customerWhereInputResolver) SizeNotIn(ctx context.Context, obj *ent.CustomerWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SizeNotIn - sizeNotIn"))
}

// SizeGt is the resolver for the sizeGT field.
func (r *customerWhereInputResolver) SizeGt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeGt - sizeGT"))
}

// SizeGte is the resolver for the sizeGTE field.
func (r *customerWhereInputResolver) SizeGte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeGte - sizeGTE"))
}

// SizeLt is the resolver for the sizeLT field.
func (r *customerWhereInputResolver) SizeLt(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeLt - sizeLT"))
}

// SizeLte is the resolver for the sizeLTE field.
func (r *customerWhereInputResolver) SizeLte(ctx context.Context, obj *ent.CustomerWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeLte - sizeLTE"))
}

// Status is the resolver for the status field.
func (r *tenderWhereInputResolver) Status(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// StatusNeq is the resolver for the statusNEQ field.
func (r *tenderWhereInputResolver) StatusNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusNeq - statusNEQ"))
}

// StatusIn is the resolver for the statusIn field.
func (r *tenderWhereInputResolver) StatusIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: StatusIn - statusIn"))
}

// StatusNotIn is the resolver for the statusNotIn field.
func (r *tenderWhereInputResolver) StatusNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: StatusNotIn - statusNotIn"))
}

// StatusGt is the resolver for the statusGT field.
func (r *tenderWhereInputResolver) StatusGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusGt - statusGT"))
}

// StatusGte is the resolver for the statusGTE field.
func (r *tenderWhereInputResolver) StatusGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusGte - statusGTE"))
}

// StatusLt is the resolver for the statusLT field.
func (r *tenderWhereInputResolver) StatusLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusLt - statusLT"))
}

// StatusLte is the resolver for the statusLTE field.
func (r *tenderWhereInputResolver) StatusLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: StatusLte - statusLTE"))
}

// SizeAndValueRating is the resolver for the sizeAndValueRating field.
func (r *tenderWhereInputResolver) SizeAndValueRating(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRating - sizeAndValueRating"))
}

// SizeAndValueRatingNeq is the resolver for the sizeAndValueRatingNEQ field.
func (r *tenderWhereInputResolver) SizeAndValueRatingNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingNeq - sizeAndValueRatingNEQ"))
}

// SizeAndValueRatingIn is the resolver for the sizeAndValueRatingIn field.
func (r *tenderWhereInputResolver) SizeAndValueRatingIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingIn - sizeAndValueRatingIn"))
}

// SizeAndValueRatingNotIn is the resolver for the sizeAndValueRatingNotIn field.
func (r *tenderWhereInputResolver) SizeAndValueRatingNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingNotIn - sizeAndValueRatingNotIn"))
}

// SizeAndValueRatingGt is the resolver for the sizeAndValueRatingGT field.
func (r *tenderWhereInputResolver) SizeAndValueRatingGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingGt - sizeAndValueRatingGT"))
}

// SizeAndValueRatingGte is the resolver for the sizeAndValueRatingGTE field.
func (r *tenderWhereInputResolver) SizeAndValueRatingGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingGte - sizeAndValueRatingGTE"))
}

// SizeAndValueRatingLt is the resolver for the sizeAndValueRatingLT field.
func (r *tenderWhereInputResolver) SizeAndValueRatingLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingLt - sizeAndValueRatingLT"))
}

// SizeAndValueRatingLte is the resolver for the sizeAndValueRatingLTE field.
func (r *tenderWhereInputResolver) SizeAndValueRatingLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRatingLte - sizeAndValueRatingLTE"))
}

// CreditAndPaymentRating is the resolver for the creditAndPaymentRating field.
func (r *tenderWhereInputResolver) CreditAndPaymentRating(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRating - creditAndPaymentRating"))
}

// CreditAndPaymentRatingNeq is the resolver for the creditAndPaymentRatingNEQ field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingNeq - creditAndPaymentRatingNEQ"))
}

// CreditAndPaymentRatingIn is the resolver for the creditAndPaymentRatingIn field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingIn - creditAndPaymentRatingIn"))
}

// CreditAndPaymentRatingNotIn is the resolver for the creditAndPaymentRatingNotIn field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingNotIn - creditAndPaymentRatingNotIn"))
}

// CreditAndPaymentRatingGt is the resolver for the creditAndPaymentRatingGT field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingGt - creditAndPaymentRatingGT"))
}

// CreditAndPaymentRatingGte is the resolver for the creditAndPaymentRatingGTE field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingGte - creditAndPaymentRatingGTE"))
}

// CreditAndPaymentRatingLt is the resolver for the creditAndPaymentRatingLT field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingLt - creditAndPaymentRatingLT"))
}

// CreditAndPaymentRatingLte is the resolver for the creditAndPaymentRatingLTE field.
func (r *tenderWhereInputResolver) CreditAndPaymentRatingLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRatingLte - creditAndPaymentRatingLTE"))
}

// TimeLimitRating is the resolver for the timeLimitRating field.
func (r *tenderWhereInputResolver) TimeLimitRating(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRating - timeLimitRating"))
}

// TimeLimitRatingNeq is the resolver for the timeLimitRatingNEQ field.
func (r *tenderWhereInputResolver) TimeLimitRatingNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingNeq - timeLimitRatingNEQ"))
}

// TimeLimitRatingIn is the resolver for the timeLimitRatingIn field.
func (r *tenderWhereInputResolver) TimeLimitRatingIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingIn - timeLimitRatingIn"))
}

// TimeLimitRatingNotIn is the resolver for the timeLimitRatingNotIn field.
func (r *tenderWhereInputResolver) TimeLimitRatingNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingNotIn - timeLimitRatingNotIn"))
}

// TimeLimitRatingGt is the resolver for the timeLimitRatingGT field.
func (r *tenderWhereInputResolver) TimeLimitRatingGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingGt - timeLimitRatingGT"))
}

// TimeLimitRatingGte is the resolver for the timeLimitRatingGTE field.
func (r *tenderWhereInputResolver) TimeLimitRatingGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingGte - timeLimitRatingGTE"))
}

// TimeLimitRatingLt is the resolver for the timeLimitRatingLT field.
func (r *tenderWhereInputResolver) TimeLimitRatingLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingLt - timeLimitRatingLT"))
}

// TimeLimitRatingLte is the resolver for the timeLimitRatingLTE field.
func (r *tenderWhereInputResolver) TimeLimitRatingLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRatingLte - timeLimitRatingLTE"))
}

// CustomerRelationshipRating is the resolver for the customerRelationshipRating field.
func (r *tenderWhereInputResolver) CustomerRelationshipRating(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRating - customerRelationshipRating"))
}

// CustomerRelationshipRatingNeq is the resolver for the customerRelationshipRatingNEQ field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingNeq - customerRelationshipRatingNEQ"))
}

// CustomerRelationshipRatingIn is the resolver for the customerRelationshipRatingIn field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingIn - customerRelationshipRatingIn"))
}

// CustomerRelationshipRatingNotIn is the resolver for the customerRelationshipRatingNotIn field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingNotIn - customerRelationshipRatingNotIn"))
}

// CustomerRelationshipRatingGt is the resolver for the customerRelationshipRatingGT field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingGt - customerRelationshipRatingGT"))
}

// CustomerRelationshipRatingGte is the resolver for the customerRelationshipRatingGTE field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingGte - customerRelationshipRatingGTE"))
}

// CustomerRelationshipRatingLt is the resolver for the customerRelationshipRatingLT field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingLt - customerRelationshipRatingLT"))
}

// CustomerRelationshipRatingLte is the resolver for the customerRelationshipRatingLTE field.
func (r *tenderWhereInputResolver) CustomerRelationshipRatingLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRatingLte - customerRelationshipRatingLTE"))
}

// CompetitivePartnershipRating is the resolver for the competitivePartnershipRating field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRating(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRating - competitivePartnershipRating"))
}

// CompetitivePartnershipRatingNeq is the resolver for the competitivePartnershipRatingNEQ field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingNeq(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingNeq - competitivePartnershipRatingNEQ"))
}

// CompetitivePartnershipRatingIn is the resolver for the competitivePartnershipRatingIn field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingIn - competitivePartnershipRatingIn"))
}

// CompetitivePartnershipRatingNotIn is the resolver for the competitivePartnershipRatingNotIn field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingNotIn(ctx context.Context, obj *ent.TenderWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingNotIn - competitivePartnershipRatingNotIn"))
}

// CompetitivePartnershipRatingGt is the resolver for the competitivePartnershipRatingGT field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingGt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingGt - competitivePartnershipRatingGT"))
}

// CompetitivePartnershipRatingGte is the resolver for the competitivePartnershipRatingGTE field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingGte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingGte - competitivePartnershipRatingGTE"))
}

// CompetitivePartnershipRatingLt is the resolver for the competitivePartnershipRatingLT field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingLt(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingLt - competitivePartnershipRatingLT"))
}

// CompetitivePartnershipRatingLte is the resolver for the competitivePartnershipRatingLTE field.
func (r *tenderWhereInputResolver) CompetitivePartnershipRatingLte(ctx context.Context, obj *ent.TenderWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRatingLte - competitivePartnershipRatingLTE"))
}

// OwnerType is the resolver for the ownerType field.
func (r *updateCustomerInputResolver) OwnerType(ctx context.Context, obj *ent.UpdateCustomerInput, data *int) error {
	panic(fmt.Errorf("not implemented: OwnerType - ownerType"))
}

// Industry is the resolver for the industry field.
func (r *updateCustomerInputResolver) Industry(ctx context.Context, obj *ent.UpdateCustomerInput, data *int) error {
	panic(fmt.Errorf("not implemented: Industry - industry"))
}

// Size is the resolver for the size field.
func (r *updateCustomerInputResolver) Size(ctx context.Context, obj *ent.UpdateCustomerInput, data *int) error {
	panic(fmt.Errorf("not implemented: Size - size"))
}

// Status is the resolver for the status field.
func (r *updateTenderInputResolver) Status(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// SizeAndValueRating is the resolver for the sizeAndValueRating field.
func (r *updateTenderInputResolver) SizeAndValueRating(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: SizeAndValueRating - sizeAndValueRating"))
}

// CreditAndPaymentRating is the resolver for the creditAndPaymentRating field.
func (r *updateTenderInputResolver) CreditAndPaymentRating(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CreditAndPaymentRating - creditAndPaymentRating"))
}

// TimeLimitRating is the resolver for the timeLimitRating field.
func (r *updateTenderInputResolver) TimeLimitRating(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: TimeLimitRating - timeLimitRating"))
}

// CustomerRelationshipRating is the resolver for the customerRelationshipRating field.
func (r *updateTenderInputResolver) CustomerRelationshipRating(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CustomerRelationshipRating - customerRelationshipRating"))
}

// CompetitivePartnershipRating is the resolver for the competitivePartnershipRating field.
func (r *updateTenderInputResolver) CompetitivePartnershipRating(ctx context.Context, obj *ent.UpdateTenderInput, data *int) error {
	panic(fmt.Errorf("not implemented: CompetitivePartnershipRating - competitivePartnershipRating"))
}

// Customer returns generated.CustomerResolver implementation.
func (r *Resolver) Customer() generated.CustomerResolver { return &customerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Tender returns generated.TenderResolver implementation.
func (r *Resolver) Tender() generated.TenderResolver { return &tenderResolver{r} }

// CreateCustomerInput returns generated.CreateCustomerInputResolver implementation.
func (r *Resolver) CreateCustomerInput() generated.CreateCustomerInputResolver {
	return &createCustomerInputResolver{r}
}

// CreateTenderInput returns generated.CreateTenderInputResolver implementation.
func (r *Resolver) CreateTenderInput() generated.CreateTenderInputResolver {
	return &createTenderInputResolver{r}
}

// CustomerWhereInput returns generated.CustomerWhereInputResolver implementation.
func (r *Resolver) CustomerWhereInput() generated.CustomerWhereInputResolver {
	return &customerWhereInputResolver{r}
}

// TenderWhereInput returns generated.TenderWhereInputResolver implementation.
func (r *Resolver) TenderWhereInput() generated.TenderWhereInputResolver {
	return &tenderWhereInputResolver{r}
}

// UpdateCustomerInput returns generated.UpdateCustomerInputResolver implementation.
func (r *Resolver) UpdateCustomerInput() generated.UpdateCustomerInputResolver {
	return &updateCustomerInputResolver{r}
}

// UpdateTenderInput returns generated.UpdateTenderInputResolver implementation.
func (r *Resolver) UpdateTenderInput() generated.UpdateTenderInputResolver {
	return &updateTenderInputResolver{r}
}

type customerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type tenderResolver struct{ *Resolver }
type createCustomerInputResolver struct{ *Resolver }
type createTenderInputResolver struct{ *Resolver }
type customerWhereInputResolver struct{ *Resolver }
type tenderWhereInputResolver struct{ *Resolver }
type updateCustomerInputResolver struct{ *Resolver }
type updateTenderInputResolver struct{ *Resolver }
