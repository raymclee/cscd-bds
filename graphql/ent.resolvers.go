package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"cscd-bds/graphql/generated"
	"cscd-bds/store/ent"
	"cscd-bds/store/ent/schema/xid"

	"entgo.io/contrib/entgql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id xid.ID) (ent.Noder, error) {
	return r.store.Noder(ctx, id, ent.WithNodeType(ent.IDToType))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []*xid.ID) ([]ent.Noder, error) {
	idx := make([]xid.ID, len(ids))
	for i, id := range ids {
		idx[i] = *id
	}
	return r.store.Noders(ctx, idx, ent.WithNodeType(ent.IDToType))
}

// Opportunities is the resolver for the opportunities field.
func (r *queryResolver) Opportunities(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.OpportunityWhereInput) (*ent.OpportunityConnection, error) {
	return r.store.Opportunity.Query().Paginate(ctx, after, first, before, last, ent.WithOpportunityFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.store.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserFilter(where.Filter))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
