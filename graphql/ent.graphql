directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Area implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  code: String!
  customers: [Customer!]
  tenders: [Tender!]
  sales: [User!]
}
"""
A connection to a list of items.
"""
type AreaConnection {
  """
  A list of edges.
  """
  edges: [AreaEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AreaEdge {
  """
  The item at the end of the edge.
  """
  node: Area
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AreaWhereInput is used for filtering Area objects.
Input was generated by ent.
"""
input AreaWhereInput {
  not: AreaWhereInput
  and: [AreaWhereInput!]
  or: [AreaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  sales edge predicates
  """
  hasSales: Boolean
  hasSalesWith: [UserWhereInput!]
}
type City implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  name: String!
  provinceID: ID!
  districts: [District!]
  province: Province!
}
"""
A connection to a list of items.
"""
type CityConnection {
  """
  A list of edges.
  """
  edges: [CityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CityEdge {
  """
  The item at the end of the edge.
  """
  node: City
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CityWhereInput is used for filtering City objects.
Input was generated by ent.
"""
input CityWhereInput {
  not: CityWhereInput
  and: [CityWhereInput!]
  or: [CityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
}
type Country implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  provinces: [Province!]
}
"""
A connection to a list of items.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  provinces edge predicates
  """
  hasProvinces: Boolean
  hasProvincesWith: [ProvinceWhereInput!]
}
"""
CreateAreaInput is used for create Area object.
Input was generated by ent.
"""
input CreateAreaInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  code: String!
  customerIDs: [ID!]
  tenderIDs: [ID!]
  saleIDs: [ID!]
}
"""
CreateCityInput is used for create City object.
Input was generated by ent.
"""
input CreateCityInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  name: String!
  districtIDs: [ID!]
  provinceID: ID!
}
"""
CreateCountryInput is used for create Country object.
Input was generated by ent.
"""
input CreateCountryInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  provinceIDs: [ID!]
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  ownerType: Int
  industry: Int!
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  tenderIDs: [ID!]
  salesID: ID
  createdByID: ID!
}
"""
CreateDistrictInput is used for create District object.
Input was generated by ent.
"""
input CreateDistrictInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
}
"""
CreateProvinceInput is used for create Province object.
Input was generated by ent.
"""
input CreateProvinceInput {
  createdAt: Time
  updatedAt: Time
  adcode: Int!
  name: String!
  districtIDs: [ID!]
  cityIDs: [ID!]
  countryID: ID!
}
"""
CreateTenderInput is used for create Tender object.
Input was generated by ent.
"""
input CreateTenderInput {
  createdAt: Time
  updatedAt: Time
  code: String!
  status: Int
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  findDate: Time!
  sizeAndValueRating: Int
  creditAndPaymentRating: Int
  timeLimitRating: Int
  customerRelationshipRating: Int
  competitivePartnershipRating: Int
  prepareToBid: Boolean
  projectCode: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  projectType: String
  attachements: [String!]
  geoLocation: String
  remark: String
  images: [String!]
  areaID: ID!
  customerID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  email: String!
  username: String!
  openID: String!
  avatarURL: String!
  disabled: Boolean
  areaIDs: [ID!]
  customerIDs: [ID!]
  leaderID: ID
  teamMemberIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  ownerType: Int
  industry: Int!
  size: Int
  contactPerson: String
  contactPersonPosition: String
  contactPersonPhone: String
  contactPersonEmail: String
  areaID: ID!
  salesID: ID
  createdByUserID: ID!
  area: Area!
  tenders: [Tender!]
  sales: User
  createdBy: User!
}
"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  A list of edges.
  """
  edges: [CustomerEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  owner_type field predicates
  """
  ownerType: Int
  ownerTypeNEQ: Int
  ownerTypeIn: [Int!]
  ownerTypeNotIn: [Int!]
  ownerTypeGT: Int
  ownerTypeGTE: Int
  ownerTypeLT: Int
  ownerTypeLTE: Int
  ownerTypeIsNil: Boolean
  ownerTypeNotNil: Boolean
  """
  industry field predicates
  """
  industry: Int
  industryNEQ: Int
  industryIn: [Int!]
  industryNotIn: [Int!]
  industryGT: Int
  industryGTE: Int
  industryLT: Int
  industryLTE: Int
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  sizeIsNil: Boolean
  sizeNotNil: Boolean
  """
  contact_person field predicates
  """
  contactPerson: String
  contactPersonNEQ: String
  contactPersonIn: [String!]
  contactPersonNotIn: [String!]
  contactPersonGT: String
  contactPersonGTE: String
  contactPersonLT: String
  contactPersonLTE: String
  contactPersonContains: String
  contactPersonHasPrefix: String
  contactPersonHasSuffix: String
  contactPersonIsNil: Boolean
  contactPersonNotNil: Boolean
  contactPersonEqualFold: String
  contactPersonContainsFold: String
  """
  contact_person_position field predicates
  """
  contactPersonPosition: String
  contactPersonPositionNEQ: String
  contactPersonPositionIn: [String!]
  contactPersonPositionNotIn: [String!]
  contactPersonPositionGT: String
  contactPersonPositionGTE: String
  contactPersonPositionLT: String
  contactPersonPositionLTE: String
  contactPersonPositionContains: String
  contactPersonPositionHasPrefix: String
  contactPersonPositionHasSuffix: String
  contactPersonPositionIsNil: Boolean
  contactPersonPositionNotNil: Boolean
  contactPersonPositionEqualFold: String
  contactPersonPositionContainsFold: String
  """
  contact_person_phone field predicates
  """
  contactPersonPhone: String
  contactPersonPhoneNEQ: String
  contactPersonPhoneIn: [String!]
  contactPersonPhoneNotIn: [String!]
  contactPersonPhoneGT: String
  contactPersonPhoneGTE: String
  contactPersonPhoneLT: String
  contactPersonPhoneLTE: String
  contactPersonPhoneContains: String
  contactPersonPhoneHasPrefix: String
  contactPersonPhoneHasSuffix: String
  contactPersonPhoneIsNil: Boolean
  contactPersonPhoneNotNil: Boolean
  contactPersonPhoneEqualFold: String
  contactPersonPhoneContainsFold: String
  """
  contact_person_email field predicates
  """
  contactPersonEmail: String
  contactPersonEmailNEQ: String
  contactPersonEmailIn: [String!]
  contactPersonEmailNotIn: [String!]
  contactPersonEmailGT: String
  contactPersonEmailGTE: String
  contactPersonEmailLT: String
  contactPersonEmailLTE: String
  contactPersonEmailContains: String
  contactPersonEmailHasPrefix: String
  contactPersonEmailHasSuffix: String
  contactPersonEmailIsNil: Boolean
  contactPersonEmailNotNil: Boolean
  contactPersonEmailEqualFold: String
  contactPersonEmailContainsFold: String
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  """
  sales_id field predicates
  """
  salesID: ID
  salesIDNEQ: ID
  salesIDIn: [ID!]
  salesIDNotIn: [ID!]
  salesIDGT: ID
  salesIDGTE: ID
  salesIDLT: ID
  salesIDLTE: ID
  salesIDIsNil: Boolean
  salesIDNotNil: Boolean
  """
  created_by_user_id field predicates
  """
  createdByUserID: ID
  createdByUserIDNEQ: ID
  createdByUserIDIn: [ID!]
  createdByUserIDNotIn: [ID!]
  createdByUserIDGT: ID
  createdByUserIDGTE: ID
  createdByUserIDLT: ID
  createdByUserIDLTE: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  tenders edge predicates
  """
  hasTenders: Boolean
  hasTendersWith: [TenderWhereInput!]
  """
  sales edge predicates
  """
  hasSales: Boolean
  hasSalesWith: [UserWhereInput!]
  """
  created_by edge predicates
  """
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
}
type District implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  provCode: Int!
  cityCode: Int!
  name: String!
  provinceID: ID!
  cityID: ID
  province: Province!
  city: City
}
"""
A connection to a list of items.
"""
type DistrictConnection {
  """
  A list of edges.
  """
  edges: [DistrictEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DistrictEdge {
  """
  The item at the end of the edge.
  """
  node: District
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DistrictWhereInput is used for filtering District objects.
Input was generated by ent.
"""
input DistrictWhereInput {
  not: DistrictWhereInput
  and: [DistrictWhereInput!]
  or: [DistrictWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  prov_code field predicates
  """
  provCode: Int
  provCodeNEQ: Int
  provCodeIn: [Int!]
  provCodeNotIn: [Int!]
  provCodeGT: Int
  provCodeGTE: Int
  provCodeLT: Int
  provCodeLTE: Int
  """
  city_code field predicates
  """
  cityCode: Int
  cityCodeNEQ: Int
  cityCodeIn: [Int!]
  cityCodeNotIn: [Int!]
  cityCodeGT: Int
  cityCodeGTE: Int
  cityCodeLT: Int
  cityCodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  province_id field predicates
  """
  provinceID: ID
  provinceIDNEQ: ID
  provinceIDIn: [ID!]
  provinceIDNotIn: [ID!]
  provinceIDGT: ID
  provinceIDGTE: ID
  provinceIDLT: ID
  provinceIDLTE: ID
  """
  city_id field predicates
  """
  cityID: ID
  cityIDNEQ: ID
  cityIDIn: [ID!]
  cityIDNotIn: [ID!]
  cityIDGT: ID
  cityIDGTE: ID
  cityIDLT: ID
  cityIDLTE: ID
  cityIDIsNil: Boolean
  cityIDNotNil: Boolean
  """
  province edge predicates
  """
  hasProvince: Boolean
  hasProvinceWith: [ProvinceWhereInput!]
  """
  city edge predicates
  """
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "cscd-bds/store/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Province implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  adcode: Int!
  name: String!
  countryID: ID!
  districts: [District!]
  cities: [City!]
  country: Country!
}
"""
A connection to a list of items.
"""
type ProvinceConnection {
  """
  A list of edges.
  """
  edges: [ProvinceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProvinceEdge {
  """
  The item at the end of the edge.
  """
  node: Province
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProvinceWhereInput is used for filtering Province objects.
Input was generated by ent.
"""
input ProvinceWhereInput {
  not: ProvinceWhereInput
  and: [ProvinceWhereInput!]
  or: [ProvinceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  adcode field predicates
  """
  adcode: Int
  adcodeNEQ: Int
  adcodeIn: [Int!]
  adcodeNotIn: [Int!]
  adcodeGT: Int
  adcodeGTE: Int
  adcodeLT: Int
  adcodeLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  country_id field predicates
  """
  countryID: ID
  countryIDNEQ: ID
  countryIDIn: [ID!]
  countryIDNotIn: [ID!]
  countryIDGT: ID
  countryIDGTE: ID
  countryIDLT: ID
  countryIDLTE: ID
  """
  districts edge predicates
  """
  hasDistricts: Boolean
  hasDistrictsWith: [DistrictWhereInput!]
  """
  cities edge predicates
  """
  hasCities: Boolean
  hasCitiesWith: [CityWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  areas(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Areas returned from the connection.
    """
    where: AreaWhereInput
  ): AreaConnection!
  cities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Cities returned from the connection.
    """
    where: CityWhereInput
  ): CityConnection!
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Countries returned from the connection.
    """
    where: CountryWhereInput
  ): CountryConnection!
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Districts returned from the connection.
    """
    where: DistrictWhereInput
  ): DistrictConnection!
  provinces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Provinces returned from the connection.
    """
    where: ProvinceWhereInput
  ): ProvinceConnection!
  tenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Tenders returned from the connection.
    """
    where: TenderWhereInput
  ): TenderConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Tender implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  code: String!
  status: Int!
  name: String!
  estimatedAmount: Float
  tenderDate: Time
  findDate: Time!
  sizeAndValueRating: Int
  creditAndPaymentRating: Int
  timeLimitRating: Int
  customerRelationshipRating: Int
  competitivePartnershipRating: Int
  prepareToBid: Boolean!
  projectCode: String
  projectDefinition: String
  estimatedProjectStartDate: Time
  estimatedProjectEndDate: Time
  projectType: String
  attachements: [String!]
  geoLocation: String
  remark: String
  images: [String!]
  areaID: ID!
  customerID: ID!
  area: Area!
  customer: Customer!
}
"""
A connection to a list of items.
"""
type TenderConnection {
  """
  A list of edges.
  """
  edges: [TenderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenderEdge {
  """
  The item at the end of the edge.
  """
  node: Tender
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TenderWhereInput is used for filtering Tender objects.
Input was generated by ent.
"""
input TenderWhereInput {
  not: TenderWhereInput
  and: [TenderWhereInput!]
  or: [TenderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  status field predicates
  """
  status: Int
  statusNEQ: Int
  statusIn: [Int!]
  statusNotIn: [Int!]
  statusGT: Int
  statusGTE: Int
  statusLT: Int
  statusLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  estimated_amount field predicates
  """
  estimatedAmount: Float
  estimatedAmountNEQ: Float
  estimatedAmountIn: [Float!]
  estimatedAmountNotIn: [Float!]
  estimatedAmountGT: Float
  estimatedAmountGTE: Float
  estimatedAmountLT: Float
  estimatedAmountLTE: Float
  estimatedAmountIsNil: Boolean
  estimatedAmountNotNil: Boolean
  """
  tender_date field predicates
  """
  tenderDate: Time
  tenderDateNEQ: Time
  tenderDateIn: [Time!]
  tenderDateNotIn: [Time!]
  tenderDateGT: Time
  tenderDateGTE: Time
  tenderDateLT: Time
  tenderDateLTE: Time
  tenderDateIsNil: Boolean
  tenderDateNotNil: Boolean
  """
  find_date field predicates
  """
  findDate: Time
  findDateNEQ: Time
  findDateIn: [Time!]
  findDateNotIn: [Time!]
  findDateGT: Time
  findDateGTE: Time
  findDateLT: Time
  findDateLTE: Time
  """
  size_and_value_rating field predicates
  """
  sizeAndValueRating: Int
  sizeAndValueRatingNEQ: Int
  sizeAndValueRatingIn: [Int!]
  sizeAndValueRatingNotIn: [Int!]
  sizeAndValueRatingGT: Int
  sizeAndValueRatingGTE: Int
  sizeAndValueRatingLT: Int
  sizeAndValueRatingLTE: Int
  sizeAndValueRatingIsNil: Boolean
  sizeAndValueRatingNotNil: Boolean
  """
  credit_and_payment_rating field predicates
  """
  creditAndPaymentRating: Int
  creditAndPaymentRatingNEQ: Int
  creditAndPaymentRatingIn: [Int!]
  creditAndPaymentRatingNotIn: [Int!]
  creditAndPaymentRatingGT: Int
  creditAndPaymentRatingGTE: Int
  creditAndPaymentRatingLT: Int
  creditAndPaymentRatingLTE: Int
  creditAndPaymentRatingIsNil: Boolean
  creditAndPaymentRatingNotNil: Boolean
  """
  time_limit_rating field predicates
  """
  timeLimitRating: Int
  timeLimitRatingNEQ: Int
  timeLimitRatingIn: [Int!]
  timeLimitRatingNotIn: [Int!]
  timeLimitRatingGT: Int
  timeLimitRatingGTE: Int
  timeLimitRatingLT: Int
  timeLimitRatingLTE: Int
  timeLimitRatingIsNil: Boolean
  timeLimitRatingNotNil: Boolean
  """
  customer_relationship_rating field predicates
  """
  customerRelationshipRating: Int
  customerRelationshipRatingNEQ: Int
  customerRelationshipRatingIn: [Int!]
  customerRelationshipRatingNotIn: [Int!]
  customerRelationshipRatingGT: Int
  customerRelationshipRatingGTE: Int
  customerRelationshipRatingLT: Int
  customerRelationshipRatingLTE: Int
  customerRelationshipRatingIsNil: Boolean
  customerRelationshipRatingNotNil: Boolean
  """
  competitive_partnership_rating field predicates
  """
  competitivePartnershipRating: Int
  competitivePartnershipRatingNEQ: Int
  competitivePartnershipRatingIn: [Int!]
  competitivePartnershipRatingNotIn: [Int!]
  competitivePartnershipRatingGT: Int
  competitivePartnershipRatingGTE: Int
  competitivePartnershipRatingLT: Int
  competitivePartnershipRatingLTE: Int
  competitivePartnershipRatingIsNil: Boolean
  competitivePartnershipRatingNotNil: Boolean
  """
  prepare_to_bid field predicates
  """
  prepareToBid: Boolean
  prepareToBidNEQ: Boolean
  """
  project_code field predicates
  """
  projectCode: String
  projectCodeNEQ: String
  projectCodeIn: [String!]
  projectCodeNotIn: [String!]
  projectCodeGT: String
  projectCodeGTE: String
  projectCodeLT: String
  projectCodeLTE: String
  projectCodeContains: String
  projectCodeHasPrefix: String
  projectCodeHasSuffix: String
  projectCodeIsNil: Boolean
  projectCodeNotNil: Boolean
  projectCodeEqualFold: String
  projectCodeContainsFold: String
  """
  project_definition field predicates
  """
  projectDefinition: String
  projectDefinitionNEQ: String
  projectDefinitionIn: [String!]
  projectDefinitionNotIn: [String!]
  projectDefinitionGT: String
  projectDefinitionGTE: String
  projectDefinitionLT: String
  projectDefinitionLTE: String
  projectDefinitionContains: String
  projectDefinitionHasPrefix: String
  projectDefinitionHasSuffix: String
  projectDefinitionIsNil: Boolean
  projectDefinitionNotNil: Boolean
  projectDefinitionEqualFold: String
  projectDefinitionContainsFold: String
  """
  estimated_project_start_date field predicates
  """
  estimatedProjectStartDate: Time
  estimatedProjectStartDateNEQ: Time
  estimatedProjectStartDateIn: [Time!]
  estimatedProjectStartDateNotIn: [Time!]
  estimatedProjectStartDateGT: Time
  estimatedProjectStartDateGTE: Time
  estimatedProjectStartDateLT: Time
  estimatedProjectStartDateLTE: Time
  estimatedProjectStartDateIsNil: Boolean
  estimatedProjectStartDateNotNil: Boolean
  """
  estimated_project_end_date field predicates
  """
  estimatedProjectEndDate: Time
  estimatedProjectEndDateNEQ: Time
  estimatedProjectEndDateIn: [Time!]
  estimatedProjectEndDateNotIn: [Time!]
  estimatedProjectEndDateGT: Time
  estimatedProjectEndDateGTE: Time
  estimatedProjectEndDateLT: Time
  estimatedProjectEndDateLTE: Time
  estimatedProjectEndDateIsNil: Boolean
  estimatedProjectEndDateNotNil: Boolean
  """
  project_type field predicates
  """
  projectType: String
  projectTypeNEQ: String
  projectTypeIn: [String!]
  projectTypeNotIn: [String!]
  projectTypeGT: String
  projectTypeGTE: String
  projectTypeLT: String
  projectTypeLTE: String
  projectTypeContains: String
  projectTypeHasPrefix: String
  projectTypeHasSuffix: String
  projectTypeIsNil: Boolean
  projectTypeNotNil: Boolean
  projectTypeEqualFold: String
  projectTypeContainsFold: String
  """
  geo_location field predicates
  """
  geoLocation: String
  geoLocationNEQ: String
  geoLocationIn: [String!]
  geoLocationNotIn: [String!]
  geoLocationGT: String
  geoLocationGTE: String
  geoLocationLT: String
  geoLocationLTE: String
  geoLocationContains: String
  geoLocationHasPrefix: String
  geoLocationHasSuffix: String
  geoLocationIsNil: Boolean
  geoLocationNotNil: Boolean
  geoLocationEqualFold: String
  geoLocationContainsFold: String
  """
  remark field predicates
  """
  remark: String
  remarkNEQ: String
  remarkIn: [String!]
  remarkNotIn: [String!]
  remarkGT: String
  remarkGTE: String
  remarkLT: String
  remarkLTE: String
  remarkContains: String
  remarkHasPrefix: String
  remarkHasSuffix: String
  remarkIsNil: Boolean
  remarkNotNil: Boolean
  remarkEqualFold: String
  remarkContainsFold: String
  """
  area_id field predicates
  """
  areaID: ID
  areaIDNEQ: ID
  areaIDIn: [ID!]
  areaIDNotIn: [ID!]
  areaIDGT: ID
  areaIDGTE: ID
  areaIDLT: ID
  areaIDLTE: ID
  """
  customer_id field predicates
  """
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDGT: ID
  customerIDGTE: ID
  customerIDLT: ID
  customerIDLTE: ID
  """
  area edge predicates
  """
  hasArea: Boolean
  hasAreaWith: [AreaWhereInput!]
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
}
"""
UpdateAreaInput is used for update Area object.
Input was generated by ent.
"""
input UpdateAreaInput {
  updatedAt: Time
  name: String
  code: String
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  addSaleIDs: [ID!]
  removeSaleIDs: [ID!]
  clearSales: Boolean
}
"""
UpdateCityInput is used for update City object.
Input was generated by ent.
"""
input UpdateCityInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  provinceID: ID
}
"""
UpdateCountryInput is used for update Country object.
Input was generated by ent.
"""
input UpdateCountryInput {
  updatedAt: Time
  adcode: Int
  name: String
  addProvinceIDs: [ID!]
  removeProvinceIDs: [ID!]
  clearProvinces: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  updatedAt: Time
  name: String
  ownerType: Int
  clearOwnerType: Boolean
  industry: Int
  size: Int
  clearSize: Boolean
  contactPerson: String
  clearContactPerson: Boolean
  contactPersonPosition: String
  clearContactPersonPosition: Boolean
  contactPersonPhone: String
  clearContactPersonPhone: Boolean
  contactPersonEmail: String
  clearContactPersonEmail: Boolean
  areaID: ID
  addTenderIDs: [ID!]
  removeTenderIDs: [ID!]
  clearTenders: Boolean
  salesID: ID
  clearSales: Boolean
  createdByID: ID
}
"""
UpdateDistrictInput is used for update District object.
Input was generated by ent.
"""
input UpdateDistrictInput {
  updatedAt: Time
  adcode: Int
  provCode: Int
  cityCode: Int
  name: String
  provinceID: ID
  cityID: ID
  clearCity: Boolean
}
"""
UpdateProvinceInput is used for update Province object.
Input was generated by ent.
"""
input UpdateProvinceInput {
  updatedAt: Time
  adcode: Int
  name: String
  addDistrictIDs: [ID!]
  removeDistrictIDs: [ID!]
  clearDistricts: Boolean
  addCityIDs: [ID!]
  removeCityIDs: [ID!]
  clearCities: Boolean
  countryID: ID
}
"""
UpdateTenderInput is used for update Tender object.
Input was generated by ent.
"""
input UpdateTenderInput {
  updatedAt: Time
  code: String
  status: Int
  name: String
  estimatedAmount: Float
  clearEstimatedAmount: Boolean
  tenderDate: Time
  clearTenderDate: Boolean
  findDate: Time
  sizeAndValueRating: Int
  clearSizeAndValueRating: Boolean
  creditAndPaymentRating: Int
  clearCreditAndPaymentRating: Boolean
  timeLimitRating: Int
  clearTimeLimitRating: Boolean
  customerRelationshipRating: Int
  clearCustomerRelationshipRating: Boolean
  competitivePartnershipRating: Int
  clearCompetitivePartnershipRating: Boolean
  prepareToBid: Boolean
  projectCode: String
  clearProjectCode: Boolean
  projectDefinition: String
  clearProjectDefinition: Boolean
  estimatedProjectStartDate: Time
  clearEstimatedProjectStartDate: Boolean
  estimatedProjectEndDate: Time
  clearEstimatedProjectEndDate: Boolean
  projectType: String
  clearProjectType: Boolean
  attachements: [String!]
  appendAttachements: [String!]
  clearAttachements: Boolean
  geoLocation: String
  clearGeoLocation: Boolean
  remark: String
  clearRemark: Boolean
  images: [String!]
  appendImages: [String!]
  clearImages: Boolean
  areaID: ID
  customerID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  name: String
  email: String
  username: String
  openID: String
  avatarURL: String
  disabled: Boolean
  addAreaIDs: [ID!]
  removeAreaIDs: [ID!]
  clearAreas: Boolean
  addCustomerIDs: [ID!]
  removeCustomerIDs: [ID!]
  clearCustomers: Boolean
  leaderID: ID
  clearLeader: Boolean
  addTeamMemberIDs: [ID!]
  removeTeamMemberIDs: [ID!]
  clearTeamMembers: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  email: String!
  username: String!
  openID: String!
  avatarURL: String!
  disabled: Boolean!
  leaderID: ID
  areas: [Area!]
  customers: [Customer!]
  leader: User
  teamMembers: [User!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  open_id field predicates
  """
  openID: String
  openIDNEQ: String
  openIDIn: [String!]
  openIDNotIn: [String!]
  openIDGT: String
  openIDGTE: String
  openIDLT: String
  openIDLTE: String
  openIDContains: String
  openIDHasPrefix: String
  openIDHasSuffix: String
  openIDEqualFold: String
  openIDContainsFold: String
  """
  avatar_url field predicates
  """
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """
  disabled field predicates
  """
  disabled: Boolean
  disabledNEQ: Boolean
  """
  leader_id field predicates
  """
  leaderID: ID
  leaderIDNEQ: ID
  leaderIDIn: [ID!]
  leaderIDNotIn: [ID!]
  leaderIDGT: ID
  leaderIDGTE: ID
  leaderIDLT: ID
  leaderIDLTE: ID
  leaderIDIsNil: Boolean
  leaderIDNotNil: Boolean
  """
  areas edge predicates
  """
  hasAreas: Boolean
  hasAreasWith: [AreaWhereInput!]
  """
  customers edge predicates
  """
  hasCustomers: Boolean
  hasCustomersWith: [CustomerWhereInput!]
  """
  leader edge predicates
  """
  hasLeader: Boolean
  hasLeaderWith: [UserWhereInput!]
  """
  team_members edge predicates
  """
  hasTeamMembers: Boolean
  hasTeamMembersWith: [UserWhereInput!]
}
